
microros_test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  080148b0  080148b0  000248b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154ec  080154ec  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  080154ec  080154ec  000254ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154f4  080154f4  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154f4  080154f4  000254f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154f8  080154f8  000254f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  080154fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010ae8  20000118  08015610  00030118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010c00  08015610  00030c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e63a  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004662  00000000  00000000  0004e77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00052de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00054578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e29  00000000  00000000  00055b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e003  00000000  00000000  0007d951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51a3  00000000  00000000  0009b954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  00180af7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f10  00000000  00000000  00180ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000118 	.word	0x20000118
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014894 	.word	0x08014894

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000011c 	.word	0x2000011c
 800020c:	08014894 	.word	0x08014894

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	; 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ldivmod>:
 80004fc:	b97b      	cbnz	r3, 800051e <__aeabi_ldivmod+0x22>
 80004fe:	b972      	cbnz	r2, 800051e <__aeabi_ldivmod+0x22>
 8000500:	2900      	cmp	r1, #0
 8000502:	bfbe      	ittt	lt
 8000504:	2000      	movlt	r0, #0
 8000506:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800050a:	e006      	blt.n	800051a <__aeabi_ldivmod+0x1e>
 800050c:	bf08      	it	eq
 800050e:	2800      	cmpeq	r0, #0
 8000510:	bf1c      	itt	ne
 8000512:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000516:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800051a:	f000 b9bf 	b.w	800089c <__aeabi_idiv0>
 800051e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000522:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000526:	2900      	cmp	r1, #0
 8000528:	db09      	blt.n	800053e <__aeabi_ldivmod+0x42>
 800052a:	2b00      	cmp	r3, #0
 800052c:	db1a      	blt.n	8000564 <__aeabi_ldivmod+0x68>
 800052e:	f000 f84d 	bl	80005cc <__udivmoddi4>
 8000532:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053a:	b004      	add	sp, #16
 800053c:	4770      	bx	lr
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	2b00      	cmp	r3, #0
 8000546:	db1b      	blt.n	8000580 <__aeabi_ldivmod+0x84>
 8000548:	f000 f840 	bl	80005cc <__udivmoddi4>
 800054c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000554:	b004      	add	sp, #16
 8000556:	4240      	negs	r0, r0
 8000558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055c:	4252      	negs	r2, r2
 800055e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000562:	4770      	bx	lr
 8000564:	4252      	negs	r2, r2
 8000566:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800056a:	f000 f82f 	bl	80005cc <__udivmoddi4>
 800056e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000576:	b004      	add	sp, #16
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	4770      	bx	lr
 8000580:	4252      	negs	r2, r2
 8000582:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000586:	f000 f821 	bl	80005cc <__udivmoddi4>
 800058a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800058e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000592:	b004      	add	sp, #16
 8000594:	4252      	negs	r2, r2
 8000596:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059a:	4770      	bx	lr

0800059c <__aeabi_uldivmod>:
 800059c:	b953      	cbnz	r3, 80005b4 <__aeabi_uldivmod+0x18>
 800059e:	b94a      	cbnz	r2, 80005b4 <__aeabi_uldivmod+0x18>
 80005a0:	2900      	cmp	r1, #0
 80005a2:	bf08      	it	eq
 80005a4:	2800      	cmpeq	r0, #0
 80005a6:	bf1c      	itt	ne
 80005a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005b0:	f000 b974 	b.w	800089c <__aeabi_idiv0>
 80005b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005bc:	f000 f806 	bl	80005cc <__udivmoddi4>
 80005c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005c8:	b004      	add	sp, #16
 80005ca:	4770      	bx	lr

080005cc <__udivmoddi4>:
 80005cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005d0:	9d08      	ldr	r5, [sp, #32]
 80005d2:	4604      	mov	r4, r0
 80005d4:	468e      	mov	lr, r1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d14d      	bne.n	8000676 <__udivmoddi4+0xaa>
 80005da:	428a      	cmp	r2, r1
 80005dc:	4694      	mov	ip, r2
 80005de:	d969      	bls.n	80006b4 <__udivmoddi4+0xe8>
 80005e0:	fab2 f282 	clz	r2, r2
 80005e4:	b152      	cbz	r2, 80005fc <__udivmoddi4+0x30>
 80005e6:	fa01 f302 	lsl.w	r3, r1, r2
 80005ea:	f1c2 0120 	rsb	r1, r2, #32
 80005ee:	fa20 f101 	lsr.w	r1, r0, r1
 80005f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f6:	ea41 0e03 	orr.w	lr, r1, r3
 80005fa:	4094      	lsls	r4, r2
 80005fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000600:	0c21      	lsrs	r1, r4, #16
 8000602:	fbbe f6f8 	udiv	r6, lr, r8
 8000606:	fa1f f78c 	uxth.w	r7, ip
 800060a:	fb08 e316 	mls	r3, r8, r6, lr
 800060e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000612:	fb06 f107 	mul.w	r1, r6, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d90a      	bls.n	8000630 <__udivmoddi4+0x64>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000622:	f080 811f 	bcs.w	8000864 <__udivmoddi4+0x298>
 8000626:	4299      	cmp	r1, r3
 8000628:	f240 811c 	bls.w	8000864 <__udivmoddi4+0x298>
 800062c:	3e02      	subs	r6, #2
 800062e:	4463      	add	r3, ip
 8000630:	1a5b      	subs	r3, r3, r1
 8000632:	b2a4      	uxth	r4, r4
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000640:	fb00 f707 	mul.w	r7, r0, r7
 8000644:	42a7      	cmp	r7, r4
 8000646:	d90a      	bls.n	800065e <__udivmoddi4+0x92>
 8000648:	eb1c 0404 	adds.w	r4, ip, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000650:	f080 810a 	bcs.w	8000868 <__udivmoddi4+0x29c>
 8000654:	42a7      	cmp	r7, r4
 8000656:	f240 8107 	bls.w	8000868 <__udivmoddi4+0x29c>
 800065a:	4464      	add	r4, ip
 800065c:	3802      	subs	r0, #2
 800065e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000662:	1be4      	subs	r4, r4, r7
 8000664:	2600      	movs	r6, #0
 8000666:	b11d      	cbz	r5, 8000670 <__udivmoddi4+0xa4>
 8000668:	40d4      	lsrs	r4, r2
 800066a:	2300      	movs	r3, #0
 800066c:	e9c5 4300 	strd	r4, r3, [r5]
 8000670:	4631      	mov	r1, r6
 8000672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000676:	428b      	cmp	r3, r1
 8000678:	d909      	bls.n	800068e <__udivmoddi4+0xc2>
 800067a:	2d00      	cmp	r5, #0
 800067c:	f000 80ef 	beq.w	800085e <__udivmoddi4+0x292>
 8000680:	2600      	movs	r6, #0
 8000682:	e9c5 0100 	strd	r0, r1, [r5]
 8000686:	4630      	mov	r0, r6
 8000688:	4631      	mov	r1, r6
 800068a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068e:	fab3 f683 	clz	r6, r3
 8000692:	2e00      	cmp	r6, #0
 8000694:	d14a      	bne.n	800072c <__udivmoddi4+0x160>
 8000696:	428b      	cmp	r3, r1
 8000698:	d302      	bcc.n	80006a0 <__udivmoddi4+0xd4>
 800069a:	4282      	cmp	r2, r0
 800069c:	f200 80f9 	bhi.w	8000892 <__udivmoddi4+0x2c6>
 80006a0:	1a84      	subs	r4, r0, r2
 80006a2:	eb61 0303 	sbc.w	r3, r1, r3
 80006a6:	2001      	movs	r0, #1
 80006a8:	469e      	mov	lr, r3
 80006aa:	2d00      	cmp	r5, #0
 80006ac:	d0e0      	beq.n	8000670 <__udivmoddi4+0xa4>
 80006ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80006b2:	e7dd      	b.n	8000670 <__udivmoddi4+0xa4>
 80006b4:	b902      	cbnz	r2, 80006b8 <__udivmoddi4+0xec>
 80006b6:	deff      	udf	#255	; 0xff
 80006b8:	fab2 f282 	clz	r2, r2
 80006bc:	2a00      	cmp	r2, #0
 80006be:	f040 8092 	bne.w	80007e6 <__udivmoddi4+0x21a>
 80006c2:	eba1 010c 	sub.w	r1, r1, ip
 80006c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ca:	fa1f fe8c 	uxth.w	lr, ip
 80006ce:	2601      	movs	r6, #1
 80006d0:	0c20      	lsrs	r0, r4, #16
 80006d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80006d6:	fb07 1113 	mls	r1, r7, r3, r1
 80006da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006de:	fb0e f003 	mul.w	r0, lr, r3
 80006e2:	4288      	cmp	r0, r1
 80006e4:	d908      	bls.n	80006f8 <__udivmoddi4+0x12c>
 80006e6:	eb1c 0101 	adds.w	r1, ip, r1
 80006ea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006ee:	d202      	bcs.n	80006f6 <__udivmoddi4+0x12a>
 80006f0:	4288      	cmp	r0, r1
 80006f2:	f200 80cb 	bhi.w	800088c <__udivmoddi4+0x2c0>
 80006f6:	4643      	mov	r3, r8
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	b2a4      	uxth	r4, r4
 80006fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000700:	fb07 1110 	mls	r1, r7, r0, r1
 8000704:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000708:	fb0e fe00 	mul.w	lr, lr, r0
 800070c:	45a6      	cmp	lr, r4
 800070e:	d908      	bls.n	8000722 <__udivmoddi4+0x156>
 8000710:	eb1c 0404 	adds.w	r4, ip, r4
 8000714:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000718:	d202      	bcs.n	8000720 <__udivmoddi4+0x154>
 800071a:	45a6      	cmp	lr, r4
 800071c:	f200 80bb 	bhi.w	8000896 <__udivmoddi4+0x2ca>
 8000720:	4608      	mov	r0, r1
 8000722:	eba4 040e 	sub.w	r4, r4, lr
 8000726:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800072a:	e79c      	b.n	8000666 <__udivmoddi4+0x9a>
 800072c:	f1c6 0720 	rsb	r7, r6, #32
 8000730:	40b3      	lsls	r3, r6
 8000732:	fa22 fc07 	lsr.w	ip, r2, r7
 8000736:	ea4c 0c03 	orr.w	ip, ip, r3
 800073a:	fa20 f407 	lsr.w	r4, r0, r7
 800073e:	fa01 f306 	lsl.w	r3, r1, r6
 8000742:	431c      	orrs	r4, r3
 8000744:	40f9      	lsrs	r1, r7
 8000746:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800074a:	fa00 f306 	lsl.w	r3, r0, r6
 800074e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000752:	0c20      	lsrs	r0, r4, #16
 8000754:	fa1f fe8c 	uxth.w	lr, ip
 8000758:	fb09 1118 	mls	r1, r9, r8, r1
 800075c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000760:	fb08 f00e 	mul.w	r0, r8, lr
 8000764:	4288      	cmp	r0, r1
 8000766:	fa02 f206 	lsl.w	r2, r2, r6
 800076a:	d90b      	bls.n	8000784 <__udivmoddi4+0x1b8>
 800076c:	eb1c 0101 	adds.w	r1, ip, r1
 8000770:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000774:	f080 8088 	bcs.w	8000888 <__udivmoddi4+0x2bc>
 8000778:	4288      	cmp	r0, r1
 800077a:	f240 8085 	bls.w	8000888 <__udivmoddi4+0x2bc>
 800077e:	f1a8 0802 	sub.w	r8, r8, #2
 8000782:	4461      	add	r1, ip
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f9 	udiv	r0, r1, r9
 800078c:	fb09 1110 	mls	r1, r9, r0, r1
 8000790:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000794:	fb00 fe0e 	mul.w	lr, r0, lr
 8000798:	458e      	cmp	lr, r1
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x1e2>
 800079c:	eb1c 0101 	adds.w	r1, ip, r1
 80007a0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007a4:	d26c      	bcs.n	8000880 <__udivmoddi4+0x2b4>
 80007a6:	458e      	cmp	lr, r1
 80007a8:	d96a      	bls.n	8000880 <__udivmoddi4+0x2b4>
 80007aa:	3802      	subs	r0, #2
 80007ac:	4461      	add	r1, ip
 80007ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007b2:	fba0 9402 	umull	r9, r4, r0, r2
 80007b6:	eba1 010e 	sub.w	r1, r1, lr
 80007ba:	42a1      	cmp	r1, r4
 80007bc:	46c8      	mov	r8, r9
 80007be:	46a6      	mov	lr, r4
 80007c0:	d356      	bcc.n	8000870 <__udivmoddi4+0x2a4>
 80007c2:	d053      	beq.n	800086c <__udivmoddi4+0x2a0>
 80007c4:	b15d      	cbz	r5, 80007de <__udivmoddi4+0x212>
 80007c6:	ebb3 0208 	subs.w	r2, r3, r8
 80007ca:	eb61 010e 	sbc.w	r1, r1, lr
 80007ce:	fa01 f707 	lsl.w	r7, r1, r7
 80007d2:	fa22 f306 	lsr.w	r3, r2, r6
 80007d6:	40f1      	lsrs	r1, r6
 80007d8:	431f      	orrs	r7, r3
 80007da:	e9c5 7100 	strd	r7, r1, [r5]
 80007de:	2600      	movs	r6, #0
 80007e0:	4631      	mov	r1, r6
 80007e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	40d8      	lsrs	r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa21 f303 	lsr.w	r3, r1, r3
 80007f4:	4091      	lsls	r1, r2
 80007f6:	4301      	orrs	r1, r0
 80007f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fc:	fa1f fe8c 	uxth.w	lr, ip
 8000800:	fbb3 f0f7 	udiv	r0, r3, r7
 8000804:	fb07 3610 	mls	r6, r7, r0, r3
 8000808:	0c0b      	lsrs	r3, r1, #16
 800080a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800080e:	fb00 f60e 	mul.w	r6, r0, lr
 8000812:	429e      	cmp	r6, r3
 8000814:	fa04 f402 	lsl.w	r4, r4, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x260>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000822:	d22f      	bcs.n	8000884 <__udivmoddi4+0x2b8>
 8000824:	429e      	cmp	r6, r3
 8000826:	d92d      	bls.n	8000884 <__udivmoddi4+0x2b8>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1b9b      	subs	r3, r3, r6
 800082e:	b289      	uxth	r1, r1
 8000830:	fbb3 f6f7 	udiv	r6, r3, r7
 8000834:	fb07 3316 	mls	r3, r7, r6, r3
 8000838:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800083c:	fb06 f30e 	mul.w	r3, r6, lr
 8000840:	428b      	cmp	r3, r1
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x28a>
 8000844:	eb1c 0101 	adds.w	r1, ip, r1
 8000848:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800084c:	d216      	bcs.n	800087c <__udivmoddi4+0x2b0>
 800084e:	428b      	cmp	r3, r1
 8000850:	d914      	bls.n	800087c <__udivmoddi4+0x2b0>
 8000852:	3e02      	subs	r6, #2
 8000854:	4461      	add	r1, ip
 8000856:	1ac9      	subs	r1, r1, r3
 8000858:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800085c:	e738      	b.n	80006d0 <__udivmoddi4+0x104>
 800085e:	462e      	mov	r6, r5
 8000860:	4628      	mov	r0, r5
 8000862:	e705      	b.n	8000670 <__udivmoddi4+0xa4>
 8000864:	4606      	mov	r6, r0
 8000866:	e6e3      	b.n	8000630 <__udivmoddi4+0x64>
 8000868:	4618      	mov	r0, r3
 800086a:	e6f8      	b.n	800065e <__udivmoddi4+0x92>
 800086c:	454b      	cmp	r3, r9
 800086e:	d2a9      	bcs.n	80007c4 <__udivmoddi4+0x1f8>
 8000870:	ebb9 0802 	subs.w	r8, r9, r2
 8000874:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000878:	3801      	subs	r0, #1
 800087a:	e7a3      	b.n	80007c4 <__udivmoddi4+0x1f8>
 800087c:	4646      	mov	r6, r8
 800087e:	e7ea      	b.n	8000856 <__udivmoddi4+0x28a>
 8000880:	4620      	mov	r0, r4
 8000882:	e794      	b.n	80007ae <__udivmoddi4+0x1e2>
 8000884:	4640      	mov	r0, r8
 8000886:	e7d1      	b.n	800082c <__udivmoddi4+0x260>
 8000888:	46d0      	mov	r8, sl
 800088a:	e77b      	b.n	8000784 <__udivmoddi4+0x1b8>
 800088c:	3b02      	subs	r3, #2
 800088e:	4461      	add	r1, ip
 8000890:	e732      	b.n	80006f8 <__udivmoddi4+0x12c>
 8000892:	4630      	mov	r0, r6
 8000894:	e709      	b.n	80006aa <__udivmoddi4+0xde>
 8000896:	4464      	add	r4, ip
 8000898:	3802      	subs	r0, #2
 800089a:	e742      	b.n	8000722 <__udivmoddi4+0x156>

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80008ac:	f006 fbd6 	bl	800705c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80008b0:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <pvPortMallocMicroROS+0x174>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80008b8:	f000 f980 	bl	8000bbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80008bc:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <pvPortMallocMicroROS+0x178>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f040 808e 	bne.w	80009e6 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d01d      	beq.n	800090c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80008d0:	2208      	movs	r2, #8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d014      	beq.n	800090c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f023 0307 	bic.w	r3, r3, #7
 80008e8:	3308      	adds	r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00a      	beq.n	800090c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80008f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fa:	f383 8811 	msr	BASEPRI, r3
 80008fe:	f3bf 8f6f 	isb	sy
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000908:	bf00      	nop
 800090a:	e7fe      	b.n	800090a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d069      	beq.n	80009e6 <pvPortMallocMicroROS+0x146>
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <pvPortMallocMicroROS+0x17c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	d864      	bhi.n	80009e6 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <pvPortMallocMicroROS+0x180>)
 800091e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000920:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <pvPortMallocMicroROS+0x180>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000926:	e004      	b.n	8000932 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	d903      	bls.n	8000944 <pvPortMallocMicroROS+0xa4>
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f1      	bne.n	8000928 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <pvPortMallocMicroROS+0x174>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094a:	429a      	cmp	r2, r3
 800094c:	d04b      	beq.n	80009e6 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2208      	movs	r2, #8
 8000954:	4413      	add	r3, r2
 8000956:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1ad2      	subs	r2, r2, r3
 8000968:	2308      	movs	r3, #8
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	429a      	cmp	r2, r3
 800096e:	d91f      	bls.n	80009b0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00a      	beq.n	8000998 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	613b      	str	r3, [r7, #16]
}
 8000994:	bf00      	nop
 8000996:	e7fe      	b.n	8000996 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	1ad2      	subs	r2, r2, r3
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80009aa:	69b8      	ldr	r0, [r7, #24]
 80009ac:	f000 f968 	bl	8000c80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <pvPortMallocMicroROS+0x17c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <pvPortMallocMicroROS+0x17c>)
 80009bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <pvPortMallocMicroROS+0x17c>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <pvPortMallocMicroROS+0x184>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d203      	bcs.n	80009d2 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <pvPortMallocMicroROS+0x17c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <pvPortMallocMicroROS+0x184>)
 80009d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <pvPortMallocMicroROS+0x178>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	431a      	orrs	r2, r3
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80009e6:	f006 fb47 	bl	8007078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	f003 0307 	and.w	r3, r3, #7
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00a      	beq.n	8000a0a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80009f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f8:	f383 8811 	msr	BASEPRI, r3
 80009fc:	f3bf 8f6f 	isb	sy
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	60fb      	str	r3, [r7, #12]
}
 8000a06:	bf00      	nop
 8000a08:	e7fe      	b.n	8000a08 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000a0a:	69fb      	ldr	r3, [r7, #28]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20003d3c 	.word	0x20003d3c
 8000a18:	20003d48 	.word	0x20003d48
 8000a1c:	20003d40 	.word	0x20003d40
 8000a20:	20003d34 	.word	0x20003d34
 8000a24:	20003d44 	.word	0x20003d44

08000a28 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d048      	beq.n	8000acc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	4413      	add	r3, r2
 8000a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <vPortFreeMicroROS+0xac>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10a      	bne.n	8000a6c <vPortFreeMicroROS+0x44>
	__asm volatile
 8000a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5a:	f383 8811 	msr	BASEPRI, r3
 8000a5e:	f3bf 8f6f 	isb	sy
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	60fb      	str	r3, [r7, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	e7fe      	b.n	8000a6a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00a      	beq.n	8000a8a <vPortFreeMicroROS+0x62>
	__asm volatile
 8000a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a78:	f383 8811 	msr	BASEPRI, r3
 8000a7c:	f3bf 8f6f 	isb	sy
 8000a80:	f3bf 8f4f 	dsb	sy
 8000a84:	60bb      	str	r3, [r7, #8]
}
 8000a86:	bf00      	nop
 8000a88:	e7fe      	b.n	8000a88 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <vPortFreeMicroROS+0xac>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d019      	beq.n	8000acc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d115      	bne.n	8000acc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <vPortFreeMicroROS+0xac>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ab0:	f006 fad4 	bl	800705c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <vPortFreeMicroROS+0xb0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <vPortFreeMicroROS+0xb0>)
 8000ac0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000ac2:	6938      	ldr	r0, [r7, #16]
 8000ac4:	f000 f8dc 	bl	8000c80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000ac8:	f006 fad6 	bl	8007078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20003d48 	.word	0x20003d48
 8000ad8:	20003d40 	.word	0x20003d40

08000adc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	425b      	negs	r3, r3
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	4413      	add	r3, r2
 8000af0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <getBlockSize+0x38>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

	return count;
 8000b04:	68fb      	ldr	r3, [r7, #12]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	371c      	adds	r7, #28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20003d48 	.word	0x20003d48

08000b18 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000b22:	f006 fa9b 	bl	800705c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000b26:	6838      	ldr	r0, [r7, #0]
 8000b28:	f7ff feba 	bl	80008a0 <pvPortMallocMicroROS>
 8000b2c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d017      	beq.n	8000b64 <pvPortReallocMicroROS+0x4c>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d014      	beq.n	8000b64 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffce 	bl	8000adc <getBlockSize>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2208      	movs	r2, #8
 8000b44:	1a9b      	subs	r3, r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d201      	bcs.n	8000b54 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f012 fb0f 	bl	801317c <memcpy>

		vPortFreeMicroROS(pv);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff62 	bl	8000a28 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000b64:	f006 fa88 	bl	8007078 <xTaskResumeAll>

	return newmem;
 8000b68:	68bb      	ldr	r3, [r7, #8]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000b7c:	f006 fa6e 	bl	800705c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff fe88 	bl	80008a0 <pvPortMallocMicroROS>
 8000b90:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000b96:	e004      	b.n	8000ba2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	613a      	str	r2, [r7, #16]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	617a      	str	r2, [r7, #20]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1f5      	bne.n	8000b98 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000bac:	f006 fa64 	bl	8007078 <xTaskResumeAll>
  	return mem;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000bc2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000bc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <prvHeapInit+0xac>)
 8000bca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00c      	beq.n	8000bf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3307      	adds	r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f023 0307 	bic.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <prvHeapInit+0xac>)
 8000bec:	4413      	add	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <prvHeapInit+0xb0>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <prvHeapInit+0xb0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	4413      	add	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000c08:	2208      	movs	r2, #8
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 0307 	bic.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <prvHeapInit+0xb4>)
 8000c1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <prvHeapInit+0xb4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <prvHeapInit+0xb4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	1ad2      	subs	r2, r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <prvHeapInit+0xb4>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <prvHeapInit+0xb8>)
 8000c4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <prvHeapInit+0xbc>)
 8000c52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <prvHeapInit+0xc0>)
 8000c56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	20000134 	.word	0x20000134
 8000c6c:	20003d34 	.word	0x20003d34
 8000c70:	20003d3c 	.word	0x20003d3c
 8000c74:	20003d44 	.word	0x20003d44
 8000c78:	20003d40 	.word	0x20003d40
 8000c7c:	20003d48 	.word	0x20003d48

08000c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <prvInsertBlockIntoFreeList+0xac>)
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e002      	b.n	8000c94 <prvInsertBlockIntoFreeList+0x14>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d8f7      	bhi.n	8000c8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4413      	add	r3, r2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d108      	bne.n	8000cc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	441a      	add	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	441a      	add	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d118      	bne.n	8000d08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <prvInsertBlockIntoFreeList+0xb0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d00d      	beq.n	8000cfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	441a      	add	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e008      	b.n	8000d10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <prvInsertBlockIntoFreeList+0xb0>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e003      	b.n	8000d10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d002      	beq.n	8000d1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20003d34 	.word	0x20003d34
 8000d30:	20003d3c 	.word	0x20003d3c

08000d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_DMA_Init+0x4c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <MX_DMA_Init+0x4c>)
 8000d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_DMA_Init+0x4c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2105      	movs	r1, #5
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f001 f9e2 	bl	8002124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f001 f9fb 	bl	800215c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2105      	movs	r1, #5
 8000d6a:	2011      	movs	r0, #17
 8000d6c:	f001 f9da 	bl	8002124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d70:	2011      	movs	r0, #17
 8000d72:	f001 f9f3 	bl	800215c <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000d92:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d98:	4904      	ldr	r1, [pc, #16]	; (8000dac <cubemx_transport_open+0x28>)
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f003 fe6e 	bl	8004a7c <HAL_UART_Receive_DMA>
    return true;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20003d4c 	.word	0x20003d4c

08000db0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000dbe:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f003 fe8b 	bl	8004adc <HAL_UART_DMAStop>
    return true;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000de4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b20      	cmp	r3, #32
 8000df0:	d11c      	bne.n	8000e2c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f003 fdc0 	bl	8004980 <HAL_UART_Transmit_DMA>
 8000e00:	4603      	mov	r3, r0
 8000e02:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000e04:	e002      	b.n	8000e0c <cubemx_transport_write+0x3c>
            osDelay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f005 f8fc 	bl	8006004 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <cubemx_transport_write+0x4e>
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b20      	cmp	r3, #32
 8000e1c:	d1f3      	bne.n	8000e06 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000e1e:	7cfb      	ldrb	r3, [r7, #19]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <cubemx_transport_write+0x58>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	e002      	b.n	8000e2e <cubemx_transport_write+0x5e>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e000      	b.n	8000e2e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000e2c:	2300      	movs	r3, #0
    }
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000e4c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e52:	b672      	cpsid	i
}
 8000e54:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <cubemx_transport_read+0x9c>)
 8000e64:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e66:	b662      	cpsie	i
}
 8000e68:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f005 f8c7 	bl	8006004 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <cubemx_transport_read+0xa0>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <cubemx_transport_read+0x9c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d103      	bne.n	8000e8a <cubemx_transport_read+0x52>
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	dbe3      	blt.n	8000e52 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e8e:	e011      	b.n	8000eb4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <cubemx_transport_read+0xa0>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	440b      	add	r3, r1
 8000e9a:	4910      	ldr	r1, [pc, #64]	; (8000edc <cubemx_transport_read+0xa4>)
 8000e9c:	5c8a      	ldrb	r2, [r1, r2]
 8000e9e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <cubemx_transport_read+0xa0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <cubemx_transport_read+0xa0>)
 8000eac:	6013      	str	r3, [r2, #0]
        wrote++;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <cubemx_transport_read+0xa0>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <cubemx_transport_read+0x9c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d003      	beq.n	8000ec8 <cubemx_transport_read+0x90>
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3e3      	bcc.n	8000e90 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20004550 	.word	0x20004550
 8000ed8:	2000454c 	.word	0x2000454c
 8000edc:	20003d4c 	.word	0x20003d4c

08000ee0 <map>:

void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000eea:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eee:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ef2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ef6:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8000efa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f06:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <service_callback>:

void service_callback(const void * req, void * res)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	example_interfaces__srv__AddTwoInts_Request * req_in = (example_interfaces__srv__AddTwoInts_Request *) req;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]
	example_interfaces__srv__AddTwoInts_Response * res_in = (example_interfaces__srv__AddTwoInts_Response *) res;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	60bb      	str	r3, [r7, #8]

	res_in->sum = req_in->a + req_in->b;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f5a:	1884      	adds	r4, r0, r2
 8000f5c:	eb41 0503 	adc.w	r5, r1, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	e9c3 4500 	strd	r4, r5, [r3]
	led1=res_in->sum;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fa86 	bl	8000480 <__aeabi_l2f>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <service_callback+0xe8>)
 8000f78:	6013      	str	r3, [r2, #0]
	led2=req_in->a;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fa7c 	bl	8000480 <__aeabi_l2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a27      	ldr	r2, [pc, #156]	; (8001028 <service_callback+0xec>)
 8000f8c:	6013      	str	r3, [r2, #0]
	led3=req_in->b;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fa72 	bl	8000480 <__aeabi_l2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <service_callback+0xf0>)
 8000fa0:	6013      	str	r3, [r2, #0]
	pwm_led1=map(led1, 0, 255, 0, 65535);
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <service_callback+0xe8>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8001030 <service_callback+0xf4>
 8000fac:	eddf 1a21 	vldr	s3, [pc, #132]	; 8001034 <service_callback+0xf8>
 8000fb0:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8001038 <service_callback+0xfc>
 8000fb4:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001034 <service_callback+0xf8>
 8000fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbc:	f7ff ff90 	bl	8000ee0 <map>
 8000fc0:	eef0 7a40 	vmov.f32	s15, s0
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <service_callback+0x100>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
	pwm_led2=map(led2, 0, 255, 0, 65535);
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <service_callback+0xec>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ed9f 2a17 	vldr	s4, [pc, #92]	; 8001030 <service_callback+0xf4>
 8000fd4:	eddf 1a17 	vldr	s3, [pc, #92]	; 8001034 <service_callback+0xf8>
 8000fd8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8001038 <service_callback+0xfc>
 8000fdc:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001034 <service_callback+0xf8>
 8000fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe4:	f7ff ff7c 	bl	8000ee0 <map>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <service_callback+0x104>)
 8000fee:	edc3 7a00 	vstr	s15, [r3]
	pwm_led3=map(led3, 0, 255, 0, 65535);
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <service_callback+0xf0>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8001030 <service_callback+0xf4>
 8000ffc:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001034 <service_callback+0xf8>
 8001000:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001038 <service_callback+0xfc>
 8001004:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001034 <service_callback+0xf8>
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	f7ff ff68 	bl	8000ee0 <map>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <service_callback+0x108>)
 8001016:	edc3 7a00 	vstr	s15, [r3]


}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bdb0      	pop	{r4, r5, r7, pc}
 8001022:	bf00      	nop
 8001024:	20004558 	.word	0x20004558
 8001028:	20004560 	.word	0x20004560
 800102c:	20004568 	.word	0x20004568
 8001030:	477fff00 	.word	0x477fff00
 8001034:	00000000 	.word	0x00000000
 8001038:	437f0000 	.word	0x437f0000
 800103c:	2000455c 	.word	0x2000455c
 8001040:	20004564 	.word	0x20004564
 8001044:	2000456c 	.word	0x2000456c

08001048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	//Create a Task handle
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <MX_FREERTOS_Init+0x18>)
 800104e:	2100      	movs	r1, #0
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_FREERTOS_Init+0x1c>)
 8001052:	f004 ff45 	bl	8005ee0 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <MX_FREERTOS_Init+0x20>)
 800105a:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	08014980 	.word	0x08014980
 8001064:	0800106d 	.word	0x0800106d
 8001068:	20004588 	.word	0x20004588

0800106c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b0c8      	sub	sp, #288	; 0x120
 8001070:	af02      	add	r7, sp, #8
 8001072:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	rmw_uros_set_custom_transport(
 8001074:	4b43      	ldr	r3, [pc, #268]	; (8001184 <StartDefaultTask+0x118>)
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <StartDefaultTask+0x11c>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <StartDefaultTask+0x120>)
 800107e:	4a44      	ldr	r2, [pc, #272]	; (8001190 <StartDefaultTask+0x124>)
 8001080:	4944      	ldr	r1, [pc, #272]	; (8001194 <StartDefaultTask+0x128>)
 8001082:	2001      	movs	r0, #1
 8001084:	f009 fee0 	bl	800ae48 <rmw_uros_set_custom_transport>
	(void *) &huart2,
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);
	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001088:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800108c:	4618      	mov	r0, r3
 800108e:	f009 fc5d 	bl	800a94c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <StartDefaultTask+0x12c>)
 8001094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <StartDefaultTask+0x130>)
 800109a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	freeRTOS_allocator.reallocate = microros_reallocate;
 800109e:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <StartDefaultTask+0x134>)
 80010a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <StartDefaultTask+0x138>)
 80010a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80010aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010ae:	4618      	mov	r0, r3
 80010b0:	f009 fc5a 	bl	800a968 <rcutils_set_default_allocator>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f083 0301 	eor.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <StartDefaultTask+0x5c>
		printf("Error on default allocators (line %d)\n", __LINE__);
 80010c0:	21c0      	movs	r1, #192	; 0xc0
 80010c2:	4839      	ldr	r0, [pc, #228]	; (80011a8 <StartDefaultTask+0x13c>)
 80010c4:	f012 f980 	bl	80133c8 <iprintf>
	}
	// micro-ROS App //
	 rclc_executor_t executor;
	// Initialize micro-ROS allocator
	rcl_allocator_t allocator;
	allocator = rcl_get_default_allocator();
 80010c8:	463b      	mov	r3, r7
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fc6c 	bl	800a9a8 <rcutils_get_default_allocator>
 80010d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80010d8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80010dc:	461d      	mov	r5, r3
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	6023      	str	r3, [r4, #0]
	// Initialize support object
	 rclc_support_t support;
	rclc_support_init(&support, 0, NULL, &allocator);
 80010e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	f009 fb65 	bl	800a7c0 <rclc_support_init>
	// Create node object
	rcl_node_t node;
	rclc_node_init_default(&node, "stm32f446re_node", "", &support);
 80010f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80010fe:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <StartDefaultTask+0x140>)
 8001100:	492b      	ldr	r1, [pc, #172]	; (80011b0 <StartDefaultTask+0x144>)
 8001102:	f009 fbab 	bl	800a85c <rclc_node_init_default>
	//Create service
	const char * service_name = "/add_two_ints";
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <StartDefaultTask+0x148>)
 8001108:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	rclc_service_init_default(&service, &node,ROSIDL_GET_SRV_TYPE_SUPPORT(example_interfaces, srv, AddTwoInts),service_name);
 800110c:	f007 fc16 	bl	800893c <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>
 8001110:	4602      	mov	r2, r0
 8001112:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800111a:	4827      	ldr	r0, [pc, #156]	; (80011b8 <StartDefaultTask+0x14c>)
 800111c:	f009 fbda 	bl	800a8d4 <rclc_service_init_default>
	// Create executor
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001120:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	1d19      	adds	r1, r3, #4
 800112a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800112e:	4613      	mov	r3, r2
 8001130:	2201      	movs	r2, #1
 8001132:	f009 f8e5 	bl	800a300 <rclc_executor_init>
	rclc_executor_add_service(&executor, &service, &req, &res, service_callback);
 8001136:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <StartDefaultTask+0x150>)
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <StartDefaultTask+0x154>)
 8001140:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <StartDefaultTask+0x158>)
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <StartDefaultTask+0x14c>)
 8001144:	f009 f950 	bl	800a3e8 <rclc_executor_add_service>
	// Spin executor to receive messages
	rclc_executor_prepare(&executor);
 8001148:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800114c:	4618      	mov	r0, r3
 800114e:	f009 f983 	bl	800a458 <rclc_executor_prepare>
	rclc_executor_spin(&executor);
 8001152:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001156:	4618      	mov	r0, r3
 8001158:	f009 faf8 	bl	800a74c <rclc_executor_spin>
  for(;;)
  {
	  rcl_ret_t ret;
	  ret = rcl_service_fini(&service, &node);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	4815      	ldr	r0, [pc, #84]	; (80011b8 <StartDefaultTask+0x14c>)
 8001164:	f008 ff36 	bl	8009fd4 <rcl_service_fini>
 8001168:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	  if (ret != RCL_RET_OK)
 800116c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <StartDefaultTask+0x110>
	  {
	  	printf("Error publishing (line %d)\n", __LINE__);
 8001174:	21dc      	movs	r1, #220	; 0xdc
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <StartDefaultTask+0x15c>)
 8001178:	f012 f926 	bl	80133c8 <iprintf>
	  }
	  osDelay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f004 ff41 	bl	8006004 <osDelay>
  {
 8001182:	e7eb      	b.n	800115c <StartDefaultTask+0xf0>
 8001184:	08000e39 	.word	0x08000e39
 8001188:	08000dd1 	.word	0x08000dd1
 800118c:	08000db1 	.word	0x08000db1
 8001190:	08000d85 	.word	0x08000d85
 8001194:	200075b0 	.word	0x200075b0
 8001198:	080013f1 	.word	0x080013f1
 800119c:	08001435 	.word	0x08001435
 80011a0:	0800146d 	.word	0x0800146d
 80011a4:	080014d9 	.word	0x080014d9
 80011a8:	080148bc 	.word	0x080148bc
 80011ac:	080148e4 	.word	0x080148e4
 80011b0:	080148e8 	.word	0x080148e8
 80011b4:	080148fc 	.word	0x080148fc
 80011b8:	20004554 	.word	0x20004554
 80011bc:	08000f3d 	.word	0x08000f3d
 80011c0:	20004570 	.word	0x20004570
 80011c4:	20004578 	.word	0x20004578
 80011c8:	0801490c 	.word	0x0801490c

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_GPIO_Init+0x68>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a16      	ldr	r2, [pc, #88]	; (8001234 <MX_GPIO_Init+0x68>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_GPIO_Init+0x68>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_GPIO_Init+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <MX_GPIO_Init+0x68>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_GPIO_Init+0x68>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_GPIO_Init+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <MX_GPIO_Init+0x68>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_GPIO_Init+0x68>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f000 fe78 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f824 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f7ff ffc2 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001248:	f7ff fd74 	bl	8000d34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800124c:	f000 fd64 	bl	8001d18 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001250:	f000 fc40 	bl	8001ad4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001254:	f000 fbf0 	bl	8001a38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001258:	2100      	movs	r1, #0
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <main+0x4c>)
 800125c:	f002 fc20 	bl	8003aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001260:	2104      	movs	r1, #4
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <main+0x4c>)
 8001264:	f002 fc1c 	bl	8003aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001268:	2108      	movs	r1, #8
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <main+0x4c>)
 800126c:	f002 fc18 	bl	8003aa0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <main+0x50>)
 8001272:	f002 fb4b 	bl	800390c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001276:	f004 fde9 	bl	8005e4c <osKernelInitialize>
  MX_FREERTOS_Init();
 800127a:	f7ff fee5 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800127e:	f004 fe09 	bl	8005e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x4a>
 8001284:	20007568 	.word	0x20007568
 8001288:	20007520 	.word	0x20007520

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2234      	movs	r2, #52	; 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f011 ff96 	bl	80131cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <SystemClock_Config+0xdc>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <SystemClock_Config+0xdc>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <SystemClock_Config+0xdc>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <SystemClock_Config+0xe0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a25      	ldr	r2, [pc, #148]	; (800136c <SystemClock_Config+0xe0>)
 80012d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <SystemClock_Config+0xe0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001300:	23b4      	movs	r3, #180	; 0xb4
 8001302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4618      	mov	r0, r3
 8001316:	f002 f80b 	bl	8003330 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001320:	f000 f860 	bl	80013e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001324:	f001 fcbe 	bl	8002ca4 <HAL_PWREx_EnableOverDrive>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800132e:	f000 f859 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2302      	movs	r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800133e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2105      	movs	r1, #5
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fcf7 	bl	8002d44 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800135c:	f000 f842 	bl	80013e4 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001382:	f000 fdf7 	bl	8001f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance==TIM2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138e:	d11a      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x56>
  	{

  		TIM3->CCR1=pwm_led1;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139c:	ee17 2a90 	vmov	r2, s15
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
  		TIM3->CCR1=pwm_led2;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	ee17 2a90 	vmov	r2, s15
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
  		TIM3->CCR1=pwm_led3;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80013bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
  	}

  /* USER CODE END Callback 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40010000 	.word	0x40010000
 80013d4:	2000455c 	.word	0x2000455c
 80013d8:	40000400 	.word	0x40000400
 80013dc:	20004564 	.word	0x20004564
 80013e0:	2000456c 	.word	0x2000456c

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <microros_allocate+0x3c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	461a      	mov	r2, r3
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <microros_allocate+0x3c>)
 8001408:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <microros_allocate+0x40>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <microros_allocate+0x40>)
 8001418:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fa40 	bl	80008a0 <pvPortMallocMicroROS>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200074c8 	.word	0x200074c8
 8001430:	200074cc 	.word	0x200074cc

08001434 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00c      	beq.n	800145e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fb49 	bl	8000adc <getBlockSize>
 800144a:	4603      	mov	r3, r0
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <microros_deallocate+0x34>)
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	461a      	mov	r2, r3
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <microros_deallocate+0x34>)
 8001456:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fae5 	bl	8000a28 <vPortFreeMicroROS>
  }
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200074cc 	.word	0x200074cc

0800146c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <microros_reallocate+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	461a      	mov	r2, r3
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <microros_reallocate+0x64>)
 8001486:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <microros_reallocate+0x68>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	4413      	add	r3, r2
 8001492:	461a      	mov	r2, r3
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <microros_reallocate+0x68>)
 8001496:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f7ff f9fe 	bl	80008a0 <pvPortMallocMicroROS>
 80014a4:	4603      	mov	r3, r0
 80014a6:	e00e      	b.n	80014c6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff fb17 	bl	8000adc <getBlockSize>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <microros_reallocate+0x68>)
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <microros_reallocate+0x68>)
 80014ba:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fb2a 	bl	8000b18 <pvPortReallocMicroROS>
 80014c4:	4603      	mov	r3, r0
  }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200074c8 	.word	0x200074c8
 80014d4:	200074cc 	.word	0x200074cc

080014d8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <microros_zero_allocate+0x48>)
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <microros_zero_allocate+0x48>)
 80014f6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	4a08      	ldr	r2, [pc, #32]	; (8001524 <microros_zero_allocate+0x4c>)
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	4413      	add	r3, r2
 8001506:	461a      	mov	r2, r3
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <microros_zero_allocate+0x4c>)
 800150a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff fb2f 	bl	8000b72 <pvPortCallocMicroROS>
 8001514:	4603      	mov	r3, r0
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200074c8 	.word	0x200074c8
 8001524:	200074cc 	.word	0x200074cc

08001528 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800153a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800153e:	a320      	add	r3, pc, #128	; (adr r3, 80015c0 <UTILS_NanosecondsToTimespec+0x98>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7fe ffda 	bl	80004fc <__aeabi_ldivmod>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001552:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001556:	a31a      	add	r3, pc, #104	; (adr r3, 80015c0 <UTILS_NanosecondsToTimespec+0x98>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7fe ffce 	bl	80004fc <__aeabi_ldivmod>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da20      	bge.n	80015ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <UTILS_NanosecondsToTimespec+0x90>)
 8001572:	fb82 1203 	smull	r1, r2, r2, r3
 8001576:	1712      	asrs	r2, r2, #28
 8001578:	17db      	asrs	r3, r3, #31
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	6979      	ldr	r1, [r7, #20]
 8001588:	17c8      	asrs	r0, r1, #31
 800158a:	460c      	mov	r4, r1
 800158c:	4605      	mov	r5, r0
 800158e:	ebb2 0804 	subs.w	r8, r2, r4
 8001592:	eb63 0905 	sbc.w	r9, r3, r5
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4906      	ldr	r1, [pc, #24]	; (80015bc <UTILS_NanosecondsToTimespec+0x94>)
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	441a      	add	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
    }
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015b8:	44b82fa1 	.word	0x44b82fa1
 80015bc:	3b9aca00 	.word	0x3b9aca00
 80015c0:	3b9aca00 	.word	0x3b9aca00
 80015c4:	00000000 	.word	0x00000000

080015c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b08e      	sub	sp, #56	; 0x38
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6278      	str	r0, [r7, #36]	; 0x24
 80015d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80015d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015d8:	2300      	movs	r3, #0
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	4618      	mov	r0, r3
 80015f0:	f005 ffbc 	bl	800756c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	17da      	asrs	r2, r3, #31
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	61fa      	str	r2, [r7, #28]
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	69b9      	ldr	r1, [r7, #24]
 8001606:	000b      	movs	r3, r1
 8001608:	2200      	movs	r2, #0
 800160a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	2200      	movs	r2, #0
 8001612:	461c      	mov	r4, r3
 8001614:	4615      	mov	r5, r2
 8001616:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800161a:	1911      	adds	r1, r2, r4
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	416b      	adcs	r3, r5
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001626:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800162a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	f04f 0500 	mov.w	r5, #0
 800163a:	015d      	lsls	r5, r3, #5
 800163c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001640:	0154      	lsls	r4, r2, #5
 8001642:	4622      	mov	r2, r4
 8001644:	462b      	mov	r3, r5
 8001646:	ebb2 0800 	subs.w	r8, r2, r0
 800164a:	eb63 0901 	sbc.w	r9, r3, r1
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800165a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800165e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001662:	4690      	mov	r8, r2
 8001664:	4699      	mov	r9, r3
 8001666:	eb18 0a00 	adds.w	sl, r8, r0
 800166a:	eb49 0b01 	adc.w	fp, r9, r1
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800167a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800167e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001682:	ebb2 040a 	subs.w	r4, r2, sl
 8001686:	603c      	str	r4, [r7, #0]
 8001688:	eb63 030b 	sbc.w	r3, r3, fp
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001692:	4623      	mov	r3, r4
 8001694:	181b      	adds	r3, r3, r0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	462b      	mov	r3, r5
 800169a:	eb41 0303 	adc.w	r3, r1, r3
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a6:	f7ff ff3f 	bl	8001528 <UTILS_NanosecondsToTimespec>

    return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	3738      	adds	r7, #56	; 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_MspInit+0x54>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_MspInit+0x54>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_MspInit+0x54>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_MspInit+0x54>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_MspInit+0x54>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_MspInit+0x54>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	210f      	movs	r1, #15
 80016fa:	f06f 0001 	mvn.w	r0, #1
 80016fe:	f000 fd11 	bl	8002124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_InitTick+0xd4>)
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	4a2e      	ldr	r2, [pc, #184]	; (80017e4 <HAL_InitTick+0xd4>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6453      	str	r3, [r2, #68]	; 0x44
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_InitTick+0xd4>)
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fc16 	bl	8002f78 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800174c:	f001 fc00 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8001750:	4603      	mov	r3, r0
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_InitTick+0xd8>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9b      	lsrs	r3, r3, #18
 8001760:	3b01      	subs	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_InitTick+0xdc>)
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_InitTick+0xe0>)
 8001768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_InitTick+0xdc>)
 800176c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001770:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_InitTick+0xdc>)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_InitTick+0xdc>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_InitTick+0xdc>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_InitTick+0xdc>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <HAL_InitTick+0xdc>)
 800178c:	f002 f86e 	bl	800386c <HAL_TIM_Base_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d11b      	bne.n	80017d6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800179e:	4813      	ldr	r0, [pc, #76]	; (80017ec <HAL_InitTick+0xdc>)
 80017a0:	f002 f8b4 	bl	800390c <HAL_TIM_Base_Start_IT>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d111      	bne.n	80017d6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017b2:	2019      	movs	r0, #25
 80017b4:	f000 fcd2 	bl	800215c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	d808      	bhi.n	80017d0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017be:	2200      	movs	r2, #0
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	2019      	movs	r0, #25
 80017c4:	f000 fcae 	bl	8002124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_InitTick+0xe4>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e002      	b.n	80017d6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3730      	adds	r7, #48	; 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	431bde83 	.word	0x431bde83
 80017ec:	200074d0 	.word	0x200074d0
 80017f0:	40010000 	.word	0x40010000
 80017f4:	20000008 	.word	0x20000008

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <NMI_Handler+0x4>

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <DMA1_Stream5_IRQHandler+0x10>)
 800182a:	f000 fe3d 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200075f4 	.word	0x200075f4

08001838 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <DMA1_Stream6_IRQHandler+0x10>)
 800183e:	f000 fe33 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20007654 	.word	0x20007654

0800184c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001852:	f002 f9ed 	bl	8003c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200074d0 	.word	0x200074d0

08001860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM2_IRQHandler+0x10>)
 8001866:	f002 f9e3 	bl	8003c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20007520 	.word	0x20007520

08001874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <USART2_IRQHandler+0x10>)
 800187a:	f003 f9af 	bl	8004bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200075b0 	.word	0x200075b0

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a2:	f011 fbe9 	bl	8013078 <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ca:	e7fe      	b.n	80018ca <_exit+0x12>

080018cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
  }
  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001966:	605a      	str	r2, [r3, #4]
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f011 fb4e 	bl	8013078 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20020000 	.word	0x20020000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	2000751c 	.word	0x2000751c
 8001a10:	20010c00 	.word	0x20010c00

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a5e:	2259      	movs	r2, #89	; 0x59
 8001a60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a6a:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7a:	4814      	ldr	r0, [pc, #80]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a7c:	f001 fef6 	bl	800386c <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a86:	f7ff fcad 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_TIM2_Init+0x94>)
 8001a98:	f002 fa94 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001aa2:	f7ff fc9f 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_TIM2_Init+0x94>)
 8001ab4:	f002 fe86 	bl	80047c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001abe:	f7ff fc91 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20007520 	.word	0x20007520
 8001ad0:	0001869f 	.word	0x0001869f

08001ad4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b06:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <MX_TIM3_Init+0x114>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b16:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b2a:	482e      	ldr	r0, [pc, #184]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b2c:	f001 fe9e 	bl	800386c <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b36:	f7ff fc55 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4827      	ldr	r0, [pc, #156]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b48:	f002 fa3c 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b52:	f7ff fc47 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b58:	f001 ff48 	bl	80039ec <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b62:	f7ff fc3f 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	4619      	mov	r1, r3
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b76:	f002 fe25 	bl	80047c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b80:	f7ff fc30 	bl	80013e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001b9c:	f002 f950 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ba6:	f7ff fc1d 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2204      	movs	r2, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001bb2:	f002 f945 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001bbc:	f7ff fc12 	bl	80013e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001bc8:	f002 f93a 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001bd2:	f7ff fc07 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM3_Init+0x110>)
 8001bd8:	f000 f844 	bl	8001c64 <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3738      	adds	r7, #56	; 0x38
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20007568 	.word	0x20007568
 8001be8:	40000400 	.word	0x40000400

08001bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d116      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_TIM_Base_MspInit+0x70>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_TIM_Base_MspInit+0x70>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_TIM_Base_MspInit+0x70>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f000 fa80 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c24:	201c      	movs	r0, #28
 8001c26:	f000 fa99 	bl	800215c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c2a:	e012      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_TIM_Base_MspInit+0x74>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10d      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_TIM_Base_MspInit+0x70>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_TIM_Base_MspInit+0x70>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_TIM_Base_MspInit+0x70>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40000400 	.word	0x40000400

08001c64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_TIM_MspPostInit+0xa4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d13b      	bne.n	8001cfe <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_TIM_MspPostInit+0xa8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_TIM_MspPostInit+0xa8>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_TIM_MspPostInit+0xa8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_TIM_MspPostInit+0xa8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_TIM_MspPostInit+0xa8>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_TIM_MspPostInit+0xa8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <HAL_TIM_MspPostInit+0xac>)
 8001cda:	f000 fe4f 	bl	800297c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <HAL_TIM_MspPostInit+0xb0>)
 8001cfa:	f000 fe3f 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400

08001d18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <MX_USART2_UART_Init+0x50>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USART2_UART_Init+0x4c>)
 8001d50:	f002 fdc8 	bl	80048e4 <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d5a:	f7ff fb43 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200075b0 	.word	0x200075b0
 8001d68:	40004400 	.word	0x40004400

08001d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <HAL_UART_MspInit+0x154>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	f040 8093 	bne.w	8001eb6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_UART_MspInit+0x158>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <HAL_UART_MspInit+0x158>)
 8001d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_UART_MspInit+0x158>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_UART_MspInit+0x158>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4a43      	ldr	r2, [pc, #268]	; (8001ec4 <HAL_UART_MspInit+0x158>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_UART_MspInit+0x158>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dc8:	230c      	movs	r3, #12
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4839      	ldr	r0, [pc, #228]	; (8001ec8 <HAL_UART_MspInit+0x15c>)
 8001de4:	f000 fdca 	bl	800297c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001dea:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <HAL_UART_MspInit+0x164>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e24:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e2c:	4827      	ldr	r0, [pc, #156]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e2e:	f000 f9a3 	bl	8002178 <HAL_DMA_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001e38:	f7ff fad4 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_UART_MspInit+0x160>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e4a:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_UART_MspInit+0x16c>)
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e54:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e82:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e8c:	f000 f974 	bl	8002178 <HAL_DMA_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001e96:	f7ff faa5 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_UART_MspInit+0x168>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	2026      	movs	r0, #38	; 0x26
 8001eac:	f000 f93a 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb0:	2026      	movs	r0, #38	; 0x26
 8001eb2:	f000 f953 	bl	800215c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	200075f4 	.word	0x200075f4
 8001ed0:	40026088 	.word	0x40026088
 8001ed4:	20007654 	.word	0x20007654
 8001ed8:	400260a0 	.word	0x400260a0

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef8:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f06:	f7ff fd85 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f011 f903 	bl	8013114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7ff f993 	bl	8001238 <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001f20:	080154fc 	.word	0x080154fc
  ldr r2, =_sbss
 8001f24:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001f28:	20010c00 	.word	0x20010c00

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_Init+0x40>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_Init+0x40>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_Init+0x40>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f8d8 	bl	800210e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f7ff fbd6 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff fba8 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	200076b4 	.word	0x200076b4

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	200076b4 	.word	0x200076b4

08001fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	60d3      	str	r3, [r2, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <__NVIC_GetPriorityGrouping+0x18>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0307 	and.w	r3, r3, #7
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4907      	ldr	r1, [pc, #28]	; (8002050 <__NVIC_EnableIRQ+0x38>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff4c 	bl	8001fb4 <__NVIC_SetPriorityGrouping>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002136:	f7ff ff61 	bl	8001ffc <__NVIC_GetPriorityGrouping>
 800213a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	6978      	ldr	r0, [r7, #20]
 8002142:	f7ff ffb1 	bl	80020a8 <NVIC_EncodePriority>
 8002146:	4602      	mov	r2, r0
 8002148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff80 	bl	8002054 <__NVIC_SetPriority>
}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff54 	bl	8002018 <__NVIC_EnableIRQ>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ff0a 	bl	8001f9c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e099      	b.n	80022c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b4:	e00f      	b.n	80021d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b6:	f7ff fef1 	bl	8001f9c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d908      	bls.n	80021d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2203      	movs	r2, #3
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e078      	b.n	80022c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e8      	bne.n	80021b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_DMA_Init+0x158>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002202:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4313      	orrs	r3, r2
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0307 	bic.w	r3, r3, #7
 8002256:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b04      	cmp	r3, #4
 8002268:	d117      	bne.n	800229a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fb01 	bl	8002884 <DMA_CheckFifoParam>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002296:	2301      	movs	r3, #1
 8002298:	e016      	b.n	80022c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fab8 	bl	8002818 <DMA_CalcBaseAndBitshift>
 80022a8:	4603      	mov	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	223f      	movs	r2, #63	; 0x3f
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	f010803f 	.word	0xf010803f

080022d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_DMA_Start_IT+0x26>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e040      	b.n	800237c <HAL_DMA_Start_IT+0xa8>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d12f      	bne.n	800236e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa4a 	bl	80027bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	223f      	movs	r2, #63	; 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0216 	orr.w	r2, r2, #22
 8002342:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e005      	b.n	800237a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002392:	f7ff fe03 	bl	8001f9c <HAL_GetTick>
 8002396:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e052      	b.n	800245c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0216 	bic.w	r2, r2, #22
 80023c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_DMA_Abort+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	e013      	b.n	8002430 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002408:	f7ff fdc8 	bl	8001f9c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b05      	cmp	r3, #5
 8002414:	d90c      	bls.n	8002430 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e015      	b.n	800245c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e4      	bne.n	8002408 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	223f      	movs	r2, #63	; 0x3f
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00c      	b.n	800249c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024b4:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_DMA_IRQHandler+0x248>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a8e      	ldr	r2, [pc, #568]	; (80026f4 <HAL_DMA_IRQHandler+0x24c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2208      	movs	r2, #8
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2208      	movs	r2, #8
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0202 	orr.w	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2204      	movs	r2, #4
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2210      	movs	r2, #16
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d043      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03c      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2210      	movs	r2, #16
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d018      	beq.n	80025ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e01f      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e016      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0208 	bic.w	r2, r2, #8
 8002606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2220      	movs	r2, #32
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 808f 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2220      	movs	r2, #32
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b05      	cmp	r3, #5
 8002650:	d136      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0216 	bic.w	r2, r2, #22
 8002660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_DMA_IRQHandler+0x1da>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0208 	bic.w	r2, r2, #8
 8002690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	223f      	movs	r2, #63	; 0x3f
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d07e      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
        }
        return;
 80026be:	e079      	b.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01d      	beq.n	800270a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e02c      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
 80026ee:	bf00      	nop
 80026f0:	20000004 	.word	0x20000004
 80026f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e01e      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0210 	bic.w	r2, r2, #16
 8002726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2205      	movs	r2, #5
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d307      	bcc.n	8002790 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f2      	bne.n	8002774 <HAL_DMA_IRQHandler+0x2cc>
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002790:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027b4:	bf00      	nop
    }
  }
}
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d108      	bne.n	80027fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027fa:	e007      	b.n	800280c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3b10      	subs	r3, #16
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <DMA_CalcBaseAndBitshift+0x64>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <DMA_CalcBaseAndBitshift+0x68>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d909      	bls.n	800285a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	1d1a      	adds	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58
 8002858:	e007      	b.n	800286a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	aaaaaaab 	.word	0xaaaaaaab
 8002880:	080149bc 	.word	0x080149bc

08002884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d856      	bhi.n	8002952 <DMA_CheckFifoParam+0xce>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <DMA_CheckFifoParam+0x28>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028cf 	.word	0x080028cf
 80028b4:	080028bd 	.word	0x080028bd
 80028b8:	08002953 	.word	0x08002953
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d046      	beq.n	8002956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e043      	b.n	8002956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d6:	d140      	bne.n	800295a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e03d      	b.n	800295a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d121      	bne.n	800292c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d837      	bhi.n	800295e <DMA_CheckFifoParam+0xda>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <DMA_CheckFifoParam+0x70>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800290b 	.word	0x0800290b
 80028fc:	08002905 	.word	0x08002905
 8002900:	0800291d 	.word	0x0800291d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e030      	b.n	800296c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d025      	beq.n	8002962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291a:	e022      	b.n	8002962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002924:	d11f      	bne.n	8002966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800292a:	e01c      	b.n	8002966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d903      	bls.n	800293a <DMA_CheckFifoParam+0xb6>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002938:	e018      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e015      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      break;
 8002950:	e00b      	b.n	800296a <DMA_CheckFifoParam+0xe6>
      break;
 8002952:	bf00      	nop
 8002954:	e00a      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e008      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e006      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e004      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;   
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
    }
  } 
  
  return status; 
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e165      	b.n	8002c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8154 	bne.w	8002c5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80ae 	beq.w	8002c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	6453      	str	r3, [r2, #68]	; 0x44
 8002b12:	4b5a      	ldr	r3, [pc, #360]	; (8002c7c <HAL_GPIO_Init+0x300>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <HAL_GPIO_Init+0x308>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x21a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4e      	ldr	r2, [pc, #312]	; (8002c88 <HAL_GPIO_Init+0x30c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x216>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4d      	ldr	r2, [pc, #308]	; (8002c8c <HAL_GPIO_Init+0x310>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x212>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	; (8002c90 <HAL_GPIO_Init+0x314>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x20e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_GPIO_Init+0x318>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x20a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <HAL_GPIO_Init+0x31c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x206>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a49      	ldr	r2, [pc, #292]	; (8002c9c <HAL_GPIO_Init+0x320>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x202>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x21c>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4935      	ldr	r1, [pc, #212]	; (8002c80 <HAL_GPIO_Init+0x304>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f ae96 	bls.w	8002998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40021400 	.word	0x40021400
 8002c9c:	40021800 	.word	0x40021800
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd0:	f7ff f964 	bl	8001f9c <HAL_GetTick>
 8002cd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd6:	e009      	b.n	8002cec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cd8:	f7ff f960 	bl	8001f9c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce6:	d901      	bls.n	8002cec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e01f      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d00:	f7ff f94c 	bl	8001f9c <HAL_GetTick>
 8002d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d06:	e009      	b.n	8002d1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d08:	f7ff f948 	bl	8001f9c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d16:	d901      	bls.n	8002d1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e007      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <HAL_PWREx_EnableOverDrive+0x98>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d28:	d1ee      	bne.n	8002d08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	420e0040 	.word	0x420e0040
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	420e0044 	.word	0x420e0044

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cc      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90c      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d044      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e067      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e34:	f7ff f8b2 	bl	8001f9c <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7ff f8ae 	bl	8001f9c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20c      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f887 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fc10 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	080149a4 	.word	0x080149a4
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	080149b4 	.word	0x080149b4

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffdc 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	080149b4 	.word	0x080149b4

08002f78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	220f      	movs	r2, #15
 8002f86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fba:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <HAL_RCC_GetClockConfig+0x60>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0a6      	sub	sp, #152	; 0x98
 8002fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4bc8      	ldr	r3, [pc, #800]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b0c      	cmp	r3, #12
 800300c:	f200 817e 	bhi.w	800330c <HAL_RCC_GetSysClockFreq+0x330>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800304d 	.word	0x0800304d
 800301c:	0800330d 	.word	0x0800330d
 8003020:	0800330d 	.word	0x0800330d
 8003024:	0800330d 	.word	0x0800330d
 8003028:	08003055 	.word	0x08003055
 800302c:	0800330d 	.word	0x0800330d
 8003030:	0800330d 	.word	0x0800330d
 8003034:	0800330d 	.word	0x0800330d
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800330d 	.word	0x0800330d
 8003040:	0800330d 	.word	0x0800330d
 8003044:	0800330d 	.word	0x0800330d
 8003048:	080031c7 	.word	0x080031c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4bb6      	ldr	r3, [pc, #728]	; (8003328 <HAL_RCC_GetSysClockFreq+0x34c>)
 800304e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003052:	e15f      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003054:	4bb5      	ldr	r3, [pc, #724]	; (800332c <HAL_RCC_GetSysClockFreq+0x350>)
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800305a:	e15b      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4bb1      	ldr	r3, [pc, #708]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003068:	4bae      	ldr	r3, [pc, #696]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d031      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003074:	4bab      	ldr	r3, [pc, #684]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	2200      	movs	r2, #0
 800307c:	66bb      	str	r3, [r7, #104]	; 0x68
 800307e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003086:	663b      	str	r3, [r7, #96]	; 0x60
 8003088:	2300      	movs	r3, #0
 800308a:	667b      	str	r3, [r7, #100]	; 0x64
 800308c:	4ba7      	ldr	r3, [pc, #668]	; (800332c <HAL_RCC_GetSysClockFreq+0x350>)
 800308e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003092:	462a      	mov	r2, r5
 8003094:	fb03 f202 	mul.w	r2, r3, r2
 8003098:	2300      	movs	r3, #0
 800309a:	4621      	mov	r1, r4
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	4aa2      	ldr	r2, [pc, #648]	; (800332c <HAL_RCC_GetSysClockFreq+0x350>)
 80030a4:	4621      	mov	r1, r4
 80030a6:	fba1 1202 	umull	r1, r2, r1, r2
 80030aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030ac:	460a      	mov	r2, r1
 80030ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80030b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80030b2:	4413      	add	r3, r2
 80030b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ba:	2200      	movs	r2, #0
 80030bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80030be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030c8:	f7fd fa68 	bl	800059c <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030d6:	e064      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4b92      	ldr	r3, [pc, #584]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
 80030e2:	657a      	str	r2, [r7, #84]	; 0x54
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ec:	2300      	movs	r3, #0
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030f4:	4622      	mov	r2, r4
 80030f6:	462b      	mov	r3, r5
 80030f8:	f04f 0000 	mov.w	r0, #0
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	0159      	lsls	r1, r3, #5
 8003102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003106:	0150      	lsls	r0, r2, #5
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4621      	mov	r1, r4
 800310e:	1a51      	subs	r1, r2, r1
 8003110:	6139      	str	r1, [r7, #16]
 8003112:	4629      	mov	r1, r5
 8003114:	eb63 0301 	sbc.w	r3, r3, r1
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003126:	4659      	mov	r1, fp
 8003128:	018b      	lsls	r3, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003130:	4651      	mov	r1, sl
 8003132:	018a      	lsls	r2, r1, #6
 8003134:	4651      	mov	r1, sl
 8003136:	ebb2 0801 	subs.w	r8, r2, r1
 800313a:	4659      	mov	r1, fp
 800313c:	eb63 0901 	sbc.w	r9, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003154:	4690      	mov	r8, r2
 8003156:	4699      	mov	r9, r3
 8003158:	4623      	mov	r3, r4
 800315a:	eb18 0303 	adds.w	r3, r8, r3
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	462b      	mov	r3, r5
 8003162:	eb49 0303 	adc.w	r3, r9, r3
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003174:	4629      	mov	r1, r5
 8003176:	028b      	lsls	r3, r1, #10
 8003178:	4621      	mov	r1, r4
 800317a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800317e:	4621      	mov	r1, r4
 8003180:	028a      	lsls	r2, r1, #10
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318a:	2200      	movs	r2, #0
 800318c:	643b      	str	r3, [r7, #64]	; 0x40
 800318e:	647a      	str	r2, [r7, #68]	; 0x44
 8003190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003194:	f7fd fa02 	bl	800059c <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	3301      	adds	r3, #1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80031b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80031c4:	e0a6      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c6:	4b57      	ldr	r3, [pc, #348]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d2:	4b54      	ldr	r3, [pc, #336]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02a      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b51      	ldr	r3, [pc, #324]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	2200      	movs	r2, #0
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031f0:	2100      	movs	r1, #0
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCC_GetSysClockFreq+0x350>)
 80031f4:	fb03 f201 	mul.w	r2, r3, r1
 80031f8:	2300      	movs	r3, #0
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	4413      	add	r3, r2
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_RCC_GetSysClockFreq+0x350>)
 8003202:	fba0 1202 	umull	r1, r2, r0, r2
 8003206:	677a      	str	r2, [r7, #116]	; 0x74
 8003208:	460a      	mov	r2, r1
 800320a:	673a      	str	r2, [r7, #112]	; 0x70
 800320c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800320e:	4413      	add	r3, r2
 8003210:	677b      	str	r3, [r7, #116]	; 0x74
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003216:	2200      	movs	r2, #0
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
 800321a:	637a      	str	r2, [r7, #52]	; 0x34
 800321c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003220:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003224:	f7fd f9ba 	bl	800059c <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003232:	e05b      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	2200      	movs	r2, #0
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
 800323e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
 800324c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003250:	4642      	mov	r2, r8
 8003252:	464b      	mov	r3, r9
 8003254:	f04f 0000 	mov.w	r0, #0
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	0159      	lsls	r1, r3, #5
 800325e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003262:	0150      	lsls	r0, r2, #5
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4641      	mov	r1, r8
 800326a:	ebb2 0a01 	subs.w	sl, r2, r1
 800326e:	4649      	mov	r1, r9
 8003270:	eb63 0b01 	sbc.w	fp, r3, r1
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003288:	ebb2 040a 	subs.w	r4, r2, sl
 800328c:	eb63 050b 	sbc.w	r5, r3, fp
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	00eb      	lsls	r3, r5, #3
 800329a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329e:	00e2      	lsls	r2, r4, #3
 80032a0:	4614      	mov	r4, r2
 80032a2:	461d      	mov	r5, r3
 80032a4:	4643      	mov	r3, r8
 80032a6:	18e3      	adds	r3, r4, r3
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	464b      	mov	r3, r9
 80032ac:	eb45 0303 	adc.w	r3, r5, r3
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032be:	4629      	mov	r1, r5
 80032c0:	028b      	lsls	r3, r1, #10
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c8:	4621      	mov	r1, r4
 80032ca:	028a      	lsls	r2, r1, #10
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d4:	2200      	movs	r2, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	61fa      	str	r2, [r7, #28]
 80032da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032de:	f7fd f95d 	bl	800059c <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4613      	mov	r3, r2
 80032e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_GetSysClockFreq+0x348>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	0f1b      	lsrs	r3, r3, #28
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80032fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800330a:	e003      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetSysClockFreq+0x34c>)
 800330e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003312:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003318:	4618      	mov	r0, r3
 800331a:	3798      	adds	r7, #152	; 0x98
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	00f42400 	.word	0x00f42400
 800332c:	017d7840 	.word	0x017d7840

08003330 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e28d      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8083 	beq.w	8003456 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003350:	4b94      	ldr	r3, [pc, #592]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b04      	cmp	r3, #4
 800335a:	d019      	beq.n	8003390 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800335c:	4b91      	ldr	r3, [pc, #580]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003364:	2b08      	cmp	r3, #8
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003368:	4b8e      	ldr	r3, [pc, #568]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003374:	d00c      	beq.n	8003390 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b8b      	ldr	r3, [pc, #556]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b84      	ldr	r3, [pc, #528]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x124>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e25a      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x90>
 80033b2:	4b7c      	ldr	r3, [pc, #496]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7b      	ldr	r2, [pc, #492]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xcc>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0xb4>
 80033ca:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a75      	ldr	r2, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a72      	ldr	r2, [pc, #456]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xcc>
 80033e4:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a6e      	ldr	r2, [pc, #440]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b6c      	ldr	r3, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6b      	ldr	r2, [pc, #428]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fdca 	bl	8001f9c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe fdc6 	bl	8001f9c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e21f      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xdc>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fdb6 	bl	8001f9c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fdb2 	bl	8001f9c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e20b      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x104>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d06f      	beq.n	8003542 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003462:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d017      	beq.n	800349e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d105      	bne.n	8003486 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800347a:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b44      	ldr	r3, [pc, #272]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x186>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1d3      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_OscConfig+0x278>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fe fd5f 	bl	8001f9c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe fd5b 	bl	8001f9c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1b4      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4925      	ldr	r1, [pc, #148]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCC_OscConfig+0x278>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fd3e 	bl	8001f9c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003524:	f7fe fd3a 	bl	8001f9c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e193      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d036      	beq.n	80035bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_RCC_OscConfig+0x27c>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fd1e 	bl	8001f9c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe fd1a 	bl	8001f9c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e173      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x234>
 8003582:	e01b      	b.n	80035bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x27c>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe fd07 	bl	8001f9c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	e00e      	b.n	80035b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fd03 	bl	8001f9c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d907      	bls.n	80035b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e15c      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	42470000 	.word	0x42470000
 80035ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b8a      	ldr	r3, [pc, #552]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ea      	bne.n	8003592 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8097 	beq.w	80036f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b83      	ldr	r3, [pc, #524]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	4b7f      	ldr	r3, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a7e      	ldr	r2, [pc, #504]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <HAL_RCC_OscConfig+0x4b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x4b0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	; (80037e0 <HAL_RCC_OscConfig+0x4b0>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe fcc3 	bl	8001f9c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe fcbf 	bl	8001f9c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e118      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b6c      	ldr	r3, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x4b0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x31e>
 8003640:	4b66      	ldr	r3, [pc, #408]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a65      	ldr	r2, [pc, #404]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	e01c      	b.n	8003688 <HAL_RCC_OscConfig+0x358>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x340>
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a60      	ldr	r2, [pc, #384]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a5d      	ldr	r2, [pc, #372]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x358>
 8003670:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a59      	ldr	r2, [pc, #356]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a56      	ldr	r2, [pc, #344]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fc84 	bl	8001f9c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe fc80 	bl	8001f9c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0d7      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ee      	beq.n	8003698 <HAL_RCC_OscConfig+0x368>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe fc6e 	bl	8001f9c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fc6a 	bl	8001f9c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0c1      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	4b40      	ldr	r3, [pc, #256]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ee      	bne.n	80036c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	4a3a      	ldr	r2, [pc, #232]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80ad 	beq.w	800385c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d060      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d145      	bne.n	80037a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <HAL_RCC_OscConfig+0x4b4>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fc3e 	bl	8001f9c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fc3a 	bl	8001f9c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e093      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x4b4>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe fc0f 	bl	8001f9c <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fc0b 	bl	8001f9c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e064      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x452>
 80037a0:	e05c      	b.n	800385c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_RCC_OscConfig+0x4b4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fbf8 	bl	8001f9c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fbf4 	bl	8001f9c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04d      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x480>
 80037ce:	e045      	b.n	800385c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e040      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
 80037e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e8:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <HAL_RCC_OscConfig+0x538>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d030      	beq.n	8003858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d129      	bne.n	8003858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d122      	bne.n	8003858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003820:	4293      	cmp	r3, r2
 8003822:	d119      	bne.n	8003858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d10f      	bne.n	8003858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e041      	b.n	8003902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe f9aa 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f000 fc7a 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e04e      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d01d      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_TIM_Base_Start_IT+0xd0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d010      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	e007      	b.n	80039c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40010400 	.word	0x40010400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40001800 	.word	0x40001800

080039ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e041      	b.n	8003a82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f839 	bl	8003a8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 fbba 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_TIM_PWM_Start+0x24>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e022      	b.n	8003b0a <HAL_TIM_PWM_Start+0x6a>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d109      	bne.n	8003ade <HAL_TIM_PWM_Start+0x3e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e015      	b.n	8003b0a <HAL_TIM_PWM_Start+0x6a>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x58>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e008      	b.n	8003b0a <HAL_TIM_PWM_Start+0x6a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07c      	b.n	8003c0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x82>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	e013      	b.n	8003b4a <HAL_TIM_PWM_Start+0xaa>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start+0x92>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b30:	e00b      	b.n	8003b4a <HAL_TIM_PWM_Start+0xaa>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	e003      	b.n	8003b4a <HAL_TIM_PWM_Start+0xaa>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fe10 	bl	8004778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <HAL_TIM_PWM_Start+0x174>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_TIM_PWM_Start+0xcc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <HAL_TIM_PWM_Start+0x178>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_PWM_Start+0xd0>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_PWM_Start+0xd2>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_TIM_PWM_Start+0x174>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d01d      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_TIM_PWM_Start+0x17c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_TIM_PWM_Start+0x180>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIM_PWM_Start+0x184>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_TIM_PWM_Start+0x178>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIM_PWM_Start+0x188>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIM_PWM_Start+0x18c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b06      	cmp	r3, #6
 8003be6:	d010      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf8:	e007      	b.n	8003c0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40010400 	.word	0x40010400
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40001800 	.word	0x40001800

08003c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0202 	mvn.w	r2, #2
 8003c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa77 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa69 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fa7a 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0204 	mvn.w	r2, #4
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa4d 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa3f 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fa50 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0208 	mvn.w	r2, #8
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa23 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa15 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fa26 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0210 	mvn.w	r2, #16
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9f9 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9eb 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9fc 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d10e      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0201 	mvn.w	r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fade 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d10e      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d107      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fd78 	bl	80048d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d107      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9c1 	bl	800418e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0220 	mvn.w	r2, #32
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fd42 	bl	80048bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0ae      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	f200 809f 	bhi.w	8003fac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003fad 	.word	0x08003fad
 8003e7c:	08003fad 	.word	0x08003fad
 8003e80:	08003fad 	.word	0x08003fad
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003fad 	.word	0x08003fad
 8003e8c:	08003fad 	.word	0x08003fad
 8003e90:	08003fad 	.word	0x08003fad
 8003e94:	08003f2b 	.word	0x08003f2b
 8003e98:	08003fad 	.word	0x08003fad
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	08003fad 	.word	0x08003fad
 8003ea4:	08003f6b 	.word	0x08003f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa18 	bl	80042e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
      break;
 8003ee6:	e064      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa68 	bl	80043c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
      break;
 8003f28:	e043      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fabd 	bl	80044b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fb11 	bl	8004598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0b4      	b.n	800414a <HAL_TIM_ConfigClockSource+0x186>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004018:	d03e      	beq.n	8004098 <HAL_TIM_ConfigClockSource+0xd4>
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401e:	f200 8087 	bhi.w	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	f000 8086 	beq.w	8004136 <HAL_TIM_ConfigClockSource+0x172>
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402e:	d87f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d01a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xa6>
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d87b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d050      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x11a>
 800403c:	2b60      	cmp	r3, #96	; 0x60
 800403e:	d877      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d03c      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xfa>
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d873      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d058      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x13a>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d86f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b30      	cmp	r3, #48	; 0x30
 8004052:	d064      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b30      	cmp	r3, #48	; 0x30
 8004056:	d86b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d060      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b20      	cmp	r3, #32
 800405e:	d867      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	2b10      	cmp	r3, #16
 8004066:	d05a      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	e062      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6899      	ldr	r1, [r3, #8]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f000 fb5d 	bl	8004738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800408c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	609a      	str	r2, [r3, #8]
      break;
 8004096:	e04f      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f000 fb46 	bl	8004738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ba:	609a      	str	r2, [r3, #8]
      break;
 80040bc:	e03c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f000 faba 	bl	8004644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2150      	movs	r1, #80	; 0x50
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb13 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80040dc:	e02c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fad9 	bl	80046a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2160      	movs	r1, #96	; 0x60
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fb03 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e01c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	461a      	mov	r2, r3
 800410c:	f000 fa9a 	bl	8004644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	4618      	mov	r0, r3
 8004118:	f000 faf3 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800411c:	e00c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f000 faea 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800412e:	e003      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e000      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a40      	ldr	r2, [pc, #256]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3d      	ldr	r2, [pc, #244]	; (80042bc <TIM_Base_SetConfig+0x118>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3c      	ldr	r2, [pc, #240]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02b      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d027      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <TIM_Base_SetConfig+0x118>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d023      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01f      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01b      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d017      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <TIM_Base_SetConfig+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <TIM_Base_SetConfig+0x130>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <TIM_Base_SetConfig+0x134>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <TIM_Base_SetConfig+0x138>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <TIM_Base_SetConfig+0x13c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	615a      	str	r2, [r3, #20]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40010400 	.word	0x40010400
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800
 80042d8:	40001800 	.word	0x40001800
 80042dc:	40001c00 	.word	0x40001c00
 80042e0:	40002000 	.word	0x40002000

080042e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0302 	bic.w	r3, r3, #2
 800432c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a20      	ldr	r2, [pc, #128]	; (80043bc <TIM_OC1_SetConfig+0xd8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC1_SetConfig+0x64>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <TIM_OC1_SetConfig+0xdc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10c      	bne.n	8004362 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0308 	bic.w	r3, r3, #8
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <TIM_OC1_SetConfig+0xd8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC1_SetConfig+0x8e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <TIM_OC1_SetConfig+0xdc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40010400 	.word	0x40010400

080043c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0210 	bic.w	r2, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0320 	bic.w	r3, r3, #32
 800440e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <TIM_OC2_SetConfig+0xe4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_OC2_SetConfig+0x68>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a21      	ldr	r2, [pc, #132]	; (80044ac <TIM_OC2_SetConfig+0xe8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10d      	bne.n	8004448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_OC2_SetConfig+0xe4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_OC2_SetConfig+0x94>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_OC2_SetConfig+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d113      	bne.n	8004480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800445e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40010400 	.word	0x40010400

080044b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a21      	ldr	r2, [pc, #132]	; (8004590 <TIM_OC3_SetConfig+0xe0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC3_SetConfig+0x66>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <TIM_OC3_SetConfig+0xe4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <TIM_OC3_SetConfig+0xe0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_OC3_SetConfig+0x92>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a15      	ldr	r2, [pc, #84]	; (8004594 <TIM_OC3_SetConfig+0xe4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d113      	bne.n	800456a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <TIM_OC4_SetConfig+0xa4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC4_SetConfig+0x68>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <TIM_OC4_SetConfig+0xa8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40010400 	.word	0x40010400

08004644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 030a 	bic.w	r3, r3, #10
 8004680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0210 	bic.w	r2, r3, #16
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d8:	2302      	movs	r3, #2
 80047da:	e05a      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d01d      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1b      	ldr	r2, [pc, #108]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40001800 	.word	0x40001800

080048bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e03f      	b.n	8004976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fd fa2e 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 ffd7 	bl	80058dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800493c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800494c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800495c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d165      	bne.n	8004a66 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_UART_Transmit_DMA+0x26>
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e05e      	b.n	8004a68 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Transmit_DMA+0x38>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e057      	b.n	8004a68 <HAL_UART_Transmit_DMA+0xe8>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2221      	movs	r2, #33	; 0x21
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <HAL_UART_Transmit_DMA+0xf0>)
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <HAL_UART_Transmit_DMA+0xf4>)
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_UART_Transmit_DMA+0xf8>)
 80049f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	2200      	movs	r2, #0
 80049fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3304      	adds	r3, #4
 8004a14:	461a      	mov	r2, r3
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f7fd fc5c 	bl	80022d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3314      	adds	r3, #20
 8004a34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3730      	adds	r7, #48	; 0x30
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	08005175 	.word	0x08005175
 8004a74:	0800520f 	.word	0x0800520f
 8004a78:	08005387 	.word	0x08005387

08004a7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d11d      	bne.n	8004ad2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_UART_Receive_DMA+0x26>
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e016      	b.n	8004ad4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Receive_DMA+0x38>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e00f      	b.n	8004ad4 <HAL_UART_Receive_DMA+0x58>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fca7 	bl	800541c <UART_Start_Receive_DMA>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b090      	sub	sp, #64	; 0x40
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b21      	cmp	r3, #33	; 0x21
 8004b08:	d128      	bne.n	8004b5c <HAL_UART_DMAStop+0x80>
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d025      	beq.n	8004b5c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b30:	633a      	str	r2, [r7, #48]	; 0x30
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fd fc17 	bl	8002384 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fcfe 	bl	8005558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b22      	cmp	r3, #34	; 0x22
 8004b7c:	d128      	bne.n	8004bd0 <HAL_UART_DMAStop+0xf4>
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d025      	beq.n	8004bd0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3314      	adds	r3, #20
 8004b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3314      	adds	r3, #20
 8004ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba4:	61fa      	str	r2, [r7, #28]
 8004ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e5      	bne.n	8004b84 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd fbdd 	bl	8002384 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fcec 	bl	80055a8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3740      	adds	r7, #64	; 0x40
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b0ba      	sub	sp, #232	; 0xe8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_UART_IRQHandler+0x66>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fd93 	bl	8005766 <UART_Receive_IT>
      return;
 8004c40:	e256      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80de 	beq.w	8004e08 <HAL_UART_IRQHandler+0x22c>
 8004c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80d1 	beq.w	8004e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_UART_IRQHandler+0xae>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0xd2>
 8004c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0202 	orr.w	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xf6>
 8004cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d011      	beq.n	8004d02 <HAL_UART_IRQHandler+0x126>
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 81ed 	beq.w	80050e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_UART_IRQHandler+0x14e>
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fd1e 	bl	8005766 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <HAL_UART_IRQHandler+0x17a>
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04f      	beq.n	8004df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fc26 	bl	80055a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d141      	bne.n	8004dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1d9      	bne.n	8004d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	4a7d      	ldr	r2, [pc, #500]	; (8004fb8 <HAL_UART_IRQHandler+0x3dc>)
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd fb4a 	bl	8002464 <HAL_DMA_Abort_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00e      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9ae 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00a      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9aa 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e006      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9a6 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e02:	e170      	b.n	80050e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	bf00      	nop
    return;
 8004e06:	e16e      	b.n	80050e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 814a 	bne.w	80050a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8143 	beq.w	80050a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 813c 	beq.w	80050a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	f040 80b4 	bne.w	8004fbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8140 	beq.w	80050ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e72:	429a      	cmp	r2, r3
 8004e74:	f080 8139 	bcs.w	80050ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	f000 8088 	beq.w	8004f9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1d9      	bne.n	8004e8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004efe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e1      	bne.n	8004eda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f80:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e3      	bne.n	8004f5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fd f9f3 	bl	8002384 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8d4 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fb4:	e099      	b.n	80050ea <HAL_UART_IRQHandler+0x50e>
 8004fb6:	bf00      	nop
 8004fb8:	0800566f 	.word	0x0800566f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 808b 	beq.w	80050ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8086 	beq.w	80050ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005006:	647a      	str	r2, [r7, #68]	; 0x44
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800500c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	623b      	str	r3, [r7, #32]
   return(result);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3314      	adds	r3, #20
 800503a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800503e:	633a      	str	r2, [r7, #48]	; 0x30
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0310 	bic.w	r3, r3, #16
 8005076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005084:	61fa      	str	r2, [r7, #28]
 8005086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	617b      	str	r3, [r7, #20]
   return(result);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e3      	bne.n	8005060 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f85c 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a4:	e023      	b.n	80050ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_UART_IRQHandler+0x4ea>
 80050b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fae9 	bl	8005696 <UART_Transmit_IT>
    return;
 80050c4:	e014      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <HAL_UART_IRQHandler+0x514>
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fb29 	bl	8005736 <UART_EndTransmit_IT>
    return;
 80050e4:	e004      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
    return;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ee:	bf00      	nop
  }
}
 80050f0:	37e8      	adds	r7, #232	; 0xe8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b090      	sub	sp, #64	; 0x40
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d137      	bne.n	8005200 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005192:	2200      	movs	r2, #0
 8005194:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	623b      	str	r3, [r7, #32]
   return(result);
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051b6:	633a      	str	r2, [r7, #48]	; 0x30
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e5      	bne.n	8005196 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ea:	61fa      	str	r2, [r7, #28]
 80051ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	617b      	str	r3, [r7, #20]
   return(result);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051fe:	e002      	b.n	8005206 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005200:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005202:	f7ff ff79 	bl	80050f8 <HAL_UART_TxCpltCallback>
}
 8005206:	bf00      	nop
 8005208:	3740      	adds	r7, #64	; 0x40
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff ff75 	bl	800510c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b09c      	sub	sp, #112	; 0x70
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d172      	bne.n	800532c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	2200      	movs	r2, #0
 800524a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800525c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005262:	66bb      	str	r3, [r7, #104]	; 0x68
 8005264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800526c:	65ba      	str	r2, [r7, #88]	; 0x58
 800526e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800527a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	667b      	str	r3, [r7, #100]	; 0x64
 8005298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052a0:	647a      	str	r2, [r7, #68]	; 0x44
 80052a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e5      	bne.n	8005280 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3314      	adds	r3, #20
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	623b      	str	r3, [r7, #32]
   return(result);
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ca:	663b      	str	r3, [r7, #96]	; 0x60
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052d4:	633a      	str	r2, [r7, #48]	; 0x30
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d119      	bne.n	800532c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	60fb      	str	r3, [r7, #12]
   return(result);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0310 	bic.w	r3, r3, #16
 800530e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005318:	61fa      	str	r2, [r7, #28]
 800531a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	617b      	str	r3, [r7, #20]
   return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005338:	4619      	mov	r1, r3
 800533a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800533c:	f7ff ff0e 	bl	800515c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005340:	e002      	b.n	8005348 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005342:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005344:	f7ff feec 	bl	8005120 <HAL_UART_RxCpltCallback>
}
 8005348:	bf00      	nop
 800534a:	3770      	adds	r7, #112	; 0x70
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	2b01      	cmp	r3, #1
 8005364:	d108      	bne.n	8005378 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	b29b      	uxth	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fef3 	bl	800515c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005376:	e002      	b.n	800537e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff fedb 	bl	8005134 <HAL_UART_RxHalfCpltCallback>
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b21      	cmp	r3, #33	; 0x21
 80053b8:	d108      	bne.n	80053cc <UART_DMAError+0x46>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80053c6:	68b8      	ldr	r0, [r7, #8]
 80053c8:	f000 f8c6 	bl	8005558 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b22      	cmp	r3, #34	; 0x22
 80053ec:	d108      	bne.n	8005400 <UART_DMAError+0x7a>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	f000 f8d4 	bl	80055a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f043 0210 	orr.w	r2, r3, #16
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800540c:	68b8      	ldr	r0, [r7, #8]
 800540e:	f7ff fe9b 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b098      	sub	sp, #96	; 0x60
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2222      	movs	r2, #34	; 0x22
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4a40      	ldr	r2, [pc, #256]	; (800554c <UART_Start_Receive_DMA+0x130>)
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	4a3f      	ldr	r2, [pc, #252]	; (8005550 <UART_Start_Receive_DMA+0x134>)
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	4a3e      	ldr	r2, [pc, #248]	; (8005554 <UART_Start_Receive_DMA+0x138>)
 800545a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	2200      	movs	r2, #0
 8005462:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005464:	f107 0308 	add.w	r3, r7, #8
 8005468:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	f7fc ff2a 	bl	80022d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d019      	beq.n	80054da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	657b      	str	r3, [r7, #84]	; 0x54
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3314      	adds	r3, #20
 80054f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	617b      	str	r3, [r7, #20]
   return(result);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005524:	653b      	str	r3, [r7, #80]	; 0x50
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800552e:	627a      	str	r2, [r7, #36]	; 0x24
 8005530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6a39      	ldr	r1, [r7, #32]
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	61fb      	str	r3, [r7, #28]
   return(result);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3760      	adds	r7, #96	; 0x60
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	0800522b 	.word	0x0800522b
 8005550:	08005351 	.word	0x08005351
 8005554:	08005387 	.word	0x08005387

08005558 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	61ba      	str	r2, [r7, #24]
 8005582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6979      	ldr	r1, [r7, #20]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	613b      	str	r3, [r7, #16]
   return(result);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800559c:	bf00      	nop
 800559e:	3724      	adds	r7, #36	; 0x24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b095      	sub	sp, #84	; 0x54
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d0:	643a      	str	r2, [r7, #64]	; 0x40
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	d119      	bne.n	8005654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	647b      	str	r3, [r7, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005640:	61ba      	str	r2, [r7, #24]
 8005642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	613b      	str	r3, [r7, #16]
   return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005662:	bf00      	nop
 8005664:	3754      	adds	r7, #84	; 0x54
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fd5d 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b21      	cmp	r3, #33	; 0x21
 80056a8:	d13e      	bne.n	8005728 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b2:	d114      	bne.n	80056de <UART_Transmit_IT+0x48>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	621a      	str	r2, [r3, #32]
 80056dc:	e008      	b.n	80056f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6211      	str	r1, [r2, #32]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4619      	mov	r1, r3
 80056fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10f      	bne.n	8005724 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005712:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005722:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fcce 	bl	80050f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08c      	sub	sp, #48	; 0x30
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b22      	cmp	r3, #34	; 0x22
 8005778:	f040 80ab 	bne.w	80058d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d117      	bne.n	80057b6 <UART_Receive_IT+0x50>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d113      	bne.n	80057b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
 80057b4:	e026      	b.n	8005804 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d007      	beq.n	80057da <UART_Receive_IT+0x74>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <UART_Receive_IT+0x82>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e008      	b.n	80057fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29b      	uxth	r3, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	4619      	mov	r1, r3
 8005812:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005814:	2b00      	cmp	r3, #0
 8005816:	d15a      	bne.n	80058ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0220 	bic.w	r2, r2, #32
 8005826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	2b01      	cmp	r3, #1
 8005856:	d135      	bne.n	80058c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	613b      	str	r3, [r7, #16]
   return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f023 0310 	bic.w	r3, r3, #16
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	623a      	str	r2, [r7, #32]
 8005880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	69f9      	ldr	r1, [r7, #28]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	61bb      	str	r3, [r7, #24]
   return(result);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b10      	cmp	r3, #16
 800589e:	d10a      	bne.n	80058b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fc4d 	bl	800515c <HAL_UARTEx_RxEventCallback>
 80058c2:	e002      	b.n	80058ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fc2b 	bl	8005120 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e002      	b.n	80058d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e000      	b.n	80058d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
  }
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e0:	b0c0      	sub	sp, #256	; 0x100
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	ea40 0301 	orr.w	r3, r0, r1
 8005904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	431a      	orrs	r2, r3
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005934:	f021 010c 	bic.w	r1, r1, #12
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005942:	430b      	orrs	r3, r1
 8005944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	6999      	ldr	r1, [r3, #24]
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	ea40 0301 	orr.w	r3, r0, r1
 8005962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b8f      	ldr	r3, [pc, #572]	; (8005ba8 <UART_SetConfig+0x2cc>)
 800596c:	429a      	cmp	r2, r3
 800596e:	d005      	beq.n	800597c <UART_SetConfig+0xa0>
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b8d      	ldr	r3, [pc, #564]	; (8005bac <UART_SetConfig+0x2d0>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d104      	bne.n	8005986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fd fae8 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8005980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005984:	e003      	b.n	800598e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005986:	f7fd facf 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 800598a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005998:	f040 810c 	bne.w	8005bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800599c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059ae:	4622      	mov	r2, r4
 80059b0:	462b      	mov	r3, r5
 80059b2:	1891      	adds	r1, r2, r2
 80059b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80059b6:	415b      	adcs	r3, r3
 80059b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059be:	4621      	mov	r1, r4
 80059c0:	eb12 0801 	adds.w	r8, r2, r1
 80059c4:	4629      	mov	r1, r5
 80059c6:	eb43 0901 	adc.w	r9, r3, r1
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059de:	4690      	mov	r8, r2
 80059e0:	4699      	mov	r9, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	eb18 0303 	adds.w	r3, r8, r3
 80059e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059ec:	462b      	mov	r3, r5
 80059ee:	eb49 0303 	adc.w	r3, r9, r3
 80059f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	18db      	adds	r3, r3, r3
 8005a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a10:	4613      	mov	r3, r2
 8005a12:	eb42 0303 	adc.w	r3, r2, r3
 8005a16:	657b      	str	r3, [r7, #84]	; 0x54
 8005a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a20:	f7fa fdbc 	bl	800059c <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	011c      	lsls	r4, r3, #4
 8005a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a54:	4641      	mov	r1, r8
 8005a56:	eb12 0a01 	adds.w	sl, r2, r1
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a74:	4692      	mov	sl, r2
 8005a76:	469b      	mov	fp, r3
 8005a78:	4643      	mov	r3, r8
 8005a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a82:	464b      	mov	r3, r9
 8005a84:	eb4b 0303 	adc.w	r3, fp, r3
 8005a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	18db      	adds	r3, r3, r3
 8005aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
 8005aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ab6:	f7fa fd71 	bl	800059c <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2264      	movs	r2, #100	; 0x64
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	1acb      	subs	r3, r1, r3
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ad6:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ae4:	441c      	add	r4, r3
 8005ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	1891      	adds	r1, r2, r2
 8005afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b00:	415b      	adcs	r3, r3
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b08:	4641      	mov	r1, r8
 8005b0a:	1851      	adds	r1, r2, r1
 8005b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b0e:	4649      	mov	r1, r9
 8005b10:	414b      	adcs	r3, r1
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b20:	4659      	mov	r1, fp
 8005b22:	00cb      	lsls	r3, r1, #3
 8005b24:	4651      	mov	r1, sl
 8005b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	00ca      	lsls	r2, r1, #3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	4642      	mov	r2, r8
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	460a      	mov	r2, r1
 8005b40:	eb42 0303 	adc.w	r3, r2, r3
 8005b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	18db      	adds	r3, r3, r3
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b62:	4613      	mov	r3, r2
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b72:	f7fa fd13 	bl	800059c <__aeabi_uldivmod>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	2164      	movs	r1, #100	; 0x64
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	3332      	adds	r3, #50	; 0x32
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	f003 0207 	and.w	r2, r3, #7
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4422      	add	r2, r4
 8005ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ba4:	e105      	b.n	8005db2 <UART_SetConfig+0x4d6>
 8005ba6:	bf00      	nop
 8005ba8:	40011000 	.word	0x40011000
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	6239      	str	r1, [r7, #32]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	1854      	adds	r4, r2, r1
 8005bda:	4649      	mov	r1, r9
 8005bdc:	eb43 0501 	adc.w	r5, r3, r1
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	00eb      	lsls	r3, r5, #3
 8005bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bee:	00e2      	lsls	r2, r4, #3
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	461d      	mov	r5, r3
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	18e3      	adds	r3, r4, r3
 8005bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	eb45 0303 	adc.w	r3, r5, r3
 8005c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c22:	4629      	mov	r1, r5
 8005c24:	008b      	lsls	r3, r1, #2
 8005c26:	4621      	mov	r1, r4
 8005c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	008a      	lsls	r2, r1, #2
 8005c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c34:	f7fa fcb2 	bl	800059c <__aeabi_uldivmod>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	011c      	lsls	r4, r3, #4
 8005c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	61b9      	str	r1, [r7, #24]
 8005c60:	415b      	adcs	r3, r3
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c68:	4641      	mov	r1, r8
 8005c6a:	1851      	adds	r1, r2, r1
 8005c6c:	6139      	str	r1, [r7, #16]
 8005c6e:	4649      	mov	r1, r9
 8005c70:	414b      	adcs	r3, r1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c80:	4659      	mov	r1, fp
 8005c82:	00cb      	lsls	r3, r1, #3
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	00ca      	lsls	r2, r1, #3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	4642      	mov	r2, r8
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cca:	4641      	mov	r1, r8
 8005ccc:	008a      	lsls	r2, r1, #2
 8005cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cd2:	f7fa fc63 	bl	800059c <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b39      	ldr	r3, [pc, #228]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a34      	ldr	r2, [pc, #208]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cfa:	441c      	add	r4, r3
 8005cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d00:	2200      	movs	r2, #0
 8005d02:	673b      	str	r3, [r7, #112]	; 0x70
 8005d04:	677a      	str	r2, [r7, #116]	; 0x74
 8005d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	1891      	adds	r1, r2, r2
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	415b      	adcs	r3, r3
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	1851      	adds	r1, r2, r1
 8005d1e:	6039      	str	r1, [r7, #0]
 8005d20:	4649      	mov	r1, r9
 8005d22:	414b      	adcs	r3, r1
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d32:	4659      	mov	r1, fp
 8005d34:	00cb      	lsls	r3, r1, #3
 8005d36:	4651      	mov	r1, sl
 8005d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	00ca      	lsls	r2, r1, #3
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	4603      	mov	r3, r0
 8005d46:	4642      	mov	r2, r8
 8005d48:	189b      	adds	r3, r3, r2
 8005d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	460a      	mov	r2, r1
 8005d50:	eb42 0303 	adc.w	r3, r2, r3
 8005d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d60:	667a      	str	r2, [r7, #100]	; 0x64
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d6e:	4649      	mov	r1, r9
 8005d70:	008b      	lsls	r3, r1, #2
 8005d72:	4641      	mov	r1, r8
 8005d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d78:	4641      	mov	r1, r8
 8005d7a:	008a      	lsls	r2, r1, #2
 8005d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d80:	f7fa fc0c 	bl	800059c <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	2164      	movs	r1, #100	; 0x64
 8005d92:	fb01 f303 	mul.w	r3, r1, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	3332      	adds	r3, #50	; 0x32
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4422      	add	r2, r4
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	bf00      	nop
 8005db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005db8:	46bd      	mov	sp, r7
 8005dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dbe:	bf00      	nop
 8005dc0:	51eb851f 	.word	0x51eb851f

08005dc4 <__NVIC_SetPriority>:
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db0a      	blt.n	8005dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	490c      	ldr	r1, [pc, #48]	; (8005e10 <__NVIC_SetPriority+0x4c>)
 8005dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	440b      	add	r3, r1
 8005de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005dec:	e00a      	b.n	8005e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4908      	ldr	r1, [pc, #32]	; (8005e14 <__NVIC_SetPriority+0x50>)
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	440b      	add	r3, r1
 8005e02:	761a      	strb	r2, [r3, #24]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <SysTick_Handler+0x1c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e20:	f001 fd24 	bl	800786c <xTaskGetSchedulerState>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d001      	beq.n	8005e2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e2a:	f002 fb0d 	bl	8008448 <xPortSysTickHandler>
  }
}
 8005e2e:	bf00      	nop
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	e000e010 	.word	0xe000e010

08005e38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f06f 0004 	mvn.w	r0, #4
 8005e42:	f7ff ffbf 	bl	8005dc4 <__NVIC_SetPriority>
#endif
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e52:	f3ef 8305 	mrs	r3, IPSR
 8005e56:	603b      	str	r3, [r7, #0]
  return(result);
 8005e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e5e:	f06f 0305 	mvn.w	r3, #5
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e00c      	b.n	8005e80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <osKernelInitialize+0x44>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <osKernelInitialize+0x44>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	e002      	b.n	8005e80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e80:	687b      	ldr	r3, [r7, #4]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	200076b8 	.word	0x200076b8

08005e94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e9a:	f3ef 8305 	mrs	r3, IPSR
 8005e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ea6:	f06f 0305 	mvn.w	r3, #5
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	e010      	b.n	8005ed0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <osKernelStart+0x48>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d109      	bne.n	8005eca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005eb6:	f7ff ffbf 	bl	8005e38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <osKernelStart+0x48>)
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ec0:	f001 f866 	bl	8006f90 <vTaskStartScheduler>
      stat = osOK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e002      	b.n	8005ed0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ece:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ed0:	687b      	ldr	r3, [r7, #4]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	200076b8 	.word	0x200076b8

08005ee0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08e      	sub	sp, #56	; 0x38
 8005ee4:	af04      	add	r7, sp, #16
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef0:	f3ef 8305 	mrs	r3, IPSR
 8005ef4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ef6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d17e      	bne.n	8005ffa <osThreadNew+0x11a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d07b      	beq.n	8005ffa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f06:	2318      	movs	r3, #24
 8005f08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d045      	beq.n	8005fa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <osThreadNew+0x48>
        name = attr->name;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <osThreadNew+0x6e>
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b38      	cmp	r3, #56	; 0x38
 8005f40:	d805      	bhi.n	8005f4e <osThreadNew+0x6e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <osThreadNew+0x72>
        return (NULL);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e054      	b.n	8005ffc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	089b      	lsrs	r3, r3, #2
 8005f60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <osThreadNew+0xa8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2b5b      	cmp	r3, #91	; 0x5b
 8005f70:	d90a      	bls.n	8005f88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d006      	beq.n	8005f88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <osThreadNew+0xa8>
        mem = 1;
 8005f82:	2301      	movs	r3, #1
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	e010      	b.n	8005faa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <osThreadNew+0xca>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <osThreadNew+0xca>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <osThreadNew+0xca>
          mem = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e001      	b.n	8005faa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d110      	bne.n	8005fd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fb8:	9202      	str	r2, [sp, #8]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fe0c 	bl	8006be4 <xTaskCreateStatic>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e013      	b.n	8005ffa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d110      	bne.n	8005ffa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f107 0310 	add.w	r3, r7, #16
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fe57 	bl	8006c9e <xTaskCreate>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d001      	beq.n	8005ffa <osThreadNew+0x11a>
            hTask = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ffa:	693b      	ldr	r3, [r7, #16]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3728      	adds	r7, #40	; 0x28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800600c:	f3ef 8305 	mrs	r3, IPSR
 8006010:	60bb      	str	r3, [r7, #8]
  return(result);
 8006012:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <osDelay+0x1c>
    stat = osErrorISR;
 8006018:	f06f 0305 	mvn.w	r3, #5
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e007      	b.n	8006030 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <osDelay+0x2c>
      vTaskDelay(ticks);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ff7c 	bl	8006f28 <vTaskDelay>
    }
  }

  return (stat);
 8006030:	68fb      	ldr	r3, [r7, #12]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a07      	ldr	r2, [pc, #28]	; (8006068 <vApplicationGetIdleTaskMemory+0x2c>)
 800604c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	4a06      	ldr	r2, [pc, #24]	; (800606c <vApplicationGetIdleTaskMemory+0x30>)
 8006052:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	200076bc 	.word	0x200076bc
 800606c:	20007718 	.word	0x20007718

08006070 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4a07      	ldr	r2, [pc, #28]	; (800609c <vApplicationGetTimerTaskMemory+0x2c>)
 8006080:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006086:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800608e:	601a      	str	r2, [r3, #0]
}
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20007918 	.word	0x20007918
 80060a0:	20007974 	.word	0x20007974

080060a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f103 0208 	add.w	r2, r3, #8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f103 0208 	add.w	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f103 0208 	add.w	r2, r3, #8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615c:	d103      	bne.n	8006166 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e00c      	b.n	8006180 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3308      	adds	r3, #8
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e002      	b.n	8006174 <vListInsert+0x2e>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d2f6      	bcs.n	800616e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6892      	ldr	r2, [r2, #8]
 80061ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6852      	ldr	r2, [r2, #4]
 80061d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d103      	bne.n	80061ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	1e5a      	subs	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericReset+0x2a>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60bb      	str	r3, [r7, #8]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006236:	f002 f875 	bl	8008324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	3b01      	subs	r3, #1
 8006268:	68f9      	ldr	r1, [r7, #12]
 800626a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	441a      	add	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	22ff      	movs	r2, #255	; 0xff
 800627a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	22ff      	movs	r2, #255	; 0xff
 8006282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d114      	bne.n	80062b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01a      	beq.n	80062ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3310      	adds	r3, #16
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f903 	bl	80074a4 <xTaskRemoveFromEventList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d012      	beq.n	80062ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <xQueueGenericReset+0xcc>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	e009      	b.n	80062ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3310      	adds	r3, #16
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fef2 	bl	80060a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3324      	adds	r3, #36	; 0x24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff feed 	bl	80060a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062ca:	f002 f85b 	bl	8008384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062ce:	2301      	movs	r3, #1
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <xQueueGenericCreateStatic+0x52>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <xQueueGenericCreateStatic+0x56>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <xQueueGenericCreateStatic+0x58>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	623b      	str	r3, [r7, #32]
}
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <xQueueGenericCreateStatic+0x7e>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <xQueueGenericCreateStatic+0x82>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <xQueueGenericCreateStatic+0x84>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	61fb      	str	r3, [r7, #28]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800637a:	2350      	movs	r3, #80	; 0x50
 800637c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d00a      	beq.n	800639a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61bb      	str	r3, [r7, #24]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800639a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	4613      	mov	r3, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f805 	bl	80063cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3730      	adds	r7, #48	; 0x30
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063fa:	2101      	movs	r1, #1
 80063fc:	69b8      	ldr	r0, [r7, #24]
 80063fe:	f7ff ff05 	bl	800620c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08e      	sub	sp, #56	; 0x38
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <xQueueGenericSend+0x32>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <xQueueGenericSend+0x40>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <xQueueGenericSend+0x44>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <xQueueGenericSend+0x46>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <xQueueGenericSend+0x60>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d103      	bne.n	8006482 <xQueueGenericSend+0x6e>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <xQueueGenericSend+0x72>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <xQueueGenericSend+0x74>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a2:	f001 f9e3 	bl	800786c <xTaskGetSchedulerState>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <xQueueGenericSend+0x9e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0xa2>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0xa4>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61fb      	str	r3, [r7, #28]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064d2:	f001 ff27 	bl	8008324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <xQueueGenericSend+0xd4>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d129      	bne.n	800653c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ee:	f000 fa0b 	bl	8006908 <prvCopyDataToQueue>
 80064f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	3324      	adds	r3, #36	; 0x24
 8006500:	4618      	mov	r0, r3
 8006502:	f000 ffcf 	bl	80074a4 <xTaskRemoveFromEventList>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d013      	beq.n	8006534 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800650c:	4b3f      	ldr	r3, [pc, #252]	; (800660c <xQueueGenericSend+0x1f8>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	e00a      	b.n	8006534 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006524:	4b39      	ldr	r3, [pc, #228]	; (800660c <xQueueGenericSend+0x1f8>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006534:	f001 ff26 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 8006538:	2301      	movs	r3, #1
 800653a:	e063      	b.n	8006604 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006542:	f001 ff1f 	bl	8008384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006546:	2300      	movs	r3, #0
 8006548:	e05c      	b.n	8006604 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006550:	f107 0314 	add.w	r3, r7, #20
 8006554:	4618      	mov	r0, r3
 8006556:	f001 f82f 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800655e:	f001 ff11 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006562:	f000 fd7b 	bl	800705c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006566:	f001 fedd 	bl	8008324 <vPortEnterCritical>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006570:	b25b      	sxtb	r3, r3
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006576:	d103      	bne.n	8006580 <xQueueGenericSend+0x16c>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006586:	b25b      	sxtb	r3, r3
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800658c:	d103      	bne.n	8006596 <xQueueGenericSend+0x182>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006596:	f001 fef5 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800659a:	1d3a      	adds	r2, r7, #4
 800659c:	f107 0314 	add.w	r3, r7, #20
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 f81e 	bl	80075e4 <xTaskCheckForTimeOut>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d124      	bne.n	80065f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b0:	f000 faa2 	bl	8006af8 <prvIsQueueFull>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	3310      	adds	r3, #16
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff1e 	bl	8007404 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ca:	f000 fa2d 	bl	8006a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065ce:	f000 fd53 	bl	8007078 <xTaskResumeAll>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f af7c 	bne.w	80064d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <xQueueGenericSend+0x1f8>)
 80065dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	e772      	b.n	80064d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ee:	f000 fa1b 	bl	8006a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065f2:	f000 fd41 	bl	8007078 <xTaskResumeAll>
 80065f6:	e76c      	b.n	80064d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065fa:	f000 fa15 	bl	8006a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065fe:	f000 fd3b 	bl	8007078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006602:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006604:	4618      	mov	r0, r3
 8006606:	3738      	adds	r7, #56	; 0x38
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	e000ed04 	.word	0xe000ed04

08006610 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b090      	sub	sp, #64	; 0x40
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <xQueueGenericSendFromISR+0x3c>
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <xQueueGenericSendFromISR+0x40>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <xQueueGenericSendFromISR+0x42>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d103      	bne.n	800667a <xQueueGenericSendFromISR+0x6a>
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <xQueueGenericSendFromISR+0x6e>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <xQueueGenericSendFromISR+0x70>
 800667e:	2300      	movs	r3, #0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	623b      	str	r3, [r7, #32]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800669a:	f001 ff25 	bl	80084e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800669e:	f3ef 8211 	mrs	r2, BASEPRI
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	61fa      	str	r2, [r7, #28]
 80066b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <xQueueGenericSendFromISR+0xbc>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d12f      	bne.n	800672c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066e2:	f000 f911 	bl	8006908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ee:	d112      	bne.n	8006716 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d016      	beq.n	8006726 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fed1 	bl	80074a4 <xTaskRemoveFromEventList>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e007      	b.n	8006726 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800671a:	3301      	adds	r3, #1
 800671c:	b2db      	uxtb	r3, r3
 800671e:	b25a      	sxtb	r2, r3
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006726:	2301      	movs	r3, #1
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800672a:	e001      	b.n	8006730 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800672c:	2300      	movs	r3, #0
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800673a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800673e:	4618      	mov	r0, r3
 8006740:	3740      	adds	r7, #64	; 0x40
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08c      	sub	sp, #48	; 0x30
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <xQueueReceive+0x30>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	623b      	str	r3, [r7, #32]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <xQueueReceive+0x3e>
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <xQueueReceive+0x42>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <xQueueReceive+0x44>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <xQueueReceive+0x5e>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61fb      	str	r3, [r7, #28]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067a6:	f001 f861 	bl	800786c <xTaskGetSchedulerState>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d102      	bne.n	80067b6 <xQueueReceive+0x6e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <xQueueReceive+0x72>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueReceive+0x74>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueReceive+0x8e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61bb      	str	r3, [r7, #24]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067d6:	f001 fda5 	bl	8008324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01f      	beq.n	8006826 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ea:	f000 f8f7 	bl	80069dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	1e5a      	subs	r2, r3, #1
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00f      	beq.n	800681e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	3310      	adds	r3, #16
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fe4e 	bl	80074a4 <xTaskRemoveFromEventList>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800680e:	4b3d      	ldr	r3, [pc, #244]	; (8006904 <xQueueReceive+0x1bc>)
 8006810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800681e:	f001 fdb1 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 8006822:	2301      	movs	r3, #1
 8006824:	e069      	b.n	80068fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d103      	bne.n	8006834 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800682c:	f001 fdaa 	bl	8008384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006830:	2300      	movs	r3, #0
 8006832:	e062      	b.n	80068fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800683a:	f107 0310 	add.w	r3, r7, #16
 800683e:	4618      	mov	r0, r3
 8006840:	f000 feba 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006848:	f001 fd9c 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800684c:	f000 fc06 	bl	800705c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006850:	f001 fd68 	bl	8008324 <vPortEnterCritical>
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800685a:	b25b      	sxtb	r3, r3
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006860:	d103      	bne.n	800686a <xQueueReceive+0x122>
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006870:	b25b      	sxtb	r3, r3
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006876:	d103      	bne.n	8006880 <xQueueReceive+0x138>
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006880:	f001 fd80 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006884:	1d3a      	adds	r2, r7, #4
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	4611      	mov	r1, r2
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fea9 	bl	80075e4 <xTaskCheckForTimeOut>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d123      	bne.n	80068e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800689a:	f000 f917 	bl	8006acc <prvIsQueueEmpty>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	3324      	adds	r3, #36	; 0x24
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fda9 	bl	8007404 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b4:	f000 f8b8 	bl	8006a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068b8:	f000 fbde 	bl	8007078 <xTaskResumeAll>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d189      	bne.n	80067d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <xQueueReceive+0x1bc>)
 80068c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	e780      	b.n	80067d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d6:	f000 f8a7 	bl	8006a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068da:	f000 fbcd 	bl	8007078 <xTaskResumeAll>
 80068de:	e77a      	b.n	80067d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e2:	f000 f8a1 	bl	8006a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068e6:	f000 fbc7 	bl	8007078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ec:	f000 f8ee 	bl	8006acc <prvIsQueueEmpty>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f43f af6f 	beq.w	80067d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3730      	adds	r7, #48	; 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d14d      	bne.n	80069ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 ffb8 	bl	80078a8 <xTaskPriorityDisinherit>
 8006938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	e043      	b.n	80069ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d119      	bne.n	800697c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6858      	ldr	r0, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	461a      	mov	r2, r3
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	f00c fc12 	bl	801317c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d32b      	bcc.n	80069ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	e026      	b.n	80069ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68d8      	ldr	r0, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	461a      	mov	r2, r3
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	f00c fbf8 	bl	801317c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	425b      	negs	r3, r3
 8006996:	441a      	add	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d207      	bcs.n	80069b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	425b      	negs	r3, r3
 80069b2:	441a      	add	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d105      	bne.n	80069ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069d2:	697b      	ldr	r3, [r7, #20]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	441a      	add	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d303      	bcc.n	8006a10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68d9      	ldr	r1, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f00c fbae 	bl	801317c <memcpy>
	}
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a30:	f001 fc78 	bl	8008324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a3c:	e011      	b.n	8006a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d012      	beq.n	8006a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3324      	adds	r3, #36	; 0x24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fd2a 	bl	80074a4 <xTaskRemoveFromEventList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a56:	f000 fe27 	bl	80076a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	dce9      	bgt.n	8006a3e <prvUnlockQueue+0x16>
 8006a6a:	e000      	b.n	8006a6e <prvUnlockQueue+0x46>
					break;
 8006a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fc85 	bl	8008384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a7a:	f001 fc53 	bl	8008324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a86:	e011      	b.n	8006aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d012      	beq.n	8006ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3310      	adds	r3, #16
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fd05 	bl	80074a4 <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006aa0:	f000 fe02 	bl	80076a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dce9      	bgt.n	8006a88 <prvUnlockQueue+0x60>
 8006ab4:	e000      	b.n	8006ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	22ff      	movs	r2, #255	; 0xff
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ac0:	f001 fc60 	bl	8008384 <vPortExitCritical>
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad4:	f001 fc26 	bl	8008324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e001      	b.n	8006aea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aea:	f001 fc4b 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b00:	f001 fc10 	bl	8008324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d102      	bne.n	8006b16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	e001      	b.n	8006b1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b1a:	f001 fc33 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e014      	b.n	8006b62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b38:	4a0f      	ldr	r2, [pc, #60]	; (8006b78 <vQueueAddToRegistry+0x50>)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <vQueueAddToRegistry+0x50>)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <vQueueAddToRegistry+0x50>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b5a:	e006      	b.n	8006b6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b07      	cmp	r3, #7
 8006b66:	d9e7      	bls.n	8006b38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20007d74 	.word	0x20007d74

08006b7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b8c:	f001 fbca 	bl	8008324 <vPortEnterCritical>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b9c:	d103      	bne.n	8006ba6 <vQueueWaitForMessageRestricted+0x2a>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bac:	b25b      	sxtb	r3, r3
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb2:	d103      	bne.n	8006bbc <vQueueWaitForMessageRestricted+0x40>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bbc:	f001 fbe2 	bl	8008384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d106      	bne.n	8006bd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3324      	adds	r3, #36	; 0x24
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fc3b 	bl	800744c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f7ff ff26 	bl	8006a28 <prvUnlockQueue>
	}
 8006bdc:	bf00      	nop
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08e      	sub	sp, #56	; 0x38
 8006be8:	af04      	add	r7, sp, #16
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	623b      	str	r3, [r7, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xTaskCreateStatic+0x46>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	61fb      	str	r3, [r7, #28]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c2a:	235c      	movs	r3, #92	; 0x5c
 8006c2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b5c      	cmp	r3, #92	; 0x5c
 8006c32:	d00a      	beq.n	8006c4a <xTaskCreateStatic+0x66>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61bb      	str	r3, [r7, #24]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01e      	beq.n	8006c90 <xTaskCreateStatic+0xac>
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01b      	beq.n	8006c90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	2202      	movs	r2, #2
 8006c66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	f107 0314 	add.w	r3, r7, #20
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f850 	bl	8006d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c8a:	f000 f8dd 	bl	8006e48 <prvAddNewTaskToReadyList>
 8006c8e:	e001      	b.n	8006c94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c94:	697b      	ldr	r3, [r7, #20]
	}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3728      	adds	r7, #40	; 0x28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b08c      	sub	sp, #48	; 0x30
 8006ca2:	af04      	add	r7, sp, #16
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 fc58 	bl	8008568 <pvPortMalloc>
 8006cb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00e      	beq.n	8006cde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cc0:	205c      	movs	r0, #92	; 0x5c
 8006cc2:	f001 fc51 	bl	8008568 <pvPortMalloc>
 8006cc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd4:	e005      	b.n	8006ce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cd6:	6978      	ldr	r0, [r7, #20]
 8006cd8:	f001 fd12 	bl	8008700 <vPortFree>
 8006cdc:	e001      	b.n	8006ce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d017      	beq.n	8006d18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9303      	str	r3, [sp, #12]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	9302      	str	r3, [sp, #8]
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f80e 	bl	8006d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d0c:	69f8      	ldr	r0, [r7, #28]
 8006d0e:	f000 f89b 	bl	8006e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	e002      	b.n	8006d1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	461a      	mov	r2, r3
 8006d40:	21a5      	movs	r1, #165	; 0xa5
 8006d42:	f00c fa43 	bl	80131cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d50:	3b01      	subs	r3, #1
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	617b      	str	r3, [r7, #20]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01f      	beq.n	8006dc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e012      	b.n	8006db2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	7819      	ldrb	r1, [r3, #0]
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	3334      	adds	r3, #52	; 0x34
 8006d9c:	460a      	mov	r2, r1
 8006d9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	3301      	adds	r3, #1
 8006db0:	61fb      	str	r3, [r7, #28]
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d9e9      	bls.n	8006d8c <prvInitialiseNewTask+0x64>
 8006db8:	e000      	b.n	8006dbc <prvInitialiseNewTask+0x94>
			{
				break;
 8006dba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc4:	e003      	b.n	8006dce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	2b37      	cmp	r3, #55	; 0x37
 8006dd2:	d901      	bls.n	8006dd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dd4:	2337      	movs	r3, #55	; 0x37
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	2200      	movs	r2, #0
 8006de8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	3304      	adds	r3, #4
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff f978 	bl	80060e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	3318      	adds	r3, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff f973 	bl	80060e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2200      	movs	r2, #0
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	68f9      	ldr	r1, [r7, #12]
 8006e26:	69b8      	ldr	r0, [r7, #24]
 8006e28:	f001 f94e 	bl	80080c8 <pxPortInitialiseStack>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e3e:	bf00      	nop
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e50:	f001 fa68 	bl	8008324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e54:	4b2d      	ldr	r3, [pc, #180]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e66:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e6c:	4b27      	ldr	r3, [pc, #156]	; (8006f0c <prvAddNewTaskToReadyList+0xc4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d110      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e74:	f000 fc3c 	bl	80076f0 <prvInitialiseTaskLists>
 8006e78:	e00d      	b.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e7a:	4b26      	ldr	r3, [pc, #152]	; (8006f14 <prvAddNewTaskToReadyList+0xcc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e82:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d802      	bhi.n	8006e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e96:	4b20      	ldr	r3, [pc, #128]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <prvAddNewTaskToReadyList+0xd0>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <prvAddNewTaskToReadyList+0xd4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <prvAddNewTaskToReadyList+0x74>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <prvAddNewTaskToReadyList+0xd4>)
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <prvAddNewTaskToReadyList+0xd8>)
 8006eca:	441a      	add	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7ff f913 	bl	80060fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fa54 	bl	8008384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <prvAddNewTaskToReadyList+0xcc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <prvAddNewTaskToReadyList+0xc8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d207      	bcs.n	8006f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <prvAddNewTaskToReadyList+0xdc>)
 8006ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20008288 	.word	0x20008288
 8006f10:	20007db4 	.word	0x20007db4
 8006f14:	20008294 	.word	0x20008294
 8006f18:	200082a4 	.word	0x200082a4
 8006f1c:	20008290 	.word	0x20008290
 8006f20:	20007db8 	.word	0x20007db8
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d017      	beq.n	8006f6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <vTaskDelay+0x60>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <vTaskDelay+0x30>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60bb      	str	r3, [r7, #8]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f58:	f000 f880 	bl	800705c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fd10 	bl	8007984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f64:	f000 f888 	bl	8007078 <xTaskResumeAll>
 8006f68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d107      	bne.n	8006f80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <vTaskDelay+0x64>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200082b0 	.word	0x200082b0
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f9e:	463a      	mov	r2, r7
 8006fa0:	1d39      	adds	r1, r7, #4
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff f848 	bl	800603c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	9202      	str	r2, [sp, #8]
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	460a      	mov	r2, r1
 8006fbe:	4921      	ldr	r1, [pc, #132]	; (8007044 <vTaskStartScheduler+0xb4>)
 8006fc0:	4821      	ldr	r0, [pc, #132]	; (8007048 <vTaskStartScheduler+0xb8>)
 8006fc2:	f7ff fe0f 	bl	8006be4 <xTaskCreateStatic>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <vTaskStartScheduler+0xbc>)
 8006fca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fcc:	4b1f      	ldr	r3, [pc, #124]	; (800704c <vTaskStartScheduler+0xbc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e001      	b.n	8006fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d102      	bne.n	8006fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fe4:	f000 fd22 	bl	8007a2c <xTimerCreateTimerTask>
 8006fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d116      	bne.n	800701e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007004:	4b12      	ldr	r3, [pc, #72]	; (8007050 <vTaskStartScheduler+0xc0>)
 8007006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <vTaskStartScheduler+0xc4>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <vTaskStartScheduler+0xc8>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007018:	f001 f8e2 	bl	80081e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800701c:	e00e      	b.n	800703c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d10a      	bne.n	800703c <vTaskStartScheduler+0xac>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60fb      	str	r3, [r7, #12]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <vTaskStartScheduler+0xaa>
}
 800703c:	bf00      	nop
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	08014928 	.word	0x08014928
 8007048:	080076c1 	.word	0x080076c1
 800704c:	200082ac 	.word	0x200082ac
 8007050:	200082a8 	.word	0x200082a8
 8007054:	20008294 	.word	0x20008294
 8007058:	2000828c 	.word	0x2000828c

0800705c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007060:	4b04      	ldr	r3, [pc, #16]	; (8007074 <vTaskSuspendAll+0x18>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	4a03      	ldr	r2, [pc, #12]	; (8007074 <vTaskSuspendAll+0x18>)
 8007068:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800706a:	bf00      	nop
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	200082b0 	.word	0x200082b0

08007078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007082:	2300      	movs	r3, #0
 8007084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007086:	4b42      	ldr	r3, [pc, #264]	; (8007190 <xTaskResumeAll+0x118>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	603b      	str	r3, [r7, #0]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070a4:	f001 f93e 	bl	8008324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070a8:	4b39      	ldr	r3, [pc, #228]	; (8007190 <xTaskResumeAll+0x118>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a38      	ldr	r2, [pc, #224]	; (8007190 <xTaskResumeAll+0x118>)
 80070b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b2:	4b37      	ldr	r3, [pc, #220]	; (8007190 <xTaskResumeAll+0x118>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d162      	bne.n	8007180 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ba:	4b36      	ldr	r3, [pc, #216]	; (8007194 <xTaskResumeAll+0x11c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d05e      	beq.n	8007180 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070c2:	e02f      	b.n	8007124 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	4b34      	ldr	r3, [pc, #208]	; (8007198 <xTaskResumeAll+0x120>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3318      	adds	r3, #24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff f871 	bl	80061b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f86c 	bl	80061b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e4:	4b2d      	ldr	r3, [pc, #180]	; (800719c <xTaskResumeAll+0x124>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d903      	bls.n	80070f4 <xTaskResumeAll+0x7c>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4a2a      	ldr	r2, [pc, #168]	; (800719c <xTaskResumeAll+0x124>)
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <xTaskResumeAll+0x128>)
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7fe fff7 	bl	80060fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007114:	4b23      	ldr	r3, [pc, #140]	; (80071a4 <xTaskResumeAll+0x12c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800711e:	4b22      	ldr	r3, [pc, #136]	; (80071a8 <xTaskResumeAll+0x130>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007124:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <xTaskResumeAll+0x120>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1cb      	bne.n	80070c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007132:	f000 fb7b 	bl	800782c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <xTaskResumeAll+0x134>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d010      	beq.n	8007164 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007142:	f000 f847 	bl	80071d4 <xTaskIncrementTick>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800714c:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <xTaskResumeAll+0x130>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3b01      	subs	r3, #1
 8007156:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f1      	bne.n	8007142 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <xTaskResumeAll+0x134>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007164:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <xTaskResumeAll+0x130>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800716c:	2301      	movs	r3, #1
 800716e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <xTaskResumeAll+0x138>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007180:	f001 f900 	bl	8008384 <vPortExitCritical>

	return xAlreadyYielded;
 8007184:	68bb      	ldr	r3, [r7, #8]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200082b0 	.word	0x200082b0
 8007194:	20008288 	.word	0x20008288
 8007198:	20008248 	.word	0x20008248
 800719c:	20008290 	.word	0x20008290
 80071a0:	20007db8 	.word	0x20007db8
 80071a4:	20007db4 	.word	0x20007db4
 80071a8:	2000829c 	.word	0x2000829c
 80071ac:	20008298 	.word	0x20008298
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <xTaskGetTickCount+0x1c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071c0:	687b      	ldr	r3, [r7, #4]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	2000828c 	.word	0x2000828c

080071d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071de:	4b4f      	ldr	r3, [pc, #316]	; (800731c <xTaskIncrementTick+0x148>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 808f 	bne.w	8007306 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071e8:	4b4d      	ldr	r3, [pc, #308]	; (8007320 <xTaskIncrementTick+0x14c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071f0:	4a4b      	ldr	r2, [pc, #300]	; (8007320 <xTaskIncrementTick+0x14c>)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d120      	bne.n	800723e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071fc:	4b49      	ldr	r3, [pc, #292]	; (8007324 <xTaskIncrementTick+0x150>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <xTaskIncrementTick+0x48>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	603b      	str	r3, [r7, #0]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <xTaskIncrementTick+0x46>
 800721c:	4b41      	ldr	r3, [pc, #260]	; (8007324 <xTaskIncrementTick+0x150>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	4b41      	ldr	r3, [pc, #260]	; (8007328 <xTaskIncrementTick+0x154>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a3f      	ldr	r2, [pc, #252]	; (8007324 <xTaskIncrementTick+0x150>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	4a3f      	ldr	r2, [pc, #252]	; (8007328 <xTaskIncrementTick+0x154>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	4b3e      	ldr	r3, [pc, #248]	; (800732c <xTaskIncrementTick+0x158>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a3d      	ldr	r2, [pc, #244]	; (800732c <xTaskIncrementTick+0x158>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	f000 faf7 	bl	800782c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800723e:	4b3c      	ldr	r3, [pc, #240]	; (8007330 <xTaskIncrementTick+0x15c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d349      	bcc.n	80072dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007248:	4b36      	ldr	r3, [pc, #216]	; (8007324 <xTaskIncrementTick+0x150>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007252:	4b37      	ldr	r3, [pc, #220]	; (8007330 <xTaskIncrementTick+0x15c>)
 8007254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007258:	601a      	str	r2, [r3, #0]
					break;
 800725a:	e03f      	b.n	80072dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b31      	ldr	r3, [pc, #196]	; (8007324 <xTaskIncrementTick+0x150>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d203      	bcs.n	800727c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007274:	4a2e      	ldr	r2, [pc, #184]	; (8007330 <xTaskIncrementTick+0x15c>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800727a:	e02f      	b.n	80072dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	3304      	adds	r3, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe ff99 	bl	80061b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3318      	adds	r3, #24
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe ff90 	bl	80061b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729c:	4b25      	ldr	r3, [pc, #148]	; (8007334 <xTaskIncrementTick+0x160>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d903      	bls.n	80072ac <xTaskIncrementTick+0xd8>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4a22      	ldr	r2, [pc, #136]	; (8007334 <xTaskIncrementTick+0x160>)
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <xTaskIncrementTick+0x164>)
 80072ba:	441a      	add	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f7fe ff1b 	bl	80060fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <xTaskIncrementTick+0x168>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d3b8      	bcc.n	8007248 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072d6:	2301      	movs	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072da:	e7b5      	b.n	8007248 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072dc:	4b17      	ldr	r3, [pc, #92]	; (800733c <xTaskIncrementTick+0x168>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4915      	ldr	r1, [pc, #84]	; (8007338 <xTaskIncrementTick+0x164>)
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d901      	bls.n	80072f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072f8:	4b11      	ldr	r3, [pc, #68]	; (8007340 <xTaskIncrementTick+0x16c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007300:	2301      	movs	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e004      	b.n	8007310 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <xTaskIncrementTick+0x170>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	4a0d      	ldr	r2, [pc, #52]	; (8007344 <xTaskIncrementTick+0x170>)
 800730e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007310:	697b      	ldr	r3, [r7, #20]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200082b0 	.word	0x200082b0
 8007320:	2000828c 	.word	0x2000828c
 8007324:	20008240 	.word	0x20008240
 8007328:	20008244 	.word	0x20008244
 800732c:	200082a0 	.word	0x200082a0
 8007330:	200082a8 	.word	0x200082a8
 8007334:	20008290 	.word	0x20008290
 8007338:	20007db8 	.word	0x20007db8
 800733c:	20007db4 	.word	0x20007db4
 8007340:	2000829c 	.word	0x2000829c
 8007344:	20008298 	.word	0x20008298

08007348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800734e:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <vTaskSwitchContext+0xa8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007356:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <vTaskSwitchContext+0xac>)
 8007358:	2201      	movs	r2, #1
 800735a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800735c:	e041      	b.n	80073e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800735e:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <vTaskSwitchContext+0xac>)
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007364:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <vTaskSwitchContext+0xb0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	e010      	b.n	800738e <vTaskSwitchContext+0x46>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <vTaskSwitchContext+0x40>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	607b      	str	r3, [r7, #4]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <vTaskSwitchContext+0x3e>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b01      	subs	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	491b      	ldr	r1, [pc, #108]	; (80073fc <vTaskSwitchContext+0xb4>)
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0e4      	beq.n	800736c <vTaskSwitchContext+0x24>
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <vTaskSwitchContext+0xb4>)
 80073ae:	4413      	add	r3, r2
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3308      	adds	r3, #8
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d104      	bne.n	80073d2 <vTaskSwitchContext+0x8a>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <vTaskSwitchContext+0xb8>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4a06      	ldr	r2, [pc, #24]	; (80073f8 <vTaskSwitchContext+0xb0>)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6013      	str	r3, [r2, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	200082b0 	.word	0x200082b0
 80073f4:	2000829c 	.word	0x2000829c
 80073f8:	20008290 	.word	0x20008290
 80073fc:	20007db8 	.word	0x20007db8
 8007400:	20007db4 	.word	0x20007db4

08007404 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60fb      	str	r3, [r7, #12]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <vTaskPlaceOnEventList+0x44>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3318      	adds	r3, #24
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fe fe87 	bl	8006146 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007438:	2101      	movs	r1, #1
 800743a:	6838      	ldr	r0, [r7, #0]
 800743c:	f000 faa2 	bl	8007984 <prvAddCurrentTaskToDelayedList>
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20007db4 	.word	0x20007db4

0800744c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3318      	adds	r3, #24
 800747a:	4619      	mov	r1, r3
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7fe fe3e 	bl	80060fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800748c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	68b8      	ldr	r0, [r7, #8]
 8007492:	f000 fa77 	bl	8007984 <prvAddCurrentTaskToDelayedList>
	}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20007db4 	.word	0x20007db4

080074a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60fb      	str	r3, [r7, #12]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	3318      	adds	r3, #24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fe6f 	bl	80061b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074da:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <xTaskRemoveFromEventList+0xb0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11d      	bne.n	800751e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fe66 	bl	80061b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	4b19      	ldr	r3, [pc, #100]	; (8007558 <xTaskRemoveFromEventList+0xb4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d903      	bls.n	8007500 <xTaskRemoveFromEventList+0x5c>
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	4a16      	ldr	r2, [pc, #88]	; (8007558 <xTaskRemoveFromEventList+0xb4>)
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4a13      	ldr	r2, [pc, #76]	; (800755c <xTaskRemoveFromEventList+0xb8>)
 800750e:	441a      	add	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	3304      	adds	r3, #4
 8007514:	4619      	mov	r1, r3
 8007516:	4610      	mov	r0, r2
 8007518:	f7fe fdf1 	bl	80060fe <vListInsertEnd>
 800751c:	e005      	b.n	800752a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3318      	adds	r3, #24
 8007522:	4619      	mov	r1, r3
 8007524:	480e      	ldr	r0, [pc, #56]	; (8007560 <xTaskRemoveFromEventList+0xbc>)
 8007526:	f7fe fdea 	bl	80060fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <xTaskRemoveFromEventList+0xc0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	429a      	cmp	r2, r3
 8007536:	d905      	bls.n	8007544 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <xTaskRemoveFromEventList+0xc4>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e001      	b.n	8007548 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200082b0 	.word	0x200082b0
 8007558:	20008290 	.word	0x20008290
 800755c:	20007db8 	.word	0x20007db8
 8007560:	20008248 	.word	0x20008248
 8007564:	20007db4 	.word	0x20007db4
 8007568:	2000829c 	.word	0x2000829c

0800756c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60fb      	str	r3, [r7, #12]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007590:	f000 fec8 	bl	8008324 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <vTaskSetTimeOutState+0x44>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <vTaskSetTimeOutState+0x48>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80075a4:	f000 feee 	bl	8008384 <vPortExitCritical>
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200082a0 	.word	0x200082a0
 80075b4:	2000828c 	.word	0x2000828c

080075b8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <vTaskInternalSetTimeOutState+0x24>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <vTaskInternalSetTimeOutState+0x28>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	200082a0 	.word	0x200082a0
 80075e0:	2000828c 	.word	0x2000828c

080075e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	613b      	str	r3, [r7, #16]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	60fb      	str	r3, [r7, #12]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007626:	f000 fe7d 	bl	8008324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800762a:	4b1d      	ldr	r3, [pc, #116]	; (80076a0 <xTaskCheckForTimeOut+0xbc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007642:	d102      	bne.n	800764a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	e023      	b.n	8007692 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <xTaskCheckForTimeOut+0xc0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d007      	beq.n	8007666 <xTaskCheckForTimeOut+0x82>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e015      	b.n	8007692 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	429a      	cmp	r2, r3
 800766e:	d20b      	bcs.n	8007688 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ff9b 	bl	80075b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e004      	b.n	8007692 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800768e:	2301      	movs	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007692:	f000 fe77 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8007696:	69fb      	ldr	r3, [r7, #28]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	2000828c 	.word	0x2000828c
 80076a4:	200082a0 	.word	0x200082a0

080076a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <vTaskMissedYield+0x14>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
}
 80076b2:	bf00      	nop
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000829c 	.word	0x2000829c

080076c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076c8:	f000 f852 	bl	8007770 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <prvIdleTask+0x28>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d9f9      	bls.n	80076c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <prvIdleTask+0x2c>)
 80076d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076e4:	e7f0      	b.n	80076c8 <prvIdleTask+0x8>
 80076e6:	bf00      	nop
 80076e8:	20007db8 	.word	0x20007db8
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f6:	2300      	movs	r3, #0
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	e00c      	b.n	8007716 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a12      	ldr	r2, [pc, #72]	; (8007750 <prvInitialiseTaskLists+0x60>)
 8007708:	4413      	add	r3, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fcca 	bl	80060a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3301      	adds	r3, #1
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b37      	cmp	r3, #55	; 0x37
 800771a:	d9ef      	bls.n	80076fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800771c:	480d      	ldr	r0, [pc, #52]	; (8007754 <prvInitialiseTaskLists+0x64>)
 800771e:	f7fe fcc1 	bl	80060a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007722:	480d      	ldr	r0, [pc, #52]	; (8007758 <prvInitialiseTaskLists+0x68>)
 8007724:	f7fe fcbe 	bl	80060a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007728:	480c      	ldr	r0, [pc, #48]	; (800775c <prvInitialiseTaskLists+0x6c>)
 800772a:	f7fe fcbb 	bl	80060a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800772e:	480c      	ldr	r0, [pc, #48]	; (8007760 <prvInitialiseTaskLists+0x70>)
 8007730:	f7fe fcb8 	bl	80060a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007734:	480b      	ldr	r0, [pc, #44]	; (8007764 <prvInitialiseTaskLists+0x74>)
 8007736:	f7fe fcb5 	bl	80060a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <prvInitialiseTaskLists+0x78>)
 800773c:	4a05      	ldr	r2, [pc, #20]	; (8007754 <prvInitialiseTaskLists+0x64>)
 800773e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <prvInitialiseTaskLists+0x7c>)
 8007742:	4a05      	ldr	r2, [pc, #20]	; (8007758 <prvInitialiseTaskLists+0x68>)
 8007744:	601a      	str	r2, [r3, #0]
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20007db8 	.word	0x20007db8
 8007754:	20008218 	.word	0x20008218
 8007758:	2000822c 	.word	0x2000822c
 800775c:	20008248 	.word	0x20008248
 8007760:	2000825c 	.word	0x2000825c
 8007764:	20008274 	.word	0x20008274
 8007768:	20008240 	.word	0x20008240
 800776c:	20008244 	.word	0x20008244

08007770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007776:	e019      	b.n	80077ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007778:	f000 fdd4 	bl	8008324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800777c:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <prvCheckTasksWaitingTermination+0x50>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fd15 	bl	80061b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <prvCheckTasksWaitingTermination+0x54>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3b01      	subs	r3, #1
 8007794:	4a0b      	ldr	r2, [pc, #44]	; (80077c4 <prvCheckTasksWaitingTermination+0x54>)
 8007796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvCheckTasksWaitingTermination+0x58>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3b01      	subs	r3, #1
 800779e:	4a0a      	ldr	r2, [pc, #40]	; (80077c8 <prvCheckTasksWaitingTermination+0x58>)
 80077a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077a2:	f000 fdef 	bl	8008384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f810 	bl	80077cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <prvCheckTasksWaitingTermination+0x58>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e1      	bne.n	8007778 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	2000825c 	.word	0x2000825c
 80077c4:	20008288 	.word	0x20008288
 80077c8:	20008270 	.word	0x20008270

080077cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d108      	bne.n	80077f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 ff8c 	bl	8008700 <vPortFree>
				vPortFree( pxTCB );
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 ff89 	bl	8008700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077ee:	e018      	b.n	8007822 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d103      	bne.n	8007802 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 ff80 	bl	8008700 <vPortFree>
	}
 8007800:	e00f      	b.n	8007822 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007808:	2b02      	cmp	r3, #2
 800780a:	d00a      	beq.n	8007822 <prvDeleteTCB+0x56>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <prvDeleteTCB+0x54>
	}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <prvResetNextTaskUnblockTime+0x38>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d104      	bne.n	8007846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <prvResetNextTaskUnblockTime+0x3c>)
 800783e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007844:	e008      	b.n	8007858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <prvResetNextTaskUnblockTime+0x38>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4a04      	ldr	r2, [pc, #16]	; (8007868 <prvResetNextTaskUnblockTime+0x3c>)
 8007856:	6013      	str	r3, [r2, #0]
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	20008240 	.word	0x20008240
 8007868:	200082a8 	.word	0x200082a8

0800786c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <xTaskGetSchedulerState+0x34>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800787a:	2301      	movs	r3, #1
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	e008      	b.n	8007892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007880:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <xTaskGetSchedulerState+0x38>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007888:	2302      	movs	r3, #2
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	e001      	b.n	8007892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007892:	687b      	ldr	r3, [r7, #4]
	}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20008294 	.word	0x20008294
 80078a4:	200082b0 	.word	0x200082b0

080078a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d056      	beq.n	800796c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <xTaskPriorityDisinherit+0xd0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d00a      	beq.n	80078de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60bb      	str	r3, [r7, #8]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007900:	1e5a      	subs	r2, r3, #1
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790e:	429a      	cmp	r2, r3
 8007910:	d02c      	beq.n	800796c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007916:	2b00      	cmp	r3, #0
 8007918:	d128      	bne.n	800796c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3304      	adds	r3, #4
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fc4a 	bl	80061b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793c:	4b0f      	ldr	r3, [pc, #60]	; (800797c <xTaskPriorityDisinherit+0xd4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <xTaskPriorityDisinherit+0xa4>
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	4a0c      	ldr	r2, [pc, #48]	; (800797c <xTaskPriorityDisinherit+0xd4>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a09      	ldr	r2, [pc, #36]	; (8007980 <xTaskPriorityDisinherit+0xd8>)
 800795a:	441a      	add	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe fbcb 	bl	80060fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800796c:	697b      	ldr	r3, [r7, #20]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20007db4 	.word	0x20007db4
 800797c:	20008290 	.word	0x20008290
 8007980:	20007db8 	.word	0x20007db8

08007984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800798e:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <prvAddCurrentTaskToDelayedList+0x90>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007994:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3304      	adds	r3, #4
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fc0c 	bl	80061b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a6:	d10a      	bne.n	80079be <prvAddCurrentTaskToDelayedList+0x3a>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ae:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4619      	mov	r1, r3
 80079b6:	4819      	ldr	r0, [pc, #100]	; (8007a1c <prvAddCurrentTaskToDelayedList+0x98>)
 80079b8:	f7fe fba1 	bl	80060fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079bc:	e026      	b.n	8007a0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d209      	bcs.n	80079ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d6:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe fbaf 	bl	8006146 <vListInsert>
}
 80079e8:	e010      	b.n	8007a0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fba5 	bl	8006146 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079fc:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d202      	bcs.n	8007a0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a06:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6013      	str	r3, [r2, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	2000828c 	.word	0x2000828c
 8007a18:	20007db4 	.word	0x20007db4
 8007a1c:	20008274 	.word	0x20008274
 8007a20:	20008244 	.word	0x20008244
 8007a24:	20008240 	.word	0x20008240
 8007a28:	200082a8 	.word	0x200082a8

08007a2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a36:	f000 fb07 	bl	8008048 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a3a:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <xTimerCreateTimerTask+0x80>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d021      	beq.n	8007a86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a4a:	1d3a      	adds	r2, r7, #4
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	f107 030c 	add.w	r3, r7, #12
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fb0b 	bl	8006070 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	9202      	str	r2, [sp, #8]
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	2302      	movs	r3, #2
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	4910      	ldr	r1, [pc, #64]	; (8007ab0 <xTimerCreateTimerTask+0x84>)
 8007a6e:	4811      	ldr	r0, [pc, #68]	; (8007ab4 <xTimerCreateTimerTask+0x88>)
 8007a70:	f7ff f8b8 	bl	8006be4 <xTaskCreateStatic>
 8007a74:	4603      	mov	r3, r0
 8007a76:	4a10      	ldr	r2, [pc, #64]	; (8007ab8 <xTimerCreateTimerTask+0x8c>)
 8007a78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <xTimerCreateTimerTask+0x8c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a82:	2301      	movs	r3, #1
 8007a84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	613b      	str	r3, [r7, #16]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200082e4 	.word	0x200082e4
 8007ab0:	08014930 	.word	0x08014930
 8007ab4:	08007bf1 	.word	0x08007bf1
 8007ab8:	200082e8 	.word	0x200082e8

08007abc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	623b      	str	r3, [r7, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007aea:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d02a      	beq.n	8007b48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	dc18      	bgt.n	8007b36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b04:	f7ff feb2 	bl	800786c <xTaskGetSchedulerState>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d109      	bne.n	8007b22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f107 0110 	add.w	r1, r7, #16
 8007b16:	2300      	movs	r3, #0
 8007b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1a:	f7fe fc7b 	bl	8006414 <xQueueGenericSend>
 8007b1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b20:	e012      	b.n	8007b48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f107 0110 	add.w	r1, r7, #16
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f7fe fc71 	bl	8006414 <xQueueGenericSend>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24
 8007b34:	e008      	b.n	8007b48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <xTimerGenericCommand+0x98>)
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f107 0110 	add.w	r1, r7, #16
 8007b3e:	2300      	movs	r3, #0
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	f7fe fd65 	bl	8006610 <xQueueGenericSendFromISR>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3728      	adds	r7, #40	; 0x28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200082e4 	.word	0x200082e4

08007b58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b62:	4b22      	ldr	r3, [pc, #136]	; (8007bec <prvProcessExpiredTimer+0x94>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe fb21 	bl	80061b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d022      	beq.n	8007bca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	699a      	ldr	r2, [r3, #24]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	18d1      	adds	r1, r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	6978      	ldr	r0, [r7, #20]
 8007b92:	f000 f8d1 	bl	8007d38 <prvInsertTimerInActiveList>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01f      	beq.n	8007bdc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6978      	ldr	r0, [r7, #20]
 8007ba8:	f7ff ff88 	bl	8007abc <xTimerGenericCommand>
 8007bac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d113      	bne.n	8007bdc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	60fb      	str	r3, [r7, #12]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	6978      	ldr	r0, [r7, #20]
 8007be2:	4798      	blx	r3
}
 8007be4:	bf00      	nop
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	200082dc 	.word	0x200082dc

08007bf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bf8:	f107 0308 	add.w	r3, r7, #8
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f857 	bl	8007cb0 <prvGetNextExpireTime>
 8007c02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4619      	mov	r1, r3
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f803 	bl	8007c14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c0e:	f000 f8d5 	bl	8007dbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c12:	e7f1      	b.n	8007bf8 <prvTimerTask+0x8>

08007c14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c1e:	f7ff fa1d 	bl	800705c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f866 	bl	8007cf8 <prvSampleTimeNow>
 8007c2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d130      	bne.n	8007c96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <prvProcessTimerOrBlockTask+0x3c>
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d806      	bhi.n	8007c50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c42:	f7ff fa19 	bl	8007078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff85 	bl	8007b58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c4e:	e024      	b.n	8007c9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c56:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <prvProcessTimerOrBlockTask+0x90>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <prvProcessTimerOrBlockTask+0x50>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <prvProcessTimerOrBlockTask+0x52>
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c68:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <prvProcessTimerOrBlockTask+0x94>)
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	4619      	mov	r1, r3
 8007c76:	f7fe ff81 	bl	8006b7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c7a:	f7ff f9fd 	bl	8007078 <xTaskResumeAll>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <prvProcessTimerOrBlockTask+0x98>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
}
 8007c94:	e001      	b.n	8007c9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c96:	f7ff f9ef 	bl	8007078 <xTaskResumeAll>
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200082e0 	.word	0x200082e0
 8007ca8:	200082e4 	.word	0x200082e4
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <prvGetNextExpireTime+0x44>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <prvGetNextExpireTime+0x16>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	e000      	b.n	8007cc8 <prvGetNextExpireTime+0x18>
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d105      	bne.n	8007ce0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cd4:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <prvGetNextExpireTime+0x44>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e001      	b.n	8007ce4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	200082dc 	.word	0x200082dc

08007cf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d00:	f7ff fa58 	bl	80071b4 <xTaskGetTickCount>
 8007d04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d06:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <prvSampleTimeNow+0x3c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d205      	bcs.n	8007d1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d10:	f000 f936 	bl	8007f80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d22:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <prvSampleTimeNow+0x3c>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d28:	68fb      	ldr	r3, [r7, #12]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	200082ec 	.word	0x200082ec

08007d38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d812      	bhi.n	8007d84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	1ad2      	subs	r2, r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d302      	bcc.n	8007d72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e01b      	b.n	8007daa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <prvInsertTimerInActiveList+0x7c>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe f9e2 	bl	8006146 <vListInsert>
 8007d82:	e012      	b.n	8007daa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d206      	bcs.n	8007d9a <prvInsertTimerInActiveList+0x62>
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e007      	b.n	8007daa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <prvInsertTimerInActiveList+0x80>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fe f9ce 	bl	8006146 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007daa:	697b      	ldr	r3, [r7, #20]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	200082e0 	.word	0x200082e0
 8007db8:	200082dc 	.word	0x200082dc

08007dbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08e      	sub	sp, #56	; 0x38
 8007dc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dc2:	e0ca      	b.n	8007f5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da18      	bge.n	8007dfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dca:	1d3b      	adds	r3, r7, #4
 8007dcc:	3304      	adds	r3, #4
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	61fb      	str	r3, [r7, #28]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	6850      	ldr	r0, [r2, #4]
 8007df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df6:	6892      	ldr	r2, [r2, #8]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f2c0 80aa 	blt.w	8007f58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	3304      	adds	r3, #4
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe f9cf 	bl	80061b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff ff6b 	bl	8007cf8 <prvSampleTimeNow>
 8007e22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	f200 8097 	bhi.w	8007f5a <prvProcessReceivedCommands+0x19e>
 8007e2c:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <prvProcessReceivedCommands+0x78>)
 8007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e32:	bf00      	nop
 8007e34:	08007e5d 	.word	0x08007e5d
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e5d 	.word	0x08007e5d
 8007e40:	08007ed1 	.word	0x08007ed1
 8007e44:	08007ee5 	.word	0x08007ee5
 8007e48:	08007f2f 	.word	0x08007f2f
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e5d 	.word	0x08007e5d
 8007e54:	08007ed1 	.word	0x08007ed1
 8007e58:	08007ee5 	.word	0x08007ee5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	18d1      	adds	r1, r2, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7c:	f7ff ff5c 	bl	8007d38 <prvInsertTimerInActiveList>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d069      	beq.n	8007f5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d05e      	beq.n	8007f5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	441a      	add	r2, r3
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eae:	f7ff fe05 	bl	8007abc <xTimerGenericCommand>
 8007eb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d14f      	bne.n	8007f5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	61bb      	str	r3, [r7, #24]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ee2:	e03a      	b.n	8007f5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	617b      	str	r3, [r7, #20]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	18d1      	adds	r1, r2, r3
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f28:	f7ff ff06 	bl	8007d38 <prvInsertTimerInActiveList>
					break;
 8007f2c:	e015      	b.n	8007f5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f000 fbdf 	bl	8008700 <vPortFree>
 8007f42:	e00a      	b.n	8007f5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f56:	e000      	b.n	8007f5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <prvProcessReceivedCommands+0x1c0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	1d39      	adds	r1, r7, #4
 8007f60:	2200      	movs	r2, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fbf0 	bl	8006748 <xQueueReceive>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f47f af2a 	bne.w	8007dc4 <prvProcessReceivedCommands+0x8>
	}
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	3730      	adds	r7, #48	; 0x30
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200082e4 	.word	0x200082e4

08007f80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f86:	e048      	b.n	800801a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f88:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <prvSwitchTimerLists+0xc0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f92:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <prvSwitchTimerLists+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe f909 	bl	80061b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d02e      	beq.n	800801a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d90e      	bls.n	8007fec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fda:	4b19      	ldr	r3, [pc, #100]	; (8008040 <prvSwitchTimerLists+0xc0>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f7fe f8ae 	bl	8006146 <vListInsert>
 8007fea:	e016      	b.n	800801a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fec:	2300      	movs	r3, #0
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff fd60 	bl	8007abc <xTimerGenericCommand>
 8007ffc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	603b      	str	r3, [r7, #0]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <prvSwitchTimerLists+0xc0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1b1      	bne.n	8007f88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <prvSwitchTimerLists+0xc0>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800802a:	4b06      	ldr	r3, [pc, #24]	; (8008044 <prvSwitchTimerLists+0xc4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a04      	ldr	r2, [pc, #16]	; (8008040 <prvSwitchTimerLists+0xc0>)
 8008030:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008032:	4a04      	ldr	r2, [pc, #16]	; (8008044 <prvSwitchTimerLists+0xc4>)
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	6013      	str	r3, [r2, #0]
}
 8008038:	bf00      	nop
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	200082dc 	.word	0x200082dc
 8008044:	200082e0 	.word	0x200082e0

08008048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800804e:	f000 f969 	bl	8008324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008052:	4b15      	ldr	r3, [pc, #84]	; (80080a8 <prvCheckForValidListAndQueue+0x60>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d120      	bne.n	800809c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800805a:	4814      	ldr	r0, [pc, #80]	; (80080ac <prvCheckForValidListAndQueue+0x64>)
 800805c:	f7fe f822 	bl	80060a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008060:	4813      	ldr	r0, [pc, #76]	; (80080b0 <prvCheckForValidListAndQueue+0x68>)
 8008062:	f7fe f81f 	bl	80060a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <prvCheckForValidListAndQueue+0x6c>)
 8008068:	4a10      	ldr	r2, [pc, #64]	; (80080ac <prvCheckForValidListAndQueue+0x64>)
 800806a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800806c:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <prvCheckForValidListAndQueue+0x70>)
 800806e:	4a10      	ldr	r2, [pc, #64]	; (80080b0 <prvCheckForValidListAndQueue+0x68>)
 8008070:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008072:	2300      	movs	r3, #0
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	4b11      	ldr	r3, [pc, #68]	; (80080bc <prvCheckForValidListAndQueue+0x74>)
 8008078:	4a11      	ldr	r2, [pc, #68]	; (80080c0 <prvCheckForValidListAndQueue+0x78>)
 800807a:	2110      	movs	r1, #16
 800807c:	200a      	movs	r0, #10
 800807e:	f7fe f92d 	bl	80062dc <xQueueGenericCreateStatic>
 8008082:	4603      	mov	r3, r0
 8008084:	4a08      	ldr	r2, [pc, #32]	; (80080a8 <prvCheckForValidListAndQueue+0x60>)
 8008086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008088:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <prvCheckForValidListAndQueue+0x60>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <prvCheckForValidListAndQueue+0x60>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	490b      	ldr	r1, [pc, #44]	; (80080c4 <prvCheckForValidListAndQueue+0x7c>)
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fd46 	bl	8006b28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800809c:	f000 f972 	bl	8008384 <vPortExitCritical>
}
 80080a0:	bf00      	nop
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200082e4 	.word	0x200082e4
 80080ac:	200082b4 	.word	0x200082b4
 80080b0:	200082c8 	.word	0x200082c8
 80080b4:	200082dc 	.word	0x200082dc
 80080b8:	200082e0 	.word	0x200082e0
 80080bc:	20008390 	.word	0x20008390
 80080c0:	200082f0 	.word	0x200082f0
 80080c4:	08014938 	.word	0x08014938

080080c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f023 0201 	bic.w	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b04      	subs	r3, #4
 80080f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f8:	4a0c      	ldr	r2, [pc, #48]	; (800812c <pxPortInitialiseStack+0x64>)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b14      	subs	r3, #20
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b04      	subs	r3, #4
 800810e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f06f 0202 	mvn.w	r2, #2
 8008116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3b20      	subs	r3, #32
 800811c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800811e:	68fb      	ldr	r3, [r7, #12]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	08008131 	.word	0x08008131

08008130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <prvTaskExitError+0x54>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008142:	d00a      	beq.n	800815a <prvTaskExitError+0x2a>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <prvTaskExitError+0x28>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	60bb      	str	r3, [r7, #8]
}
 800816c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800816e:	bf00      	nop
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0fc      	beq.n	8008170 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008176:	bf00      	nop
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	20000010 	.word	0x20000010
	...

08008190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	4770      	bx	lr
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst2>:
 80081b0:	20007db4 	.word	0x20007db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081b8:	4808      	ldr	r0, [pc, #32]	; (80081dc <prvPortStartFirstTask+0x24>)
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f380 8808 	msr	MSP, r0
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8814 	msr	CONTROL, r0
 80081ca:	b662      	cpsie	i
 80081cc:	b661      	cpsie	f
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	df00      	svc	0
 80081d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081da:	bf00      	nop
 80081dc:	e000ed08 	.word	0xe000ed08

080081e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081e6:	4b46      	ldr	r3, [pc, #280]	; (8008300 <xPortStartScheduler+0x120>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a46      	ldr	r2, [pc, #280]	; (8008304 <xPortStartScheduler+0x124>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10a      	bne.n	8008206 <xPortStartScheduler+0x26>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008206:	4b3e      	ldr	r3, [pc, #248]	; (8008300 <xPortStartScheduler+0x120>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <xPortStartScheduler+0x128>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10a      	bne.n	8008226 <xPortStartScheduler+0x46>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008226:	4b39      	ldr	r3, [pc, #228]	; (800830c <xPortStartScheduler+0x12c>)
 8008228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4b31      	ldr	r3, [pc, #196]	; (8008310 <xPortStartScheduler+0x130>)
 800824c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800824e:	4b31      	ldr	r3, [pc, #196]	; (8008314 <xPortStartScheduler+0x134>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008254:	e009      	b.n	800826a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008256:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <xPortStartScheduler+0x134>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3b01      	subs	r3, #1
 800825c:	4a2d      	ldr	r2, [pc, #180]	; (8008314 <xPortStartScheduler+0x134>)
 800825e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d0ef      	beq.n	8008256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008276:	4b27      	ldr	r3, [pc, #156]	; (8008314 <xPortStartScheduler+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f1c3 0307 	rsb	r3, r3, #7
 800827e:	2b04      	cmp	r3, #4
 8008280:	d00a      	beq.n	8008298 <xPortStartScheduler+0xb8>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60bb      	str	r3, [r7, #8]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008298:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <xPortStartScheduler+0x134>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <xPortStartScheduler+0x134>)
 80082a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <xPortStartScheduler+0x134>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082aa:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <xPortStartScheduler+0x134>)
 80082ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082b6:	4b18      	ldr	r3, [pc, #96]	; (8008318 <xPortStartScheduler+0x138>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a17      	ldr	r2, [pc, #92]	; (8008318 <xPortStartScheduler+0x138>)
 80082bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <xPortStartScheduler+0x138>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a14      	ldr	r2, [pc, #80]	; (8008318 <xPortStartScheduler+0x138>)
 80082c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ce:	f000 f8dd 	bl	800848c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d2:	4b12      	ldr	r3, [pc, #72]	; (800831c <xPortStartScheduler+0x13c>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082d8:	f000 f8fc 	bl	80084d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082dc:	4b10      	ldr	r3, [pc, #64]	; (8008320 <xPortStartScheduler+0x140>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0f      	ldr	r2, [pc, #60]	; (8008320 <xPortStartScheduler+0x140>)
 80082e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082e8:	f7ff ff66 	bl	80081b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082ec:	f7ff f82c 	bl	8007348 <vTaskSwitchContext>
	prvTaskExitError();
 80082f0:	f7ff ff1e 	bl	8008130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	e000ed00 	.word	0xe000ed00
 8008304:	410fc271 	.word	0x410fc271
 8008308:	410fc270 	.word	0x410fc270
 800830c:	e000e400 	.word	0xe000e400
 8008310:	200083e0 	.word	0x200083e0
 8008314:	200083e4 	.word	0x200083e4
 8008318:	e000ed20 	.word	0xe000ed20
 800831c:	20000010 	.word	0x20000010
 8008320:	e000ef34 	.word	0xe000ef34

08008324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	607b      	str	r3, [r7, #4]
}
 800833c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <vPortEnterCritical+0x58>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	4a0d      	ldr	r2, [pc, #52]	; (800837c <vPortEnterCritical+0x58>)
 8008346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <vPortEnterCritical+0x58>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10f      	bne.n	8008370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008350:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <vPortEnterCritical+0x5c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <vPortEnterCritical+0x4c>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	603b      	str	r3, [r7, #0]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vPortEnterCritical+0x4a>
	}
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	20000010 	.word	0x20000010
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <vPortExitCritical+0x50>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <vPortExitCritical+0x24>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	607b      	str	r3, [r7, #4]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <vPortExitCritical+0x50>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <vPortExitCritical+0x50>)
 80083b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083b2:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <vPortExitCritical+0x42>
 80083ba:	2300      	movs	r3, #0
 80083bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	f383 8811 	msr	BASEPRI, r3
}
 80083c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000010 	.word	0x20000010
	...

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008404:	f380 8811 	msr	BASEPRI, r0
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f7fe ff9a 	bl	8007348 <vTaskSwitchContext>
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f380 8811 	msr	BASEPRI, r0
 800841c:	bc09      	pop	{r0, r3}
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	6808      	ldr	r0, [r1, #0]
 8008422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008426:	f01e 0f10 	tst.w	lr, #16
 800842a:	bf08      	it	eq
 800842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008430:	f380 8809 	msr	PSP, r0
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst>:
 8008440:	20007db4 	.word	0x20007db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008462:	f7fe feb7 	bl	80071d4 <xTaskIncrementTick>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800846c:	4b06      	ldr	r3, [pc, #24]	; (8008488 <xPortSysTickHandler+0x40>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f383 8811 	msr	BASEPRI, r3
}
 800847e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <vPortSetupTimerInterrupt+0x34>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <vPortSetupTimerInterrupt+0x38>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800849c:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <vPortSetupTimerInterrupt+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <vPortSetupTimerInterrupt+0x40>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <vPortSetupTimerInterrupt+0x44>)
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ae:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <vPortSetupTimerInterrupt+0x34>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	e000e010 	.word	0xe000e010
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	20000004 	.word	0x20000004
 80084cc:	10624dd3 	.word	0x10624dd3
 80084d0:	e000e014 	.word	0xe000e014

080084d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084e4 <vPortEnableVFP+0x10>
 80084d8:	6801      	ldr	r1, [r0, #0]
 80084da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084de:	6001      	str	r1, [r0, #0]
 80084e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e2:	bf00      	nop
 80084e4:	e000ed88 	.word	0xe000ed88

080084e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d914      	bls.n	8008524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fa:	4a17      	ldr	r2, [pc, #92]	; (8008558 <vPortValidateInterruptPriority+0x70>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008504:	4b15      	ldr	r3, [pc, #84]	; (800855c <vPortValidateInterruptPriority+0x74>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	7afa      	ldrb	r2, [r7, #11]
 800850a:	429a      	cmp	r2, r3
 800850c:	d20a      	bcs.n	8008524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <vPortValidateInterruptPriority+0x78>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <vPortValidateInterruptPriority+0x7c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d90a      	bls.n	800854a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	603b      	str	r3, [r7, #0]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <vPortValidateInterruptPriority+0x60>
	}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	e000e3f0 	.word	0xe000e3f0
 800855c:	200083e0 	.word	0x200083e0
 8008560:	e000ed0c 	.word	0xe000ed0c
 8008564:	200083e4 	.word	0x200083e4

08008568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	; 0x28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008574:	f7fe fd72 	bl	800705c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008578:	4b5b      	ldr	r3, [pc, #364]	; (80086e8 <pvPortMalloc+0x180>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008580:	f000 f920 	bl	80087c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008584:	4b59      	ldr	r3, [pc, #356]	; (80086ec <pvPortMalloc+0x184>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	f040 8093 	bne.w	80086b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01d      	beq.n	80085d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008598:	2208      	movs	r2, #8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d014      	beq.n	80085d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	3308      	adds	r3, #8
 80085b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <pvPortMalloc+0x6c>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	617b      	str	r3, [r7, #20]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d06e      	beq.n	80086b8 <pvPortMalloc+0x150>
 80085da:	4b45      	ldr	r3, [pc, #276]	; (80086f0 <pvPortMalloc+0x188>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d869      	bhi.n	80086b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085e4:	4b43      	ldr	r3, [pc, #268]	; (80086f4 <pvPortMalloc+0x18c>)
 80085e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085e8:	4b42      	ldr	r3, [pc, #264]	; (80086f4 <pvPortMalloc+0x18c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ee:	e004      	b.n	80085fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <pvPortMalloc+0xa4>
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f1      	bne.n	80085f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800860c:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <pvPortMalloc+0x180>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008612:	429a      	cmp	r2, r3
 8008614:	d050      	beq.n	80086b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2208      	movs	r2, #8
 800861c:	4413      	add	r3, r2
 800861e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	2308      	movs	r3, #8
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	429a      	cmp	r2, r3
 8008636:	d91f      	bls.n	8008678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <pvPortMalloc+0xf8>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	613b      	str	r3, [r7, #16]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008672:	69b8      	ldr	r0, [r7, #24]
 8008674:	f000 f908 	bl	8008888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008678:	4b1d      	ldr	r3, [pc, #116]	; (80086f0 <pvPortMalloc+0x188>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	4a1b      	ldr	r2, [pc, #108]	; (80086f0 <pvPortMalloc+0x188>)
 8008684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <pvPortMalloc+0x188>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <pvPortMalloc+0x190>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d203      	bcs.n	800869a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008692:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <pvPortMalloc+0x188>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a18      	ldr	r2, [pc, #96]	; (80086f8 <pvPortMalloc+0x190>)
 8008698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <pvPortMalloc+0x184>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <pvPortMalloc+0x194>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a11      	ldr	r2, [pc, #68]	; (80086fc <pvPortMalloc+0x194>)
 80086b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086b8:	f7fe fcde 	bl	8007078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <pvPortMalloc+0x174>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60fb      	str	r3, [r7, #12]
}
 80086d8:	bf00      	nop
 80086da:	e7fe      	b.n	80086da <pvPortMalloc+0x172>
	return pvReturn;
 80086dc:	69fb      	ldr	r3, [r7, #28]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3728      	adds	r7, #40	; 0x28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2000bff0 	.word	0x2000bff0
 80086ec:	2000c004 	.word	0x2000c004
 80086f0:	2000bff4 	.word	0x2000bff4
 80086f4:	2000bfe8 	.word	0x2000bfe8
 80086f8:	2000bff8 	.word	0x2000bff8
 80086fc:	2000bffc 	.word	0x2000bffc

08008700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04d      	beq.n	80087ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008712:	2308      	movs	r3, #8
 8008714:	425b      	negs	r3, r3
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <vPortFree+0xb8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4013      	ands	r3, r2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <vPortFree+0x44>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	60fb      	str	r3, [r7, #12]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <vPortFree+0x62>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60bb      	str	r3, [r7, #8]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <vPortFree+0xb8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01e      	beq.n	80087ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11a      	bne.n	80087ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <vPortFree+0xb8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	43db      	mvns	r3, r3
 8008782:	401a      	ands	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008788:	f7fe fc68 	bl	800705c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <vPortFree+0xbc>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4413      	add	r3, r2
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <vPortFree+0xbc>)
 8008798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800879a:	6938      	ldr	r0, [r7, #16]
 800879c:	f000 f874 	bl	8008888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <vPortFree+0xc0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vPortFree+0xc0>)
 80087a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087aa:	f7fe fc65 	bl	8007078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	2000c004 	.word	0x2000c004
 80087bc:	2000bff4 	.word	0x2000bff4
 80087c0:	2000c000 	.word	0x2000c000

080087c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087d0:	4b27      	ldr	r3, [pc, #156]	; (8008870 <prvHeapInit+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00c      	beq.n	80087f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <prvHeapInit+0xac>)
 80087f4:	4413      	add	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <prvHeapInit+0xb0>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <prvHeapInit+0xb0>)
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008810:	2208      	movs	r2, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvHeapInit+0xb4>)
 8008824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <prvHeapInit+0xb4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <prvHeapInit+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvHeapInit+0xb4>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <prvHeapInit+0xb8>)
 8008852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvHeapInit+0xbc>)
 800885a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <prvHeapInit+0xc0>)
 800885e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	200083e8 	.word	0x200083e8
 8008874:	2000bfe8 	.word	0x2000bfe8
 8008878:	2000bff0 	.word	0x2000bff0
 800887c:	2000bff8 	.word	0x2000bff8
 8008880:	2000bff4 	.word	0x2000bff4
 8008884:	2000c004 	.word	0x2000c004

08008888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <prvInsertBlockIntoFreeList+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e002      	b.n	800889c <prvInsertBlockIntoFreeList+0x14>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d8f7      	bhi.n	8008896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d108      	bne.n	80088ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d118      	bne.n	8008910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d00d      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e008      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e003      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d002      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	2000bfe8 	.word	0x2000bfe8
 8008938:	2000bff0 	.word	0x2000bff0

0800893c <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>:
 800893c:	f000 b886 	b.w	8008a4c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>

08008940 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request>:
 8008940:	4800      	ldr	r0, [pc, #0]	; (8008944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x4>)
 8008942:	4770      	bx	lr
 8008944:	20000030 	.word	0x20000030

08008948 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response>:
 8008948:	4800      	ldr	r0, [pc, #0]	; (800894c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0x4>)
 800894a:	4770      	bx	lr
 800894c:	2000003c 	.word	0x2000003c

08008950 <_AddTwoInts_Response__max_serialized_size>:
 8008950:	b508      	push	{r3, lr}
 8008952:	2108      	movs	r1, #8
 8008954:	2000      	movs	r0, #0
 8008956:	f001 f9f1 	bl	8009d3c <ucdr_alignment>
 800895a:	3008      	adds	r0, #8
 800895c:	bd08      	pop	{r3, pc}
 800895e:	bf00      	nop

08008960 <_AddTwoInts_Response__cdr_deserialize>:
 8008960:	b109      	cbz	r1, 8008966 <_AddTwoInts_Response__cdr_deserialize+0x6>
 8008962:	f001 b8cf 	b.w	8009b04 <ucdr_deserialize_int64_t>
 8008966:	4608      	mov	r0, r1
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop

0800896c <get_serialized_size_example_interfaces__srv__AddTwoInts_Request>:
 800896c:	b188      	cbz	r0, 8008992 <get_serialized_size_example_interfaces__srv__AddTwoInts_Request+0x26>
 800896e:	b538      	push	{r3, r4, r5, lr}
 8008970:	460d      	mov	r5, r1
 8008972:	4628      	mov	r0, r5
 8008974:	2108      	movs	r1, #8
 8008976:	f001 f9e1 	bl	8009d3c <ucdr_alignment>
 800897a:	f105 0308 	add.w	r3, r5, #8
 800897e:	181c      	adds	r4, r3, r0
 8008980:	4620      	mov	r0, r4
 8008982:	2108      	movs	r1, #8
 8008984:	f001 f9da 	bl	8009d3c <ucdr_alignment>
 8008988:	f1c5 0508 	rsb	r5, r5, #8
 800898c:	4428      	add	r0, r5
 800898e:	4420      	add	r0, r4
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	4770      	bx	lr

08008994 <get_serialized_size_example_interfaces__srv__AddTwoInts_Response>:
 8008994:	b130      	cbz	r0, 80089a4 <get_serialized_size_example_interfaces__srv__AddTwoInts_Response+0x10>
 8008996:	b508      	push	{r3, lr}
 8008998:	4608      	mov	r0, r1
 800899a:	2108      	movs	r1, #8
 800899c:	f001 f9ce 	bl	8009d3c <ucdr_alignment>
 80089a0:	3008      	adds	r0, #8
 80089a2:	bd08      	pop	{r3, pc}
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop

080089a8 <_AddTwoInts_Request__cdr_deserialize>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	b149      	cbz	r1, 80089c2 <_AddTwoInts_Request__cdr_deserialize+0x1a>
 80089ae:	4605      	mov	r5, r0
 80089b0:	f001 f8a8 	bl	8009b04 <ucdr_deserialize_int64_t>
 80089b4:	f104 0108 	add.w	r1, r4, #8
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089be:	f001 b8a1 	b.w	8009b04 <ucdr_deserialize_int64_t>
 80089c2:	4608      	mov	r0, r1
 80089c4:	bd38      	pop	{r3, r4, r5, pc}
 80089c6:	bf00      	nop

080089c8 <_AddTwoInts_Request__cdr_serialize>:
 80089c8:	b170      	cbz	r0, 80089e8 <_AddTwoInts_Request__cdr_serialize+0x20>
 80089ca:	b570      	push	{r4, r5, r6, lr}
 80089cc:	e9d0 2300 	ldrd	r2, r3, [r0]
 80089d0:	460d      	mov	r5, r1
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	f000 ffc5 	bl	8009964 <ucdr_serialize_int64_t>
 80089da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80089de:	4628      	mov	r0, r5
 80089e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089e4:	f000 bfbe 	b.w	8009964 <ucdr_serialize_int64_t>
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop

080089ec <_AddTwoInts_Response__cdr_serialize>:
 80089ec:	4603      	mov	r3, r0
 80089ee:	b120      	cbz	r0, 80089fa <_AddTwoInts_Response__cdr_serialize+0xe>
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	4608      	mov	r0, r1
 80089f6:	f000 bfb5 	b.w	8009964 <ucdr_serialize_int64_t>
 80089fa:	4770      	bx	lr

080089fc <_AddTwoInts_Response__get_serialized_size>:
 80089fc:	b130      	cbz	r0, 8008a0c <_AddTwoInts_Response__get_serialized_size+0x10>
 80089fe:	b508      	push	{r3, lr}
 8008a00:	2108      	movs	r1, #8
 8008a02:	2000      	movs	r0, #0
 8008a04:	f001 f99a 	bl	8009d3c <ucdr_alignment>
 8008a08:	3008      	adds	r0, #8
 8008a0a:	bd08      	pop	{r3, pc}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop

08008a10 <_AddTwoInts_Request__get_serialized_size>:
 8008a10:	b168      	cbz	r0, 8008a2e <_AddTwoInts_Request__get_serialized_size+0x1e>
 8008a12:	b510      	push	{r4, lr}
 8008a14:	2108      	movs	r1, #8
 8008a16:	2000      	movs	r0, #0
 8008a18:	f001 f990 	bl	8009d3c <ucdr_alignment>
 8008a1c:	f100 0408 	add.w	r4, r0, #8
 8008a20:	4620      	mov	r0, r4
 8008a22:	2108      	movs	r1, #8
 8008a24:	f001 f98a 	bl	8009d3c <ucdr_alignment>
 8008a28:	3008      	adds	r0, #8
 8008a2a:	4420      	add	r0, r4
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	4770      	bx	lr

08008a30 <_AddTwoInts_Request__max_serialized_size>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	2108      	movs	r1, #8
 8008a34:	2000      	movs	r0, #0
 8008a36:	f001 f981 	bl	8009d3c <ucdr_alignment>
 8008a3a:	f100 0408 	add.w	r4, r0, #8
 8008a3e:	4620      	mov	r0, r4
 8008a40:	2108      	movs	r1, #8
 8008a42:	f001 f97b 	bl	8009d3c <ucdr_alignment>
 8008a46:	3008      	adds	r0, #8
 8008a48:	4420      	add	r0, r4
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>:
 8008a4c:	4800      	ldr	r0, [pc, #0]	; (8008a50 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x4>)
 8008a4e:	4770      	bx	lr
 8008a50:	20000024 	.word	0x20000024

08008a54 <ucdr_serialize_bool>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	460d      	mov	r5, r1
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	f001 f924 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008a60:	b148      	cbz	r0, 8008a76 <ucdr_serialize_bool+0x22>
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	701d      	strb	r5, [r3, #0]
 8008a66:	68a2      	ldr	r2, [r4, #8]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	3201      	adds	r2, #1
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	2101      	movs	r1, #1
 8008a70:	60a2      	str	r2, [r4, #8]
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	7561      	strb	r1, [r4, #21]
 8008a76:	7da0      	ldrb	r0, [r4, #22]
 8008a78:	f080 0001 	eor.w	r0, r0, #1
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
 8008a7e:	bf00      	nop

08008a80 <ucdr_deserialize_bool>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	460d      	mov	r5, r1
 8008a84:	2101      	movs	r1, #1
 8008a86:	4604      	mov	r4, r0
 8008a88:	f001 f90e 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008a8c:	b168      	cbz	r0, 8008aaa <ucdr_deserialize_bool+0x2a>
 8008a8e:	68a2      	ldr	r2, [r4, #8]
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a96:	3900      	subs	r1, #0
 8008a98:	f103 0301 	add.w	r3, r3, #1
 8008a9c:	bf18      	it	ne
 8008a9e:	2101      	movne	r1, #1
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	7029      	strb	r1, [r5, #0]
 8008aa4:	60a2      	str	r2, [r4, #8]
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	7560      	strb	r0, [r4, #21]
 8008aaa:	7da0      	ldrb	r0, [r4, #22]
 8008aac:	f080 0001 	eor.w	r0, r0, #1
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	bf00      	nop

08008ab4 <ucdr_serialize_uint8_t>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	2101      	movs	r1, #1
 8008aba:	4604      	mov	r4, r0
 8008abc:	f001 f8f4 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008ac0:	b148      	cbz	r0, 8008ad6 <ucdr_serialize_uint8_t+0x22>
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	701d      	strb	r5, [r3, #0]
 8008ac6:	68a2      	ldr	r2, [r4, #8]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	3201      	adds	r2, #1
 8008acc:	3301      	adds	r3, #1
 8008ace:	2101      	movs	r1, #1
 8008ad0:	60a2      	str	r2, [r4, #8]
 8008ad2:	6123      	str	r3, [r4, #16]
 8008ad4:	7561      	strb	r1, [r4, #21]
 8008ad6:	7da0      	ldrb	r0, [r4, #22]
 8008ad8:	f080 0001 	eor.w	r0, r0, #1
 8008adc:	bd38      	pop	{r3, r4, r5, pc}
 8008ade:	bf00      	nop

08008ae0 <ucdr_deserialize_uint8_t>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	f001 f8de 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008aec:	b150      	cbz	r0, 8008b04 <ucdr_deserialize_uint8_t+0x24>
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	702b      	strb	r3, [r5, #0]
 8008af4:	68a2      	ldr	r2, [r4, #8]
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	3201      	adds	r2, #1
 8008afa:	3301      	adds	r3, #1
 8008afc:	2101      	movs	r1, #1
 8008afe:	60a2      	str	r2, [r4, #8]
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	7561      	strb	r1, [r4, #21]
 8008b04:	7da0      	ldrb	r0, [r4, #22]
 8008b06:	f080 0001 	eor.w	r0, r0, #1
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}

08008b0c <ucdr_serialize_uint16_t>:
 8008b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	460b      	mov	r3, r1
 8008b14:	2102      	movs	r1, #2
 8008b16:	4604      	mov	r4, r0
 8008b18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008b1c:	f001 f916 	bl	8009d4c <ucdr_buffer_alignment>
 8008b20:	4601      	mov	r1, r0
 8008b22:	4620      	mov	r0, r4
 8008b24:	7d67      	ldrb	r7, [r4, #21]
 8008b26:	f001 f955 	bl	8009dd4 <ucdr_advance_buffer>
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	f001 f8af 	bl	8009c90 <ucdr_check_buffer_available_for>
 8008b32:	bb78      	cbnz	r0, 8008b94 <ucdr_serialize_uint16_t+0x88>
 8008b34:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8008b38:	42b5      	cmp	r5, r6
 8008b3a:	d926      	bls.n	8008b8a <ucdr_serialize_uint16_t+0x7e>
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	60a5      	str	r5, [r4, #8]
 8008b40:	1bad      	subs	r5, r5, r6
 8008b42:	442a      	add	r2, r5
 8008b44:	f1c5 0802 	rsb	r8, r5, #2
 8008b48:	6122      	str	r2, [r4, #16]
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f001 f8ab 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d03b      	beq.n	8008bce <ucdr_serialize_uint16_t+0xc2>
 8008b56:	7d23      	ldrb	r3, [r4, #20]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d04a      	beq.n	8008bf2 <ucdr_serialize_uint16_t+0xe6>
 8008b5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008b60:	7033      	strb	r3, [r6, #0]
 8008b62:	2d00      	cmp	r5, #0
 8008b64:	d040      	beq.n	8008be8 <ucdr_serialize_uint16_t+0xdc>
 8008b66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b6a:	7073      	strb	r3, [r6, #1]
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	68a2      	ldr	r2, [r4, #8]
 8008b70:	7da0      	ldrb	r0, [r4, #22]
 8008b72:	3302      	adds	r3, #2
 8008b74:	1b5b      	subs	r3, r3, r5
 8008b76:	4442      	add	r2, r8
 8008b78:	2102      	movs	r1, #2
 8008b7a:	f080 0001 	eor.w	r0, r0, #1
 8008b7e:	6123      	str	r3, [r4, #16]
 8008b80:	60a2      	str	r2, [r4, #8]
 8008b82:	7561      	strb	r1, [r4, #21]
 8008b84:	b002      	add	sp, #8
 8008b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8a:	2102      	movs	r1, #2
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f001 f88b 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008b92:	b190      	cbz	r0, 8008bba <ucdr_serialize_uint16_t+0xae>
 8008b94:	7d23      	ldrb	r3, [r4, #20]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	68a3      	ldr	r3, [r4, #8]
 8008b9a:	d014      	beq.n	8008bc6 <ucdr_serialize_uint16_t+0xba>
 8008b9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ba8:	705a      	strb	r2, [r3, #1]
 8008baa:	68a2      	ldr	r2, [r4, #8]
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	3202      	adds	r2, #2
 8008bb0:	3302      	adds	r3, #2
 8008bb2:	2102      	movs	r1, #2
 8008bb4:	60a2      	str	r2, [r4, #8]
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	7561      	strb	r1, [r4, #21]
 8008bba:	7da0      	ldrb	r0, [r4, #22]
 8008bbc:	f080 0001 	eor.w	r0, r0, #1
 8008bc0:	b002      	add	sp, #8
 8008bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	e7ed      	b.n	8008baa <ucdr_serialize_uint16_t+0x9e>
 8008bce:	68a2      	ldr	r2, [r4, #8]
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	7da0      	ldrb	r0, [r4, #22]
 8008bd4:	7567      	strb	r7, [r4, #21]
 8008bd6:	1b52      	subs	r2, r2, r5
 8008bd8:	1b5b      	subs	r3, r3, r5
 8008bda:	f080 0001 	eor.w	r0, r0, #1
 8008bde:	60a2      	str	r2, [r4, #8]
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	b002      	add	sp, #8
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be8:	68a3      	ldr	r3, [r4, #8]
 8008bea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e7bc      	b.n	8008b6c <ucdr_serialize_uint16_t+0x60>
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f10d 0606 	add.w	r6, sp, #6
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	f00a fabe 	bl	801317c <memcpy>
 8008c00:	68a0      	ldr	r0, [r4, #8]
 8008c02:	4642      	mov	r2, r8
 8008c04:	1971      	adds	r1, r6, r5
 8008c06:	f00a fab9 	bl	801317c <memcpy>
 8008c0a:	e7af      	b.n	8008b6c <ucdr_serialize_uint16_t+0x60>

08008c0c <ucdr_serialize_endian_uint16_t>:
 8008c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c10:	b083      	sub	sp, #12
 8008c12:	460d      	mov	r5, r1
 8008c14:	2102      	movs	r1, #2
 8008c16:	4604      	mov	r4, r0
 8008c18:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008c1c:	f001 f896 	bl	8009d4c <ucdr_buffer_alignment>
 8008c20:	4601      	mov	r1, r0
 8008c22:	4620      	mov	r0, r4
 8008c24:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008c28:	f001 f8d4 	bl	8009dd4 <ucdr_advance_buffer>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	2102      	movs	r1, #2
 8008c30:	f001 f82e 	bl	8009c90 <ucdr_check_buffer_available_for>
 8008c34:	bb70      	cbnz	r0, 8008c94 <ucdr_serialize_endian_uint16_t+0x88>
 8008c36:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008c3a:	42be      	cmp	r6, r7
 8008c3c:	d925      	bls.n	8008c8a <ucdr_serialize_endian_uint16_t+0x7e>
 8008c3e:	6922      	ldr	r2, [r4, #16]
 8008c40:	60a6      	str	r6, [r4, #8]
 8008c42:	1bf6      	subs	r6, r6, r7
 8008c44:	4432      	add	r2, r6
 8008c46:	f1c6 0902 	rsb	r9, r6, #2
 8008c4a:	6122      	str	r2, [r4, #16]
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f001 f82a 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d039      	beq.n	8008ccc <ucdr_serialize_endian_uint16_t+0xc0>
 8008c58:	2d01      	cmp	r5, #1
 8008c5a:	d04a      	beq.n	8008cf2 <ucdr_serialize_endian_uint16_t+0xe6>
 8008c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c60:	703b      	strb	r3, [r7, #0]
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	d040      	beq.n	8008ce8 <ucdr_serialize_endian_uint16_t+0xdc>
 8008c66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c6a:	707b      	strb	r3, [r7, #1]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	68a2      	ldr	r2, [r4, #8]
 8008c70:	7da0      	ldrb	r0, [r4, #22]
 8008c72:	3302      	adds	r3, #2
 8008c74:	1b9b      	subs	r3, r3, r6
 8008c76:	444a      	add	r2, r9
 8008c78:	2102      	movs	r1, #2
 8008c7a:	f080 0001 	eor.w	r0, r0, #1
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	60a2      	str	r2, [r4, #8]
 8008c82:	7561      	strb	r1, [r4, #21]
 8008c84:	b003      	add	sp, #12
 8008c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f001 f80b 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008c92:	b188      	cbz	r0, 8008cb8 <ucdr_serialize_endian_uint16_t+0xac>
 8008c94:	2d01      	cmp	r5, #1
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	d014      	beq.n	8008cc4 <ucdr_serialize_endian_uint16_t+0xb8>
 8008c9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	68a3      	ldr	r3, [r4, #8]
 8008ca2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ca6:	705a      	strb	r2, [r3, #1]
 8008ca8:	68a2      	ldr	r2, [r4, #8]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	3202      	adds	r2, #2
 8008cae:	3302      	adds	r3, #2
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	60a2      	str	r2, [r4, #8]
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	7561      	strb	r1, [r4, #21]
 8008cb8:	7da0      	ldrb	r0, [r4, #22]
 8008cba:	f080 0001 	eor.w	r0, r0, #1
 8008cbe:	b003      	add	sp, #12
 8008cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008cc8:	801a      	strh	r2, [r3, #0]
 8008cca:	e7ed      	b.n	8008ca8 <ucdr_serialize_endian_uint16_t+0x9c>
 8008ccc:	68a2      	ldr	r2, [r4, #8]
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	7da0      	ldrb	r0, [r4, #22]
 8008cd2:	f884 8015 	strb.w	r8, [r4, #21]
 8008cd6:	1b92      	subs	r2, r2, r6
 8008cd8:	1b9b      	subs	r3, r3, r6
 8008cda:	f080 0001 	eor.w	r0, r0, #1
 8008cde:	60a2      	str	r2, [r4, #8]
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	b003      	add	sp, #12
 8008ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce8:	68a3      	ldr	r3, [r4, #8]
 8008cea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	e7bc      	b.n	8008c6c <ucdr_serialize_endian_uint16_t+0x60>
 8008cf2:	f10d 0506 	add.w	r5, sp, #6
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f00a fa3e 	bl	801317c <memcpy>
 8008d00:	68a0      	ldr	r0, [r4, #8]
 8008d02:	464a      	mov	r2, r9
 8008d04:	19a9      	adds	r1, r5, r6
 8008d06:	f00a fa39 	bl	801317c <memcpy>
 8008d0a:	e7af      	b.n	8008c6c <ucdr_serialize_endian_uint16_t+0x60>

08008d0c <ucdr_deserialize_uint16_t>:
 8008d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	460d      	mov	r5, r1
 8008d12:	2102      	movs	r1, #2
 8008d14:	4604      	mov	r4, r0
 8008d16:	f001 f819 	bl	8009d4c <ucdr_buffer_alignment>
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008d22:	f001 f857 	bl	8009dd4 <ucdr_advance_buffer>
 8008d26:	4620      	mov	r0, r4
 8008d28:	2102      	movs	r1, #2
 8008d2a:	f000 ffb1 	bl	8009c90 <ucdr_check_buffer_available_for>
 8008d2e:	bb60      	cbnz	r0, 8008d8a <ucdr_deserialize_uint16_t+0x7e>
 8008d30:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008d34:	42be      	cmp	r6, r7
 8008d36:	d923      	bls.n	8008d80 <ucdr_deserialize_uint16_t+0x74>
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	60a6      	str	r6, [r4, #8]
 8008d3c:	1bf6      	subs	r6, r6, r7
 8008d3e:	4432      	add	r2, r6
 8008d40:	f1c6 0902 	rsb	r9, r6, #2
 8008d44:	6122      	str	r2, [r4, #16]
 8008d46:	4649      	mov	r1, r9
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 ffad 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d034      	beq.n	8008dbc <ucdr_deserialize_uint16_t+0xb0>
 8008d52:	7d23      	ldrb	r3, [r4, #20]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d042      	beq.n	8008dde <ucdr_deserialize_uint16_t+0xd2>
 8008d58:	787b      	ldrb	r3, [r7, #1]
 8008d5a:	702b      	strb	r3, [r5, #0]
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	d03a      	beq.n	8008dd6 <ucdr_deserialize_uint16_t+0xca>
 8008d60:	783b      	ldrb	r3, [r7, #0]
 8008d62:	706b      	strb	r3, [r5, #1]
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	68a2      	ldr	r2, [r4, #8]
 8008d68:	7da0      	ldrb	r0, [r4, #22]
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	1b9b      	subs	r3, r3, r6
 8008d70:	444a      	add	r2, r9
 8008d72:	7561      	strb	r1, [r4, #21]
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	60a2      	str	r2, [r4, #8]
 8008d78:	f080 0001 	eor.w	r0, r0, #1
 8008d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d80:	2102      	movs	r1, #2
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 ff90 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008d88:	b180      	cbz	r0, 8008dac <ucdr_deserialize_uint16_t+0xa0>
 8008d8a:	7d23      	ldrb	r3, [r4, #20]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	d011      	beq.n	8008db6 <ucdr_deserialize_uint16_t+0xaa>
 8008d92:	785b      	ldrb	r3, [r3, #1]
 8008d94:	702b      	strb	r3, [r5, #0]
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	706b      	strb	r3, [r5, #1]
 8008d9c:	68a2      	ldr	r2, [r4, #8]
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	3202      	adds	r2, #2
 8008da2:	3302      	adds	r3, #2
 8008da4:	2102      	movs	r1, #2
 8008da6:	60a2      	str	r2, [r4, #8]
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	7561      	strb	r1, [r4, #21]
 8008dac:	7da0      	ldrb	r0, [r4, #22]
 8008dae:	f080 0001 	eor.w	r0, r0, #1
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	802b      	strh	r3, [r5, #0]
 8008dba:	e7ef      	b.n	8008d9c <ucdr_deserialize_uint16_t+0x90>
 8008dbc:	68a2      	ldr	r2, [r4, #8]
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	7da0      	ldrb	r0, [r4, #22]
 8008dc2:	f884 8015 	strb.w	r8, [r4, #21]
 8008dc6:	1b92      	subs	r2, r2, r6
 8008dc8:	1b9b      	subs	r3, r3, r6
 8008dca:	60a2      	str	r2, [r4, #8]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	f080 0001 	eor.w	r0, r0, #1
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	68a3      	ldr	r3, [r4, #8]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	706b      	strb	r3, [r5, #1]
 8008ddc:	e7c2      	b.n	8008d64 <ucdr_deserialize_uint16_t+0x58>
 8008dde:	4639      	mov	r1, r7
 8008de0:	4632      	mov	r2, r6
 8008de2:	4628      	mov	r0, r5
 8008de4:	f00a f9ca 	bl	801317c <memcpy>
 8008de8:	68a1      	ldr	r1, [r4, #8]
 8008dea:	464a      	mov	r2, r9
 8008dec:	19a8      	adds	r0, r5, r6
 8008dee:	f00a f9c5 	bl	801317c <memcpy>
 8008df2:	e7b7      	b.n	8008d64 <ucdr_deserialize_uint16_t+0x58>

08008df4 <ucdr_deserialize_endian_uint16_t>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	460e      	mov	r6, r1
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4615      	mov	r5, r2
 8008e00:	f000 ffa4 	bl	8009d4c <ucdr_buffer_alignment>
 8008e04:	4601      	mov	r1, r0
 8008e06:	4620      	mov	r0, r4
 8008e08:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008e0c:	f000 ffe2 	bl	8009dd4 <ucdr_advance_buffer>
 8008e10:	4620      	mov	r0, r4
 8008e12:	2102      	movs	r1, #2
 8008e14:	f000 ff3c 	bl	8009c90 <ucdr_check_buffer_available_for>
 8008e18:	bb70      	cbnz	r0, 8008e78 <ucdr_deserialize_endian_uint16_t+0x84>
 8008e1a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008e1e:	4547      	cmp	r7, r8
 8008e20:	d925      	bls.n	8008e6e <ucdr_deserialize_endian_uint16_t+0x7a>
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	60a7      	str	r7, [r4, #8]
 8008e26:	eba7 0708 	sub.w	r7, r7, r8
 8008e2a:	443a      	add	r2, r7
 8008e2c:	f1c7 0a02 	rsb	sl, r7, #2
 8008e30:	6122      	str	r2, [r4, #16]
 8008e32:	4651      	mov	r1, sl
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 ff37 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d034      	beq.n	8008ea8 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008e3e:	2e01      	cmp	r6, #1
 8008e40:	d043      	beq.n	8008eca <ucdr_deserialize_endian_uint16_t+0xd6>
 8008e42:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008e46:	702b      	strb	r3, [r5, #0]
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	d03a      	beq.n	8008ec2 <ucdr_deserialize_endian_uint16_t+0xce>
 8008e4c:	f898 3000 	ldrb.w	r3, [r8]
 8008e50:	706b      	strb	r3, [r5, #1]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	68a2      	ldr	r2, [r4, #8]
 8008e56:	7da0      	ldrb	r0, [r4, #22]
 8008e58:	2102      	movs	r1, #2
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	1bdb      	subs	r3, r3, r7
 8008e5e:	4452      	add	r2, sl
 8008e60:	7561      	strb	r1, [r4, #21]
 8008e62:	6123      	str	r3, [r4, #16]
 8008e64:	60a2      	str	r2, [r4, #8]
 8008e66:	f080 0001 	eor.w	r0, r0, #1
 8008e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6e:	2102      	movs	r1, #2
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 ff19 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008e76:	b178      	cbz	r0, 8008e98 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008e78:	2e01      	cmp	r6, #1
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	d011      	beq.n	8008ea2 <ucdr_deserialize_endian_uint16_t+0xae>
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	702b      	strb	r3, [r5, #0]
 8008e82:	68a3      	ldr	r3, [r4, #8]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	706b      	strb	r3, [r5, #1]
 8008e88:	68a2      	ldr	r2, [r4, #8]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	3202      	adds	r2, #2
 8008e8e:	3302      	adds	r3, #2
 8008e90:	2102      	movs	r1, #2
 8008e92:	60a2      	str	r2, [r4, #8]
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	7561      	strb	r1, [r4, #21]
 8008e98:	7da0      	ldrb	r0, [r4, #22]
 8008e9a:	f080 0001 	eor.w	r0, r0, #1
 8008e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	802b      	strh	r3, [r5, #0]
 8008ea6:	e7ef      	b.n	8008e88 <ucdr_deserialize_endian_uint16_t+0x94>
 8008ea8:	68a2      	ldr	r2, [r4, #8]
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	7da0      	ldrb	r0, [r4, #22]
 8008eae:	f884 9015 	strb.w	r9, [r4, #21]
 8008eb2:	1bd2      	subs	r2, r2, r7
 8008eb4:	1bdb      	subs	r3, r3, r7
 8008eb6:	60a2      	str	r2, [r4, #8]
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	f080 0001 	eor.w	r0, r0, #1
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	706b      	strb	r3, [r5, #1]
 8008ec8:	e7c3      	b.n	8008e52 <ucdr_deserialize_endian_uint16_t+0x5e>
 8008eca:	4641      	mov	r1, r8
 8008ecc:	463a      	mov	r2, r7
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f00a f954 	bl	801317c <memcpy>
 8008ed4:	68a1      	ldr	r1, [r4, #8]
 8008ed6:	4652      	mov	r2, sl
 8008ed8:	19e8      	adds	r0, r5, r7
 8008eda:	f00a f94f 	bl	801317c <memcpy>
 8008ede:	e7b8      	b.n	8008e52 <ucdr_deserialize_endian_uint16_t+0x5e>

08008ee0 <ucdr_serialize_uint32_t>:
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	9101      	str	r1, [sp, #4]
 8008eea:	2104      	movs	r1, #4
 8008eec:	f000 ff2e 	bl	8009d4c <ucdr_buffer_alignment>
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	7d67      	ldrb	r7, [r4, #21]
 8008ef6:	f000 ff6d 	bl	8009dd4 <ucdr_advance_buffer>
 8008efa:	4620      	mov	r0, r4
 8008efc:	2104      	movs	r1, #4
 8008efe:	f000 fec7 	bl	8009c90 <ucdr_check_buffer_available_for>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d139      	bne.n	8008f7a <ucdr_serialize_uint32_t+0x9a>
 8008f06:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8008f0a:	42ae      	cmp	r6, r5
 8008f0c:	d930      	bls.n	8008f70 <ucdr_serialize_uint32_t+0x90>
 8008f0e:	6922      	ldr	r2, [r4, #16]
 8008f10:	60a6      	str	r6, [r4, #8]
 8008f12:	1b76      	subs	r6, r6, r5
 8008f14:	4432      	add	r2, r6
 8008f16:	f1c6 0804 	rsb	r8, r6, #4
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	4641      	mov	r1, r8
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fec2 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d04c      	beq.n	8008fc2 <ucdr_serialize_uint32_t+0xe2>
 8008f28:	7d23      	ldrb	r3, [r4, #20]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d063      	beq.n	8008ff6 <ucdr_serialize_uint32_t+0x116>
 8008f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f32:	702b      	strb	r3, [r5, #0]
 8008f34:	2e00      	cmp	r6, #0
 8008f36:	d051      	beq.n	8008fdc <ucdr_serialize_uint32_t+0xfc>
 8008f38:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f3c:	706b      	strb	r3, [r5, #1]
 8008f3e:	2e01      	cmp	r6, #1
 8008f40:	d050      	beq.n	8008fe4 <ucdr_serialize_uint32_t+0x104>
 8008f42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008f46:	70ab      	strb	r3, [r5, #2]
 8008f48:	2e02      	cmp	r6, #2
 8008f4a:	d04f      	beq.n	8008fec <ucdr_serialize_uint32_t+0x10c>
 8008f4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008f50:	70eb      	strb	r3, [r5, #3]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	68a2      	ldr	r2, [r4, #8]
 8008f56:	7da0      	ldrb	r0, [r4, #22]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	1b9b      	subs	r3, r3, r6
 8008f5c:	4442      	add	r2, r8
 8008f5e:	2104      	movs	r1, #4
 8008f60:	f080 0001 	eor.w	r0, r0, #1
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	60a2      	str	r2, [r4, #8]
 8008f68:	7561      	strb	r1, [r4, #21]
 8008f6a:	b002      	add	sp, #8
 8008f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f70:	2104      	movs	r1, #4
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fe98 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8008f78:	b1d0      	cbz	r0, 8008fb0 <ucdr_serialize_uint32_t+0xd0>
 8008f7a:	7d23      	ldrb	r3, [r4, #20]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	d01c      	beq.n	8008fbc <ucdr_serialize_uint32_t+0xdc>
 8008f82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	68a3      	ldr	r3, [r4, #8]
 8008f8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f8e:	705a      	strb	r2, [r3, #1]
 8008f90:	68a3      	ldr	r3, [r4, #8]
 8008f92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f96:	709a      	strb	r2, [r3, #2]
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f9e:	70da      	strb	r2, [r3, #3]
 8008fa0:	68a2      	ldr	r2, [r4, #8]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	3204      	adds	r2, #4
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	2104      	movs	r1, #4
 8008faa:	60a2      	str	r2, [r4, #8]
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	7561      	strb	r1, [r4, #21]
 8008fb0:	7da0      	ldrb	r0, [r4, #22]
 8008fb2:	f080 0001 	eor.w	r0, r0, #1
 8008fb6:	b002      	add	sp, #8
 8008fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbc:	9a01      	ldr	r2, [sp, #4]
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	e7ee      	b.n	8008fa0 <ucdr_serialize_uint32_t+0xc0>
 8008fc2:	68a2      	ldr	r2, [r4, #8]
 8008fc4:	6923      	ldr	r3, [r4, #16]
 8008fc6:	7da0      	ldrb	r0, [r4, #22]
 8008fc8:	7567      	strb	r7, [r4, #21]
 8008fca:	1b92      	subs	r2, r2, r6
 8008fcc:	1b9b      	subs	r3, r3, r6
 8008fce:	f080 0001 	eor.w	r0, r0, #1
 8008fd2:	60a2      	str	r2, [r4, #8]
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	b002      	add	sp, #8
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008fe2:	701a      	strb	r2, [r3, #0]
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	e7ad      	b.n	8008f52 <ucdr_serialize_uint32_t+0x72>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	ad01      	add	r5, sp, #4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	f00a f8bd 	bl	801317c <memcpy>
 8009002:	68a0      	ldr	r0, [r4, #8]
 8009004:	4642      	mov	r2, r8
 8009006:	19a9      	adds	r1, r5, r6
 8009008:	f00a f8b8 	bl	801317c <memcpy>
 800900c:	e7a1      	b.n	8008f52 <ucdr_serialize_uint32_t+0x72>
 800900e:	bf00      	nop

08009010 <ucdr_serialize_endian_uint32_t>:
 8009010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009014:	b083      	sub	sp, #12
 8009016:	460d      	mov	r5, r1
 8009018:	2104      	movs	r1, #4
 800901a:	4604      	mov	r4, r0
 800901c:	9201      	str	r2, [sp, #4]
 800901e:	f000 fe95 	bl	8009d4c <ucdr_buffer_alignment>
 8009022:	4601      	mov	r1, r0
 8009024:	4620      	mov	r0, r4
 8009026:	f894 8015 	ldrb.w	r8, [r4, #21]
 800902a:	f000 fed3 	bl	8009dd4 <ucdr_advance_buffer>
 800902e:	4620      	mov	r0, r4
 8009030:	2104      	movs	r1, #4
 8009032:	f000 fe2d 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009036:	2800      	cmp	r0, #0
 8009038:	d138      	bne.n	80090ac <ucdr_serialize_endian_uint32_t+0x9c>
 800903a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800903e:	42b7      	cmp	r7, r6
 8009040:	d92f      	bls.n	80090a2 <ucdr_serialize_endian_uint32_t+0x92>
 8009042:	6922      	ldr	r2, [r4, #16]
 8009044:	60a7      	str	r7, [r4, #8]
 8009046:	1bbf      	subs	r7, r7, r6
 8009048:	443a      	add	r2, r7
 800904a:	f1c7 0904 	rsb	r9, r7, #4
 800904e:	6122      	str	r2, [r4, #16]
 8009050:	4649      	mov	r1, r9
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fe28 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009058:	2800      	cmp	r0, #0
 800905a:	d04a      	beq.n	80090f2 <ucdr_serialize_endian_uint32_t+0xe2>
 800905c:	2d01      	cmp	r5, #1
 800905e:	d063      	beq.n	8009128 <ucdr_serialize_endian_uint32_t+0x118>
 8009060:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009064:	7033      	strb	r3, [r6, #0]
 8009066:	2f00      	cmp	r7, #0
 8009068:	d051      	beq.n	800910e <ucdr_serialize_endian_uint32_t+0xfe>
 800906a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800906e:	7073      	strb	r3, [r6, #1]
 8009070:	2f01      	cmp	r7, #1
 8009072:	d050      	beq.n	8009116 <ucdr_serialize_endian_uint32_t+0x106>
 8009074:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009078:	70b3      	strb	r3, [r6, #2]
 800907a:	2f02      	cmp	r7, #2
 800907c:	d04f      	beq.n	800911e <ucdr_serialize_endian_uint32_t+0x10e>
 800907e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009082:	70f3      	strb	r3, [r6, #3]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	68a2      	ldr	r2, [r4, #8]
 8009088:	7da0      	ldrb	r0, [r4, #22]
 800908a:	3304      	adds	r3, #4
 800908c:	1bdb      	subs	r3, r3, r7
 800908e:	444a      	add	r2, r9
 8009090:	2104      	movs	r1, #4
 8009092:	f080 0001 	eor.w	r0, r0, #1
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	60a2      	str	r2, [r4, #8]
 800909a:	7561      	strb	r1, [r4, #21]
 800909c:	b003      	add	sp, #12
 800909e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090a2:	2104      	movs	r1, #4
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fdff 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80090aa:	b1c8      	cbz	r0, 80090e0 <ucdr_serialize_endian_uint32_t+0xd0>
 80090ac:	2d01      	cmp	r5, #1
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	d01c      	beq.n	80090ec <ucdr_serialize_endian_uint32_t+0xdc>
 80090b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80090b6:	701a      	strb	r2, [r3, #0]
 80090b8:	68a3      	ldr	r3, [r4, #8]
 80090ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80090be:	705a      	strb	r2, [r3, #1]
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80090c6:	709a      	strb	r2, [r3, #2]
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80090ce:	70da      	strb	r2, [r3, #3]
 80090d0:	68a2      	ldr	r2, [r4, #8]
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	3204      	adds	r2, #4
 80090d6:	3304      	adds	r3, #4
 80090d8:	2104      	movs	r1, #4
 80090da:	60a2      	str	r2, [r4, #8]
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	7561      	strb	r1, [r4, #21]
 80090e0:	7da0      	ldrb	r0, [r4, #22]
 80090e2:	f080 0001 	eor.w	r0, r0, #1
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ec:	9a01      	ldr	r2, [sp, #4]
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e7ee      	b.n	80090d0 <ucdr_serialize_endian_uint32_t+0xc0>
 80090f2:	68a2      	ldr	r2, [r4, #8]
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	7da0      	ldrb	r0, [r4, #22]
 80090f8:	f884 8015 	strb.w	r8, [r4, #21]
 80090fc:	1bd2      	subs	r2, r2, r7
 80090fe:	1bdb      	subs	r3, r3, r7
 8009100:	f080 0001 	eor.w	r0, r0, #1
 8009104:	60a2      	str	r2, [r4, #8]
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	b003      	add	sp, #12
 800910a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	68a3      	ldr	r3, [r4, #8]
 8009118:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	e7ad      	b.n	8009084 <ucdr_serialize_endian_uint32_t+0x74>
 8009128:	ad01      	add	r5, sp, #4
 800912a:	4629      	mov	r1, r5
 800912c:	463a      	mov	r2, r7
 800912e:	4630      	mov	r0, r6
 8009130:	f00a f824 	bl	801317c <memcpy>
 8009134:	68a0      	ldr	r0, [r4, #8]
 8009136:	464a      	mov	r2, r9
 8009138:	19e9      	adds	r1, r5, r7
 800913a:	f00a f81f 	bl	801317c <memcpy>
 800913e:	e7a1      	b.n	8009084 <ucdr_serialize_endian_uint32_t+0x74>

08009140 <ucdr_deserialize_uint32_t>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	460d      	mov	r5, r1
 8009146:	2104      	movs	r1, #4
 8009148:	4604      	mov	r4, r0
 800914a:	f000 fdff 	bl	8009d4c <ucdr_buffer_alignment>
 800914e:	4601      	mov	r1, r0
 8009150:	4620      	mov	r0, r4
 8009152:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009156:	f000 fe3d 	bl	8009dd4 <ucdr_advance_buffer>
 800915a:	4620      	mov	r0, r4
 800915c:	2104      	movs	r1, #4
 800915e:	f000 fd97 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009162:	2800      	cmp	r0, #0
 8009164:	d138      	bne.n	80091d8 <ucdr_deserialize_uint32_t+0x98>
 8009166:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800916a:	42b7      	cmp	r7, r6
 800916c:	d92f      	bls.n	80091ce <ucdr_deserialize_uint32_t+0x8e>
 800916e:	6922      	ldr	r2, [r4, #16]
 8009170:	60a7      	str	r7, [r4, #8]
 8009172:	1bbf      	subs	r7, r7, r6
 8009174:	443a      	add	r2, r7
 8009176:	f1c7 0904 	rsb	r9, r7, #4
 800917a:	6122      	str	r2, [r4, #16]
 800917c:	4649      	mov	r1, r9
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fd92 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009184:	2800      	cmp	r0, #0
 8009186:	d046      	beq.n	8009216 <ucdr_deserialize_uint32_t+0xd6>
 8009188:	7d23      	ldrb	r3, [r4, #20]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d05c      	beq.n	8009248 <ucdr_deserialize_uint32_t+0x108>
 800918e:	78f3      	ldrb	r3, [r6, #3]
 8009190:	702b      	strb	r3, [r5, #0]
 8009192:	2f00      	cmp	r7, #0
 8009194:	d04c      	beq.n	8009230 <ucdr_deserialize_uint32_t+0xf0>
 8009196:	78b3      	ldrb	r3, [r6, #2]
 8009198:	706b      	strb	r3, [r5, #1]
 800919a:	2f01      	cmp	r7, #1
 800919c:	f105 0302 	add.w	r3, r5, #2
 80091a0:	d04a      	beq.n	8009238 <ucdr_deserialize_uint32_t+0xf8>
 80091a2:	7873      	ldrb	r3, [r6, #1]
 80091a4:	70ab      	strb	r3, [r5, #2]
 80091a6:	2f02      	cmp	r7, #2
 80091a8:	f105 0303 	add.w	r3, r5, #3
 80091ac:	d048      	beq.n	8009240 <ucdr_deserialize_uint32_t+0x100>
 80091ae:	7833      	ldrb	r3, [r6, #0]
 80091b0:	70eb      	strb	r3, [r5, #3]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	68a2      	ldr	r2, [r4, #8]
 80091b6:	7da0      	ldrb	r0, [r4, #22]
 80091b8:	2104      	movs	r1, #4
 80091ba:	3304      	adds	r3, #4
 80091bc:	1bdb      	subs	r3, r3, r7
 80091be:	444a      	add	r2, r9
 80091c0:	7561      	strb	r1, [r4, #21]
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	60a2      	str	r2, [r4, #8]
 80091c6:	f080 0001 	eor.w	r0, r0, #1
 80091ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ce:	2104      	movs	r1, #4
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fd69 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80091d6:	b1b0      	cbz	r0, 8009206 <ucdr_deserialize_uint32_t+0xc6>
 80091d8:	7d23      	ldrb	r3, [r4, #20]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	68a3      	ldr	r3, [r4, #8]
 80091de:	d017      	beq.n	8009210 <ucdr_deserialize_uint32_t+0xd0>
 80091e0:	78db      	ldrb	r3, [r3, #3]
 80091e2:	702b      	strb	r3, [r5, #0]
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	789b      	ldrb	r3, [r3, #2]
 80091e8:	706b      	strb	r3, [r5, #1]
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	70ab      	strb	r3, [r5, #2]
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	70eb      	strb	r3, [r5, #3]
 80091f6:	68a2      	ldr	r2, [r4, #8]
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	3204      	adds	r2, #4
 80091fc:	3304      	adds	r3, #4
 80091fe:	2104      	movs	r1, #4
 8009200:	60a2      	str	r2, [r4, #8]
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	7561      	strb	r1, [r4, #21]
 8009206:	7da0      	ldrb	r0, [r4, #22]
 8009208:	f080 0001 	eor.w	r0, r0, #1
 800920c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	e7ef      	b.n	80091f6 <ucdr_deserialize_uint32_t+0xb6>
 8009216:	68a2      	ldr	r2, [r4, #8]
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	7da0      	ldrb	r0, [r4, #22]
 800921c:	f884 8015 	strb.w	r8, [r4, #21]
 8009220:	1bd2      	subs	r2, r2, r7
 8009222:	1bdb      	subs	r3, r3, r7
 8009224:	60a2      	str	r2, [r4, #8]
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	f080 0001 	eor.w	r0, r0, #1
 800922c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	706b      	strb	r3, [r5, #1]
 8009236:	1cab      	adds	r3, r5, #2
 8009238:	68a2      	ldr	r2, [r4, #8]
 800923a:	7852      	ldrb	r2, [r2, #1]
 800923c:	f803 2b01 	strb.w	r2, [r3], #1
 8009240:	68a2      	ldr	r2, [r4, #8]
 8009242:	7812      	ldrb	r2, [r2, #0]
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	e7b4      	b.n	80091b2 <ucdr_deserialize_uint32_t+0x72>
 8009248:	4631      	mov	r1, r6
 800924a:	463a      	mov	r2, r7
 800924c:	4628      	mov	r0, r5
 800924e:	f009 ff95 	bl	801317c <memcpy>
 8009252:	68a1      	ldr	r1, [r4, #8]
 8009254:	464a      	mov	r2, r9
 8009256:	19e8      	adds	r0, r5, r7
 8009258:	f009 ff90 	bl	801317c <memcpy>
 800925c:	e7a9      	b.n	80091b2 <ucdr_deserialize_uint32_t+0x72>
 800925e:	bf00      	nop

08009260 <ucdr_deserialize_endian_uint32_t>:
 8009260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	460e      	mov	r6, r1
 8009266:	2104      	movs	r1, #4
 8009268:	4604      	mov	r4, r0
 800926a:	4615      	mov	r5, r2
 800926c:	f000 fd6e 	bl	8009d4c <ucdr_buffer_alignment>
 8009270:	4601      	mov	r1, r0
 8009272:	4620      	mov	r0, r4
 8009274:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009278:	f000 fdac 	bl	8009dd4 <ucdr_advance_buffer>
 800927c:	4620      	mov	r0, r4
 800927e:	2104      	movs	r1, #4
 8009280:	f000 fd06 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009284:	2800      	cmp	r0, #0
 8009286:	d13c      	bne.n	8009302 <ucdr_deserialize_endian_uint32_t+0xa2>
 8009288:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800928c:	42bb      	cmp	r3, r7
 800928e:	d933      	bls.n	80092f8 <ucdr_deserialize_endian_uint32_t+0x98>
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	60a3      	str	r3, [r4, #8]
 8009294:	eba3 0807 	sub.w	r8, r3, r7
 8009298:	4442      	add	r2, r8
 800929a:	f1c8 0a04 	rsb	sl, r8, #4
 800929e:	6122      	str	r2, [r4, #16]
 80092a0:	4651      	mov	r1, sl
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 fd00 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d048      	beq.n	800933e <ucdr_deserialize_endian_uint32_t+0xde>
 80092ac:	2e01      	cmp	r6, #1
 80092ae:	d061      	beq.n	8009374 <ucdr_deserialize_endian_uint32_t+0x114>
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	702b      	strb	r3, [r5, #0]
 80092b4:	f1b8 0f00 	cmp.w	r8, #0
 80092b8:	d050      	beq.n	800935c <ucdr_deserialize_endian_uint32_t+0xfc>
 80092ba:	78bb      	ldrb	r3, [r7, #2]
 80092bc:	706b      	strb	r3, [r5, #1]
 80092be:	f1b8 0f01 	cmp.w	r8, #1
 80092c2:	f105 0302 	add.w	r3, r5, #2
 80092c6:	d04d      	beq.n	8009364 <ucdr_deserialize_endian_uint32_t+0x104>
 80092c8:	787b      	ldrb	r3, [r7, #1]
 80092ca:	70ab      	strb	r3, [r5, #2]
 80092cc:	f1b8 0f02 	cmp.w	r8, #2
 80092d0:	f105 0303 	add.w	r3, r5, #3
 80092d4:	d04a      	beq.n	800936c <ucdr_deserialize_endian_uint32_t+0x10c>
 80092d6:	783b      	ldrb	r3, [r7, #0]
 80092d8:	70eb      	strb	r3, [r5, #3]
 80092da:	6923      	ldr	r3, [r4, #16]
 80092dc:	68a2      	ldr	r2, [r4, #8]
 80092de:	7da0      	ldrb	r0, [r4, #22]
 80092e0:	2104      	movs	r1, #4
 80092e2:	3304      	adds	r3, #4
 80092e4:	eba3 0308 	sub.w	r3, r3, r8
 80092e8:	4452      	add	r2, sl
 80092ea:	7561      	strb	r1, [r4, #21]
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	60a2      	str	r2, [r4, #8]
 80092f0:	f080 0001 	eor.w	r0, r0, #1
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	2104      	movs	r1, #4
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fcd4 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009300:	b1a8      	cbz	r0, 800932e <ucdr_deserialize_endian_uint32_t+0xce>
 8009302:	2e01      	cmp	r6, #1
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	d017      	beq.n	8009338 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009308:	78db      	ldrb	r3, [r3, #3]
 800930a:	702b      	strb	r3, [r5, #0]
 800930c:	68a3      	ldr	r3, [r4, #8]
 800930e:	789b      	ldrb	r3, [r3, #2]
 8009310:	706b      	strb	r3, [r5, #1]
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	70ab      	strb	r3, [r5, #2]
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	70eb      	strb	r3, [r5, #3]
 800931e:	68a2      	ldr	r2, [r4, #8]
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	3204      	adds	r2, #4
 8009324:	3304      	adds	r3, #4
 8009326:	2104      	movs	r1, #4
 8009328:	60a2      	str	r2, [r4, #8]
 800932a:	6123      	str	r3, [r4, #16]
 800932c:	7561      	strb	r1, [r4, #21]
 800932e:	7da0      	ldrb	r0, [r4, #22]
 8009330:	f080 0001 	eor.w	r0, r0, #1
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	e7ef      	b.n	800931e <ucdr_deserialize_endian_uint32_t+0xbe>
 800933e:	68a2      	ldr	r2, [r4, #8]
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	7da0      	ldrb	r0, [r4, #22]
 8009344:	f884 9015 	strb.w	r9, [r4, #21]
 8009348:	eba2 0208 	sub.w	r2, r2, r8
 800934c:	eba3 0308 	sub.w	r3, r3, r8
 8009350:	60a2      	str	r2, [r4, #8]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	f080 0001 	eor.w	r0, r0, #1
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	68a3      	ldr	r3, [r4, #8]
 800935e:	789b      	ldrb	r3, [r3, #2]
 8009360:	706b      	strb	r3, [r5, #1]
 8009362:	1cab      	adds	r3, r5, #2
 8009364:	68a2      	ldr	r2, [r4, #8]
 8009366:	7852      	ldrb	r2, [r2, #1]
 8009368:	f803 2b01 	strb.w	r2, [r3], #1
 800936c:	68a2      	ldr	r2, [r4, #8]
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	e7b2      	b.n	80092da <ucdr_deserialize_endian_uint32_t+0x7a>
 8009374:	4639      	mov	r1, r7
 8009376:	4642      	mov	r2, r8
 8009378:	4628      	mov	r0, r5
 800937a:	f009 feff 	bl	801317c <memcpy>
 800937e:	68a1      	ldr	r1, [r4, #8]
 8009380:	4652      	mov	r2, sl
 8009382:	eb05 0008 	add.w	r0, r5, r8
 8009386:	f009 fef9 	bl	801317c <memcpy>
 800938a:	e7a6      	b.n	80092da <ucdr_deserialize_endian_uint32_t+0x7a>

0800938c <ucdr_serialize_uint64_t>:
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	2108      	movs	r1, #8
 8009392:	b082      	sub	sp, #8
 8009394:	4604      	mov	r4, r0
 8009396:	e9cd 2300 	strd	r2, r3, [sp]
 800939a:	f000 fcd7 	bl	8009d4c <ucdr_buffer_alignment>
 800939e:	4601      	mov	r1, r0
 80093a0:	4620      	mov	r0, r4
 80093a2:	7d67      	ldrb	r7, [r4, #21]
 80093a4:	f000 fd16 	bl	8009dd4 <ucdr_advance_buffer>
 80093a8:	4620      	mov	r0, r4
 80093aa:	2108      	movs	r1, #8
 80093ac:	f000 fc70 	bl	8009c90 <ucdr_check_buffer_available_for>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d14e      	bne.n	8009452 <ucdr_serialize_uint64_t+0xc6>
 80093b4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80093b8:	42b5      	cmp	r5, r6
 80093ba:	d945      	bls.n	8009448 <ucdr_serialize_uint64_t+0xbc>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	60a5      	str	r5, [r4, #8]
 80093c0:	1bad      	subs	r5, r5, r6
 80093c2:	442b      	add	r3, r5
 80093c4:	f1c5 0808 	rsb	r8, r5, #8
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	4641      	mov	r1, r8
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fc6b 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d074      	beq.n	80094c0 <ucdr_serialize_uint64_t+0x134>
 80093d6:	7d23      	ldrb	r3, [r4, #20]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	f000 809b 	beq.w	8009514 <ucdr_serialize_uint64_t+0x188>
 80093de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80093e2:	7033      	strb	r3, [r6, #0]
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	d078      	beq.n	80094da <ucdr_serialize_uint64_t+0x14e>
 80093e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093ec:	7073      	strb	r3, [r6, #1]
 80093ee:	2d01      	cmp	r5, #1
 80093f0:	d077      	beq.n	80094e2 <ucdr_serialize_uint64_t+0x156>
 80093f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80093f6:	70b3      	strb	r3, [r6, #2]
 80093f8:	2d02      	cmp	r5, #2
 80093fa:	d076      	beq.n	80094ea <ucdr_serialize_uint64_t+0x15e>
 80093fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009400:	70f3      	strb	r3, [r6, #3]
 8009402:	2d03      	cmp	r5, #3
 8009404:	d075      	beq.n	80094f2 <ucdr_serialize_uint64_t+0x166>
 8009406:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800940a:	7133      	strb	r3, [r6, #4]
 800940c:	2d04      	cmp	r5, #4
 800940e:	d074      	beq.n	80094fa <ucdr_serialize_uint64_t+0x16e>
 8009410:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009414:	7173      	strb	r3, [r6, #5]
 8009416:	2d05      	cmp	r5, #5
 8009418:	d073      	beq.n	8009502 <ucdr_serialize_uint64_t+0x176>
 800941a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800941e:	71b3      	strb	r3, [r6, #6]
 8009420:	2d06      	cmp	r5, #6
 8009422:	d072      	beq.n	800950a <ucdr_serialize_uint64_t+0x17e>
 8009424:	f89d 3000 	ldrb.w	r3, [sp]
 8009428:	71f3      	strb	r3, [r6, #7]
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	68a2      	ldr	r2, [r4, #8]
 800942e:	7da0      	ldrb	r0, [r4, #22]
 8009430:	3308      	adds	r3, #8
 8009432:	1b5d      	subs	r5, r3, r5
 8009434:	4442      	add	r2, r8
 8009436:	2308      	movs	r3, #8
 8009438:	f080 0001 	eor.w	r0, r0, #1
 800943c:	6125      	str	r5, [r4, #16]
 800943e:	60a2      	str	r2, [r4, #8]
 8009440:	7563      	strb	r3, [r4, #21]
 8009442:	b002      	add	sp, #8
 8009444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009448:	2108      	movs	r1, #8
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fc2c 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009450:	b350      	cbz	r0, 80094a8 <ucdr_serialize_uint64_t+0x11c>
 8009452:	7d23      	ldrb	r3, [r4, #20]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d02d      	beq.n	80094b4 <ucdr_serialize_uint64_t+0x128>
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	68a3      	ldr	r3, [r4, #8]
 8009462:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009466:	705a      	strb	r2, [r3, #1]
 8009468:	68a3      	ldr	r3, [r4, #8]
 800946a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800946e:	709a      	strb	r2, [r3, #2]
 8009470:	68a3      	ldr	r3, [r4, #8]
 8009472:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009476:	70da      	strb	r2, [r3, #3]
 8009478:	68a3      	ldr	r3, [r4, #8]
 800947a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800947e:	711a      	strb	r2, [r3, #4]
 8009480:	68a3      	ldr	r3, [r4, #8]
 8009482:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009486:	715a      	strb	r2, [r3, #5]
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800948e:	719a      	strb	r2, [r3, #6]
 8009490:	68a3      	ldr	r3, [r4, #8]
 8009492:	f89d 2000 	ldrb.w	r2, [sp]
 8009496:	71da      	strb	r2, [r3, #7]
 8009498:	68a2      	ldr	r2, [r4, #8]
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	3208      	adds	r2, #8
 800949e:	3308      	adds	r3, #8
 80094a0:	2108      	movs	r1, #8
 80094a2:	60a2      	str	r2, [r4, #8]
 80094a4:	6123      	str	r3, [r4, #16]
 80094a6:	7561      	strb	r1, [r4, #21]
 80094a8:	7da0      	ldrb	r0, [r4, #22]
 80094aa:	f080 0001 	eor.w	r0, r0, #1
 80094ae:	b002      	add	sp, #8
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	466b      	mov	r3, sp
 80094b6:	cb03      	ldmia	r3!, {r0, r1}
 80094b8:	68a3      	ldr	r3, [r4, #8]
 80094ba:	6018      	str	r0, [r3, #0]
 80094bc:	6059      	str	r1, [r3, #4]
 80094be:	e7eb      	b.n	8009498 <ucdr_serialize_uint64_t+0x10c>
 80094c0:	68a2      	ldr	r2, [r4, #8]
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	7da0      	ldrb	r0, [r4, #22]
 80094c6:	7567      	strb	r7, [r4, #21]
 80094c8:	1b52      	subs	r2, r2, r5
 80094ca:	f080 0001 	eor.w	r0, r0, #1
 80094ce:	1b5d      	subs	r5, r3, r5
 80094d0:	60a2      	str	r2, [r4, #8]
 80094d2:	6125      	str	r5, [r4, #16]
 80094d4:	b002      	add	sp, #8
 80094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094da:	68a3      	ldr	r3, [r4, #8]
 80094dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009508:	701a      	strb	r2, [r3, #0]
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	f89d 2000 	ldrb.w	r2, [sp]
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e78a      	b.n	800942a <ucdr_serialize_uint64_t+0x9e>
 8009514:	4630      	mov	r0, r6
 8009516:	466e      	mov	r6, sp
 8009518:	4631      	mov	r1, r6
 800951a:	462a      	mov	r2, r5
 800951c:	f009 fe2e 	bl	801317c <memcpy>
 8009520:	68a0      	ldr	r0, [r4, #8]
 8009522:	4642      	mov	r2, r8
 8009524:	1971      	adds	r1, r6, r5
 8009526:	f009 fe29 	bl	801317c <memcpy>
 800952a:	e77e      	b.n	800942a <ucdr_serialize_uint64_t+0x9e>

0800952c <ucdr_serialize_int16_t>:
 800952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	460b      	mov	r3, r1
 8009534:	2102      	movs	r1, #2
 8009536:	4604      	mov	r4, r0
 8009538:	f8ad 3006 	strh.w	r3, [sp, #6]
 800953c:	f000 fc06 	bl	8009d4c <ucdr_buffer_alignment>
 8009540:	4601      	mov	r1, r0
 8009542:	4620      	mov	r0, r4
 8009544:	7d67      	ldrb	r7, [r4, #21]
 8009546:	f000 fc45 	bl	8009dd4 <ucdr_advance_buffer>
 800954a:	4620      	mov	r0, r4
 800954c:	2102      	movs	r1, #2
 800954e:	f000 fb9f 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009552:	bb78      	cbnz	r0, 80095b4 <ucdr_serialize_int16_t+0x88>
 8009554:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009558:	42b5      	cmp	r5, r6
 800955a:	d926      	bls.n	80095aa <ucdr_serialize_int16_t+0x7e>
 800955c:	6922      	ldr	r2, [r4, #16]
 800955e:	60a5      	str	r5, [r4, #8]
 8009560:	1bad      	subs	r5, r5, r6
 8009562:	442a      	add	r2, r5
 8009564:	f1c5 0802 	rsb	r8, r5, #2
 8009568:	6122      	str	r2, [r4, #16]
 800956a:	4641      	mov	r1, r8
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fb9b 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009572:	2800      	cmp	r0, #0
 8009574:	d03b      	beq.n	80095ee <ucdr_serialize_int16_t+0xc2>
 8009576:	7d23      	ldrb	r3, [r4, #20]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d04a      	beq.n	8009612 <ucdr_serialize_int16_t+0xe6>
 800957c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009580:	7033      	strb	r3, [r6, #0]
 8009582:	2d00      	cmp	r5, #0
 8009584:	d040      	beq.n	8009608 <ucdr_serialize_int16_t+0xdc>
 8009586:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800958a:	7073      	strb	r3, [r6, #1]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	68a2      	ldr	r2, [r4, #8]
 8009590:	7da0      	ldrb	r0, [r4, #22]
 8009592:	3302      	adds	r3, #2
 8009594:	1b5b      	subs	r3, r3, r5
 8009596:	4442      	add	r2, r8
 8009598:	2102      	movs	r1, #2
 800959a:	f080 0001 	eor.w	r0, r0, #1
 800959e:	6123      	str	r3, [r4, #16]
 80095a0:	60a2      	str	r2, [r4, #8]
 80095a2:	7561      	strb	r1, [r4, #21]
 80095a4:	b002      	add	sp, #8
 80095a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095aa:	2102      	movs	r1, #2
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fb7b 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80095b2:	b190      	cbz	r0, 80095da <ucdr_serialize_int16_t+0xae>
 80095b4:	7d23      	ldrb	r3, [r4, #20]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	68a3      	ldr	r3, [r4, #8]
 80095ba:	d014      	beq.n	80095e6 <ucdr_serialize_int16_t+0xba>
 80095bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095c8:	705a      	strb	r2, [r3, #1]
 80095ca:	68a2      	ldr	r2, [r4, #8]
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	3202      	adds	r2, #2
 80095d0:	3302      	adds	r3, #2
 80095d2:	2102      	movs	r1, #2
 80095d4:	60a2      	str	r2, [r4, #8]
 80095d6:	6123      	str	r3, [r4, #16]
 80095d8:	7561      	strb	r1, [r4, #21]
 80095da:	7da0      	ldrb	r0, [r4, #22]
 80095dc:	f080 0001 	eor.w	r0, r0, #1
 80095e0:	b002      	add	sp, #8
 80095e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80095ea:	801a      	strh	r2, [r3, #0]
 80095ec:	e7ed      	b.n	80095ca <ucdr_serialize_int16_t+0x9e>
 80095ee:	68a2      	ldr	r2, [r4, #8]
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	7da0      	ldrb	r0, [r4, #22]
 80095f4:	7567      	strb	r7, [r4, #21]
 80095f6:	1b52      	subs	r2, r2, r5
 80095f8:	1b5b      	subs	r3, r3, r5
 80095fa:	f080 0001 	eor.w	r0, r0, #1
 80095fe:	60a2      	str	r2, [r4, #8]
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	b002      	add	sp, #8
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	68a3      	ldr	r3, [r4, #8]
 800960a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800960e:	701a      	strb	r2, [r3, #0]
 8009610:	e7bc      	b.n	800958c <ucdr_serialize_int16_t+0x60>
 8009612:	4630      	mov	r0, r6
 8009614:	f10d 0606 	add.w	r6, sp, #6
 8009618:	4631      	mov	r1, r6
 800961a:	462a      	mov	r2, r5
 800961c:	f009 fdae 	bl	801317c <memcpy>
 8009620:	68a0      	ldr	r0, [r4, #8]
 8009622:	4642      	mov	r2, r8
 8009624:	1971      	adds	r1, r6, r5
 8009626:	f009 fda9 	bl	801317c <memcpy>
 800962a:	e7af      	b.n	800958c <ucdr_serialize_int16_t+0x60>

0800962c <ucdr_deserialize_int16_t>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	460d      	mov	r5, r1
 8009632:	2102      	movs	r1, #2
 8009634:	4604      	mov	r4, r0
 8009636:	f000 fb89 	bl	8009d4c <ucdr_buffer_alignment>
 800963a:	4601      	mov	r1, r0
 800963c:	4620      	mov	r0, r4
 800963e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009642:	f000 fbc7 	bl	8009dd4 <ucdr_advance_buffer>
 8009646:	4620      	mov	r0, r4
 8009648:	2102      	movs	r1, #2
 800964a:	f000 fb21 	bl	8009c90 <ucdr_check_buffer_available_for>
 800964e:	bb60      	cbnz	r0, 80096aa <ucdr_deserialize_int16_t+0x7e>
 8009650:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009654:	42be      	cmp	r6, r7
 8009656:	d923      	bls.n	80096a0 <ucdr_deserialize_int16_t+0x74>
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	60a6      	str	r6, [r4, #8]
 800965c:	1bf6      	subs	r6, r6, r7
 800965e:	4432      	add	r2, r6
 8009660:	f1c6 0902 	rsb	r9, r6, #2
 8009664:	6122      	str	r2, [r4, #16]
 8009666:	4649      	mov	r1, r9
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fb1d 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 800966e:	2800      	cmp	r0, #0
 8009670:	d034      	beq.n	80096dc <ucdr_deserialize_int16_t+0xb0>
 8009672:	7d23      	ldrb	r3, [r4, #20]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d042      	beq.n	80096fe <ucdr_deserialize_int16_t+0xd2>
 8009678:	787b      	ldrb	r3, [r7, #1]
 800967a:	702b      	strb	r3, [r5, #0]
 800967c:	2e00      	cmp	r6, #0
 800967e:	d03a      	beq.n	80096f6 <ucdr_deserialize_int16_t+0xca>
 8009680:	783b      	ldrb	r3, [r7, #0]
 8009682:	706b      	strb	r3, [r5, #1]
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	68a2      	ldr	r2, [r4, #8]
 8009688:	7da0      	ldrb	r0, [r4, #22]
 800968a:	2102      	movs	r1, #2
 800968c:	3302      	adds	r3, #2
 800968e:	1b9b      	subs	r3, r3, r6
 8009690:	444a      	add	r2, r9
 8009692:	7561      	strb	r1, [r4, #21]
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	60a2      	str	r2, [r4, #8]
 8009698:	f080 0001 	eor.w	r0, r0, #1
 800969c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a0:	2102      	movs	r1, #2
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fb00 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80096a8:	b180      	cbz	r0, 80096cc <ucdr_deserialize_int16_t+0xa0>
 80096aa:	7d23      	ldrb	r3, [r4, #20]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	d011      	beq.n	80096d6 <ucdr_deserialize_int16_t+0xaa>
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	702b      	strb	r3, [r5, #0]
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	706b      	strb	r3, [r5, #1]
 80096bc:	68a2      	ldr	r2, [r4, #8]
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	3202      	adds	r2, #2
 80096c2:	3302      	adds	r3, #2
 80096c4:	2102      	movs	r1, #2
 80096c6:	60a2      	str	r2, [r4, #8]
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	7561      	strb	r1, [r4, #21]
 80096cc:	7da0      	ldrb	r0, [r4, #22]
 80096ce:	f080 0001 	eor.w	r0, r0, #1
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	802b      	strh	r3, [r5, #0]
 80096da:	e7ef      	b.n	80096bc <ucdr_deserialize_int16_t+0x90>
 80096dc:	68a2      	ldr	r2, [r4, #8]
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	7da0      	ldrb	r0, [r4, #22]
 80096e2:	f884 8015 	strb.w	r8, [r4, #21]
 80096e6:	1b92      	subs	r2, r2, r6
 80096e8:	1b9b      	subs	r3, r3, r6
 80096ea:	60a2      	str	r2, [r4, #8]
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	f080 0001 	eor.w	r0, r0, #1
 80096f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	706b      	strb	r3, [r5, #1]
 80096fc:	e7c2      	b.n	8009684 <ucdr_deserialize_int16_t+0x58>
 80096fe:	4639      	mov	r1, r7
 8009700:	4632      	mov	r2, r6
 8009702:	4628      	mov	r0, r5
 8009704:	f009 fd3a 	bl	801317c <memcpy>
 8009708:	68a1      	ldr	r1, [r4, #8]
 800970a:	464a      	mov	r2, r9
 800970c:	19a8      	adds	r0, r5, r6
 800970e:	f009 fd35 	bl	801317c <memcpy>
 8009712:	e7b7      	b.n	8009684 <ucdr_deserialize_int16_t+0x58>

08009714 <ucdr_serialize_int32_t>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	4604      	mov	r4, r0
 800971c:	9101      	str	r1, [sp, #4]
 800971e:	2104      	movs	r1, #4
 8009720:	f000 fb14 	bl	8009d4c <ucdr_buffer_alignment>
 8009724:	4601      	mov	r1, r0
 8009726:	4620      	mov	r0, r4
 8009728:	7d67      	ldrb	r7, [r4, #21]
 800972a:	f000 fb53 	bl	8009dd4 <ucdr_advance_buffer>
 800972e:	4620      	mov	r0, r4
 8009730:	2104      	movs	r1, #4
 8009732:	f000 faad 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009736:	2800      	cmp	r0, #0
 8009738:	d139      	bne.n	80097ae <ucdr_serialize_int32_t+0x9a>
 800973a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800973e:	42ae      	cmp	r6, r5
 8009740:	d930      	bls.n	80097a4 <ucdr_serialize_int32_t+0x90>
 8009742:	6922      	ldr	r2, [r4, #16]
 8009744:	60a6      	str	r6, [r4, #8]
 8009746:	1b76      	subs	r6, r6, r5
 8009748:	4432      	add	r2, r6
 800974a:	f1c6 0804 	rsb	r8, r6, #4
 800974e:	6122      	str	r2, [r4, #16]
 8009750:	4641      	mov	r1, r8
 8009752:	4620      	mov	r0, r4
 8009754:	f000 faa8 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009758:	2800      	cmp	r0, #0
 800975a:	d04c      	beq.n	80097f6 <ucdr_serialize_int32_t+0xe2>
 800975c:	7d23      	ldrb	r3, [r4, #20]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d063      	beq.n	800982a <ucdr_serialize_int32_t+0x116>
 8009762:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009766:	702b      	strb	r3, [r5, #0]
 8009768:	2e00      	cmp	r6, #0
 800976a:	d051      	beq.n	8009810 <ucdr_serialize_int32_t+0xfc>
 800976c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009770:	706b      	strb	r3, [r5, #1]
 8009772:	2e01      	cmp	r6, #1
 8009774:	d050      	beq.n	8009818 <ucdr_serialize_int32_t+0x104>
 8009776:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800977a:	70ab      	strb	r3, [r5, #2]
 800977c:	2e02      	cmp	r6, #2
 800977e:	d04f      	beq.n	8009820 <ucdr_serialize_int32_t+0x10c>
 8009780:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009784:	70eb      	strb	r3, [r5, #3]
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	68a2      	ldr	r2, [r4, #8]
 800978a:	7da0      	ldrb	r0, [r4, #22]
 800978c:	3304      	adds	r3, #4
 800978e:	1b9b      	subs	r3, r3, r6
 8009790:	4442      	add	r2, r8
 8009792:	2104      	movs	r1, #4
 8009794:	f080 0001 	eor.w	r0, r0, #1
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	60a2      	str	r2, [r4, #8]
 800979c:	7561      	strb	r1, [r4, #21]
 800979e:	b002      	add	sp, #8
 80097a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a4:	2104      	movs	r1, #4
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 fa7e 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80097ac:	b1d0      	cbz	r0, 80097e4 <ucdr_serialize_int32_t+0xd0>
 80097ae:	7d23      	ldrb	r3, [r4, #20]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	d01c      	beq.n	80097f0 <ucdr_serialize_int32_t+0xdc>
 80097b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097ba:	701a      	strb	r2, [r3, #0]
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097c2:	705a      	strb	r2, [r3, #1]
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097ca:	709a      	strb	r2, [r3, #2]
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097d2:	70da      	strb	r2, [r3, #3]
 80097d4:	68a2      	ldr	r2, [r4, #8]
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	3204      	adds	r2, #4
 80097da:	3304      	adds	r3, #4
 80097dc:	2104      	movs	r1, #4
 80097de:	60a2      	str	r2, [r4, #8]
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	7561      	strb	r1, [r4, #21]
 80097e4:	7da0      	ldrb	r0, [r4, #22]
 80097e6:	f080 0001 	eor.w	r0, r0, #1
 80097ea:	b002      	add	sp, #8
 80097ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f0:	9a01      	ldr	r2, [sp, #4]
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e7ee      	b.n	80097d4 <ucdr_serialize_int32_t+0xc0>
 80097f6:	68a2      	ldr	r2, [r4, #8]
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	7da0      	ldrb	r0, [r4, #22]
 80097fc:	7567      	strb	r7, [r4, #21]
 80097fe:	1b92      	subs	r2, r2, r6
 8009800:	1b9b      	subs	r3, r3, r6
 8009802:	f080 0001 	eor.w	r0, r0, #1
 8009806:	60a2      	str	r2, [r4, #8]
 8009808:	6123      	str	r3, [r4, #16]
 800980a:	b002      	add	sp, #8
 800980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009810:	68a3      	ldr	r3, [r4, #8]
 8009812:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800981e:	701a      	strb	r2, [r3, #0]
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009826:	701a      	strb	r2, [r3, #0]
 8009828:	e7ad      	b.n	8009786 <ucdr_serialize_int32_t+0x72>
 800982a:	4628      	mov	r0, r5
 800982c:	ad01      	add	r5, sp, #4
 800982e:	4629      	mov	r1, r5
 8009830:	4632      	mov	r2, r6
 8009832:	f009 fca3 	bl	801317c <memcpy>
 8009836:	68a0      	ldr	r0, [r4, #8]
 8009838:	4642      	mov	r2, r8
 800983a:	19a9      	adds	r1, r5, r6
 800983c:	f009 fc9e 	bl	801317c <memcpy>
 8009840:	e7a1      	b.n	8009786 <ucdr_serialize_int32_t+0x72>
 8009842:	bf00      	nop

08009844 <ucdr_deserialize_int32_t>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	460d      	mov	r5, r1
 800984a:	2104      	movs	r1, #4
 800984c:	4604      	mov	r4, r0
 800984e:	f000 fa7d 	bl	8009d4c <ucdr_buffer_alignment>
 8009852:	4601      	mov	r1, r0
 8009854:	4620      	mov	r0, r4
 8009856:	f894 8015 	ldrb.w	r8, [r4, #21]
 800985a:	f000 fabb 	bl	8009dd4 <ucdr_advance_buffer>
 800985e:	4620      	mov	r0, r4
 8009860:	2104      	movs	r1, #4
 8009862:	f000 fa15 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009866:	2800      	cmp	r0, #0
 8009868:	d138      	bne.n	80098dc <ucdr_deserialize_int32_t+0x98>
 800986a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800986e:	42b7      	cmp	r7, r6
 8009870:	d92f      	bls.n	80098d2 <ucdr_deserialize_int32_t+0x8e>
 8009872:	6922      	ldr	r2, [r4, #16]
 8009874:	60a7      	str	r7, [r4, #8]
 8009876:	1bbf      	subs	r7, r7, r6
 8009878:	443a      	add	r2, r7
 800987a:	f1c7 0904 	rsb	r9, r7, #4
 800987e:	6122      	str	r2, [r4, #16]
 8009880:	4649      	mov	r1, r9
 8009882:	4620      	mov	r0, r4
 8009884:	f000 fa10 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009888:	2800      	cmp	r0, #0
 800988a:	d046      	beq.n	800991a <ucdr_deserialize_int32_t+0xd6>
 800988c:	7d23      	ldrb	r3, [r4, #20]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d05c      	beq.n	800994c <ucdr_deserialize_int32_t+0x108>
 8009892:	78f3      	ldrb	r3, [r6, #3]
 8009894:	702b      	strb	r3, [r5, #0]
 8009896:	2f00      	cmp	r7, #0
 8009898:	d04c      	beq.n	8009934 <ucdr_deserialize_int32_t+0xf0>
 800989a:	78b3      	ldrb	r3, [r6, #2]
 800989c:	706b      	strb	r3, [r5, #1]
 800989e:	2f01      	cmp	r7, #1
 80098a0:	f105 0302 	add.w	r3, r5, #2
 80098a4:	d04a      	beq.n	800993c <ucdr_deserialize_int32_t+0xf8>
 80098a6:	7873      	ldrb	r3, [r6, #1]
 80098a8:	70ab      	strb	r3, [r5, #2]
 80098aa:	2f02      	cmp	r7, #2
 80098ac:	f105 0303 	add.w	r3, r5, #3
 80098b0:	d048      	beq.n	8009944 <ucdr_deserialize_int32_t+0x100>
 80098b2:	7833      	ldrb	r3, [r6, #0]
 80098b4:	70eb      	strb	r3, [r5, #3]
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	68a2      	ldr	r2, [r4, #8]
 80098ba:	7da0      	ldrb	r0, [r4, #22]
 80098bc:	2104      	movs	r1, #4
 80098be:	3304      	adds	r3, #4
 80098c0:	1bdb      	subs	r3, r3, r7
 80098c2:	444a      	add	r2, r9
 80098c4:	7561      	strb	r1, [r4, #21]
 80098c6:	6123      	str	r3, [r4, #16]
 80098c8:	60a2      	str	r2, [r4, #8]
 80098ca:	f080 0001 	eor.w	r0, r0, #1
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d2:	2104      	movs	r1, #4
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 f9e7 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80098da:	b1b0      	cbz	r0, 800990a <ucdr_deserialize_int32_t+0xc6>
 80098dc:	7d23      	ldrb	r3, [r4, #20]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	d017      	beq.n	8009914 <ucdr_deserialize_int32_t+0xd0>
 80098e4:	78db      	ldrb	r3, [r3, #3]
 80098e6:	702b      	strb	r3, [r5, #0]
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	789b      	ldrb	r3, [r3, #2]
 80098ec:	706b      	strb	r3, [r5, #1]
 80098ee:	68a3      	ldr	r3, [r4, #8]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	70ab      	strb	r3, [r5, #2]
 80098f4:	68a3      	ldr	r3, [r4, #8]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	70eb      	strb	r3, [r5, #3]
 80098fa:	68a2      	ldr	r2, [r4, #8]
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	3204      	adds	r2, #4
 8009900:	3304      	adds	r3, #4
 8009902:	2104      	movs	r1, #4
 8009904:	60a2      	str	r2, [r4, #8]
 8009906:	6123      	str	r3, [r4, #16]
 8009908:	7561      	strb	r1, [r4, #21]
 800990a:	7da0      	ldrb	r0, [r4, #22]
 800990c:	f080 0001 	eor.w	r0, r0, #1
 8009910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	e7ef      	b.n	80098fa <ucdr_deserialize_int32_t+0xb6>
 800991a:	68a2      	ldr	r2, [r4, #8]
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	7da0      	ldrb	r0, [r4, #22]
 8009920:	f884 8015 	strb.w	r8, [r4, #21]
 8009924:	1bd2      	subs	r2, r2, r7
 8009926:	1bdb      	subs	r3, r3, r7
 8009928:	60a2      	str	r2, [r4, #8]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	f080 0001 	eor.w	r0, r0, #1
 8009930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009934:	68a3      	ldr	r3, [r4, #8]
 8009936:	789b      	ldrb	r3, [r3, #2]
 8009938:	706b      	strb	r3, [r5, #1]
 800993a:	1cab      	adds	r3, r5, #2
 800993c:	68a2      	ldr	r2, [r4, #8]
 800993e:	7852      	ldrb	r2, [r2, #1]
 8009940:	f803 2b01 	strb.w	r2, [r3], #1
 8009944:	68a2      	ldr	r2, [r4, #8]
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	e7b4      	b.n	80098b6 <ucdr_deserialize_int32_t+0x72>
 800994c:	4631      	mov	r1, r6
 800994e:	463a      	mov	r2, r7
 8009950:	4628      	mov	r0, r5
 8009952:	f009 fc13 	bl	801317c <memcpy>
 8009956:	68a1      	ldr	r1, [r4, #8]
 8009958:	464a      	mov	r2, r9
 800995a:	19e8      	adds	r0, r5, r7
 800995c:	f009 fc0e 	bl	801317c <memcpy>
 8009960:	e7a9      	b.n	80098b6 <ucdr_deserialize_int32_t+0x72>
 8009962:	bf00      	nop

08009964 <ucdr_serialize_int64_t>:
 8009964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009968:	2108      	movs	r1, #8
 800996a:	b082      	sub	sp, #8
 800996c:	4604      	mov	r4, r0
 800996e:	e9cd 2300 	strd	r2, r3, [sp]
 8009972:	f000 f9eb 	bl	8009d4c <ucdr_buffer_alignment>
 8009976:	4601      	mov	r1, r0
 8009978:	4620      	mov	r0, r4
 800997a:	7d67      	ldrb	r7, [r4, #21]
 800997c:	f000 fa2a 	bl	8009dd4 <ucdr_advance_buffer>
 8009980:	4620      	mov	r0, r4
 8009982:	2108      	movs	r1, #8
 8009984:	f000 f984 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009988:	2800      	cmp	r0, #0
 800998a:	d14e      	bne.n	8009a2a <ucdr_serialize_int64_t+0xc6>
 800998c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009990:	42b5      	cmp	r5, r6
 8009992:	d945      	bls.n	8009a20 <ucdr_serialize_int64_t+0xbc>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	60a5      	str	r5, [r4, #8]
 8009998:	1bad      	subs	r5, r5, r6
 800999a:	442b      	add	r3, r5
 800999c:	f1c5 0808 	rsb	r8, r5, #8
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	4641      	mov	r1, r8
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 f97f 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d074      	beq.n	8009a98 <ucdr_serialize_int64_t+0x134>
 80099ae:	7d23      	ldrb	r3, [r4, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	f000 809b 	beq.w	8009aec <ucdr_serialize_int64_t+0x188>
 80099b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80099ba:	7033      	strb	r3, [r6, #0]
 80099bc:	2d00      	cmp	r5, #0
 80099be:	d078      	beq.n	8009ab2 <ucdr_serialize_int64_t+0x14e>
 80099c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80099c4:	7073      	strb	r3, [r6, #1]
 80099c6:	2d01      	cmp	r5, #1
 80099c8:	d077      	beq.n	8009aba <ucdr_serialize_int64_t+0x156>
 80099ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80099ce:	70b3      	strb	r3, [r6, #2]
 80099d0:	2d02      	cmp	r5, #2
 80099d2:	d076      	beq.n	8009ac2 <ucdr_serialize_int64_t+0x15e>
 80099d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80099d8:	70f3      	strb	r3, [r6, #3]
 80099da:	2d03      	cmp	r5, #3
 80099dc:	d075      	beq.n	8009aca <ucdr_serialize_int64_t+0x166>
 80099de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80099e2:	7133      	strb	r3, [r6, #4]
 80099e4:	2d04      	cmp	r5, #4
 80099e6:	d074      	beq.n	8009ad2 <ucdr_serialize_int64_t+0x16e>
 80099e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80099ec:	7173      	strb	r3, [r6, #5]
 80099ee:	2d05      	cmp	r5, #5
 80099f0:	d073      	beq.n	8009ada <ucdr_serialize_int64_t+0x176>
 80099f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80099f6:	71b3      	strb	r3, [r6, #6]
 80099f8:	2d06      	cmp	r5, #6
 80099fa:	d072      	beq.n	8009ae2 <ucdr_serialize_int64_t+0x17e>
 80099fc:	f89d 3000 	ldrb.w	r3, [sp]
 8009a00:	71f3      	strb	r3, [r6, #7]
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	68a2      	ldr	r2, [r4, #8]
 8009a06:	7da0      	ldrb	r0, [r4, #22]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	1b5d      	subs	r5, r3, r5
 8009a0c:	4442      	add	r2, r8
 8009a0e:	2308      	movs	r3, #8
 8009a10:	f080 0001 	eor.w	r0, r0, #1
 8009a14:	6125      	str	r5, [r4, #16]
 8009a16:	60a2      	str	r2, [r4, #8]
 8009a18:	7563      	strb	r3, [r4, #21]
 8009a1a:	b002      	add	sp, #8
 8009a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a20:	2108      	movs	r1, #8
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 f940 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009a28:	b350      	cbz	r0, 8009a80 <ucdr_serialize_int64_t+0x11c>
 8009a2a:	7d23      	ldrb	r3, [r4, #20]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d02d      	beq.n	8009a8c <ucdr_serialize_int64_t+0x128>
 8009a30:	68a3      	ldr	r3, [r4, #8]
 8009a32:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	68a3      	ldr	r3, [r4, #8]
 8009a3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a3e:	705a      	strb	r2, [r3, #1]
 8009a40:	68a3      	ldr	r3, [r4, #8]
 8009a42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a46:	709a      	strb	r2, [r3, #2]
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a4e:	70da      	strb	r2, [r3, #3]
 8009a50:	68a3      	ldr	r3, [r4, #8]
 8009a52:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009a56:	711a      	strb	r2, [r3, #4]
 8009a58:	68a3      	ldr	r3, [r4, #8]
 8009a5a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009a5e:	715a      	strb	r2, [r3, #5]
 8009a60:	68a3      	ldr	r3, [r4, #8]
 8009a62:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009a66:	719a      	strb	r2, [r3, #6]
 8009a68:	68a3      	ldr	r3, [r4, #8]
 8009a6a:	f89d 2000 	ldrb.w	r2, [sp]
 8009a6e:	71da      	strb	r2, [r3, #7]
 8009a70:	68a2      	ldr	r2, [r4, #8]
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	3208      	adds	r2, #8
 8009a76:	3308      	adds	r3, #8
 8009a78:	2108      	movs	r1, #8
 8009a7a:	60a2      	str	r2, [r4, #8]
 8009a7c:	6123      	str	r3, [r4, #16]
 8009a7e:	7561      	strb	r1, [r4, #21]
 8009a80:	7da0      	ldrb	r0, [r4, #22]
 8009a82:	f080 0001 	eor.w	r0, r0, #1
 8009a86:	b002      	add	sp, #8
 8009a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a8c:	466b      	mov	r3, sp
 8009a8e:	cb03      	ldmia	r3!, {r0, r1}
 8009a90:	68a3      	ldr	r3, [r4, #8]
 8009a92:	6018      	str	r0, [r3, #0]
 8009a94:	6059      	str	r1, [r3, #4]
 8009a96:	e7eb      	b.n	8009a70 <ucdr_serialize_int64_t+0x10c>
 8009a98:	68a2      	ldr	r2, [r4, #8]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	7da0      	ldrb	r0, [r4, #22]
 8009a9e:	7567      	strb	r7, [r4, #21]
 8009aa0:	1b52      	subs	r2, r2, r5
 8009aa2:	f080 0001 	eor.w	r0, r0, #1
 8009aa6:	1b5d      	subs	r5, r3, r5
 8009aa8:	60a2      	str	r2, [r4, #8]
 8009aaa:	6125      	str	r5, [r4, #16]
 8009aac:	b002      	add	sp, #8
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab2:	68a3      	ldr	r3, [r4, #8]
 8009ab4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ab8:	701a      	strb	r2, [r3, #0]
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	68a3      	ldr	r3, [r4, #8]
 8009ac4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	f89d 2000 	ldrb.w	r2, [sp]
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	e78a      	b.n	8009a02 <ucdr_serialize_int64_t+0x9e>
 8009aec:	4630      	mov	r0, r6
 8009aee:	466e      	mov	r6, sp
 8009af0:	4631      	mov	r1, r6
 8009af2:	462a      	mov	r2, r5
 8009af4:	f009 fb42 	bl	801317c <memcpy>
 8009af8:	68a0      	ldr	r0, [r4, #8]
 8009afa:	4642      	mov	r2, r8
 8009afc:	1971      	adds	r1, r6, r5
 8009afe:	f009 fb3d 	bl	801317c <memcpy>
 8009b02:	e77e      	b.n	8009a02 <ucdr_serialize_int64_t+0x9e>

08009b04 <ucdr_deserialize_int64_t>:
 8009b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b08:	460d      	mov	r5, r1
 8009b0a:	2108      	movs	r1, #8
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	f000 f91d 	bl	8009d4c <ucdr_buffer_alignment>
 8009b12:	4601      	mov	r1, r0
 8009b14:	4620      	mov	r0, r4
 8009b16:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009b1a:	f000 f95b 	bl	8009dd4 <ucdr_advance_buffer>
 8009b1e:	4620      	mov	r0, r4
 8009b20:	2108      	movs	r1, #8
 8009b22:	f000 f8b5 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d151      	bne.n	8009bce <ucdr_deserialize_int64_t+0xca>
 8009b2a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009b2e:	42be      	cmp	r6, r7
 8009b30:	d948      	bls.n	8009bc4 <ucdr_deserialize_int64_t+0xc0>
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	60a6      	str	r6, [r4, #8]
 8009b36:	1bf6      	subs	r6, r6, r7
 8009b38:	4433      	add	r3, r6
 8009b3a:	f1c6 0808 	rsb	r8, r6, #8
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	4641      	mov	r1, r8
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f8b0 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d06d      	beq.n	8009c28 <ucdr_deserialize_int64_t+0x124>
 8009b4c:	7d23      	ldrb	r3, [r4, #20]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	f000 8093 	beq.w	8009c7a <ucdr_deserialize_int64_t+0x176>
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	702b      	strb	r3, [r5, #0]
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	d072      	beq.n	8009c42 <ucdr_deserialize_int64_t+0x13e>
 8009b5c:	79bb      	ldrb	r3, [r7, #6]
 8009b5e:	706b      	strb	r3, [r5, #1]
 8009b60:	2e01      	cmp	r6, #1
 8009b62:	f105 0302 	add.w	r3, r5, #2
 8009b66:	d070      	beq.n	8009c4a <ucdr_deserialize_int64_t+0x146>
 8009b68:	797b      	ldrb	r3, [r7, #5]
 8009b6a:	70ab      	strb	r3, [r5, #2]
 8009b6c:	2e02      	cmp	r6, #2
 8009b6e:	f105 0303 	add.w	r3, r5, #3
 8009b72:	d06e      	beq.n	8009c52 <ucdr_deserialize_int64_t+0x14e>
 8009b74:	793b      	ldrb	r3, [r7, #4]
 8009b76:	70eb      	strb	r3, [r5, #3]
 8009b78:	2e03      	cmp	r6, #3
 8009b7a:	f105 0304 	add.w	r3, r5, #4
 8009b7e:	d06c      	beq.n	8009c5a <ucdr_deserialize_int64_t+0x156>
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	712b      	strb	r3, [r5, #4]
 8009b84:	2e04      	cmp	r6, #4
 8009b86:	f105 0305 	add.w	r3, r5, #5
 8009b8a:	d06a      	beq.n	8009c62 <ucdr_deserialize_int64_t+0x15e>
 8009b8c:	78bb      	ldrb	r3, [r7, #2]
 8009b8e:	716b      	strb	r3, [r5, #5]
 8009b90:	2e05      	cmp	r6, #5
 8009b92:	f105 0306 	add.w	r3, r5, #6
 8009b96:	d068      	beq.n	8009c6a <ucdr_deserialize_int64_t+0x166>
 8009b98:	787b      	ldrb	r3, [r7, #1]
 8009b9a:	71ab      	strb	r3, [r5, #6]
 8009b9c:	2e06      	cmp	r6, #6
 8009b9e:	f105 0307 	add.w	r3, r5, #7
 8009ba2:	d066      	beq.n	8009c72 <ucdr_deserialize_int64_t+0x16e>
 8009ba4:	783b      	ldrb	r3, [r7, #0]
 8009ba6:	71eb      	strb	r3, [r5, #7]
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	68a2      	ldr	r2, [r4, #8]
 8009bac:	7da0      	ldrb	r0, [r4, #22]
 8009bae:	3308      	adds	r3, #8
 8009bb0:	1b9e      	subs	r6, r3, r6
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	4442      	add	r2, r8
 8009bb6:	7563      	strb	r3, [r4, #21]
 8009bb8:	6126      	str	r6, [r4, #16]
 8009bba:	60a2      	str	r2, [r4, #8]
 8009bbc:	f080 0001 	eor.w	r0, r0, #1
 8009bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc4:	2108      	movs	r1, #8
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 f86e 	bl	8009ca8 <ucdr_check_final_buffer_behavior>
 8009bcc:	b310      	cbz	r0, 8009c14 <ucdr_deserialize_int64_t+0x110>
 8009bce:	7d23      	ldrb	r3, [r4, #20]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	68a3      	ldr	r3, [r4, #8]
 8009bd4:	d023      	beq.n	8009c1e <ucdr_deserialize_int64_t+0x11a>
 8009bd6:	79db      	ldrb	r3, [r3, #7]
 8009bd8:	702b      	strb	r3, [r5, #0]
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	799b      	ldrb	r3, [r3, #6]
 8009bde:	706b      	strb	r3, [r5, #1]
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	795b      	ldrb	r3, [r3, #5]
 8009be4:	70ab      	strb	r3, [r5, #2]
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	791b      	ldrb	r3, [r3, #4]
 8009bea:	70eb      	strb	r3, [r5, #3]
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	78db      	ldrb	r3, [r3, #3]
 8009bf0:	712b      	strb	r3, [r5, #4]
 8009bf2:	68a3      	ldr	r3, [r4, #8]
 8009bf4:	789b      	ldrb	r3, [r3, #2]
 8009bf6:	716b      	strb	r3, [r5, #5]
 8009bf8:	68a3      	ldr	r3, [r4, #8]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	71ab      	strb	r3, [r5, #6]
 8009bfe:	68a3      	ldr	r3, [r4, #8]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	71eb      	strb	r3, [r5, #7]
 8009c04:	68a2      	ldr	r2, [r4, #8]
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	3208      	adds	r2, #8
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	2108      	movs	r1, #8
 8009c0e:	60a2      	str	r2, [r4, #8]
 8009c10:	6123      	str	r3, [r4, #16]
 8009c12:	7561      	strb	r1, [r4, #21]
 8009c14:	7da0      	ldrb	r0, [r4, #22]
 8009c16:	f080 0001 	eor.w	r0, r0, #1
 8009c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	606b      	str	r3, [r5, #4]
 8009c24:	602a      	str	r2, [r5, #0]
 8009c26:	e7ed      	b.n	8009c04 <ucdr_deserialize_int64_t+0x100>
 8009c28:	68a2      	ldr	r2, [r4, #8]
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	7da0      	ldrb	r0, [r4, #22]
 8009c2e:	f884 9015 	strb.w	r9, [r4, #21]
 8009c32:	1b92      	subs	r2, r2, r6
 8009c34:	1b9e      	subs	r6, r3, r6
 8009c36:	60a2      	str	r2, [r4, #8]
 8009c38:	6126      	str	r6, [r4, #16]
 8009c3a:	f080 0001 	eor.w	r0, r0, #1
 8009c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	799b      	ldrb	r3, [r3, #6]
 8009c46:	706b      	strb	r3, [r5, #1]
 8009c48:	1cab      	adds	r3, r5, #2
 8009c4a:	68a2      	ldr	r2, [r4, #8]
 8009c4c:	7952      	ldrb	r2, [r2, #5]
 8009c4e:	f803 2b01 	strb.w	r2, [r3], #1
 8009c52:	68a2      	ldr	r2, [r4, #8]
 8009c54:	7912      	ldrb	r2, [r2, #4]
 8009c56:	f803 2b01 	strb.w	r2, [r3], #1
 8009c5a:	68a2      	ldr	r2, [r4, #8]
 8009c5c:	78d2      	ldrb	r2, [r2, #3]
 8009c5e:	f803 2b01 	strb.w	r2, [r3], #1
 8009c62:	68a2      	ldr	r2, [r4, #8]
 8009c64:	7892      	ldrb	r2, [r2, #2]
 8009c66:	f803 2b01 	strb.w	r2, [r3], #1
 8009c6a:	68a2      	ldr	r2, [r4, #8]
 8009c6c:	7852      	ldrb	r2, [r2, #1]
 8009c6e:	f803 2b01 	strb.w	r2, [r3], #1
 8009c72:	68a2      	ldr	r2, [r4, #8]
 8009c74:	7812      	ldrb	r2, [r2, #0]
 8009c76:	701a      	strb	r2, [r3, #0]
 8009c78:	e796      	b.n	8009ba8 <ucdr_deserialize_int64_t+0xa4>
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f009 fa7c 	bl	801317c <memcpy>
 8009c84:	68a1      	ldr	r1, [r4, #8]
 8009c86:	4642      	mov	r2, r8
 8009c88:	19a8      	adds	r0, r5, r6
 8009c8a:	f009 fa77 	bl	801317c <memcpy>
 8009c8e:	e78b      	b.n	8009ba8 <ucdr_deserialize_int64_t+0xa4>

08009c90 <ucdr_check_buffer_available_for>:
 8009c90:	7d83      	ldrb	r3, [r0, #22]
 8009c92:	b93b      	cbnz	r3, 8009ca4 <ucdr_check_buffer_available_for+0x14>
 8009c94:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009c98:	4419      	add	r1, r3
 8009c9a:	4288      	cmp	r0, r1
 8009c9c:	bf34      	ite	cc
 8009c9e:	2000      	movcc	r0, #0
 8009ca0:	2001      	movcs	r0, #1
 8009ca2:	4770      	bx	lr
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4770      	bx	lr

08009ca8 <ucdr_check_final_buffer_behavior>:
 8009ca8:	7d83      	ldrb	r3, [r0, #22]
 8009caa:	b943      	cbnz	r3, 8009cbe <ucdr_check_final_buffer_behavior+0x16>
 8009cac:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009cb0:	4291      	cmp	r1, r2
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	d205      	bcs.n	8009cc4 <ucdr_check_final_buffer_behavior+0x1c>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4618      	mov	r0, r3
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	4770      	bx	lr
 8009cc4:	6982      	ldr	r2, [r0, #24]
 8009cc6:	b13a      	cbz	r2, 8009cd8 <ucdr_check_final_buffer_behavior+0x30>
 8009cc8:	69c1      	ldr	r1, [r0, #28]
 8009cca:	4790      	blx	r2
 8009ccc:	f080 0301 	eor.w	r3, r0, #1
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	75a0      	strb	r0, [r4, #22]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	bd10      	pop	{r4, pc}
 8009cd8:	2001      	movs	r0, #1
 8009cda:	75a0      	strb	r0, [r4, #22]
 8009cdc:	e7fa      	b.n	8009cd4 <ucdr_check_final_buffer_behavior+0x2c>
 8009cde:	bf00      	nop

08009ce0 <ucdr_set_on_full_buffer_callback>:
 8009ce0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop

08009ce8 <ucdr_init_buffer_origin_offset_endian>:
 8009ce8:	b430      	push	{r4, r5}
 8009cea:	9c02      	ldr	r4, [sp, #8]
 8009cec:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8009cf0:	6001      	str	r1, [r0, #0]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	60c3      	str	r3, [r0, #12]
 8009cf6:	4421      	add	r1, r4
 8009cf8:	441c      	add	r4, r3
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6104      	str	r4, [r0, #16]
 8009cfe:	7505      	strb	r5, [r0, #20]
 8009d00:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009d04:	bc30      	pop	{r4, r5}
 8009d06:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8009d0a:	7543      	strb	r3, [r0, #21]
 8009d0c:	7583      	strb	r3, [r0, #22]
 8009d0e:	4770      	bx	lr

08009d10 <ucdr_init_buffer_origin_offset>:
 8009d10:	b510      	push	{r4, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	9c04      	ldr	r4, [sp, #16]
 8009d16:	9400      	str	r4, [sp, #0]
 8009d18:	2401      	movs	r4, #1
 8009d1a:	9401      	str	r4, [sp, #4]
 8009d1c:	f7ff ffe4 	bl	8009ce8 <ucdr_init_buffer_origin_offset_endian>
 8009d20:	b002      	add	sp, #8
 8009d22:	bd10      	pop	{r4, pc}

08009d24 <ucdr_init_buffer_origin>:
 8009d24:	b510      	push	{r4, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	2400      	movs	r4, #0
 8009d2a:	9400      	str	r4, [sp, #0]
 8009d2c:	f7ff fff0 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 8009d30:	b002      	add	sp, #8
 8009d32:	bd10      	pop	{r4, pc}

08009d34 <ucdr_init_buffer>:
 8009d34:	2300      	movs	r3, #0
 8009d36:	f7ff bff5 	b.w	8009d24 <ucdr_init_buffer_origin>
 8009d3a:	bf00      	nop

08009d3c <ucdr_alignment>:
 8009d3c:	fbb0 f3f1 	udiv	r3, r0, r1
 8009d40:	fb03 0011 	mls	r0, r3, r1, r0
 8009d44:	1a08      	subs	r0, r1, r0
 8009d46:	3901      	subs	r1, #1
 8009d48:	4008      	ands	r0, r1
 8009d4a:	4770      	bx	lr

08009d4c <ucdr_buffer_alignment>:
 8009d4c:	7d43      	ldrb	r3, [r0, #21]
 8009d4e:	428b      	cmp	r3, r1
 8009d50:	d208      	bcs.n	8009d64 <ucdr_buffer_alignment+0x18>
 8009d52:	6903      	ldr	r3, [r0, #16]
 8009d54:	fbb3 f0f1 	udiv	r0, r3, r1
 8009d58:	fb01 3010 	mls	r0, r1, r0, r3
 8009d5c:	1a08      	subs	r0, r1, r0
 8009d5e:	3901      	subs	r1, #1
 8009d60:	4008      	ands	r0, r1
 8009d62:	4770      	bx	lr
 8009d64:	2000      	movs	r0, #0
 8009d66:	4770      	bx	lr

08009d68 <ucdr_align_to>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	f7ff ffed 	bl	8009d4c <ucdr_buffer_alignment>
 8009d72:	68a5      	ldr	r5, [r4, #8]
 8009d74:	6863      	ldr	r3, [r4, #4]
 8009d76:	6922      	ldr	r2, [r4, #16]
 8009d78:	7566      	strb	r6, [r4, #21]
 8009d7a:	4405      	add	r5, r0
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	4410      	add	r0, r2
 8009d80:	bf28      	it	cs
 8009d82:	462b      	movcs	r3, r5
 8009d84:	6120      	str	r0, [r4, #16]
 8009d86:	60a3      	str	r3, [r4, #8]
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	bf00      	nop

08009d8c <ucdr_buffer_length>:
 8009d8c:	6882      	ldr	r2, [r0, #8]
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	1a10      	subs	r0, r2, r0
 8009d92:	4770      	bx	lr

08009d94 <ucdr_buffer_remaining>:
 8009d94:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009d98:	1a10      	subs	r0, r2, r0
 8009d9a:	4770      	bx	lr

08009d9c <ucdr_check_final_buffer_behavior_array>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	7d83      	ldrb	r3, [r0, #22]
 8009da0:	b963      	cbnz	r3, 8009dbc <ucdr_check_final_buffer_behavior_array+0x20>
 8009da2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	d308      	bcc.n	8009dc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009dae:	b139      	cbz	r1, 8009dc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009db0:	6983      	ldr	r3, [r0, #24]
 8009db2:	b163      	cbz	r3, 8009dce <ucdr_check_final_buffer_behavior_array+0x32>
 8009db4:	69c1      	ldr	r1, [r0, #28]
 8009db6:	4798      	blx	r3
 8009db8:	75a0      	strb	r0, [r4, #22]
 8009dba:	b108      	cbz	r0, 8009dc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff ffe7 	bl	8009d94 <ucdr_buffer_remaining>
 8009dc6:	42a8      	cmp	r0, r5
 8009dc8:	bf28      	it	cs
 8009dca:	4628      	movcs	r0, r5
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	2301      	movs	r3, #1
 8009dd0:	7583      	strb	r3, [r0, #22]
 8009dd2:	e7f3      	b.n	8009dbc <ucdr_check_final_buffer_behavior_array+0x20>

08009dd4 <ucdr_advance_buffer>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	f7ff ff59 	bl	8009c90 <ucdr_check_buffer_available_for>
 8009dde:	b178      	cbz	r0, 8009e00 <ucdr_advance_buffer+0x2c>
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	6921      	ldr	r1, [r4, #16]
 8009de4:	442b      	add	r3, r5
 8009de6:	60a3      	str	r3, [r4, #8]
 8009de8:	2301      	movs	r3, #1
 8009dea:	4429      	add	r1, r5
 8009dec:	7563      	strb	r3, [r4, #21]
 8009dee:	6121      	str	r1, [r4, #16]
 8009df0:	bd38      	pop	{r3, r4, r5, pc}
 8009df2:	68a2      	ldr	r2, [r4, #8]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	4402      	add	r2, r0
 8009df8:	4403      	add	r3, r0
 8009dfa:	1a2d      	subs	r5, r5, r0
 8009dfc:	60a2      	str	r2, [r4, #8]
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	2201      	movs	r2, #1
 8009e02:	4629      	mov	r1, r5
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7ff ffc9 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d1f1      	bne.n	8009df2 <ucdr_advance_buffer+0x1e>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	7563      	strb	r3, [r4, #21]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}

08009e14 <rcl_get_zero_initialized_service>:
 8009e14:	4b01      	ldr	r3, [pc, #4]	; (8009e1c <rcl_get_zero_initialized_service+0x8>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	08014a34 	.word	0x08014a34

08009e20 <rcl_service_init>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	b091      	sub	sp, #68	; 0x44
 8009e26:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009e28:	b1d7      	cbz	r7, 8009e60 <rcl_service_init+0x40>
 8009e2a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4648      	mov	r0, r9
 8009e32:	4688      	mov	r8, r1
 8009e34:	4616      	mov	r6, r2
 8009e36:	461d      	mov	r5, r3
 8009e38:	f000 fdc4 	bl	800a9c4 <rcutils_allocator_is_valid>
 8009e3c:	b180      	cbz	r0, 8009e60 <rcl_service_init+0x40>
 8009e3e:	b17c      	cbz	r4, 8009e60 <rcl_service_init+0x40>
 8009e40:	4640      	mov	r0, r8
 8009e42:	f004 feaf 	bl	800eba4 <rcl_node_is_valid>
 8009e46:	b380      	cbz	r0, 8009eaa <rcl_service_init+0x8a>
 8009e48:	b156      	cbz	r6, 8009e60 <rcl_service_init+0x40>
 8009e4a:	b14d      	cbz	r5, 8009e60 <rcl_service_init+0x40>
 8009e4c:	f8d4 a000 	ldr.w	sl, [r4]
 8009e50:	f1ba 0f00 	cmp.w	sl, #0
 8009e54:	d009      	beq.n	8009e6a <rcl_service_init+0x4a>
 8009e56:	2564      	movs	r5, #100	; 0x64
 8009e58:	4628      	mov	r0, r5
 8009e5a:	b011      	add	sp, #68	; 0x44
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	250b      	movs	r5, #11
 8009e62:	4628      	mov	r0, r5
 8009e64:	b011      	add	sp, #68	; 0x44
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	46ce      	mov	lr, r9
 8009e6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e70:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8009e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e78:	f8de 3000 	ldr.w	r3, [lr]
 8009e7c:	f8cc 3000 	str.w	r3, [ip]
 8009e80:	f000 fddc 	bl	800aa3c <rcutils_get_zero_initialized_string_map>
 8009e84:	ab10      	add	r3, sp, #64	; 0x40
 8009e86:	4684      	mov	ip, r0
 8009e88:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009e8c:	f8cd c020 	str.w	ip, [sp, #32]
 8009e90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009e94:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8009e98:	4651      	mov	r1, sl
 8009e9a:	a808      	add	r0, sp, #32
 8009e9c:	f000 fe48 	bl	800ab30 <rcutils_string_map_init>
 8009ea0:	b140      	cbz	r0, 8009eb4 <rcl_service_init+0x94>
 8009ea2:	280a      	cmp	r0, #10
 8009ea4:	d011      	beq.n	8009eca <rcl_service_init+0xaa>
 8009ea6:	2501      	movs	r5, #1
 8009ea8:	e7db      	b.n	8009e62 <rcl_service_init+0x42>
 8009eaa:	25c8      	movs	r5, #200	; 0xc8
 8009eac:	4628      	mov	r0, r5
 8009eae:	b011      	add	sp, #68	; 0x44
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	a808      	add	r0, sp, #32
 8009eb6:	f004 faa3 	bl	800e400 <rcl_get_default_topic_name_substitutions>
 8009eba:	4682      	mov	sl, r0
 8009ebc:	b138      	cbz	r0, 8009ece <rcl_service_init+0xae>
 8009ebe:	a808      	add	r0, sp, #32
 8009ec0:	f000 fe76 	bl	800abb0 <rcutils_string_map_fini>
 8009ec4:	f1ba 0f0a 	cmp.w	sl, #10
 8009ec8:	d1ed      	bne.n	8009ea6 <rcl_service_init+0x86>
 8009eca:	250a      	movs	r5, #10
 8009ecc:	e7c9      	b.n	8009e62 <rcl_service_init+0x42>
 8009ece:	4640      	mov	r0, r8
 8009ed0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009ed4:	f004 fe70 	bl	800ebb8 <rcl_node_get_name>
 8009ed8:	4682      	mov	sl, r0
 8009eda:	4640      	mov	r0, r8
 8009edc:	f004 fe74 	bl	800ebc8 <rcl_node_get_namespace>
 8009ee0:	4686      	mov	lr, r0
 8009ee2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8009ee6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8009eea:	46ec      	mov	ip, sp
 8009eec:	f8cd b014 	str.w	fp, [sp, #20]
 8009ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ef4:	f8d9 3000 	ldr.w	r3, [r9]
 8009ef8:	f8cc 3000 	str.w	r3, [ip]
 8009efc:	4651      	mov	r1, sl
 8009efe:	4672      	mov	r2, lr
 8009f00:	4628      	mov	r0, r5
 8009f02:	ab08      	add	r3, sp, #32
 8009f04:	f004 f916 	bl	800e134 <rcl_expand_topic_name>
 8009f08:	4681      	mov	r9, r0
 8009f0a:	a808      	add	r0, sp, #32
 8009f0c:	f000 fe50 	bl	800abb0 <rcutils_string_map_fini>
 8009f10:	b940      	cbnz	r0, 8009f24 <rcl_service_init+0x104>
 8009f12:	f1b9 0f00 	cmp.w	r9, #0
 8009f16:	d00d      	beq.n	8009f34 <rcl_service_init+0x114>
 8009f18:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009f1c:	d04b      	beq.n	8009fb6 <rcl_service_init+0x196>
 8009f1e:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8009f22:	d048      	beq.n	8009fb6 <rcl_service_init+0x196>
 8009f24:	2501      	movs	r5, #1
 8009f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d09a      	beq.n	8009e62 <rcl_service_init+0x42>
 8009f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f30:	4798      	blx	r3
 8009f32:	e796      	b.n	8009e62 <rcl_service_init+0x42>
 8009f34:	4640      	mov	r0, r8
 8009f36:	f004 fe4f 	bl	800ebd8 <rcl_node_get_options>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d0f2      	beq.n	8009f24 <rcl_service_init+0x104>
 8009f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f40:	f7f6 f970 	bl	8000224 <strlen>
 8009f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f48:	3001      	adds	r0, #1
 8009f4a:	4798      	blx	r3
 8009f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f4e:	9107      	str	r1, [sp, #28]
 8009f50:	4682      	mov	sl, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	f7f6 f966 	bl	8000224 <strlen>
 8009f58:	9907      	ldr	r1, [sp, #28]
 8009f5a:	1c42      	adds	r2, r0, #1
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	f009 f90d 	bl	801317c <memcpy>
 8009f62:	464a      	mov	r2, r9
 8009f64:	4650      	mov	r0, sl
 8009f66:	a90a      	add	r1, sp, #40	; 0x28
 8009f68:	f000 fee8 	bl	800ad3c <rmw_validate_full_topic_name>
 8009f6c:	bb28      	cbnz	r0, 8009fba <rcl_service_init+0x19a>
 8009f6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009f70:	bb2d      	cbnz	r5, 8009fbe <rcl_service_init+0x19e>
 8009f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f76:	2070      	movs	r0, #112	; 0x70
 8009f78:	4798      	blx	r3
 8009f7a:	6020      	str	r0, [r4, #0]
 8009f7c:	b308      	cbz	r0, 8009fc2 <rcl_service_init+0x1a2>
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f004 fe32 	bl	800ebe8 <rcl_node_get_rmw_handle>
 8009f84:	4631      	mov	r1, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	4652      	mov	r2, sl
 8009f8a:	6826      	ldr	r6, [r4, #0]
 8009f8c:	f001 f87a 	bl	800b084 <rmw_create_service>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	66b0      	str	r0, [r6, #104]	; 0x68
 8009f94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009f96:	4618      	mov	r0, r3
 8009f98:	b1aa      	cbz	r2, 8009fc6 <rcl_service_init+0x1a6>
 8009f9a:	2268      	movs	r2, #104	; 0x68
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	f009 f8ed 	bl	801317c <memcpy>
 8009fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fa4:	b110      	cbz	r0, 8009fac <rcl_service_init+0x18c>
 8009fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009faa:	4798      	blx	r3
 8009fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	4798      	blx	r3
 8009fb4:	e755      	b.n	8009e62 <rcl_service_init+0x42>
 8009fb6:	2568      	movs	r5, #104	; 0x68
 8009fb8:	e7b5      	b.n	8009f26 <rcl_service_init+0x106>
 8009fba:	2501      	movs	r5, #1
 8009fbc:	e7f1      	b.n	8009fa2 <rcl_service_init+0x182>
 8009fbe:	2568      	movs	r5, #104	; 0x68
 8009fc0:	e7ef      	b.n	8009fa2 <rcl_service_init+0x182>
 8009fc2:	250a      	movs	r5, #10
 8009fc4:	e7ed      	b.n	8009fa2 <rcl_service_init+0x182>
 8009fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009fca:	4798      	blx	r3
 8009fcc:	2501      	movs	r5, #1
 8009fce:	f8c4 9000 	str.w	r9, [r4]
 8009fd2:	e7e6      	b.n	8009fa2 <rcl_service_init+0x182>

08009fd4 <rcl_service_fini>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	b1f8      	cbz	r0, 800a018 <rcl_service_fini+0x44>
 8009fd8:	4604      	mov	r4, r0
 8009fda:	4608      	mov	r0, r1
 8009fdc:	460d      	mov	r5, r1
 8009fde:	f004 fdd9 	bl	800eb94 <rcl_node_is_valid_except_context>
 8009fe2:	b1e8      	cbz	r0, 800a020 <rcl_service_fini+0x4c>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	b1a3      	cbz	r3, 800a012 <rcl_service_fini+0x3e>
 8009fe8:	4628      	mov	r0, r5
 8009fea:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8009fec:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8009fee:	f004 fdfb 	bl	800ebe8 <rcl_node_get_rmw_handle>
 8009ff2:	b1c0      	cbz	r0, 800a026 <rcl_service_fini+0x52>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009ff8:	f001 f91c 	bl	800b234 <rmw_destroy_service>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	4629      	mov	r1, r5
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	1e1d      	subs	r5, r3, #0
 800a004:	bf18      	it	ne
 800a006:	2501      	movne	r5, #1
 800a008:	47b0      	blx	r6
 800a00a:	2300      	movs	r3, #0
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	4628      	mov	r0, r5
 800a010:	bd70      	pop	{r4, r5, r6, pc}
 800a012:	461d      	mov	r5, r3
 800a014:	4628      	mov	r0, r5
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	f44f 7516 	mov.w	r5, #600	; 0x258
 800a01c:	4628      	mov	r0, r5
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	25c8      	movs	r5, #200	; 0xc8
 800a022:	4628      	mov	r0, r5
 800a024:	bd70      	pop	{r4, r5, r6, pc}
 800a026:	250b      	movs	r5, #11
 800a028:	e7f1      	b.n	800a00e <rcl_service_fini+0x3a>
 800a02a:	bf00      	nop

0800a02c <rcl_service_get_default_options>:
 800a02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02e:	4f0d      	ldr	r7, [pc, #52]	; (800a064 <rcl_service_get_default_options+0x38>)
 800a030:	490d      	ldr	r1, [pc, #52]	; (800a068 <rcl_service_get_default_options+0x3c>)
 800a032:	b087      	sub	sp, #28
 800a034:	4606      	mov	r6, r0
 800a036:	2250      	movs	r2, #80	; 0x50
 800a038:	4638      	mov	r0, r7
 800a03a:	f009 f89f 	bl	801317c <memcpy>
 800a03e:	466c      	mov	r4, sp
 800a040:	4668      	mov	r0, sp
 800a042:	f000 fcb1 	bl	800a9a8 <rcutils_get_default_allocator>
 800a046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a048:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800a04c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a04e:	4639      	mov	r1, r7
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	4630      	mov	r0, r6
 800a056:	2268      	movs	r2, #104	; 0x68
 800a058:	f009 f890 	bl	801317c <memcpy>
 800a05c:	4630      	mov	r0, r6
 800a05e:	b007      	add	sp, #28
 800a060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a062:	bf00      	nop
 800a064:	2000c008 	.word	0x2000c008
 800a068:	08014a38 	.word	0x08014a38

0800a06c <rcl_service_get_rmw_handle>:
 800a06c:	b110      	cbz	r0, 800a074 <rcl_service_get_rmw_handle+0x8>
 800a06e:	6800      	ldr	r0, [r0, #0]
 800a070:	b100      	cbz	r0, 800a074 <rcl_service_get_rmw_handle+0x8>
 800a072:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop

0800a078 <rcl_take_request>:
 800a078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07a:	460e      	mov	r6, r1
 800a07c:	460c      	mov	r4, r1
 800a07e:	4607      	mov	r7, r0
 800a080:	4694      	mov	ip, r2
 800a082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a084:	b08d      	sub	sp, #52	; 0x34
 800a086:	ad06      	add	r5, sp, #24
 800a088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a08a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a08e:	e885 0003 	stmia.w	r5, {r0, r1}
 800a092:	b1e7      	cbz	r7, 800a0ce <rcl_take_request+0x56>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	b1d3      	cbz	r3, 800a0ce <rcl_take_request+0x56>
 800a098:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a09a:	b1c0      	cbz	r0, 800a0ce <rcl_take_request+0x56>
 800a09c:	4662      	mov	r2, ip
 800a09e:	b30a      	cbz	r2, 800a0e4 <rcl_take_request+0x6c>
 800a0a0:	2500      	movs	r5, #0
 800a0a2:	f10d 0307 	add.w	r3, sp, #7
 800a0a6:	a902      	add	r1, sp, #8
 800a0a8:	f88d 5007 	strb.w	r5, [sp, #7]
 800a0ac:	f000 fee2 	bl	800ae74 <rmw_take_request>
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	b178      	cbz	r0, 800a0d4 <rcl_take_request+0x5c>
 800a0b4:	280a      	cmp	r0, #10
 800a0b6:	bf18      	it	ne
 800a0b8:	2601      	movne	r6, #1
 800a0ba:	ad06      	add	r5, sp, #24
 800a0bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a0c4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	b00d      	add	sp, #52	; 0x34
 800a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ce:	f44f 7616 	mov.w	r6, #600	; 0x258
 800a0d2:	e7f2      	b.n	800a0ba <rcl_take_request+0x42>
 800a0d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a0d8:	f240 2359 	movw	r3, #601	; 0x259
 800a0dc:	2a00      	cmp	r2, #0
 800a0de:	bf08      	it	eq
 800a0e0:	461e      	moveq	r6, r3
 800a0e2:	e7ea      	b.n	800a0ba <rcl_take_request+0x42>
 800a0e4:	260b      	movs	r6, #11
 800a0e6:	e7e8      	b.n	800a0ba <rcl_take_request+0x42>

0800a0e8 <rcl_send_response>:
 800a0e8:	b160      	cbz	r0, 800a104 <rcl_send_response+0x1c>
 800a0ea:	6800      	ldr	r0, [r0, #0]
 800a0ec:	b150      	cbz	r0, 800a104 <rcl_send_response+0x1c>
 800a0ee:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a0f0:	b140      	cbz	r0, 800a104 <rcl_send_response+0x1c>
 800a0f2:	b151      	cbz	r1, 800a10a <rcl_send_response+0x22>
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	b152      	cbz	r2, 800a10e <rcl_send_response+0x26>
 800a0f8:	f000 ff1a 	bl	800af30 <rmw_send_response>
 800a0fc:	3800      	subs	r0, #0
 800a0fe:	bf18      	it	ne
 800a100:	2001      	movne	r0, #1
 800a102:	bd10      	pop	{r4, pc}
 800a104:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a108:	4770      	bx	lr
 800a10a:	200b      	movs	r0, #11
 800a10c:	4770      	bx	lr
 800a10e:	200b      	movs	r0, #11
 800a110:	bd10      	pop	{r4, pc}
 800a112:	bf00      	nop

0800a114 <_rclc_check_for_new_data>:
 800a114:	b1e0      	cbz	r0, 800a150 <_rclc_check_for_new_data+0x3c>
 800a116:	7803      	ldrb	r3, [r0, #0]
 800a118:	2b08      	cmp	r3, #8
 800a11a:	d81b      	bhi.n	800a154 <_rclc_check_for_new_data+0x40>
 800a11c:	e8df f003 	tbb	[pc, r3]
 800a120:	12161010 	.word	0x12161010
 800a124:	05050512 	.word	0x05050512
 800a128:	14          	.byte	0x14
 800a129:	00          	.byte	0x00
 800a12a:	6a0b      	ldr	r3, [r1, #32]
 800a12c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a132:	3b00      	subs	r3, #0
 800a134:	bf18      	it	ne
 800a136:	2301      	movne	r3, #1
 800a138:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800a13c:	2000      	movs	r0, #0
 800a13e:	4770      	bx	lr
 800a140:	680b      	ldr	r3, [r1, #0]
 800a142:	e7f3      	b.n	800a12c <_rclc_check_for_new_data+0x18>
 800a144:	698b      	ldr	r3, [r1, #24]
 800a146:	e7f1      	b.n	800a12c <_rclc_check_for_new_data+0x18>
 800a148:	688b      	ldr	r3, [r1, #8]
 800a14a:	e7ef      	b.n	800a12c <_rclc_check_for_new_data+0x18>
 800a14c:	690b      	ldr	r3, [r1, #16]
 800a14e:	e7ed      	b.n	800a12c <_rclc_check_for_new_data+0x18>
 800a150:	200b      	movs	r0, #11
 800a152:	4770      	bx	lr
 800a154:	2300      	movs	r3, #0
 800a156:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800a15a:	2001      	movs	r0, #1
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop

0800a160 <_rclc_take_new_data>:
 800a160:	2800      	cmp	r0, #0
 800a162:	d049      	beq.n	800a1f8 <_rclc_take_new_data+0x98>
 800a164:	b510      	push	{r4, lr}
 800a166:	7803      	ldrb	r3, [r0, #0]
 800a168:	b08e      	sub	sp, #56	; 0x38
 800a16a:	4604      	mov	r4, r0
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d84a      	bhi.n	800a206 <_rclc_take_new_data+0xa6>
 800a170:	e8df f003 	tbb	[pc, r3]
 800a174:	2b121515 	.word	0x2b121515
 800a178:	0505052b 	.word	0x0505052b
 800a17c:	12          	.byte	0x12
 800a17d:	00          	.byte	0x00
 800a17e:	6a0b      	ldr	r3, [r1, #32]
 800a180:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a186:	b13b      	cbz	r3, 800a198 <_rclc_take_new_data+0x38>
 800a188:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a18c:	f104 0110 	add.w	r1, r4, #16
 800a190:	f7ff ff72 	bl	800a078 <rcl_take_request>
 800a194:	2800      	cmp	r0, #0
 800a196:	d131      	bne.n	800a1fc <_rclc_take_new_data+0x9c>
 800a198:	2000      	movs	r0, #0
 800a19a:	b00e      	add	sp, #56	; 0x38
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	680b      	ldr	r3, [r1, #0]
 800a1a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0f6      	beq.n	800a198 <_rclc_take_new_data+0x38>
 800a1aa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	aa02      	add	r2, sp, #8
 800a1b2:	f004 fe4d 	bl	800ee50 <rcl_take>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d0ef      	beq.n	800a19a <_rclc_take_new_data+0x3a>
 800a1ba:	f240 1391 	movw	r3, #401	; 0x191
 800a1be:	4298      	cmp	r0, r3
 800a1c0:	d115      	bne.n	800a1ee <_rclc_take_new_data+0x8e>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a1c8:	e7e7      	b.n	800a19a <_rclc_take_new_data+0x3a>
 800a1ca:	698b      	ldr	r3, [r1, #24]
 800a1cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0e0      	beq.n	800a198 <_rclc_take_new_data+0x38>
 800a1d6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a1da:	f104 0110 	add.w	r1, r4, #16
 800a1de:	f003 fef9 	bl	800dfd4 <rcl_take_response>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d0d8      	beq.n	800a198 <_rclc_take_new_data+0x38>
 800a1e6:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a1ea:	4298      	cmp	r0, r3
 800a1ec:	d0d5      	beq.n	800a19a <_rclc_take_new_data+0x3a>
 800a1ee:	9001      	str	r0, [sp, #4]
 800a1f0:	f000 fc0c 	bl	800aa0c <rcutils_reset_error>
 800a1f4:	9801      	ldr	r0, [sp, #4]
 800a1f6:	e7d0      	b.n	800a19a <_rclc_take_new_data+0x3a>
 800a1f8:	200b      	movs	r0, #11
 800a1fa:	4770      	bx	lr
 800a1fc:	f240 2359 	movw	r3, #601	; 0x259
 800a200:	4298      	cmp	r0, r3
 800a202:	d0de      	beq.n	800a1c2 <_rclc_take_new_data+0x62>
 800a204:	e7f3      	b.n	800a1ee <_rclc_take_new_data+0x8e>
 800a206:	2001      	movs	r0, #1
 800a208:	e7c7      	b.n	800a19a <_rclc_take_new_data+0x3a>
 800a20a:	bf00      	nop

0800a20c <rclc_executor_trigger_any>:
 800a20c:	b170      	cbz	r0, 800a22c <rclc_executor_trigger_any+0x20>
 800a20e:	b179      	cbz	r1, 800a230 <rclc_executor_trigger_any+0x24>
 800a210:	4603      	mov	r3, r0
 800a212:	2200      	movs	r2, #0
 800a214:	e005      	b.n	800a222 <rclc_executor_trigger_any+0x16>
 800a216:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a21a:	3340      	adds	r3, #64	; 0x40
 800a21c:	b930      	cbnz	r0, 800a22c <rclc_executor_trigger_any+0x20>
 800a21e:	4291      	cmp	r1, r2
 800a220:	d005      	beq.n	800a22e <rclc_executor_trigger_any+0x22>
 800a222:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a226:	3201      	adds	r2, #1
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1f4      	bne.n	800a216 <rclc_executor_trigger_any+0xa>
 800a22c:	4770      	bx	lr
 800a22e:	4770      	bx	lr
 800a230:	4608      	mov	r0, r1
 800a232:	e7fb      	b.n	800a22c <rclc_executor_trigger_any+0x20>

0800a234 <_rclc_execute.part.0>:
 800a234:	b530      	push	{r4, r5, lr}
 800a236:	7803      	ldrb	r3, [r0, #0]
 800a238:	b083      	sub	sp, #12
 800a23a:	4604      	mov	r4, r0
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	d85b      	bhi.n	800a2f8 <_rclc_execute.part.0+0xc4>
 800a240:	e8df f003 	tbb	[pc, r3]
 800a244:	3036271f 	.word	0x3036271f
 800a248:	0505053f 	.word	0x0505053f
 800a24c:	1a          	.byte	0x1a
 800a24d:	00          	.byte	0x00
 800a24e:	2b06      	cmp	r3, #6
 800a250:	d049      	beq.n	800a2e6 <_rclc_execute.part.0+0xb2>
 800a252:	2b07      	cmp	r3, #7
 800a254:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a256:	d140      	bne.n	800a2da <_rclc_execute.part.0+0xa6>
 800a258:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a25c:	6880      	ldr	r0, [r0, #8]
 800a25e:	4798      	blx	r3
 800a260:	f104 0110 	add.w	r1, r4, #16
 800a264:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a266:	6860      	ldr	r0, [r4, #4]
 800a268:	f7ff ff3e 	bl	800a0e8 <rcl_send_response>
 800a26c:	b138      	cbz	r0, 800a27e <_rclc_execute.part.0+0x4a>
 800a26e:	9001      	str	r0, [sp, #4]
 800a270:	f000 fbcc 	bl	800aa0c <rcutils_reset_error>
 800a274:	9801      	ldr	r0, [sp, #4]
 800a276:	e002      	b.n	800a27e <_rclc_execute.part.0+0x4a>
 800a278:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a27a:	4798      	blx	r3
 800a27c:	2000      	movs	r0, #0
 800a27e:	b003      	add	sp, #12
 800a280:	bd30      	pop	{r4, r5, pc}
 800a282:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a286:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a288:	b96d      	cbnz	r5, 800a2a6 <_rclc_execute.part.0+0x72>
 800a28a:	4628      	mov	r0, r5
 800a28c:	4798      	blx	r3
 800a28e:	4628      	mov	r0, r5
 800a290:	e7f5      	b.n	800a27e <_rclc_execute.part.0+0x4a>
 800a292:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a296:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a29a:	b1d5      	cbz	r5, 800a2d2 <_rclc_execute.part.0+0x9e>
 800a29c:	6880      	ldr	r0, [r0, #8]
 800a29e:	4798      	blx	r3
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	e7ec      	b.n	800a27e <_rclc_execute.part.0+0x4a>
 800a2a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a2a6:	68a0      	ldr	r0, [r4, #8]
 800a2a8:	4798      	blx	r3
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	b003      	add	sp, #12
 800a2ae:	bd30      	pop	{r4, r5, pc}
 800a2b0:	6840      	ldr	r0, [r0, #4]
 800a2b2:	f004 fec3 	bl	800f03c <rcl_timer_call>
 800a2b6:	f240 3321 	movw	r3, #801	; 0x321
 800a2ba:	4298      	cmp	r0, r3
 800a2bc:	d1d6      	bne.n	800a26c <_rclc_execute.part.0+0x38>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7dd      	b.n	800a27e <_rclc_execute.part.0+0x4a>
 800a2c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a2c4:	6880      	ldr	r0, [r0, #8]
 800a2c6:	f104 0110 	add.w	r1, r4, #16
 800a2ca:	4798      	blx	r3
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	b003      	add	sp, #12
 800a2d0:	bd30      	pop	{r4, r5, pc}
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	4798      	blx	r3
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	e7d1      	b.n	800a27e <_rclc_execute.part.0+0x4a>
 800a2da:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a2dc:	6880      	ldr	r0, [r0, #8]
 800a2de:	4798      	blx	r3
 800a2e0:	f104 0110 	add.w	r1, r4, #16
 800a2e4:	e7be      	b.n	800a264 <_rclc_execute.part.0+0x30>
 800a2e6:	f100 0110 	add.w	r1, r0, #16
 800a2ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a2ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a2ee:	6880      	ldr	r0, [r0, #8]
 800a2f0:	9101      	str	r1, [sp, #4]
 800a2f2:	4798      	blx	r3
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	e7b5      	b.n	800a264 <_rclc_execute.part.0+0x30>
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e7c0      	b.n	800a27e <_rclc_execute.part.0+0x4a>
 800a2fc:	0000      	movs	r0, r0
	...

0800a300 <rclc_executor_init>:
 800a300:	2800      	cmp	r0, #0
 800a302:	d063      	beq.n	800a3cc <rclc_executor_init+0xcc>
 800a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a308:	460f      	mov	r7, r1
 800a30a:	b0ae      	sub	sp, #184	; 0xb8
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d055      	beq.n	800a3bc <rclc_executor_init+0xbc>
 800a310:	4605      	mov	r5, r0
 800a312:	4618      	mov	r0, r3
 800a314:	4616      	mov	r6, r2
 800a316:	4698      	mov	r8, r3
 800a318:	f000 fb54 	bl	800a9c4 <rcutils_allocator_is_valid>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d04d      	beq.n	800a3bc <rclc_executor_init+0xbc>
 800a320:	2e00      	cmp	r6, #0
 800a322:	d04b      	beq.n	800a3bc <rclc_executor_init+0xbc>
 800a324:	492e      	ldr	r1, [pc, #184]	; (800a3e0 <rclc_executor_init+0xe0>)
 800a326:	2280      	movs	r2, #128	; 0x80
 800a328:	a80e      	add	r0, sp, #56	; 0x38
 800a32a:	f008 ff27 	bl	801317c <memcpy>
 800a32e:	2400      	movs	r4, #0
 800a330:	a90e      	add	r1, sp, #56	; 0x38
 800a332:	2280      	movs	r2, #128	; 0x80
 800a334:	4628      	mov	r0, r5
 800a336:	f008 ff21 	bl	801317c <memcpy>
 800a33a:	602f      	str	r7, [r5, #0]
 800a33c:	4668      	mov	r0, sp
 800a33e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800a342:	466f      	mov	r7, sp
 800a344:	f005 f8d4 	bl	800f4f0 <rcl_get_zero_initialized_wait_set>
 800a348:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a34a:	f105 0c14 	add.w	ip, r5, #20
 800a34e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a352:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a354:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a358:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a35a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a35e:	a31e      	add	r3, pc, #120	; (adr r3, 800a3d8 <rclc_executor_init+0xd8>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	f8cc 1000 	str.w	r1, [ip]
 800a36a:	f8d8 7000 	ldr.w	r7, [r8]
 800a36e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a372:	f8c5 8010 	str.w	r8, [r5, #16]
 800a376:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800a37a:	01b0      	lsls	r0, r6, #6
 800a37c:	47b8      	blx	r7
 800a37e:	6068      	str	r0, [r5, #4]
 800a380:	b908      	cbnz	r0, 800a386 <rclc_executor_init+0x86>
 800a382:	e025      	b.n	800a3d0 <rclc_executor_init+0xd0>
 800a384:	6868      	ldr	r0, [r5, #4]
 800a386:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a38a:	4631      	mov	r1, r6
 800a38c:	3401      	adds	r4, #1
 800a38e:	f000 fa03 	bl	800a798 <rclc_executor_handle_init>
 800a392:	42a6      	cmp	r6, r4
 800a394:	d1f6      	bne.n	800a384 <rclc_executor_init+0x84>
 800a396:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a39a:	f000 f9f1 	bl	800a780 <rclc_executor_handle_counters_zero_init>
 800a39e:	686b      	ldr	r3, [r5, #4]
 800a3a0:	4a10      	ldr	r2, [pc, #64]	; (800a3e4 <rclc_executor_init+0xe4>)
 800a3a2:	672a      	str	r2, [r5, #112]	; 0x70
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	6768      	str	r0, [r5, #116]	; 0x74
 800a3a8:	b163      	cbz	r3, 800a3c4 <rclc_executor_init+0xc4>
 800a3aa:	692b      	ldr	r3, [r5, #16]
 800a3ac:	b153      	cbz	r3, 800a3c4 <rclc_executor_init+0xc4>
 800a3ae:	68ab      	ldr	r3, [r5, #8]
 800a3b0:	b143      	cbz	r3, 800a3c4 <rclc_executor_init+0xc4>
 800a3b2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800a3b6:	b02e      	add	sp, #184	; 0xb8
 800a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3bc:	200b      	movs	r0, #11
 800a3be:	b02e      	add	sp, #184	; 0xb8
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	b02e      	add	sp, #184	; 0xb8
 800a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3cc:	200b      	movs	r0, #11
 800a3ce:	4770      	bx	lr
 800a3d0:	200a      	movs	r0, #10
 800a3d2:	e7f4      	b.n	800a3be <rclc_executor_init+0xbe>
 800a3d4:	f3af 8000 	nop.w
 800a3d8:	3b9aca00 	.word	0x3b9aca00
 800a3dc:	00000000 	.word	0x00000000
 800a3e0:	08014a88 	.word	0x08014a88
 800a3e4:	0800a20d 	.word	0x0800a20d

0800a3e8 <rclc_executor_add_service>:
 800a3e8:	b358      	cbz	r0, 800a442 <rclc_executor_add_service+0x5a>
 800a3ea:	b351      	cbz	r1, 800a442 <rclc_executor_add_service+0x5a>
 800a3ec:	b34a      	cbz	r2, 800a442 <rclc_executor_add_service+0x5a>
 800a3ee:	b343      	cbz	r3, 800a442 <rclc_executor_add_service+0x5a>
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	9806      	ldr	r0, [sp, #24]
 800a3f6:	b360      	cbz	r0, 800a452 <rclc_executor_add_service+0x6a>
 800a3f8:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
 800a3fc:	4285      	cmp	r5, r0
 800a3fe:	d301      	bcc.n	800a404 <rclc_executor_add_service+0x1c>
 800a400:	2001      	movs	r0, #1
 800a402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a404:	6867      	ldr	r7, [r4, #4]
 800a406:	9806      	ldr	r0, [sp, #24]
 800a408:	eb07 1685 	add.w	r6, r7, r5, lsl #6
 800a40c:	ea4f 1c85 	mov.w	ip, r5, lsl #6
 800a410:	6071      	str	r1, [r6, #4]
 800a412:	2105      	movs	r1, #5
 800a414:	60b2      	str	r2, [r6, #8]
 800a416:	62b3      	str	r3, [r6, #40]	; 0x28
 800a418:	6330      	str	r0, [r6, #48]	; 0x30
 800a41a:	3501      	adds	r5, #1
 800a41c:	f827 100c 	strh.w	r1, [r7, ip]
 800a420:	2201      	movs	r2, #1
 800a422:	2300      	movs	r3, #0
 800a424:	f104 0714 	add.w	r7, r4, #20
 800a428:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
 800a42c:	62f3      	str	r3, [r6, #44]	; 0x2c
 800a42e:	4638      	mov	r0, r7
 800a430:	60e5      	str	r5, [r4, #12]
 800a432:	f005 f86f 	bl	800f514 <rcl_wait_set_is_valid>
 800a436:	b930      	cbnz	r0, 800a446 <rclc_executor_add_service+0x5e>
 800a438:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a43a:	3301      	adds	r3, #1
 800a43c:	6563      	str	r3, [r4, #84]	; 0x54
 800a43e:	2000      	movs	r0, #0
 800a440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a442:	200b      	movs	r0, #11
 800a444:	4770      	bx	lr
 800a446:	4638      	mov	r0, r7
 800a448:	f005 f86a 	bl	800f520 <rcl_wait_set_fini>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d0f3      	beq.n	800a438 <rclc_executor_add_service+0x50>
 800a450:	e7d7      	b.n	800a402 <rclc_executor_add_service+0x1a>
 800a452:	200b      	movs	r0, #11
 800a454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a456:	bf00      	nop

0800a458 <rclc_executor_prepare>:
 800a458:	2800      	cmp	r0, #0
 800a45a:	d03d      	beq.n	800a4d8 <rclc_executor_prepare+0x80>
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	f100 0814 	add.w	r8, r0, #20
 800a464:	b09a      	sub	sp, #104	; 0x68
 800a466:	4604      	mov	r4, r0
 800a468:	4640      	mov	r0, r8
 800a46a:	f005 f853 	bl	800f514 <rcl_wait_set_is_valid>
 800a46e:	b118      	cbz	r0, 800a478 <rclc_executor_prepare+0x20>
 800a470:	2000      	movs	r0, #0
 800a472:	b01a      	add	sp, #104	; 0x68
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	4640      	mov	r0, r8
 800a47a:	f005 f851 	bl	800f520 <rcl_wait_set_fini>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d127      	bne.n	800a4d2 <rclc_executor_prepare+0x7a>
 800a482:	a80c      	add	r0, sp, #48	; 0x30
 800a484:	ad0c      	add	r5, sp, #48	; 0x30
 800a486:	f005 f833 	bl	800f4f0 <rcl_get_zero_initialized_wait_set>
 800a48a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a48c:	4646      	mov	r6, r8
 800a48e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a492:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a496:	6927      	ldr	r7, [r4, #16]
 800a498:	682d      	ldr	r5, [r5, #0]
 800a49a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a49c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a49e:	6035      	str	r5, [r6, #0]
 800a4a0:	ad04      	add	r5, sp, #16
 800a4a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4a4:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800a4a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a4aa:	6826      	ldr	r6, [r4, #0]
 800a4ac:	6838      	ldr	r0, [r7, #0]
 800a4ae:	6028      	str	r0, [r5, #0]
 800a4b0:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800a4b4:	e9cd 3200 	strd	r3, r2, [sp]
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a4bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a4be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4c0:	f005 fb4c 	bl	800fb5c <rcl_wait_set_init>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d0d4      	beq.n	800a472 <rclc_executor_prepare+0x1a>
 800a4c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4ca:	f000 fa9f 	bl	800aa0c <rcutils_reset_error>
 800a4ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a4d0:	e7cf      	b.n	800a472 <rclc_executor_prepare+0x1a>
 800a4d2:	f000 fa9b 	bl	800aa0c <rcutils_reset_error>
 800a4d6:	e7d4      	b.n	800a482 <rclc_executor_prepare+0x2a>
 800a4d8:	200b      	movs	r0, #11
 800a4da:	4770      	bx	lr

0800a4dc <rclc_executor_spin_some.part.0>:
 800a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	f100 0814 	add.w	r8, r0, #20
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	4692      	mov	sl, r2
 800a4e8:	4699      	mov	r9, r3
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	f7ff ffb4 	bl	800a458 <rclc_executor_prepare>
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	f005 f8e1 	bl	800f6b8 <rcl_wait_set_clear>
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f040 80be 	bne.w	800a67a <rclc_executor_spin_some.part.0+0x19e>
 800a4fe:	68ab      	ldr	r3, [r5, #8]
 800a500:	4604      	mov	r4, r0
 800a502:	b1eb      	cbz	r3, 800a540 <rclc_executor_spin_some.part.0+0x64>
 800a504:	686e      	ldr	r6, [r5, #4]
 800a506:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800a50a:	01a2      	lsls	r2, r4, #6
 800a50c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800a510:	b1b3      	cbz	r3, 800a540 <rclc_executor_spin_some.part.0+0x64>
 800a512:	5cb3      	ldrb	r3, [r6, r2]
 800a514:	2b08      	cmp	r3, #8
 800a516:	f200 80a9 	bhi.w	800a66c <rclc_executor_spin_some.part.0+0x190>
 800a51a:	e8df f003 	tbb	[pc, r3]
 800a51e:	8989      	.short	0x8989
 800a520:	057b7b93 	.word	0x057b7b93
 800a524:	0505      	.short	0x0505
 800a526:	9d          	.byte	0x9d
 800a527:	00          	.byte	0x00
 800a528:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a52c:	4640      	mov	r0, r8
 800a52e:	6849      	ldr	r1, [r1, #4]
 800a530:	f005 fc2a 	bl	800fd88 <rcl_wait_set_add_service>
 800a534:	2800      	cmp	r0, #0
 800a536:	d175      	bne.n	800a624 <rclc_executor_spin_some.part.0+0x148>
 800a538:	68ab      	ldr	r3, [r5, #8]
 800a53a:	3401      	adds	r4, #1
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d3e1      	bcc.n	800a504 <rclc_executor_spin_some.part.0+0x28>
 800a540:	464b      	mov	r3, r9
 800a542:	4652      	mov	r2, sl
 800a544:	4640      	mov	r0, r8
 800a546:	f005 fc4b 	bl	800fde0 <rcl_wait>
 800a54a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 809b 	beq.w	800a68a <rclc_executor_spin_some.part.0+0x1ae>
 800a554:	2b01      	cmp	r3, #1
 800a556:	f040 8089 	bne.w	800a66c <rclc_executor_spin_some.part.0+0x190>
 800a55a:	68ab      	ldr	r3, [r5, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 80ef 	beq.w	800a740 <rclc_executor_spin_some.part.0+0x264>
 800a562:	2400      	movs	r4, #0
 800a564:	4626      	mov	r6, r4
 800a566:	f240 1991 	movw	r9, #401	; 0x191
 800a56a:	e00a      	b.n	800a582 <rclc_executor_spin_some.part.0+0xa6>
 800a56c:	f7ff fdd2 	bl	800a114 <_rclc_check_for_new_data>
 800a570:	4604      	mov	r4, r0
 800a572:	b110      	cbz	r0, 800a57a <rclc_executor_spin_some.part.0+0x9e>
 800a574:	4548      	cmp	r0, r9
 800a576:	f040 8086 	bne.w	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a57a:	68ab      	ldr	r3, [r5, #8]
 800a57c:	429e      	cmp	r6, r3
 800a57e:	f080 80db 	bcs.w	800a738 <rclc_executor_spin_some.part.0+0x25c>
 800a582:	686a      	ldr	r2, [r5, #4]
 800a584:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a588:	4641      	mov	r1, r8
 800a58a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a58e:	3601      	adds	r6, #1
 800a590:	f1bc 0f00 	cmp.w	ip, #0
 800a594:	d1ea      	bne.n	800a56c <rclc_executor_spin_some.part.0+0x90>
 800a596:	4619      	mov	r1, r3
 800a598:	4610      	mov	r0, r2
 800a59a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800a59e:	4798      	blx	r3
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d070      	beq.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a5a4:	68aa      	ldr	r2, [r5, #8]
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d06d      	beq.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	f240 1991 	movw	r9, #401	; 0x191
 800a5b0:	e008      	b.n	800a5c4 <rclc_executor_spin_some.part.0+0xe8>
 800a5b2:	f7ff fdd5 	bl	800a160 <_rclc_take_new_data>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	b108      	cbz	r0, 800a5be <rclc_executor_spin_some.part.0+0xe2>
 800a5ba:	4548      	cmp	r0, r9
 800a5bc:	d163      	bne.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a5be:	68aa      	ldr	r2, [r5, #8]
 800a5c0:	4296      	cmp	r6, r2
 800a5c2:	d208      	bcs.n	800a5d6 <rclc_executor_spin_some.part.0+0xfa>
 800a5c4:	6868      	ldr	r0, [r5, #4]
 800a5c6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800a5ca:	4641      	mov	r1, r8
 800a5cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1ed      	bne.n	800a5b2 <rclc_executor_spin_some.part.0+0xd6>
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	b932      	cbnz	r2, 800a5e8 <rclc_executor_spin_some.part.0+0x10c>
 800a5da:	e054      	b.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a5dc:	2901      	cmp	r1, #1
 800a5de:	d012      	beq.n	800a606 <rclc_executor_spin_some.part.0+0x12a>
 800a5e0:	3601      	adds	r6, #1
 800a5e2:	4296      	cmp	r6, r2
 800a5e4:	d245      	bcs.n	800a672 <rclc_executor_spin_some.part.0+0x196>
 800a5e6:	2400      	movs	r4, #0
 800a5e8:	686b      	ldr	r3, [r5, #4]
 800a5ea:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d046      	beq.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a5f8:	7859      	ldrb	r1, [r3, #1]
 800a5fa:	2900      	cmp	r1, #0
 800a5fc:	d1ee      	bne.n	800a5dc <rclc_executor_spin_some.part.0+0x100>
 800a5fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0ec      	beq.n	800a5e0 <rclc_executor_spin_some.part.0+0x104>
 800a606:	f7ff fe15 	bl	800a234 <_rclc_execute.part.0>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	f040 8096 	bne.w	800a73c <rclc_executor_spin_some.part.0+0x260>
 800a610:	68aa      	ldr	r2, [r5, #8]
 800a612:	e7e5      	b.n	800a5e0 <rclc_executor_spin_some.part.0+0x104>
 800a614:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a618:	4640      	mov	r0, r8
 800a61a:	6849      	ldr	r1, [r1, #4]
 800a61c:	f005 fb88 	bl	800fd30 <rcl_wait_set_add_client>
 800a620:	2800      	cmp	r0, #0
 800a622:	d089      	beq.n	800a538 <rclc_executor_spin_some.part.0+0x5c>
 800a624:	9001      	str	r0, [sp, #4]
 800a626:	f000 f9f1 	bl	800aa0c <rcutils_reset_error>
 800a62a:	9801      	ldr	r0, [sp, #4]
 800a62c:	4607      	mov	r7, r0
 800a62e:	e020      	b.n	800a672 <rclc_executor_spin_some.part.0+0x196>
 800a630:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a634:	4640      	mov	r0, r8
 800a636:	6849      	ldr	r1, [r1, #4]
 800a638:	f005 f812 	bl	800f660 <rcl_wait_set_add_subscription>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f43f af7b 	beq.w	800a538 <rclc_executor_spin_some.part.0+0x5c>
 800a642:	e7ef      	b.n	800a624 <rclc_executor_spin_some.part.0+0x148>
 800a644:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a648:	4640      	mov	r0, r8
 800a64a:	6849      	ldr	r1, [r1, #4]
 800a64c:	f005 fb40 	bl	800fcd0 <rcl_wait_set_add_timer>
 800a650:	2800      	cmp	r0, #0
 800a652:	f43f af71 	beq.w	800a538 <rclc_executor_spin_some.part.0+0x5c>
 800a656:	e7e5      	b.n	800a624 <rclc_executor_spin_some.part.0+0x148>
 800a658:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a65c:	4640      	mov	r0, r8
 800a65e:	6849      	ldr	r1, [r1, #4]
 800a660:	f005 fb0a 	bl	800fc78 <rcl_wait_set_add_guard_condition>
 800a664:	2800      	cmp	r0, #0
 800a666:	f43f af67 	beq.w	800a538 <rclc_executor_spin_some.part.0+0x5c>
 800a66a:	e7db      	b.n	800a624 <rclc_executor_spin_some.part.0+0x148>
 800a66c:	f000 f9ce 	bl	800aa0c <rcutils_reset_error>
 800a670:	2701      	movs	r7, #1
 800a672:	4638      	mov	r0, r7
 800a674:	b003      	add	sp, #12
 800a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67a:	f000 f9c7 	bl	800aa0c <rcutils_reset_error>
 800a67e:	4638      	mov	r0, r7
 800a680:	b003      	add	sp, #12
 800a682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a686:	4627      	mov	r7, r4
 800a688:	e7f3      	b.n	800a672 <rclc_executor_spin_some.part.0+0x196>
 800a68a:	68ab      	ldr	r3, [r5, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d05a      	beq.n	800a746 <rclc_executor_spin_some.part.0+0x26a>
 800a690:	2400      	movs	r4, #0
 800a692:	4626      	mov	r6, r4
 800a694:	f240 1991 	movw	r9, #401	; 0x191
 800a698:	e008      	b.n	800a6ac <rclc_executor_spin_some.part.0+0x1d0>
 800a69a:	f7ff fd3b 	bl	800a114 <_rclc_check_for_new_data>
 800a69e:	4604      	mov	r4, r0
 800a6a0:	b108      	cbz	r0, 800a6a6 <rclc_executor_spin_some.part.0+0x1ca>
 800a6a2:	4548      	cmp	r0, r9
 800a6a4:	d1ef      	bne.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a6a6:	68ab      	ldr	r3, [r5, #8]
 800a6a8:	429e      	cmp	r6, r3
 800a6aa:	d243      	bcs.n	800a734 <rclc_executor_spin_some.part.0+0x258>
 800a6ac:	686a      	ldr	r2, [r5, #4]
 800a6ae:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a6b2:	4641      	mov	r1, r8
 800a6b4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a6b8:	3601      	adds	r6, #1
 800a6ba:	f1bc 0f00 	cmp.w	ip, #0
 800a6be:	d1ec      	bne.n	800a69a <rclc_executor_spin_some.part.0+0x1be>
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800a6c8:	4798      	blx	r3
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d0db      	beq.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a6ce:	68ab      	ldr	r3, [r5, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0d8      	beq.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a6d4:	f04f 0a00 	mov.w	sl, #0
 800a6d8:	f240 1691 	movw	r6, #401	; 0x191
 800a6dc:	f240 2959 	movw	r9, #601	; 0x259
 800a6e0:	e00b      	b.n	800a6fa <rclc_executor_spin_some.part.0+0x21e>
 800a6e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a6e6:	b113      	cbz	r3, 800a6ee <rclc_executor_spin_some.part.0+0x212>
 800a6e8:	f7ff fda4 	bl	800a234 <_rclc_execute.part.0>
 800a6ec:	bb30      	cbnz	r0, 800a73c <rclc_executor_spin_some.part.0+0x260>
 800a6ee:	68ab      	ldr	r3, [r5, #8]
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	459a      	cmp	sl, r3
 800a6f6:	d2bc      	bcs.n	800a672 <rclc_executor_spin_some.part.0+0x196>
 800a6f8:	2400      	movs	r4, #0
 800a6fa:	6868      	ldr	r0, [r5, #4]
 800a6fc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a700:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a704:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0bc      	beq.n	800a686 <rclc_executor_spin_some.part.0+0x1aa>
 800a70c:	4641      	mov	r1, r8
 800a70e:	f7ff fd27 	bl	800a160 <_rclc_take_new_data>
 800a712:	b118      	cbz	r0, 800a71c <rclc_executor_spin_some.part.0+0x240>
 800a714:	42b0      	cmp	r0, r6
 800a716:	d001      	beq.n	800a71c <rclc_executor_spin_some.part.0+0x240>
 800a718:	4548      	cmp	r0, r9
 800a71a:	d10f      	bne.n	800a73c <rclc_executor_spin_some.part.0+0x260>
 800a71c:	6868      	ldr	r0, [r5, #4]
 800a71e:	eb10 000b 	adds.w	r0, r0, fp
 800a722:	d005      	beq.n	800a730 <rclc_executor_spin_some.part.0+0x254>
 800a724:	7843      	ldrb	r3, [r0, #1]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0db      	beq.n	800a6e2 <rclc_executor_spin_some.part.0+0x206>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d1df      	bne.n	800a6ee <rclc_executor_spin_some.part.0+0x212>
 800a72e:	e7db      	b.n	800a6e8 <rclc_executor_spin_some.part.0+0x20c>
 800a730:	270b      	movs	r7, #11
 800a732:	e79e      	b.n	800a672 <rclc_executor_spin_some.part.0+0x196>
 800a734:	686a      	ldr	r2, [r5, #4]
 800a736:	e7c3      	b.n	800a6c0 <rclc_executor_spin_some.part.0+0x1e4>
 800a738:	686a      	ldr	r2, [r5, #4]
 800a73a:	e72c      	b.n	800a596 <rclc_executor_spin_some.part.0+0xba>
 800a73c:	4607      	mov	r7, r0
 800a73e:	e798      	b.n	800a672 <rclc_executor_spin_some.part.0+0x196>
 800a740:	686a      	ldr	r2, [r5, #4]
 800a742:	461c      	mov	r4, r3
 800a744:	e727      	b.n	800a596 <rclc_executor_spin_some.part.0+0xba>
 800a746:	686a      	ldr	r2, [r5, #4]
 800a748:	461c      	mov	r4, r3
 800a74a:	e7b9      	b.n	800a6c0 <rclc_executor_spin_some.part.0+0x1e4>

0800a74c <rclc_executor_spin>:
 800a74c:	b1a8      	cbz	r0, 800a77a <rclc_executor_spin+0x2e>
 800a74e:	b5d0      	push	{r4, r6, r7, lr}
 800a750:	4604      	mov	r4, r0
 800a752:	6820      	ldr	r0, [r4, #0]
 800a754:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800a758:	f003 fc82 	bl	800e060 <rcl_context_is_valid>
 800a75c:	4601      	mov	r1, r0
 800a75e:	4632      	mov	r2, r6
 800a760:	463b      	mov	r3, r7
 800a762:	4620      	mov	r0, r4
 800a764:	b129      	cbz	r1, 800a772 <rclc_executor_spin+0x26>
 800a766:	f7ff feb9 	bl	800a4dc <rclc_executor_spin_some.part.0>
 800a76a:	f030 0302 	bics.w	r3, r0, #2
 800a76e:	d0f0      	beq.n	800a752 <rclc_executor_spin+0x6>
 800a770:	bdd0      	pop	{r4, r6, r7, pc}
 800a772:	f000 f94b 	bl	800aa0c <rcutils_reset_error>
 800a776:	2001      	movs	r0, #1
 800a778:	bdd0      	pop	{r4, r6, r7, pc}
 800a77a:	200b      	movs	r0, #11
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop

0800a780 <rclc_executor_handle_counters_zero_init>:
 800a780:	b140      	cbz	r0, 800a794 <rclc_executor_handle_counters_zero_init+0x14>
 800a782:	2300      	movs	r3, #0
 800a784:	6003      	str	r3, [r0, #0]
 800a786:	6043      	str	r3, [r0, #4]
 800a788:	6083      	str	r3, [r0, #8]
 800a78a:	60c3      	str	r3, [r0, #12]
 800a78c:	6103      	str	r3, [r0, #16]
 800a78e:	6143      	str	r3, [r0, #20]
 800a790:	4618      	mov	r0, r3
 800a792:	4770      	bx	lr
 800a794:	200b      	movs	r0, #11
 800a796:	4770      	bx	lr

0800a798 <rclc_executor_handle_init>:
 800a798:	b178      	cbz	r0, 800a7ba <rclc_executor_handle_init+0x22>
 800a79a:	b430      	push	{r4, r5}
 800a79c:	4603      	mov	r3, r0
 800a79e:	2209      	movs	r2, #9
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	801a      	strh	r2, [r3, #0]
 800a7a8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800a7ac:	bc30      	pop	{r4, r5}
 800a7ae:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800a7b2:	6359      	str	r1, [r3, #52]	; 0x34
 800a7b4:	6318      	str	r0, [r3, #48]	; 0x30
 800a7b6:	8718      	strh	r0, [r3, #56]	; 0x38
 800a7b8:	4770      	bx	lr
 800a7ba:	200b      	movs	r0, #11
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop

0800a7c0 <rclc_support_init>:
 800a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c4:	b086      	sub	sp, #24
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d042      	beq.n	800a850 <rclc_support_init+0x90>
 800a7ca:	461c      	mov	r4, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d03f      	beq.n	800a850 <rclc_support_init+0x90>
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	4690      	mov	r8, r2
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	f003 ff23 	bl	800e620 <rcl_get_zero_initialized_init_options>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800a7e0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	a805      	add	r0, sp, #20
 800a7e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a7ec:	f003 ff1a 	bl	800e624 <rcl_init_options_init>
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	bb38      	cbnz	r0, 800a844 <rclc_support_init+0x84>
 800a7f4:	f003 ff14 	bl	800e620 <rcl_get_zero_initialized_init_options>
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	6030      	str	r0, [r6, #0]
 800a7fc:	a805      	add	r0, sp, #20
 800a7fe:	f003 ff87 	bl	800e710 <rcl_init_options_copy>
 800a802:	4605      	mov	r5, r0
 800a804:	b9c0      	cbnz	r0, 800a838 <rclc_support_init+0x78>
 800a806:	ad02      	add	r5, sp, #8
 800a808:	4628      	mov	r0, r5
 800a80a:	f003 fc1f 	bl	800e04c <rcl_get_zero_initialized_context>
 800a80e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a812:	1d33      	adds	r3, r6, #4
 800a814:	e883 0003 	stmia.w	r3, {r0, r1}
 800a818:	4632      	mov	r2, r6
 800a81a:	4641      	mov	r1, r8
 800a81c:	4638      	mov	r0, r7
 800a81e:	f003 fdf5 	bl	800e40c <rcl_init>
 800a822:	4605      	mov	r5, r0
 800a824:	b940      	cbnz	r0, 800a838 <rclc_support_init+0x78>
 800a826:	60f4      	str	r4, [r6, #12]
 800a828:	4622      	mov	r2, r4
 800a82a:	f106 0110 	add.w	r1, r6, #16
 800a82e:	2003      	movs	r0, #3
 800a830:	f004 fb78 	bl	800ef24 <rcl_clock_init>
 800a834:	4605      	mov	r5, r0
 800a836:	b108      	cbz	r0, 800a83c <rclc_support_init+0x7c>
 800a838:	f000 f8e8 	bl	800aa0c <rcutils_reset_error>
 800a83c:	a805      	add	r0, sp, #20
 800a83e:	f003 ff43 	bl	800e6c8 <rcl_init_options_fini>
 800a842:	b108      	cbz	r0, 800a848 <rclc_support_init+0x88>
 800a844:	f000 f8e2 	bl	800aa0c <rcutils_reset_error>
 800a848:	4628      	mov	r0, r5
 800a84a:	b006      	add	sp, #24
 800a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a850:	250b      	movs	r5, #11
 800a852:	4628      	mov	r0, r5
 800a854:	b006      	add	sp, #24
 800a856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85a:	bf00      	nop

0800a85c <rclc_node_init_default>:
 800a85c:	b3b8      	cbz	r0, 800a8ce <rclc_node_init_default+0x72>
 800a85e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a862:	460d      	mov	r5, r1
 800a864:	b08f      	sub	sp, #60	; 0x3c
 800a866:	b329      	cbz	r1, 800a8b4 <rclc_node_init_default+0x58>
 800a868:	4616      	mov	r6, r2
 800a86a:	b31a      	cbz	r2, 800a8b4 <rclc_node_init_default+0x58>
 800a86c:	461f      	mov	r7, r3
 800a86e:	b30b      	cbz	r3, 800a8b4 <rclc_node_init_default+0x58>
 800a870:	f10d 0810 	add.w	r8, sp, #16
 800a874:	4604      	mov	r4, r0
 800a876:	4640      	mov	r0, r8
 800a878:	f004 f812 	bl	800e8a0 <rcl_get_zero_initialized_node>
 800a87c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a880:	f10d 091c 	add.w	r9, sp, #28
 800a884:	e884 0003 	stmia.w	r4, {r0, r1}
 800a888:	4648      	mov	r0, r9
 800a88a:	f004 f9b3 	bl	800ebf4 <rcl_node_get_default_options>
 800a88e:	4640      	mov	r0, r8
 800a890:	f004 f806 	bl	800e8a0 <rcl_get_zero_initialized_node>
 800a894:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a898:	1d3b      	adds	r3, r7, #4
 800a89a:	f8cd 9000 	str.w	r9, [sp]
 800a89e:	4632      	mov	r2, r6
 800a8a0:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f004 f804 	bl	800e8b4 <rcl_node_init>
 800a8ac:	b930      	cbnz	r0, 800a8bc <rclc_node_init_default+0x60>
 800a8ae:	b00f      	add	sp, #60	; 0x3c
 800a8b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b4:	200b      	movs	r0, #11
 800a8b6:	b00f      	add	sp, #60	; 0x3c
 800a8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8bc:	9003      	str	r0, [sp, #12]
 800a8be:	f000 f8a5 	bl	800aa0c <rcutils_reset_error>
 800a8c2:	f000 f8a3 	bl	800aa0c <rcutils_reset_error>
 800a8c6:	9803      	ldr	r0, [sp, #12]
 800a8c8:	b00f      	add	sp, #60	; 0x3c
 800a8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ce:	200b      	movs	r0, #11
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop

0800a8d4 <rclc_service_init_default>:
 800a8d4:	b368      	cbz	r0, 800a932 <rclc_service_init_default+0x5e>
 800a8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8da:	460d      	mov	r5, r1
 800a8dc:	b09e      	sub	sp, #120	; 0x78
 800a8de:	b321      	cbz	r1, 800a92a <rclc_service_init_default+0x56>
 800a8e0:	4616      	mov	r6, r2
 800a8e2:	b312      	cbz	r2, 800a92a <rclc_service_init_default+0x56>
 800a8e4:	461f      	mov	r7, r3
 800a8e6:	b303      	cbz	r3, 800a92a <rclc_service_init_default+0x56>
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	f7ff fa93 	bl	8009e14 <rcl_get_zero_initialized_service>
 800a8ee:	f10d 0810 	add.w	r8, sp, #16
 800a8f2:	6020      	str	r0, [r4, #0]
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	f7ff fb99 	bl	800a02c <rcl_service_get_default_options>
 800a8fa:	490f      	ldr	r1, [pc, #60]	; (800a938 <rclc_service_init_default+0x64>)
 800a8fc:	2250      	movs	r2, #80	; 0x50
 800a8fe:	4640      	mov	r0, r8
 800a900:	f008 fc3c 	bl	801317c <memcpy>
 800a904:	f8cd 8000 	str.w	r8, [sp]
 800a908:	463b      	mov	r3, r7
 800a90a:	4632      	mov	r2, r6
 800a90c:	4629      	mov	r1, r5
 800a90e:	4620      	mov	r0, r4
 800a910:	f7ff fa86 	bl	8009e20 <rcl_service_init>
 800a914:	b910      	cbnz	r0, 800a91c <rclc_service_init_default+0x48>
 800a916:	b01e      	add	sp, #120	; 0x78
 800a918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a91c:	9003      	str	r0, [sp, #12]
 800a91e:	f000 f875 	bl	800aa0c <rcutils_reset_error>
 800a922:	9803      	ldr	r0, [sp, #12]
 800a924:	b01e      	add	sp, #120	; 0x78
 800a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92a:	200b      	movs	r0, #11
 800a92c:	b01e      	add	sp, #120	; 0x78
 800a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a932:	200b      	movs	r0, #11
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	08014b08 	.word	0x08014b08

0800a93c <__default_zero_allocate>:
 800a93c:	f008 bb94 	b.w	8013068 <calloc>

0800a940 <__default_reallocate>:
 800a940:	f008 bdc6 	b.w	80134d0 <realloc>

0800a944 <__default_deallocate>:
 800a944:	f008 bc12 	b.w	801316c <free>

0800a948 <__default_allocate>:
 800a948:	f008 bc08 	b.w	801315c <malloc>

0800a94c <rcutils_get_zero_initialized_allocator>:
 800a94c:	b470      	push	{r4, r5, r6}
 800a94e:	4d05      	ldr	r5, [pc, #20]	; (800a964 <rcutils_get_zero_initialized_allocator+0x18>)
 800a950:	4606      	mov	r6, r0
 800a952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a954:	4634      	mov	r4, r6
 800a956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	4630      	mov	r0, r6
 800a95e:	bc70      	pop	{r4, r5, r6}
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	08014b58 	.word	0x08014b58

0800a968 <rcutils_set_default_allocator>:
 800a968:	b1a0      	cbz	r0, 800a994 <rcutils_set_default_allocator+0x2c>
 800a96a:	6801      	ldr	r1, [r0, #0]
 800a96c:	b199      	cbz	r1, 800a996 <rcutils_set_default_allocator+0x2e>
 800a96e:	b430      	push	{r4, r5}
 800a970:	6844      	ldr	r4, [r0, #4]
 800a972:	b194      	cbz	r4, 800a99a <rcutils_set_default_allocator+0x32>
 800a974:	68c5      	ldr	r5, [r0, #12]
 800a976:	b15d      	cbz	r5, 800a990 <rcutils_set_default_allocator+0x28>
 800a978:	6883      	ldr	r3, [r0, #8]
 800a97a:	b18b      	cbz	r3, 800a9a0 <rcutils_set_default_allocator+0x38>
 800a97c:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <rcutils_set_default_allocator+0x3c>)
 800a97e:	e9c2 1400 	strd	r1, r4, [r2]
 800a982:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800a986:	2000      	movs	r0, #0
 800a988:	6110      	str	r0, [r2, #16]
 800a98a:	2001      	movs	r0, #1
 800a98c:	bc30      	pop	{r4, r5}
 800a98e:	4770      	bx	lr
 800a990:	4628      	mov	r0, r5
 800a992:	e7fb      	b.n	800a98c <rcutils_set_default_allocator+0x24>
 800a994:	4770      	bx	lr
 800a996:	4608      	mov	r0, r1
 800a998:	4770      	bx	lr
 800a99a:	4620      	mov	r0, r4
 800a99c:	bc30      	pop	{r4, r5}
 800a99e:	4770      	bx	lr
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	e7f3      	b.n	800a98c <rcutils_set_default_allocator+0x24>
 800a9a4:	20000080 	.word	0x20000080

0800a9a8 <rcutils_get_default_allocator>:
 800a9a8:	b470      	push	{r4, r5, r6}
 800a9aa:	4d05      	ldr	r5, [pc, #20]	; (800a9c0 <rcutils_get_default_allocator+0x18>)
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9b0:	4634      	mov	r4, r6
 800a9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	bc70      	pop	{r4, r5, r6}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000080 	.word	0x20000080

0800a9c4 <rcutils_allocator_is_valid>:
 800a9c4:	b158      	cbz	r0, 800a9de <rcutils_allocator_is_valid+0x1a>
 800a9c6:	6803      	ldr	r3, [r0, #0]
 800a9c8:	b143      	cbz	r3, 800a9dc <rcutils_allocator_is_valid+0x18>
 800a9ca:	6843      	ldr	r3, [r0, #4]
 800a9cc:	b133      	cbz	r3, 800a9dc <rcutils_allocator_is_valid+0x18>
 800a9ce:	68c3      	ldr	r3, [r0, #12]
 800a9d0:	b123      	cbz	r3, 800a9dc <rcutils_allocator_is_valid+0x18>
 800a9d2:	6880      	ldr	r0, [r0, #8]
 800a9d4:	3800      	subs	r0, #0
 800a9d6:	bf18      	it	ne
 800a9d8:	2001      	movne	r0, #1
 800a9da:	4770      	bx	lr
 800a9dc:	4618      	mov	r0, r3
 800a9de:	4770      	bx	lr

0800a9e0 <rcutils_get_error_string>:
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <rcutils_get_error_string+0x1c>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	b13b      	cbz	r3, 800a9f6 <rcutils_get_error_string+0x16>
 800a9e6:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <rcutils_get_error_string+0x20>)
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	b90a      	cbnz	r2, 800a9f0 <rcutils_get_error_string+0x10>
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	701a      	strb	r2, [r3, #0]
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <rcutils_get_error_string+0x24>)
 800a9f2:	7818      	ldrb	r0, [r3, #0]
 800a9f4:	4770      	bx	lr
 800a9f6:	4b04      	ldr	r3, [pc, #16]	; (800aa08 <rcutils_get_error_string+0x28>)
 800a9f8:	7818      	ldrb	r0, [r3, #0]
 800a9fa:	4770      	bx	lr
 800a9fc:	2000c070 	.word	0x2000c070
 800aa00:	2000c071 	.word	0x2000c071
 800aa04:	2000c238 	.word	0x2000c238
 800aa08:	08014b6c 	.word	0x08014b6c

0800aa0c <rcutils_reset_error>:
 800aa0c:	b4d0      	push	{r4, r6, r7}
 800aa0e:	4a07      	ldr	r2, [pc, #28]	; (800aa2c <rcutils_reset_error+0x20>)
 800aa10:	4807      	ldr	r0, [pc, #28]	; (800aa30 <rcutils_reset_error+0x24>)
 800aa12:	4c08      	ldr	r4, [pc, #32]	; (800aa34 <rcutils_reset_error+0x28>)
 800aa14:	4908      	ldr	r1, [pc, #32]	; (800aa38 <rcutils_reset_error+0x2c>)
 800aa16:	2300      	movs	r3, #0
 800aa18:	2600      	movs	r6, #0
 800aa1a:	2700      	movs	r7, #0
 800aa1c:	8013      	strh	r3, [r2, #0]
 800aa1e:	7003      	strb	r3, [r0, #0]
 800aa20:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800aa24:	7023      	strb	r3, [r4, #0]
 800aa26:	700b      	strb	r3, [r1, #0]
 800aa28:	bcd0      	pop	{r4, r6, r7}
 800aa2a:	4770      	bx	lr
 800aa2c:	2000c240 	.word	0x2000c240
 800aa30:	2000c238 	.word	0x2000c238
 800aa34:	2000c071 	.word	0x2000c071
 800aa38:	2000c070 	.word	0x2000c070

0800aa3c <rcutils_get_zero_initialized_string_map>:
 800aa3c:	4b01      	ldr	r3, [pc, #4]	; (800aa44 <rcutils_get_zero_initialized_string_map+0x8>)
 800aa3e:	2000      	movs	r0, #0
 800aa40:	6018      	str	r0, [r3, #0]
 800aa42:	4770      	bx	lr
 800aa44:	2000c074 	.word	0x2000c074

0800aa48 <rcutils_string_map_reserve>:
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d061      	beq.n	800ab10 <rcutils_string_map_reserve+0xc8>
 800aa4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa50:	6805      	ldr	r5, [r0, #0]
 800aa52:	b083      	sub	sp, #12
 800aa54:	460c      	mov	r4, r1
 800aa56:	4606      	mov	r6, r0
 800aa58:	b12d      	cbz	r5, 800aa66 <rcutils_string_map_reserve+0x1e>
 800aa5a:	68eb      	ldr	r3, [r5, #12]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d906      	bls.n	800aa6e <rcutils_string_map_reserve+0x26>
 800aa60:	461c      	mov	r4, r3
 800aa62:	2d00      	cmp	r5, #0
 800aa64:	d1f9      	bne.n	800aa5a <rcutils_string_map_reserve+0x12>
 800aa66:	201f      	movs	r0, #31
 800aa68:	b003      	add	sp, #12
 800aa6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa6e:	68ab      	ldr	r3, [r5, #8]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	d049      	beq.n	800ab08 <rcutils_string_map_reserve+0xc0>
 800aa74:	6a2f      	ldr	r7, [r5, #32]
 800aa76:	2c00      	cmp	r4, #0
 800aa78:	d035      	beq.n	800aae6 <rcutils_string_map_reserve+0x9e>
 800aa7a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800aa7e:	d245      	bcs.n	800ab0c <rcutils_string_map_reserve+0xc4>
 800aa80:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800aa84:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800aa88:	6828      	ldr	r0, [r5, #0]
 800aa8a:	4641      	mov	r1, r8
 800aa8c:	463a      	mov	r2, r7
 800aa8e:	47c8      	blx	r9
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d03b      	beq.n	800ab0c <rcutils_string_map_reserve+0xc4>
 800aa94:	6833      	ldr	r3, [r6, #0]
 800aa96:	463a      	mov	r2, r7
 800aa98:	6018      	str	r0, [r3, #0]
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	6858      	ldr	r0, [r3, #4]
 800aa9e:	47c8      	blx	r9
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d033      	beq.n	800ab0c <rcutils_string_map_reserve+0xc4>
 800aaa4:	6835      	ldr	r5, [r6, #0]
 800aaa6:	68ab      	ldr	r3, [r5, #8]
 800aaa8:	6068      	str	r0, [r5, #4]
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	d227      	bcs.n	800aafe <rcutils_string_map_reserve+0xb6>
 800aaae:	682a      	ldr	r2, [r5, #0]
 800aab0:	eb00 0108 	add.w	r1, r0, r8
 800aab4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800aab8:	428f      	cmp	r7, r1
 800aaba:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800aabe:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800aac2:	d203      	bcs.n	800aacc <rcutils_string_map_reserve+0x84>
 800aac4:	eb02 0108 	add.w	r1, r2, r8
 800aac8:	428e      	cmp	r6, r1
 800aaca:	d323      	bcc.n	800ab14 <rcutils_string_map_reserve+0xcc>
 800aacc:	1ae3      	subs	r3, r4, r3
 800aace:	009a      	lsls	r2, r3, #2
 800aad0:	4638      	mov	r0, r7
 800aad2:	2100      	movs	r1, #0
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	f008 fb79 	bl	80131cc <memset>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	4630      	mov	r0, r6
 800aade:	2100      	movs	r1, #0
 800aae0:	f008 fb74 	bl	80131cc <memset>
 800aae4:	e00b      	b.n	800aafe <rcutils_string_map_reserve+0xb6>
 800aae6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800aaea:	6828      	ldr	r0, [r5, #0]
 800aaec:	4639      	mov	r1, r7
 800aaee:	47c0      	blx	r8
 800aaf0:	6833      	ldr	r3, [r6, #0]
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	6858      	ldr	r0, [r3, #4]
 800aaf6:	601c      	str	r4, [r3, #0]
 800aaf8:	47c0      	blx	r8
 800aafa:	6835      	ldr	r5, [r6, #0]
 800aafc:	606c      	str	r4, [r5, #4]
 800aafe:	2000      	movs	r0, #0
 800ab00:	60ac      	str	r4, [r5, #8]
 800ab02:	b003      	add	sp, #12
 800ab04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab08:	2000      	movs	r0, #0
 800ab0a:	e7ad      	b.n	800aa68 <rcutils_string_map_reserve+0x20>
 800ab0c:	200a      	movs	r0, #10
 800ab0e:	e7ab      	b.n	800aa68 <rcutils_string_map_reserve+0x20>
 800ab10:	200b      	movs	r0, #11
 800ab12:	4770      	bx	lr
 800ab14:	1f13      	subs	r3, r2, #4
 800ab16:	f1ac 0c04 	sub.w	ip, ip, #4
 800ab1a:	4498      	add	r8, r3
 800ab1c:	4460      	add	r0, ip
 800ab1e:	4462      	add	r2, ip
 800ab20:	2300      	movs	r3, #0
 800ab22:	f842 3f04 	str.w	r3, [r2, #4]!
 800ab26:	4542      	cmp	r2, r8
 800ab28:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab2c:	d1f9      	bne.n	800ab22 <rcutils_string_map_reserve+0xda>
 800ab2e:	e7e6      	b.n	800aafe <rcutils_string_map_reserve+0xb6>

0800ab30 <rcutils_string_map_init>:
 800ab30:	b082      	sub	sp, #8
 800ab32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab34:	460e      	mov	r6, r1
 800ab36:	a906      	add	r1, sp, #24
 800ab38:	e881 000c 	stmia.w	r1, {r2, r3}
 800ab3c:	b380      	cbz	r0, 800aba0 <rcutils_string_map_init+0x70>
 800ab3e:	6807      	ldr	r7, [r0, #0]
 800ab40:	4604      	mov	r4, r0
 800ab42:	b12f      	cbz	r7, 800ab50 <rcutils_string_map_init+0x20>
 800ab44:	251e      	movs	r5, #30
 800ab46:	4628      	mov	r0, r5
 800ab48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab4c:	b002      	add	sp, #8
 800ab4e:	4770      	bx	lr
 800ab50:	a806      	add	r0, sp, #24
 800ab52:	f7ff ff37 	bl	800a9c4 <rcutils_allocator_is_valid>
 800ab56:	b318      	cbz	r0, 800aba0 <rcutils_string_map_init+0x70>
 800ab58:	9b06      	ldr	r3, [sp, #24]
 800ab5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab5c:	2024      	movs	r0, #36	; 0x24
 800ab5e:	4798      	blx	r3
 800ab60:	4605      	mov	r5, r0
 800ab62:	6020      	str	r0, [r4, #0]
 800ab64:	b310      	cbz	r0, 800abac <rcutils_string_map_init+0x7c>
 800ab66:	f10d 0e18 	add.w	lr, sp, #24
 800ab6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab6e:	f105 0c10 	add.w	ip, r5, #16
 800ab72:	e9c5 7700 	strd	r7, r7, [r5]
 800ab76:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800ab7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab7e:	f8de 3000 	ldr.w	r3, [lr]
 800ab82:	f8cc 3000 	str.w	r3, [ip]
 800ab86:	4631      	mov	r1, r6
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f7ff ff5d 	bl	800aa48 <rcutils_string_map_reserve>
 800ab8e:	4605      	mov	r5, r0
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0d8      	beq.n	800ab46 <rcutils_string_map_init+0x16>
 800ab94:	9b07      	ldr	r3, [sp, #28]
 800ab96:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab98:	6820      	ldr	r0, [r4, #0]
 800ab9a:	4798      	blx	r3
 800ab9c:	6027      	str	r7, [r4, #0]
 800ab9e:	e7d2      	b.n	800ab46 <rcutils_string_map_init+0x16>
 800aba0:	250b      	movs	r5, #11
 800aba2:	4628      	mov	r0, r5
 800aba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aba8:	b002      	add	sp, #8
 800abaa:	4770      	bx	lr
 800abac:	250a      	movs	r5, #10
 800abae:	e7ca      	b.n	800ab46 <rcutils_string_map_init+0x16>

0800abb0 <rcutils_string_map_fini>:
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d039      	beq.n	800ac2e <rcutils_string_map_fini+0x7e>
 800abba:	6804      	ldr	r4, [r0, #0]
 800abbc:	4606      	mov	r6, r0
 800abbe:	2c00      	cmp	r4, #0
 800abc0:	d031      	beq.n	800ac26 <rcutils_string_map_fini+0x76>
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	b323      	cbz	r3, 800ac10 <rcutils_string_map_fini+0x60>
 800abc6:	2500      	movs	r5, #0
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	46a8      	mov	r8, r5
 800abcc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800abd0:	b1d8      	cbz	r0, 800ac0a <rcutils_string_map_fini+0x5a>
 800abd2:	6a21      	ldr	r1, [r4, #32]
 800abd4:	6967      	ldr	r7, [r4, #20]
 800abd6:	9101      	str	r1, [sp, #4]
 800abd8:	47b8      	blx	r7
 800abda:	e9d4 2300 	ldrd	r2, r3, [r4]
 800abde:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800abe2:	9901      	ldr	r1, [sp, #4]
 800abe4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abe8:	47b8      	blx	r7
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	6862      	ldr	r2, [r4, #4]
 800abee:	3b01      	subs	r3, #1
 800abf0:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800abf4:	60e3      	str	r3, [r4, #12]
 800abf6:	6834      	ldr	r4, [r6, #0]
 800abf8:	68a3      	ldr	r3, [r4, #8]
 800abfa:	3501      	adds	r5, #1
 800abfc:	429d      	cmp	r5, r3
 800abfe:	d207      	bcs.n	800ac10 <rcutils_string_map_fini+0x60>
 800ac00:	6822      	ldr	r2, [r4, #0]
 800ac02:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d1e3      	bne.n	800abd2 <rcutils_string_map_fini+0x22>
 800ac0a:	3501      	adds	r5, #1
 800ac0c:	429d      	cmp	r5, r3
 800ac0e:	d3dd      	bcc.n	800abcc <rcutils_string_map_fini+0x1c>
 800ac10:	2100      	movs	r1, #0
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7ff ff18 	bl	800aa48 <rcutils_string_map_reserve>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	b920      	cbnz	r0, 800ac26 <rcutils_string_map_fini+0x76>
 800ac1c:	6830      	ldr	r0, [r6, #0]
 800ac1e:	6943      	ldr	r3, [r0, #20]
 800ac20:	6a01      	ldr	r1, [r0, #32]
 800ac22:	4798      	blx	r3
 800ac24:	6034      	str	r4, [r6, #0]
 800ac26:	4620      	mov	r0, r4
 800ac28:	b002      	add	sp, #8
 800ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac2e:	240b      	movs	r4, #11
 800ac30:	4620      	mov	r0, r4
 800ac32:	b002      	add	sp, #8
 800ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac38 <rcutils_string_map_getn>:
 800ac38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	b308      	cbz	r0, 800ac84 <rcutils_string_map_getn+0x4c>
 800ac40:	6804      	ldr	r4, [r0, #0]
 800ac42:	b304      	cbz	r4, 800ac86 <rcutils_string_map_getn+0x4e>
 800ac44:	460d      	mov	r5, r1
 800ac46:	b1e9      	cbz	r1, 800ac84 <rcutils_string_map_getn+0x4c>
 800ac48:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800ac4c:	6827      	ldr	r7, [r4, #0]
 800ac4e:	f1b9 0f00 	cmp.w	r9, #0
 800ac52:	d017      	beq.n	800ac84 <rcutils_string_map_getn+0x4c>
 800ac54:	4690      	mov	r8, r2
 800ac56:	3f04      	subs	r7, #4
 800ac58:	2600      	movs	r6, #0
 800ac5a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ac5e:	9101      	str	r1, [sp, #4]
 800ac60:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ac64:	4608      	mov	r0, r1
 800ac66:	3601      	adds	r6, #1
 800ac68:	b151      	cbz	r1, 800ac80 <rcutils_string_map_getn+0x48>
 800ac6a:	f7f5 fadb 	bl	8000224 <strlen>
 800ac6e:	4540      	cmp	r0, r8
 800ac70:	4602      	mov	r2, r0
 800ac72:	9901      	ldr	r1, [sp, #4]
 800ac74:	bf38      	it	cc
 800ac76:	4642      	movcc	r2, r8
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f008 fc8a 	bl	8013592 <strncmp>
 800ac7e:	b130      	cbz	r0, 800ac8e <rcutils_string_map_getn+0x56>
 800ac80:	45b1      	cmp	r9, r6
 800ac82:	d1ea      	bne.n	800ac5a <rcutils_string_map_getn+0x22>
 800ac84:	2400      	movs	r4, #0
 800ac86:	4620      	mov	r0, r4
 800ac88:	b002      	add	sp, #8
 800ac8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8e:	6863      	ldr	r3, [r4, #4]
 800ac90:	f853 400a 	ldr.w	r4, [r3, sl]
 800ac94:	4620      	mov	r0, r4
 800ac96:	b002      	add	sp, #8
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ac9c <rcutils_system_time_now>:
 800ac9c:	b310      	cbz	r0, 800ace4 <rcutils_system_time_now+0x48>
 800ac9e:	b570      	push	{r4, r5, r6, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	4669      	mov	r1, sp
 800aca4:	4604      	mov	r4, r0
 800aca6:	2001      	movs	r0, #1
 800aca8:	f7f6 fc8e 	bl	80015c8 <clock_gettime>
 800acac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f171 0300 	sbcs.w	r3, r1, #0
 800acb6:	db12      	blt.n	800acde <rcutils_system_time_now+0x42>
 800acb8:	9d02      	ldr	r5, [sp, #8]
 800acba:	2d00      	cmp	r5, #0
 800acbc:	db0c      	blt.n	800acd8 <rcutils_system_time_now+0x3c>
 800acbe:	4e0a      	ldr	r6, [pc, #40]	; (800ace8 <rcutils_system_time_now+0x4c>)
 800acc0:	fba0 2306 	umull	r2, r3, r0, r6
 800acc4:	1952      	adds	r2, r2, r5
 800acc6:	fb06 3301 	mla	r3, r6, r1, r3
 800acca:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800acce:	2000      	movs	r0, #0
 800acd0:	e9c4 2300 	strd	r2, r3, [r4]
 800acd4:	b004      	add	sp, #16
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	ea50 0301 	orrs.w	r3, r0, r1
 800acdc:	d1ef      	bne.n	800acbe <rcutils_system_time_now+0x22>
 800acde:	2002      	movs	r0, #2
 800ace0:	b004      	add	sp, #16
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	200b      	movs	r0, #11
 800ace6:	4770      	bx	lr
 800ace8:	3b9aca00 	.word	0x3b9aca00

0800acec <rcutils_steady_time_now>:
 800acec:	b310      	cbz	r0, 800ad34 <rcutils_steady_time_now+0x48>
 800acee:	b570      	push	{r4, r5, r6, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	4669      	mov	r1, sp
 800acf4:	4604      	mov	r4, r0
 800acf6:	2000      	movs	r0, #0
 800acf8:	f7f6 fc66 	bl	80015c8 <clock_gettime>
 800acfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad00:	2800      	cmp	r0, #0
 800ad02:	f171 0300 	sbcs.w	r3, r1, #0
 800ad06:	db12      	blt.n	800ad2e <rcutils_steady_time_now+0x42>
 800ad08:	9d02      	ldr	r5, [sp, #8]
 800ad0a:	2d00      	cmp	r5, #0
 800ad0c:	db0c      	blt.n	800ad28 <rcutils_steady_time_now+0x3c>
 800ad0e:	4e0a      	ldr	r6, [pc, #40]	; (800ad38 <rcutils_steady_time_now+0x4c>)
 800ad10:	fba0 2306 	umull	r2, r3, r0, r6
 800ad14:	1952      	adds	r2, r2, r5
 800ad16:	fb06 3301 	mla	r3, r6, r1, r3
 800ad1a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e9c4 2300 	strd	r2, r3, [r4]
 800ad24:	b004      	add	sp, #16
 800ad26:	bd70      	pop	{r4, r5, r6, pc}
 800ad28:	ea50 0301 	orrs.w	r3, r0, r1
 800ad2c:	d1ef      	bne.n	800ad0e <rcutils_steady_time_now+0x22>
 800ad2e:	2002      	movs	r0, #2
 800ad30:	b004      	add	sp, #16
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	200b      	movs	r0, #11
 800ad36:	4770      	bx	lr
 800ad38:	3b9aca00 	.word	0x3b9aca00

0800ad3c <rmw_validate_full_topic_name>:
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d062      	beq.n	800ae06 <rmw_validate_full_topic_name+0xca>
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	460d      	mov	r5, r1
 800ad46:	2900      	cmp	r1, #0
 800ad48:	d05f      	beq.n	800ae0a <rmw_validate_full_topic_name+0xce>
 800ad4a:	4616      	mov	r6, r2
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	f7f5 fa69 	bl	8000224 <strlen>
 800ad52:	b148      	cbz	r0, 800ad68 <rmw_validate_full_topic_name+0x2c>
 800ad54:	7823      	ldrb	r3, [r4, #0]
 800ad56:	2b2f      	cmp	r3, #47	; 0x2f
 800ad58:	d00d      	beq.n	800ad76 <rmw_validate_full_topic_name+0x3a>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	b13e      	cbz	r6, 800ad70 <rmw_validate_full_topic_name+0x34>
 800ad60:	2000      	movs	r0, #0
 800ad62:	6030      	str	r0, [r6, #0]
 800ad64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad68:	2301      	movs	r3, #1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	d1f7      	bne.n	800ad60 <rmw_validate_full_topic_name+0x24>
 800ad70:	2000      	movs	r0, #0
 800ad72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad76:	1e47      	subs	r7, r0, #1
 800ad78:	5de3      	ldrb	r3, [r4, r7]
 800ad7a:	2b2f      	cmp	r3, #47	; 0x2f
 800ad7c:	d047      	beq.n	800ae0e <rmw_validate_full_topic_name+0xd2>
 800ad7e:	1e63      	subs	r3, r4, #1
 800ad80:	eb03 0900 	add.w	r9, r3, r0
 800ad84:	f1c4 0e01 	rsb	lr, r4, #1
 800ad88:	eb0e 0803 	add.w	r8, lr, r3
 800ad8c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ad90:	f021 0220 	bic.w	r2, r1, #32
 800ad94:	3a41      	subs	r2, #65	; 0x41
 800ad96:	2a19      	cmp	r2, #25
 800ad98:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800ad9c:	d90c      	bls.n	800adb8 <rmw_validate_full_topic_name+0x7c>
 800ad9e:	295f      	cmp	r1, #95	; 0x5f
 800ada0:	d00a      	beq.n	800adb8 <rmw_validate_full_topic_name+0x7c>
 800ada2:	f1bc 0f0a 	cmp.w	ip, #10
 800ada6:	d907      	bls.n	800adb8 <rmw_validate_full_topic_name+0x7c>
 800ada8:	2304      	movs	r3, #4
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	2e00      	cmp	r6, #0
 800adae:	d0df      	beq.n	800ad70 <rmw_validate_full_topic_name+0x34>
 800adb0:	f8c6 8000 	str.w	r8, [r6]
 800adb4:	2000      	movs	r0, #0
 800adb6:	e7d5      	b.n	800ad64 <rmw_validate_full_topic_name+0x28>
 800adb8:	454b      	cmp	r3, r9
 800adba:	d1e5      	bne.n	800ad88 <rmw_validate_full_topic_name+0x4c>
 800adbc:	f8df e084 	ldr.w	lr, [pc, #132]	; 800ae44 <rmw_validate_full_topic_name+0x108>
 800adc0:	2300      	movs	r3, #0
 800adc2:	f107 0801 	add.w	r8, r7, #1
 800adc6:	e005      	b.n	800add4 <rmw_validate_full_topic_name+0x98>
 800adc8:	4611      	mov	r1, r2
 800adca:	4288      	cmp	r0, r1
 800adcc:	4613      	mov	r3, r2
 800adce:	f104 0401 	add.w	r4, r4, #1
 800add2:	d925      	bls.n	800ae20 <rmw_validate_full_topic_name+0xe4>
 800add4:	429f      	cmp	r7, r3
 800add6:	f103 0201 	add.w	r2, r3, #1
 800adda:	d01e      	beq.n	800ae1a <rmw_validate_full_topic_name+0xde>
 800addc:	7821      	ldrb	r1, [r4, #0]
 800adde:	292f      	cmp	r1, #47	; 0x2f
 800ade0:	d1f2      	bne.n	800adc8 <rmw_validate_full_topic_name+0x8c>
 800ade2:	f894 c001 	ldrb.w	ip, [r4, #1]
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800adec:	4611      	mov	r1, r2
 800adee:	d024      	beq.n	800ae3a <rmw_validate_full_topic_name+0xfe>
 800adf0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800adf4:	075b      	lsls	r3, r3, #29
 800adf6:	d5e8      	bpl.n	800adca <rmw_validate_full_topic_name+0x8e>
 800adf8:	2306      	movs	r3, #6
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	2e00      	cmp	r6, #0
 800adfe:	d0b7      	beq.n	800ad70 <rmw_validate_full_topic_name+0x34>
 800ae00:	6032      	str	r2, [r6, #0]
 800ae02:	2000      	movs	r0, #0
 800ae04:	e7ae      	b.n	800ad64 <rmw_validate_full_topic_name+0x28>
 800ae06:	200b      	movs	r0, #11
 800ae08:	4770      	bx	lr
 800ae0a:	200b      	movs	r0, #11
 800ae0c:	e7aa      	b.n	800ad64 <rmw_validate_full_topic_name+0x28>
 800ae0e:	2303      	movs	r3, #3
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	d0ac      	beq.n	800ad70 <rmw_validate_full_topic_name+0x34>
 800ae16:	6037      	str	r7, [r6, #0]
 800ae18:	e7aa      	b.n	800ad70 <rmw_validate_full_topic_name+0x34>
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	1c7a      	adds	r2, r7, #1
 800ae1e:	e7d4      	b.n	800adca <rmw_validate_full_topic_name+0x8e>
 800ae20:	28f7      	cmp	r0, #247	; 0xf7
 800ae22:	d802      	bhi.n	800ae2a <rmw_validate_full_topic_name+0xee>
 800ae24:	2000      	movs	r0, #0
 800ae26:	6028      	str	r0, [r5, #0]
 800ae28:	e79c      	b.n	800ad64 <rmw_validate_full_topic_name+0x28>
 800ae2a:	2307      	movs	r3, #7
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d09e      	beq.n	800ad70 <rmw_validate_full_topic_name+0x34>
 800ae32:	23f6      	movs	r3, #246	; 0xf6
 800ae34:	6033      	str	r3, [r6, #0]
 800ae36:	2000      	movs	r0, #0
 800ae38:	e794      	b.n	800ad64 <rmw_validate_full_topic_name+0x28>
 800ae3a:	2305      	movs	r3, #5
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	d1de      	bne.n	800ae00 <rmw_validate_full_topic_name+0xc4>
 800ae42:	e795      	b.n	800ad70 <rmw_validate_full_topic_name+0x34>
 800ae44:	080152a1 	.word	0x080152a1

0800ae48 <rmw_uros_set_custom_transport>:
 800ae48:	b470      	push	{r4, r5, r6}
 800ae4a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ae4e:	b162      	cbz	r2, 800ae6a <rmw_uros_set_custom_transport+0x22>
 800ae50:	b15b      	cbz	r3, 800ae6a <rmw_uros_set_custom_transport+0x22>
 800ae52:	b155      	cbz	r5, 800ae6a <rmw_uros_set_custom_transport+0x22>
 800ae54:	b14e      	cbz	r6, 800ae6a <rmw_uros_set_custom_transport+0x22>
 800ae56:	4c06      	ldr	r4, [pc, #24]	; (800ae70 <rmw_uros_set_custom_transport+0x28>)
 800ae58:	7020      	strb	r0, [r4, #0]
 800ae5a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ae5e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ae62:	6166      	str	r6, [r4, #20]
 800ae64:	2000      	movs	r0, #0
 800ae66:	bc70      	pop	{r4, r5, r6}
 800ae68:	4770      	bx	lr
 800ae6a:	200b      	movs	r0, #11
 800ae6c:	bc70      	pop	{r4, r5, r6}
 800ae6e:	4770      	bx	lr
 800ae70:	2000c250 	.word	0x2000c250

0800ae74 <rmw_take_request>:
 800ae74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae78:	4605      	mov	r5, r0
 800ae7a:	6800      	ldr	r0, [r0, #0]
 800ae7c:	b089      	sub	sp, #36	; 0x24
 800ae7e:	460c      	mov	r4, r1
 800ae80:	4690      	mov	r8, r2
 800ae82:	461e      	mov	r6, r3
 800ae84:	b128      	cbz	r0, 800ae92 <rmw_take_request+0x1e>
 800ae86:	4b28      	ldr	r3, [pc, #160]	; (800af28 <rmw_take_request+0xb4>)
 800ae88:	6819      	ldr	r1, [r3, #0]
 800ae8a:	f7f5 f9c1 	bl	8000210 <strcmp>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d146      	bne.n	800af20 <rmw_take_request+0xac>
 800ae92:	b10e      	cbz	r6, 800ae98 <rmw_take_request+0x24>
 800ae94:	2300      	movs	r3, #0
 800ae96:	7033      	strb	r3, [r6, #0]
 800ae98:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800ae9c:	f000 fc30 	bl	800b700 <rmw_uxrce_clean_expired_static_input_buffer>
 800aea0:	4648      	mov	r0, r9
 800aea2:	f000 fc03 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 800aea6:	4607      	mov	r7, r0
 800aea8:	b3b0      	cbz	r0, 800af18 <rmw_take_request+0xa4>
 800aeaa:	68c5      	ldr	r5, [r0, #12]
 800aeac:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 800aeb0:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 800aeb4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 800aeb8:	7423      	strb	r3, [r4, #16]
 800aeba:	e9c4 1208 	strd	r1, r2, [r4, #32]
 800aebe:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 800aec2:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 800aec6:	74e2      	strb	r2, [r4, #19]
 800aec8:	f8a4 3011 	strh.w	r3, [r4, #17]
 800aecc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 800aed0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 800aed4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 800aed8:	61e1      	str	r1, [r4, #28]
 800aeda:	6162      	str	r2, [r4, #20]
 800aedc:	61a3      	str	r3, [r4, #24]
 800aede:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	4798      	blx	r3
 800aee6:	6844      	ldr	r4, [r0, #4]
 800aee8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 800aeec:	f105 0110 	add.w	r1, r5, #16
 800aef0:	4668      	mov	r0, sp
 800aef2:	f7fe ff1f 	bl	8009d34 <ucdr_init_buffer>
 800aef6:	68e3      	ldr	r3, [r4, #12]
 800aef8:	4641      	mov	r1, r8
 800aefa:	4668      	mov	r0, sp
 800aefc:	4798      	blx	r3
 800aefe:	4639      	mov	r1, r7
 800af00:	4604      	mov	r4, r0
 800af02:	480a      	ldr	r0, [pc, #40]	; (800af2c <rmw_take_request+0xb8>)
 800af04:	f005 fc0a 	bl	801071c <put_memory>
 800af08:	b106      	cbz	r6, 800af0c <rmw_take_request+0x98>
 800af0a:	7034      	strb	r4, [r6, #0]
 800af0c:	f084 0001 	eor.w	r0, r4, #1
 800af10:	b2c0      	uxtb	r0, r0
 800af12:	b009      	add	sp, #36	; 0x24
 800af14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af18:	2001      	movs	r0, #1
 800af1a:	b009      	add	sp, #36	; 0x24
 800af1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af20:	200c      	movs	r0, #12
 800af22:	b009      	add	sp, #36	; 0x24
 800af24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af28:	08015084 	.word	0x08015084
 800af2c:	2000c270 	.word	0x2000c270

0800af30 <rmw_send_response>:
 800af30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af32:	4605      	mov	r5, r0
 800af34:	6800      	ldr	r0, [r0, #0]
 800af36:	b091      	sub	sp, #68	; 0x44
 800af38:	460c      	mov	r4, r1
 800af3a:	4617      	mov	r7, r2
 800af3c:	b128      	cbz	r0, 800af4a <rmw_send_response+0x1a>
 800af3e:	4b2a      	ldr	r3, [pc, #168]	; (800afe8 <rmw_send_response+0xb8>)
 800af40:	6819      	ldr	r1, [r3, #0]
 800af42:	f7f5 f965 	bl	8000210 <strcmp>
 800af46:	2800      	cmp	r0, #0
 800af48:	d143      	bne.n	800afd2 <rmw_send_response+0xa2>
 800af4a:	4623      	mov	r3, r4
 800af4c:	4626      	mov	r6, r4
 800af4e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800af52:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 800af56:	6859      	ldr	r1, [r3, #4]
 800af58:	686d      	ldr	r5, [r5, #4]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	78b3      	ldrb	r3, [r6, #2]
 800af5e:	f894 c000 	ldrb.w	ip, [r4]
 800af62:	6966      	ldr	r6, [r4, #20]
 800af64:	f88d 3016 	strb.w	r3, [sp, #22]
 800af68:	ab02      	add	r3, sp, #8
 800af6a:	f8ad e014 	strh.w	lr, [sp, #20]
 800af6e:	f88d c017 	strb.w	ip, [sp, #23]
 800af72:	9606      	str	r6, [sp, #24]
 800af74:	c307      	stmia	r3!, {r0, r1, r2}
 800af76:	696b      	ldr	r3, [r5, #20]
 800af78:	6922      	ldr	r2, [r4, #16]
 800af7a:	9207      	str	r2, [sp, #28]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	6fae      	ldr	r6, [r5, #120]	; 0x78
 800af80:	4798      	blx	r3
 800af82:	4603      	mov	r3, r0
 800af84:	4638      	mov	r0, r7
 800af86:	685c      	ldr	r4, [r3, #4]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	4798      	blx	r3
 800af8c:	6933      	ldr	r3, [r6, #16]
 800af8e:	3018      	adds	r0, #24
 800af90:	9000      	str	r0, [sp, #0]
 800af92:	692a      	ldr	r2, [r5, #16]
 800af94:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800af96:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800af9a:	ab08      	add	r3, sp, #32
 800af9c:	f002 f980 	bl	800d2a0 <uxr_prepare_output_stream>
 800afa0:	b910      	cbnz	r0, 800afa8 <rmw_send_response+0x78>
 800afa2:	2001      	movs	r0, #1
 800afa4:	b011      	add	sp, #68	; 0x44
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	a902      	add	r1, sp, #8
 800afaa:	a808      	add	r0, sp, #32
 800afac:	f002 ffbc 	bl	800df28 <uxr_serialize_SampleIdentity>
 800afb0:	68a3      	ldr	r3, [r4, #8]
 800afb2:	a908      	add	r1, sp, #32
 800afb4:	4638      	mov	r0, r7
 800afb6:	4798      	blx	r3
 800afb8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 800afbc:	6930      	ldr	r0, [r6, #16]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d00a      	beq.n	800afd8 <rmw_send_response+0xa8>
 800afc2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800afc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800afc8:	f001 fbec 	bl	800c7a4 <uxr_run_session_until_confirm_delivery>
 800afcc:	2000      	movs	r0, #0
 800afce:	b011      	add	sp, #68	; 0x44
 800afd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd2:	200c      	movs	r0, #12
 800afd4:	b011      	add	sp, #68	; 0x44
 800afd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800afdc:	f001 f826 	bl	800c02c <uxr_flash_output_streams>
 800afe0:	2000      	movs	r0, #0
 800afe2:	b011      	add	sp, #68	; 0x44
 800afe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe6:	bf00      	nop
 800afe8:	08015084 	.word	0x08015084

0800afec <rmw_take_response>:
 800afec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aff0:	4604      	mov	r4, r0
 800aff2:	6800      	ldr	r0, [r0, #0]
 800aff4:	b089      	sub	sp, #36	; 0x24
 800aff6:	4688      	mov	r8, r1
 800aff8:	4617      	mov	r7, r2
 800affa:	461d      	mov	r5, r3
 800affc:	b120      	cbz	r0, 800b008 <rmw_take_response+0x1c>
 800affe:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <rmw_take_response+0x90>)
 800b000:	6819      	ldr	r1, [r3, #0]
 800b002:	f7f5 f905 	bl	8000210 <strcmp>
 800b006:	bb88      	cbnz	r0, 800b06c <rmw_take_response+0x80>
 800b008:	b10d      	cbz	r5, 800b00e <rmw_take_response+0x22>
 800b00a:	2300      	movs	r3, #0
 800b00c:	702b      	strb	r3, [r5, #0]
 800b00e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b012:	f000 fb75 	bl	800b700 <rmw_uxrce_clean_expired_static_input_buffer>
 800b016:	4648      	mov	r0, r9
 800b018:	f000 fb48 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 800b01c:	4606      	mov	r6, r0
 800b01e:	b348      	cbz	r0, 800b074 <rmw_take_response+0x88>
 800b020:	68c4      	ldr	r4, [r0, #12]
 800b022:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800b026:	f604 0328 	addw	r3, r4, #2088	; 0x828
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	68c9      	ldr	r1, [r1, #12]
 800b030:	e9c8 2308 	strd	r2, r3, [r8, #32]
 800b034:	4788      	blx	r1
 800b036:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b03a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 800b03e:	f104 0110 	add.w	r1, r4, #16
 800b042:	4668      	mov	r0, sp
 800b044:	f7fe fe76 	bl	8009d34 <ucdr_init_buffer>
 800b048:	4639      	mov	r1, r7
 800b04a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b04e:	4668      	mov	r0, sp
 800b050:	4798      	blx	r3
 800b052:	4631      	mov	r1, r6
 800b054:	4604      	mov	r4, r0
 800b056:	480a      	ldr	r0, [pc, #40]	; (800b080 <rmw_take_response+0x94>)
 800b058:	f005 fb60 	bl	801071c <put_memory>
 800b05c:	b105      	cbz	r5, 800b060 <rmw_take_response+0x74>
 800b05e:	702c      	strb	r4, [r5, #0]
 800b060:	f084 0001 	eor.w	r0, r4, #1
 800b064:	b2c0      	uxtb	r0, r0
 800b066:	b009      	add	sp, #36	; 0x24
 800b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b06c:	200c      	movs	r0, #12
 800b06e:	b009      	add	sp, #36	; 0x24
 800b070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b074:	2001      	movs	r0, #1
 800b076:	b009      	add	sp, #36	; 0x24
 800b078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b07c:	08015084 	.word	0x08015084
 800b080:	2000c270 	.word	0x2000c270

0800b084 <rmw_create_service>:
 800b084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b088:	b091      	sub	sp, #68	; 0x44
 800b08a:	2800      	cmp	r0, #0
 800b08c:	f000 80c1 	beq.w	800b212 <rmw_create_service+0x18e>
 800b090:	4689      	mov	r9, r1
 800b092:	2900      	cmp	r1, #0
 800b094:	f000 80bd 	beq.w	800b212 <rmw_create_service+0x18e>
 800b098:	4606      	mov	r6, r0
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	4614      	mov	r4, r2
 800b09e:	461d      	mov	r5, r3
 800b0a0:	f000 fc74 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f000 80b4 	beq.w	800b212 <rmw_create_service+0x18e>
 800b0aa:	2c00      	cmp	r4, #0
 800b0ac:	f000 80b1 	beq.w	800b212 <rmw_create_service+0x18e>
 800b0b0:	7823      	ldrb	r3, [r4, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 80ad 	beq.w	800b212 <rmw_create_service+0x18e>
 800b0b8:	2d00      	cmp	r5, #0
 800b0ba:	f000 80aa 	beq.w	800b212 <rmw_create_service+0x18e>
 800b0be:	4857      	ldr	r0, [pc, #348]	; (800b21c <rmw_create_service+0x198>)
 800b0c0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800b0c4:	f005 fb1a 	bl	80106fc <get_memory>
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f000 80a2 	beq.w	800b214 <rmw_create_service+0x190>
 800b0d0:	68c7      	ldr	r7, [r0, #12]
 800b0d2:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800b0d6:	f005 fb79 	bl	80107cc <rmw_get_implementation_identifier>
 800b0da:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 800b0de:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b0e0:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7f5 f89d 	bl	8000224 <strlen>
 800b0ea:	1c42      	adds	r2, r0, #1
 800b0ec:	2a3c      	cmp	r2, #60	; 0x3c
 800b0ee:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 800b0f2:	f200 808b 	bhi.w	800b20c <rmw_create_service+0x188>
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4650      	mov	r0, sl
 800b0fa:	f008 f83f 	bl	801317c <memcpy>
 800b0fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b102:	4629      	mov	r1, r5
 800b104:	e9c7 381d 	strd	r3, r8, [r7, #116]	; 0x74
 800b108:	2250      	movs	r2, #80	; 0x50
 800b10a:	f107 0020 	add.w	r0, r7, #32
 800b10e:	f008 f835 	bl	801317c <memcpy>
 800b112:	4943      	ldr	r1, [pc, #268]	; (800b220 <rmw_create_service+0x19c>)
 800b114:	4648      	mov	r0, r9
 800b116:	f000 fc51 	bl	800b9bc <get_service_typesupport_handle>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d076      	beq.n	800b20c <rmw_create_service+0x188>
 800b11e:	6843      	ldr	r3, [r0, #4]
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d072      	beq.n	800b20c <rmw_create_service+0x188>
 800b126:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b12a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800b228 <rmw_create_service+0x1a4>
 800b12e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800b22c <rmw_create_service+0x1a8>
 800b132:	f241 53a2 	movw	r3, #5538	; 0x15a2
 800b136:	2108      	movs	r1, #8
 800b138:	5ad0      	ldrh	r0, [r2, r3]
 800b13a:	f100 0c01 	add.w	ip, r0, #1
 800b13e:	f822 c003 	strh.w	ip, [r2, r3]
 800b142:	f000 fd01 	bl	800bb48 <uxr_object_id>
 800b146:	4652      	mov	r2, sl
 800b148:	6138      	str	r0, [r7, #16]
 800b14a:	4649      	mov	r1, r9
 800b14c:	6978      	ldr	r0, [r7, #20]
 800b14e:	2364      	movs	r3, #100	; 0x64
 800b150:	f000 fbb6 	bl	800b8c0 <generate_service_types>
 800b154:	2800      	cmp	r0, #0
 800b156:	d059      	beq.n	800b20c <rmw_create_service+0x188>
 800b158:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 800b230 <rmw_create_service+0x1ac>
 800b15c:	4a31      	ldr	r2, [pc, #196]	; (800b224 <rmw_create_service+0x1a0>)
 800b15e:	4659      	mov	r1, fp
 800b160:	233c      	movs	r3, #60	; 0x3c
 800b162:	4620      	mov	r0, r4
 800b164:	f000 fb7a 	bl	800b85c <generate_service_topics>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d04f      	beq.n	800b20c <rmw_create_service+0x188>
 800b16c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b170:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800b174:	a80c      	add	r0, sp, #48	; 0x30
 800b176:	4629      	mov	r1, r5
 800b178:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b17c:	f000 fb54 	bl	800b828 <convert_qos_profile>
 800b180:	4a28      	ldr	r2, [pc, #160]	; (800b224 <rmw_create_service+0x1a0>)
 800b182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b184:	a80c      	add	r0, sp, #48	; 0x30
 800b186:	c803      	ldmia	r0, {r0, r1}
 800b188:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b18c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800b190:	9a08      	ldr	r2, [sp, #32]
 800b192:	9005      	str	r0, [sp, #20]
 800b194:	f04f 0c06 	mov.w	ip, #6
 800b198:	9400      	str	r4, [sp, #0]
 800b19a:	f8ad 1018 	strh.w	r1, [sp, #24]
 800b19e:	f8cd c01c 	str.w	ip, [sp, #28]
 800b1a2:	6811      	ldr	r1, [r2, #0]
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b1aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b1ae:	f000 fc8f 	bl	800bad0 <uxr_buffer_create_replier_bin>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b1b8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b1bc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b1c0:	f000 fb16 	bl	800b7f0 <run_xrce_session>
 800b1c4:	b310      	cbz	r0, 800b20c <rmw_create_service+0x188>
 800b1c6:	7a2b      	ldrb	r3, [r5, #8]
 800b1c8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	bf0c      	ite	eq
 800b1d0:	f8d0 337c 	ldreq.w	r3, [r0, #892]	; 0x37c
 800b1d4:	f8d0 3378 	ldrne.w	r3, [r0, #888]	; 0x378
 800b1d8:	673b      	str	r3, [r7, #112]	; 0x70
 800b1da:	7a2b      	ldrb	r3, [r5, #8]
 800b1dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800b1ec:	bf0c      	ite	eq
 800b1ee:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800b1f2:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800b1f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1f8:	a90e      	add	r1, sp, #56	; 0x38
 800b1fa:	9100      	str	r1, [sp, #0]
 800b1fc:	6811      	ldr	r1, [r2, #0]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b204:	f000 fcce 	bl	800bba4 <uxr_buffer_request_data>
 800b208:	8338      	strh	r0, [r7, #24]
 800b20a:	e003      	b.n	800b214 <rmw_create_service+0x190>
 800b20c:	4630      	mov	r0, r6
 800b20e:	f000 f9c9 	bl	800b5a4 <rmw_uxrce_fini_service_memory>
 800b212:	2600      	movs	r6, #0
 800b214:	4630      	mov	r0, r6
 800b216:	b011      	add	sp, #68	; 0x44
 800b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21c:	2000f4cc 	.word	0x2000f4cc
 800b220:	080149c4 	.word	0x080149c4
 800b224:	2000c118 	.word	0x2000c118
 800b228:	2000c154 	.word	0x2000c154
 800b22c:	2000c0b4 	.word	0x2000c0b4
 800b230:	2000c078 	.word	0x2000c078

0800b234 <rmw_destroy_service>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	b128      	cbz	r0, 800b244 <rmw_destroy_service+0x10>
 800b238:	4604      	mov	r4, r0
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	460d      	mov	r5, r1
 800b23e:	f000 fba5 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 800b242:	b910      	cbnz	r0, 800b24a <rmw_destroy_service+0x16>
 800b244:	2401      	movs	r4, #1
 800b246:	4620      	mov	r0, r4
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0f9      	beq.n	800b244 <rmw_destroy_service+0x10>
 800b250:	2d00      	cmp	r5, #0
 800b252:	d0f7      	beq.n	800b244 <rmw_destroy_service+0x10>
 800b254:	6828      	ldr	r0, [r5, #0]
 800b256:	f000 fb99 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d0f2      	beq.n	800b244 <rmw_destroy_service+0x10>
 800b25e:	686e      	ldr	r6, [r5, #4]
 800b260:	2e00      	cmp	r6, #0
 800b262:	d0ef      	beq.n	800b244 <rmw_destroy_service+0x10>
 800b264:	6864      	ldr	r4, [r4, #4]
 800b266:	6932      	ldr	r2, [r6, #16]
 800b268:	6920      	ldr	r0, [r4, #16]
 800b26a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b26e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	f000 fcd0 	bl	800bc18 <uxr_buffer_cancel_data>
 800b278:	4602      	mov	r2, r0
 800b27a:	6920      	ldr	r0, [r4, #16]
 800b27c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b280:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b284:	f000 fab4 	bl	800b7f0 <run_xrce_session>
 800b288:	6920      	ldr	r0, [r4, #16]
 800b28a:	6932      	ldr	r2, [r6, #16]
 800b28c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b290:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b294:	6819      	ldr	r1, [r3, #0]
 800b296:	f000 fb9d 	bl	800b9d4 <uxr_buffer_delete_entity>
 800b29a:	4602      	mov	r2, r0
 800b29c:	6920      	ldr	r0, [r4, #16]
 800b29e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b2a2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b2a6:	f000 faa3 	bl	800b7f0 <run_xrce_session>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	bf14      	ite	ne
 800b2b0:	2400      	movne	r4, #0
 800b2b2:	2402      	moveq	r4, #2
 800b2b4:	f000 f976 	bl	800b5a4 <rmw_uxrce_fini_service_memory>
 800b2b8:	e7c5      	b.n	800b246 <rmw_destroy_service+0x12>
 800b2ba:	bf00      	nop

0800b2bc <rmw_uxrce_init_service_memory>:
 800b2bc:	b1b2      	cbz	r2, 800b2ec <rmw_uxrce_init_service_memory+0x30>
 800b2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c0:	7a07      	ldrb	r7, [r0, #8]
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	b98f      	cbnz	r7, 800b2ea <rmw_uxrce_init_service_memory+0x2e>
 800b2c6:	e9c0 7700 	strd	r7, r7, [r0]
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	23c8      	movs	r3, #200	; 0xc8
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	fb03 4602 	mla	r6, r3, r2, r4
 800b2d4:	60c3      	str	r3, [r0, #12]
 800b2d6:	7201      	strb	r1, [r0, #8]
 800b2d8:	4621      	mov	r1, r4
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f005 fa1e 	bl	801071c <put_memory>
 800b2e0:	60e4      	str	r4, [r4, #12]
 800b2e2:	f804 7bc8 	strb.w	r7, [r4], #200
 800b2e6:	42a6      	cmp	r6, r4
 800b2e8:	d1f6      	bne.n	800b2d8 <rmw_uxrce_init_service_memory+0x1c>
 800b2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop

0800b2f0 <rmw_uxrce_init_client_memory>:
 800b2f0:	b1b2      	cbz	r2, 800b320 <rmw_uxrce_init_client_memory+0x30>
 800b2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f4:	7a07      	ldrb	r7, [r0, #8]
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	b98f      	cbnz	r7, 800b31e <rmw_uxrce_init_client_memory+0x2e>
 800b2fa:	e9c0 7700 	strd	r7, r7, [r0]
 800b2fe:	460c      	mov	r4, r1
 800b300:	23c8      	movs	r3, #200	; 0xc8
 800b302:	2101      	movs	r1, #1
 800b304:	fb03 4602 	mla	r6, r3, r2, r4
 800b308:	60c3      	str	r3, [r0, #12]
 800b30a:	7201      	strb	r1, [r0, #8]
 800b30c:	4621      	mov	r1, r4
 800b30e:	4628      	mov	r0, r5
 800b310:	f005 fa04 	bl	801071c <put_memory>
 800b314:	60e4      	str	r4, [r4, #12]
 800b316:	f804 7bc8 	strb.w	r7, [r4], #200
 800b31a:	42a6      	cmp	r6, r4
 800b31c:	d1f6      	bne.n	800b30c <rmw_uxrce_init_client_memory+0x1c>
 800b31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop

0800b324 <rmw_uxrce_init_publisher_memory>:
 800b324:	b1b2      	cbz	r2, 800b354 <rmw_uxrce_init_publisher_memory+0x30>
 800b326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b328:	7a07      	ldrb	r7, [r0, #8]
 800b32a:	4605      	mov	r5, r0
 800b32c:	b98f      	cbnz	r7, 800b352 <rmw_uxrce_init_publisher_memory+0x2e>
 800b32e:	e9c0 7700 	strd	r7, r7, [r0]
 800b332:	460c      	mov	r4, r1
 800b334:	23d8      	movs	r3, #216	; 0xd8
 800b336:	2101      	movs	r1, #1
 800b338:	fb03 4602 	mla	r6, r3, r2, r4
 800b33c:	60c3      	str	r3, [r0, #12]
 800b33e:	7201      	strb	r1, [r0, #8]
 800b340:	4621      	mov	r1, r4
 800b342:	4628      	mov	r0, r5
 800b344:	f005 f9ea 	bl	801071c <put_memory>
 800b348:	60e4      	str	r4, [r4, #12]
 800b34a:	f804 7bd8 	strb.w	r7, [r4], #216
 800b34e:	42a6      	cmp	r6, r4
 800b350:	d1f6      	bne.n	800b340 <rmw_uxrce_init_publisher_memory+0x1c>
 800b352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop

0800b358 <rmw_uxrce_init_subscription_memory>:
 800b358:	b1b2      	cbz	r2, 800b388 <rmw_uxrce_init_subscription_memory+0x30>
 800b35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35c:	7a07      	ldrb	r7, [r0, #8]
 800b35e:	4605      	mov	r5, r0
 800b360:	b98f      	cbnz	r7, 800b386 <rmw_uxrce_init_subscription_memory+0x2e>
 800b362:	e9c0 7700 	strd	r7, r7, [r0]
 800b366:	460c      	mov	r4, r1
 800b368:	23d0      	movs	r3, #208	; 0xd0
 800b36a:	2101      	movs	r1, #1
 800b36c:	fb03 4602 	mla	r6, r3, r2, r4
 800b370:	60c3      	str	r3, [r0, #12]
 800b372:	7201      	strb	r1, [r0, #8]
 800b374:	4621      	mov	r1, r4
 800b376:	4628      	mov	r0, r5
 800b378:	f005 f9d0 	bl	801071c <put_memory>
 800b37c:	60e4      	str	r4, [r4, #12]
 800b37e:	f804 7bd0 	strb.w	r7, [r4], #208
 800b382:	42a6      	cmp	r6, r4
 800b384:	d1f6      	bne.n	800b374 <rmw_uxrce_init_subscription_memory+0x1c>
 800b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop

0800b38c <rmw_uxrce_init_node_memory>:
 800b38c:	b1b2      	cbz	r2, 800b3bc <rmw_uxrce_init_node_memory+0x30>
 800b38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b390:	7a07      	ldrb	r7, [r0, #8]
 800b392:	4605      	mov	r5, r0
 800b394:	b98f      	cbnz	r7, 800b3ba <rmw_uxrce_init_node_memory+0x2e>
 800b396:	e9c0 7700 	strd	r7, r7, [r0]
 800b39a:	460c      	mov	r4, r1
 800b39c:	23a4      	movs	r3, #164	; 0xa4
 800b39e:	2101      	movs	r1, #1
 800b3a0:	fb03 4602 	mla	r6, r3, r2, r4
 800b3a4:	60c3      	str	r3, [r0, #12]
 800b3a6:	7201      	strb	r1, [r0, #8]
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f005 f9b6 	bl	801071c <put_memory>
 800b3b0:	60e4      	str	r4, [r4, #12]
 800b3b2:	f804 7ba4 	strb.w	r7, [r4], #164
 800b3b6:	42a6      	cmp	r6, r4
 800b3b8:	d1f6      	bne.n	800b3a8 <rmw_uxrce_init_node_memory+0x1c>
 800b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <rmw_uxrce_init_session_memory>:
 800b3c0:	b1d2      	cbz	r2, 800b3f8 <rmw_uxrce_init_session_memory+0x38>
 800b3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c6:	7a07      	ldrb	r7, [r0, #8]
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	b99f      	cbnz	r7, 800b3f4 <rmw_uxrce_init_session_memory+0x34>
 800b3cc:	e9c0 7700 	strd	r7, r7, [r0]
 800b3d0:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	fb03 4602 	mla	r6, r3, r2, r4
 800b3dc:	60c3      	str	r3, [r0, #12]
 800b3de:	4698      	mov	r8, r3
 800b3e0:	7201      	strb	r1, [r0, #8]
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f005 f999 	bl	801071c <put_memory>
 800b3ea:	60e4      	str	r4, [r4, #12]
 800b3ec:	7027      	strb	r7, [r4, #0]
 800b3ee:	4444      	add	r4, r8
 800b3f0:	42a6      	cmp	r6, r4
 800b3f2:	d1f6      	bne.n	800b3e2 <rmw_uxrce_init_session_memory+0x22>
 800b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop

0800b3fc <rmw_uxrce_init_topic_memory>:
 800b3fc:	b1c2      	cbz	r2, 800b430 <rmw_uxrce_init_topic_memory+0x34>
 800b3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b400:	7a07      	ldrb	r7, [r0, #8]
 800b402:	4606      	mov	r6, r0
 800b404:	b99f      	cbnz	r7, 800b42e <rmw_uxrce_init_topic_memory+0x32>
 800b406:	e9c0 7700 	strd	r7, r7, [r0]
 800b40a:	460c      	mov	r4, r1
 800b40c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b410:	2101      	movs	r1, #1
 800b412:	231c      	movs	r3, #28
 800b414:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b418:	7201      	strb	r1, [r0, #8]
 800b41a:	60c3      	str	r3, [r0, #12]
 800b41c:	4621      	mov	r1, r4
 800b41e:	4630      	mov	r0, r6
 800b420:	f005 f97c 	bl	801071c <put_memory>
 800b424:	60e4      	str	r4, [r4, #12]
 800b426:	f804 7b1c 	strb.w	r7, [r4], #28
 800b42a:	42a5      	cmp	r5, r4
 800b42c:	d1f6      	bne.n	800b41c <rmw_uxrce_init_topic_memory+0x20>
 800b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop

0800b434 <rmw_uxrce_init_static_input_buffer_memory>:
 800b434:	b1d2      	cbz	r2, 800b46c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800b436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b438:	7a07      	ldrb	r7, [r0, #8]
 800b43a:	4606      	mov	r6, r0
 800b43c:	b9af      	cbnz	r7, 800b46a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800b43e:	e9c0 7700 	strd	r7, r7, [r0]
 800b442:	460c      	mov	r4, r1
 800b444:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800b448:	2101      	movs	r1, #1
 800b44a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800b44e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800b452:	7201      	strb	r1, [r0, #8]
 800b454:	60c3      	str	r3, [r0, #12]
 800b456:	4621      	mov	r1, r4
 800b458:	4630      	mov	r0, r6
 800b45a:	f005 f95f 	bl	801071c <put_memory>
 800b45e:	60e4      	str	r4, [r4, #12]
 800b460:	7027      	strb	r7, [r4, #0]
 800b462:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b466:	42a5      	cmp	r5, r4
 800b468:	d1f5      	bne.n	800b456 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop

0800b470 <rmw_uxrce_init_init_options_impl_memory>:
 800b470:	b1b2      	cbz	r2, 800b4a0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800b472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b474:	7a07      	ldrb	r7, [r0, #8]
 800b476:	4605      	mov	r5, r0
 800b478:	b98f      	cbnz	r7, 800b49e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800b47a:	e9c0 7700 	strd	r7, r7, [r0]
 800b47e:	460c      	mov	r4, r1
 800b480:	232c      	movs	r3, #44	; 0x2c
 800b482:	2101      	movs	r1, #1
 800b484:	fb03 4602 	mla	r6, r3, r2, r4
 800b488:	60c3      	str	r3, [r0, #12]
 800b48a:	7201      	strb	r1, [r0, #8]
 800b48c:	4621      	mov	r1, r4
 800b48e:	4628      	mov	r0, r5
 800b490:	f005 f944 	bl	801071c <put_memory>
 800b494:	60e4      	str	r4, [r4, #12]
 800b496:	f804 7b2c 	strb.w	r7, [r4], #44
 800b49a:	42a6      	cmp	r6, r4
 800b49c:	d1f6      	bne.n	800b48c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800b49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop

0800b4a4 <rmw_uxrce_init_wait_set_memory>:
 800b4a4:	b1c2      	cbz	r2, 800b4d8 <rmw_uxrce_init_wait_set_memory+0x34>
 800b4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a8:	7a07      	ldrb	r7, [r0, #8]
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	b99f      	cbnz	r7, 800b4d6 <rmw_uxrce_init_wait_set_memory+0x32>
 800b4ae:	e9c0 7700 	strd	r7, r7, [r0]
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	231c      	movs	r3, #28
 800b4bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4c0:	7201      	strb	r1, [r0, #8]
 800b4c2:	60c3      	str	r3, [r0, #12]
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f005 f928 	bl	801071c <put_memory>
 800b4cc:	60e4      	str	r4, [r4, #12]
 800b4ce:	f804 7b1c 	strb.w	r7, [r4], #28
 800b4d2:	42a5      	cmp	r5, r4
 800b4d4:	d1f6      	bne.n	800b4c4 <rmw_uxrce_init_wait_set_memory+0x20>
 800b4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop

0800b4dc <rmw_uxrce_init_guard_condition_memory>:
 800b4dc:	b1b2      	cbz	r2, 800b50c <rmw_uxrce_init_guard_condition_memory+0x30>
 800b4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e0:	7a07      	ldrb	r7, [r0, #8]
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	b98f      	cbnz	r7, 800b50a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800b4e6:	e9c0 7700 	strd	r7, r7, [r0]
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	2320      	movs	r3, #32
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800b4f4:	7201      	strb	r1, [r0, #8]
 800b4f6:	60c3      	str	r3, [r0, #12]
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f005 f90e 	bl	801071c <put_memory>
 800b500:	60e4      	str	r4, [r4, #12]
 800b502:	f804 7b20 	strb.w	r7, [r4], #32
 800b506:	42a6      	cmp	r6, r4
 800b508:	d1f6      	bne.n	800b4f8 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop

0800b510 <rmw_uxrce_fini_session_memory>:
 800b510:	4601      	mov	r1, r0
 800b512:	4801      	ldr	r0, [pc, #4]	; (800b518 <rmw_uxrce_fini_session_memory+0x8>)
 800b514:	f005 b902 	b.w	801071c <put_memory>
 800b518:	2000f418 	.word	0x2000f418

0800b51c <rmw_uxrce_fini_node_memory>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4604      	mov	r4, r0
 800b520:	6800      	ldr	r0, [r0, #0]
 800b522:	b128      	cbz	r0, 800b530 <rmw_uxrce_fini_node_memory+0x14>
 800b524:	4b07      	ldr	r3, [pc, #28]	; (800b544 <rmw_uxrce_fini_node_memory+0x28>)
 800b526:	6819      	ldr	r1, [r3, #0]
 800b528:	f7f4 fe72 	bl	8000210 <strcmp>
 800b52c:	b940      	cbnz	r0, 800b540 <rmw_uxrce_fini_node_memory+0x24>
 800b52e:	6020      	str	r0, [r4, #0]
 800b530:	6861      	ldr	r1, [r4, #4]
 800b532:	b129      	cbz	r1, 800b540 <rmw_uxrce_fini_node_memory+0x24>
 800b534:	2500      	movs	r5, #0
 800b536:	4804      	ldr	r0, [pc, #16]	; (800b548 <rmw_uxrce_fini_node_memory+0x2c>)
 800b538:	610d      	str	r5, [r1, #16]
 800b53a:	f005 f8ef 	bl	801071c <put_memory>
 800b53e:	6065      	str	r5, [r4, #4]
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop
 800b544:	08015084 	.word	0x08015084
 800b548:	2000f244 	.word	0x2000f244

0800b54c <rmw_uxrce_fini_publisher_memory>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	4604      	mov	r4, r0
 800b550:	6800      	ldr	r0, [r0, #0]
 800b552:	b128      	cbz	r0, 800b560 <rmw_uxrce_fini_publisher_memory+0x14>
 800b554:	4b06      	ldr	r3, [pc, #24]	; (800b570 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b556:	6819      	ldr	r1, [r3, #0]
 800b558:	f7f4 fe5a 	bl	8000210 <strcmp>
 800b55c:	b938      	cbnz	r0, 800b56e <rmw_uxrce_fini_publisher_memory+0x22>
 800b55e:	6020      	str	r0, [r4, #0]
 800b560:	6861      	ldr	r1, [r4, #4]
 800b562:	b121      	cbz	r1, 800b56e <rmw_uxrce_fini_publisher_memory+0x22>
 800b564:	4803      	ldr	r0, [pc, #12]	; (800b574 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b566:	f005 f8d9 	bl	801071c <put_memory>
 800b56a:	2300      	movs	r3, #0
 800b56c:	6063      	str	r3, [r4, #4]
 800b56e:	bd10      	pop	{r4, pc}
 800b570:	08015084 	.word	0x08015084
 800b574:	2000c280 	.word	0x2000c280

0800b578 <rmw_uxrce_fini_subscription_memory>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	b128      	cbz	r0, 800b58c <rmw_uxrce_fini_subscription_memory+0x14>
 800b580:	4b06      	ldr	r3, [pc, #24]	; (800b59c <rmw_uxrce_fini_subscription_memory+0x24>)
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	f7f4 fe44 	bl	8000210 <strcmp>
 800b588:	b938      	cbnz	r0, 800b59a <rmw_uxrce_fini_subscription_memory+0x22>
 800b58a:	6020      	str	r0, [r4, #0]
 800b58c:	6861      	ldr	r1, [r4, #4]
 800b58e:	b121      	cbz	r1, 800b59a <rmw_uxrce_fini_subscription_memory+0x22>
 800b590:	4803      	ldr	r0, [pc, #12]	; (800b5a0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b592:	f005 f8c3 	bl	801071c <put_memory>
 800b596:	2300      	movs	r3, #0
 800b598:	6063      	str	r3, [r4, #4]
 800b59a:	bd10      	pop	{r4, pc}
 800b59c:	08015084 	.word	0x08015084
 800b5a0:	2000f4dc 	.word	0x2000f4dc

0800b5a4 <rmw_uxrce_fini_service_memory>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	6800      	ldr	r0, [r0, #0]
 800b5aa:	b128      	cbz	r0, 800b5b8 <rmw_uxrce_fini_service_memory+0x14>
 800b5ac:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <rmw_uxrce_fini_service_memory+0x24>)
 800b5ae:	6819      	ldr	r1, [r3, #0]
 800b5b0:	f7f4 fe2e 	bl	8000210 <strcmp>
 800b5b4:	b938      	cbnz	r0, 800b5c6 <rmw_uxrce_fini_service_memory+0x22>
 800b5b6:	6020      	str	r0, [r4, #0]
 800b5b8:	6861      	ldr	r1, [r4, #4]
 800b5ba:	b121      	cbz	r1, 800b5c6 <rmw_uxrce_fini_service_memory+0x22>
 800b5bc:	4803      	ldr	r0, [pc, #12]	; (800b5cc <rmw_uxrce_fini_service_memory+0x28>)
 800b5be:	f005 f8ad 	bl	801071c <put_memory>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6063      	str	r3, [r4, #4]
 800b5c6:	bd10      	pop	{r4, pc}
 800b5c8:	08015084 	.word	0x08015084
 800b5cc:	2000f4cc 	.word	0x2000f4cc

0800b5d0 <rmw_uxrce_fini_client_memory>:
 800b5d0:	b510      	push	{r4, lr}
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	6800      	ldr	r0, [r0, #0]
 800b5d6:	b128      	cbz	r0, 800b5e4 <rmw_uxrce_fini_client_memory+0x14>
 800b5d8:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <rmw_uxrce_fini_client_memory+0x24>)
 800b5da:	6819      	ldr	r1, [r3, #0]
 800b5dc:	f7f4 fe18 	bl	8000210 <strcmp>
 800b5e0:	b938      	cbnz	r0, 800b5f2 <rmw_uxrce_fini_client_memory+0x22>
 800b5e2:	6020      	str	r0, [r4, #0]
 800b5e4:	6861      	ldr	r1, [r4, #4]
 800b5e6:	b121      	cbz	r1, 800b5f2 <rmw_uxrce_fini_client_memory+0x22>
 800b5e8:	4803      	ldr	r0, [pc, #12]	; (800b5f8 <rmw_uxrce_fini_client_memory+0x28>)
 800b5ea:	f005 f897 	bl	801071c <put_memory>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6063      	str	r3, [r4, #4]
 800b5f2:	bd10      	pop	{r4, pc}
 800b5f4:	08015084 	.word	0x08015084
 800b5f8:	2000cb00 	.word	0x2000cb00

0800b5fc <rmw_uxrce_fini_topic_memory>:
 800b5fc:	b510      	push	{r4, lr}
 800b5fe:	4601      	mov	r1, r0
 800b600:	4604      	mov	r4, r0
 800b602:	4803      	ldr	r0, [pc, #12]	; (800b610 <rmw_uxrce_fini_topic_memory+0x14>)
 800b604:	f005 f88a 	bl	801071c <put_memory>
 800b608:	2300      	movs	r3, #0
 800b60a:	61a3      	str	r3, [r4, #24]
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	2000f408 	.word	0x2000f408

0800b614 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b614:	b082      	sub	sp, #8
 800b616:	b4f0      	push	{r4, r5, r6, r7}
 800b618:	4923      	ldr	r1, [pc, #140]	; (800b6a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800b61a:	ac04      	add	r4, sp, #16
 800b61c:	e884 000c 	stmia.w	r4, {r2, r3}
 800b620:	680d      	ldr	r5, [r1, #0]
 800b622:	9c05      	ldr	r4, [sp, #20]
 800b624:	2d00      	cmp	r5, #0
 800b626:	d03d      	beq.n	800b6a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800b628:	462b      	mov	r3, r5
 800b62a:	2100      	movs	r1, #0
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b634:	4290      	cmp	r0, r2
 800b636:	bf08      	it	eq
 800b638:	3101      	addeq	r1, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1f6      	bne.n	800b62c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b63e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d026      	beq.n	800b694 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800b646:	d906      	bls.n	800b656 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d004      	beq.n	800b656 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800b64c:	2100      	movs	r1, #0
 800b64e:	bcf0      	pop	{r4, r5, r6, r7}
 800b650:	4608      	mov	r0, r1
 800b652:	b002      	add	sp, #8
 800b654:	4770      	bx	lr
 800b656:	b304      	cbz	r4, 800b69a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b658:	428c      	cmp	r4, r1
 800b65a:	d81e      	bhi.n	800b69a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b65c:	2d00      	cmp	r5, #0
 800b65e:	d0f5      	beq.n	800b64c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b660:	2100      	movs	r1, #0
 800b662:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b666:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800b66a:	e002      	b.n	800b672 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800b66c:	68ad      	ldr	r5, [r5, #8]
 800b66e:	2d00      	cmp	r5, #0
 800b670:	d0ed      	beq.n	800b64e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b672:	68eb      	ldr	r3, [r5, #12]
 800b674:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800b678:	4290      	cmp	r0, r2
 800b67a:	d1f7      	bne.n	800b66c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b67c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	42b2      	cmp	r2, r6
 800b686:	eb73 0407 	sbcs.w	r4, r3, r7
 800b68a:	daef      	bge.n	800b66c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b68c:	4616      	mov	r6, r2
 800b68e:	461f      	mov	r7, r3
 800b690:	4629      	mov	r1, r5
 800b692:	e7eb      	b.n	800b66c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b694:	b10c      	cbz	r4, 800b69a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b696:	428c      	cmp	r4, r1
 800b698:	d9d8      	bls.n	800b64c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b69a:	bcf0      	pop	{r4, r5, r6, r7}
 800b69c:	4802      	ldr	r0, [pc, #8]	; (800b6a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800b69e:	b002      	add	sp, #8
 800b6a0:	f005 b82c 	b.w	80106fc <get_memory>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	e7ca      	b.n	800b63e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b6a8:	2000c270 	.word	0x2000c270

0800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b6ac:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	b1fb      	cbz	r3, 800b6f2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800b6b2:	b4f0      	push	{r4, r5, r6, r7}
 800b6b4:	f04f 0c00 	mov.w	ip, #0
 800b6b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b6bc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800b6c0:	e001      	b.n	800b6c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	b193      	cbz	r3, 800b6ec <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800b6c6:	68da      	ldr	r2, [r3, #12]
 800b6c8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b6cc:	4288      	cmp	r0, r1
 800b6ce:	d1f8      	bne.n	800b6c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800b6d0:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800b6d4:	e9d2 6700 	ldrd	r6, r7, [r2]
 800b6d8:	42a6      	cmp	r6, r4
 800b6da:	eb77 0205 	sbcs.w	r2, r7, r5
 800b6de:	daf0      	bge.n	800b6c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800b6e0:	469c      	mov	ip, r3
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	4634      	mov	r4, r6
 800b6e6:	463d      	mov	r5, r7
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1ec      	bne.n	800b6c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800b6ec:	4660      	mov	r0, ip
 800b6ee:	bcf0      	pop	{r4, r5, r6, r7}
 800b6f0:	4770      	bx	lr
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	2000c270 	.word	0x2000c270
 800b6fc:	00000000 	.word	0x00000000

0800b700 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	4e38      	ldr	r6, [pc, #224]	; (800b7e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800b706:	f8d6 8000 	ldr.w	r8, [r6]
 800b70a:	b083      	sub	sp, #12
 800b70c:	f005 fe74 	bl	80113f8 <rmw_uros_epoch_nanos>
 800b710:	f1b8 0f00 	cmp.w	r8, #0
 800b714:	d05f      	beq.n	800b7d6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800b716:	46b1      	mov	r9, r6
 800b718:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b71c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800b720:	2b04      	cmp	r3, #4
 800b722:	4682      	mov	sl, r0
 800b724:	468b      	mov	fp, r1
 800b726:	d02d      	beq.n	800b784 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800b728:	2b05      	cmp	r3, #5
 800b72a:	d041      	beq.n	800b7b0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d029      	beq.n	800b784 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800b730:	2200      	movs	r2, #0
 800b732:	2300      	movs	r3, #0
 800b734:	e9cd 2300 	strd	r2, r3, [sp]
 800b738:	2001      	movs	r0, #1
 800b73a:	2100      	movs	r1, #0
 800b73c:	9b00      	ldr	r3, [sp, #0]
 800b73e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800b742:	e9d6 6700 	ldrd	r6, r7, [r6]
 800b746:	18c2      	adds	r2, r0, r3
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	eb41 0303 	adc.w	r3, r1, r3
 800b74e:	1994      	adds	r4, r2, r6
 800b750:	eb43 0507 	adc.w	r5, r3, r7
 800b754:	4554      	cmp	r4, sl
 800b756:	eb75 020b 	sbcs.w	r2, r5, fp
 800b75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b75e:	db03      	blt.n	800b768 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b760:	45b2      	cmp	sl, r6
 800b762:	eb7b 0207 	sbcs.w	r2, fp, r7
 800b766:	da05      	bge.n	800b774 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800b768:	4641      	mov	r1, r8
 800b76a:	4648      	mov	r0, r9
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	f004 ffd5 	bl	801071c <put_memory>
 800b772:	9b00      	ldr	r3, [sp, #0]
 800b774:	b37b      	cbz	r3, 800b7d6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800b776:	4698      	mov	r8, r3
 800b778:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b77c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800b780:	2b04      	cmp	r3, #4
 800b782:	d1d1      	bne.n	800b728 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800b784:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800b788:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800b78c:	e9cd 2300 	strd	r2, r3, [sp]
 800b790:	4313      	orrs	r3, r2
 800b792:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800b796:	d015      	beq.n	800b7c4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b798:	9a01      	ldr	r2, [sp, #4]
 800b79a:	4b14      	ldr	r3, [pc, #80]	; (800b7ec <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800b79c:	fb03 f702 	mul.w	r7, r3, r2
 800b7a0:	9a00      	ldr	r2, [sp, #0]
 800b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a6:	e9cd 2300 	strd	r2, r3, [sp]
 800b7aa:	443b      	add	r3, r7
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	e7c5      	b.n	800b73c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b7b0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800b7b4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800b7b8:	e9cd 2300 	strd	r2, r3, [sp]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800b7c2:	d1e9      	bne.n	800b798 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800b7c4:	ea50 0301 	orrs.w	r3, r0, r1
 800b7c8:	bf02      	ittt	eq
 800b7ca:	a305      	addeq	r3, pc, #20	; (adr r3, 800b7e0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800b7cc:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800b7d0:	e9cd 2300 	strdeq	r2, r3, [sp]
 800b7d4:	e7b2      	b.n	800b73c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b7d6:	b003      	add	sp, #12
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	f3af 8000 	nop.w
 800b7e0:	fc23ac00 	.word	0xfc23ac00
 800b7e4:	00000006 	.word	0x00000006
 800b7e8:	2000c270 	.word	0x2000c270
 800b7ec:	3b9aca00 	.word	0x3b9aca00

0800b7f0 <run_xrce_session>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	788c      	ldrb	r4, [r1, #2]
 800b7f4:	b086      	sub	sp, #24
 800b7f6:	2c01      	cmp	r4, #1
 800b7f8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b7fc:	d00c      	beq.n	800b818 <run_xrce_session+0x28>
 800b7fe:	4619      	mov	r1, r3
 800b800:	2301      	movs	r3, #1
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	f10d 020e 	add.w	r2, sp, #14
 800b808:	f10d 0317 	add.w	r3, sp, #23
 800b80c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b810:	f000 ffee 	bl	800c7f0 <uxr_run_session_until_all_status>
 800b814:	b006      	add	sp, #24
 800b816:	bd10      	pop	{r4, pc}
 800b818:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b81c:	f000 fc06 	bl	800c02c <uxr_flash_output_streams>
 800b820:	4620      	mov	r0, r4
 800b822:	b006      	add	sp, #24
 800b824:	bd10      	pop	{r4, pc}
 800b826:	bf00      	nop

0800b828 <convert_qos_profile>:
 800b828:	b430      	push	{r4, r5}
 800b82a:	7a0d      	ldrb	r5, [r1, #8]
 800b82c:	780c      	ldrb	r4, [r1, #0]
 800b82e:	7a4a      	ldrb	r2, [r1, #9]
 800b830:	8889      	ldrh	r1, [r1, #4]
 800b832:	8081      	strh	r1, [r0, #4]
 800b834:	f1a5 0502 	sub.w	r5, r5, #2
 800b838:	f1a4 0402 	sub.w	r4, r4, #2
 800b83c:	2a02      	cmp	r2, #2
 800b83e:	fab5 f585 	clz	r5, r5
 800b842:	fab4 f484 	clz	r4, r4
 800b846:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800b84a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800b84e:	bf18      	it	ne
 800b850:	2200      	movne	r2, #0
 800b852:	7045      	strb	r5, [r0, #1]
 800b854:	7084      	strb	r4, [r0, #2]
 800b856:	7002      	strb	r2, [r0, #0]
 800b858:	bc30      	pop	{r4, r5}
 800b85a:	4770      	bx	lr

0800b85c <generate_service_topics>:
 800b85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b85e:	b083      	sub	sp, #12
 800b860:	461c      	mov	r4, r3
 800b862:	4b12      	ldr	r3, [pc, #72]	; (800b8ac <generate_service_topics+0x50>)
 800b864:	9000      	str	r0, [sp, #0]
 800b866:	4605      	mov	r5, r0
 800b868:	4617      	mov	r7, r2
 800b86a:	4608      	mov	r0, r1
 800b86c:	4a10      	ldr	r2, [pc, #64]	; (800b8b0 <generate_service_topics+0x54>)
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	4621      	mov	r1, r4
 800b872:	4b10      	ldr	r3, [pc, #64]	; (800b8b4 <generate_service_topics+0x58>)
 800b874:	f007 fe44 	bl	8013500 <sniprintf>
 800b878:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <generate_service_topics+0x5c>)
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	4606      	mov	r6, r0
 800b87e:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <generate_service_topics+0x60>)
 800b880:	4a0b      	ldr	r2, [pc, #44]	; (800b8b0 <generate_service_topics+0x54>)
 800b882:	9500      	str	r5, [sp, #0]
 800b884:	4638      	mov	r0, r7
 800b886:	4621      	mov	r1, r4
 800b888:	f007 fe3a 	bl	8013500 <sniprintf>
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	db01      	blt.n	800b894 <generate_service_topics+0x38>
 800b890:	42b4      	cmp	r4, r6
 800b892:	dc02      	bgt.n	800b89a <generate_service_topics+0x3e>
 800b894:	2000      	movs	r0, #0
 800b896:	b003      	add	sp, #12
 800b898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b89a:	2800      	cmp	r0, #0
 800b89c:	dbfa      	blt.n	800b894 <generate_service_topics+0x38>
 800b89e:	4284      	cmp	r4, r0
 800b8a0:	bfd4      	ite	le
 800b8a2:	2000      	movle	r0, #0
 800b8a4:	2001      	movgt	r0, #1
 800b8a6:	b003      	add	sp, #12
 800b8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	08014b9c 	.word	0x08014b9c
 800b8b0:	08014b7c 	.word	0x08014b7c
 800b8b4:	08014b98 	.word	0x08014b98
 800b8b8:	08014b90 	.word	0x08014b90
 800b8bc:	08014b8c 	.word	0x08014b8c

0800b8c0 <generate_service_types>:
 800b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	6880      	ldr	r0, [r0, #8]
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	461d      	mov	r5, r3
 800b8d0:	4780      	blx	r0
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	4798      	blx	r3
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	7023      	strb	r3, [r4, #0]
 800b8e2:	6813      	ldr	r3, [r2, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d041      	beq.n	800b96c <generate_service_types+0xac>
 800b8e8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800b980 <generate_service_types+0xc0>
 800b8ec:	4641      	mov	r1, r8
 800b8ee:	4f22      	ldr	r7, [pc, #136]	; (800b978 <generate_service_types+0xb8>)
 800b8f0:	9705      	str	r7, [sp, #20]
 800b8f2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800b988 <generate_service_types+0xc8>
 800b8f6:	6852      	ldr	r2, [r2, #4]
 800b8f8:	9204      	str	r2, [sp, #16]
 800b8fa:	e9cd 1900 	strd	r1, r9, [sp]
 800b8fe:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800b902:	4a1e      	ldr	r2, [pc, #120]	; (800b97c <generate_service_types+0xbc>)
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	f007 fdfa 	bl	8013500 <sniprintf>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	db1f      	blt.n	800b950 <generate_service_types+0x90>
 800b910:	2300      	movs	r3, #0
 800b912:	7033      	strb	r3, [r6, #0]
 800b914:	f8da 3000 	ldr.w	r3, [sl]
 800b918:	42a8      	cmp	r0, r5
 800b91a:	bfac      	ite	ge
 800b91c:	2400      	movge	r4, #0
 800b91e:	2401      	movlt	r4, #1
 800b920:	b1eb      	cbz	r3, 800b95e <generate_service_types+0x9e>
 800b922:	4a17      	ldr	r2, [pc, #92]	; (800b980 <generate_service_types+0xc0>)
 800b924:	9705      	str	r7, [sp, #20]
 800b926:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b92a:	9200      	str	r2, [sp, #0]
 800b92c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800b930:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800b934:	4a11      	ldr	r2, [pc, #68]	; (800b97c <generate_service_types+0xbc>)
 800b936:	4630      	mov	r0, r6
 800b938:	4629      	mov	r1, r5
 800b93a:	f007 fde1 	bl	8013500 <sniprintf>
 800b93e:	2800      	cmp	r0, #0
 800b940:	db10      	blt.n	800b964 <generate_service_types+0xa4>
 800b942:	42a8      	cmp	r0, r5
 800b944:	bfb4      	ite	lt
 800b946:	4620      	movlt	r0, r4
 800b948:	2000      	movge	r0, #0
 800b94a:	b006      	add	sp, #24
 800b94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b950:	2300      	movs	r3, #0
 800b952:	7033      	strb	r3, [r6, #0]
 800b954:	f8da 3000 	ldr.w	r3, [sl]
 800b958:	2400      	movs	r4, #0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1e1      	bne.n	800b922 <generate_service_types+0x62>
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <generate_service_types+0xc4>)
 800b960:	461a      	mov	r2, r3
 800b962:	e7df      	b.n	800b924 <generate_service_types+0x64>
 800b964:	2000      	movs	r0, #0
 800b966:	b006      	add	sp, #24
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	4b05      	ldr	r3, [pc, #20]	; (800b984 <generate_service_types+0xc4>)
 800b96e:	f8df 8010 	ldr.w	r8, [pc, #16]	; 800b980 <generate_service_types+0xc0>
 800b972:	4619      	mov	r1, r3
 800b974:	e7bb      	b.n	800b8ee <generate_service_types+0x2e>
 800b976:	bf00      	nop
 800b978:	08014b84 	.word	0x08014b84
 800b97c:	08014b74 	.word	0x08014b74
 800b980:	08014b70 	.word	0x08014b70
 800b984:	08014e5c 	.word	0x08014e5c
 800b988:	08014b88 	.word	0x08014b88

0800b98c <is_uxrce_rmw_identifier_valid>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4604      	mov	r4, r0
 800b990:	b140      	cbz	r0, 800b9a4 <is_uxrce_rmw_identifier_valid+0x18>
 800b992:	f004 ff1b 	bl	80107cc <rmw_get_implementation_identifier>
 800b996:	4601      	mov	r1, r0
 800b998:	4620      	mov	r0, r4
 800b99a:	f7f4 fc39 	bl	8000210 <strcmp>
 800b99e:	fab0 f080 	clz	r0, r0
 800b9a2:	0940      	lsrs	r0, r0, #5
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop

0800b9a8 <get_message_typesupport_handle_function>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f7f4 fc2f 	bl	8000210 <strcmp>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	bf0c      	ite	eq
 800b9b6:	4620      	moveq	r0, r4
 800b9b8:	2000      	movne	r0, #0
 800b9ba:	bd10      	pop	{r4, pc}

0800b9bc <get_service_typesupport_handle>:
 800b9bc:	6883      	ldr	r3, [r0, #8]
 800b9be:	4718      	bx	r3

0800b9c0 <get_service_typesupport_handle_function>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	6800      	ldr	r0, [r0, #0]
 800b9c6:	f7f4 fc23 	bl	8000210 <strcmp>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	bf0c      	ite	eq
 800b9ce:	4620      	moveq	r0, r4
 800b9d0:	2000      	movne	r0, #0
 800b9d2:	bd10      	pop	{r4, pc}

0800b9d4 <uxr_buffer_delete_entity>:
 800b9d4:	b530      	push	{r4, r5, lr}
 800b9d6:	b08f      	sub	sp, #60	; 0x3c
 800b9d8:	2403      	movs	r4, #3
 800b9da:	2500      	movs	r5, #0
 800b9dc:	e9cd 4500 	strd	r4, r5, [sp]
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	ab06      	add	r3, sp, #24
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	9103      	str	r1, [sp, #12]
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	f001 f93d 	bl	800cc68 <uxr_prepare_stream_to_write_submessage>
 800b9ee:	b918      	cbnz	r0, 800b9f8 <uxr_buffer_delete_entity+0x24>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	b00f      	add	sp, #60	; 0x3c
 800b9f6:	bd30      	pop	{r4, r5, pc}
 800b9f8:	9902      	ldr	r1, [sp, #8]
 800b9fa:	aa05      	add	r2, sp, #20
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f001 fa6d 	bl	800cedc <uxr_init_base_object_request>
 800ba02:	a905      	add	r1, sp, #20
 800ba04:	4604      	mov	r4, r0
 800ba06:	a806      	add	r0, sp, #24
 800ba08:	f002 f944 	bl	800dc94 <uxr_serialize_DELETE_Payload>
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	b00f      	add	sp, #60	; 0x3c
 800ba10:	bd30      	pop	{r4, r5, pc}
 800ba12:	bf00      	nop

0800ba14 <uxr_common_create_entity>:
 800ba14:	b530      	push	{r4, r5, lr}
 800ba16:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800ba1a:	b08d      	sub	sp, #52	; 0x34
 800ba1c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ba20:	2d01      	cmp	r5, #1
 800ba22:	bf0c      	ite	eq
 800ba24:	f003 0201 	andeq.w	r2, r3, #1
 800ba28:	2200      	movne	r2, #0
 800ba2a:	330e      	adds	r3, #14
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	441a      	add	r2, r3
 800ba30:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800ba34:	9001      	str	r0, [sp, #4]
 800ba36:	2101      	movs	r1, #1
 800ba38:	9100      	str	r1, [sp, #0]
 800ba3a:	b292      	uxth	r2, r2
 800ba3c:	9903      	ldr	r1, [sp, #12]
 800ba3e:	ab04      	add	r3, sp, #16
 800ba40:	4620      	mov	r0, r4
 800ba42:	f001 f911 	bl	800cc68 <uxr_prepare_stream_to_write_submessage>
 800ba46:	b918      	cbnz	r0, 800ba50 <uxr_common_create_entity+0x3c>
 800ba48:	4604      	mov	r4, r0
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	b00d      	add	sp, #52	; 0x34
 800ba4e:	bd30      	pop	{r4, r5, pc}
 800ba50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba52:	9902      	ldr	r1, [sp, #8]
 800ba54:	4620      	mov	r0, r4
 800ba56:	f001 fa41 	bl	800cedc <uxr_init_base_object_request>
 800ba5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	a804      	add	r0, sp, #16
 800ba60:	f002 f86c 	bl	800db3c <uxr_serialize_CREATE_Payload>
 800ba64:	4620      	mov	r0, r4
 800ba66:	b00d      	add	sp, #52	; 0x34
 800ba68:	bd30      	pop	{r4, r5, pc}
 800ba6a:	bf00      	nop

0800ba6c <uxr_buffer_create_participant_bin>:
 800ba6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba6e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800ba72:	ac11      	add	r4, sp, #68	; 0x44
 800ba74:	9103      	str	r1, [sp, #12]
 800ba76:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800ba78:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800ba7c:	2103      	movs	r1, #3
 800ba7e:	7221      	strb	r1, [r4, #8]
 800ba80:	2301      	movs	r3, #1
 800ba82:	2100      	movs	r1, #0
 800ba84:	7123      	strb	r3, [r4, #4]
 800ba86:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800ba8a:	9202      	str	r2, [sp, #8]
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	f88d 1014 	strb.w	r1, [sp, #20]
 800ba92:	b1ce      	cbz	r6, 800bac8 <uxr_buffer_create_participant_bin+0x5c>
 800ba94:	f88d 301c 	strb.w	r3, [sp, #28]
 800ba98:	9608      	str	r6, [sp, #32]
 800ba9a:	a809      	add	r0, sp, #36	; 0x24
 800ba9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baa0:	a915      	add	r1, sp, #84	; 0x54
 800baa2:	f7fe f947 	bl	8009d34 <ucdr_init_buffer>
 800baa6:	a905      	add	r1, sp, #20
 800baa8:	a809      	add	r0, sp, #36	; 0x24
 800baaa:	f001 fe1d 	bl	800d6e8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800baae:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bab0:	9401      	str	r4, [sp, #4]
 800bab2:	b283      	uxth	r3, r0
 800bab4:	9700      	str	r7, [sp, #0]
 800bab6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800baba:	60e0      	str	r0, [r4, #12]
 800babc:	4628      	mov	r0, r5
 800babe:	f7ff ffa9 	bl	800ba14 <uxr_common_create_entity>
 800bac2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800bac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac8:	f88d 601c 	strb.w	r6, [sp, #28]
 800bacc:	e7e5      	b.n	800ba9a <uxr_buffer_create_participant_bin+0x2e>
 800bace:	bf00      	nop

0800bad0 <uxr_buffer_create_replier_bin>:
 800bad0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 800bad4:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800bad8:	ad15      	add	r5, sp, #84	; 0x54
 800bada:	4681      	mov	r9, r0
 800badc:	9105      	str	r1, [sp, #20]
 800bade:	4618      	mov	r0, r3
 800bae0:	a999      	add	r1, sp, #612	; 0x264
 800bae2:	2408      	movs	r4, #8
 800bae4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800bae8:	9fa0      	ldr	r7, [sp, #640]	; 0x280
 800baea:	f89d 629c 	ldrb.w	r6, [sp, #668]	; 0x29c
 800baee:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
 800baf2:	9ca4      	ldr	r4, [sp, #656]	; 0x290
 800baf4:	f000 f84a 	bl	800bb8c <uxr_object_id_to_raw>
 800baf8:	9aa1      	ldr	r2, [sp, #644]	; 0x284
 800bafa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bafc:	9207      	str	r2, [sp, #28]
 800bafe:	2303      	movs	r3, #3
 800bb00:	722b      	strb	r3, [r5, #8]
 800bb02:	a80d      	add	r0, sp, #52	; 0x34
 800bb04:	2301      	movs	r3, #1
 800bb06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb0a:	9108      	str	r1, [sp, #32]
 800bb0c:	940c      	str	r4, [sp, #48]	; 0x30
 800bb0e:	a919      	add	r1, sp, #100	; 0x64
 800bb10:	9ca3      	ldr	r4, [sp, #652]	; 0x28c
 800bb12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800bb16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800bb1a:	940a      	str	r4, [sp, #40]	; 0x28
 800bb1c:	9706      	str	r7, [sp, #24]
 800bb1e:	f7fe f909 	bl	8009d34 <ucdr_init_buffer>
 800bb22:	a906      	add	r1, sp, #24
 800bb24:	a80d      	add	r0, sp, #52	; 0x34
 800bb26:	f001 fe01 	bl	800d72c <uxr_serialize_OBJK_Replier_Binary>
 800bb2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800bb2c:	9501      	str	r5, [sp, #4]
 800bb2e:	9600      	str	r6, [sp, #0]
 800bb30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800bb34:	4648      	mov	r0, r9
 800bb36:	b2a3      	uxth	r3, r4
 800bb38:	60ec      	str	r4, [r5, #12]
 800bb3a:	f7ff ff6b 	bl	800ba14 <uxr_common_create_entity>
 800bb3e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 800bb42:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 800bb46:	bf00      	nop

0800bb48 <uxr_object_id>:
 800bb48:	b082      	sub	sp, #8
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f88d 1006 	strb.w	r1, [sp, #6]
 800bb50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb54:	f360 030f 	bfi	r3, r0, #0, #16
 800bb58:	f362 431f 	bfi	r3, r2, #16, #16
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	b002      	add	sp, #8
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop

0800bb64 <uxr_object_id_from_raw>:
 800bb64:	7843      	ldrb	r3, [r0, #1]
 800bb66:	7801      	ldrb	r1, [r0, #0]
 800bb68:	b082      	sub	sp, #8
 800bb6a:	f003 000f 	and.w	r0, r3, #15
 800bb6e:	f88d 0006 	strb.w	r0, [sp, #6]
 800bb72:	091b      	lsrs	r3, r3, #4
 800bb74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800bb7e:	f363 020f 	bfi	r2, r3, #0, #16
 800bb82:	f361 421f 	bfi	r2, r1, #16, #16
 800bb86:	4610      	mov	r0, r2
 800bb88:	b002      	add	sp, #8
 800bb8a:	4770      	bx	lr

0800bb8c <uxr_object_id_to_raw>:
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800bb92:	b082      	sub	sp, #8
 800bb94:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800bb98:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800bb9c:	700a      	strb	r2, [r1, #0]
 800bb9e:	704b      	strb	r3, [r1, #1]
 800bba0:	b002      	add	sp, #8
 800bba2:	4770      	bx	lr

0800bba4 <uxr_buffer_request_data>:
 800bba4:	b530      	push	{r4, r5, lr}
 800bba6:	b095      	sub	sp, #84	; 0x54
 800bba8:	4604      	mov	r4, r0
 800bbaa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800bbac:	9105      	str	r1, [sp, #20]
 800bbae:	2d00      	cmp	r5, #0
 800bbb0:	bf14      	ite	ne
 800bbb2:	2101      	movne	r1, #1
 800bbb4:	2100      	moveq	r1, #0
 800bbb6:	9204      	str	r2, [sp, #16]
 800bbb8:	f04f 0200 	mov.w	r2, #0
 800bbbc:	9303      	str	r3, [sp, #12]
 800bbbe:	f88d 301c 	strb.w	r3, [sp, #28]
 800bbc2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800bbc6:	f88d 201d 	strb.w	r2, [sp, #29]
 800bbca:	f88d 201e 	strb.w	r2, [sp, #30]
 800bbce:	d021      	beq.n	800bc14 <uxr_buffer_request_data+0x70>
 800bbd0:	686a      	ldr	r2, [r5, #4]
 800bbd2:	682b      	ldr	r3, [r5, #0]
 800bbd4:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800bbd8:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800bbdc:	2210      	movs	r2, #16
 800bbde:	2000      	movs	r0, #0
 800bbe0:	2108      	movs	r1, #8
 800bbe2:	e9cd 1000 	strd	r1, r0, [sp]
 800bbe6:	ab0c      	add	r3, sp, #48	; 0x30
 800bbe8:	9905      	ldr	r1, [sp, #20]
 800bbea:	4620      	mov	r0, r4
 800bbec:	f001 f83c 	bl	800cc68 <uxr_prepare_stream_to_write_submessage>
 800bbf0:	b918      	cbnz	r0, 800bbfa <uxr_buffer_request_data+0x56>
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	b015      	add	sp, #84	; 0x54
 800bbf8:	bd30      	pop	{r4, r5, pc}
 800bbfa:	9904      	ldr	r1, [sp, #16]
 800bbfc:	aa06      	add	r2, sp, #24
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f001 f96c 	bl	800cedc <uxr_init_base_object_request>
 800bc04:	a906      	add	r1, sp, #24
 800bc06:	4604      	mov	r4, r0
 800bc08:	a80c      	add	r0, sp, #48	; 0x30
 800bc0a:	f002 f8ed 	bl	800dde8 <uxr_serialize_READ_DATA_Payload>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	b015      	add	sp, #84	; 0x54
 800bc12:	bd30      	pop	{r4, r5, pc}
 800bc14:	2208      	movs	r2, #8
 800bc16:	e7e2      	b.n	800bbde <uxr_buffer_request_data+0x3a>

0800bc18 <uxr_buffer_cancel_data>:
 800bc18:	b530      	push	{r4, r5, lr}
 800bc1a:	b095      	sub	sp, #84	; 0x54
 800bc1c:	2400      	movs	r4, #0
 800bc1e:	2308      	movs	r3, #8
 800bc20:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	9205      	str	r2, [sp, #20]
 800bc28:	2501      	movs	r5, #1
 800bc2a:	ab0c      	add	r3, sp, #48	; 0x30
 800bc2c:	2210      	movs	r2, #16
 800bc2e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800bc32:	f88d 401e 	strb.w	r4, [sp, #30]
 800bc36:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800bc3a:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800bc3e:	9103      	str	r1, [sp, #12]
 800bc40:	4604      	mov	r4, r0
 800bc42:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800bc46:	f001 f80f 	bl	800cc68 <uxr_prepare_stream_to_write_submessage>
 800bc4a:	b918      	cbnz	r0, 800bc54 <uxr_buffer_cancel_data+0x3c>
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	b015      	add	sp, #84	; 0x54
 800bc52:	bd30      	pop	{r4, r5, pc}
 800bc54:	9905      	ldr	r1, [sp, #20]
 800bc56:	aa06      	add	r2, sp, #24
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f001 f93f 	bl	800cedc <uxr_init_base_object_request>
 800bc5e:	a906      	add	r1, sp, #24
 800bc60:	4604      	mov	r4, r0
 800bc62:	a80c      	add	r0, sp, #48	; 0x30
 800bc64:	f002 f8c0 	bl	800dde8 <uxr_serialize_READ_DATA_Payload>
 800bc68:	4620      	mov	r0, r4
 800bc6a:	b015      	add	sp, #84	; 0x54
 800bc6c:	bd30      	pop	{r4, r5, pc}
 800bc6e:	bf00      	nop

0800bc70 <read_submessage_format>:
 800bc70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc74:	b095      	sub	sp, #84	; 0x54
 800bc76:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800bc7a:	b113      	cbz	r3, 800bc82 <read_submessage_format+0x12>
 800bc7c:	b015      	add	sp, #84	; 0x54
 800bc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc82:	460c      	mov	r4, r1
 800bc84:	4616      	mov	r6, r2
 800bc86:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800bc8a:	461d      	mov	r5, r3
 800bc8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bc8e:	9304      	str	r3, [sp, #16]
 800bc90:	1a52      	subs	r2, r2, r1
 800bc92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc94:	9305      	str	r3, [sp, #20]
 800bc96:	4607      	mov	r7, r0
 800bc98:	a80c      	add	r0, sp, #48	; 0x30
 800bc9a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800bc9e:	f7fe f849 	bl	8009d34 <ucdr_init_buffer>
 800bca2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bca6:	a80c      	add	r0, sp, #48	; 0x30
 800bca8:	f7fe f81a 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 800bcac:	69e3      	ldr	r3, [r4, #28]
 800bcae:	b193      	cbz	r3, 800bcd6 <read_submessage_format+0x66>
 800bcb0:	f1b8 0f07 	cmp.w	r8, #7
 800bcb4:	751d      	strb	r5, [r3, #20]
 800bcb6:	d03e      	beq.n	800bd36 <read_submessage_format+0xc6>
 800bcb8:	f1b8 0f08 	cmp.w	r8, #8
 800bcbc:	d02c      	beq.n	800bd18 <read_submessage_format+0xa8>
 800bcbe:	f1b8 0f06 	cmp.w	r8, #6
 800bcc2:	d011      	beq.n	800bce8 <read_submessage_format+0x78>
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	751a      	strb	r2, [r3, #20]
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4620      	mov	r0, r4
 800bccc:	f7fe f882 	bl	8009dd4 <ucdr_advance_buffer>
 800bcd0:	b015      	add	sp, #84	; 0x54
 800bcd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcd6:	f1b8 0f07 	cmp.w	r8, #7
 800bcda:	d02c      	beq.n	800bd36 <read_submessage_format+0xc6>
 800bcdc:	f1b8 0f08 	cmp.w	r8, #8
 800bce0:	d01a      	beq.n	800bd18 <read_submessage_format+0xa8>
 800bce2:	f1b8 0f06 	cmp.w	r8, #6
 800bce6:	d1ef      	bne.n	800bcc8 <read_submessage_format+0x58>
 800bce8:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800bcec:	b18d      	cbz	r5, 800bd12 <read_submessage_format+0xa2>
 800bcee:	2306      	movs	r3, #6
 800bcf0:	f88d 3016 	strb.w	r3, [sp, #22]
 800bcf4:	aa0c      	add	r2, sp, #48	; 0x30
 800bcf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcfa:	9302      	str	r3, [sp, #8]
 800bcfc:	9200      	str	r2, [sp, #0]
 800bcfe:	9b04      	ldr	r3, [sp, #16]
 800bd00:	9905      	ldr	r1, [sp, #20]
 800bd02:	9601      	str	r6, [sp, #4]
 800bd04:	464a      	mov	r2, r9
 800bd06:	4638      	mov	r0, r7
 800bd08:	47a8      	blx	r5
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800bd10:	69e3      	ldr	r3, [r4, #28]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1d6      	bne.n	800bcc4 <read_submessage_format+0x54>
 800bd16:	e7d7      	b.n	800bcc8 <read_submessage_format+0x58>
 800bd18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	d0f8      	beq.n	800bd12 <read_submessage_format+0xa2>
 800bd20:	a906      	add	r1, sp, #24
 800bd22:	a80c      	add	r0, sp, #48	; 0x30
 800bd24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bd26:	f002 f925 	bl	800df74 <uxr_deserialize_SampleIdentity>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d13c      	bne.n	800bda8 <read_submessage_format+0x138>
 800bd2e:	69e3      	ldr	r3, [r4, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1c7      	bne.n	800bcc4 <read_submessage_format+0x54>
 800bd34:	e7c8      	b.n	800bcc8 <read_submessage_format+0x58>
 800bd36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd3a:	b132      	cbz	r2, 800bd4a <read_submessage_format+0xda>
 800bd3c:	a906      	add	r1, sp, #24
 800bd3e:	a80c      	add	r0, sp, #48	; 0x30
 800bd40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bd42:	f001 fdd5 	bl	800d8f0 <uxr_deserialize_BaseObjectRequest>
 800bd46:	b930      	cbnz	r0, 800bd56 <read_submessage_format+0xe6>
 800bd48:	69e3      	ldr	r3, [r4, #28]
 800bd4a:	68a2      	ldr	r2, [r4, #8]
 800bd4c:	4432      	add	r2, r6
 800bd4e:	60a2      	str	r2, [r4, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1b7      	bne.n	800bcc4 <read_submessage_format+0x54>
 800bd54:	e7b8      	b.n	800bcc8 <read_submessage_format+0x58>
 800bd56:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bd5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd5c:	1a52      	subs	r2, r2, r1
 800bd5e:	a80c      	add	r0, sp, #48	; 0x30
 800bd60:	1aed      	subs	r5, r5, r3
 800bd62:	f7fd ffe7 	bl	8009d34 <ucdr_init_buffer>
 800bd66:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bd6a:	a80c      	add	r0, sp, #48	; 0x30
 800bd6c:	f7fd ffb8 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 800bd70:	4435      	add	r5, r6
 800bd72:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bd76:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bd7a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800bd7e:	9002      	str	r0, [sp, #8]
 800bd80:	2207      	movs	r2, #7
 800bd82:	f88d 2016 	strb.w	r2, [sp, #22]
 800bd86:	b2ad      	uxth	r5, r5
 800bd88:	aa0c      	add	r2, sp, #48	; 0x30
 800bd8a:	9200      	str	r2, [sp, #0]
 800bd8c:	9501      	str	r5, [sp, #4]
 800bd8e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	9905      	ldr	r1, [sp, #20]
 800bd96:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800bd9a:	464a      	mov	r2, r9
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	47a8      	blx	r5
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800bda6:	e7cf      	b.n	800bd48 <read_submessage_format+0xd8>
 800bda8:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bdac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdae:	1a52      	subs	r2, r2, r1
 800bdb0:	a80c      	add	r0, sp, #48	; 0x30
 800bdb2:	1aed      	subs	r5, r5, r3
 800bdb4:	f7fd ffbe 	bl	8009d34 <ucdr_init_buffer>
 800bdb8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bdbc:	a80c      	add	r0, sp, #48	; 0x30
 800bdbe:	f7fd ff8f 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 800bdc2:	4435      	add	r5, r6
 800bdc4:	2308      	movs	r3, #8
 800bdc6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bdca:	f88d 3016 	strb.w	r3, [sp, #22]
 800bdce:	b2ad      	uxth	r5, r5
 800bdd0:	ab0c      	add	r3, sp, #48	; 0x30
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	9501      	str	r5, [sp, #4]
 800bdd8:	ab06      	add	r3, sp, #24
 800bdda:	9905      	ldr	r1, [sp, #20]
 800bddc:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800bde0:	464a      	mov	r2, r9
 800bde2:	4638      	mov	r0, r7
 800bde4:	47a8      	blx	r5
 800bde6:	2301      	movs	r3, #1
 800bde8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800bdec:	e79f      	b.n	800bd2e <read_submessage_format+0xbe>
 800bdee:	bf00      	nop

0800bdf0 <on_get_fragmentation_info>:
 800bdf0:	b500      	push	{lr}
 800bdf2:	b08b      	sub	sp, #44	; 0x2c
 800bdf4:	4601      	mov	r1, r0
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	a802      	add	r0, sp, #8
 800bdfa:	f7fd ff9b 	bl	8009d34 <ucdr_init_buffer>
 800bdfe:	f10d 0305 	add.w	r3, sp, #5
 800be02:	a802      	add	r0, sp, #8
 800be04:	f10d 0206 	add.w	r2, sp, #6
 800be08:	a901      	add	r1, sp, #4
 800be0a:	f001 f9eb 	bl	800d1e4 <uxr_read_submessage_header>
 800be0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be12:	2b0d      	cmp	r3, #13
 800be14:	d003      	beq.n	800be1e <on_get_fragmentation_info+0x2e>
 800be16:	2000      	movs	r0, #0
 800be18:	b00b      	add	sp, #44	; 0x2c
 800be1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be22:	f013 0f02 	tst.w	r3, #2
 800be26:	bf14      	ite	ne
 800be28:	2002      	movne	r0, #2
 800be2a:	2001      	moveq	r0, #1
 800be2c:	b00b      	add	sp, #44	; 0x2c
 800be2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be32:	bf00      	nop

0800be34 <read_submessage_get_info>:
 800be34:	b570      	push	{r4, r5, r6, lr}
 800be36:	2500      	movs	r5, #0
 800be38:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800be3c:	4604      	mov	r4, r0
 800be3e:	f44f 7224 	mov.w	r2, #656	; 0x290
 800be42:	460e      	mov	r6, r1
 800be44:	a810      	add	r0, sp, #64	; 0x40
 800be46:	4629      	mov	r1, r5
 800be48:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800be4c:	f007 f9be 	bl	80131cc <memset>
 800be50:	a903      	add	r1, sp, #12
 800be52:	4630      	mov	r0, r6
 800be54:	f001 ff0a 	bl	800dc6c <uxr_deserialize_GET_INFO_Payload>
 800be58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800be5c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800be60:	4620      	mov	r0, r4
 800be62:	f001 f833 	bl	800cecc <uxr_session_header_offset>
 800be66:	462b      	mov	r3, r5
 800be68:	9000      	str	r0, [sp, #0]
 800be6a:	a905      	add	r1, sp, #20
 800be6c:	a808      	add	r0, sp, #32
 800be6e:	220c      	movs	r2, #12
 800be70:	f7fd ff4e 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 800be74:	a910      	add	r1, sp, #64	; 0x40
 800be76:	a808      	add	r0, sp, #32
 800be78:	f001 ff6a 	bl	800dd50 <uxr_serialize_INFO_Payload>
 800be7c:	9b08      	ldr	r3, [sp, #32]
 800be7e:	462a      	mov	r2, r5
 800be80:	4629      	mov	r1, r5
 800be82:	4620      	mov	r0, r4
 800be84:	f000 ffca 	bl	800ce1c <uxr_stamp_session_header>
 800be88:	a808      	add	r0, sp, #32
 800be8a:	f7fd ff7f 	bl	8009d8c <ucdr_buffer_length>
 800be8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be90:	4602      	mov	r2, r0
 800be92:	a905      	add	r1, sp, #20
 800be94:	e9d3 0400 	ldrd	r0, r4, [r3]
 800be98:	47a0      	blx	r4
 800be9a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800be9e:	bd70      	pop	{r4, r5, r6, pc}

0800bea0 <write_submessage_acknack.isra.0>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	b092      	sub	sp, #72	; 0x48
 800bea4:	4605      	mov	r5, r0
 800bea6:	460e      	mov	r6, r1
 800bea8:	4614      	mov	r4, r2
 800beaa:	f001 f80f 	bl	800cecc <uxr_session_header_offset>
 800beae:	a905      	add	r1, sp, #20
 800beb0:	9000      	str	r0, [sp, #0]
 800beb2:	2300      	movs	r3, #0
 800beb4:	a80a      	add	r0, sp, #40	; 0x28
 800beb6:	2211      	movs	r2, #17
 800beb8:	f7fd ff2a 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 800bebc:	2218      	movs	r2, #24
 800bebe:	fb02 5404 	mla	r4, r2, r4, r5
 800bec2:	2300      	movs	r3, #0
 800bec4:	2205      	movs	r2, #5
 800bec6:	3450      	adds	r4, #80	; 0x50
 800bec8:	a80a      	add	r0, sp, #40	; 0x28
 800beca:	210a      	movs	r1, #10
 800becc:	f001 f970 	bl	800d1b0 <uxr_buffer_submessage_header>
 800bed0:	a903      	add	r1, sp, #12
 800bed2:	4620      	mov	r0, r4
 800bed4:	f005 fe90 	bl	8011bf8 <uxr_compute_acknack>
 800bed8:	a903      	add	r1, sp, #12
 800beda:	ba43      	rev16	r3, r0
 800bedc:	a80a      	add	r0, sp, #40	; 0x28
 800bede:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bee2:	f88d 6010 	strb.w	r6, [sp, #16]
 800bee6:	f001 ffa3 	bl	800de30 <uxr_serialize_ACKNACK_Payload>
 800beea:	2200      	movs	r2, #0
 800beec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beee:	4611      	mov	r1, r2
 800bef0:	4628      	mov	r0, r5
 800bef2:	f000 ff93 	bl	800ce1c <uxr_stamp_session_header>
 800bef6:	a80a      	add	r0, sp, #40	; 0x28
 800bef8:	f7fd ff48 	bl	8009d8c <ucdr_buffer_length>
 800befc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800befe:	4602      	mov	r2, r0
 800bf00:	a905      	add	r1, sp, #20
 800bf02:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bf06:	47a0      	blx	r4
 800bf08:	b012      	add	sp, #72	; 0x48
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}

0800bf0c <uxr_init_session>:
 800bf0c:	b5d0      	push	{r4, r6, r7, lr}
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2600      	movs	r6, #0
 800bf12:	2700      	movs	r7, #0
 800bf14:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800bf18:	4604      	mov	r4, r0
 800bf1a:	6701      	str	r1, [r0, #112]	; 0x70
 800bf1c:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800bf20:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800bf24:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800bf28:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800bf2c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800bf30:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800bf34:	2181      	movs	r1, #129	; 0x81
 800bf36:	f000 fedb 	bl	800ccf0 <uxr_init_session_info>
 800bf3a:	f104 0008 	add.w	r0, r4, #8
 800bf3e:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800bf42:	f001 b851 	b.w	800cfe8 <uxr_init_stream_storage>
 800bf46:	bf00      	nop

0800bf48 <uxr_set_status_callback>:
 800bf48:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop

0800bf50 <uxr_set_topic_callback>:
 800bf50:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop

0800bf58 <uxr_set_request_callback>:
 800bf58:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop

0800bf60 <uxr_set_reply_callback>:
 800bf60:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop

0800bf68 <uxr_create_output_best_effort_stream>:
 800bf68:	b510      	push	{r4, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	e9cd 2100 	strd	r2, r1, [sp]
 800bf70:	4604      	mov	r4, r0
 800bf72:	f000 ffab 	bl	800cecc <uxr_session_header_offset>
 800bf76:	e9dd 2100 	ldrd	r2, r1, [sp]
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	f104 0008 	add.w	r0, r4, #8
 800bf80:	b004      	add	sp, #16
 800bf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf86:	f001 b879 	b.w	800d07c <uxr_add_output_best_effort_buffer>
 800bf8a:	bf00      	nop

0800bf8c <uxr_create_output_reliable_stream>:
 800bf8c:	b530      	push	{r4, r5, lr}
 800bf8e:	b089      	sub	sp, #36	; 0x24
 800bf90:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800bf94:	9303      	str	r3, [sp, #12]
 800bf96:	4604      	mov	r4, r0
 800bf98:	f000 ff98 	bl	800cecc <uxr_session_header_offset>
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bfa2:	9905      	ldr	r1, [sp, #20]
 800bfa4:	9500      	str	r5, [sp, #0]
 800bfa6:	f104 0008 	add.w	r0, r4, #8
 800bfaa:	f001 f879 	bl	800d0a0 <uxr_add_output_reliable_buffer>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	b2c3      	uxtb	r3, r0
 800bfb2:	f363 0207 	bfi	r2, r3, #0, #8
 800bfb6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bfba:	f363 220f 	bfi	r2, r3, #8, #8
 800bfbe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bfc2:	f363 4217 	bfi	r2, r3, #16, #8
 800bfc6:	0e03      	lsrs	r3, r0, #24
 800bfc8:	f363 621f 	bfi	r2, r3, #24, #8
 800bfcc:	4610      	mov	r0, r2
 800bfce:	b009      	add	sp, #36	; 0x24
 800bfd0:	bd30      	pop	{r4, r5, pc}
 800bfd2:	bf00      	nop

0800bfd4 <uxr_create_input_best_effort_stream>:
 800bfd4:	b082      	sub	sp, #8
 800bfd6:	3008      	adds	r0, #8
 800bfd8:	b002      	add	sp, #8
 800bfda:	f001 b87b 	b.w	800d0d4 <uxr_add_input_best_effort_buffer>
 800bfde:	bf00      	nop

0800bfe0 <uxr_create_input_reliable_stream>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	4c0b      	ldr	r4, [pc, #44]	; (800c014 <uxr_create_input_reliable_stream+0x34>)
 800bfe6:	9400      	str	r4, [sp, #0]
 800bfe8:	3008      	adds	r0, #8
 800bfea:	f001 f889 	bl	800d100 <uxr_add_input_reliable_buffer>
 800bfee:	2200      	movs	r2, #0
 800bff0:	b2c3      	uxtb	r3, r0
 800bff2:	f363 0207 	bfi	r2, r3, #0, #8
 800bff6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bffa:	f363 220f 	bfi	r2, r3, #8, #8
 800bffe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c002:	f363 4217 	bfi	r2, r3, #16, #8
 800c006:	0e03      	lsrs	r3, r0, #24
 800c008:	f363 621f 	bfi	r2, r3, #24, #8
 800c00c:	4610      	mov	r0, r2
 800c00e:	b004      	add	sp, #16
 800c010:	bd10      	pop	{r4, pc}
 800c012:	bf00      	nop
 800c014:	0800bdf1 	.word	0x0800bdf1

0800c018 <uxr_epoch_nanos>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	4604      	mov	r4, r0
 800c01c:	f001 f92a 	bl	800d274 <uxr_nanos>
 800c020:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800c024:	1ac0      	subs	r0, r0, r3
 800c026:	eb61 0102 	sbc.w	r1, r1, r2
 800c02a:	bd10      	pop	{r4, pc}

0800c02c <uxr_flash_output_streams>:
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	7e03      	ldrb	r3, [r0, #24]
 800c032:	b084      	sub	sp, #16
 800c034:	4604      	mov	r4, r0
 800c036:	b1fb      	cbz	r3, 800c078 <uxr_flash_output_streams+0x4c>
 800c038:	f04f 0900 	mov.w	r9, #0
 800c03c:	4648      	mov	r0, r9
 800c03e:	f10d 0802 	add.w	r8, sp, #2
 800c042:	af03      	add	r7, sp, #12
 800c044:	ae02      	add	r6, sp, #8
 800c046:	2201      	movs	r2, #1
 800c048:	4611      	mov	r1, r2
 800c04a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800c04e:	f000 ff75 	bl	800cf3c <uxr_stream_id>
 800c052:	3508      	adds	r5, #8
 800c054:	4684      	mov	ip, r0
 800c056:	4643      	mov	r3, r8
 800c058:	4628      	mov	r0, r5
 800c05a:	463a      	mov	r2, r7
 800c05c:	4631      	mov	r1, r6
 800c05e:	f8cd c004 	str.w	ip, [sp, #4]
 800c062:	f005 fe51 	bl	8011d08 <uxr_prepare_best_effort_buffer_to_send>
 800c066:	2800      	cmp	r0, #0
 800c068:	d13d      	bne.n	800c0e6 <uxr_flash_output_streams+0xba>
 800c06a:	7e23      	ldrb	r3, [r4, #24]
 800c06c:	f109 0901 	add.w	r9, r9, #1
 800c070:	fa5f f089 	uxtb.w	r0, r9
 800c074:	4283      	cmp	r3, r0
 800c076:	d8e6      	bhi.n	800c046 <uxr_flash_output_streams+0x1a>
 800c078:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800c07c:	b383      	cbz	r3, 800c0e0 <uxr_flash_output_streams+0xb4>
 800c07e:	f04f 0900 	mov.w	r9, #0
 800c082:	4648      	mov	r0, r9
 800c084:	f10d 0802 	add.w	r8, sp, #2
 800c088:	af03      	add	r7, sp, #12
 800c08a:	ae02      	add	r6, sp, #8
 800c08c:	2201      	movs	r2, #1
 800c08e:	2102      	movs	r1, #2
 800c090:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800c094:	f000 ff52 	bl	800cf3c <uxr_stream_id>
 800c098:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800c09c:	3520      	adds	r5, #32
 800c09e:	9001      	str	r0, [sp, #4]
 800c0a0:	e00c      	b.n	800c0bc <uxr_flash_output_streams+0x90>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c0a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c0ac:	f000 feb6 	bl	800ce1c <uxr_stamp_session_header>
 800c0b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0b2:	9a03      	ldr	r2, [sp, #12]
 800c0b4:	9902      	ldr	r1, [sp, #8]
 800c0b6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800c0ba:	47d0      	blx	sl
 800c0bc:	4643      	mov	r3, r8
 800c0be:	463a      	mov	r2, r7
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f006 f834 	bl	8012130 <uxr_prepare_next_reliable_buffer_to_send>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e8      	bne.n	800c0a2 <uxr_flash_output_streams+0x76>
 800c0d0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800c0d4:	f109 0901 	add.w	r9, r9, #1
 800c0d8:	fa5f f089 	uxtb.w	r0, r9
 800c0dc:	4283      	cmp	r3, r0
 800c0de:	d8d5      	bhi.n	800c08c <uxr_flash_output_streams+0x60>
 800c0e0:	b004      	add	sp, #16
 800c0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e6:	9b02      	ldr	r3, [sp, #8]
 800c0e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c0ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f000 fe93 	bl	800ce1c <uxr_stamp_session_header>
 800c0f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0f8:	9a03      	ldr	r2, [sp, #12]
 800c0fa:	9902      	ldr	r1, [sp, #8]
 800c0fc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c100:	47a8      	blx	r5
 800c102:	f109 0901 	add.w	r9, r9, #1
 800c106:	7e23      	ldrb	r3, [r4, #24]
 800c108:	fa5f f089 	uxtb.w	r0, r9
 800c10c:	4283      	cmp	r3, r0
 800c10e:	d89a      	bhi.n	800c046 <uxr_flash_output_streams+0x1a>
 800c110:	e7b2      	b.n	800c078 <uxr_flash_output_streams+0x4c>
 800c112:	bf00      	nop

0800c114 <read_submessage_info>:
 800c114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c118:	460d      	mov	r5, r1
 800c11a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800c11e:	4669      	mov	r1, sp
 800c120:	4607      	mov	r7, r0
 800c122:	4628      	mov	r0, r5
 800c124:	f001 fca8 	bl	800da78 <uxr_deserialize_BaseObjectReply>
 800c128:	a902      	add	r1, sp, #8
 800c12a:	4604      	mov	r4, r0
 800c12c:	4628      	mov	r0, r5
 800c12e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800c132:	f7fc fca5 	bl	8008a80 <ucdr_deserialize_bool>
 800c136:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c13a:	4004      	ands	r4, r0
 800c13c:	b2e4      	uxtb	r4, r4
 800c13e:	b95b      	cbnz	r3, 800c158 <read_submessage_info+0x44>
 800c140:	a987      	add	r1, sp, #540	; 0x21c
 800c142:	4628      	mov	r0, r5
 800c144:	f7fc fc9c 	bl	8008a80 <ucdr_deserialize_bool>
 800c148:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800c14c:	4606      	mov	r6, r0
 800c14e:	b94b      	cbnz	r3, 800c164 <read_submessage_info+0x50>
 800c150:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	a903      	add	r1, sp, #12
 800c15a:	4628      	mov	r0, r5
 800c15c:	f001 fb1a 	bl	800d794 <uxr_deserialize_ObjectVariant>
 800c160:	4004      	ands	r4, r0
 800c162:	e7ed      	b.n	800c140 <read_submessage_info+0x2c>
 800c164:	a988      	add	r1, sp, #544	; 0x220
 800c166:	4628      	mov	r0, r5
 800c168:	f7fc fcba 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800c16c:	4234      	tst	r4, r6
 800c16e:	d0ef      	beq.n	800c150 <read_submessage_info+0x3c>
 800c170:	2800      	cmp	r0, #0
 800c172:	d0ed      	beq.n	800c150 <read_submessage_info+0x3c>
 800c174:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800c178:	2b0d      	cmp	r3, #13
 800c17a:	d1e9      	bne.n	800c150 <read_submessage_info+0x3c>
 800c17c:	4628      	mov	r0, r5
 800c17e:	a98a      	add	r1, sp, #552	; 0x228
 800c180:	f7fd fa54 	bl	800962c <ucdr_deserialize_int16_t>
 800c184:	b140      	cbz	r0, 800c198 <read_submessage_info+0x84>
 800c186:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dd07      	ble.n	800c19e <read_submessage_info+0x8a>
 800c18e:	f1b8 0f00 	cmp.w	r8, #0
 800c192:	bf14      	ite	ne
 800c194:	2001      	movne	r0, #1
 800c196:	2002      	moveq	r0, #2
 800c198:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800c19c:	e7d8      	b.n	800c150 <read_submessage_info+0x3c>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e7fa      	b.n	800c198 <read_submessage_info+0x84>
 800c1a2:	bf00      	nop

0800c1a4 <read_submessage_list>:
 800c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a8:	b098      	sub	sp, #96	; 0x60
 800c1aa:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800c4b0 <read_submessage_list+0x30c>
 800c1ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4688      	mov	r8, r1
 800c1b4:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800c1b8:	aa0e      	add	r2, sp, #56	; 0x38
 800c1ba:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800c1be:	4640      	mov	r0, r8
 800c1c0:	f001 f810 	bl	800d1e4 <uxr_read_submessage_header>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	f000 813d 	beq.w	800c444 <read_submessage_list+0x2a0>
 800c1ca:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800c1ce:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800c1d2:	3b02      	subs	r3, #2
 800c1d4:	2b0d      	cmp	r3, #13
 800c1d6:	d8ed      	bhi.n	800c1b4 <read_submessage_list+0x10>
 800c1d8:	a101      	add	r1, pc, #4	; (adr r1, 800c1e0 <read_submessage_list+0x3c>)
 800c1da:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c43b 	.word	0x0800c43b
 800c1e4:	0800c1b5 	.word	0x0800c1b5
 800c1e8:	0800c42b 	.word	0x0800c42b
 800c1ec:	0800c3cf 	.word	0x0800c3cf
 800c1f0:	0800c3c5 	.word	0x0800c3c5
 800c1f4:	0800c1b5 	.word	0x0800c1b5
 800c1f8:	0800c1b5 	.word	0x0800c1b5
 800c1fc:	0800c327 	.word	0x0800c327
 800c200:	0800c2b9 	.word	0x0800c2b9
 800c204:	0800c277 	.word	0x0800c277
 800c208:	0800c1b5 	.word	0x0800c1b5
 800c20c:	0800c1b5 	.word	0x0800c1b5
 800c210:	0800c1b5 	.word	0x0800c1b5
 800c214:	0800c219 	.word	0x0800c219
 800c218:	a912      	add	r1, sp, #72	; 0x48
 800c21a:	4640      	mov	r0, r8
 800c21c:	f001 fe58 	bl	800ded0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800c220:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800c224:	2d00      	cmp	r5, #0
 800c226:	f000 8115 	beq.w	800c454 <read_submessage_list+0x2b0>
 800c22a:	f001 f823 	bl	800d274 <uxr_nanos>
 800c22e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c230:	460b      	mov	r3, r1
 800c232:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c234:	2700      	movs	r7, #0
 800c236:	fbc9 6701 	smlal	r6, r7, r9, r1
 800c23a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c23e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c240:	4602      	mov	r2, r0
 800c242:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c244:	460e      	mov	r6, r1
 800c246:	2700      	movs	r7, #0
 800c248:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c24c:	9106      	str	r1, [sp, #24]
 800c24e:	fbc9 6700 	smlal	r6, r7, r9, r0
 800c252:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c254:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c258:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c25a:	2700      	movs	r7, #0
 800c25c:	4608      	mov	r0, r1
 800c25e:	4639      	mov	r1, r7
 800c260:	fbc9 0106 	smlal	r0, r1, r9, r6
 800c264:	e9cd 0100 	strd	r0, r1, [sp]
 800c268:	4620      	mov	r0, r4
 800c26a:	47a8      	blx	r5
 800c26c:	f04f 0301 	mov.w	r3, #1
 800c270:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800c274:	e79e      	b.n	800c1b4 <read_submessage_list+0x10>
 800c276:	a912      	add	r1, sp, #72	; 0x48
 800c278:	4640      	mov	r0, r8
 800c27a:	f001 fe17 	bl	800deac <uxr_deserialize_HEARTBEAT_Payload>
 800c27e:	2100      	movs	r1, #0
 800c280:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800c284:	f000 fe84 	bl	800cf90 <uxr_stream_id_from_raw>
 800c288:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c28c:	4603      	mov	r3, r0
 800c28e:	4629      	mov	r1, r5
 800c290:	f104 0008 	add.w	r0, r4, #8
 800c294:	9311      	str	r3, [sp, #68]	; 0x44
 800c296:	f000 ff69 	bl	800d16c <uxr_get_input_reliable_stream>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d08a      	beq.n	800c1b4 <read_submessage_list+0x10>
 800c29e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800c2a2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800c2a6:	f005 fc9b 	bl	8011be0 <uxr_process_heartbeat>
 800c2aa:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800c2ae:	462a      	mov	r2, r5
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f7ff fdf5 	bl	800bea0 <write_submessage_acknack.isra.0>
 800c2b6:	e77d      	b.n	800c1b4 <read_submessage_list+0x10>
 800c2b8:	a912      	add	r1, sp, #72	; 0x48
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	f001 fdce 	bl	800de5c <uxr_deserialize_ACKNACK_Payload>
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800c2c6:	f000 fe63 	bl	800cf90 <uxr_stream_id_from_raw>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c2d0:	f104 0008 	add.w	r0, r4, #8
 800c2d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2d6:	f000 ff33 	bl	800d140 <uxr_get_output_reliable_stream>
 800c2da:	4605      	mov	r5, r0
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f43f af69 	beq.w	800c1b4 <read_submessage_list+0x10>
 800c2e2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800c2e6:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800c2ea:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800c2ee:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c2f2:	b289      	uxth	r1, r1
 800c2f4:	f005 ffc4 	bl	8012280 <uxr_process_acknack>
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	f005 ff87 	bl	801220c <uxr_begin_output_nack_buffer_it>
 800c2fe:	af10      	add	r7, sp, #64	; 0x40
 800c300:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800c304:	e005      	b.n	800c312 <read_submessage_list+0x16e>
 800c306:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c308:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c30a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c30c:	e9d3 0600 	ldrd	r0, r6, [r3]
 800c310:	47b0      	blx	r6
 800c312:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800c316:	aa11      	add	r2, sp, #68	; 0x44
 800c318:	4639      	mov	r1, r7
 800c31a:	4628      	mov	r0, r5
 800c31c:	f005 ff78 	bl	8012210 <uxr_next_reliable_nack_buffer_to_send>
 800c320:	2800      	cmp	r0, #0
 800c322:	d1f0      	bne.n	800c306 <read_submessage_list+0x162>
 800c324:	e746      	b.n	800c1b4 <read_submessage_list+0x10>
 800c326:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800c32a:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800c32e:	af10      	add	r7, sp, #64	; 0x40
 800c330:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800c334:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800c338:	4639      	mov	r1, r7
 800c33a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800c33e:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800c342:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800c346:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800c34a:	4640      	mov	r0, r8
 800c34c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800c350:	f001 face 	bl	800d8f0 <uxr_deserialize_BaseObjectRequest>
 800c354:	4638      	mov	r0, r7
 800c356:	a911      	add	r1, sp, #68	; 0x44
 800c358:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800c35c:	f000 fddc 	bl	800cf18 <uxr_parse_base_object_request>
 800c360:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800c364:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c366:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800c36a:	9112      	str	r1, [sp, #72]	; 0x48
 800c36c:	3d04      	subs	r5, #4
 800c36e:	f006 060e 	and.w	r6, r6, #14
 800c372:	b2ad      	uxth	r5, r5
 800c374:	f1ba 0f00 	cmp.w	sl, #0
 800c378:	d006      	beq.n	800c388 <read_submessage_list+0x1e4>
 800c37a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	463a      	mov	r2, r7
 800c382:	2300      	movs	r3, #0
 800c384:	4620      	mov	r0, r4
 800c386:	47d0      	blx	sl
 800c388:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c38a:	b168      	cbz	r0, 800c3a8 <read_submessage_list+0x204>
 800c38c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c38e:	2300      	movs	r3, #0
 800c390:	3902      	subs	r1, #2
 800c392:	e002      	b.n	800c39a <read_submessage_list+0x1f6>
 800c394:	3301      	adds	r3, #1
 800c396:	4283      	cmp	r3, r0
 800c398:	d006      	beq.n	800c3a8 <read_submessage_list+0x204>
 800c39a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800c39e:	42ba      	cmp	r2, r7
 800c3a0:	d1f8      	bne.n	800c394 <read_submessage_list+0x1f0>
 800c3a2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	54d1      	strb	r1, [r2, r3]
 800c3a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c3aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3ac:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c3b0:	9302      	str	r3, [sp, #8]
 800c3b2:	e9cd 1000 	strd	r1, r0, [sp]
 800c3b6:	4633      	mov	r3, r6
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	4641      	mov	r1, r8
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f7ff fc57 	bl	800bc70 <read_submessage_format>
 800c3c2:	e6f7      	b.n	800c1b4 <read_submessage_list+0x10>
 800c3c4:	4641      	mov	r1, r8
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f7ff fea4 	bl	800c114 <read_submessage_info>
 800c3cc:	e6f2      	b.n	800c1b4 <read_submessage_list+0x10>
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	d03b      	beq.n	800c44a <read_submessage_list+0x2a6>
 800c3d2:	a912      	add	r1, sp, #72	; 0x48
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	f001 fc9d 	bl	800dd14 <uxr_deserialize_STATUS_Payload>
 800c3da:	a910      	add	r1, sp, #64	; 0x40
 800c3dc:	aa0f      	add	r2, sp, #60	; 0x3c
 800c3de:	a812      	add	r0, sp, #72	; 0x48
 800c3e0:	f000 fd9a 	bl	800cf18 <uxr_parse_base_object_request>
 800c3e4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800c3e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c3ea:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800c3ee:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800c3f2:	9111      	str	r1, [sp, #68]	; 0x44
 800c3f4:	b135      	cbz	r5, 800c404 <read_submessage_list+0x260>
 800c3f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	463b      	mov	r3, r7
 800c400:	4620      	mov	r0, r4
 800c402:	47a8      	blx	r5
 800c404:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c406:	2b00      	cmp	r3, #0
 800c408:	f43f aed4 	beq.w	800c1b4 <read_submessage_list+0x10>
 800c40c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c40e:	2100      	movs	r1, #0
 800c410:	3802      	subs	r0, #2
 800c412:	e003      	b.n	800c41c <read_submessage_list+0x278>
 800c414:	3101      	adds	r1, #1
 800c416:	4299      	cmp	r1, r3
 800c418:	f43f aecc 	beq.w	800c1b4 <read_submessage_list+0x10>
 800c41c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800c420:	42b2      	cmp	r2, r6
 800c422:	d1f7      	bne.n	800c414 <read_submessage_list+0x270>
 800c424:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c426:	545f      	strb	r7, [r3, r1]
 800c428:	e6c4      	b.n	800c1b4 <read_submessage_list+0x10>
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	f47f aec2 	bne.w	800c1b4 <read_submessage_list+0x10>
 800c430:	4641      	mov	r1, r8
 800c432:	4620      	mov	r0, r4
 800c434:	f000 fcb4 	bl	800cda0 <uxr_read_create_session_status>
 800c438:	e6bc      	b.n	800c1b4 <read_submessage_list+0x10>
 800c43a:	4641      	mov	r1, r8
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7ff fcf9 	bl	800be34 <read_submessage_get_info>
 800c442:	e6b7      	b.n	800c1b4 <read_submessage_list+0x10>
 800c444:	b018      	add	sp, #96	; 0x60
 800c446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44a:	4641      	mov	r1, r8
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fcb3 	bl	800cdb8 <uxr_read_delete_session_status>
 800c452:	e6af      	b.n	800c1b4 <read_submessage_list+0x10>
 800c454:	f000 ff0e 	bl	800d274 <uxr_nanos>
 800c458:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c45a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c45c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c45e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c460:	2700      	movs	r7, #0
 800c462:	fbc9 6703 	smlal	r6, r7, r9, r3
 800c466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c468:	eb16 0c00 	adds.w	ip, r6, r0
 800c46c:	4618      	mov	r0, r3
 800c46e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c470:	eb47 0e01 	adc.w	lr, r7, r1
 800c474:	461e      	mov	r6, r3
 800c476:	2100      	movs	r1, #0
 800c478:	2700      	movs	r7, #0
 800c47a:	fbc9 0105 	smlal	r0, r1, r9, r5
 800c47e:	fbc9 6702 	smlal	r6, r7, r9, r2
 800c482:	1983      	adds	r3, r0, r6
 800c484:	eb41 0207 	adc.w	r2, r1, r7
 800c488:	ebbc 0303 	subs.w	r3, ip, r3
 800c48c:	9308      	str	r3, [sp, #32]
 800c48e:	eb6e 0302 	sbc.w	r3, lr, r2
 800c492:	9309      	str	r3, [sp, #36]	; 0x24
 800c494:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c498:	0fd3      	lsrs	r3, r2, #31
 800c49a:	18c9      	adds	r1, r1, r3
 800c49c:	f142 0200 	adc.w	r2, r2, #0
 800c4a0:	084b      	lsrs	r3, r1, #1
 800c4a2:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800c4a6:	1052      	asrs	r2, r2, #1
 800c4a8:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800c4ac:	e6de      	b.n	800c26c <read_submessage_list+0xc8>
 800c4ae:	bf00      	nop
 800c4b0:	3b9aca00 	.word	0x3b9aca00

0800c4b4 <listen_message_reliably>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	1e0b      	subs	r3, r1, #0
 800c4ba:	b09d      	sub	sp, #116	; 0x74
 800c4bc:	bfb8      	it	lt
 800c4be:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800c4c2:	9305      	str	r3, [sp, #20]
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	f000 feb9 	bl	800d23c <uxr_millis>
 800c4ca:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800c4ce:	4681      	mov	r9, r0
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	f000 8095 	beq.w	800c600 <listen_message_reliably+0x14c>
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4dc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c4e0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4688      	mov	r8, r1
 800c4e8:	46ca      	mov	sl, r9
 800c4ea:	e00f      	b.n	800c50c <listen_message_reliably+0x58>
 800c4ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c4f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4f4:	42a2      	cmp	r2, r4
 800c4f6:	eb73 0105 	sbcs.w	r1, r3, r5
 800c4fa:	bfb8      	it	lt
 800c4fc:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800c500:	3601      	adds	r6, #1
 800c502:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c506:	b2f0      	uxtb	r0, r6
 800c508:	4283      	cmp	r3, r0
 800c50a:	d951      	bls.n	800c5b0 <listen_message_reliably+0xfc>
 800c50c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c510:	2201      	movs	r2, #1
 800c512:	2102      	movs	r1, #2
 800c514:	f000 fd12 	bl	800cf3c <uxr_stream_id>
 800c518:	00e4      	lsls	r4, r4, #3
 800c51a:	f104 0520 	add.w	r5, r4, #32
 800c51e:	443d      	add	r5, r7
 800c520:	4601      	mov	r1, r0
 800c522:	4643      	mov	r3, r8
 800c524:	4652      	mov	r2, sl
 800c526:	4628      	mov	r0, r5
 800c528:	9109      	str	r1, [sp, #36]	; 0x24
 800c52a:	f005 fe43 	bl	80121b4 <uxr_update_output_stream_heartbeat_timestamp>
 800c52e:	193b      	adds	r3, r7, r4
 800c530:	2800      	cmp	r0, #0
 800c532:	d0db      	beq.n	800c4ec <listen_message_reliably+0x38>
 800c534:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800c538:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800c53c:	4638      	mov	r0, r7
 800c53e:	f000 fcc5 	bl	800cecc <uxr_session_header_offset>
 800c542:	3501      	adds	r5, #1
 800c544:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800c548:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c54c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800c550:	9000      	str	r0, [sp, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	4658      	mov	r0, fp
 800c556:	2211      	movs	r2, #17
 800c558:	a90c      	add	r1, sp, #48	; 0x30
 800c55a:	f7fd fbd9 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 800c55e:	2300      	movs	r3, #0
 800c560:	2205      	movs	r2, #5
 800c562:	210b      	movs	r1, #11
 800c564:	4658      	mov	r0, fp
 800c566:	f000 fe23 	bl	800d1b0 <uxr_buffer_submessage_header>
 800c56a:	8968      	ldrh	r0, [r5, #10]
 800c56c:	2101      	movs	r1, #1
 800c56e:	f005 febf 	bl	80122f0 <uxr_seq_num_add>
 800c572:	892a      	ldrh	r2, [r5, #8]
 800c574:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800c578:	4603      	mov	r3, r0
 800c57a:	a90a      	add	r1, sp, #40	; 0x28
 800c57c:	4658      	mov	r0, fp
 800c57e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800c582:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800c586:	f001 fc7d 	bl	800de84 <uxr_serialize_HEARTBEAT_Payload>
 800c58a:	2200      	movs	r2, #0
 800c58c:	4611      	mov	r1, r2
 800c58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c590:	4638      	mov	r0, r7
 800c592:	f000 fc43 	bl	800ce1c <uxr_stamp_session_header>
 800c596:	4658      	mov	r0, fp
 800c598:	f7fd fbf8 	bl	8009d8c <ucdr_buffer_length>
 800c59c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c59e:	4602      	mov	r2, r0
 800c5a0:	a90c      	add	r1, sp, #48	; 0x30
 800c5a2:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c5a6:	443c      	add	r4, r7
 800c5a8:	47a8      	blx	r5
 800c5aa:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800c5ae:	e79f      	b.n	800c4f0 <listen_message_reliably+0x3c>
 800c5b0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800c5b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c5b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c5bc:	4294      	cmp	r4, r2
 800c5be:	bf08      	it	eq
 800c5c0:	428b      	cmpeq	r3, r1
 800c5c2:	d01d      	beq.n	800c600 <listen_message_reliably+0x14c>
 800c5c4:	eba3 030a 	sub.w	r3, r3, sl
 800c5c8:	9905      	ldr	r1, [sp, #20]
 800c5ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bf08      	it	eq
 800c5d0:	2301      	moveq	r3, #1
 800c5d2:	4299      	cmp	r1, r3
 800c5d4:	bfa8      	it	ge
 800c5d6:	4619      	movge	r1, r3
 800c5d8:	6894      	ldr	r4, [r2, #8]
 800c5da:	6810      	ldr	r0, [r2, #0]
 800c5dc:	4689      	mov	r9, r1
 800c5de:	460b      	mov	r3, r1
 800c5e0:	aa08      	add	r2, sp, #32
 800c5e2:	a907      	add	r1, sp, #28
 800c5e4:	47a0      	blx	r4
 800c5e6:	b968      	cbnz	r0, 800c604 <listen_message_reliably+0x150>
 800c5e8:	9b05      	ldr	r3, [sp, #20]
 800c5ea:	eba3 0309 	sub.w	r3, r3, r9
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	9305      	str	r3, [sp, #20]
 800c5f2:	f73f af68 	bgt.w	800c4c6 <listen_message_reliably+0x12>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	b01d      	add	sp, #116	; 0x74
 800c5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c600:	9b05      	ldr	r3, [sp, #20]
 800c602:	e7e1      	b.n	800c5c8 <listen_message_reliably+0x114>
 800c604:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c608:	4604      	mov	r4, r0
 800c60a:	a80c      	add	r0, sp, #48	; 0x30
 800c60c:	f7fd fb92 	bl	8009d34 <ucdr_init_buffer>
 800c610:	2500      	movs	r5, #0
 800c612:	a90c      	add	r1, sp, #48	; 0x30
 800c614:	f10d 031a 	add.w	r3, sp, #26
 800c618:	aa06      	add	r2, sp, #24
 800c61a:	4638      	mov	r0, r7
 800c61c:	f88d 5018 	strb.w	r5, [sp, #24]
 800c620:	f000 fc12 	bl	800ce48 <uxr_read_session_header>
 800c624:	b918      	cbnz	r0, 800c62e <listen_message_reliably+0x17a>
 800c626:	4620      	mov	r0, r4
 800c628:	b01d      	add	sp, #116	; 0x74
 800c62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62e:	4629      	mov	r1, r5
 800c630:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c634:	f000 fcac 	bl	800cf90 <uxr_stream_id_from_raw>
 800c638:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c63c:	2e01      	cmp	r6, #1
 800c63e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c642:	900a      	str	r0, [sp, #40]	; 0x28
 800c644:	fa5f fa80 	uxtb.w	sl, r0
 800c648:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c64c:	d04b      	beq.n	800c6e6 <listen_message_reliably+0x232>
 800c64e:	2e02      	cmp	r6, #2
 800c650:	d00f      	beq.n	800c672 <listen_message_reliably+0x1be>
 800c652:	2e00      	cmp	r6, #0
 800c654:	d1e7      	bne.n	800c626 <listen_message_reliably+0x172>
 800c656:	4631      	mov	r1, r6
 800c658:	4630      	mov	r0, r6
 800c65a:	f000 fc99 	bl	800cf90 <uxr_stream_id_from_raw>
 800c65e:	a90c      	add	r1, sp, #48	; 0x30
 800c660:	4602      	mov	r2, r0
 800c662:	4638      	mov	r0, r7
 800c664:	920a      	str	r2, [sp, #40]	; 0x28
 800c666:	f7ff fd9d 	bl	800c1a4 <read_submessage_list>
 800c66a:	4620      	mov	r0, r4
 800c66c:	b01d      	add	sp, #116	; 0x74
 800c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c672:	4629      	mov	r1, r5
 800c674:	f107 0008 	add.w	r0, r7, #8
 800c678:	f000 fd78 	bl	800d16c <uxr_get_input_reliable_stream>
 800c67c:	4680      	mov	r8, r0
 800c67e:	b348      	cbz	r0, 800c6d4 <listen_message_reliably+0x220>
 800c680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c682:	9202      	str	r2, [sp, #8]
 800c684:	a80c      	add	r0, sp, #48	; 0x30
 800c686:	f7fd fb85 	bl	8009d94 <ucdr_buffer_remaining>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f10d 0019 	add.w	r0, sp, #25
 800c690:	9000      	str	r0, [sp, #0]
 800c692:	9a02      	ldr	r2, [sp, #8]
 800c694:	4649      	mov	r1, r9
 800c696:	4640      	mov	r0, r8
 800c698:	f005 f9a4 	bl	80119e4 <uxr_receive_reliable_message>
 800c69c:	b1d0      	cbz	r0, 800c6d4 <listen_message_reliably+0x220>
 800c69e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d037      	beq.n	800c716 <listen_message_reliably+0x262>
 800c6a6:	ae14      	add	r6, sp, #80	; 0x50
 800c6a8:	f04f 0902 	mov.w	r9, #2
 800c6ac:	e008      	b.n	800c6c0 <listen_message_reliably+0x20c>
 800c6ae:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800c6b2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c6b6:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800c6ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6bc:	f7ff fd72 	bl	800c1a4 <read_submessage_list>
 800c6c0:	4631      	mov	r1, r6
 800c6c2:	2204      	movs	r2, #4
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	f005 fa0d 	bl	8011ae4 <uxr_next_input_reliable_buffer_available>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1ec      	bne.n	800c6ae <listen_message_reliably+0x1fa>
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4651      	mov	r1, sl
 800c6da:	f7ff fbe1 	bl	800bea0 <write_submessage_acknack.isra.0>
 800c6de:	4620      	mov	r0, r4
 800c6e0:	b01d      	add	sp, #116	; 0x74
 800c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f107 0008 	add.w	r0, r7, #8
 800c6ec:	f000 fd34 	bl	800d158 <uxr_get_input_best_effort_stream>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d098      	beq.n	800c626 <listen_message_reliably+0x172>
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	f005 f8f1 	bl	80118dc <uxr_receive_best_effort_message>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d093      	beq.n	800c626 <listen_message_reliably+0x172>
 800c6fe:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800c702:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c706:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c70c:	a90c      	add	r1, sp, #48	; 0x30
 800c70e:	4638      	mov	r0, r7
 800c710:	f7ff fd48 	bl	800c1a4 <read_submessage_list>
 800c714:	e787      	b.n	800c626 <listen_message_reliably+0x172>
 800c716:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800c71a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c71e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c724:	a90c      	add	r1, sp, #48	; 0x30
 800c726:	4638      	mov	r0, r7
 800c728:	f7ff fd3c 	bl	800c1a4 <read_submessage_list>
 800c72c:	e7bb      	b.n	800c6a6 <listen_message_reliably+0x1f2>
 800c72e:	bf00      	nop

0800c730 <uxr_run_session_timeout>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	4604      	mov	r4, r0
 800c734:	460d      	mov	r5, r1
 800c736:	f000 fd81 	bl	800d23c <uxr_millis>
 800c73a:	4606      	mov	r6, r0
 800c73c:	4620      	mov	r0, r4
 800c73e:	f7ff fc75 	bl	800c02c <uxr_flash_output_streams>
 800c742:	4629      	mov	r1, r5
 800c744:	4620      	mov	r0, r4
 800c746:	f7ff feb5 	bl	800c4b4 <listen_message_reliably>
 800c74a:	f000 fd77 	bl	800d23c <uxr_millis>
 800c74e:	1b83      	subs	r3, r0, r6
 800c750:	1ae9      	subs	r1, r5, r3
 800c752:	2900      	cmp	r1, #0
 800c754:	dcf6      	bgt.n	800c744 <uxr_run_session_timeout+0x14>
 800c756:	f104 0008 	add.w	r0, r4, #8
 800c75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c75e:	f000 bd11 	b.w	800d184 <uxr_output_streams_confirmed>
 800c762:	bf00      	nop

0800c764 <uxr_run_session_until_data>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	4604      	mov	r4, r0
 800c768:	460d      	mov	r5, r1
 800c76a:	f000 fd67 	bl	800d23c <uxr_millis>
 800c76e:	4606      	mov	r6, r0
 800c770:	4620      	mov	r0, r4
 800c772:	f7ff fc5b 	bl	800c02c <uxr_flash_output_streams>
 800c776:	2300      	movs	r3, #0
 800c778:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800c77c:	4629      	mov	r1, r5
 800c77e:	e005      	b.n	800c78c <uxr_run_session_until_data+0x28>
 800c780:	f000 fd5c 	bl	800d23c <uxr_millis>
 800c784:	1b83      	subs	r3, r0, r6
 800c786:	1ae9      	subs	r1, r5, r3
 800c788:	2900      	cmp	r1, #0
 800c78a:	dd07      	ble.n	800c79c <uxr_run_session_until_data+0x38>
 800c78c:	4620      	mov	r0, r4
 800c78e:	f7ff fe91 	bl	800c4b4 <listen_message_reliably>
 800c792:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800c796:	2800      	cmp	r0, #0
 800c798:	d0f2      	beq.n	800c780 <uxr_run_session_until_data+0x1c>
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}
 800c7a2:	bf00      	nop

0800c7a4 <uxr_run_session_until_confirm_delivery>:
 800c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	f000 fd46 	bl	800d23c <uxr_millis>
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7ff fc3a 	bl	800c02c <uxr_flash_output_streams>
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	f106 0808 	add.w	r8, r6, #8
 800c7be:	bfa8      	it	ge
 800c7c0:	462c      	movge	r4, r5
 800c7c2:	da07      	bge.n	800c7d4 <uxr_run_session_until_confirm_delivery+0x30>
 800c7c4:	e00e      	b.n	800c7e4 <uxr_run_session_until_confirm_delivery+0x40>
 800c7c6:	f7ff fe75 	bl	800c4b4 <listen_message_reliably>
 800c7ca:	f000 fd37 	bl	800d23c <uxr_millis>
 800c7ce:	1bc3      	subs	r3, r0, r7
 800c7d0:	1aec      	subs	r4, r5, r3
 800c7d2:	d407      	bmi.n	800c7e4 <uxr_run_session_until_confirm_delivery+0x40>
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	f000 fcd5 	bl	800d184 <uxr_output_streams_confirmed>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	4621      	mov	r1, r4
 800c7de:	4630      	mov	r0, r6
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0f0      	beq.n	800c7c6 <uxr_run_session_until_confirm_delivery+0x22>
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ea:	f000 bccb 	b.w	800d184 <uxr_output_streams_confirmed>
 800c7ee:	bf00      	nop

0800c7f0 <uxr_run_session_until_all_status>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	9d08      	ldr	r5, [sp, #32]
 800c7f6:	460f      	mov	r7, r1
 800c7f8:	4692      	mov	sl, r2
 800c7fa:	461c      	mov	r4, r3
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	f7ff fc15 	bl	800c02c <uxr_flash_output_streams>
 800c802:	b125      	cbz	r5, 800c80e <uxr_run_session_until_all_status+0x1e>
 800c804:	462a      	mov	r2, r5
 800c806:	21ff      	movs	r1, #255	; 0xff
 800c808:	4620      	mov	r0, r4
 800c80a:	f006 fcdf 	bl	80131cc <memset>
 800c80e:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800c812:	67f5      	str	r5, [r6, #124]	; 0x7c
 800c814:	f000 fd12 	bl	800d23c <uxr_millis>
 800c818:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800c81c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c820:	4680      	mov	r8, r0
 800c822:	4639      	mov	r1, r7
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff fe45 	bl	800c4b4 <listen_message_reliably>
 800c82a:	f000 fd07 	bl	800d23c <uxr_millis>
 800c82e:	eba0 0008 	sub.w	r0, r0, r8
 800c832:	1a39      	subs	r1, r7, r0
 800c834:	b33d      	cbz	r5, 800c886 <uxr_run_session_until_all_status+0x96>
 800c836:	46cc      	mov	ip, r9
 800c838:	464a      	mov	r2, r9
 800c83a:	2301      	movs	r3, #1
 800c83c:	e002      	b.n	800c844 <uxr_run_session_until_all_status+0x54>
 800c83e:	42ab      	cmp	r3, r5
 800c840:	d20c      	bcs.n	800c85c <uxr_run_session_until_all_status+0x6c>
 800c842:	3301      	adds	r3, #1
 800c844:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800c848:	2cff      	cmp	r4, #255	; 0xff
 800c84a:	d1f8      	bne.n	800c83e <uxr_run_session_until_all_status+0x4e>
 800c84c:	42ab      	cmp	r3, r5
 800c84e:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800c852:	d213      	bcs.n	800c87c <uxr_run_session_until_all_status+0x8c>
 800c854:	2800      	cmp	r0, #0
 800c856:	d0f4      	beq.n	800c842 <uxr_run_session_until_all_status+0x52>
 800c858:	2900      	cmp	r1, #0
 800c85a:	dce3      	bgt.n	800c824 <uxr_run_session_until_all_status+0x34>
 800c85c:	2300      	movs	r3, #0
 800c85e:	444d      	add	r5, r9
 800c860:	67f3      	str	r3, [r6, #124]	; 0x7c
 800c862:	e001      	b.n	800c868 <uxr_run_session_until_all_status+0x78>
 800c864:	2b01      	cmp	r3, #1
 800c866:	d812      	bhi.n	800c88e <uxr_run_session_until_all_status+0x9e>
 800c868:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800c86c:	4565      	cmp	r5, ip
 800c86e:	d1f9      	bne.n	800c864 <uxr_run_session_until_all_status+0x74>
 800c870:	2b01      	cmp	r3, #1
 800c872:	bf8c      	ite	hi
 800c874:	2000      	movhi	r0, #0
 800c876:	2001      	movls	r0, #1
 800c878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87c:	2900      	cmp	r1, #0
 800c87e:	dded      	ble.n	800c85c <uxr_run_session_until_all_status+0x6c>
 800c880:	2800      	cmp	r0, #0
 800c882:	d1cf      	bne.n	800c824 <uxr_run_session_until_all_status+0x34>
 800c884:	e7ea      	b.n	800c85c <uxr_run_session_until_all_status+0x6c>
 800c886:	67f5      	str	r5, [r6, #124]	; 0x7c
 800c888:	2001      	movs	r0, #1
 800c88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88e:	2000      	movs	r0, #0
 800c890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c894 <uxr_create_session>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	ed2d 8b02 	vpush	{d8}
 800c89c:	f100 0808 	add.w	r8, r0, #8
 800c8a0:	b0a9      	sub	sp, #164	; 0xa4
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	f000 fba9 	bl	800cffc <uxr_reset_stream_storage>
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 fb0e 	bl	800cecc <uxr_session_header_offset>
 800c8b0:	a909      	add	r1, sp, #36	; 0x24
 800c8b2:	9000      	str	r0, [sp, #0]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	a810      	add	r0, sp, #64	; 0x40
 800c8b8:	221c      	movs	r2, #28
 800c8ba:	f7fd fa29 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 800c8be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8c0:	8a1a      	ldrh	r2, [r3, #16]
 800c8c2:	3a04      	subs	r2, #4
 800c8c4:	b292      	uxth	r2, r2
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	a910      	add	r1, sp, #64	; 0x40
 800c8ca:	f000 fa23 	bl	800cd14 <uxr_buffer_create_session>
 800c8ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 fa8f 	bl	800cdf4 <uxr_stamp_create_session_header>
 800c8d6:	a810      	add	r0, sp, #64	; 0x40
 800c8d8:	f7fd fa58 	bl	8009d8c <ucdr_buffer_length>
 800c8dc:	23ff      	movs	r3, #255	; 0xff
 800c8de:	ee08 0a10 	vmov	s16, r0
 800c8e2:	7163      	strb	r3, [r4, #5]
 800c8e4:	f04f 090a 	mov.w	r9, #10
 800c8e8:	46c2      	mov	sl, r8
 800c8ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8ec:	ee18 2a10 	vmov	r2, s16
 800c8f0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c8f4:	a909      	add	r1, sp, #36	; 0x24
 800c8f6:	47a8      	blx	r5
 800c8f8:	f000 fca0 	bl	800d23c <uxr_millis>
 800c8fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c900:	9002      	str	r0, [sp, #8]
 800c902:	e00c      	b.n	800c91e <uxr_create_session+0x8a>
 800c904:	f000 fc9a 	bl	800d23c <uxr_millis>
 800c908:	9b02      	ldr	r3, [sp, #8]
 800c90a:	7962      	ldrb	r2, [r4, #5]
 800c90c:	1ac0      	subs	r0, r0, r3
 800c90e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c912:	2b00      	cmp	r3, #0
 800c914:	f340 8094 	ble.w	800ca40 <uxr_create_session+0x1ac>
 800c918:	2aff      	cmp	r2, #255	; 0xff
 800c91a:	f040 8097 	bne.w	800ca4c <uxr_create_session+0x1b8>
 800c91e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c920:	a905      	add	r1, sp, #20
 800c922:	6895      	ldr	r5, [r2, #8]
 800c924:	6810      	ldr	r0, [r2, #0]
 800c926:	aa06      	add	r2, sp, #24
 800c928:	47a8      	blx	r5
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d0ea      	beq.n	800c904 <uxr_create_session+0x70>
 800c92e:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800c932:	a818      	add	r0, sp, #96	; 0x60
 800c934:	f7fd f9fe 	bl	8009d34 <ucdr_init_buffer>
 800c938:	2500      	movs	r5, #0
 800c93a:	f10d 0312 	add.w	r3, sp, #18
 800c93e:	aa04      	add	r2, sp, #16
 800c940:	a918      	add	r1, sp, #96	; 0x60
 800c942:	4620      	mov	r0, r4
 800c944:	f88d 5010 	strb.w	r5, [sp, #16]
 800c948:	f000 fa7e 	bl	800ce48 <uxr_read_session_header>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d0d9      	beq.n	800c904 <uxr_create_session+0x70>
 800c950:	4629      	mov	r1, r5
 800c952:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800c956:	f000 fb1b 	bl	800cf90 <uxr_stream_id_from_raw>
 800c95a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c95e:	2f01      	cmp	r7, #1
 800c960:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800c964:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800c968:	fa5f f880 	uxtb.w	r8, r0
 800c96c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c970:	d04d      	beq.n	800ca0e <uxr_create_session+0x17a>
 800c972:	2f02      	cmp	r7, #2
 800c974:	d00c      	beq.n	800c990 <uxr_create_session+0xfc>
 800c976:	2f00      	cmp	r7, #0
 800c978:	d1c4      	bne.n	800c904 <uxr_create_session+0x70>
 800c97a:	4639      	mov	r1, r7
 800c97c:	4638      	mov	r0, r7
 800c97e:	f000 fb07 	bl	800cf90 <uxr_stream_id_from_raw>
 800c982:	a918      	add	r1, sp, #96	; 0x60
 800c984:	4602      	mov	r2, r0
 800c986:	4620      	mov	r0, r4
 800c988:	9208      	str	r2, [sp, #32]
 800c98a:	f7ff fc0b 	bl	800c1a4 <read_submessage_list>
 800c98e:	e7b9      	b.n	800c904 <uxr_create_session+0x70>
 800c990:	4629      	mov	r1, r5
 800c992:	4650      	mov	r0, sl
 800c994:	f000 fbea 	bl	800d16c <uxr_get_input_reliable_stream>
 800c998:	4606      	mov	r6, r0
 800c99a:	b390      	cbz	r0, 800ca02 <uxr_create_session+0x16e>
 800c99c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c99e:	9203      	str	r2, [sp, #12]
 800c9a0:	a818      	add	r0, sp, #96	; 0x60
 800c9a2:	f7fd f9f7 	bl	8009d94 <ucdr_buffer_remaining>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f10d 0011 	add.w	r0, sp, #17
 800c9ac:	9000      	str	r0, [sp, #0]
 800c9ae:	9a03      	ldr	r2, [sp, #12]
 800c9b0:	4659      	mov	r1, fp
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f005 f816 	bl	80119e4 <uxr_receive_reliable_message>
 800c9b8:	b318      	cbz	r0, 800ca02 <uxr_create_session+0x16e>
 800c9ba:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800c9be:	b9b3      	cbnz	r3, 800c9ee <uxr_create_session+0x15a>
 800c9c0:	f88d 8020 	strb.w	r8, [sp, #32]
 800c9c4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800c9c8:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800c9cc:	9a08      	ldr	r2, [sp, #32]
 800c9ce:	a918      	add	r1, sp, #96	; 0x60
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f7ff fbe7 	bl	800c1a4 <read_submessage_list>
 800c9d6:	e00a      	b.n	800c9ee <uxr_create_session+0x15a>
 800c9d8:	f04f 0302 	mov.w	r3, #2
 800c9dc:	f88d 8020 	strb.w	r8, [sp, #32]
 800c9e0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800c9e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800c9e8:	9a08      	ldr	r2, [sp, #32]
 800c9ea:	f7ff fbdb 	bl	800c1a4 <read_submessage_list>
 800c9ee:	a920      	add	r1, sp, #128	; 0x80
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f005 f876 	bl	8011ae4 <uxr_next_input_reliable_buffer_available>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	a920      	add	r1, sp, #128	; 0x80
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1ea      	bne.n	800c9d8 <uxr_create_session+0x144>
 800ca02:	462a      	mov	r2, r5
 800ca04:	4641      	mov	r1, r8
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff fa4a 	bl	800bea0 <write_submessage_acknack.isra.0>
 800ca0c:	e77a      	b.n	800c904 <uxr_create_session+0x70>
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4650      	mov	r0, sl
 800ca12:	f000 fba1 	bl	800d158 <uxr_get_input_best_effort_stream>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f43f af74 	beq.w	800c904 <uxr_create_session+0x70>
 800ca1c:	4659      	mov	r1, fp
 800ca1e:	f004 ff5d 	bl	80118dc <uxr_receive_best_effort_message>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	f43f af6e 	beq.w	800c904 <uxr_create_session+0x70>
 800ca28:	f88d 8020 	strb.w	r8, [sp, #32]
 800ca2c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ca30:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800ca34:	9a08      	ldr	r2, [sp, #32]
 800ca36:	a918      	add	r1, sp, #96	; 0x60
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7ff fbb3 	bl	800c1a4 <read_submessage_list>
 800ca3e:	e761      	b.n	800c904 <uxr_create_session+0x70>
 800ca40:	f1b9 0901 	subs.w	r9, r9, #1
 800ca44:	d002      	beq.n	800ca4c <uxr_create_session+0x1b8>
 800ca46:	2aff      	cmp	r2, #255	; 0xff
 800ca48:	f43f af4f 	beq.w	800c8ea <uxr_create_session+0x56>
 800ca4c:	b12a      	cbz	r2, 800ca5a <uxr_create_session+0x1c6>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	b029      	add	sp, #164	; 0xa4
 800ca52:	ecbd 8b02 	vpop	{d8}
 800ca56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5a:	4650      	mov	r0, sl
 800ca5c:	f000 face 	bl	800cffc <uxr_reset_stream_storage>
 800ca60:	2001      	movs	r0, #1
 800ca62:	b029      	add	sp, #164	; 0xa4
 800ca64:	ecbd 8b02 	vpop	{d8}
 800ca68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca6c <wait_session_status>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	4604      	mov	r4, r0
 800ca72:	b09d      	sub	sp, #116	; 0x74
 800ca74:	20ff      	movs	r0, #255	; 0xff
 800ca76:	7160      	strb	r0, [r4, #5]
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 80b8 	beq.w	800cbf0 <wait_session_status+0x184>
 800ca80:	2300      	movs	r3, #0
 800ca82:	468b      	mov	fp, r1
 800ca84:	4692      	mov	sl, r2
 800ca86:	9303      	str	r3, [sp, #12]
 800ca88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ca8a:	4652      	mov	r2, sl
 800ca8c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ca90:	4659      	mov	r1, fp
 800ca92:	47a8      	blx	r5
 800ca94:	f000 fbd2 	bl	800d23c <uxr_millis>
 800ca98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	e009      	b.n	800cab4 <wait_session_status+0x48>
 800caa0:	f000 fbcc 	bl	800d23c <uxr_millis>
 800caa4:	1b40      	subs	r0, r0, r5
 800caa6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dd42      	ble.n	800cb34 <wait_session_status+0xc8>
 800caae:	7960      	ldrb	r0, [r4, #5]
 800cab0:	28ff      	cmp	r0, #255	; 0xff
 800cab2:	d148      	bne.n	800cb46 <wait_session_status+0xda>
 800cab4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800cab6:	a908      	add	r1, sp, #32
 800cab8:	6896      	ldr	r6, [r2, #8]
 800caba:	6810      	ldr	r0, [r2, #0]
 800cabc:	aa09      	add	r2, sp, #36	; 0x24
 800cabe:	47b0      	blx	r6
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d0ed      	beq.n	800caa0 <wait_session_status+0x34>
 800cac4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800cac8:	a80c      	add	r0, sp, #48	; 0x30
 800caca:	f7fd f933 	bl	8009d34 <ucdr_init_buffer>
 800cace:	2600      	movs	r6, #0
 800cad0:	f10d 031e 	add.w	r3, sp, #30
 800cad4:	aa07      	add	r2, sp, #28
 800cad6:	a90c      	add	r1, sp, #48	; 0x30
 800cad8:	4620      	mov	r0, r4
 800cada:	f88d 601c 	strb.w	r6, [sp, #28]
 800cade:	f000 f9b3 	bl	800ce48 <uxr_read_session_header>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d0dc      	beq.n	800caa0 <wait_session_status+0x34>
 800cae6:	4631      	mov	r1, r6
 800cae8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800caec:	f000 fa50 	bl	800cf90 <uxr_stream_id_from_raw>
 800caf0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800caf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800caf8:	9302      	str	r3, [sp, #8]
 800cafa:	2f01      	cmp	r7, #1
 800cafc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800cb00:	fa5f f880 	uxtb.w	r8, r0
 800cb04:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800cb08:	d058      	beq.n	800cbbc <wait_session_status+0x150>
 800cb0a:	2f02      	cmp	r7, #2
 800cb0c:	d021      	beq.n	800cb52 <wait_session_status+0xe6>
 800cb0e:	2f00      	cmp	r7, #0
 800cb10:	d1c6      	bne.n	800caa0 <wait_session_status+0x34>
 800cb12:	4639      	mov	r1, r7
 800cb14:	4638      	mov	r0, r7
 800cb16:	f000 fa3b 	bl	800cf90 <uxr_stream_id_from_raw>
 800cb1a:	a90c      	add	r1, sp, #48	; 0x30
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	4620      	mov	r0, r4
 800cb20:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb22:	f7ff fb3f 	bl	800c1a4 <read_submessage_list>
 800cb26:	f000 fb89 	bl	800d23c <uxr_millis>
 800cb2a:	1b40      	subs	r0, r0, r5
 800cb2c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	dcbc      	bgt.n	800caae <wait_session_status+0x42>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	9a04      	ldr	r2, [sp, #16]
 800cb38:	7960      	ldrb	r0, [r4, #5]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	d001      	beq.n	800cb46 <wait_session_status+0xda>
 800cb42:	28ff      	cmp	r0, #255	; 0xff
 800cb44:	d0a0      	beq.n	800ca88 <wait_session_status+0x1c>
 800cb46:	38ff      	subs	r0, #255	; 0xff
 800cb48:	bf18      	it	ne
 800cb4a:	2001      	movne	r0, #1
 800cb4c:	b01d      	add	sp, #116	; 0x74
 800cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb52:	4631      	mov	r1, r6
 800cb54:	f104 0008 	add.w	r0, r4, #8
 800cb58:	f000 fb08 	bl	800d16c <uxr_get_input_reliable_stream>
 800cb5c:	4681      	mov	r9, r0
 800cb5e:	b338      	cbz	r0, 800cbb0 <wait_session_status+0x144>
 800cb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb62:	9205      	str	r2, [sp, #20]
 800cb64:	a80c      	add	r0, sp, #48	; 0x30
 800cb66:	f7fd f915 	bl	8009d94 <ucdr_buffer_remaining>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	f10d 001d 	add.w	r0, sp, #29
 800cb70:	9000      	str	r0, [sp, #0]
 800cb72:	9a05      	ldr	r2, [sp, #20]
 800cb74:	9902      	ldr	r1, [sp, #8]
 800cb76:	4648      	mov	r0, r9
 800cb78:	f004 ff34 	bl	80119e4 <uxr_receive_reliable_message>
 800cb7c:	b1c0      	cbz	r0, 800cbb0 <wait_session_status+0x144>
 800cb7e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800cb82:	b95b      	cbnz	r3, 800cb9c <wait_session_status+0x130>
 800cb84:	e03c      	b.n	800cc00 <wait_session_status+0x194>
 800cb86:	f04f 0302 	mov.w	r3, #2
 800cb8a:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800cb8e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cb92:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800cb96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb98:	f7ff fb04 	bl	800c1a4 <read_submessage_list>
 800cb9c:	a914      	add	r1, sp, #80	; 0x50
 800cb9e:	2204      	movs	r2, #4
 800cba0:	4648      	mov	r0, r9
 800cba2:	f004 ff9f 	bl	8011ae4 <uxr_next_input_reliable_buffer_available>
 800cba6:	4603      	mov	r3, r0
 800cba8:	a914      	add	r1, sp, #80	; 0x50
 800cbaa:	4620      	mov	r0, r4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1ea      	bne.n	800cb86 <wait_session_status+0x11a>
 800cbb0:	4632      	mov	r2, r6
 800cbb2:	4641      	mov	r1, r8
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f7ff f973 	bl	800bea0 <write_submessage_acknack.isra.0>
 800cbba:	e771      	b.n	800caa0 <wait_session_status+0x34>
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	f104 0008 	add.w	r0, r4, #8
 800cbc2:	f000 fac9 	bl	800d158 <uxr_get_input_best_effort_stream>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	f43f af6a 	beq.w	800caa0 <wait_session_status+0x34>
 800cbcc:	9902      	ldr	r1, [sp, #8]
 800cbce:	f004 fe85 	bl	80118dc <uxr_receive_best_effort_message>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f43f af64 	beq.w	800caa0 <wait_session_status+0x34>
 800cbd8:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800cbdc:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cbe0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800cbe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbe6:	a90c      	add	r1, sp, #48	; 0x30
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7ff fadb 	bl	800c1a4 <read_submessage_list>
 800cbee:	e757      	b.n	800caa0 <wait_session_status+0x34>
 800cbf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cbf2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cbf6:	47a0      	blx	r4
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	b01d      	add	sp, #116	; 0x74
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800cc04:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cc08:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800cc0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc0e:	a90c      	add	r1, sp, #48	; 0x30
 800cc10:	4620      	mov	r0, r4
 800cc12:	f7ff fac7 	bl	800c1a4 <read_submessage_list>
 800cc16:	e7c1      	b.n	800cb9c <wait_session_status+0x130>

0800cc18 <uxr_delete_session_retries>:
 800cc18:	b530      	push	{r4, r5, lr}
 800cc1a:	b08f      	sub	sp, #60	; 0x3c
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	f000 f954 	bl	800cecc <uxr_session_header_offset>
 800cc24:	2300      	movs	r3, #0
 800cc26:	2210      	movs	r2, #16
 800cc28:	9000      	str	r0, [sp, #0]
 800cc2a:	a902      	add	r1, sp, #8
 800cc2c:	a806      	add	r0, sp, #24
 800cc2e:	f7fd f86f 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 800cc32:	a906      	add	r1, sp, #24
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 f897 	bl	800cd68 <uxr_buffer_delete_session>
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	9b06      	ldr	r3, [sp, #24]
 800cc40:	4620      	mov	r0, r4
 800cc42:	f000 f8eb 	bl	800ce1c <uxr_stamp_session_header>
 800cc46:	a806      	add	r0, sp, #24
 800cc48:	f7fd f8a0 	bl	8009d8c <ucdr_buffer_length>
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	4602      	mov	r2, r0
 800cc50:	a902      	add	r1, sp, #8
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7ff ff0a 	bl	800ca6c <wait_session_status>
 800cc58:	b118      	cbz	r0, 800cc62 <uxr_delete_session_retries+0x4a>
 800cc5a:	7960      	ldrb	r0, [r4, #5]
 800cc5c:	fab0 f080 	clz	r0, r0
 800cc60:	0940      	lsrs	r0, r0, #5
 800cc62:	b00f      	add	sp, #60	; 0x3c
 800cc64:	bd30      	pop	{r4, r5, pc}
 800cc66:	bf00      	nop

0800cc68 <uxr_prepare_stream_to_write_submessage>:
 800cc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	4682      	mov	sl, r0
 800cc70:	4610      	mov	r0, r2
 800cc72:	4615      	mov	r5, r2
 800cc74:	461e      	mov	r6, r3
 800cc76:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800cc7a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cc7e:	9101      	str	r1, [sp, #4]
 800cc80:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800cc84:	f000 fad4 	bl	800d230 <uxr_submessage_padding>
 800cc88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc8c:	f105 0904 	add.w	r9, r5, #4
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	4481      	add	r9, r0
 800cc94:	d01d      	beq.n	800ccd2 <uxr_prepare_stream_to_write_submessage+0x6a>
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d116      	bne.n	800ccc8 <uxr_prepare_stream_to_write_submessage+0x60>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	f10a 0008 	add.w	r0, sl, #8
 800cca0:	f000 fa4e 	bl	800d140 <uxr_get_output_reliable_stream>
 800cca4:	4604      	mov	r4, r0
 800cca6:	b158      	cbz	r0, 800ccc0 <uxr_prepare_stream_to_write_submessage+0x58>
 800cca8:	4649      	mov	r1, r9
 800ccaa:	4632      	mov	r2, r6
 800ccac:	f005 f8d0 	bl	8011e50 <uxr_prepare_reliable_buffer_to_write>
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	b12c      	cbz	r4, 800ccc0 <uxr_prepare_stream_to_write_submessage+0x58>
 800ccb4:	4643      	mov	r3, r8
 800ccb6:	b2aa      	uxth	r2, r5
 800ccb8:	4639      	mov	r1, r7
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f000 fa78 	bl	800d1b0 <uxr_buffer_submessage_header>
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	b002      	add	sp, #8
 800ccc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc8:	2400      	movs	r4, #0
 800ccca:	4620      	mov	r0, r4
 800cccc:	b002      	add	sp, #8
 800ccce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	f10a 0008 	add.w	r0, sl, #8
 800ccd8:	f000 fa2a 	bl	800d130 <uxr_get_output_best_effort_stream>
 800ccdc:	4604      	mov	r4, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0ee      	beq.n	800ccc0 <uxr_prepare_stream_to_write_submessage+0x58>
 800cce2:	4649      	mov	r1, r9
 800cce4:	4632      	mov	r2, r6
 800cce6:	f004 ffef 	bl	8011cc8 <uxr_prepare_best_effort_buffer_to_write>
 800ccea:	4604      	mov	r4, r0
 800ccec:	e7e1      	b.n	800ccb2 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ccee:	bf00      	nop

0800ccf0 <uxr_init_session_info>:
 800ccf0:	b470      	push	{r4, r5, r6}
 800ccf2:	7102      	strb	r2, [r0, #4]
 800ccf4:	0e16      	lsrs	r6, r2, #24
 800ccf6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800ccfa:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800ccfe:	23ff      	movs	r3, #255	; 0xff
 800cd00:	2209      	movs	r2, #9
 800cd02:	7046      	strb	r6, [r0, #1]
 800cd04:	7085      	strb	r5, [r0, #2]
 800cd06:	70c4      	strb	r4, [r0, #3]
 800cd08:	7001      	strb	r1, [r0, #0]
 800cd0a:	bc70      	pop	{r4, r5, r6}
 800cd0c:	80c2      	strh	r2, [r0, #6]
 800cd0e:	7143      	strb	r3, [r0, #5]
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop

0800cd14 <uxr_buffer_create_session>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4d12      	ldr	r5, [pc, #72]	; (800cd64 <uxr_buffer_create_session+0x50>)
 800cd1c:	9307      	str	r3, [sp, #28]
 800cd1e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cd22:	7802      	ldrb	r2, [r0, #0]
 800cd24:	9303      	str	r3, [sp, #12]
 800cd26:	460c      	mov	r4, r1
 800cd28:	f88d 200c 	strb.w	r2, [sp, #12]
 800cd2c:	2101      	movs	r1, #1
 800cd2e:	682a      	ldr	r2, [r5, #0]
 800cd30:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800cd34:	88ad      	ldrh	r5, [r5, #4]
 800cd36:	80c1      	strh	r1, [r0, #6]
 800cd38:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cd3c:	9200      	str	r2, [sp, #0]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	2210      	movs	r2, #16
 800cd42:	4620      	mov	r0, r4
 800cd44:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800cd48:	9306      	str	r3, [sp, #24]
 800cd4a:	f88d 300d 	strb.w	r3, [sp, #13]
 800cd4e:	9602      	str	r6, [sp, #8]
 800cd50:	f8ad 5006 	strh.w	r5, [sp, #6]
 800cd54:	f000 fa2c 	bl	800d1b0 <uxr_buffer_submessage_header>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4669      	mov	r1, sp
 800cd5c:	f000 feec 	bl	800db38 <uxr_serialize_CREATE_CLIENT_Payload>
 800cd60:	b008      	add	sp, #32
 800cd62:	bd70      	pop	{r4, r5, r6, pc}
 800cd64:	08014940 	.word	0x08014940

0800cd68 <uxr_buffer_delete_session>:
 800cd68:	b530      	push	{r4, r5, lr}
 800cd6a:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <uxr_buffer_delete_session+0x34>)
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	891b      	ldrh	r3, [r3, #8]
 800cd70:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cd74:	2202      	movs	r2, #2
 800cd76:	460c      	mov	r4, r1
 800cd78:	80c2      	strh	r2, [r0, #6]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	2204      	movs	r2, #4
 800cd7e:	4608      	mov	r0, r1
 800cd80:	f44f 7500 	mov.w	r5, #512	; 0x200
 800cd84:	2103      	movs	r1, #3
 800cd86:	f8ad 5004 	strh.w	r5, [sp, #4]
 800cd8a:	f000 fa11 	bl	800d1b0 <uxr_buffer_submessage_header>
 800cd8e:	4620      	mov	r0, r4
 800cd90:	a901      	add	r1, sp, #4
 800cd92:	f000 ff7f 	bl	800dc94 <uxr_serialize_DELETE_Payload>
 800cd96:	b003      	add	sp, #12
 800cd98:	bd30      	pop	{r4, r5, pc}
 800cd9a:	bf00      	nop
 800cd9c:	08014940 	.word	0x08014940

0800cda0 <uxr_read_create_session_status>:
 800cda0:	b510      	push	{r4, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	4604      	mov	r4, r0
 800cda6:	4608      	mov	r0, r1
 800cda8:	a901      	add	r1, sp, #4
 800cdaa:	f000 ff83 	bl	800dcb4 <uxr_deserialize_STATUS_AGENT_Payload>
 800cdae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cdb2:	7163      	strb	r3, [r4, #5]
 800cdb4:	b008      	add	sp, #32
 800cdb6:	bd10      	pop	{r4, pc}

0800cdb8 <uxr_read_delete_session_status>:
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	4604      	mov	r4, r0
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	4608      	mov	r0, r1
 800cdc0:	a902      	add	r1, sp, #8
 800cdc2:	f000 ffa7 	bl	800dd14 <uxr_deserialize_STATUS_Payload>
 800cdc6:	88e3      	ldrh	r3, [r4, #6]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d001      	beq.n	800cdd0 <uxr_read_delete_session_status+0x18>
 800cdcc:	b004      	add	sp, #16
 800cdce:	bd10      	pop	{r4, pc}
 800cdd0:	f10d 000a 	add.w	r0, sp, #10
 800cdd4:	f7fe fec6 	bl	800bb64 <uxr_object_id_from_raw>
 800cdd8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800cddc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cde0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	bf04      	itt	eq
 800cdea:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800cdee:	7163      	strbeq	r3, [r4, #5]
 800cdf0:	b004      	add	sp, #16
 800cdf2:	bd10      	pop	{r4, pc}

0800cdf4 <uxr_stamp_create_session_header>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	b08a      	sub	sp, #40	; 0x28
 800cdfa:	a802      	add	r0, sp, #8
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	f7fc ff99 	bl	8009d34 <ucdr_init_buffer>
 800ce02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce06:	9400      	str	r4, [sp, #0]
 800ce08:	2300      	movs	r3, #0
 800ce0a:	a802      	add	r0, sp, #8
 800ce0c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ce10:	461a      	mov	r2, r3
 800ce12:	f000 fa75 	bl	800d300 <uxr_serialize_message_header>
 800ce16:	b00a      	add	sp, #40	; 0x28
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	bf00      	nop

0800ce1c <uxr_stamp_session_header>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	4604      	mov	r4, r0
 800ce20:	b08c      	sub	sp, #48	; 0x30
 800ce22:	460d      	mov	r5, r1
 800ce24:	4616      	mov	r6, r2
 800ce26:	4619      	mov	r1, r3
 800ce28:	a804      	add	r0, sp, #16
 800ce2a:	2208      	movs	r2, #8
 800ce2c:	9603      	str	r6, [sp, #12]
 800ce2e:	f7fc ff81 	bl	8009d34 <ucdr_init_buffer>
 800ce32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	9400      	str	r4, [sp, #0]
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	a804      	add	r0, sp, #16
 800ce3e:	f000 fa5f 	bl	800d300 <uxr_serialize_message_header>
 800ce42:	b00c      	add	sp, #48	; 0x30
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	bf00      	nop

0800ce48 <uxr_read_session_header>:
 800ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	b084      	sub	sp, #16
 800ce50:	4608      	mov	r0, r1
 800ce52:	460c      	mov	r4, r1
 800ce54:	4615      	mov	r5, r2
 800ce56:	461e      	mov	r6, r3
 800ce58:	f7fc ff9c 	bl	8009d94 <ucdr_buffer_remaining>
 800ce5c:	2808      	cmp	r0, #8
 800ce5e:	d803      	bhi.n	800ce68 <uxr_read_session_header+0x20>
 800ce60:	2000      	movs	r0, #0
 800ce62:	b004      	add	sp, #16
 800ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce68:	f10d 080c 	add.w	r8, sp, #12
 800ce6c:	4633      	mov	r3, r6
 800ce6e:	462a      	mov	r2, r5
 800ce70:	4620      	mov	r0, r4
 800ce72:	f8cd 8000 	str.w	r8, [sp]
 800ce76:	f10d 010b 	add.w	r1, sp, #11
 800ce7a:	f000 fa5f 	bl	800d33c <uxr_deserialize_message_header>
 800ce7e:	783a      	ldrb	r2, [r7, #0]
 800ce80:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d1eb      	bne.n	800ce60 <uxr_read_session_header+0x18>
 800ce88:	061b      	lsls	r3, r3, #24
 800ce8a:	d41c      	bmi.n	800cec6 <uxr_read_session_header+0x7e>
 800ce8c:	f898 2000 	ldrb.w	r2, [r8]
 800ce90:	787b      	ldrb	r3, [r7, #1]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d003      	beq.n	800ce9e <uxr_read_session_header+0x56>
 800ce96:	2001      	movs	r0, #1
 800ce98:	f080 0001 	eor.w	r0, r0, #1
 800ce9c:	e7e1      	b.n	800ce62 <uxr_read_session_header+0x1a>
 800ce9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800cea2:	78bb      	ldrb	r3, [r7, #2]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	f107 0102 	add.w	r1, r7, #2
 800ceaa:	d1f4      	bne.n	800ce96 <uxr_read_session_header+0x4e>
 800ceac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ceb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d1ee      	bne.n	800ce96 <uxr_read_session_header+0x4e>
 800ceb8:	784b      	ldrb	r3, [r1, #1]
 800ceba:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d1e9      	bne.n	800ce96 <uxr_read_session_header+0x4e>
 800cec2:	2000      	movs	r0, #0
 800cec4:	e7e8      	b.n	800ce98 <uxr_read_session_header+0x50>
 800cec6:	2001      	movs	r0, #1
 800cec8:	e7cb      	b.n	800ce62 <uxr_read_session_header+0x1a>
 800ceca:	bf00      	nop

0800cecc <uxr_session_header_offset>:
 800cecc:	f990 3000 	ldrsb.w	r3, [r0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	bfac      	ite	ge
 800ced4:	2008      	movge	r0, #8
 800ced6:	2004      	movlt	r0, #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop

0800cedc <uxr_init_base_object_request>:
 800cedc:	b530      	push	{r4, r5, lr}
 800cede:	88c3      	ldrh	r3, [r0, #6]
 800cee0:	b083      	sub	sp, #12
 800cee2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800cee6:	9101      	str	r1, [sp, #4]
 800cee8:	f1a3 010a 	sub.w	r1, r3, #10
 800ceec:	b289      	uxth	r1, r1
 800ceee:	42a1      	cmp	r1, r4
 800cef0:	d80e      	bhi.n	800cf10 <uxr_init_base_object_request+0x34>
 800cef2:	3301      	adds	r3, #1
 800cef4:	b29c      	uxth	r4, r3
 800cef6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	80c4      	strh	r4, [r0, #6]
 800cefe:	1c91      	adds	r1, r2, #2
 800cf00:	9801      	ldr	r0, [sp, #4]
 800cf02:	7015      	strb	r5, [r2, #0]
 800cf04:	7053      	strb	r3, [r2, #1]
 800cf06:	f7fe fe41 	bl	800bb8c <uxr_object_id_to_raw>
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	b003      	add	sp, #12
 800cf0e:	bd30      	pop	{r4, r5, pc}
 800cf10:	230a      	movs	r3, #10
 800cf12:	461c      	mov	r4, r3
 800cf14:	2500      	movs	r5, #0
 800cf16:	e7f1      	b.n	800cefc <uxr_init_base_object_request+0x20>

0800cf18 <uxr_parse_base_object_request>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	3002      	adds	r0, #2
 800cf1e:	460d      	mov	r5, r1
 800cf20:	4616      	mov	r6, r2
 800cf22:	f7fe fe1f 	bl	800bb64 <uxr_object_id_from_raw>
 800cf26:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800cf2a:	8028      	strh	r0, [r5, #0]
 800cf2c:	806b      	strh	r3, [r5, #2]
 800cf2e:	7822      	ldrb	r2, [r4, #0]
 800cf30:	7863      	ldrb	r3, [r4, #1]
 800cf32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cf36:	8033      	strh	r3, [r6, #0]
 800cf38:	bd70      	pop	{r4, r5, r6, pc}
 800cf3a:	bf00      	nop

0800cf3c <uxr_stream_id>:
 800cf3c:	b410      	push	{r4}
 800cf3e:	2901      	cmp	r1, #1
 800cf40:	b083      	sub	sp, #12
 800cf42:	d01f      	beq.n	800cf84 <uxr_stream_id+0x48>
 800cf44:	2902      	cmp	r1, #2
 800cf46:	f04f 0400 	mov.w	r4, #0
 800cf4a:	d01e      	beq.n	800cf8a <uxr_stream_id+0x4e>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f364 0307 	bfi	r3, r4, #0, #8
 800cf52:	f360 230f 	bfi	r3, r0, #8, #8
 800cf56:	f361 4317 	bfi	r3, r1, #16, #8
 800cf5a:	f362 631f 	bfi	r3, r2, #24, #8
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	2000      	movs	r0, #0
 800cf62:	f362 0007 	bfi	r0, r2, #0, #8
 800cf66:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cf6a:	f362 200f 	bfi	r0, r2, #8, #8
 800cf6e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cf72:	f362 4017 	bfi	r0, r2, #16, #8
 800cf76:	0e1b      	lsrs	r3, r3, #24
 800cf78:	f363 601f 	bfi	r0, r3, #24, #8
 800cf7c:	b003      	add	sp, #12
 800cf7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf82:	4770      	bx	lr
 800cf84:	1c44      	adds	r4, r0, #1
 800cf86:	b2e4      	uxtb	r4, r4
 800cf88:	e7e0      	b.n	800cf4c <uxr_stream_id+0x10>
 800cf8a:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800cf8e:	e7dd      	b.n	800cf4c <uxr_stream_id+0x10>

0800cf90 <uxr_stream_id_from_raw>:
 800cf90:	b410      	push	{r4}
 800cf92:	b083      	sub	sp, #12
 800cf94:	b128      	cbz	r0, 800cfa2 <uxr_stream_id_from_raw+0x12>
 800cf96:	0603      	lsls	r3, r0, #24
 800cf98:	d421      	bmi.n	800cfde <uxr_stream_id_from_raw+0x4e>
 800cf9a:	1e42      	subs	r2, r0, #1
 800cf9c:	b2d2      	uxtb	r2, r2
 800cf9e:	2401      	movs	r4, #1
 800cfa0:	e001      	b.n	800cfa6 <uxr_stream_id_from_raw+0x16>
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f360 0307 	bfi	r3, r0, #0, #8
 800cfac:	f362 230f 	bfi	r3, r2, #8, #8
 800cfb0:	f364 4317 	bfi	r3, r4, #16, #8
 800cfb4:	f361 631f 	bfi	r3, r1, #24, #8
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	2000      	movs	r0, #0
 800cfbc:	f362 0007 	bfi	r0, r2, #0, #8
 800cfc0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cfc4:	f362 200f 	bfi	r0, r2, #8, #8
 800cfc8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cfcc:	f362 4017 	bfi	r0, r2, #16, #8
 800cfd0:	0e1b      	lsrs	r3, r3, #24
 800cfd2:	f363 601f 	bfi	r0, r3, #24, #8
 800cfd6:	b003      	add	sp, #12
 800cfd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800cfe2:	2402      	movs	r4, #2
 800cfe4:	e7df      	b.n	800cfa6 <uxr_stream_id_from_raw+0x16>
 800cfe6:	bf00      	nop

0800cfe8 <uxr_init_stream_storage>:
 800cfe8:	2300      	movs	r3, #0
 800cfea:	7403      	strb	r3, [r0, #16]
 800cfec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cff0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800cff4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop

0800cffc <uxr_reset_stream_storage>:
 800cffc:	b570      	push	{r4, r5, r6, lr}
 800cffe:	7c03      	ldrb	r3, [r0, #16]
 800d000:	4604      	mov	r4, r0
 800d002:	b153      	cbz	r3, 800d01a <uxr_reset_stream_storage+0x1e>
 800d004:	4606      	mov	r6, r0
 800d006:	2500      	movs	r5, #0
 800d008:	4630      	mov	r0, r6
 800d00a:	f004 fe57 	bl	8011cbc <uxr_reset_output_best_effort_stream>
 800d00e:	7c23      	ldrb	r3, [r4, #16]
 800d010:	3501      	adds	r5, #1
 800d012:	42ab      	cmp	r3, r5
 800d014:	f106 0610 	add.w	r6, r6, #16
 800d018:	d8f6      	bhi.n	800d008 <uxr_reset_stream_storage+0xc>
 800d01a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d01e:	b163      	cbz	r3, 800d03a <uxr_reset_stream_storage+0x3e>
 800d020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d024:	2500      	movs	r5, #0
 800d026:	4630      	mov	r0, r6
 800d028:	f004 fc54 	bl	80118d4 <uxr_reset_input_best_effort_stream>
 800d02c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d030:	3501      	adds	r5, #1
 800d032:	42ab      	cmp	r3, r5
 800d034:	f106 0602 	add.w	r6, r6, #2
 800d038:	d8f5      	bhi.n	800d026 <uxr_reset_stream_storage+0x2a>
 800d03a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d03e:	b163      	cbz	r3, 800d05a <uxr_reset_stream_storage+0x5e>
 800d040:	f104 0618 	add.w	r6, r4, #24
 800d044:	2500      	movs	r5, #0
 800d046:	4630      	mov	r0, r6
 800d048:	f004 fed8 	bl	8011dfc <uxr_reset_output_reliable_stream>
 800d04c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d050:	3501      	adds	r5, #1
 800d052:	42ab      	cmp	r3, r5
 800d054:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d058:	d8f5      	bhi.n	800d046 <uxr_reset_stream_storage+0x4a>
 800d05a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800d05e:	b163      	cbz	r3, 800d07a <uxr_reset_stream_storage+0x7e>
 800d060:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800d064:	2500      	movs	r5, #0
 800d066:	4630      	mov	r0, r6
 800d068:	f004 fc9c 	bl	80119a4 <uxr_reset_input_reliable_stream>
 800d06c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800d070:	3501      	adds	r5, #1
 800d072:	42ab      	cmp	r3, r5
 800d074:	f106 0618 	add.w	r6, r6, #24
 800d078:	d8f5      	bhi.n	800d066 <uxr_reset_stream_storage+0x6a>
 800d07a:	bd70      	pop	{r4, r5, r6, pc}

0800d07c <uxr_add_output_best_effort_buffer>:
 800d07c:	b530      	push	{r4, r5, lr}
 800d07e:	7c04      	ldrb	r4, [r0, #16]
 800d080:	1c65      	adds	r5, r4, #1
 800d082:	b083      	sub	sp, #12
 800d084:	7405      	strb	r5, [r0, #16]
 800d086:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800d08a:	f004 fe0b 	bl	8011ca4 <uxr_init_output_best_effort_stream>
 800d08e:	2201      	movs	r2, #1
 800d090:	4620      	mov	r0, r4
 800d092:	4611      	mov	r1, r2
 800d094:	b003      	add	sp, #12
 800d096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d09a:	f7ff bf4f 	b.w	800cf3c <uxr_stream_id>
 800d09e:	bf00      	nop

0800d0a0 <uxr_add_output_reliable_buffer>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800d0a8:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800d0ac:	9600      	str	r6, [sp, #0]
 800d0ae:	2528      	movs	r5, #40	; 0x28
 800d0b0:	1c66      	adds	r6, r4, #1
 800d0b2:	fb05 0504 	mla	r5, r5, r4, r0
 800d0b6:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800d0ba:	f105 0018 	add.w	r0, r5, #24
 800d0be:	f004 fe6b 	bl	8011d98 <uxr_init_output_reliable_stream>
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	2102      	movs	r1, #2
 800d0c8:	b004      	add	sp, #16
 800d0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0ce:	f7ff bf35 	b.w	800cf3c <uxr_stream_id>
 800d0d2:	bf00      	nop

0800d0d4 <uxr_add_input_best_effort_buffer>:
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800d0da:	1c62      	adds	r2, r4, #1
 800d0dc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800d0e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800d0ea:	f004 fbef 	bl	80118cc <uxr_init_input_best_effort_stream>
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	b002      	add	sp, #8
 800d0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0fa:	f7ff bf1f 	b.w	800cf3c <uxr_stream_id>
 800d0fe:	bf00      	nop

0800d100 <uxr_add_input_reliable_buffer>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800d108:	9e08      	ldr	r6, [sp, #32]
 800d10a:	9600      	str	r6, [sp, #0]
 800d10c:	2518      	movs	r5, #24
 800d10e:	1c66      	adds	r6, r4, #1
 800d110:	fb05 0504 	mla	r5, r5, r4, r0
 800d114:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800d118:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d11c:	f004 fc1e 	bl	801195c <uxr_init_input_reliable_stream>
 800d120:	4620      	mov	r0, r4
 800d122:	2200      	movs	r2, #0
 800d124:	2102      	movs	r1, #2
 800d126:	b004      	add	sp, #16
 800d128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d12c:	f7ff bf06 	b.w	800cf3c <uxr_stream_id>

0800d130 <uxr_get_output_best_effort_stream>:
 800d130:	7c03      	ldrb	r3, [r0, #16]
 800d132:	428b      	cmp	r3, r1
 800d134:	bf8c      	ite	hi
 800d136:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800d13a:	2000      	movls	r0, #0
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop

0800d140 <uxr_get_output_reliable_stream>:
 800d140:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d144:	428b      	cmp	r3, r1
 800d146:	bf83      	ittte	hi
 800d148:	2328      	movhi	r3, #40	; 0x28
 800d14a:	fb03 0101 	mlahi	r1, r3, r1, r0
 800d14e:	f101 0018 	addhi.w	r0, r1, #24
 800d152:	2000      	movls	r0, #0
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop

0800d158 <uxr_get_input_best_effort_stream>:
 800d158:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d15c:	428b      	cmp	r3, r1
 800d15e:	bf86      	itte	hi
 800d160:	3121      	addhi	r1, #33	; 0x21
 800d162:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800d166:	2000      	movls	r0, #0
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop

0800d16c <uxr_get_input_reliable_stream>:
 800d16c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800d170:	428b      	cmp	r3, r1
 800d172:	bf83      	ittte	hi
 800d174:	2318      	movhi	r3, #24
 800d176:	fb03 0101 	mlahi	r1, r3, r1, r0
 800d17a:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800d17e:	2000      	movls	r0, #0
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop

0800d184 <uxr_output_streams_confirmed>:
 800d184:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d188:	b183      	cbz	r3, 800d1ac <uxr_output_streams_confirmed+0x28>
 800d18a:	b570      	push	{r4, r5, r6, lr}
 800d18c:	4606      	mov	r6, r0
 800d18e:	f100 0518 	add.w	r5, r0, #24
 800d192:	2400      	movs	r4, #0
 800d194:	e001      	b.n	800d19a <uxr_output_streams_confirmed+0x16>
 800d196:	3528      	adds	r5, #40	; 0x28
 800d198:	b138      	cbz	r0, 800d1aa <uxr_output_streams_confirmed+0x26>
 800d19a:	4628      	mov	r0, r5
 800d19c:	f005 f89e 	bl	80122dc <uxr_is_output_up_to_date>
 800d1a0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800d1a4:	3401      	adds	r4, #1
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	d8f5      	bhi.n	800d196 <uxr_output_streams_confirmed+0x12>
 800d1aa:	bd70      	pop	{r4, r5, r6, pc}
 800d1ac:	2001      	movs	r0, #1
 800d1ae:	4770      	bx	lr

0800d1b0 <uxr_buffer_submessage_header>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	460e      	mov	r6, r1
 800d1b6:	2104      	movs	r1, #4
 800d1b8:	4615      	mov	r5, r2
 800d1ba:	461f      	mov	r7, r3
 800d1bc:	f7fc fdd4 	bl	8009d68 <ucdr_align_to>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	ea47 0203 	orr.w	r2, r7, r3
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	7523      	strb	r3, [r4, #20]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	462b      	mov	r3, r5
 800d1ce:	f000 f8d5 	bl	800d37c <uxr_serialize_submessage_header>
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f7fc fdde 	bl	8009d94 <ucdr_buffer_remaining>
 800d1d8:	42a8      	cmp	r0, r5
 800d1da:	bf34      	ite	cc
 800d1dc:	2000      	movcc	r0, #0
 800d1de:	2001      	movcs	r0, #1
 800d1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1e2:	bf00      	nop

0800d1e4 <uxr_read_submessage_header>:
 800d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	2104      	movs	r1, #4
 800d1ee:	4616      	mov	r6, r2
 800d1f0:	4698      	mov	r8, r3
 800d1f2:	f7fc fdb9 	bl	8009d68 <ucdr_align_to>
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7fc fdcc 	bl	8009d94 <ucdr_buffer_remaining>
 800d1fc:	2803      	cmp	r0, #3
 800d1fe:	bf8c      	ite	hi
 800d200:	2701      	movhi	r7, #1
 800d202:	2700      	movls	r7, #0
 800d204:	d802      	bhi.n	800d20c <uxr_read_submessage_header+0x28>
 800d206:	4638      	mov	r0, r7
 800d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20c:	4633      	mov	r3, r6
 800d20e:	4642      	mov	r2, r8
 800d210:	4620      	mov	r0, r4
 800d212:	4629      	mov	r1, r5
 800d214:	f000 f8c6 	bl	800d3a4 <uxr_deserialize_submessage_header>
 800d218:	f898 3000 	ldrb.w	r3, [r8]
 800d21c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	f888 2000 	strb.w	r2, [r8]
 800d228:	7523      	strb	r3, [r4, #20]
 800d22a:	4638      	mov	r0, r7
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d230 <uxr_submessage_padding>:
 800d230:	f010 0003 	ands.w	r0, r0, #3
 800d234:	bf18      	it	ne
 800d236:	f1c0 0004 	rsbne	r0, r0, #4
 800d23a:	4770      	bx	lr

0800d23c <uxr_millis>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	4669      	mov	r1, sp
 800d242:	2001      	movs	r0, #1
 800d244:	f7f4 f9c0 	bl	80015c8 <clock_gettime>
 800d248:	e9dd 2400 	ldrd	r2, r4, [sp]
 800d24c:	4907      	ldr	r1, [pc, #28]	; (800d26c <uxr_millis+0x30>)
 800d24e:	9802      	ldr	r0, [sp, #8]
 800d250:	fba2 2301 	umull	r2, r3, r2, r1
 800d254:	fb01 3304 	mla	r3, r1, r4, r3
 800d258:	4604      	mov	r4, r0
 800d25a:	1810      	adds	r0, r2, r0
 800d25c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800d260:	4a03      	ldr	r2, [pc, #12]	; (800d270 <uxr_millis+0x34>)
 800d262:	2300      	movs	r3, #0
 800d264:	f7f3 f94a 	bl	80004fc <__aeabi_ldivmod>
 800d268:	b004      	add	sp, #16
 800d26a:	bd10      	pop	{r4, pc}
 800d26c:	3b9aca00 	.word	0x3b9aca00
 800d270:	000f4240 	.word	0x000f4240

0800d274 <uxr_nanos>:
 800d274:	b510      	push	{r4, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	4669      	mov	r1, sp
 800d27a:	2001      	movs	r0, #1
 800d27c:	f7f4 f9a4 	bl	80015c8 <clock_gettime>
 800d280:	e9dd 2400 	ldrd	r2, r4, [sp]
 800d284:	4905      	ldr	r1, [pc, #20]	; (800d29c <uxr_nanos+0x28>)
 800d286:	9802      	ldr	r0, [sp, #8]
 800d288:	fba2 2301 	umull	r2, r3, r2, r1
 800d28c:	fb01 3304 	mla	r3, r1, r4, r3
 800d290:	4604      	mov	r4, r0
 800d292:	1810      	adds	r0, r2, r0
 800d294:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800d298:	b004      	add	sp, #16
 800d29a:	bd10      	pop	{r4, pc}
 800d29c:	3b9aca00 	.word	0x3b9aca00

0800d2a0 <uxr_prepare_output_stream>:
 800d2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a2:	b087      	sub	sp, #28
 800d2a4:	2407      	movs	r4, #7
 800d2a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d2a8:	9202      	str	r2, [sp, #8]
 800d2aa:	2500      	movs	r5, #0
 800d2ac:	1d32      	adds	r2, r6, #4
 800d2ae:	e9cd 4500 	strd	r4, r5, [sp]
 800d2b2:	9103      	str	r1, [sp, #12]
 800d2b4:	461c      	mov	r4, r3
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	f7ff fcd6 	bl	800cc68 <uxr_prepare_stream_to_write_submessage>
 800d2bc:	f080 0201 	eor.w	r2, r0, #1
 800d2c0:	b2d2      	uxtb	r2, r2
 800d2c2:	75a2      	strb	r2, [r4, #22]
 800d2c4:	b112      	cbz	r2, 800d2cc <uxr_prepare_output_stream+0x2c>
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	b007      	add	sp, #28
 800d2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2cc:	aa05      	add	r2, sp, #20
 800d2ce:	9902      	ldr	r1, [sp, #8]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f7ff fe03 	bl	800cedc <uxr_init_base_object_request>
 800d2d6:	a905      	add	r1, sp, #20
 800d2d8:	4605      	mov	r5, r0
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fd98 	bl	800de10 <uxr_serialize_WRITE_DATA_Payload_Data>
 800d2e0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800d2e4:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800d2e8:	1a52      	subs	r2, r2, r1
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f7fc fd22 	bl	8009d34 <ucdr_init_buffer>
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	463a      	mov	r2, r7
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	f7fc fcf3 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	b007      	add	sp, #28
 800d2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d300 <uxr_serialize_message_header>:
 800d300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d302:	b083      	sub	sp, #12
 800d304:	4616      	mov	r6, r2
 800d306:	4604      	mov	r4, r0
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	460d      	mov	r5, r1
 800d30c:	9f08      	ldr	r7, [sp, #32]
 800d30e:	f7fb fbd1 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d312:	4631      	mov	r1, r6
 800d314:	4620      	mov	r0, r4
 800d316:	f7fb fbcd 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d31a:	9a01      	ldr	r2, [sp, #4]
 800d31c:	4620      	mov	r0, r4
 800d31e:	2101      	movs	r1, #1
 800d320:	f7fb fc74 	bl	8008c0c <ucdr_serialize_endian_uint16_t>
 800d324:	062b      	lsls	r3, r5, #24
 800d326:	d501      	bpl.n	800d32c <uxr_serialize_message_header+0x2c>
 800d328:	b003      	add	sp, #12
 800d32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d32c:	4639      	mov	r1, r7
 800d32e:	4620      	mov	r0, r4
 800d330:	2204      	movs	r2, #4
 800d332:	b003      	add	sp, #12
 800d334:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d338:	f004 b8d0 	b.w	80114dc <ucdr_serialize_array_uint8_t>

0800d33c <uxr_deserialize_message_header>:
 800d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33e:	b083      	sub	sp, #12
 800d340:	4616      	mov	r6, r2
 800d342:	4604      	mov	r4, r0
 800d344:	9301      	str	r3, [sp, #4]
 800d346:	460d      	mov	r5, r1
 800d348:	9f08      	ldr	r7, [sp, #32]
 800d34a:	f7fb fbc9 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d34e:	4631      	mov	r1, r6
 800d350:	4620      	mov	r0, r4
 800d352:	f7fb fbc5 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d356:	9a01      	ldr	r2, [sp, #4]
 800d358:	4620      	mov	r0, r4
 800d35a:	2101      	movs	r1, #1
 800d35c:	f7fb fd4a 	bl	8008df4 <ucdr_deserialize_endian_uint16_t>
 800d360:	f995 3000 	ldrsb.w	r3, [r5]
 800d364:	2b00      	cmp	r3, #0
 800d366:	da01      	bge.n	800d36c <uxr_deserialize_message_header+0x30>
 800d368:	b003      	add	sp, #12
 800d36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d36c:	4639      	mov	r1, r7
 800d36e:	4620      	mov	r0, r4
 800d370:	2204      	movs	r2, #4
 800d372:	b003      	add	sp, #12
 800d374:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d378:	f004 b914 	b.w	80115a4 <ucdr_deserialize_array_uint8_t>

0800d37c <uxr_serialize_submessage_header>:
 800d37c:	b530      	push	{r4, r5, lr}
 800d37e:	b083      	sub	sp, #12
 800d380:	4615      	mov	r5, r2
 800d382:	4604      	mov	r4, r0
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	f7fb fb95 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d38a:	4629      	mov	r1, r5
 800d38c:	4620      	mov	r0, r4
 800d38e:	f7fb fb91 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d392:	9a01      	ldr	r2, [sp, #4]
 800d394:	4620      	mov	r0, r4
 800d396:	2101      	movs	r1, #1
 800d398:	b003      	add	sp, #12
 800d39a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d39e:	f7fb bc35 	b.w	8008c0c <ucdr_serialize_endian_uint16_t>
 800d3a2:	bf00      	nop

0800d3a4 <uxr_deserialize_submessage_header>:
 800d3a4:	b530      	push	{r4, r5, lr}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	4615      	mov	r5, r2
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	f7fb fb97 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f7fb fb93 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d3ba:	9a01      	ldr	r2, [sp, #4]
 800d3bc:	4620      	mov	r0, r4
 800d3be:	2101      	movs	r1, #1
 800d3c0:	b003      	add	sp, #12
 800d3c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3c6:	f7fb bd15 	b.w	8008df4 <ucdr_deserialize_endian_uint16_t>
 800d3ca:	bf00      	nop

0800d3cc <uxr_serialize_CLIENT_Representation>:
 800d3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3d0:	2204      	movs	r2, #4
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	f004 f881 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d3da:	1d21      	adds	r1, r4, #4
 800d3dc:	4607      	mov	r7, r0
 800d3de:	2202      	movs	r2, #2
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f004 f87b 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d3e6:	1da1      	adds	r1, r4, #6
 800d3e8:	4007      	ands	r7, r0
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f004 f875 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d3f2:	fa5f f887 	uxtb.w	r8, r7
 800d3f6:	2204      	movs	r2, #4
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	f104 0108 	add.w	r1, r4, #8
 800d3fe:	4628      	mov	r0, r5
 800d400:	f004 f86c 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d404:	ea08 0707 	and.w	r7, r8, r7
 800d408:	7b21      	ldrb	r1, [r4, #12]
 800d40a:	4680      	mov	r8, r0
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7fb fb51 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d412:	ea08 0807 	and.w	r8, r8, r7
 800d416:	7b61      	ldrb	r1, [r4, #13]
 800d418:	4607      	mov	r7, r0
 800d41a:	4628      	mov	r0, r5
 800d41c:	f7fb fb1a 	bl	8008a54 <ucdr_serialize_bool>
 800d420:	7b63      	ldrb	r3, [r4, #13]
 800d422:	ea08 0707 	and.w	r7, r8, r7
 800d426:	ea07 0600 	and.w	r6, r7, r0
 800d42a:	b933      	cbnz	r3, 800d43a <uxr_serialize_CLIENT_Representation+0x6e>
 800d42c:	8ba1      	ldrh	r1, [r4, #28]
 800d42e:	4628      	mov	r0, r5
 800d430:	f7fb fb6c 	bl	8008b0c <ucdr_serialize_uint16_t>
 800d434:	4030      	ands	r0, r6
 800d436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d43a:	6921      	ldr	r1, [r4, #16]
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7fb fd4f 	bl	8008ee0 <ucdr_serialize_uint32_t>
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	b1cb      	cbz	r3, 800d47a <uxr_serialize_CLIENT_Representation+0xae>
 800d446:	b1d0      	cbz	r0, 800d47e <uxr_serialize_CLIENT_Representation+0xb2>
 800d448:	46a0      	mov	r8, r4
 800d44a:	f04f 0900 	mov.w	r9, #0
 800d44e:	e002      	b.n	800d456 <uxr_serialize_CLIENT_Representation+0x8a>
 800d450:	f108 0808 	add.w	r8, r8, #8
 800d454:	b198      	cbz	r0, 800d47e <uxr_serialize_CLIENT_Representation+0xb2>
 800d456:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d45a:	4628      	mov	r0, r5
 800d45c:	f004 f95e 	bl	801171c <ucdr_serialize_string>
 800d460:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d464:	4607      	mov	r7, r0
 800d466:	4628      	mov	r0, r5
 800d468:	f004 f958 	bl	801171c <ucdr_serialize_string>
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	f109 0901 	add.w	r9, r9, #1
 800d472:	4038      	ands	r0, r7
 800d474:	4599      	cmp	r9, r3
 800d476:	b2c0      	uxtb	r0, r0
 800d478:	d3ea      	bcc.n	800d450 <uxr_serialize_CLIENT_Representation+0x84>
 800d47a:	4006      	ands	r6, r0
 800d47c:	e7d6      	b.n	800d42c <uxr_serialize_CLIENT_Representation+0x60>
 800d47e:	2600      	movs	r6, #0
 800d480:	e7d4      	b.n	800d42c <uxr_serialize_CLIENT_Representation+0x60>
 800d482:	bf00      	nop

0800d484 <uxr_deserialize_CLIENT_Representation>:
 800d484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d488:	2204      	movs	r2, #4
 800d48a:	460c      	mov	r4, r1
 800d48c:	4605      	mov	r5, r0
 800d48e:	f004 f889 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d492:	1d21      	adds	r1, r4, #4
 800d494:	4607      	mov	r7, r0
 800d496:	2202      	movs	r2, #2
 800d498:	4628      	mov	r0, r5
 800d49a:	f004 f883 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d49e:	1da1      	adds	r1, r4, #6
 800d4a0:	4007      	ands	r7, r0
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	f004 f87d 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d4aa:	fa5f f887 	uxtb.w	r8, r7
 800d4ae:	2204      	movs	r2, #4
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	f104 0108 	add.w	r1, r4, #8
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f004 f874 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d4bc:	ea08 0707 	and.w	r7, r8, r7
 800d4c0:	f104 010c 	add.w	r1, r4, #12
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f7fb fb0a 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d4cc:	ea08 0807 	and.w	r8, r8, r7
 800d4d0:	f104 010d 	add.w	r1, r4, #13
 800d4d4:	4607      	mov	r7, r0
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	f7fb fad2 	bl	8008a80 <ucdr_deserialize_bool>
 800d4dc:	7b63      	ldrb	r3, [r4, #13]
 800d4de:	ea08 0707 	and.w	r7, r8, r7
 800d4e2:	ea07 0600 	and.w	r6, r7, r0
 800d4e6:	b93b      	cbnz	r3, 800d4f8 <uxr_deserialize_CLIENT_Representation+0x74>
 800d4e8:	f104 011c 	add.w	r1, r4, #28
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f7fb fc0d 	bl	8008d0c <ucdr_deserialize_uint16_t>
 800d4f2:	4030      	ands	r0, r6
 800d4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f8:	f104 0110 	add.w	r1, r4, #16
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f7fb fe1f 	bl	8009140 <ucdr_deserialize_uint32_t>
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d903      	bls.n	800d510 <uxr_deserialize_CLIENT_Representation+0x8c>
 800d508:	2301      	movs	r3, #1
 800d50a:	75ab      	strb	r3, [r5, #22]
 800d50c:	2600      	movs	r6, #0
 800d50e:	e7eb      	b.n	800d4e8 <uxr_deserialize_CLIENT_Representation+0x64>
 800d510:	b1fb      	cbz	r3, 800d552 <uxr_deserialize_CLIENT_Representation+0xce>
 800d512:	2800      	cmp	r0, #0
 800d514:	d0fa      	beq.n	800d50c <uxr_deserialize_CLIENT_Representation+0x88>
 800d516:	46a0      	mov	r8, r4
 800d518:	f04f 0900 	mov.w	r9, #0
 800d51c:	e003      	b.n	800d526 <uxr_deserialize_CLIENT_Representation+0xa2>
 800d51e:	f108 0808 	add.w	r8, r8, #8
 800d522:	2800      	cmp	r0, #0
 800d524:	d0f2      	beq.n	800d50c <uxr_deserialize_CLIENT_Representation+0x88>
 800d526:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d52a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d52e:	4628      	mov	r0, r5
 800d530:	f004 f904 	bl	801173c <ucdr_deserialize_string>
 800d534:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d538:	4607      	mov	r7, r0
 800d53a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d53e:	4628      	mov	r0, r5
 800d540:	f004 f8fc 	bl	801173c <ucdr_deserialize_string>
 800d544:	6923      	ldr	r3, [r4, #16]
 800d546:	f109 0901 	add.w	r9, r9, #1
 800d54a:	4038      	ands	r0, r7
 800d54c:	4599      	cmp	r9, r3
 800d54e:	b2c0      	uxtb	r0, r0
 800d550:	d3e5      	bcc.n	800d51e <uxr_deserialize_CLIENT_Representation+0x9a>
 800d552:	4006      	ands	r6, r0
 800d554:	e7c8      	b.n	800d4e8 <uxr_deserialize_CLIENT_Representation+0x64>
 800d556:	bf00      	nop

0800d558 <uxr_serialize_AGENT_Representation>:
 800d558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d55c:	2204      	movs	r2, #4
 800d55e:	460c      	mov	r4, r1
 800d560:	4605      	mov	r5, r0
 800d562:	f003 ffbb 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d566:	1d21      	adds	r1, r4, #4
 800d568:	4606      	mov	r6, r0
 800d56a:	2202      	movs	r2, #2
 800d56c:	4628      	mov	r0, r5
 800d56e:	f003 ffb5 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d572:	1da1      	adds	r1, r4, #6
 800d574:	4006      	ands	r6, r0
 800d576:	2202      	movs	r2, #2
 800d578:	4628      	mov	r0, r5
 800d57a:	f003 ffaf 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d57e:	b2f6      	uxtb	r6, r6
 800d580:	4603      	mov	r3, r0
 800d582:	7a21      	ldrb	r1, [r4, #8]
 800d584:	4628      	mov	r0, r5
 800d586:	401e      	ands	r6, r3
 800d588:	f7fb fa64 	bl	8008a54 <ucdr_serialize_bool>
 800d58c:	7a23      	ldrb	r3, [r4, #8]
 800d58e:	ea00 0706 	and.w	r7, r0, r6
 800d592:	b913      	cbnz	r3, 800d59a <uxr_serialize_AGENT_Representation+0x42>
 800d594:	4638      	mov	r0, r7
 800d596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d59a:	68e1      	ldr	r1, [r4, #12]
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7fb fc9f 	bl	8008ee0 <ucdr_serialize_uint32_t>
 800d5a2:	68e3      	ldr	r3, [r4, #12]
 800d5a4:	b313      	cbz	r3, 800d5ec <uxr_serialize_AGENT_Representation+0x94>
 800d5a6:	b1e8      	cbz	r0, 800d5e4 <uxr_serialize_AGENT_Representation+0x8c>
 800d5a8:	46a0      	mov	r8, r4
 800d5aa:	f04f 0900 	mov.w	r9, #0
 800d5ae:	e002      	b.n	800d5b6 <uxr_serialize_AGENT_Representation+0x5e>
 800d5b0:	f108 0808 	add.w	r8, r8, #8
 800d5b4:	b1b3      	cbz	r3, 800d5e4 <uxr_serialize_AGENT_Representation+0x8c>
 800d5b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f004 f8ae 	bl	801171c <ucdr_serialize_string>
 800d5c0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f004 f8a8 	bl	801171c <ucdr_serialize_string>
 800d5cc:	68e2      	ldr	r2, [r4, #12]
 800d5ce:	f109 0901 	add.w	r9, r9, #1
 800d5d2:	ea06 0300 	and.w	r3, r6, r0
 800d5d6:	4591      	cmp	r9, r2
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	d3e9      	bcc.n	800d5b0 <uxr_serialize_AGENT_Representation+0x58>
 800d5dc:	401f      	ands	r7, r3
 800d5de:	4638      	mov	r0, r7
 800d5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5e4:	2700      	movs	r7, #0
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ec:	4007      	ands	r7, r0
 800d5ee:	e7d1      	b.n	800d594 <uxr_serialize_AGENT_Representation+0x3c>

0800d5f0 <uxr_serialize_ObjectVariant.part.0>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	780b      	ldrb	r3, [r1, #0]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	4605      	mov	r5, r0
 800d5fa:	2b0d      	cmp	r3, #13
 800d5fc:	d869      	bhi.n	800d6d2 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800d5fe:	e8df f003 	tbb	[pc, r3]
 800d602:	074a      	.short	0x074a
 800d604:	07073030 	.word	0x07073030
 800d608:	21680707 	.word	0x21680707
 800d60c:	45632121 	.word	0x45632121
 800d610:	7909      	ldrb	r1, [r1, #4]
 800d612:	f7fb fa4f 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d616:	4606      	mov	r6, r0
 800d618:	b158      	cbz	r0, 800d632 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d61a:	7923      	ldrb	r3, [r4, #4]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d003      	beq.n	800d628 <uxr_serialize_ObjectVariant.part.0+0x38>
 800d620:	2b03      	cmp	r3, #3
 800d622:	d029      	beq.n	800d678 <uxr_serialize_ObjectVariant.part.0+0x88>
 800d624:	2b01      	cmp	r3, #1
 800d626:	d104      	bne.n	800d632 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d628:	68a1      	ldr	r1, [r4, #8]
 800d62a:	4628      	mov	r0, r5
 800d62c:	f004 f876 	bl	801171c <ucdr_serialize_string>
 800d630:	4606      	mov	r6, r0
 800d632:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d636:	4628      	mov	r0, r5
 800d638:	2202      	movs	r2, #2
 800d63a:	f003 ff4f 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d63e:	4030      	ands	r0, r6
 800d640:	b2c0      	uxtb	r0, r0
 800d642:	bd70      	pop	{r4, r5, r6, pc}
 800d644:	7909      	ldrb	r1, [r1, #4]
 800d646:	f7fb fa35 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d64a:	b1e8      	cbz	r0, 800d688 <uxr_serialize_ObjectVariant.part.0+0x98>
 800d64c:	7923      	ldrb	r3, [r4, #4]
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d001      	beq.n	800d656 <uxr_serialize_ObjectVariant.part.0+0x66>
 800d652:	2b02      	cmp	r3, #2
 800d654:	d13d      	bne.n	800d6d2 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800d656:	68a1      	ldr	r1, [r4, #8]
 800d658:	4628      	mov	r0, r5
 800d65a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d65e:	f004 b85d 	b.w	801171c <ucdr_serialize_string>
 800d662:	7909      	ldrb	r1, [r1, #4]
 800d664:	f7fb fa26 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d668:	4606      	mov	r6, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0e1      	beq.n	800d632 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d66e:	7923      	ldrb	r3, [r4, #4]
 800d670:	2b02      	cmp	r3, #2
 800d672:	d0d9      	beq.n	800d628 <uxr_serialize_ObjectVariant.part.0+0x38>
 800d674:	2b03      	cmp	r3, #3
 800d676:	d1dc      	bne.n	800d632 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d678:	68a2      	ldr	r2, [r4, #8]
 800d67a:	f104 010c 	add.w	r1, r4, #12
 800d67e:	4628      	mov	r0, r5
 800d680:	f004 f820 	bl	80116c4 <ucdr_serialize_sequence_uint8_t>
 800d684:	4606      	mov	r6, r0
 800d686:	e7d4      	b.n	800d632 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d688:	2000      	movs	r0, #0
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
 800d68c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d690:	3104      	adds	r1, #4
 800d692:	f7ff be9b 	b.w	800d3cc <uxr_serialize_CLIENT_Representation>
 800d696:	7909      	ldrb	r1, [r1, #4]
 800d698:	f7fb fa0c 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d69c:	4606      	mov	r6, r0
 800d69e:	b158      	cbz	r0, 800d6b8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800d6a0:	7923      	ldrb	r3, [r4, #4]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d003      	beq.n	800d6ae <uxr_serialize_ObjectVariant.part.0+0xbe>
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d015      	beq.n	800d6d6 <uxr_serialize_ObjectVariant.part.0+0xe6>
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d104      	bne.n	800d6b8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800d6ae:	68a1      	ldr	r1, [r4, #8]
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	f004 f833 	bl	801171c <ucdr_serialize_string>
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f7fb ff35 	bl	800952c <ucdr_serialize_int16_t>
 800d6c2:	4030      	ands	r0, r6
 800d6c4:	b2c0      	uxtb	r0, r0
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}
 800d6c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6cc:	3104      	adds	r1, #4
 800d6ce:	f7ff bf43 	b.w	800d558 <uxr_serialize_AGENT_Representation>
 800d6d2:	2001      	movs	r0, #1
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
 800d6d6:	68a2      	ldr	r2, [r4, #8]
 800d6d8:	f104 010c 	add.w	r1, r4, #12
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f003 fff1 	bl	80116c4 <ucdr_serialize_sequence_uint8_t>
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	e7e8      	b.n	800d6b8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800d6e6:	bf00      	nop

0800d6e8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	7809      	ldrb	r1, [r1, #0]
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	f7fb f9b0 	bl	8008a54 <ucdr_serialize_bool>
 800d6f4:	782b      	ldrb	r3, [r5, #0]
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	b94b      	cbnz	r3, 800d70e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d6fa:	7a29      	ldrb	r1, [r5, #8]
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f7fb f9a9 	bl	8008a54 <ucdr_serialize_bool>
 800d702:	7a2b      	ldrb	r3, [r5, #8]
 800d704:	4004      	ands	r4, r0
 800d706:	b2e4      	uxtb	r4, r4
 800d708:	b943      	cbnz	r3, 800d71c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d70a:	4620      	mov	r0, r4
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
 800d70e:	6869      	ldr	r1, [r5, #4]
 800d710:	4630      	mov	r0, r6
 800d712:	f004 f803 	bl	801171c <ucdr_serialize_string>
 800d716:	4004      	ands	r4, r0
 800d718:	b2e4      	uxtb	r4, r4
 800d71a:	e7ee      	b.n	800d6fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d71c:	68e9      	ldr	r1, [r5, #12]
 800d71e:	4630      	mov	r0, r6
 800d720:	f003 fffc 	bl	801171c <ucdr_serialize_string>
 800d724:	4004      	ands	r4, r0
 800d726:	4620      	mov	r0, r4
 800d728:	bd70      	pop	{r4, r5, r6, pc}
 800d72a:	bf00      	nop

0800d72c <uxr_serialize_OBJK_Replier_Binary>:
 800d72c:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800d730:	460f      	mov	r7, r1
 800d732:	6809      	ldr	r1, [r1, #0]
 800d734:	4680      	mov	r8, r0
 800d736:	f003 fff1 	bl	801171c <ucdr_serialize_string>
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	4604      	mov	r4, r0
 800d73e:	4640      	mov	r0, r8
 800d740:	f003 ffec 	bl	801171c <ucdr_serialize_string>
 800d744:	68b9      	ldr	r1, [r7, #8]
 800d746:	4004      	ands	r4, r0
 800d748:	4640      	mov	r0, r8
 800d74a:	f003 ffe7 	bl	801171c <ucdr_serialize_string>
 800d74e:	b2e6      	uxtb	r6, r4
 800d750:	7b39      	ldrb	r1, [r7, #12]
 800d752:	4604      	mov	r4, r0
 800d754:	4640      	mov	r0, r8
 800d756:	f7fb f97d 	bl	8008a54 <ucdr_serialize_bool>
 800d75a:	7b3b      	ldrb	r3, [r7, #12]
 800d75c:	4034      	ands	r4, r6
 800d75e:	4004      	ands	r4, r0
 800d760:	b94b      	cbnz	r3, 800d776 <uxr_serialize_OBJK_Replier_Binary+0x4a>
 800d762:	7d39      	ldrb	r1, [r7, #20]
 800d764:	4640      	mov	r0, r8
 800d766:	f7fb f975 	bl	8008a54 <ucdr_serialize_bool>
 800d76a:	7d3b      	ldrb	r3, [r7, #20]
 800d76c:	4004      	ands	r4, r0
 800d76e:	b943      	cbnz	r3, 800d782 <uxr_serialize_OBJK_Replier_Binary+0x56>
 800d770:	4620      	mov	r0, r4
 800d772:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
 800d776:	6939      	ldr	r1, [r7, #16]
 800d778:	4640      	mov	r0, r8
 800d77a:	f003 ffcf 	bl	801171c <ucdr_serialize_string>
 800d77e:	4004      	ands	r4, r0
 800d780:	e7ef      	b.n	800d762 <uxr_serialize_OBJK_Replier_Binary+0x36>
 800d782:	69b9      	ldr	r1, [r7, #24]
 800d784:	4640      	mov	r0, r8
 800d786:	f003 ffc9 	bl	801171c <ucdr_serialize_string>
 800d78a:	4004      	ands	r4, r0
 800d78c:	b2e4      	uxtb	r4, r4
 800d78e:	4620      	mov	r0, r4
 800d790:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}

0800d794 <uxr_deserialize_ObjectVariant>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	4605      	mov	r5, r0
 800d798:	460e      	mov	r6, r1
 800d79a:	f7fb f9a1 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d79e:	b320      	cbz	r0, 800d7ea <uxr_deserialize_ObjectVariant+0x56>
 800d7a0:	7833      	ldrb	r3, [r6, #0]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	2b0d      	cmp	r3, #13
 800d7a8:	d81d      	bhi.n	800d7e6 <uxr_deserialize_ObjectVariant+0x52>
 800d7aa:	e8df f003 	tbb	[pc, r3]
 800d7ae:	2107      	.short	0x2107
 800d7b0:	21214b4b 	.word	0x21214b4b
 800d7b4:	381c2121 	.word	0x381c2121
 800d7b8:	876a3838 	.word	0x876a3838
 800d7bc:	1d31      	adds	r1, r6, #4
 800d7be:	4628      	mov	r0, r5
 800d7c0:	f7fb f98e 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	b138      	cbz	r0, 800d7d8 <uxr_deserialize_ObjectVariant+0x44>
 800d7c8:	7933      	ldrb	r3, [r6, #4]
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d07c      	beq.n	800d8c8 <uxr_deserialize_ObjectVariant+0x134>
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	f000 8082 	beq.w	800d8d8 <uxr_deserialize_ObjectVariant+0x144>
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d077      	beq.n	800d8c8 <uxr_deserialize_ObjectVariant+0x134>
 800d7d8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f7fb ff25 	bl	800962c <ucdr_deserialize_int16_t>
 800d7e2:	4038      	ands	r0, r7
 800d7e4:	b2c4      	uxtb	r4, r0
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f0:	1d31      	adds	r1, r6, #4
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f7fb f974 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d7f8:	4607      	mov	r7, r0
 800d7fa:	b130      	cbz	r0, 800d80a <uxr_deserialize_ObjectVariant+0x76>
 800d7fc:	7933      	ldrb	r3, [r6, #4]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d037      	beq.n	800d872 <uxr_deserialize_ObjectVariant+0xde>
 800d802:	2b03      	cmp	r3, #3
 800d804:	d02a      	beq.n	800d85c <uxr_deserialize_ObjectVariant+0xc8>
 800d806:	2b01      	cmp	r3, #1
 800d808:	d033      	beq.n	800d872 <uxr_deserialize_ObjectVariant+0xde>
 800d80a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d80e:	4628      	mov	r0, r5
 800d810:	2202      	movs	r2, #2
 800d812:	f003 fec7 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d816:	4038      	ands	r0, r7
 800d818:	b2c4      	uxtb	r4, r0
 800d81a:	4620      	mov	r0, r4
 800d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d81e:	1d31      	adds	r1, r6, #4
 800d820:	4628      	mov	r0, r5
 800d822:	f7fb f95d 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d826:	2800      	cmp	r0, #0
 800d828:	d0df      	beq.n	800d7ea <uxr_deserialize_ObjectVariant+0x56>
 800d82a:	7933      	ldrb	r3, [r6, #4]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d001      	beq.n	800d834 <uxr_deserialize_ObjectVariant+0xa0>
 800d830:	2b02      	cmp	r3, #2
 800d832:	d1d8      	bne.n	800d7e6 <uxr_deserialize_ObjectVariant+0x52>
 800d834:	68b1      	ldr	r1, [r6, #8]
 800d836:	4628      	mov	r0, r5
 800d838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d83c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d840:	f003 bf7c 	b.w	801173c <ucdr_deserialize_string>
 800d844:	1d31      	adds	r1, r6, #4
 800d846:	4628      	mov	r0, r5
 800d848:	f7fb f94a 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800d84c:	4607      	mov	r7, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	d0db      	beq.n	800d80a <uxr_deserialize_ObjectVariant+0x76>
 800d852:	7933      	ldrb	r3, [r6, #4]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d00c      	beq.n	800d872 <uxr_deserialize_ObjectVariant+0xde>
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d1d6      	bne.n	800d80a <uxr_deserialize_ObjectVariant+0x76>
 800d85c:	f106 0308 	add.w	r3, r6, #8
 800d860:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d864:	f106 010c 	add.w	r1, r6, #12
 800d868:	4628      	mov	r0, r5
 800d86a:	f003 ff3d 	bl	80116e8 <ucdr_deserialize_sequence_uint8_t>
 800d86e:	4607      	mov	r7, r0
 800d870:	e7cb      	b.n	800d80a <uxr_deserialize_ObjectVariant+0x76>
 800d872:	68b1      	ldr	r1, [r6, #8]
 800d874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d878:	4628      	mov	r0, r5
 800d87a:	f003 ff5f 	bl	801173c <ucdr_deserialize_string>
 800d87e:	4607      	mov	r7, r0
 800d880:	e7c3      	b.n	800d80a <uxr_deserialize_ObjectVariant+0x76>
 800d882:	2204      	movs	r2, #4
 800d884:	18b1      	adds	r1, r6, r2
 800d886:	4628      	mov	r0, r5
 800d888:	f003 fe8c 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d88c:	2202      	movs	r2, #2
 800d88e:	4604      	mov	r4, r0
 800d890:	f106 0108 	add.w	r1, r6, #8
 800d894:	4628      	mov	r0, r5
 800d896:	f003 fe85 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d89a:	2202      	movs	r2, #2
 800d89c:	4004      	ands	r4, r0
 800d89e:	f106 010a 	add.w	r1, r6, #10
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f003 fe7e 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d8a8:	b2e4      	uxtb	r4, r4
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f106 010c 	add.w	r1, r6, #12
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	401c      	ands	r4, r3
 800d8b4:	f7fb f8e4 	bl	8008a80 <ucdr_deserialize_bool>
 800d8b8:	4004      	ands	r4, r0
 800d8ba:	e794      	b.n	800d7e6 <uxr_deserialize_ObjectVariant+0x52>
 800d8bc:	1d31      	adds	r1, r6, #4
 800d8be:	4628      	mov	r0, r5
 800d8c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8c4:	f7ff bdde 	b.w	800d484 <uxr_deserialize_CLIENT_Representation>
 800d8c8:	68b1      	ldr	r1, [r6, #8]
 800d8ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f003 ff34 	bl	801173c <ucdr_deserialize_string>
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	e77f      	b.n	800d7d8 <uxr_deserialize_ObjectVariant+0x44>
 800d8d8:	f106 0308 	add.w	r3, r6, #8
 800d8dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8e0:	f106 010c 	add.w	r1, r6, #12
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	f003 feff 	bl	80116e8 <ucdr_deserialize_sequence_uint8_t>
 800d8ea:	4607      	mov	r7, r0
 800d8ec:	e774      	b.n	800d7d8 <uxr_deserialize_ObjectVariant+0x44>
 800d8ee:	bf00      	nop

0800d8f0 <uxr_deserialize_BaseObjectRequest>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	460e      	mov	r6, r1
 800d8f8:	f003 fe54 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d8fc:	1cb1      	adds	r1, r6, #2
 800d8fe:	4604      	mov	r4, r0
 800d900:	2202      	movs	r2, #2
 800d902:	4628      	mov	r0, r5
 800d904:	f003 fe4e 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800d908:	4020      	ands	r0, r4
 800d90a:	b2c0      	uxtb	r0, r0
 800d90c:	bd70      	pop	{r4, r5, r6, pc}
 800d90e:	bf00      	nop

0800d910 <uxr_serialize_AGENT_ActivityInfo>:
 800d910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d914:	460e      	mov	r6, r1
 800d916:	f9b1 1000 	ldrsh.w	r1, [r1]
 800d91a:	4607      	mov	r7, r0
 800d91c:	f7fb fe06 	bl	800952c <ucdr_serialize_int16_t>
 800d920:	6871      	ldr	r1, [r6, #4]
 800d922:	4680      	mov	r8, r0
 800d924:	4638      	mov	r0, r7
 800d926:	f7fb fadb 	bl	8008ee0 <ucdr_serialize_uint32_t>
 800d92a:	6873      	ldr	r3, [r6, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d06a      	beq.n	800da06 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800d930:	b318      	cbz	r0, 800d97a <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800d932:	f106 0904 	add.w	r9, r6, #4
 800d936:	2500      	movs	r5, #0
 800d938:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800d93c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800d940:	7a21      	ldrb	r1, [r4, #8]
 800d942:	4638      	mov	r0, r7
 800d944:	f7fb f8b6 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d051      	beq.n	800d9f0 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800d94c:	7a23      	ldrb	r3, [r4, #8]
 800d94e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d952:	00c9      	lsls	r1, r1, #3
 800d954:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800d958:	2b03      	cmp	r3, #3
 800d95a:	d859      	bhi.n	800da10 <uxr_serialize_AGENT_ActivityInfo+0x100>
 800d95c:	e8df f003 	tbb	[pc, r3]
 800d960:	02122436 	.word	0x02122436
 800d964:	4449      	add	r1, r9
 800d966:	4638      	mov	r0, r7
 800d968:	6889      	ldr	r1, [r1, #8]
 800d96a:	f003 fed7 	bl	801171c <ucdr_serialize_string>
 800d96e:	6873      	ldr	r3, [r6, #4]
 800d970:	3501      	adds	r5, #1
 800d972:	429d      	cmp	r5, r3
 800d974:	d240      	bcs.n	800d9f8 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800d976:	2800      	cmp	r0, #0
 800d978:	d1de      	bne.n	800d938 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800d97a:	f04f 0800 	mov.w	r8, #0
 800d97e:	4640      	mov	r0, r8
 800d980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d984:	3108      	adds	r1, #8
 800d986:	4449      	add	r1, r9
 800d988:	2210      	movs	r2, #16
 800d98a:	4638      	mov	r0, r7
 800d98c:	f003 fda6 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d990:	44aa      	add	sl, r5
 800d992:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800d996:	4604      	mov	r4, r0
 800d998:	f8da 101c 	ldr.w	r1, [sl, #28]
 800d99c:	4638      	mov	r0, r7
 800d99e:	f7fb fa9f 	bl	8008ee0 <ucdr_serialize_uint32_t>
 800d9a2:	4020      	ands	r0, r4
 800d9a4:	b2c0      	uxtb	r0, r0
 800d9a6:	e7e2      	b.n	800d96e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800d9a8:	3108      	adds	r1, #8
 800d9aa:	4449      	add	r1, r9
 800d9ac:	2204      	movs	r2, #4
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	f003 fd94 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d9b4:	44aa      	add	sl, r5
 800d9b6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	f7fb f8a3 	bl	8008b0c <ucdr_serialize_uint16_t>
 800d9c6:	4020      	ands	r0, r4
 800d9c8:	b2c0      	uxtb	r0, r0
 800d9ca:	e7d0      	b.n	800d96e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800d9cc:	3108      	adds	r1, #8
 800d9ce:	4449      	add	r1, r9
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	4638      	mov	r0, r7
 800d9d4:	f003 fd82 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800d9d8:	44aa      	add	sl, r5
 800d9da:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800d9de:	4604      	mov	r4, r0
 800d9e0:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	f7fb f865 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800d9ea:	4020      	ands	r0, r4
 800d9ec:	b2c0      	uxtb	r0, r0
 800d9ee:	e7be      	b.n	800d96e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800d9f0:	6873      	ldr	r3, [r6, #4]
 800d9f2:	3501      	adds	r5, #1
 800d9f4:	429d      	cmp	r5, r3
 800d9f6:	d3c0      	bcc.n	800d97a <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800d9f8:	ea08 0000 	and.w	r0, r8, r0
 800d9fc:	fa5f f880 	uxtb.w	r8, r0
 800da00:	4640      	mov	r0, r8
 800da02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da06:	ea08 0800 	and.w	r8, r8, r0
 800da0a:	fa5f f888 	uxtb.w	r8, r8
 800da0e:	e7b6      	b.n	800d97e <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800da10:	6873      	ldr	r3, [r6, #4]
 800da12:	3501      	adds	r5, #1
 800da14:	42ab      	cmp	r3, r5
 800da16:	f104 0418 	add.w	r4, r4, #24
 800da1a:	d891      	bhi.n	800d940 <uxr_serialize_AGENT_ActivityInfo+0x30>
 800da1c:	e7af      	b.n	800d97e <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800da1e:	bf00      	nop

0800da20 <uxr_serialize_ActivityInfoVariant>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	460d      	mov	r5, r1
 800da24:	7809      	ldrb	r1, [r1, #0]
 800da26:	4606      	mov	r6, r0
 800da28:	f7fb f844 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800da2c:	b130      	cbz	r0, 800da3c <uxr_serialize_ActivityInfoVariant+0x1c>
 800da2e:	782b      	ldrb	r3, [r5, #0]
 800da30:	2b06      	cmp	r3, #6
 800da32:	d019      	beq.n	800da68 <uxr_serialize_ActivityInfoVariant+0x48>
 800da34:	2b0d      	cmp	r3, #13
 800da36:	d010      	beq.n	800da5a <uxr_serialize_ActivityInfoVariant+0x3a>
 800da38:	2b05      	cmp	r3, #5
 800da3a:	d000      	beq.n	800da3e <uxr_serialize_ActivityInfoVariant+0x1e>
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
 800da3e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800da42:	4630      	mov	r0, r6
 800da44:	f7fb fd72 	bl	800952c <ucdr_serialize_int16_t>
 800da48:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800da4c:	4604      	mov	r4, r0
 800da4e:	4630      	mov	r0, r6
 800da50:	f7fb fc9c 	bl	800938c <ucdr_serialize_uint64_t>
 800da54:	4020      	ands	r0, r4
 800da56:	b2c0      	uxtb	r0, r0
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	f105 0108 	add.w	r1, r5, #8
 800da5e:	4630      	mov	r0, r6
 800da60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da64:	f7ff bf54 	b.w	800d910 <uxr_serialize_AGENT_ActivityInfo>
 800da68:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800da6c:	4630      	mov	r0, r6
 800da6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da72:	f7fb bd5b 	b.w	800952c <ucdr_serialize_int16_t>
 800da76:	bf00      	nop

0800da78 <uxr_deserialize_BaseObjectReply>:
 800da78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7c:	2202      	movs	r2, #2
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	f003 fd8f 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800da86:	2202      	movs	r2, #2
 800da88:	1cb9      	adds	r1, r7, #2
 800da8a:	4605      	mov	r5, r0
 800da8c:	4630      	mov	r0, r6
 800da8e:	f003 fd89 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800da92:	1d39      	adds	r1, r7, #4
 800da94:	4680      	mov	r8, r0
 800da96:	4630      	mov	r0, r6
 800da98:	f7fb f822 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800da9c:	1d79      	adds	r1, r7, #5
 800da9e:	4604      	mov	r4, r0
 800daa0:	4630      	mov	r0, r6
 800daa2:	f7fb f81d 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800daa6:	ea05 0508 	and.w	r5, r5, r8
 800daaa:	402c      	ands	r4, r5
 800daac:	4020      	ands	r0, r4
 800daae:	b2c0      	uxtb	r0, r0
 800dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dab4 <uxr_serialize_ReadSpecification>:
 800dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab8:	460e      	mov	r6, r1
 800daba:	7809      	ldrb	r1, [r1, #0]
 800dabc:	4607      	mov	r7, r0
 800dabe:	f7fa fff9 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dac2:	7871      	ldrb	r1, [r6, #1]
 800dac4:	4604      	mov	r4, r0
 800dac6:	4638      	mov	r0, r7
 800dac8:	f7fa fff4 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dacc:	78b1      	ldrb	r1, [r6, #2]
 800dace:	4004      	ands	r4, r0
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7fa ffbf 	bl	8008a54 <ucdr_serialize_bool>
 800dad6:	78b3      	ldrb	r3, [r6, #2]
 800dad8:	b2e4      	uxtb	r4, r4
 800dada:	4004      	ands	r4, r0
 800dadc:	b94b      	cbnz	r3, 800daf2 <uxr_serialize_ReadSpecification+0x3e>
 800dade:	7a31      	ldrb	r1, [r6, #8]
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7fa ffb7 	bl	8008a54 <ucdr_serialize_bool>
 800dae6:	7a33      	ldrb	r3, [r6, #8]
 800dae8:	4004      	ands	r4, r0
 800daea:	b943      	cbnz	r3, 800dafe <uxr_serialize_ReadSpecification+0x4a>
 800daec:	4620      	mov	r0, r4
 800daee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf2:	6871      	ldr	r1, [r6, #4]
 800daf4:	4638      	mov	r0, r7
 800daf6:	f003 fe11 	bl	801171c <ucdr_serialize_string>
 800dafa:	4004      	ands	r4, r0
 800dafc:	e7ef      	b.n	800dade <uxr_serialize_ReadSpecification+0x2a>
 800dafe:	8971      	ldrh	r1, [r6, #10]
 800db00:	4638      	mov	r0, r7
 800db02:	f7fb f803 	bl	8008b0c <ucdr_serialize_uint16_t>
 800db06:	89b1      	ldrh	r1, [r6, #12]
 800db08:	4605      	mov	r5, r0
 800db0a:	4638      	mov	r0, r7
 800db0c:	f7fa fffe 	bl	8008b0c <ucdr_serialize_uint16_t>
 800db10:	89f1      	ldrh	r1, [r6, #14]
 800db12:	4005      	ands	r5, r0
 800db14:	4638      	mov	r0, r7
 800db16:	f7fa fff9 	bl	8008b0c <ucdr_serialize_uint16_t>
 800db1a:	8a31      	ldrh	r1, [r6, #16]
 800db1c:	4680      	mov	r8, r0
 800db1e:	4638      	mov	r0, r7
 800db20:	f7fa fff4 	bl	8008b0c <ucdr_serialize_uint16_t>
 800db24:	b2ed      	uxtb	r5, r5
 800db26:	4025      	ands	r5, r4
 800db28:	ea08 0505 	and.w	r5, r8, r5
 800db2c:	ea00 0405 	and.w	r4, r0, r5
 800db30:	4620      	mov	r0, r4
 800db32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db36:	bf00      	nop

0800db38 <uxr_serialize_CREATE_CLIENT_Payload>:
 800db38:	f7ff bc48 	b.w	800d3cc <uxr_serialize_CLIENT_Representation>

0800db3c <uxr_serialize_CREATE_Payload>:
 800db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3e:	2202      	movs	r2, #2
 800db40:	4606      	mov	r6, r0
 800db42:	460d      	mov	r5, r1
 800db44:	f003 fcca 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800db48:	1ca9      	adds	r1, r5, #2
 800db4a:	4604      	mov	r4, r0
 800db4c:	2202      	movs	r2, #2
 800db4e:	4630      	mov	r0, r6
 800db50:	f003 fcc4 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800db54:	7929      	ldrb	r1, [r5, #4]
 800db56:	4607      	mov	r7, r0
 800db58:	4630      	mov	r0, r6
 800db5a:	f7fa ffab 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800db5e:	b328      	cbz	r0, 800dbac <uxr_serialize_CREATE_Payload+0x70>
 800db60:	792b      	ldrb	r3, [r5, #4]
 800db62:	403c      	ands	r4, r7
 800db64:	3b01      	subs	r3, #1
 800db66:	b2e4      	uxtb	r4, r4
 800db68:	2b0d      	cmp	r3, #13
 800db6a:	d81d      	bhi.n	800dba8 <uxr_serialize_CREATE_Payload+0x6c>
 800db6c:	e8df f003 	tbb	[pc, r3]
 800db70:	32320753 	.word	0x32320753
 800db74:	07070707 	.word	0x07070707
 800db78:	2121211c 	.word	0x2121211c
 800db7c:	684c      	.short	0x684c
 800db7e:	7a29      	ldrb	r1, [r5, #8]
 800db80:	4630      	mov	r0, r6
 800db82:	f7fa ff97 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800db86:	4607      	mov	r7, r0
 800db88:	b130      	cbz	r0, 800db98 <uxr_serialize_CREATE_Payload+0x5c>
 800db8a:	7a2b      	ldrb	r3, [r5, #8]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d035      	beq.n	800dbfc <uxr_serialize_CREATE_Payload+0xc0>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d02b      	beq.n	800dbec <uxr_serialize_CREATE_Payload+0xb0>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d031      	beq.n	800dbfc <uxr_serialize_CREATE_Payload+0xc0>
 800db98:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800db9c:	4630      	mov	r0, r6
 800db9e:	2202      	movs	r2, #2
 800dba0:	f003 fc9c 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800dba4:	4038      	ands	r0, r7
 800dba6:	4004      	ands	r4, r0
 800dba8:	4620      	mov	r0, r4
 800dbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbac:	2400      	movs	r4, #0
 800dbae:	4620      	mov	r0, r4
 800dbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbb2:	7a29      	ldrb	r1, [r5, #8]
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7fa ff7d 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d0f6      	beq.n	800dbac <uxr_serialize_CREATE_Payload+0x70>
 800dbbe:	7a2b      	ldrb	r3, [r5, #8]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d001      	beq.n	800dbc8 <uxr_serialize_CREATE_Payload+0x8c>
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d1ef      	bne.n	800dba8 <uxr_serialize_CREATE_Payload+0x6c>
 800dbc8:	68e9      	ldr	r1, [r5, #12]
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f003 fda6 	bl	801171c <ucdr_serialize_string>
 800dbd0:	4004      	ands	r4, r0
 800dbd2:	e7e9      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x6c>
 800dbd4:	7a29      	ldrb	r1, [r5, #8]
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f7fa ff6c 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dbdc:	4607      	mov	r7, r0
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d0da      	beq.n	800db98 <uxr_serialize_CREATE_Payload+0x5c>
 800dbe2:	7a2b      	ldrb	r3, [r5, #8]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d009      	beq.n	800dbfc <uxr_serialize_CREATE_Payload+0xc0>
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d1d5      	bne.n	800db98 <uxr_serialize_CREATE_Payload+0x5c>
 800dbec:	68ea      	ldr	r2, [r5, #12]
 800dbee:	f105 0110 	add.w	r1, r5, #16
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f003 fd66 	bl	80116c4 <ucdr_serialize_sequence_uint8_t>
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	e7cd      	b.n	800db98 <uxr_serialize_CREATE_Payload+0x5c>
 800dbfc:	68e9      	ldr	r1, [r5, #12]
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f003 fd8c 	bl	801171c <ucdr_serialize_string>
 800dc04:	4607      	mov	r7, r0
 800dc06:	e7c7      	b.n	800db98 <uxr_serialize_CREATE_Payload+0x5c>
 800dc08:	f105 0108 	add.w	r1, r5, #8
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff fca3 	bl	800d558 <uxr_serialize_AGENT_Representation>
 800dc12:	4004      	ands	r4, r0
 800dc14:	e7c8      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x6c>
 800dc16:	7a29      	ldrb	r1, [r5, #8]
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7fa ff4b 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dc1e:	4607      	mov	r7, r0
 800dc20:	b130      	cbz	r0, 800dc30 <uxr_serialize_CREATE_Payload+0xf4>
 800dc22:	7a2b      	ldrb	r3, [r5, #8]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d012      	beq.n	800dc4e <uxr_serialize_CREATE_Payload+0x112>
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	d016      	beq.n	800dc5a <uxr_serialize_CREATE_Payload+0x11e>
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d00e      	beq.n	800dc4e <uxr_serialize_CREATE_Payload+0x112>
 800dc30:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 800dc34:	4630      	mov	r0, r6
 800dc36:	f7fb fc79 	bl	800952c <ucdr_serialize_int16_t>
 800dc3a:	4038      	ands	r0, r7
 800dc3c:	4004      	ands	r4, r0
 800dc3e:	e7b3      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x6c>
 800dc40:	f105 0108 	add.w	r1, r5, #8
 800dc44:	4630      	mov	r0, r6
 800dc46:	f7ff fbc1 	bl	800d3cc <uxr_serialize_CLIENT_Representation>
 800dc4a:	4004      	ands	r4, r0
 800dc4c:	e7ac      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x6c>
 800dc4e:	68e9      	ldr	r1, [r5, #12]
 800dc50:	4630      	mov	r0, r6
 800dc52:	f003 fd63 	bl	801171c <ucdr_serialize_string>
 800dc56:	4607      	mov	r7, r0
 800dc58:	e7ea      	b.n	800dc30 <uxr_serialize_CREATE_Payload+0xf4>
 800dc5a:	68ea      	ldr	r2, [r5, #12]
 800dc5c:	f105 0110 	add.w	r1, r5, #16
 800dc60:	4630      	mov	r0, r6
 800dc62:	f003 fd2f 	bl	80116c4 <ucdr_serialize_sequence_uint8_t>
 800dc66:	4607      	mov	r7, r0
 800dc68:	e7e2      	b.n	800dc30 <uxr_serialize_CREATE_Payload+0xf4>
 800dc6a:	bf00      	nop

0800dc6c <uxr_deserialize_GET_INFO_Payload>:
 800dc6c:	b570      	push	{r4, r5, r6, lr}
 800dc6e:	2202      	movs	r2, #2
 800dc70:	4605      	mov	r5, r0
 800dc72:	460e      	mov	r6, r1
 800dc74:	f003 fc96 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dc78:	1cb1      	adds	r1, r6, #2
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f003 fc90 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dc84:	1d31      	adds	r1, r6, #4
 800dc86:	4004      	ands	r4, r0
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f7fb fa59 	bl	8009140 <ucdr_deserialize_uint32_t>
 800dc8e:	b2e4      	uxtb	r4, r4
 800dc90:	4020      	ands	r0, r4
 800dc92:	bd70      	pop	{r4, r5, r6, pc}

0800dc94 <uxr_serialize_DELETE_Payload>:
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	2202      	movs	r2, #2
 800dc98:	4605      	mov	r5, r0
 800dc9a:	460e      	mov	r6, r1
 800dc9c:	f003 fc1e 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800dca0:	1cb1      	adds	r1, r6, #2
 800dca2:	4604      	mov	r4, r0
 800dca4:	2202      	movs	r2, #2
 800dca6:	4628      	mov	r0, r5
 800dca8:	f003 fc18 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800dcac:	4020      	ands	r0, r4
 800dcae:	b2c0      	uxtb	r0, r0
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
 800dcb2:	bf00      	nop

0800dcb4 <uxr_deserialize_STATUS_AGENT_Payload>:
 800dcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb8:	4606      	mov	r6, r0
 800dcba:	460f      	mov	r7, r1
 800dcbc:	f7fa ff10 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800dcc0:	1c79      	adds	r1, r7, #1
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f7fa ff0b 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800dcca:	1d39      	adds	r1, r7, #4
 800dccc:	4681      	mov	r9, r0
 800dcce:	2204      	movs	r2, #4
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f003 fc67 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dcd6:	f107 0108 	add.w	r1, r7, #8
 800dcda:	4604      	mov	r4, r0
 800dcdc:	2202      	movs	r2, #2
 800dcde:	4630      	mov	r0, r6
 800dce0:	f003 fc60 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dce4:	f107 010a 	add.w	r1, r7, #10
 800dce8:	4680      	mov	r8, r0
 800dcea:	2202      	movs	r2, #2
 800dcec:	4630      	mov	r0, r6
 800dcee:	f003 fc59 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dcf2:	ea05 0509 	and.w	r5, r5, r9
 800dcf6:	b2ed      	uxtb	r5, r5
 800dcf8:	402c      	ands	r4, r5
 800dcfa:	f107 010c 	add.w	r1, r7, #12
 800dcfe:	4605      	mov	r5, r0
 800dd00:	4630      	mov	r0, r6
 800dd02:	f7fa febd 	bl	8008a80 <ucdr_deserialize_bool>
 800dd06:	ea08 0404 	and.w	r4, r8, r4
 800dd0a:	4025      	ands	r5, r4
 800dd0c:	4028      	ands	r0, r5
 800dd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd12:	bf00      	nop

0800dd14 <uxr_deserialize_STATUS_Payload>:
 800dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	2202      	movs	r2, #2
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	f003 fc41 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dd22:	2202      	movs	r2, #2
 800dd24:	1cb9      	adds	r1, r7, #2
 800dd26:	4605      	mov	r5, r0
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f003 fc3b 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800dd2e:	1d39      	adds	r1, r7, #4
 800dd30:	4680      	mov	r8, r0
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7fa fed4 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800dd38:	1d79      	adds	r1, r7, #5
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f7fa fecf 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800dd42:	ea05 0508 	and.w	r5, r5, r8
 800dd46:	402c      	ands	r4, r5
 800dd48:	4020      	ands	r0, r4
 800dd4a:	b2c0      	uxtb	r0, r0
 800dd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd50 <uxr_serialize_INFO_Payload>:
 800dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	2202      	movs	r2, #2
 800dd56:	460c      	mov	r4, r1
 800dd58:	4605      	mov	r5, r0
 800dd5a:	f003 fbbf 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800dd5e:	2202      	movs	r2, #2
 800dd60:	4680      	mov	r8, r0
 800dd62:	1ca1      	adds	r1, r4, #2
 800dd64:	4628      	mov	r0, r5
 800dd66:	f003 fbb9 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800dd6a:	7921      	ldrb	r1, [r4, #4]
 800dd6c:	4607      	mov	r7, r0
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f7fa fea0 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dd74:	7961      	ldrb	r1, [r4, #5]
 800dd76:	4606      	mov	r6, r0
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f7fa fe9b 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dd7e:	ea08 0807 	and.w	r8, r8, r7
 800dd82:	ea06 0608 	and.w	r6, r6, r8
 800dd86:	4006      	ands	r6, r0
 800dd88:	7a21      	ldrb	r1, [r4, #8]
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f7fa fe62 	bl	8008a54 <ucdr_serialize_bool>
 800dd90:	7a23      	ldrb	r3, [r4, #8]
 800dd92:	b2f7      	uxtb	r7, r6
 800dd94:	4606      	mov	r6, r0
 800dd96:	b96b      	cbnz	r3, 800ddb4 <uxr_serialize_INFO_Payload+0x64>
 800dd98:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f7fa fe59 	bl	8008a54 <ucdr_serialize_bool>
 800dda2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800dda6:	4030      	ands	r0, r6
 800dda8:	b2c6      	uxtb	r6, r0
 800ddaa:	b983      	cbnz	r3, 800ddce <uxr_serialize_INFO_Payload+0x7e>
 800ddac:	ea06 0007 	and.w	r0, r6, r7
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	7b21      	ldrb	r1, [r4, #12]
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f7fa fe7c 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800ddbc:	b188      	cbz	r0, 800dde2 <uxr_serialize_INFO_Payload+0x92>
 800ddbe:	f104 010c 	add.w	r1, r4, #12
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f7ff fc14 	bl	800d5f0 <uxr_serialize_ObjectVariant.part.0>
 800ddc8:	4030      	ands	r0, r6
 800ddca:	b2c6      	uxtb	r6, r0
 800ddcc:	e7e4      	b.n	800dd98 <uxr_serialize_INFO_Payload+0x48>
 800ddce:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f7ff fe24 	bl	800da20 <uxr_serialize_ActivityInfoVariant>
 800ddd8:	4006      	ands	r6, r0
 800ddda:	ea06 0007 	and.w	r0, r6, r7
 800ddde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde2:	4606      	mov	r6, r0
 800dde4:	e7d8      	b.n	800dd98 <uxr_serialize_INFO_Payload+0x48>
 800dde6:	bf00      	nop

0800dde8 <uxr_serialize_READ_DATA_Payload>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	2202      	movs	r2, #2
 800ddec:	4605      	mov	r5, r0
 800ddee:	460e      	mov	r6, r1
 800ddf0:	f003 fb74 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800ddf4:	1cb1      	adds	r1, r6, #2
 800ddf6:	2202      	movs	r2, #2
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	f003 fb6e 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800de00:	1d31      	adds	r1, r6, #4
 800de02:	4004      	ands	r4, r0
 800de04:	4628      	mov	r0, r5
 800de06:	f7ff fe55 	bl	800dab4 <uxr_serialize_ReadSpecification>
 800de0a:	b2e4      	uxtb	r4, r4
 800de0c:	4020      	ands	r0, r4
 800de0e:	bd70      	pop	{r4, r5, r6, pc}

0800de10 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	2202      	movs	r2, #2
 800de14:	4605      	mov	r5, r0
 800de16:	460e      	mov	r6, r1
 800de18:	f003 fb60 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800de1c:	1cb1      	adds	r1, r6, #2
 800de1e:	4604      	mov	r4, r0
 800de20:	2202      	movs	r2, #2
 800de22:	4628      	mov	r0, r5
 800de24:	f003 fb5a 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800de28:	4020      	ands	r0, r4
 800de2a:	b2c0      	uxtb	r0, r0
 800de2c:	bd70      	pop	{r4, r5, r6, pc}
 800de2e:	bf00      	nop

0800de30 <uxr_serialize_ACKNACK_Payload>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	460f      	mov	r7, r1
 800de34:	460e      	mov	r6, r1
 800de36:	f837 1b02 	ldrh.w	r1, [r7], #2
 800de3a:	4605      	mov	r5, r0
 800de3c:	f7fa fe66 	bl	8008b0c <ucdr_serialize_uint16_t>
 800de40:	4639      	mov	r1, r7
 800de42:	2202      	movs	r2, #2
 800de44:	4604      	mov	r4, r0
 800de46:	4628      	mov	r0, r5
 800de48:	f003 fb48 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800de4c:	7931      	ldrb	r1, [r6, #4]
 800de4e:	4004      	ands	r4, r0
 800de50:	4628      	mov	r0, r5
 800de52:	f7fa fe2f 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800de56:	b2e4      	uxtb	r4, r4
 800de58:	4020      	ands	r0, r4
 800de5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de5c <uxr_deserialize_ACKNACK_Payload>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4605      	mov	r5, r0
 800de60:	460e      	mov	r6, r1
 800de62:	f7fa ff53 	bl	8008d0c <ucdr_deserialize_uint16_t>
 800de66:	1cb1      	adds	r1, r6, #2
 800de68:	2202      	movs	r2, #2
 800de6a:	4604      	mov	r4, r0
 800de6c:	4628      	mov	r0, r5
 800de6e:	f003 fb99 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800de72:	1d31      	adds	r1, r6, #4
 800de74:	4004      	ands	r4, r0
 800de76:	4628      	mov	r0, r5
 800de78:	f7fa fe32 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800de7c:	b2e4      	uxtb	r4, r4
 800de7e:	4020      	ands	r0, r4
 800de80:	bd70      	pop	{r4, r5, r6, pc}
 800de82:	bf00      	nop

0800de84 <uxr_serialize_HEARTBEAT_Payload>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	460d      	mov	r5, r1
 800de88:	8809      	ldrh	r1, [r1, #0]
 800de8a:	4606      	mov	r6, r0
 800de8c:	f7fa fe3e 	bl	8008b0c <ucdr_serialize_uint16_t>
 800de90:	8869      	ldrh	r1, [r5, #2]
 800de92:	4604      	mov	r4, r0
 800de94:	4630      	mov	r0, r6
 800de96:	f7fa fe39 	bl	8008b0c <ucdr_serialize_uint16_t>
 800de9a:	7929      	ldrb	r1, [r5, #4]
 800de9c:	4004      	ands	r4, r0
 800de9e:	4630      	mov	r0, r6
 800dea0:	f7fa fe08 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800dea4:	b2e4      	uxtb	r4, r4
 800dea6:	4020      	ands	r0, r4
 800dea8:	bd70      	pop	{r4, r5, r6, pc}
 800deaa:	bf00      	nop

0800deac <uxr_deserialize_HEARTBEAT_Payload>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	4605      	mov	r5, r0
 800deb0:	460e      	mov	r6, r1
 800deb2:	f7fa ff2b 	bl	8008d0c <ucdr_deserialize_uint16_t>
 800deb6:	1cb1      	adds	r1, r6, #2
 800deb8:	4604      	mov	r4, r0
 800deba:	4628      	mov	r0, r5
 800debc:	f7fa ff26 	bl	8008d0c <ucdr_deserialize_uint16_t>
 800dec0:	1d31      	adds	r1, r6, #4
 800dec2:	4004      	ands	r4, r0
 800dec4:	4628      	mov	r0, r5
 800dec6:	f7fa fe0b 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800deca:	b2e4      	uxtb	r4, r4
 800decc:	4020      	ands	r0, r4
 800dece:	bd70      	pop	{r4, r5, r6, pc}

0800ded0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800ded0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded4:	4605      	mov	r5, r0
 800ded6:	460e      	mov	r6, r1
 800ded8:	f7fb fcb4 	bl	8009844 <ucdr_deserialize_int32_t>
 800dedc:	1d31      	adds	r1, r6, #4
 800dede:	4607      	mov	r7, r0
 800dee0:	4628      	mov	r0, r5
 800dee2:	f7fb f92d 	bl	8009140 <ucdr_deserialize_uint32_t>
 800dee6:	f106 0108 	add.w	r1, r6, #8
 800deea:	4680      	mov	r8, r0
 800deec:	4628      	mov	r0, r5
 800deee:	f7fb fca9 	bl	8009844 <ucdr_deserialize_int32_t>
 800def2:	f106 010c 	add.w	r1, r6, #12
 800def6:	4604      	mov	r4, r0
 800def8:	4628      	mov	r0, r5
 800defa:	f7fb f921 	bl	8009140 <ucdr_deserialize_uint32_t>
 800defe:	ea07 0708 	and.w	r7, r7, r8
 800df02:	403c      	ands	r4, r7
 800df04:	f106 0110 	add.w	r1, r6, #16
 800df08:	4004      	ands	r4, r0
 800df0a:	4628      	mov	r0, r5
 800df0c:	f7fb fc9a 	bl	8009844 <ucdr_deserialize_int32_t>
 800df10:	f106 0114 	add.w	r1, r6, #20
 800df14:	4603      	mov	r3, r0
 800df16:	4628      	mov	r0, r5
 800df18:	461d      	mov	r5, r3
 800df1a:	f7fb f911 	bl	8009140 <ucdr_deserialize_uint32_t>
 800df1e:	b2e4      	uxtb	r4, r4
 800df20:	402c      	ands	r4, r5
 800df22:	4020      	ands	r0, r4
 800df24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df28 <uxr_serialize_SampleIdentity>:
 800df28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2c:	220c      	movs	r2, #12
 800df2e:	4604      	mov	r4, r0
 800df30:	460d      	mov	r5, r1
 800df32:	f003 fad3 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800df36:	2203      	movs	r2, #3
 800df38:	f105 010c 	add.w	r1, r5, #12
 800df3c:	4607      	mov	r7, r0
 800df3e:	4620      	mov	r0, r4
 800df40:	f003 facc 	bl	80114dc <ucdr_serialize_array_uint8_t>
 800df44:	7be9      	ldrb	r1, [r5, #15]
 800df46:	4680      	mov	r8, r0
 800df48:	4620      	mov	r0, r4
 800df4a:	f7fa fdb3 	bl	8008ab4 <ucdr_serialize_uint8_t>
 800df4e:	6929      	ldr	r1, [r5, #16]
 800df50:	4606      	mov	r6, r0
 800df52:	4620      	mov	r0, r4
 800df54:	f7fb fbde 	bl	8009714 <ucdr_serialize_int32_t>
 800df58:	6969      	ldr	r1, [r5, #20]
 800df5a:	4603      	mov	r3, r0
 800df5c:	4620      	mov	r0, r4
 800df5e:	ea07 0708 	and.w	r7, r7, r8
 800df62:	461c      	mov	r4, r3
 800df64:	f7fa ffbc 	bl	8008ee0 <ucdr_serialize_uint32_t>
 800df68:	403e      	ands	r6, r7
 800df6a:	4034      	ands	r4, r6
 800df6c:	4020      	ands	r0, r4
 800df6e:	b2c0      	uxtb	r0, r0
 800df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df74 <uxr_deserialize_SampleIdentity>:
 800df74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df78:	220c      	movs	r2, #12
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	f003 fb11 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800df82:	2203      	movs	r2, #3
 800df84:	f105 010c 	add.w	r1, r5, #12
 800df88:	4607      	mov	r7, r0
 800df8a:	4620      	mov	r0, r4
 800df8c:	f003 fb0a 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 800df90:	f105 010f 	add.w	r1, r5, #15
 800df94:	4680      	mov	r8, r0
 800df96:	4620      	mov	r0, r4
 800df98:	f7fa fda2 	bl	8008ae0 <ucdr_deserialize_uint8_t>
 800df9c:	f105 0110 	add.w	r1, r5, #16
 800dfa0:	4606      	mov	r6, r0
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7fb fc4e 	bl	8009844 <ucdr_deserialize_int32_t>
 800dfa8:	f105 0114 	add.w	r1, r5, #20
 800dfac:	4603      	mov	r3, r0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	ea07 0708 	and.w	r7, r7, r8
 800dfb4:	461c      	mov	r4, r3
 800dfb6:	f7fb f8c3 	bl	8009140 <ucdr_deserialize_uint32_t>
 800dfba:	403e      	ands	r6, r7
 800dfbc:	4034      	ands	r4, r6
 800dfbe:	4020      	ands	r0, r4
 800dfc0:	b2c0      	uxtb	r0, r0
 800dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc6:	bf00      	nop

0800dfc8 <rcl_client_get_rmw_handle>:
 800dfc8:	b110      	cbz	r0, 800dfd0 <rcl_client_get_rmw_handle+0x8>
 800dfca:	6800      	ldr	r0, [r0, #0]
 800dfcc:	b100      	cbz	r0, 800dfd0 <rcl_client_get_rmw_handle+0x8>
 800dfce:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop

0800dfd4 <rcl_take_response>:
 800dfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfd6:	460e      	mov	r6, r1
 800dfd8:	460c      	mov	r4, r1
 800dfda:	4607      	mov	r7, r0
 800dfdc:	4694      	mov	ip, r2
 800dfde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dfe0:	b08d      	sub	sp, #52	; 0x34
 800dfe2:	ad06      	add	r5, sp, #24
 800dfe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfe6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dfea:	e885 0003 	stmia.w	r5, {r0, r1}
 800dfee:	b337      	cbz	r7, 800e03e <rcl_take_response+0x6a>
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	b323      	cbz	r3, 800e03e <rcl_take_response+0x6a>
 800dff4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dff6:	b310      	cbz	r0, 800e03e <rcl_take_response+0x6a>
 800dff8:	4662      	mov	r2, ip
 800dffa:	b31a      	cbz	r2, 800e044 <rcl_take_response+0x70>
 800dffc:	2300      	movs	r3, #0
 800dffe:	2600      	movs	r6, #0
 800e000:	2700      	movs	r7, #0
 800e002:	f88d 3007 	strb.w	r3, [sp, #7]
 800e006:	a902      	add	r1, sp, #8
 800e008:	f10d 0307 	add.w	r3, sp, #7
 800e00c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e010:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e014:	f7fc ffea 	bl	800afec <rmw_take_response>
 800e018:	4606      	mov	r6, r0
 800e01a:	b9a8      	cbnz	r0, 800e048 <rcl_take_response+0x74>
 800e01c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e020:	f240 13f5 	movw	r3, #501	; 0x1f5
 800e024:	2a00      	cmp	r2, #0
 800e026:	bf08      	it	eq
 800e028:	461e      	moveq	r6, r3
 800e02a:	ad06      	add	r5, sp, #24
 800e02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e02e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e030:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e034:	e884 0003 	stmia.w	r4, {r0, r1}
 800e038:	4630      	mov	r0, r6
 800e03a:	b00d      	add	sp, #52	; 0x34
 800e03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e03e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800e042:	e7f2      	b.n	800e02a <rcl_take_response+0x56>
 800e044:	260b      	movs	r6, #11
 800e046:	e7f0      	b.n	800e02a <rcl_take_response+0x56>
 800e048:	2601      	movs	r6, #1
 800e04a:	e7ee      	b.n	800e02a <rcl_take_response+0x56>

0800e04c <rcl_get_zero_initialized_context>:
 800e04c:	4a03      	ldr	r2, [pc, #12]	; (800e05c <rcl_get_zero_initialized_context+0x10>)
 800e04e:	4603      	mov	r3, r0
 800e050:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e054:	e883 0003 	stmia.w	r3, {r0, r1}
 800e058:	4618      	mov	r0, r3
 800e05a:	4770      	bx	lr
 800e05c:	08014ba4 	.word	0x08014ba4

0800e060 <rcl_context_is_valid>:
 800e060:	b118      	cbz	r0, 800e06a <rcl_context_is_valid+0xa>
 800e062:	6840      	ldr	r0, [r0, #4]
 800e064:	3800      	subs	r0, #0
 800e066:	bf18      	it	ne
 800e068:	2001      	movne	r0, #1
 800e06a:	4770      	bx	lr

0800e06c <__cleanup_context>:
 800e06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e070:	4606      	mov	r6, r0
 800e072:	6800      	ldr	r0, [r0, #0]
 800e074:	2300      	movs	r3, #0
 800e076:	6073      	str	r3, [r6, #4]
 800e078:	2800      	cmp	r0, #0
 800e07a:	d04d      	beq.n	800e118 <__cleanup_context+0xac>
 800e07c:	6947      	ldr	r7, [r0, #20]
 800e07e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e082:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e086:	b137      	cbz	r7, 800e096 <__cleanup_context+0x2a>
 800e088:	3014      	adds	r0, #20
 800e08a:	f000 fb1d 	bl	800e6c8 <rcl_init_options_fini>
 800e08e:	4607      	mov	r7, r0
 800e090:	2800      	cmp	r0, #0
 800e092:	d148      	bne.n	800e126 <__cleanup_context+0xba>
 800e094:	6830      	ldr	r0, [r6, #0]
 800e096:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e098:	b143      	cbz	r3, 800e0ac <__cleanup_context+0x40>
 800e09a:	3028      	adds	r0, #40	; 0x28
 800e09c:	f002 fdae 	bl	8010bfc <rmw_context_fini>
 800e0a0:	b118      	cbz	r0, 800e0aa <__cleanup_context+0x3e>
 800e0a2:	2f00      	cmp	r7, #0
 800e0a4:	d042      	beq.n	800e12c <__cleanup_context+0xc0>
 800e0a6:	f7fc fcb1 	bl	800aa0c <rcutils_reset_error>
 800e0aa:	6830      	ldr	r0, [r6, #0]
 800e0ac:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800e0b0:	f1bc 0f00 	cmp.w	ip, #0
 800e0b4:	d01c      	beq.n	800e0f0 <__cleanup_context+0x84>
 800e0b6:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e0ba:	2a01      	cmp	r2, #1
 800e0bc:	f173 0100 	sbcs.w	r1, r3, #0
 800e0c0:	db12      	blt.n	800e0e8 <__cleanup_context+0x7c>
 800e0c2:	2400      	movs	r4, #0
 800e0c4:	2500      	movs	r5, #0
 800e0c6:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800e0ca:	4649      	mov	r1, r9
 800e0cc:	b1c0      	cbz	r0, 800e100 <__cleanup_context+0x94>
 800e0ce:	47c0      	blx	r8
 800e0d0:	6831      	ldr	r1, [r6, #0]
 800e0d2:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800e0d6:	3401      	adds	r4, #1
 800e0d8:	f145 0500 	adc.w	r5, r5, #0
 800e0dc:	4294      	cmp	r4, r2
 800e0de:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800e0e2:	eb75 0103 	sbcs.w	r1, r5, r3
 800e0e6:	dbee      	blt.n	800e0c6 <__cleanup_context+0x5a>
 800e0e8:	4660      	mov	r0, ip
 800e0ea:	4649      	mov	r1, r9
 800e0ec:	47c0      	blx	r8
 800e0ee:	6830      	ldr	r0, [r6, #0]
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	47c0      	blx	r8
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e9c6 3300 	strd	r3, r3, [r6]
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e100:	3401      	adds	r4, #1
 800e102:	f145 0500 	adc.w	r5, r5, #0
 800e106:	4294      	cmp	r4, r2
 800e108:	eb75 0103 	sbcs.w	r1, r5, r3
 800e10c:	dbdb      	blt.n	800e0c6 <__cleanup_context+0x5a>
 800e10e:	4660      	mov	r0, ip
 800e110:	4649      	mov	r1, r9
 800e112:	47c0      	blx	r8
 800e114:	6830      	ldr	r0, [r6, #0]
 800e116:	e7eb      	b.n	800e0f0 <__cleanup_context+0x84>
 800e118:	4607      	mov	r7, r0
 800e11a:	2300      	movs	r3, #0
 800e11c:	e9c6 3300 	strd	r3, r3, [r6]
 800e120:	4638      	mov	r0, r7
 800e122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e126:	f7fc fc71 	bl	800aa0c <rcutils_reset_error>
 800e12a:	e7b3      	b.n	800e094 <__cleanup_context+0x28>
 800e12c:	f004 fd7e 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e130:	4607      	mov	r7, r0
 800e132:	e7b8      	b.n	800e0a6 <__cleanup_context+0x3a>

0800e134 <rcl_expand_topic_name>:
 800e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e138:	b08b      	sub	sp, #44	; 0x2c
 800e13a:	9306      	str	r3, [sp, #24]
 800e13c:	2800      	cmp	r0, #0
 800e13e:	f000 80d2 	beq.w	800e2e6 <rcl_expand_topic_name+0x1b2>
 800e142:	460e      	mov	r6, r1
 800e144:	2900      	cmp	r1, #0
 800e146:	f000 80ce 	beq.w	800e2e6 <rcl_expand_topic_name+0x1b2>
 800e14a:	4617      	mov	r7, r2
 800e14c:	2a00      	cmp	r2, #0
 800e14e:	f000 80ca 	beq.w	800e2e6 <rcl_expand_topic_name+0x1b2>
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 80c7 	beq.w	800e2e6 <rcl_expand_topic_name+0x1b2>
 800e158:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80c3 	beq.w	800e2e6 <rcl_expand_topic_name+0x1b2>
 800e160:	a909      	add	r1, sp, #36	; 0x24
 800e162:	2200      	movs	r2, #0
 800e164:	4680      	mov	r8, r0
 800e166:	f001 f8d9 	bl	800f31c <rcl_validate_topic_name>
 800e16a:	4604      	mov	r4, r0
 800e16c:	2800      	cmp	r0, #0
 800e16e:	f040 80b6 	bne.w	800e2de <rcl_expand_topic_name+0x1aa>
 800e172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e174:	2b00      	cmp	r3, #0
 800e176:	f040 80bf 	bne.w	800e2f8 <rcl_expand_topic_name+0x1c4>
 800e17a:	4602      	mov	r2, r0
 800e17c:	a909      	add	r1, sp, #36	; 0x24
 800e17e:	4630      	mov	r0, r6
 800e180:	f002 fa5e 	bl	8010640 <rmw_validate_node_name>
 800e184:	2800      	cmp	r0, #0
 800e186:	f040 80b3 	bne.w	800e2f0 <rcl_expand_topic_name+0x1bc>
 800e18a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e18c:	2a00      	cmp	r2, #0
 800e18e:	f040 80b8 	bne.w	800e302 <rcl_expand_topic_name+0x1ce>
 800e192:	a909      	add	r1, sp, #36	; 0x24
 800e194:	4638      	mov	r0, r7
 800e196:	f002 fa35 	bl	8010604 <rmw_validate_namespace>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	f040 80a8 	bne.w	800e2f0 <rcl_expand_topic_name+0x1bc>
 800e1a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e1a2:	2c00      	cmp	r4, #0
 800e1a4:	f040 80f6 	bne.w	800e394 <rcl_expand_topic_name+0x260>
 800e1a8:	217b      	movs	r1, #123	; 0x7b
 800e1aa:	4640      	mov	r0, r8
 800e1ac:	f005 f9dc 	bl	8013568 <strchr>
 800e1b0:	f898 3000 	ldrb.w	r3, [r8]
 800e1b4:	2b2f      	cmp	r3, #47	; 0x2f
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	f000 80c4 	beq.w	800e344 <rcl_expand_topic_name+0x210>
 800e1bc:	2b7e      	cmp	r3, #126	; 0x7e
 800e1be:	d16f      	bne.n	800e2a0 <rcl_expand_topic_name+0x16c>
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	f7f2 f82f 	bl	8000224 <strlen>
 800e1c6:	4b87      	ldr	r3, [pc, #540]	; (800e3e4 <rcl_expand_topic_name+0x2b0>)
 800e1c8:	4987      	ldr	r1, [pc, #540]	; (800e3e8 <rcl_expand_topic_name+0x2b4>)
 800e1ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e1cc:	9604      	str	r6, [sp, #16]
 800e1ce:	2801      	cmp	r0, #1
 800e1d0:	bf0c      	ite	eq
 800e1d2:	4618      	moveq	r0, r3
 800e1d4:	4608      	movne	r0, r1
 800e1d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1da:	e9cd 2300 	strd	r2, r3, [sp]
 800e1de:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800e1e2:	f108 0101 	add.w	r1, r8, #1
 800e1e6:	9105      	str	r1, [sp, #20]
 800e1e8:	ab14      	add	r3, sp, #80	; 0x50
 800e1ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e1ec:	f002 f826 	bl	801023c <rcutils_format_string_limit>
 800e1f0:	4682      	mov	sl, r0
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	f000 80d0 	beq.w	800e398 <rcl_expand_topic_name+0x264>
 800e1f8:	2d00      	cmp	r5, #0
 800e1fa:	f000 80aa 	beq.w	800e352 <rcl_expand_topic_name+0x21e>
 800e1fe:	217b      	movs	r1, #123	; 0x7b
 800e200:	f005 f9b2 	bl	8013568 <strchr>
 800e204:	46d1      	mov	r9, sl
 800e206:	4605      	mov	r5, r0
 800e208:	9407      	str	r4, [sp, #28]
 800e20a:	46d3      	mov	fp, sl
 800e20c:	464c      	mov	r4, r9
 800e20e:	2d00      	cmp	r5, #0
 800e210:	f000 80c7 	beq.w	800e3a2 <rcl_expand_topic_name+0x26e>
 800e214:	217d      	movs	r1, #125	; 0x7d
 800e216:	4620      	mov	r0, r4
 800e218:	f005 f9a6 	bl	8013568 <strchr>
 800e21c:	eba0 0905 	sub.w	r9, r0, r5
 800e220:	f109 0a01 	add.w	sl, r9, #1
 800e224:	4871      	ldr	r0, [pc, #452]	; (800e3ec <rcl_expand_topic_name+0x2b8>)
 800e226:	4652      	mov	r2, sl
 800e228:	4629      	mov	r1, r5
 800e22a:	f005 f9b2 	bl	8013592 <strncmp>
 800e22e:	2800      	cmp	r0, #0
 800e230:	f000 808d 	beq.w	800e34e <rcl_expand_topic_name+0x21a>
 800e234:	486e      	ldr	r0, [pc, #440]	; (800e3f0 <rcl_expand_topic_name+0x2bc>)
 800e236:	4652      	mov	r2, sl
 800e238:	4629      	mov	r1, r5
 800e23a:	f005 f9aa 	bl	8013592 <strncmp>
 800e23e:	b130      	cbz	r0, 800e24e <rcl_expand_topic_name+0x11a>
 800e240:	486c      	ldr	r0, [pc, #432]	; (800e3f4 <rcl_expand_topic_name+0x2c0>)
 800e242:	4652      	mov	r2, sl
 800e244:	4629      	mov	r1, r5
 800e246:	f005 f9a4 	bl	8013592 <strncmp>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d15b      	bne.n	800e306 <rcl_expand_topic_name+0x1d2>
 800e24e:	46b9      	mov	r9, r7
 800e250:	ab16      	add	r3, sp, #88	; 0x58
 800e252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e256:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e25a:	ab14      	add	r3, sp, #80	; 0x50
 800e25c:	4628      	mov	r0, r5
 800e25e:	cb0c      	ldmia	r3, {r2, r3}
 800e260:	4651      	mov	r1, sl
 800e262:	f002 f937 	bl	80104d4 <rcutils_strndup>
 800e266:	4605      	mov	r5, r0
 800e268:	2800      	cmp	r0, #0
 800e26a:	f000 80a4 	beq.w	800e3b6 <rcl_expand_topic_name+0x282>
 800e26e:	464a      	mov	r2, r9
 800e270:	4620      	mov	r0, r4
 800e272:	ab14      	add	r3, sp, #80	; 0x50
 800e274:	4629      	mov	r1, r5
 800e276:	f002 f833 	bl	80102e0 <rcutils_repl_str>
 800e27a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e27c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e27e:	4604      	mov	r4, r0
 800e280:	4628      	mov	r0, r5
 800e282:	4798      	blx	r3
 800e284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e286:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e288:	4658      	mov	r0, fp
 800e28a:	4798      	blx	r3
 800e28c:	2c00      	cmp	r4, #0
 800e28e:	f000 8083 	beq.w	800e398 <rcl_expand_topic_name+0x264>
 800e292:	217b      	movs	r1, #123	; 0x7b
 800e294:	4620      	mov	r0, r4
 800e296:	f005 f967 	bl	8013568 <strchr>
 800e29a:	46a3      	mov	fp, r4
 800e29c:	4605      	mov	r5, r0
 800e29e:	e7b6      	b.n	800e20e <rcl_expand_topic_name+0xda>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d151      	bne.n	800e348 <rcl_expand_topic_name+0x214>
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f7f1 ffbd 	bl	8000224 <strlen>
 800e2aa:	4b53      	ldr	r3, [pc, #332]	; (800e3f8 <rcl_expand_topic_name+0x2c4>)
 800e2ac:	4a53      	ldr	r2, [pc, #332]	; (800e3fc <rcl_expand_topic_name+0x2c8>)
 800e2ae:	f8cd 8010 	str.w	r8, [sp, #16]
 800e2b2:	2801      	cmp	r0, #1
 800e2b4:	bf0c      	ite	eq
 800e2b6:	4618      	moveq	r0, r3
 800e2b8:	4610      	movne	r0, r2
 800e2ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e2bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2c0:	e9cd 3200 	strd	r3, r2, [sp]
 800e2c4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800e2c8:	ab14      	add	r3, sp, #80	; 0x50
 800e2ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e2cc:	f001 ffb6 	bl	801023c <rcutils_format_string_limit>
 800e2d0:	4682      	mov	sl, r0
 800e2d2:	4653      	mov	r3, sl
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d05f      	beq.n	800e398 <rcl_expand_topic_name+0x264>
 800e2d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2da:	f8c3 a000 	str.w	sl, [r3]
 800e2de:	4620      	mov	r0, r4
 800e2e0:	b00b      	add	sp, #44	; 0x2c
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	240b      	movs	r4, #11
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	b00b      	add	sp, #44	; 0x2c
 800e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	f004 fc9c 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	e7f2      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e2f8:	2467      	movs	r4, #103	; 0x67
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	b00b      	add	sp, #44	; 0x2c
 800e2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e302:	24c9      	movs	r4, #201	; 0xc9
 800e304:	e7eb      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e306:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800e30a:	9806      	ldr	r0, [sp, #24]
 800e30c:	1c69      	adds	r1, r5, #1
 800e30e:	f7fc fc93 	bl	800ac38 <rcutils_string_map_getn>
 800e312:	4681      	mov	r9, r0
 800e314:	2800      	cmp	r0, #0
 800e316:	d19b      	bne.n	800e250 <rcl_expand_topic_name+0x11c>
 800e318:	aa16      	add	r2, sp, #88	; 0x58
 800e31a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e31e:	f8c3 9000 	str.w	r9, [r3]
 800e322:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e326:	ab14      	add	r3, sp, #80	; 0x50
 800e328:	cb0c      	ldmia	r3, {r2, r3}
 800e32a:	4651      	mov	r1, sl
 800e32c:	4628      	mov	r0, r5
 800e32e:	f002 f8d1 	bl	80104d4 <rcutils_strndup>
 800e332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e334:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e336:	4798      	blx	r3
 800e338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e33a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e33c:	4658      	mov	r0, fp
 800e33e:	4798      	blx	r3
 800e340:	2469      	movs	r4, #105	; 0x69
 800e342:	e7cc      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e344:	2800      	cmp	r0, #0
 800e346:	d03e      	beq.n	800e3c6 <rcl_expand_topic_name+0x292>
 800e348:	46c1      	mov	r9, r8
 800e34a:	46a2      	mov	sl, r4
 800e34c:	e75c      	b.n	800e208 <rcl_expand_topic_name+0xd4>
 800e34e:	46b1      	mov	r9, r6
 800e350:	e77e      	b.n	800e250 <rcl_expand_topic_name+0x11c>
 800e352:	f89a 3000 	ldrb.w	r3, [sl]
 800e356:	2b2f      	cmp	r3, #47	; 0x2f
 800e358:	d0be      	beq.n	800e2d8 <rcl_expand_topic_name+0x1a4>
 800e35a:	4638      	mov	r0, r7
 800e35c:	f7f1 ff62 	bl	8000224 <strlen>
 800e360:	4b25      	ldr	r3, [pc, #148]	; (800e3f8 <rcl_expand_topic_name+0x2c4>)
 800e362:	4926      	ldr	r1, [pc, #152]	; (800e3fc <rcl_expand_topic_name+0x2c8>)
 800e364:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e366:	f8cd a010 	str.w	sl, [sp, #16]
 800e36a:	2801      	cmp	r0, #1
 800e36c:	bf0c      	ite	eq
 800e36e:	4618      	moveq	r0, r3
 800e370:	4608      	movne	r0, r1
 800e372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e376:	e9cd 2300 	strd	r2, r3, [sp]
 800e37a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800e37e:	ab14      	add	r3, sp, #80	; 0x50
 800e380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e382:	f001 ff5b 	bl	801023c <rcutils_format_string_limit>
 800e386:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e388:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e38a:	4603      	mov	r3, r0
 800e38c:	4650      	mov	r0, sl
 800e38e:	469a      	mov	sl, r3
 800e390:	4790      	blx	r2
 800e392:	e79e      	b.n	800e2d2 <rcl_expand_topic_name+0x19e>
 800e394:	24ca      	movs	r4, #202	; 0xca
 800e396:	e7a2      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e398:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e39a:	2300      	movs	r3, #0
 800e39c:	6013      	str	r3, [r2, #0]
 800e39e:	240a      	movs	r4, #10
 800e3a0:	e79d      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e3a2:	465b      	mov	r3, fp
 800e3a4:	9c07      	ldr	r4, [sp, #28]
 800e3a6:	46da      	mov	sl, fp
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1d2      	bne.n	800e352 <rcl_expand_topic_name+0x21e>
 800e3ac:	f898 3000 	ldrb.w	r3, [r8]
 800e3b0:	2b2f      	cmp	r3, #47	; 0x2f
 800e3b2:	d091      	beq.n	800e2d8 <rcl_expand_topic_name+0x1a4>
 800e3b4:	e776      	b.n	800e2a4 <rcl_expand_topic_name+0x170>
 800e3b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e3ba:	601d      	str	r5, [r3, #0]
 800e3bc:	4658      	mov	r0, fp
 800e3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3c0:	4798      	blx	r3
 800e3c2:	240a      	movs	r4, #10
 800e3c4:	e78b      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e3c6:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 800e3ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e3ce:	ab14      	add	r3, sp, #80	; 0x50
 800e3d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	f002 f85c 	bl	8010490 <rcutils_strdup>
 800e3d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	bf08      	it	eq
 800e3de:	240a      	moveq	r4, #10
 800e3e0:	6018      	str	r0, [r3, #0]
 800e3e2:	e77c      	b.n	800e2de <rcl_expand_topic_name+0x1aa>
 800e3e4:	08014b7c 	.word	0x08014b7c
 800e3e8:	08014bac 	.word	0x08014bac
 800e3ec:	08014bc4 	.word	0x08014bc4
 800e3f0:	08014bcc 	.word	0x08014bcc
 800e3f4:	08014bd4 	.word	0x08014bd4
 800e3f8:	08014bb4 	.word	0x08014bb4
 800e3fc:	08014bbc 	.word	0x08014bbc

0800e400 <rcl_get_default_topic_name_substitutions>:
 800e400:	2800      	cmp	r0, #0
 800e402:	bf0c      	ite	eq
 800e404:	200b      	moveq	r0, #11
 800e406:	2000      	movne	r0, #0
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop

0800e40c <rcl_init>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	1e07      	subs	r7, r0, #0
 800e412:	b09f      	sub	sp, #124	; 0x7c
 800e414:	4688      	mov	r8, r1
 800e416:	4692      	mov	sl, r2
 800e418:	4699      	mov	r9, r3
 800e41a:	f340 8097 	ble.w	800e54c <rcl_init+0x140>
 800e41e:	2900      	cmp	r1, #0
 800e420:	f000 8097 	beq.w	800e552 <rcl_init+0x146>
 800e424:	1f0d      	subs	r5, r1, #4
 800e426:	2400      	movs	r4, #0
 800e428:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800e42c:	3401      	adds	r4, #1
 800e42e:	2e00      	cmp	r6, #0
 800e430:	f000 808f 	beq.w	800e552 <rcl_init+0x146>
 800e434:	42a7      	cmp	r7, r4
 800e436:	d1f7      	bne.n	800e428 <rcl_init+0x1c>
 800e438:	f1ba 0f00 	cmp.w	sl, #0
 800e43c:	f000 8089 	beq.w	800e552 <rcl_init+0x146>
 800e440:	f8da 4000 	ldr.w	r4, [sl]
 800e444:	2c00      	cmp	r4, #0
 800e446:	f000 8084 	beq.w	800e552 <rcl_init+0x146>
 800e44a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e44c:	ad19      	add	r5, sp, #100	; 0x64
 800e44e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	602b      	str	r3, [r5, #0]
 800e454:	a819      	add	r0, sp, #100	; 0x64
 800e456:	f7fc fab5 	bl	800a9c4 <rcutils_allocator_is_valid>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d079      	beq.n	800e552 <rcl_init+0x146>
 800e45e:	f1b9 0f00 	cmp.w	r9, #0
 800e462:	d076      	beq.n	800e552 <rcl_init+0x146>
 800e464:	f8d9 3000 	ldr.w	r3, [r9]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d177      	bne.n	800e55c <rcl_init+0x150>
 800e46c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e470:	2178      	movs	r1, #120	; 0x78
 800e472:	2001      	movs	r0, #1
 800e474:	4798      	blx	r3
 800e476:	4604      	mov	r4, r0
 800e478:	f8c9 0000 	str.w	r0, [r9]
 800e47c:	2800      	cmp	r0, #0
 800e47e:	f000 80ba 	beq.w	800e5f6 <rcl_init+0x1ea>
 800e482:	a802      	add	r0, sp, #8
 800e484:	f002 f842 	bl	801050c <rmw_get_zero_initialized_context>
 800e488:	a902      	add	r1, sp, #8
 800e48a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e48e:	2250      	movs	r2, #80	; 0x50
 800e490:	ac19      	add	r4, sp, #100	; 0x64
 800e492:	f004 fe73 	bl	801317c <memcpy>
 800e496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e498:	f8d9 5000 	ldr.w	r5, [r9]
 800e49c:	6826      	ldr	r6, [r4, #0]
 800e49e:	462c      	mov	r4, r5
 800e4a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4a2:	f105 0114 	add.w	r1, r5, #20
 800e4a6:	6026      	str	r6, [r4, #0]
 800e4a8:	4650      	mov	r0, sl
 800e4aa:	f000 f931 	bl	800e710 <rcl_init_options_copy>
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d144      	bne.n	800e53e <rcl_init+0x132>
 800e4b4:	f8d9 a000 	ldr.w	sl, [r9]
 800e4b8:	463c      	mov	r4, r7
 800e4ba:	17fd      	asrs	r5, r7, #31
 800e4bc:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800e4c0:	f8ca 0020 	str.w	r0, [sl, #32]
 800e4c4:	2f00      	cmp	r7, #0
 800e4c6:	d050      	beq.n	800e56a <rcl_init+0x15e>
 800e4c8:	f1b8 0f00 	cmp.w	r8, #0
 800e4cc:	d04d      	beq.n	800e56a <rcl_init+0x15e>
 800e4ce:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	2104      	movs	r1, #4
 800e4d6:	4798      	blx	r3
 800e4d8:	f8ca 0020 	str.w	r0, [sl, #32]
 800e4dc:	f8d9 a000 	ldr.w	sl, [r9]
 800e4e0:	f8da 3020 	ldr.w	r3, [sl, #32]
 800e4e4:	46d3      	mov	fp, sl
 800e4e6:	b34b      	cbz	r3, 800e53c <rcl_init+0x130>
 800e4e8:	2f01      	cmp	r7, #1
 800e4ea:	f175 0300 	sbcs.w	r3, r5, #0
 800e4ee:	db3c      	blt.n	800e56a <rcl_init+0x15e>
 800e4f0:	f1a8 0804 	sub.w	r8, r8, #4
 800e4f4:	2600      	movs	r6, #0
 800e4f6:	2700      	movs	r7, #0
 800e4f8:	e00c      	b.n	800e514 <rcl_init+0x108>
 800e4fa:	f8d8 1000 	ldr.w	r1, [r8]
 800e4fe:	f004 fe3d 	bl	801317c <memcpy>
 800e502:	3601      	adds	r6, #1
 800e504:	f147 0700 	adc.w	r7, r7, #0
 800e508:	42bd      	cmp	r5, r7
 800e50a:	bf08      	it	eq
 800e50c:	42b4      	cmpeq	r4, r6
 800e50e:	d02a      	beq.n	800e566 <rcl_init+0x15a>
 800e510:	f8d9 b000 	ldr.w	fp, [r9]
 800e514:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800e518:	f7f1 fe84 	bl	8000224 <strlen>
 800e51c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e51e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e520:	f8db a020 	ldr.w	sl, [fp, #32]
 800e524:	9001      	str	r0, [sp, #4]
 800e526:	4798      	blx	r3
 800e528:	f8d9 1000 	ldr.w	r1, [r9]
 800e52c:	9a01      	ldr	r2, [sp, #4]
 800e52e:	6a09      	ldr	r1, [r1, #32]
 800e530:	00b3      	lsls	r3, r6, #2
 800e532:	f84a 0003 	str.w	r0, [sl, r3]
 800e536:	58c8      	ldr	r0, [r1, r3]
 800e538:	2800      	cmp	r0, #0
 800e53a:	d1de      	bne.n	800e4fa <rcl_init+0xee>
 800e53c:	260a      	movs	r6, #10
 800e53e:	4648      	mov	r0, r9
 800e540:	f7ff fd94 	bl	800e06c <__cleanup_context>
 800e544:	4630      	mov	r0, r6
 800e546:	b01f      	add	sp, #124	; 0x7c
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	2900      	cmp	r1, #0
 800e54e:	f43f af73 	beq.w	800e438 <rcl_init+0x2c>
 800e552:	260b      	movs	r6, #11
 800e554:	4630      	mov	r0, r6
 800e556:	b01f      	add	sp, #124	; 0x7c
 800e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	2664      	movs	r6, #100	; 0x64
 800e55e:	4630      	mov	r0, r6
 800e560:	b01f      	add	sp, #124	; 0x7c
 800e562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e566:	f8d9 a000 	ldr.w	sl, [r9]
 800e56a:	4a2c      	ldr	r2, [pc, #176]	; (800e61c <rcl_init+0x210>)
 800e56c:	6813      	ldr	r3, [r2, #0]
 800e56e:	3301      	adds	r3, #1
 800e570:	d03b      	beq.n	800e5ea <rcl_init+0x1de>
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	4619      	mov	r1, r3
 800e576:	2000      	movs	r0, #0
 800e578:	f8da 4014 	ldr.w	r4, [sl, #20]
 800e57c:	f8c9 3004 	str.w	r3, [r9, #4]
 800e580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e582:	3301      	adds	r3, #1
 800e584:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800e588:	d039      	beq.n	800e5fe <rcl_init+0x1f2>
 800e58a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e58e:	b94b      	cbnz	r3, 800e5a4 <rcl_init+0x198>
 800e590:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e594:	f000 f962 	bl	800e85c <rcl_get_localhost_only>
 800e598:	4606      	mov	r6, r0
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d1cf      	bne.n	800e53e <rcl_init+0x132>
 800e59e:	f8d9 3000 	ldr.w	r3, [r9]
 800e5a2:	695c      	ldr	r4, [r3, #20]
 800e5a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e5a6:	aa18      	add	r2, sp, #96	; 0x60
 800e5a8:	a917      	add	r1, sp, #92	; 0x5c
 800e5aa:	f000 fea5 	bl	800f2f8 <rcl_validate_enclave_name>
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d1c4      	bne.n	800e53e <rcl_init+0x132>
 800e5b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5b6:	bb03      	cbnz	r3, 800e5fa <rcl_init+0x1ee>
 800e5b8:	f8d9 1000 	ldr.w	r1, [r9]
 800e5bc:	694b      	ldr	r3, [r1, #20]
 800e5be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e5c0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e5c4:	f000 fbfa 	bl	800edbc <rcl_get_security_options_from_environment>
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d1b7      	bne.n	800e53e <rcl_init+0x132>
 800e5ce:	f8d9 1000 	ldr.w	r1, [r9]
 800e5d2:	6948      	ldr	r0, [r1, #20]
 800e5d4:	3128      	adds	r1, #40	; 0x28
 800e5d6:	3018      	adds	r0, #24
 800e5d8:	f002 f9d8 	bl	801098c <rmw_init>
 800e5dc:	4606      	mov	r6, r0
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0b8      	beq.n	800e554 <rcl_init+0x148>
 800e5e2:	f004 fb23 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	e7a9      	b.n	800e53e <rcl_init+0x132>
 800e5ea:	2401      	movs	r4, #1
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	6014      	str	r4, [r2, #0]
 800e5f2:	4623      	mov	r3, r4
 800e5f4:	e7c0      	b.n	800e578 <rcl_init+0x16c>
 800e5f6:	260a      	movs	r6, #10
 800e5f8:	e7ac      	b.n	800e554 <rcl_init+0x148>
 800e5fa:	2601      	movs	r6, #1
 800e5fc:	e79f      	b.n	800e53e <rcl_init+0x132>
 800e5fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e602:	f004 fb27 	bl	8012c54 <rcl_get_default_domain_id>
 800e606:	4606      	mov	r6, r0
 800e608:	2800      	cmp	r0, #0
 800e60a:	d198      	bne.n	800e53e <rcl_init+0x132>
 800e60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e60e:	3301      	adds	r3, #1
 800e610:	f8d9 3000 	ldr.w	r3, [r9]
 800e614:	bf08      	it	eq
 800e616:	6260      	streq	r0, [r4, #36]	; 0x24
 800e618:	695c      	ldr	r4, [r3, #20]
 800e61a:	e7b6      	b.n	800e58a <rcl_init+0x17e>
 800e61c:	2000c1b8 	.word	0x2000c1b8

0800e620 <rcl_get_zero_initialized_init_options>:
 800e620:	2000      	movs	r0, #0
 800e622:	4770      	bx	lr

0800e624 <rcl_init_options_init>:
 800e624:	b084      	sub	sp, #16
 800e626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e628:	b091      	sub	sp, #68	; 0x44
 800e62a:	af17      	add	r7, sp, #92	; 0x5c
 800e62c:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e630:	2800      	cmp	r0, #0
 800e632:	d044      	beq.n	800e6be <rcl_init_options_init+0x9a>
 800e634:	6803      	ldr	r3, [r0, #0]
 800e636:	4606      	mov	r6, r0
 800e638:	b133      	cbz	r3, 800e648 <rcl_init_options_init+0x24>
 800e63a:	2464      	movs	r4, #100	; 0x64
 800e63c:	4620      	mov	r0, r4
 800e63e:	b011      	add	sp, #68	; 0x44
 800e640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e644:	b004      	add	sp, #16
 800e646:	4770      	bx	lr
 800e648:	4638      	mov	r0, r7
 800e64a:	f7fc f9bb 	bl	800a9c4 <rcutils_allocator_is_valid>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d035      	beq.n	800e6be <rcl_init_options_init+0x9a>
 800e652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e654:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e656:	2050      	movs	r0, #80	; 0x50
 800e658:	4798      	blx	r3
 800e65a:	4604      	mov	r4, r0
 800e65c:	6030      	str	r0, [r6, #0]
 800e65e:	2800      	cmp	r0, #0
 800e660:	d02f      	beq.n	800e6c2 <rcl_init_options_init+0x9e>
 800e662:	46bc      	mov	ip, r7
 800e664:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e668:	4625      	mov	r5, r4
 800e66a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e66c:	f8dc 3000 	ldr.w	r3, [ip]
 800e670:	602b      	str	r3, [r5, #0]
 800e672:	a802      	add	r0, sp, #8
 800e674:	ad02      	add	r5, sp, #8
 800e676:	f001 ff51 	bl	801051c <rmw_get_zero_initialized_init_options>
 800e67a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e67c:	3418      	adds	r4, #24
 800e67e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e688:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e68c:	6833      	ldr	r3, [r6, #0]
 800e68e:	e884 0003 	stmia.w	r4, {r0, r1}
 800e692:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e696:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e69a:	f103 0018 	add.w	r0, r3, #24
 800e69e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e6a2:	f002 f899 	bl	80107d8 <rmw_init_options_init>
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d0c7      	beq.n	800e63c <rcl_init_options_init+0x18>
 800e6ac:	6830      	ldr	r0, [r6, #0]
 800e6ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e6b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e6b2:	4798      	blx	r3
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f004 fab9 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	e7be      	b.n	800e63c <rcl_init_options_init+0x18>
 800e6be:	240b      	movs	r4, #11
 800e6c0:	e7bc      	b.n	800e63c <rcl_init_options_init+0x18>
 800e6c2:	240a      	movs	r4, #10
 800e6c4:	e7ba      	b.n	800e63c <rcl_init_options_init+0x18>
 800e6c6:	bf00      	nop

0800e6c8 <rcl_init_options_fini>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	b1c0      	cbz	r0, 800e700 <rcl_init_options_fini+0x38>
 800e6ce:	6804      	ldr	r4, [r0, #0]
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	b1ac      	cbz	r4, 800e700 <rcl_init_options_fini+0x38>
 800e6d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6d6:	ad01      	add	r5, sp, #4
 800e6d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	602b      	str	r3, [r5, #0]
 800e6de:	a801      	add	r0, sp, #4
 800e6e0:	f7fc f970 	bl	800a9c4 <rcutils_allocator_is_valid>
 800e6e4:	b160      	cbz	r0, 800e700 <rcl_init_options_fini+0x38>
 800e6e6:	6830      	ldr	r0, [r6, #0]
 800e6e8:	3018      	adds	r0, #24
 800e6ea:	f002 f90f 	bl	801090c <rmw_init_options_fini>
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	b950      	cbnz	r0, 800e708 <rcl_init_options_fini+0x40>
 800e6f2:	6830      	ldr	r0, [r6, #0]
 800e6f4:	9b02      	ldr	r3, [sp, #8]
 800e6f6:	9905      	ldr	r1, [sp, #20]
 800e6f8:	4798      	blx	r3
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	b006      	add	sp, #24
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}
 800e700:	240b      	movs	r4, #11
 800e702:	4620      	mov	r0, r4
 800e704:	b006      	add	sp, #24
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	f004 fa90 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e70c:	4604      	mov	r4, r0
 800e70e:	e7f8      	b.n	800e702 <rcl_init_options_fini+0x3a>

0800e710 <rcl_init_options_copy>:
 800e710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e714:	b096      	sub	sp, #88	; 0x58
 800e716:	2800      	cmp	r0, #0
 800e718:	d063      	beq.n	800e7e2 <rcl_init_options_copy+0xd2>
 800e71a:	6806      	ldr	r6, [r0, #0]
 800e71c:	4605      	mov	r5, r0
 800e71e:	2e00      	cmp	r6, #0
 800e720:	d05f      	beq.n	800e7e2 <rcl_init_options_copy+0xd2>
 800e722:	460c      	mov	r4, r1
 800e724:	2900      	cmp	r1, #0
 800e726:	d05c      	beq.n	800e7e2 <rcl_init_options_copy+0xd2>
 800e728:	680b      	ldr	r3, [r1, #0]
 800e72a:	b123      	cbz	r3, 800e736 <rcl_init_options_copy+0x26>
 800e72c:	2664      	movs	r6, #100	; 0x64
 800e72e:	4630      	mov	r0, r6
 800e730:	b016      	add	sp, #88	; 0x58
 800e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e736:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e738:	af11      	add	r7, sp, #68	; 0x44
 800e73a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e73c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800e740:	6833      	ldr	r3, [r6, #0]
 800e742:	603b      	str	r3, [r7, #0]
 800e744:	4640      	mov	r0, r8
 800e746:	f7fc f93d 	bl	800a9c4 <rcutils_allocator_is_valid>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d049      	beq.n	800e7e2 <rcl_init_options_copy+0xd2>
 800e74e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e750:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e752:	2050      	movs	r0, #80	; 0x50
 800e754:	4798      	blx	r3
 800e756:	4606      	mov	r6, r0
 800e758:	6020      	str	r0, [r4, #0]
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d077      	beq.n	800e84e <rcl_init_options_copy+0x13e>
 800e75e:	46c4      	mov	ip, r8
 800e760:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e764:	4637      	mov	r7, r6
 800e766:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e768:	f8dc 3000 	ldr.w	r3, [ip]
 800e76c:	603b      	str	r3, [r7, #0]
 800e76e:	a802      	add	r0, sp, #8
 800e770:	af02      	add	r7, sp, #8
 800e772:	f001 fed3 	bl	801051c <rmw_get_zero_initialized_init_options>
 800e776:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e778:	3618      	adds	r6, #24
 800e77a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e77c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e77e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e780:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e782:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e784:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e788:	ab16      	add	r3, sp, #88	; 0x58
 800e78a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e78e:	e913 0003 	ldmdb	r3, {r0, r1}
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e798:	f103 0018 	add.w	r0, r3, #24
 800e79c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800e7a0:	f002 f81a 	bl	80107d8 <rmw_init_options_init>
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	bb08      	cbnz	r0, 800e7ec <rcl_init_options_copy+0xdc>
 800e7a8:	682f      	ldr	r7, [r5, #0]
 800e7aa:	f8d4 c000 	ldr.w	ip, [r4]
 800e7ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e7b0:	4666      	mov	r6, ip
 800e7b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	6033      	str	r3, [r6, #0]
 800e7b8:	f10c 0018 	add.w	r0, ip, #24
 800e7bc:	f002 f8a6 	bl	801090c <rmw_init_options_fini>
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	b1f0      	cbz	r0, 800e802 <rcl_init_options_copy+0xf2>
 800e7c4:	f7fc f90c 	bl	800a9e0 <rcutils_get_error_string>
 800e7c8:	f7fc f920 	bl	800aa0c <rcutils_reset_error>
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff ff7b 	bl	800e6c8 <rcl_init_options_fini>
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d1aa      	bne.n	800e72e <rcl_init_options_copy+0x1e>
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f004 fa27 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e7de:	4606      	mov	r6, r0
 800e7e0:	e7a5      	b.n	800e72e <rcl_init_options_copy+0x1e>
 800e7e2:	260b      	movs	r6, #11
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	b016      	add	sp, #88	; 0x58
 800e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7ee:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e7f0:	6820      	ldr	r0, [r4, #0]
 800e7f2:	4798      	blx	r3
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f004 fa19 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d0d3      	beq.n	800e7a8 <rcl_init_options_copy+0x98>
 800e800:	e795      	b.n	800e72e <rcl_init_options_copy+0x1e>
 800e802:	a802      	add	r0, sp, #8
 800e804:	ae02      	add	r6, sp, #8
 800e806:	6827      	ldr	r7, [r4, #0]
 800e808:	f001 fe88 	bl	801051c <rmw_get_zero_initialized_init_options>
 800e80c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e80e:	3718      	adds	r7, #24
 800e810:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e812:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e814:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e816:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e818:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e81a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e81e:	682a      	ldr	r2, [r5, #0]
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	e887 0003 	stmia.w	r7, {r0, r1}
 800e826:	f102 0018 	add.w	r0, r2, #24
 800e82a:	f103 0118 	add.w	r1, r3, #24
 800e82e:	f002 f82b 	bl	8010888 <rmw_init_options_copy>
 800e832:	4606      	mov	r6, r0
 800e834:	2800      	cmp	r0, #0
 800e836:	f43f af7a 	beq.w	800e72e <rcl_init_options_copy+0x1e>
 800e83a:	f7fc f8d1 	bl	800a9e0 <rcutils_get_error_string>
 800e83e:	f7fc f8e5 	bl	800aa0c <rcutils_reset_error>
 800e842:	4620      	mov	r0, r4
 800e844:	f7ff ff40 	bl	800e6c8 <rcl_init_options_fini>
 800e848:	b118      	cbz	r0, 800e852 <rcl_init_options_copy+0x142>
 800e84a:	4606      	mov	r6, r0
 800e84c:	e76f      	b.n	800e72e <rcl_init_options_copy+0x1e>
 800e84e:	260a      	movs	r6, #10
 800e850:	e76d      	b.n	800e72e <rcl_init_options_copy+0x1e>
 800e852:	4630      	mov	r0, r6
 800e854:	f004 f9ea 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800e858:	4606      	mov	r6, r0
 800e85a:	e768      	b.n	800e72e <rcl_init_options_copy+0x1e>

0800e85c <rcl_get_localhost_only>:
 800e85c:	b510      	push	{r4, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	2300      	movs	r3, #0
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	b1b8      	cbz	r0, 800e896 <rcl_get_localhost_only+0x3a>
 800e866:	4604      	mov	r4, r0
 800e868:	a901      	add	r1, sp, #4
 800e86a:	480c      	ldr	r0, [pc, #48]	; (800e89c <rcl_get_localhost_only+0x40>)
 800e86c:	f001 fd20 	bl	80102b0 <rcutils_get_env>
 800e870:	b110      	cbz	r0, 800e878 <rcl_get_localhost_only+0x1c>
 800e872:	2001      	movs	r0, #1
 800e874:	b002      	add	sp, #8
 800e876:	bd10      	pop	{r4, pc}
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	b113      	cbz	r3, 800e882 <rcl_get_localhost_only+0x26>
 800e87c:	781a      	ldrb	r2, [r3, #0]
 800e87e:	2a31      	cmp	r2, #49	; 0x31
 800e880:	d004      	beq.n	800e88c <rcl_get_localhost_only+0x30>
 800e882:	2302      	movs	r3, #2
 800e884:	2000      	movs	r0, #0
 800e886:	7023      	strb	r3, [r4, #0]
 800e888:	b002      	add	sp, #8
 800e88a:	bd10      	pop	{r4, pc}
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1f7      	bne.n	800e882 <rcl_get_localhost_only+0x26>
 800e892:	2301      	movs	r3, #1
 800e894:	e7f6      	b.n	800e884 <rcl_get_localhost_only+0x28>
 800e896:	200b      	movs	r0, #11
 800e898:	b002      	add	sp, #8
 800e89a:	bd10      	pop	{r4, pc}
 800e89c:	08014be0 	.word	0x08014be0

0800e8a0 <rcl_get_zero_initialized_node>:
 800e8a0:	4a03      	ldr	r2, [pc, #12]	; (800e8b0 <rcl_get_zero_initialized_node+0x10>)
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	4770      	bx	lr
 800e8b0:	08014c00 	.word	0x08014c00

0800e8b4 <rcl_node_init>:
 800e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b8:	b09b      	sub	sp, #108	; 0x6c
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800e8c0:	f04f 0c00 	mov.w	ip, #0
 800e8c4:	a815      	add	r0, sp, #84	; 0x54
 800e8c6:	460e      	mov	r6, r1
 800e8c8:	4615      	mov	r5, r2
 800e8ca:	461f      	mov	r7, r3
 800e8cc:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800e8d0:	f004 fa7c 	bl	8012dcc <rcl_guard_condition_get_default_options>
 800e8d4:	f1b8 0f00 	cmp.w	r8, #0
 800e8d8:	f000 80fd 	beq.w	800ead6 <rcl_node_init+0x222>
 800e8dc:	f108 0b04 	add.w	fp, r8, #4
 800e8e0:	4658      	mov	r0, fp
 800e8e2:	f7fc f86f 	bl	800a9c4 <rcutils_allocator_is_valid>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	f000 80f5 	beq.w	800ead6 <rcl_node_init+0x222>
 800e8ec:	2e00      	cmp	r6, #0
 800e8ee:	f000 80f2 	beq.w	800ead6 <rcl_node_init+0x222>
 800e8f2:	2d00      	cmp	r5, #0
 800e8f4:	f000 80ef 	beq.w	800ead6 <rcl_node_init+0x222>
 800e8f8:	2c00      	cmp	r4, #0
 800e8fa:	f000 80ec 	beq.w	800ead6 <rcl_node_init+0x222>
 800e8fe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e902:	f1b9 0f00 	cmp.w	r9, #0
 800e906:	f040 8112 	bne.w	800eb2e <rcl_node_init+0x27a>
 800e90a:	2f00      	cmp	r7, #0
 800e90c:	f000 80e3 	beq.w	800ead6 <rcl_node_init+0x222>
 800e910:	4638      	mov	r0, r7
 800e912:	f7ff fba5 	bl	800e060 <rcl_context_is_valid>
 800e916:	4682      	mov	sl, r0
 800e918:	2800      	cmp	r0, #0
 800e91a:	f000 80e2 	beq.w	800eae2 <rcl_node_init+0x22e>
 800e91e:	464a      	mov	r2, r9
 800e920:	a914      	add	r1, sp, #80	; 0x50
 800e922:	4630      	mov	r0, r6
 800e924:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800e928:	f001 fe8a 	bl	8010640 <rmw_validate_node_name>
 800e92c:	4681      	mov	r9, r0
 800e92e:	2800      	cmp	r0, #0
 800e930:	f040 80d3 	bne.w	800eada <rcl_node_init+0x226>
 800e934:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e936:	2800      	cmp	r0, #0
 800e938:	f040 8105 	bne.w	800eb46 <rcl_node_init+0x292>
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7f1 fc71 	bl	8000224 <strlen>
 800e942:	2800      	cmp	r0, #0
 800e944:	f040 80d0 	bne.w	800eae8 <rcl_node_init+0x234>
 800e948:	4d8e      	ldr	r5, [pc, #568]	; (800eb84 <rcl_node_init+0x2d0>)
 800e94a:	a914      	add	r1, sp, #80	; 0x50
 800e94c:	2200      	movs	r2, #0
 800e94e:	4628      	mov	r0, r5
 800e950:	f001 fe58 	bl	8010604 <rmw_validate_namespace>
 800e954:	4681      	mov	r9, r0
 800e956:	2800      	cmp	r0, #0
 800e958:	f040 80bf 	bne.w	800eada <rcl_node_init+0x226>
 800e95c:	4682      	mov	sl, r0
 800e95e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e960:	2b00      	cmp	r3, #0
 800e962:	f040 80f5 	bne.w	800eb50 <rcl_node_init+0x29c>
 800e966:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e96a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e96e:	9307      	str	r3, [sp, #28]
 800e970:	2030      	movs	r0, #48	; 0x30
 800e972:	4790      	blx	r2
 800e974:	4681      	mov	r9, r0
 800e976:	6060      	str	r0, [r4, #4]
 800e978:	2800      	cmp	r0, #0
 800e97a:	f000 80de 	beq.w	800eb3a <rcl_node_init+0x286>
 800e97e:	9b07      	ldr	r3, [sp, #28]
 800e980:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800e984:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800e988:	a80a      	add	r0, sp, #40	; 0x28
 800e98a:	f000 f933 	bl	800ebf4 <rcl_node_get_default_options>
 800e98e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800e992:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e996:	46cc      	mov	ip, r9
 800e998:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e99c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800e9a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800e9a4:	6861      	ldr	r1, [r4, #4]
 800e9a6:	6027      	str	r7, [r4, #0]
 800e9a8:	4640      	mov	r0, r8
 800e9aa:	f000 f93f 	bl	800ec2c <rcl_node_options_copy>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d167      	bne.n	800ea82 <rcl_node_init+0x1ce>
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f7f1 fc36 	bl	8000224 <strlen>
 800e9b8:	4428      	add	r0, r5
 800e9ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9be:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e9c2:	2b2f      	cmp	r3, #47	; 0x2f
 800e9c4:	bf08      	it	eq
 800e9c6:	4970      	ldreq	r1, [pc, #448]	; (800eb88 <rcl_node_init+0x2d4>)
 800e9c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e9cc:	bf18      	it	ne
 800e9ce:	496f      	ldrne	r1, [pc, #444]	; (800eb8c <rcl_node_init+0x2d8>)
 800e9d0:	9604      	str	r6, [sp, #16]
 800e9d2:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800e9d6:	e9cd 3200 	strd	r3, r2, [sp]
 800e9da:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800e9de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9e2:	f001 fc2b 	bl	801023c <rcutils_format_string_limit>
 800e9e6:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800e9ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e9f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9f4:	1c59      	adds	r1, r3, #1
 800e9f6:	f000 80b7 	beq.w	800eb68 <rcl_node_init+0x2b4>
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	f8c9 301c 	str.w	r3, [r9, #28]
 800ea00:	6952      	ldr	r2, [r2, #20]
 800ea02:	6821      	ldr	r1, [r4, #0]
 800ea04:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ea08:	6808      	ldr	r0, [r1, #0]
 800ea0a:	f1a2 0201 	sub.w	r2, r2, #1
 800ea0e:	fab2 f282 	clz	r2, r2
 800ea12:	0952      	lsrs	r2, r2, #5
 800ea14:	9200      	str	r2, [sp, #0]
 800ea16:	4631      	mov	r1, r6
 800ea18:	3028      	adds	r0, #40	; 0x28
 800ea1a:	462a      	mov	r2, r5
 800ea1c:	f002 f99a 	bl	8010d54 <rmw_create_node>
 800ea20:	6863      	ldr	r3, [r4, #4]
 800ea22:	f8c9 0020 	str.w	r0, [r9, #32]
 800ea26:	6a18      	ldr	r0, [r3, #32]
 800ea28:	b368      	cbz	r0, 800ea86 <rcl_node_init+0x1d2>
 800ea2a:	f002 fa27 	bl	8010e7c <rmw_node_get_graph_guard_condition>
 800ea2e:	4681      	mov	r9, r0
 800ea30:	b338      	cbz	r0, 800ea82 <rcl_node_init+0x1ce>
 800ea32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea36:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ea3a:	6866      	ldr	r6, [r4, #4]
 800ea3c:	2008      	movs	r0, #8
 800ea3e:	4798      	blx	r3
 800ea40:	6863      	ldr	r3, [r4, #4]
 800ea42:	6270      	str	r0, [r6, #36]	; 0x24
 800ea44:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800ea46:	b1f6      	cbz	r6, 800ea86 <rcl_node_init+0x1d2>
 800ea48:	a808      	add	r0, sp, #32
 800ea4a:	f004 f937 	bl	8012cbc <rcl_get_zero_initialized_guard_condition>
 800ea4e:	a808      	add	r0, sp, #32
 800ea50:	c803      	ldmia	r0, {r0, r1}
 800ea52:	e886 0003 	stmia.w	r6, {r0, r1}
 800ea56:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ea5a:	ae15      	add	r6, sp, #84	; 0x54
 800ea5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea5e:	f8db 3000 	ldr.w	r3, [fp]
 800ea62:	6033      	str	r3, [r6, #0]
 800ea64:	ab1a      	add	r3, sp, #104	; 0x68
 800ea66:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ea6a:	6866      	ldr	r6, [r4, #4]
 800ea6c:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800ea6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ea72:	4649      	mov	r1, r9
 800ea74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea76:	4630      	mov	r0, r6
 800ea78:	463a      	mov	r2, r7
 800ea7a:	f004 f929 	bl	8012cd0 <rcl_guard_condition_init_from_rmw>
 800ea7e:	4681      	mov	r9, r0
 800ea80:	b328      	cbz	r0, 800eace <rcl_node_init+0x21a>
 800ea82:	6863      	ldr	r3, [r4, #4]
 800ea84:	b1f3      	cbz	r3, 800eac4 <rcl_node_init+0x210>
 800ea86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ea88:	b128      	cbz	r0, 800ea96 <rcl_node_init+0x1e2>
 800ea8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea8e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ea92:	4798      	blx	r3
 800ea94:	6863      	ldr	r3, [r4, #4]
 800ea96:	6a18      	ldr	r0, [r3, #32]
 800ea98:	b110      	cbz	r0, 800eaa0 <rcl_node_init+0x1ec>
 800ea9a:	f002 f973 	bl	8010d84 <rmw_destroy_node>
 800ea9e:	6863      	ldr	r3, [r4, #4]
 800eaa0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800eaa2:	b148      	cbz	r0, 800eab8 <rcl_node_init+0x204>
 800eaa4:	f004 f96c 	bl	8012d80 <rcl_guard_condition_fini>
 800eaa8:	6862      	ldr	r2, [r4, #4]
 800eaaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaae:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800eab0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800eab4:	4798      	blx	r3
 800eab6:	6863      	ldr	r3, [r4, #4]
 800eab8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800eabc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800eac0:	4618      	mov	r0, r3
 800eac2:	4790      	blx	r2
 800eac4:	2300      	movs	r3, #0
 800eac6:	e9c4 3300 	strd	r3, r3, [r4]
 800eaca:	f04f 0901 	mov.w	r9, #1
 800eace:	f1ba 0f00 	cmp.w	sl, #0
 800ead2:	d125      	bne.n	800eb20 <rcl_node_init+0x26c>
 800ead4:	e001      	b.n	800eada <rcl_node_init+0x226>
 800ead6:	f04f 090b 	mov.w	r9, #11
 800eada:	4648      	mov	r0, r9
 800eadc:	b01b      	add	sp, #108	; 0x6c
 800eade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae2:	f04f 0965 	mov.w	r9, #101	; 0x65
 800eae6:	e7f8      	b.n	800eada <rcl_node_init+0x226>
 800eae8:	782b      	ldrb	r3, [r5, #0]
 800eaea:	2b2f      	cmp	r3, #47	; 0x2f
 800eaec:	f43f af2d 	beq.w	800e94a <rcl_node_init+0x96>
 800eaf0:	4927      	ldr	r1, [pc, #156]	; (800eb90 <rcl_node_init+0x2dc>)
 800eaf2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eafc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800eb00:	9503      	str	r5, [sp, #12]
 800eb02:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800eb06:	f001 fb99 	bl	801023c <rcutils_format_string_limit>
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	b348      	cbz	r0, 800eb62 <rcl_node_init+0x2ae>
 800eb0e:	2200      	movs	r2, #0
 800eb10:	a914      	add	r1, sp, #80	; 0x50
 800eb12:	9214      	str	r2, [sp, #80]	; 0x50
 800eb14:	f001 fd76 	bl	8010604 <rmw_validate_namespace>
 800eb18:	4681      	mov	r9, r0
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	f43f af1f 	beq.w	800e95e <rcl_node_init+0xaa>
 800eb20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb24:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800eb28:	4628      	mov	r0, r5
 800eb2a:	4798      	blx	r3
 800eb2c:	e7d5      	b.n	800eada <rcl_node_init+0x226>
 800eb2e:	f04f 0964 	mov.w	r9, #100	; 0x64
 800eb32:	4648      	mov	r0, r9
 800eb34:	b01b      	add	sp, #108	; 0x6c
 800eb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3a:	f04f 090a 	mov.w	r9, #10
 800eb3e:	f1ba 0f00 	cmp.w	sl, #0
 800eb42:	d1ed      	bne.n	800eb20 <rcl_node_init+0x26c>
 800eb44:	e7c9      	b.n	800eada <rcl_node_init+0x226>
 800eb46:	f001 fdcd 	bl	80106e4 <rmw_node_name_validation_result_string>
 800eb4a:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800eb4e:	e7c4      	b.n	800eada <rcl_node_init+0x226>
 800eb50:	4618      	mov	r0, r3
 800eb52:	f001 fd69 	bl	8010628 <rmw_namespace_validation_result_string>
 800eb56:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800eb5a:	f1ba 0f00 	cmp.w	sl, #0
 800eb5e:	d1df      	bne.n	800eb20 <rcl_node_init+0x26c>
 800eb60:	e7bb      	b.n	800eada <rcl_node_init+0x226>
 800eb62:	f04f 090a 	mov.w	r9, #10
 800eb66:	e7b8      	b.n	800eada <rcl_node_init+0x226>
 800eb68:	a813      	add	r0, sp, #76	; 0x4c
 800eb6a:	f004 f873 	bl	8012c54 <rcl_get_default_domain_id>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d187      	bne.n	800ea82 <rcl_node_init+0x1ce>
 800eb72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	bf04      	itt	eq
 800eb7c:	9013      	streq	r0, [sp, #76]	; 0x4c
 800eb7e:	4603      	moveq	r3, r0
 800eb80:	e73b      	b.n	800e9fa <rcl_node_init+0x146>
 800eb82:	bf00      	nop
 800eb84:	08014bf8 	.word	0x08014bf8
 800eb88:	08014bb4 	.word	0x08014bb4
 800eb8c:	08014bbc 	.word	0x08014bbc
 800eb90:	08014bfc 	.word	0x08014bfc

0800eb94 <rcl_node_is_valid_except_context>:
 800eb94:	b128      	cbz	r0, 800eba2 <rcl_node_is_valid_except_context+0xe>
 800eb96:	6840      	ldr	r0, [r0, #4]
 800eb98:	b118      	cbz	r0, 800eba2 <rcl_node_is_valid_except_context+0xe>
 800eb9a:	6a00      	ldr	r0, [r0, #32]
 800eb9c:	3800      	subs	r0, #0
 800eb9e:	bf18      	it	ne
 800eba0:	2001      	movne	r0, #1
 800eba2:	4770      	bx	lr

0800eba4 <rcl_node_is_valid>:
 800eba4:	b130      	cbz	r0, 800ebb4 <rcl_node_is_valid+0x10>
 800eba6:	6843      	ldr	r3, [r0, #4]
 800eba8:	b123      	cbz	r3, 800ebb4 <rcl_node_is_valid+0x10>
 800ebaa:	6a1b      	ldr	r3, [r3, #32]
 800ebac:	b113      	cbz	r3, 800ebb4 <rcl_node_is_valid+0x10>
 800ebae:	6800      	ldr	r0, [r0, #0]
 800ebb0:	f7ff ba56 	b.w	800e060 <rcl_context_is_valid>
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	4770      	bx	lr

0800ebb8 <rcl_node_get_name>:
 800ebb8:	b120      	cbz	r0, 800ebc4 <rcl_node_get_name+0xc>
 800ebba:	6840      	ldr	r0, [r0, #4]
 800ebbc:	b110      	cbz	r0, 800ebc4 <rcl_node_get_name+0xc>
 800ebbe:	6a00      	ldr	r0, [r0, #32]
 800ebc0:	b100      	cbz	r0, 800ebc4 <rcl_node_get_name+0xc>
 800ebc2:	6880      	ldr	r0, [r0, #8]
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop

0800ebc8 <rcl_node_get_namespace>:
 800ebc8:	b120      	cbz	r0, 800ebd4 <rcl_node_get_namespace+0xc>
 800ebca:	6840      	ldr	r0, [r0, #4]
 800ebcc:	b110      	cbz	r0, 800ebd4 <rcl_node_get_namespace+0xc>
 800ebce:	6a00      	ldr	r0, [r0, #32]
 800ebd0:	b100      	cbz	r0, 800ebd4 <rcl_node_get_namespace+0xc>
 800ebd2:	68c0      	ldr	r0, [r0, #12]
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop

0800ebd8 <rcl_node_get_options>:
 800ebd8:	b128      	cbz	r0, 800ebe6 <rcl_node_get_options+0xe>
 800ebda:	6840      	ldr	r0, [r0, #4]
 800ebdc:	b118      	cbz	r0, 800ebe6 <rcl_node_get_options+0xe>
 800ebde:	6a03      	ldr	r3, [r0, #32]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	bf08      	it	eq
 800ebe4:	2000      	moveq	r0, #0
 800ebe6:	4770      	bx	lr

0800ebe8 <rcl_node_get_rmw_handle>:
 800ebe8:	b110      	cbz	r0, 800ebf0 <rcl_node_get_rmw_handle+0x8>
 800ebea:	6840      	ldr	r0, [r0, #4]
 800ebec:	b100      	cbz	r0, 800ebf0 <rcl_node_get_rmw_handle+0x8>
 800ebee:	6a00      	ldr	r0, [r0, #32]
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop

0800ebf4 <rcl_node_get_default_options>:
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	4607      	mov	r7, r0
 800ebfa:	466d      	mov	r5, sp
 800ebfc:	4668      	mov	r0, sp
 800ebfe:	f7fb fed3 	bl	800a9a8 <rcutils_get_default_allocator>
 800ec02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec04:	4c08      	ldr	r4, [pc, #32]	; (800ec28 <rcl_node_get_default_options+0x34>)
 800ec06:	f8d5 c000 	ldr.w	ip, [r5]
 800ec0a:	1d26      	adds	r6, r4, #4
 800ec0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec10:	463d      	mov	r5, r7
 800ec12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec14:	f8c6 c000 	str.w	ip, [r6]
 800ec18:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ec1c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ec20:	4638      	mov	r0, r7
 800ec22:	b007      	add	sp, #28
 800ec24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000094 	.word	0x20000094

0800ec2c <rcl_node_options_copy>:
 800ec2c:	b1c8      	cbz	r0, 800ec62 <rcl_node_options_copy+0x36>
 800ec2e:	b4f0      	push	{r4, r5, r6, r7}
 800ec30:	460f      	mov	r7, r1
 800ec32:	b199      	cbz	r1, 800ec5c <rcl_node_options_copy+0x30>
 800ec34:	4288      	cmp	r0, r1
 800ec36:	4606      	mov	r6, r0
 800ec38:	d010      	beq.n	800ec5c <rcl_node_options_copy+0x30>
 800ec3a:	4605      	mov	r5, r0
 800ec3c:	460c      	mov	r4, r1
 800ec3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec42:	f844 3b04 	str.w	r3, [r4], #4
 800ec46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec4a:	7e32      	ldrb	r2, [r6, #24]
 800ec4c:	6829      	ldr	r1, [r5, #0]
 800ec4e:	7e73      	ldrb	r3, [r6, #25]
 800ec50:	6021      	str	r1, [r4, #0]
 800ec52:	2000      	movs	r0, #0
 800ec54:	763a      	strb	r2, [r7, #24]
 800ec56:	767b      	strb	r3, [r7, #25]
 800ec58:	bcf0      	pop	{r4, r5, r6, r7}
 800ec5a:	4770      	bx	lr
 800ec5c:	200b      	movs	r0, #11
 800ec5e:	bcf0      	pop	{r4, r5, r6, r7}
 800ec60:	4770      	bx	lr
 800ec62:	200b      	movs	r0, #11
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop

0800ec68 <exact_match_lookup>:
 800ec68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec6a:	f102 0708 	add.w	r7, r2, #8
 800ec6e:	460b      	mov	r3, r1
 800ec70:	4614      	mov	r4, r2
 800ec72:	4606      	mov	r6, r0
 800ec74:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ec78:	b085      	sub	sp, #20
 800ec7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	4918      	ldr	r1, [pc, #96]	; (800ece4 <exact_match_lookup+0x7c>)
 800ec82:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ec86:	f001 facb 	bl	8010220 <rcutils_join_path>
 800ec8a:	7833      	ldrb	r3, [r6, #0]
 800ec8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ec8e:	4605      	mov	r5, r0
 800ec90:	d021      	beq.n	800ecd6 <exact_match_lookup+0x6e>
 800ec92:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800ec96:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ec9a:	1c70      	adds	r0, r6, #1
 800ec9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eca0:	f001 fac4 	bl	801022c <rcutils_to_native_path>
 800eca4:	4606      	mov	r6, r0
 800eca6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ecaa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ecae:	4631      	mov	r1, r6
 800ecb0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	f001 fab3 	bl	8010220 <rcutils_join_path>
 800ecba:	6862      	ldr	r2, [r4, #4]
 800ecbc:	6921      	ldr	r1, [r4, #16]
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	461e      	mov	r6, r3
 800ecc4:	4790      	blx	r2
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	6863      	ldr	r3, [r4, #4]
 800ecca:	6921      	ldr	r1, [r4, #16]
 800eccc:	4798      	blx	r3
 800ecce:	4635      	mov	r5, r6
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	b005      	add	sp, #20
 800ecd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecd6:	7873      	ldrb	r3, [r6, #1]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1da      	bne.n	800ec92 <exact_match_lookup+0x2a>
 800ecdc:	4628      	mov	r0, r5
 800ecde:	b005      	add	sp, #20
 800ece0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ece2:	bf00      	nop
 800ece4:	08014c44 	.word	0x08014c44

0800ece8 <rcl_get_secure_root>:
 800ece8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecec:	b085      	sub	sp, #20
 800ecee:	b168      	cbz	r0, 800ed0c <rcl_get_secure_root+0x24>
 800ecf0:	4607      	mov	r7, r0
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	460c      	mov	r4, r1
 800ecf6:	f7fb fe65 	bl	800a9c4 <rcutils_allocator_is_valid>
 800ecfa:	b138      	cbz	r0, 800ed0c <rcl_get_secure_root+0x24>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	482d      	ldr	r0, [pc, #180]	; (800edb4 <rcl_get_secure_root+0xcc>)
 800ed00:	9303      	str	r3, [sp, #12]
 800ed02:	a903      	add	r1, sp, #12
 800ed04:	f001 fad4 	bl	80102b0 <rcutils_get_env>
 800ed08:	4605      	mov	r5, r0
 800ed0a:	b120      	cbz	r0, 800ed16 <rcl_get_secure_root+0x2e>
 800ed0c:	2500      	movs	r5, #0
 800ed0e:	4628      	mov	r0, r5
 800ed10:	b005      	add	sp, #20
 800ed12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	781a      	ldrb	r2, [r3, #0]
 800ed1a:	2a00      	cmp	r2, #0
 800ed1c:	d0f6      	beq.n	800ed0c <rcl_get_secure_root+0x24>
 800ed1e:	f104 090c 	add.w	r9, r4, #12
 800ed22:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ed26:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ed30:	f001 fbae 	bl	8010490 <rcutils_strdup>
 800ed34:	4680      	mov	r8, r0
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d0e8      	beq.n	800ed0c <rcl_get_secure_root+0x24>
 800ed3a:	481f      	ldr	r0, [pc, #124]	; (800edb8 <rcl_get_secure_root+0xd0>)
 800ed3c:	9503      	str	r5, [sp, #12]
 800ed3e:	a903      	add	r1, sp, #12
 800ed40:	f001 fab6 	bl	80102b0 <rcutils_get_env>
 800ed44:	b160      	cbz	r0, 800ed60 <rcl_get_secure_root+0x78>
 800ed46:	2600      	movs	r6, #0
 800ed48:	6863      	ldr	r3, [r4, #4]
 800ed4a:	6921      	ldr	r1, [r4, #16]
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	4798      	blx	r3
 800ed50:	4640      	mov	r0, r8
 800ed52:	6863      	ldr	r3, [r4, #4]
 800ed54:	6921      	ldr	r1, [r4, #16]
 800ed56:	4798      	blx	r3
 800ed58:	4628      	mov	r0, r5
 800ed5a:	b005      	add	sp, #20
 800ed5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	781e      	ldrb	r6, [r3, #0]
 800ed64:	b1f6      	cbz	r6, 800eda4 <rcl_get_secure_root+0xbc>
 800ed66:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ed6a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ed74:	f001 fb8c 	bl	8010490 <rcutils_strdup>
 800ed78:	4606      	mov	r6, r0
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d0e3      	beq.n	800ed46 <rcl_get_secure_root+0x5e>
 800ed7e:	4622      	mov	r2, r4
 800ed80:	4641      	mov	r1, r8
 800ed82:	f7ff ff71 	bl	800ec68 <exact_match_lookup>
 800ed86:	4605      	mov	r5, r0
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	d0dd      	beq.n	800ed48 <rcl_get_secure_root+0x60>
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	f001 fa45 	bl	801021c <rcutils_is_directory>
 800ed92:	4607      	mov	r7, r0
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d1d7      	bne.n	800ed48 <rcl_get_secure_root+0x60>
 800ed98:	4628      	mov	r0, r5
 800ed9a:	6863      	ldr	r3, [r4, #4]
 800ed9c:	6921      	ldr	r1, [r4, #16]
 800ed9e:	4798      	blx	r3
 800eda0:	463d      	mov	r5, r7
 800eda2:	e7d1      	b.n	800ed48 <rcl_get_secure_root+0x60>
 800eda4:	4638      	mov	r0, r7
 800eda6:	4622      	mov	r2, r4
 800eda8:	4641      	mov	r1, r8
 800edaa:	f7ff ff5d 	bl	800ec68 <exact_match_lookup>
 800edae:	4605      	mov	r5, r0
 800edb0:	e7ea      	b.n	800ed88 <rcl_get_secure_root+0xa0>
 800edb2:	bf00      	nop
 800edb4:	08014c50 	.word	0x08014c50
 800edb8:	08014c68 	.word	0x08014c68

0800edbc <rcl_get_security_options_from_environment>:
 800edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	b082      	sub	sp, #8
 800edc2:	4607      	mov	r7, r0
 800edc4:	4688      	mov	r8, r1
 800edc6:	2400      	movs	r4, #0
 800edc8:	481d      	ldr	r0, [pc, #116]	; (800ee40 <rcl_get_security_options_from_environment+0x84>)
 800edca:	9401      	str	r4, [sp, #4]
 800edcc:	a901      	add	r1, sp, #4
 800edce:	4616      	mov	r6, r2
 800edd0:	f001 fa6e 	bl	80102b0 <rcutils_get_env>
 800edd4:	b120      	cbz	r0, 800ede0 <rcl_get_security_options_from_environment+0x24>
 800edd6:	2501      	movs	r5, #1
 800edd8:	4628      	mov	r0, r5
 800edda:	b002      	add	sp, #8
 800eddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede0:	4918      	ldr	r1, [pc, #96]	; (800ee44 <rcl_get_security_options_from_environment+0x88>)
 800ede2:	4604      	mov	r4, r0
 800ede4:	9801      	ldr	r0, [sp, #4]
 800ede6:	f7f1 fa13 	bl	8000210 <strcmp>
 800edea:	4605      	mov	r5, r0
 800edec:	b9c8      	cbnz	r0, 800ee22 <rcl_get_security_options_from_environment+0x66>
 800edee:	9001      	str	r0, [sp, #4]
 800edf0:	b1ee      	cbz	r6, 800ee2e <rcl_get_security_options_from_environment+0x72>
 800edf2:	4815      	ldr	r0, [pc, #84]	; (800ee48 <rcl_get_security_options_from_environment+0x8c>)
 800edf4:	a901      	add	r1, sp, #4
 800edf6:	f001 fa5b 	bl	80102b0 <rcutils_get_env>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d1eb      	bne.n	800edd6 <rcl_get_security_options_from_environment+0x1a>
 800edfe:	4913      	ldr	r1, [pc, #76]	; (800ee4c <rcl_get_security_options_from_environment+0x90>)
 800ee00:	9801      	ldr	r0, [sp, #4]
 800ee02:	f7f1 fa05 	bl	8000210 <strcmp>
 800ee06:	fab0 f080 	clz	r0, r0
 800ee0a:	0940      	lsrs	r0, r0, #5
 800ee0c:	7030      	strb	r0, [r6, #0]
 800ee0e:	4641      	mov	r1, r8
 800ee10:	4638      	mov	r0, r7
 800ee12:	f7ff ff69 	bl	800ece8 <rcl_get_secure_root>
 800ee16:	b160      	cbz	r0, 800ee32 <rcl_get_security_options_from_environment+0x76>
 800ee18:	6070      	str	r0, [r6, #4]
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	b002      	add	sp, #8
 800ee1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee22:	4625      	mov	r5, r4
 800ee24:	4628      	mov	r0, r5
 800ee26:	7034      	strb	r4, [r6, #0]
 800ee28:	b002      	add	sp, #8
 800ee2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2e:	250b      	movs	r5, #11
 800ee30:	e7d2      	b.n	800edd8 <rcl_get_security_options_from_environment+0x1c>
 800ee32:	7835      	ldrb	r5, [r6, #0]
 800ee34:	f1a5 0501 	sub.w	r5, r5, #1
 800ee38:	fab5 f585 	clz	r5, r5
 800ee3c:	096d      	lsrs	r5, r5, #5
 800ee3e:	e7cb      	b.n	800edd8 <rcl_get_security_options_from_environment+0x1c>
 800ee40:	08014c08 	.word	0x08014c08
 800ee44:	08014c1c 	.word	0x08014c1c
 800ee48:	08014c24 	.word	0x08014c24
 800ee4c:	08014c3c 	.word	0x08014c3c

0800ee50 <rcl_take>:
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d03f      	beq.n	800eed4 <rcl_take+0x84>
 800ee54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee58:	4617      	mov	r7, r2
 800ee5a:	6802      	ldr	r2, [r0, #0]
 800ee5c:	b09d      	sub	sp, #116	; 0x74
 800ee5e:	4606      	mov	r6, r0
 800ee60:	b382      	cbz	r2, 800eec4 <rcl_take+0x74>
 800ee62:	4699      	mov	r9, r3
 800ee64:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800ee68:	b363      	cbz	r3, 800eec4 <rcl_take+0x74>
 800ee6a:	4688      	mov	r8, r1
 800ee6c:	b381      	cbz	r1, 800eed0 <rcl_take+0x80>
 800ee6e:	2f00      	cmp	r7, #0
 800ee70:	d034      	beq.n	800eedc <rcl_take+0x8c>
 800ee72:	a802      	add	r0, sp, #8
 800ee74:	ac02      	add	r4, sp, #8
 800ee76:	f001 fb65 	bl	8010544 <rmw_get_zero_initialized_message_info>
 800ee7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee7c:	463d      	mov	r5, r7
 800ee7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee88:	6834      	ldr	r4, [r6, #0]
 800ee8a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ee8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ee92:	2400      	movs	r4, #0
 800ee94:	463b      	mov	r3, r7
 800ee96:	4630      	mov	r0, r6
 800ee98:	f8cd 9000 	str.w	r9, [sp]
 800ee9c:	4641      	mov	r1, r8
 800ee9e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800eea2:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800eea6:	f002 f89d 	bl	8010fe4 <rmw_take_with_info>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	b9c0      	cbnz	r0, 800eee0 <rcl_take+0x90>
 800eeae:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800eeb2:	f240 1291 	movw	r2, #401	; 0x191
 800eeb6:	2900      	cmp	r1, #0
 800eeb8:	bf08      	it	eq
 800eeba:	4613      	moveq	r3, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	b01d      	add	sp, #116	; 0x74
 800eec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800eec8:	4618      	mov	r0, r3
 800eeca:	b01d      	add	sp, #116	; 0x74
 800eecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eed0:	230b      	movs	r3, #11
 800eed2:	e7f3      	b.n	800eebc <rcl_take+0x6c>
 800eed4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800eed8:	4618      	mov	r0, r3
 800eeda:	4770      	bx	lr
 800eedc:	af10      	add	r7, sp, #64	; 0x40
 800eede:	e7c8      	b.n	800ee72 <rcl_take+0x22>
 800eee0:	f003 fea4 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800eee4:	4603      	mov	r3, r0
 800eee6:	e7e9      	b.n	800eebc <rcl_take+0x6c>

0800eee8 <rcl_subscription_get_rmw_handle>:
 800eee8:	b118      	cbz	r0, 800eef2 <rcl_subscription_get_rmw_handle+0xa>
 800eeea:	6800      	ldr	r0, [r0, #0]
 800eeec:	b108      	cbz	r0, 800eef2 <rcl_subscription_get_rmw_handle+0xa>
 800eeee:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800eef2:	4770      	bx	lr

0800eef4 <rcl_get_system_time>:
 800eef4:	4608      	mov	r0, r1
 800eef6:	f7fb bed1 	b.w	800ac9c <rcutils_system_time_now>
 800eefa:	bf00      	nop

0800eefc <rcl_get_steady_time>:
 800eefc:	4608      	mov	r0, r1
 800eefe:	f7fb bef5 	b.w	800acec <rcutils_steady_time_now>
 800ef02:	bf00      	nop

0800ef04 <rcl_get_ros_time>:
 800ef04:	7a03      	ldrb	r3, [r0, #8]
 800ef06:	b510      	push	{r4, lr}
 800ef08:	460c      	mov	r4, r1
 800ef0a:	b133      	cbz	r3, 800ef1a <rcl_get_ros_time+0x16>
 800ef0c:	2105      	movs	r1, #5
 800ef0e:	f001 f8e3 	bl	80100d8 <__atomic_load_8>
 800ef12:	e9c4 0100 	strd	r0, r1, [r4]
 800ef16:	2000      	movs	r0, #0
 800ef18:	bd10      	pop	{r4, pc}
 800ef1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef1e:	4608      	mov	r0, r1
 800ef20:	f7fb bebc 	b.w	800ac9c <rcutils_system_time_now>

0800ef24 <rcl_clock_init>:
 800ef24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef28:	4606      	mov	r6, r0
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	4614      	mov	r4, r2
 800ef2e:	460d      	mov	r5, r1
 800ef30:	f7fb fd48 	bl	800a9c4 <rcutils_allocator_is_valid>
 800ef34:	b128      	cbz	r0, 800ef42 <rcl_clock_init+0x1e>
 800ef36:	2e03      	cmp	r6, #3
 800ef38:	d803      	bhi.n	800ef42 <rcl_clock_init+0x1e>
 800ef3a:	e8df f006 	tbb	[pc, r6]
 800ef3e:	2c1b      	.short	0x2c1b
 800ef40:	0554      	.short	0x0554
 800ef42:	200b      	movs	r0, #11
 800ef44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef48:	2d00      	cmp	r5, #0
 800ef4a:	d0fa      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800ef4c:	2c00      	cmp	r4, #0
 800ef4e:	d0f8      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800ef50:	2600      	movs	r6, #0
 800ef52:	702e      	strb	r6, [r5, #0]
 800ef54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef56:	f105 0714 	add.w	r7, r5, #20
 800ef5a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800ef5e:	612e      	str	r6, [r5, #16]
 800ef60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	2303      	movs	r3, #3
 800ef68:	4a2b      	ldr	r2, [pc, #172]	; (800f018 <rcl_clock_init+0xf4>)
 800ef6a:	702b      	strb	r3, [r5, #0]
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	60ea      	str	r2, [r5, #12]
 800ef70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef74:	2d00      	cmp	r5, #0
 800ef76:	d0e4      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800ef78:	2600      	movs	r6, #0
 800ef7a:	702e      	strb	r6, [r5, #0]
 800ef7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef7e:	f105 0714 	add.w	r7, r5, #20
 800ef82:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800ef86:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800ef8a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	603b      	str	r3, [r7, #0]
 800ef90:	4630      	mov	r0, r6
 800ef92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef96:	2d00      	cmp	r5, #0
 800ef98:	d0d3      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800ef9a:	2c00      	cmp	r4, #0
 800ef9c:	d0d1      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800ef9e:	2600      	movs	r6, #0
 800efa0:	702e      	strb	r6, [r5, #0]
 800efa2:	46a4      	mov	ip, r4
 800efa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efa8:	f105 0714 	add.w	r7, r5, #20
 800efac:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800efb0:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800efb4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800efb6:	f8dc 3000 	ldr.w	r3, [ip]
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	6921      	ldr	r1, [r4, #16]
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	2010      	movs	r0, #16
 800efc2:	4798      	blx	r3
 800efc4:	4603      	mov	r3, r0
 800efc6:	6128      	str	r0, [r5, #16]
 800efc8:	b318      	cbz	r0, 800f012 <rcl_clock_init+0xee>
 800efca:	f04f 0800 	mov.w	r8, #0
 800efce:	f04f 0900 	mov.w	r9, #0
 800efd2:	7206      	strb	r6, [r0, #8]
 800efd4:	e9c3 8900 	strd	r8, r9, [r3]
 800efd8:	2301      	movs	r3, #1
 800efda:	4a10      	ldr	r2, [pc, #64]	; (800f01c <rcl_clock_init+0xf8>)
 800efdc:	702b      	strb	r3, [r5, #0]
 800efde:	4630      	mov	r0, r6
 800efe0:	60ea      	str	r2, [r5, #12]
 800efe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efe6:	2d00      	cmp	r5, #0
 800efe8:	d0ab      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800efea:	2c00      	cmp	r4, #0
 800efec:	d0a9      	beq.n	800ef42 <rcl_clock_init+0x1e>
 800efee:	2600      	movs	r6, #0
 800eff0:	702e      	strb	r6, [r5, #0]
 800eff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eff4:	f105 0714 	add.w	r7, r5, #20
 800eff8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800effc:	612e      	str	r6, [r5, #16]
 800effe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	603b      	str	r3, [r7, #0]
 800f004:	2302      	movs	r3, #2
 800f006:	4a06      	ldr	r2, [pc, #24]	; (800f020 <rcl_clock_init+0xfc>)
 800f008:	702b      	strb	r3, [r5, #0]
 800f00a:	4630      	mov	r0, r6
 800f00c:	60ea      	str	r2, [r5, #12]
 800f00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f012:	200a      	movs	r0, #10
 800f014:	e796      	b.n	800ef44 <rcl_clock_init+0x20>
 800f016:	bf00      	nop
 800f018:	0800eefd 	.word	0x0800eefd
 800f01c:	0800ef05 	.word	0x0800ef05
 800f020:	0800eef5 	.word	0x0800eef5

0800f024 <rcl_clock_get_now>:
 800f024:	b140      	cbz	r0, 800f038 <rcl_clock_get_now+0x14>
 800f026:	b139      	cbz	r1, 800f038 <rcl_clock_get_now+0x14>
 800f028:	7803      	ldrb	r3, [r0, #0]
 800f02a:	b11b      	cbz	r3, 800f034 <rcl_clock_get_now+0x10>
 800f02c:	68c3      	ldr	r3, [r0, #12]
 800f02e:	b10b      	cbz	r3, 800f034 <rcl_clock_get_now+0x10>
 800f030:	6900      	ldr	r0, [r0, #16]
 800f032:	4718      	bx	r3
 800f034:	2001      	movs	r0, #1
 800f036:	4770      	bx	lr
 800f038:	200b      	movs	r0, #11
 800f03a:	4770      	bx	lr

0800f03c <rcl_timer_call>:
 800f03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f040:	b08b      	sub	sp, #44	; 0x2c
 800f042:	2800      	cmp	r0, #0
 800f044:	d06e      	beq.n	800f124 <rcl_timer_call+0xe8>
 800f046:	6803      	ldr	r3, [r0, #0]
 800f048:	f3bf 8f5b 	dmb	ish
 800f04c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f050:	f3bf 8f5b 	dmb	ish
 800f054:	4604      	mov	r4, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d159      	bne.n	800f10e <rcl_timer_call+0xd2>
 800f05a:	6803      	ldr	r3, [r0, #0]
 800f05c:	a908      	add	r1, sp, #32
 800f05e:	6818      	ldr	r0, [r3, #0]
 800f060:	f7ff ffe0 	bl	800f024 <rcl_clock_get_now>
 800f064:	4605      	mov	r5, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	d14d      	bne.n	800f106 <rcl_timer_call+0xca>
 800f06a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f06e:	2a00      	cmp	r2, #0
 800f070:	f173 0100 	sbcs.w	r1, r3, #0
 800f074:	db51      	blt.n	800f11a <rcl_timer_call+0xde>
 800f076:	6820      	ldr	r0, [r4, #0]
 800f078:	2605      	movs	r6, #5
 800f07a:	9600      	str	r6, [sp, #0]
 800f07c:	3020      	adds	r0, #32
 800f07e:	f001 f893 	bl	80101a8 <__atomic_exchange_8>
 800f082:	6822      	ldr	r2, [r4, #0]
 800f084:	f3bf 8f5b 	dmb	ish
 800f088:	4682      	mov	sl, r0
 800f08a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 800f08e:	f3bf 8f5b 	dmb	ish
 800f092:	6820      	ldr	r0, [r4, #0]
 800f094:	460b      	mov	r3, r1
 800f096:	3028      	adds	r0, #40	; 0x28
 800f098:	4631      	mov	r1, r6
 800f09a:	9305      	str	r3, [sp, #20]
 800f09c:	f001 f81c 	bl	80100d8 <__atomic_load_8>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	6820      	ldr	r0, [r4, #0]
 800f0a4:	460a      	mov	r2, r1
 800f0a6:	3018      	adds	r0, #24
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800f0ae:	f001 f813 	bl	80100d8 <__atomic_load_8>
 800f0b2:	9b04      	ldr	r3, [sp, #16]
 800f0b4:	9a03      	ldr	r2, [sp, #12]
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	460f      	mov	r7, r1
 800f0ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f0be:	eb13 0806 	adds.w	r8, r3, r6
 800f0c2:	eb42 0907 	adc.w	r9, r2, r7
 800f0c6:	4580      	cmp	r8, r0
 800f0c8:	eb79 0301 	sbcs.w	r3, r9, r1
 800f0cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f0d0:	460a      	mov	r2, r1
 800f0d2:	da04      	bge.n	800f0de <rcl_timer_call+0xa2>
 800f0d4:	ea56 0307 	orrs.w	r3, r6, r7
 800f0d8:	d129      	bne.n	800f12e <rcl_timer_call+0xf2>
 800f0da:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800f0de:	6820      	ldr	r0, [r4, #0]
 800f0e0:	2105      	movs	r1, #5
 800f0e2:	4642      	mov	r2, r8
 800f0e4:	464b      	mov	r3, r9
 800f0e6:	3028      	adds	r0, #40	; 0x28
 800f0e8:	9100      	str	r1, [sp, #0]
 800f0ea:	f001 f829 	bl	8010140 <__atomic_store_8>
 800f0ee:	f1bb 0f00 	cmp.w	fp, #0
 800f0f2:	d008      	beq.n	800f106 <rcl_timer_call+0xca>
 800f0f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f0f8:	9905      	ldr	r1, [sp, #20]
 800f0fa:	ebb2 020a 	subs.w	r2, r2, sl
 800f0fe:	4620      	mov	r0, r4
 800f100:	eb63 0301 	sbc.w	r3, r3, r1
 800f104:	47d8      	blx	fp
 800f106:	4628      	mov	r0, r5
 800f108:	b00b      	add	sp, #44	; 0x2c
 800f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10e:	f240 3521 	movw	r5, #801	; 0x321
 800f112:	4628      	mov	r0, r5
 800f114:	b00b      	add	sp, #44	; 0x2c
 800f116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11a:	2501      	movs	r5, #1
 800f11c:	4628      	mov	r0, r5
 800f11e:	b00b      	add	sp, #44	; 0x2c
 800f120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f124:	250b      	movs	r5, #11
 800f126:	4628      	mov	r0, r5
 800f128:	b00b      	add	sp, #44	; 0x2c
 800f12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12e:	ebb0 0008 	subs.w	r0, r0, r8
 800f132:	eb62 0109 	sbc.w	r1, r2, r9
 800f136:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 800f13a:	463b      	mov	r3, r7
 800f13c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 800f140:	4632      	mov	r2, r6
 800f142:	f7f1 f9db 	bl	80004fc <__aeabi_ldivmod>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	f141 0100 	adc.w	r1, r1, #0
 800f14c:	fb00 7007 	mla	r0, r0, r7, r7
 800f150:	fb06 0001 	mla	r0, r6, r1, r0
 800f154:	fba3 6706 	umull	r6, r7, r3, r6
 800f158:	4407      	add	r7, r0
 800f15a:	eb18 0806 	adds.w	r8, r8, r6
 800f15e:	eb49 0907 	adc.w	r9, r9, r7
 800f162:	e7bc      	b.n	800f0de <rcl_timer_call+0xa2>

0800f164 <rcl_timer_is_ready>:
 800f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	b310      	cbz	r0, 800f1b2 <rcl_timer_is_ready+0x4e>
 800f16c:	4688      	mov	r8, r1
 800f16e:	b301      	cbz	r1, 800f1b2 <rcl_timer_is_ready+0x4e>
 800f170:	6803      	ldr	r3, [r0, #0]
 800f172:	4604      	mov	r4, r0
 800f174:	4669      	mov	r1, sp
 800f176:	6818      	ldr	r0, [r3, #0]
 800f178:	f7ff ff54 	bl	800f024 <rcl_clock_get_now>
 800f17c:	4605      	mov	r5, r0
 800f17e:	b118      	cbz	r0, 800f188 <rcl_timer_is_ready+0x24>
 800f180:	4628      	mov	r0, r5
 800f182:	b002      	add	sp, #8
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	6820      	ldr	r0, [r4, #0]
 800f18a:	2105      	movs	r1, #5
 800f18c:	3028      	adds	r0, #40	; 0x28
 800f18e:	f000 ffa3 	bl	80100d8 <__atomic_load_8>
 800f192:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f196:	1ac6      	subs	r6, r0, r3
 800f198:	eb61 0702 	sbc.w	r7, r1, r2
 800f19c:	2e01      	cmp	r6, #1
 800f19e:	f177 0300 	sbcs.w	r3, r7, #0
 800f1a2:	db0b      	blt.n	800f1bc <rcl_timer_is_ready+0x58>
 800f1a4:	462b      	mov	r3, r5
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f888 3000 	strb.w	r3, [r8]
 800f1ac:	b002      	add	sp, #8
 800f1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b2:	250b      	movs	r5, #11
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	b002      	add	sp, #8
 800f1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1bc:	6823      	ldr	r3, [r4, #0]
 800f1be:	f3bf 8f5b 	dmb	ish
 800f1c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f1c6:	f3bf 8f5b 	dmb	ish
 800f1ca:	fab3 f383 	clz	r3, r3
 800f1ce:	095b      	lsrs	r3, r3, #5
 800f1d0:	e7e9      	b.n	800f1a6 <rcl_timer_is_ready+0x42>
 800f1d2:	bf00      	nop

0800f1d4 <rcl_timer_get_time_until_next_call>:
 800f1d4:	b570      	push	{r4, r5, r6, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	b1d8      	cbz	r0, 800f212 <rcl_timer_get_time_until_next_call+0x3e>
 800f1da:	460d      	mov	r5, r1
 800f1dc:	b1c9      	cbz	r1, 800f212 <rcl_timer_get_time_until_next_call+0x3e>
 800f1de:	6803      	ldr	r3, [r0, #0]
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	4669      	mov	r1, sp
 800f1e4:	6818      	ldr	r0, [r3, #0]
 800f1e6:	f7ff ff1d 	bl	800f024 <rcl_clock_get_now>
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	b110      	cbz	r0, 800f1f4 <rcl_timer_get_time_until_next_call+0x20>
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	b002      	add	sp, #8
 800f1f2:	bd70      	pop	{r4, r5, r6, pc}
 800f1f4:	6820      	ldr	r0, [r4, #0]
 800f1f6:	2105      	movs	r1, #5
 800f1f8:	3028      	adds	r0, #40	; 0x28
 800f1fa:	f000 ff6d 	bl	80100d8 <__atomic_load_8>
 800f1fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f202:	1ac0      	subs	r0, r0, r3
 800f204:	eb61 0102 	sbc.w	r1, r1, r2
 800f208:	e9c5 0100 	strd	r0, r1, [r5]
 800f20c:	4630      	mov	r0, r6
 800f20e:	b002      	add	sp, #8
 800f210:	bd70      	pop	{r4, r5, r6, pc}
 800f212:	260b      	movs	r6, #11
 800f214:	4630      	mov	r0, r6
 800f216:	b002      	add	sp, #8
 800f218:	bd70      	pop	{r4, r5, r6, pc}
 800f21a:	bf00      	nop

0800f21c <rcl_timer_is_canceled>:
 800f21c:	b168      	cbz	r0, 800f23a <rcl_timer_is_canceled+0x1e>
 800f21e:	b161      	cbz	r1, 800f23a <rcl_timer_is_canceled+0x1e>
 800f220:	6803      	ldr	r3, [r0, #0]
 800f222:	f3bf 8f5b 	dmb	ish
 800f226:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f22a:	f3bf 8f5b 	dmb	ish
 800f22e:	3b00      	subs	r3, #0
 800f230:	bf18      	it	ne
 800f232:	2301      	movne	r3, #1
 800f234:	700b      	strb	r3, [r1, #0]
 800f236:	2000      	movs	r0, #0
 800f238:	4770      	bx	lr
 800f23a:	200b      	movs	r0, #11
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop

0800f240 <rcl_timer_get_guard_condition>:
 800f240:	b130      	cbz	r0, 800f250 <rcl_timer_get_guard_condition+0x10>
 800f242:	6800      	ldr	r0, [r0, #0]
 800f244:	b120      	cbz	r0, 800f250 <rcl_timer_get_guard_condition+0x10>
 800f246:	68c3      	ldr	r3, [r0, #12]
 800f248:	b10b      	cbz	r3, 800f24e <rcl_timer_get_guard_condition+0xe>
 800f24a:	3008      	adds	r0, #8
 800f24c:	4770      	bx	lr
 800f24e:	4618      	mov	r0, r3
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop

0800f254 <rcl_validate_enclave_name_with_size>:
 800f254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f256:	b0c3      	sub	sp, #268	; 0x10c
 800f258:	b1d0      	cbz	r0, 800f290 <rcl_validate_enclave_name_with_size+0x3c>
 800f25a:	4615      	mov	r5, r2
 800f25c:	b1c2      	cbz	r2, 800f290 <rcl_validate_enclave_name_with_size+0x3c>
 800f25e:	461f      	mov	r7, r3
 800f260:	466a      	mov	r2, sp
 800f262:	ab01      	add	r3, sp, #4
 800f264:	460e      	mov	r6, r1
 800f266:	f001 f97f 	bl	8010568 <rmw_validate_namespace_with_size>
 800f26a:	4604      	mov	r4, r0
 800f26c:	b9e0      	cbnz	r0, 800f2a8 <rcl_validate_enclave_name_with_size+0x54>
 800f26e:	9b00      	ldr	r3, [sp, #0]
 800f270:	b923      	cbnz	r3, 800f27c <rcl_validate_enclave_name_with_size+0x28>
 800f272:	2300      	movs	r3, #0
 800f274:	602b      	str	r3, [r5, #0]
 800f276:	4620      	mov	r0, r4
 800f278:	b043      	add	sp, #268	; 0x10c
 800f27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f27c:	2b07      	cmp	r3, #7
 800f27e:	d00b      	beq.n	800f298 <rcl_validate_enclave_name_with_size+0x44>
 800f280:	1e5a      	subs	r2, r3, #1
 800f282:	2a05      	cmp	r2, #5
 800f284:	d82e      	bhi.n	800f2e4 <rcl_validate_enclave_name_with_size+0x90>
 800f286:	e8df f002 	tbb	[pc, r2]
 800f28a:	211e      	.short	0x211e
 800f28c:	152a2724 	.word	0x152a2724
 800f290:	240b      	movs	r4, #11
 800f292:	4620      	mov	r0, r4
 800f294:	b043      	add	sp, #268	; 0x10c
 800f296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f298:	2eff      	cmp	r6, #255	; 0xff
 800f29a:	d9ea      	bls.n	800f272 <rcl_validate_enclave_name_with_size+0x1e>
 800f29c:	602b      	str	r3, [r5, #0]
 800f29e:	2f00      	cmp	r7, #0
 800f2a0:	d0e9      	beq.n	800f276 <rcl_validate_enclave_name_with_size+0x22>
 800f2a2:	23fe      	movs	r3, #254	; 0xfe
 800f2a4:	603b      	str	r3, [r7, #0]
 800f2a6:	e7e6      	b.n	800f276 <rcl_validate_enclave_name_with_size+0x22>
 800f2a8:	f003 fcc0 	bl	8012c2c <rcl_convert_rmw_ret_to_rcl_ret>
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	b043      	add	sp, #268	; 0x10c
 800f2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2b4:	2306      	movs	r3, #6
 800f2b6:	602b      	str	r3, [r5, #0]
 800f2b8:	2f00      	cmp	r7, #0
 800f2ba:	d0dc      	beq.n	800f276 <rcl_validate_enclave_name_with_size+0x22>
 800f2bc:	9b01      	ldr	r3, [sp, #4]
 800f2be:	603b      	str	r3, [r7, #0]
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	b043      	add	sp, #268	; 0x10c
 800f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	602b      	str	r3, [r5, #0]
 800f2ca:	e7f5      	b.n	800f2b8 <rcl_validate_enclave_name_with_size+0x64>
 800f2cc:	2302      	movs	r3, #2
 800f2ce:	602b      	str	r3, [r5, #0]
 800f2d0:	e7f2      	b.n	800f2b8 <rcl_validate_enclave_name_with_size+0x64>
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	602b      	str	r3, [r5, #0]
 800f2d6:	e7ef      	b.n	800f2b8 <rcl_validate_enclave_name_with_size+0x64>
 800f2d8:	2304      	movs	r3, #4
 800f2da:	602b      	str	r3, [r5, #0]
 800f2dc:	e7ec      	b.n	800f2b8 <rcl_validate_enclave_name_with_size+0x64>
 800f2de:	2305      	movs	r3, #5
 800f2e0:	602b      	str	r3, [r5, #0]
 800f2e2:	e7e9      	b.n	800f2b8 <rcl_validate_enclave_name_with_size+0x64>
 800f2e4:	4a03      	ldr	r2, [pc, #12]	; (800f2f4 <rcl_validate_enclave_name_with_size+0xa0>)
 800f2e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f2ea:	a802      	add	r0, sp, #8
 800f2ec:	f001 f8a4 	bl	8010438 <rcutils_snprintf>
 800f2f0:	2401      	movs	r4, #1
 800f2f2:	e7c0      	b.n	800f276 <rcl_validate_enclave_name_with_size+0x22>
 800f2f4:	08014c88 	.word	0x08014c88

0800f2f8 <rcl_validate_enclave_name>:
 800f2f8:	b168      	cbz	r0, 800f316 <rcl_validate_enclave_name+0x1e>
 800f2fa:	b570      	push	{r4, r5, r6, lr}
 800f2fc:	460d      	mov	r5, r1
 800f2fe:	4616      	mov	r6, r2
 800f300:	4604      	mov	r4, r0
 800f302:	f7f0 ff8f 	bl	8000224 <strlen>
 800f306:	4633      	mov	r3, r6
 800f308:	4601      	mov	r1, r0
 800f30a:	462a      	mov	r2, r5
 800f30c:	4620      	mov	r0, r4
 800f30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f312:	f7ff bf9f 	b.w	800f254 <rcl_validate_enclave_name_with_size>
 800f316:	200b      	movs	r0, #11
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop

0800f31c <rcl_validate_topic_name>:
 800f31c:	2800      	cmp	r0, #0
 800f31e:	f000 808b 	beq.w	800f438 <rcl_validate_topic_name+0x11c>
 800f322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f326:	460e      	mov	r6, r1
 800f328:	2900      	cmp	r1, #0
 800f32a:	f000 808c 	beq.w	800f446 <rcl_validate_topic_name+0x12a>
 800f32e:	4617      	mov	r7, r2
 800f330:	4605      	mov	r5, r0
 800f332:	f7f0 ff77 	bl	8000224 <strlen>
 800f336:	b1b0      	cbz	r0, 800f366 <rcl_validate_topic_name+0x4a>
 800f338:	f895 9000 	ldrb.w	r9, [r5]
 800f33c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800f4ec <rcl_validate_topic_name+0x1d0>
 800f340:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800f344:	f013 0304 	ands.w	r3, r3, #4
 800f348:	d178      	bne.n	800f43c <rcl_validate_topic_name+0x120>
 800f34a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800f34e:	f815 2008 	ldrb.w	r2, [r5, r8]
 800f352:	2a2f      	cmp	r2, #47	; 0x2f
 800f354:	d10e      	bne.n	800f374 <rcl_validate_topic_name+0x58>
 800f356:	2202      	movs	r2, #2
 800f358:	6032      	str	r2, [r6, #0]
 800f35a:	b36f      	cbz	r7, 800f3b8 <rcl_validate_topic_name+0x9c>
 800f35c:	f8c7 8000 	str.w	r8, [r7]
 800f360:	4618      	mov	r0, r3
 800f362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f366:	2301      	movs	r3, #1
 800f368:	6033      	str	r3, [r6, #0]
 800f36a:	b32f      	cbz	r7, 800f3b8 <rcl_validate_topic_name+0x9c>
 800f36c:	2000      	movs	r0, #0
 800f36e:	6038      	str	r0, [r7, #0]
 800f370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f374:	461c      	mov	r4, r3
 800f376:	4619      	mov	r1, r3
 800f378:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800f37c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800f380:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f384:	f1be 0f09 	cmp.w	lr, #9
 800f388:	d946      	bls.n	800f418 <rcl_validate_topic_name+0xfc>
 800f38a:	f022 0e20 	bic.w	lr, r2, #32
 800f38e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800f392:	f1be 0f19 	cmp.w	lr, #25
 800f396:	d93f      	bls.n	800f418 <rcl_validate_topic_name+0xfc>
 800f398:	2a5f      	cmp	r2, #95	; 0x5f
 800f39a:	d014      	beq.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f39c:	2a2f      	cmp	r2, #47	; 0x2f
 800f39e:	d05b      	beq.n	800f458 <rcl_validate_topic_name+0x13c>
 800f3a0:	2a7e      	cmp	r2, #126	; 0x7e
 800f3a2:	d052      	beq.n	800f44a <rcl_validate_topic_name+0x12e>
 800f3a4:	2a7b      	cmp	r2, #123	; 0x7b
 800f3a6:	d00a      	beq.n	800f3be <rcl_validate_topic_name+0xa2>
 800f3a8:	2a7d      	cmp	r2, #125	; 0x7d
 800f3aa:	d16f      	bne.n	800f48c <rcl_validate_topic_name+0x170>
 800f3ac:	2c00      	cmp	r4, #0
 800f3ae:	d15e      	bne.n	800f46e <rcl_validate_topic_name+0x152>
 800f3b0:	2305      	movs	r3, #5
 800f3b2:	6033      	str	r3, [r6, #0]
 800f3b4:	b107      	cbz	r7, 800f3b8 <rcl_validate_topic_name+0x9c>
 800f3b6:	6039      	str	r1, [r7, #0]
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3be:	2c00      	cmp	r4, #0
 800f3c0:	d14c      	bne.n	800f45c <rcl_validate_topic_name+0x140>
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	2401      	movs	r4, #1
 800f3c6:	3101      	adds	r1, #1
 800f3c8:	4288      	cmp	r0, r1
 800f3ca:	d1d7      	bne.n	800f37c <rcl_validate_topic_name+0x60>
 800f3cc:	2c00      	cmp	r4, #0
 800f3ce:	d156      	bne.n	800f47e <rcl_validate_topic_name+0x162>
 800f3d0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	d061      	beq.n	800f49c <rcl_validate_topic_name+0x180>
 800f3d8:	f108 0e01 	add.w	lr, r8, #1
 800f3dc:	e007      	b.n	800f3ee <rcl_validate_topic_name+0xd2>
 800f3de:	2801      	cmp	r0, #1
 800f3e0:	d047      	beq.n	800f472 <rcl_validate_topic_name+0x156>
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	4291      	cmp	r1, r2
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f105 0501 	add.w	r5, r5, #1
 800f3ec:	d944      	bls.n	800f478 <rcl_validate_topic_name+0x15c>
 800f3ee:	4580      	cmp	r8, r0
 800f3f0:	f100 0301 	add.w	r3, r0, #1
 800f3f4:	d037      	beq.n	800f466 <rcl_validate_topic_name+0x14a>
 800f3f6:	782a      	ldrb	r2, [r5, #0]
 800f3f8:	2a2f      	cmp	r2, #47	; 0x2f
 800f3fa:	d1f0      	bne.n	800f3de <rcl_validate_topic_name+0xc2>
 800f3fc:	786b      	ldrb	r3, [r5, #1]
 800f3fe:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	0760      	lsls	r0, r4, #29
 800f406:	461a      	mov	r2, r3
 800f408:	d5ec      	bpl.n	800f3e4 <rcl_validate_topic_name+0xc8>
 800f40a:	2304      	movs	r3, #4
 800f40c:	6033      	str	r3, [r6, #0]
 800f40e:	2f00      	cmp	r7, #0
 800f410:	d0d2      	beq.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f412:	603a      	str	r2, [r7, #0]
 800f414:	2000      	movs	r0, #0
 800f416:	e7ab      	b.n	800f370 <rcl_validate_topic_name+0x54>
 800f418:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800f41c:	0752      	lsls	r2, r2, #29
 800f41e:	d5d2      	bpl.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f420:	2c00      	cmp	r4, #0
 800f422:	d0d0      	beq.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f424:	2900      	cmp	r1, #0
 800f426:	d0ce      	beq.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f428:	1e4a      	subs	r2, r1, #1
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d1cb      	bne.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f42e:	2309      	movs	r3, #9
 800f430:	6033      	str	r3, [r6, #0]
 800f432:	2f00      	cmp	r7, #0
 800f434:	d1bf      	bne.n	800f3b6 <rcl_validate_topic_name+0x9a>
 800f436:	e7bf      	b.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f438:	200b      	movs	r0, #11
 800f43a:	4770      	bx	lr
 800f43c:	2304      	movs	r3, #4
 800f43e:	6033      	str	r3, [r6, #0]
 800f440:	2f00      	cmp	r7, #0
 800f442:	d193      	bne.n	800f36c <rcl_validate_topic_name+0x50>
 800f444:	e7b8      	b.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f446:	200b      	movs	r0, #11
 800f448:	e792      	b.n	800f370 <rcl_validate_topic_name+0x54>
 800f44a:	2900      	cmp	r1, #0
 800f44c:	d0bb      	beq.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f44e:	2306      	movs	r3, #6
 800f450:	6033      	str	r3, [r6, #0]
 800f452:	2f00      	cmp	r7, #0
 800f454:	d1af      	bne.n	800f3b6 <rcl_validate_topic_name+0x9a>
 800f456:	e7af      	b.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f458:	2c00      	cmp	r4, #0
 800f45a:	d0b4      	beq.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f45c:	2308      	movs	r3, #8
 800f45e:	6033      	str	r3, [r6, #0]
 800f460:	2f00      	cmp	r7, #0
 800f462:	d1a8      	bne.n	800f3b6 <rcl_validate_topic_name+0x9a>
 800f464:	e7a8      	b.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f466:	4672      	mov	r2, lr
 800f468:	f108 0301 	add.w	r3, r8, #1
 800f46c:	e7ba      	b.n	800f3e4 <rcl_validate_topic_name+0xc8>
 800f46e:	2400      	movs	r4, #0
 800f470:	e7a9      	b.n	800f3c6 <rcl_validate_topic_name+0xaa>
 800f472:	2202      	movs	r2, #2
 800f474:	4613      	mov	r3, r2
 800f476:	e7b5      	b.n	800f3e4 <rcl_validate_topic_name+0xc8>
 800f478:	2000      	movs	r0, #0
 800f47a:	6030      	str	r0, [r6, #0]
 800f47c:	e778      	b.n	800f370 <rcl_validate_topic_name+0x54>
 800f47e:	2205      	movs	r2, #5
 800f480:	6032      	str	r2, [r6, #0]
 800f482:	2f00      	cmp	r7, #0
 800f484:	d098      	beq.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	2000      	movs	r0, #0
 800f48a:	e771      	b.n	800f370 <rcl_validate_topic_name+0x54>
 800f48c:	2c00      	cmp	r4, #0
 800f48e:	bf14      	ite	ne
 800f490:	2308      	movne	r3, #8
 800f492:	2303      	moveq	r3, #3
 800f494:	6033      	str	r3, [r6, #0]
 800f496:	2f00      	cmp	r7, #0
 800f498:	d18d      	bne.n	800f3b6 <rcl_validate_topic_name+0x9a>
 800f49a:	e78d      	b.n	800f3b8 <rcl_validate_topic_name+0x9c>
 800f49c:	f108 0401 	add.w	r4, r8, #1
 800f4a0:	e007      	b.n	800f4b2 <rcl_validate_topic_name+0x196>
 800f4a2:	2801      	cmp	r0, #1
 800f4a4:	d019      	beq.n	800f4da <rcl_validate_topic_name+0x1be>
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	4291      	cmp	r1, r2
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f105 0501 	add.w	r5, r5, #1
 800f4b0:	d9e2      	bls.n	800f478 <rcl_validate_topic_name+0x15c>
 800f4b2:	4580      	cmp	r8, r0
 800f4b4:	f100 0301 	add.w	r3, r0, #1
 800f4b8:	d00b      	beq.n	800f4d2 <rcl_validate_topic_name+0x1b6>
 800f4ba:	782a      	ldrb	r2, [r5, #0]
 800f4bc:	2a2f      	cmp	r2, #47	; 0x2f
 800f4be:	d1f0      	bne.n	800f4a2 <rcl_validate_topic_name+0x186>
 800f4c0:	786b      	ldrb	r3, [r5, #1]
 800f4c2:	f81c e003 	ldrb.w	lr, [ip, r3]
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	f01e 0f04 	tst.w	lr, #4
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	d0eb      	beq.n	800f4a8 <rcl_validate_topic_name+0x18c>
 800f4d0:	e79b      	b.n	800f40a <rcl_validate_topic_name+0xee>
 800f4d2:	4622      	mov	r2, r4
 800f4d4:	f108 0301 	add.w	r3, r8, #1
 800f4d8:	e7e6      	b.n	800f4a8 <rcl_validate_topic_name+0x18c>
 800f4da:	2307      	movs	r3, #7
 800f4dc:	6033      	str	r3, [r6, #0]
 800f4de:	2f00      	cmp	r7, #0
 800f4e0:	f43f af6a 	beq.w	800f3b8 <rcl_validate_topic_name+0x9c>
 800f4e4:	6038      	str	r0, [r7, #0]
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	e742      	b.n	800f370 <rcl_validate_topic_name+0x54>
 800f4ea:	bf00      	nop
 800f4ec:	080152a1 	.word	0x080152a1

0800f4f0 <rcl_get_zero_initialized_wait_set>:
 800f4f0:	b470      	push	{r4, r5, r6}
 800f4f2:	4d07      	ldr	r5, [pc, #28]	; (800f510 <rcl_get_zero_initialized_wait_set+0x20>)
 800f4f4:	4606      	mov	r6, r0
 800f4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4f8:	4634      	mov	r4, r6
 800f4fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	6023      	str	r3, [r4, #0]
 800f508:	4630      	mov	r0, r6
 800f50a:	bc70      	pop	{r4, r5, r6}
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	08014ce8 	.word	0x08014ce8

0800f514 <rcl_wait_set_is_valid>:
 800f514:	b118      	cbz	r0, 800f51e <rcl_wait_set_is_valid+0xa>
 800f516:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f518:	3800      	subs	r0, #0
 800f51a:	bf18      	it	ne
 800f51c:	2001      	movne	r0, #1
 800f51e:	4770      	bx	lr

0800f520 <rcl_wait_set_fini>:
 800f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	b082      	sub	sp, #8
 800f526:	2800      	cmp	r0, #0
 800f528:	f000 8095 	beq.w	800f656 <rcl_wait_set_fini+0x136>
 800f52c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800f52e:	4604      	mov	r4, r0
 800f530:	2e00      	cmp	r6, #0
 800f532:	f000 808c 	beq.w	800f64e <rcl_wait_set_fini+0x12e>
 800f536:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800f538:	f001 ff4a 	bl	80113d0 <rmw_destroy_wait_set>
 800f53c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f53e:	1e06      	subs	r6, r0, #0
 800f540:	bf18      	it	ne
 800f542:	f44f 7661 	movne.w	r6, #900	; 0x384
 800f546:	2d00      	cmp	r5, #0
 800f548:	f000 8081 	beq.w	800f64e <rcl_wait_set_fini+0x12e>
 800f54c:	6820      	ldr	r0, [r4, #0]
 800f54e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f552:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f554:	2700      	movs	r7, #0
 800f556:	6067      	str	r7, [r4, #4]
 800f558:	602f      	str	r7, [r5, #0]
 800f55a:	b120      	cbz	r0, 800f566 <rcl_wait_set_fini+0x46>
 800f55c:	9101      	str	r1, [sp, #4]
 800f55e:	47c0      	blx	r8
 800f560:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f562:	9901      	ldr	r1, [sp, #4]
 800f564:	6027      	str	r7, [r4, #0]
 800f566:	68a8      	ldr	r0, [r5, #8]
 800f568:	b120      	cbz	r0, 800f574 <rcl_wait_set_fini+0x54>
 800f56a:	47c0      	blx	r8
 800f56c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f56e:	2300      	movs	r3, #0
 800f570:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f574:	68a0      	ldr	r0, [r4, #8]
 800f576:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f578:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f57a:	f04f 0800 	mov.w	r8, #0
 800f57e:	f8c4 800c 	str.w	r8, [r4, #12]
 800f582:	f8c5 800c 	str.w	r8, [r5, #12]
 800f586:	b128      	cbz	r0, 800f594 <rcl_wait_set_fini+0x74>
 800f588:	47b8      	blx	r7
 800f58a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f58c:	f8c4 8008 	str.w	r8, [r4, #8]
 800f590:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f592:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f594:	6968      	ldr	r0, [r5, #20]
 800f596:	f04f 0800 	mov.w	r8, #0
 800f59a:	f8c5 8010 	str.w	r8, [r5, #16]
 800f59e:	b128      	cbz	r0, 800f5ac <rcl_wait_set_fini+0x8c>
 800f5a0:	47b8      	blx	r7
 800f5a2:	f8c5 8014 	str.w	r8, [r5, #20]
 800f5a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5a8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f5aa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f5ac:	6920      	ldr	r0, [r4, #16]
 800f5ae:	f04f 0800 	mov.w	r8, #0
 800f5b2:	f8c4 8014 	str.w	r8, [r4, #20]
 800f5b6:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800f5ba:	b128      	cbz	r0, 800f5c8 <rcl_wait_set_fini+0xa8>
 800f5bc:	47b8      	blx	r7
 800f5be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5c0:	f8c4 8010 	str.w	r8, [r4, #16]
 800f5c4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f5c6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f5c8:	69a0      	ldr	r0, [r4, #24]
 800f5ca:	f04f 0800 	mov.w	r8, #0
 800f5ce:	f8c4 801c 	str.w	r8, [r4, #28]
 800f5d2:	f8c5 8018 	str.w	r8, [r5, #24]
 800f5d6:	b128      	cbz	r0, 800f5e4 <rcl_wait_set_fini+0xc4>
 800f5d8:	9101      	str	r1, [sp, #4]
 800f5da:	47b8      	blx	r7
 800f5dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5de:	9901      	ldr	r1, [sp, #4]
 800f5e0:	f8c4 8018 	str.w	r8, [r4, #24]
 800f5e4:	6a28      	ldr	r0, [r5, #32]
 800f5e6:	b120      	cbz	r0, 800f5f2 <rcl_wait_set_fini+0xd2>
 800f5e8:	47b8      	blx	r7
 800f5ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f5f2:	6a20      	ldr	r0, [r4, #32]
 800f5f4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f5f8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f5fa:	2700      	movs	r7, #0
 800f5fc:	6267      	str	r7, [r4, #36]	; 0x24
 800f5fe:	626f      	str	r7, [r5, #36]	; 0x24
 800f600:	b120      	cbz	r0, 800f60c <rcl_wait_set_fini+0xec>
 800f602:	9101      	str	r1, [sp, #4]
 800f604:	47c0      	blx	r8
 800f606:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f608:	9901      	ldr	r1, [sp, #4]
 800f60a:	6227      	str	r7, [r4, #32]
 800f60c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800f60e:	b120      	cbz	r0, 800f61a <rcl_wait_set_fini+0xfa>
 800f610:	47c0      	blx	r8
 800f612:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f614:	2300      	movs	r3, #0
 800f616:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f61a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f61c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f620:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f622:	2700      	movs	r7, #0
 800f624:	62e7      	str	r7, [r4, #44]	; 0x2c
 800f626:	632f      	str	r7, [r5, #48]	; 0x30
 800f628:	b120      	cbz	r0, 800f634 <rcl_wait_set_fini+0x114>
 800f62a:	9101      	str	r1, [sp, #4]
 800f62c:	47c0      	blx	r8
 800f62e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f630:	9901      	ldr	r1, [sp, #4]
 800f632:	62a7      	str	r7, [r4, #40]	; 0x28
 800f634:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800f636:	b120      	cbz	r0, 800f642 <rcl_wait_set_fini+0x122>
 800f638:	47c0      	blx	r8
 800f63a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f63c:	2300      	movs	r3, #0
 800f63e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f642:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f644:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f646:	4628      	mov	r0, r5
 800f648:	4798      	blx	r3
 800f64a:	2300      	movs	r3, #0
 800f64c:	6323      	str	r3, [r4, #48]	; 0x30
 800f64e:	4630      	mov	r0, r6
 800f650:	b002      	add	sp, #8
 800f652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f656:	260b      	movs	r6, #11
 800f658:	4630      	mov	r0, r6
 800f65a:	b002      	add	sp, #8
 800f65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f660 <rcl_wait_set_add_subscription>:
 800f660:	b320      	cbz	r0, 800f6ac <rcl_wait_set_add_subscription+0x4c>
 800f662:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f664:	b570      	push	{r4, r5, r6, lr}
 800f666:	4604      	mov	r4, r0
 800f668:	b1d3      	cbz	r3, 800f6a0 <rcl_wait_set_add_subscription+0x40>
 800f66a:	b319      	cbz	r1, 800f6b4 <rcl_wait_set_add_subscription+0x54>
 800f66c:	681d      	ldr	r5, [r3, #0]
 800f66e:	6860      	ldr	r0, [r4, #4]
 800f670:	4285      	cmp	r5, r0
 800f672:	d218      	bcs.n	800f6a6 <rcl_wait_set_add_subscription+0x46>
 800f674:	6820      	ldr	r0, [r4, #0]
 800f676:	1c6e      	adds	r6, r5, #1
 800f678:	601e      	str	r6, [r3, #0]
 800f67a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f67e:	b102      	cbz	r2, 800f682 <rcl_wait_set_add_subscription+0x22>
 800f680:	6015      	str	r5, [r2, #0]
 800f682:	4608      	mov	r0, r1
 800f684:	f7ff fc30 	bl	800eee8 <rcl_subscription_get_rmw_handle>
 800f688:	b190      	cbz	r0, 800f6b0 <rcl_wait_set_add_subscription+0x50>
 800f68a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f68c:	6842      	ldr	r2, [r0, #4]
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f694:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f696:	6853      	ldr	r3, [r2, #4]
 800f698:	3301      	adds	r3, #1
 800f69a:	6053      	str	r3, [r2, #4]
 800f69c:	2000      	movs	r0, #0
 800f69e:	bd70      	pop	{r4, r5, r6, pc}
 800f6a0:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
 800f6a6:	f240 3086 	movw	r0, #902	; 0x386
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	200b      	movs	r0, #11
 800f6ae:	4770      	bx	lr
 800f6b0:	2001      	movs	r0, #1
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	200b      	movs	r0, #11
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}

0800f6b8 <rcl_wait_set_clear>:
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d073      	beq.n	800f7a4 <rcl_wait_set_clear+0xec>
 800f6bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f6be:	b510      	push	{r4, lr}
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d070      	beq.n	800f7a8 <rcl_wait_set_clear+0xf0>
 800f6c6:	6800      	ldr	r0, [r0, #0]
 800f6c8:	b138      	cbz	r0, 800f6da <rcl_wait_set_clear+0x22>
 800f6ca:	6862      	ldr	r2, [r4, #4]
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	0092      	lsls	r2, r2, #2
 800f6d0:	f003 fd7c 	bl	80131cc <memset>
 800f6d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	68a0      	ldr	r0, [r4, #8]
 800f6dc:	b138      	cbz	r0, 800f6ee <rcl_wait_set_clear+0x36>
 800f6de:	68e2      	ldr	r2, [r4, #12]
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	0092      	lsls	r2, r2, #2
 800f6e4:	f003 fd72 	bl	80131cc <memset>
 800f6e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	60da      	str	r2, [r3, #12]
 800f6ee:	69a0      	ldr	r0, [r4, #24]
 800f6f0:	b138      	cbz	r0, 800f702 <rcl_wait_set_clear+0x4a>
 800f6f2:	69e2      	ldr	r2, [r4, #28]
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	0092      	lsls	r2, r2, #2
 800f6f8:	f003 fd68 	bl	80131cc <memset>
 800f6fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6fe:	2200      	movs	r2, #0
 800f700:	619a      	str	r2, [r3, #24]
 800f702:	6a20      	ldr	r0, [r4, #32]
 800f704:	b138      	cbz	r0, 800f716 <rcl_wait_set_clear+0x5e>
 800f706:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f708:	2100      	movs	r1, #0
 800f70a:	0092      	lsls	r2, r2, #2
 800f70c:	f003 fd5e 	bl	80131cc <memset>
 800f710:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f712:	2200      	movs	r2, #0
 800f714:	625a      	str	r2, [r3, #36]	; 0x24
 800f716:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f718:	b138      	cbz	r0, 800f72a <rcl_wait_set_clear+0x72>
 800f71a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f71c:	2100      	movs	r1, #0
 800f71e:	0092      	lsls	r2, r2, #2
 800f720:	f003 fd54 	bl	80131cc <memset>
 800f724:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f726:	2200      	movs	r2, #0
 800f728:	631a      	str	r2, [r3, #48]	; 0x30
 800f72a:	6920      	ldr	r0, [r4, #16]
 800f72c:	b138      	cbz	r0, 800f73e <rcl_wait_set_clear+0x86>
 800f72e:	6962      	ldr	r2, [r4, #20]
 800f730:	2100      	movs	r1, #0
 800f732:	0092      	lsls	r2, r2, #2
 800f734:	f003 fd4a 	bl	80131cc <memset>
 800f738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f73a:	2200      	movs	r2, #0
 800f73c:	641a      	str	r2, [r3, #64]	; 0x40
 800f73e:	6898      	ldr	r0, [r3, #8]
 800f740:	b138      	cbz	r0, 800f752 <rcl_wait_set_clear+0x9a>
 800f742:	685a      	ldr	r2, [r3, #4]
 800f744:	2100      	movs	r1, #0
 800f746:	0092      	lsls	r2, r2, #2
 800f748:	f003 fd40 	bl	80131cc <memset>
 800f74c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f74e:	2200      	movs	r2, #0
 800f750:	605a      	str	r2, [r3, #4]
 800f752:	6958      	ldr	r0, [r3, #20]
 800f754:	b138      	cbz	r0, 800f766 <rcl_wait_set_clear+0xae>
 800f756:	691a      	ldr	r2, [r3, #16]
 800f758:	2100      	movs	r1, #0
 800f75a:	0092      	lsls	r2, r2, #2
 800f75c:	f003 fd36 	bl	80131cc <memset>
 800f760:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f762:	2200      	movs	r2, #0
 800f764:	611a      	str	r2, [r3, #16]
 800f766:	6a18      	ldr	r0, [r3, #32]
 800f768:	b138      	cbz	r0, 800f77a <rcl_wait_set_clear+0xc2>
 800f76a:	69da      	ldr	r2, [r3, #28]
 800f76c:	2100      	movs	r1, #0
 800f76e:	0092      	lsls	r2, r2, #2
 800f770:	f003 fd2c 	bl	80131cc <memset>
 800f774:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f776:	2200      	movs	r2, #0
 800f778:	61da      	str	r2, [r3, #28]
 800f77a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f77c:	b138      	cbz	r0, 800f78e <rcl_wait_set_clear+0xd6>
 800f77e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f780:	2100      	movs	r1, #0
 800f782:	0092      	lsls	r2, r2, #2
 800f784:	f003 fd22 	bl	80131cc <memset>
 800f788:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f78a:	2200      	movs	r2, #0
 800f78c:	629a      	str	r2, [r3, #40]	; 0x28
 800f78e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f790:	b138      	cbz	r0, 800f7a2 <rcl_wait_set_clear+0xea>
 800f792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f794:	2100      	movs	r1, #0
 800f796:	0092      	lsls	r2, r2, #2
 800f798:	f003 fd18 	bl	80131cc <memset>
 800f79c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f79e:	2000      	movs	r0, #0
 800f7a0:	6358      	str	r0, [r3, #52]	; 0x34
 800f7a2:	bd10      	pop	{r4, pc}
 800f7a4:	200b      	movs	r0, #11
 800f7a6:	4770      	bx	lr
 800f7a8:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f7ac:	bd10      	pop	{r4, pc}
 800f7ae:	bf00      	nop

0800f7b0 <rcl_wait_set_resize>:
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	f000 81a6 	beq.w	800fb02 <rcl_wait_set_resize+0x352>
 800f7b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 800f7be:	b083      	sub	sp, #12
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	f1ba 0f00 	cmp.w	sl, #0
 800f7c6:	f000 819e 	beq.w	800fb06 <rcl_wait_set_resize+0x356>
 800f7ca:	461e      	mov	r6, r3
 800f7cc:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 800f7d0:	f04f 0800 	mov.w	r8, #0
 800f7d4:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	f8c0 8004 	str.w	r8, [r0, #4]
 800f7de:	460f      	mov	r7, r1
 800f7e0:	4615      	mov	r5, r2
 800f7e2:	f8ca 8000 	str.w	r8, [sl]
 800f7e6:	2900      	cmp	r1, #0
 800f7e8:	f000 80c9 	beq.w	800f97e <rcl_wait_set_resize+0x1ce>
 800f7ec:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800f7f0:	6800      	ldr	r0, [r0, #0]
 800f7f2:	4651      	mov	r1, sl
 800f7f4:	464a      	mov	r2, r9
 800f7f6:	4798      	blx	r3
 800f7f8:	6020      	str	r0, [r4, #0]
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f000 80d8 	beq.w	800f9b0 <rcl_wait_set_resize+0x200>
 800f800:	4652      	mov	r2, sl
 800f802:	4641      	mov	r1, r8
 800f804:	f003 fce2 	bl	80131cc <memset>
 800f808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f80a:	6067      	str	r7, [r4, #4]
 800f80c:	6898      	ldr	r0, [r3, #8]
 800f80e:	f8c3 8004 	str.w	r8, [r3, #4]
 800f812:	9301      	str	r3, [sp, #4]
 800f814:	464a      	mov	r2, r9
 800f816:	9b00      	ldr	r3, [sp, #0]
 800f818:	4651      	mov	r1, sl
 800f81a:	4798      	blx	r3
 800f81c:	9b01      	ldr	r3, [sp, #4]
 800f81e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f820:	6098      	str	r0, [r3, #8]
 800f822:	6897      	ldr	r7, [r2, #8]
 800f824:	2f00      	cmp	r7, #0
 800f826:	f000 80be 	beq.w	800f9a6 <rcl_wait_set_resize+0x1f6>
 800f82a:	4652      	mov	r2, sl
 800f82c:	4641      	mov	r1, r8
 800f82e:	4638      	mov	r0, r7
 800f830:	f003 fccc 	bl	80131cc <memset>
 800f834:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f838:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f83c:	2700      	movs	r7, #0
 800f83e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 800f842:	60e7      	str	r7, [r4, #12]
 800f844:	f8ca 700c 	str.w	r7, [sl, #12]
 800f848:	2d00      	cmp	r5, #0
 800f84a:	f040 80b5 	bne.w	800f9b8 <rcl_wait_set_resize+0x208>
 800f84e:	68a0      	ldr	r0, [r4, #8]
 800f850:	b130      	cbz	r0, 800f860 <rcl_wait_set_resize+0xb0>
 800f852:	4641      	mov	r1, r8
 800f854:	4790      	blx	r2
 800f856:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f85a:	60a5      	str	r5, [r4, #8]
 800f85c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f860:	2700      	movs	r7, #0
 800f862:	19ad      	adds	r5, r5, r6
 800f864:	f8ca 7010 	str.w	r7, [sl, #16]
 800f868:	f040 80be 	bne.w	800f9e8 <rcl_wait_set_resize+0x238>
 800f86c:	f8da 0014 	ldr.w	r0, [sl, #20]
 800f870:	b148      	cbz	r0, 800f886 <rcl_wait_set_resize+0xd6>
 800f872:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800f876:	4641      	mov	r1, r8
 800f878:	4798      	blx	r3
 800f87a:	f8ca 5014 	str.w	r5, [sl, #20]
 800f87e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f882:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f886:	2500      	movs	r5, #0
 800f888:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800f88c:	6165      	str	r5, [r4, #20]
 800f88e:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 800f892:	2e00      	cmp	r6, #0
 800f894:	f040 80bf 	bne.w	800fa16 <rcl_wait_set_resize+0x266>
 800f898:	6920      	ldr	r0, [r4, #16]
 800f89a:	b140      	cbz	r0, 800f8ae <rcl_wait_set_resize+0xfe>
 800f89c:	4641      	mov	r1, r8
 800f89e:	47c8      	blx	r9
 800f8a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f8a4:	6126      	str	r6, [r4, #16]
 800f8a6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800f8aa:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8b0:	2500      	movs	r5, #0
 800f8b2:	61e5      	str	r5, [r4, #28]
 800f8b4:	f8ca 5018 	str.w	r5, [sl, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f040 80c1 	bne.w	800fa40 <rcl_wait_set_resize+0x290>
 800f8be:	69a0      	ldr	r0, [r4, #24]
 800f8c0:	b128      	cbz	r0, 800f8ce <rcl_wait_set_resize+0x11e>
 800f8c2:	4641      	mov	r1, r8
 800f8c4:	47c8      	blx	r9
 800f8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8c8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f8cc:	61a3      	str	r3, [r4, #24]
 800f8ce:	f8da 0020 	ldr.w	r0, [sl, #32]
 800f8d2:	b130      	cbz	r0, 800f8e2 <rcl_wait_set_resize+0x132>
 800f8d4:	4641      	mov	r1, r8
 800f8d6:	47c8      	blx	r9
 800f8d8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f8dc:	2300      	movs	r3, #0
 800f8de:	e9ca 3307 	strd	r3, r3, [sl, #28]
 800f8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8e4:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 800f8e8:	2600      	movs	r6, #0
 800f8ea:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 800f8ee:	6266      	str	r6, [r4, #36]	; 0x24
 800f8f0:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 80c8 	beq.w	800fa8a <rcl_wait_set_resize+0x2da>
 800f8fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800f8fe:	6a20      	ldr	r0, [r4, #32]
 800f900:	4651      	mov	r1, sl
 800f902:	463a      	mov	r2, r7
 800f904:	47c8      	blx	r9
 800f906:	6220      	str	r0, [r4, #32]
 800f908:	2800      	cmp	r0, #0
 800f90a:	d051      	beq.n	800f9b0 <rcl_wait_set_resize+0x200>
 800f90c:	4652      	mov	r2, sl
 800f90e:	4631      	mov	r1, r6
 800f910:	f003 fc5c 	bl	80131cc <memset>
 800f914:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f918:	6263      	str	r3, [r4, #36]	; 0x24
 800f91a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800f91c:	62ae      	str	r6, [r5, #40]	; 0x28
 800f91e:	463a      	mov	r2, r7
 800f920:	4651      	mov	r1, sl
 800f922:	47c8      	blx	r9
 800f924:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f926:	62e8      	str	r0, [r5, #44]	; 0x2c
 800f928:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800f92a:	2d00      	cmp	r5, #0
 800f92c:	f000 8105 	beq.w	800fb3a <rcl_wait_set_resize+0x38a>
 800f930:	4652      	mov	r2, sl
 800f932:	4631      	mov	r1, r6
 800f934:	4628      	mov	r0, r5
 800f936:	f003 fc49 	bl	80131cc <memset>
 800f93a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f93e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f940:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 800f944:	2500      	movs	r5, #0
 800f946:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 800f94a:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f94c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 800f950:	2b00      	cmp	r3, #0
 800f952:	f040 80af 	bne.w	800fab4 <rcl_wait_set_resize+0x304>
 800f956:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f958:	b128      	cbz	r0, 800f966 <rcl_wait_set_resize+0x1b6>
 800f95a:	4631      	mov	r1, r6
 800f95c:	47b8      	blx	r7
 800f95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f960:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f964:	62a3      	str	r3, [r4, #40]	; 0x28
 800f966:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800f96a:	b310      	cbz	r0, 800f9b2 <rcl_wait_set_resize+0x202>
 800f96c:	4631      	mov	r1, r6
 800f96e:	47b8      	blx	r7
 800f970:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f972:	2000      	movs	r0, #0
 800f974:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 800f978:	b003      	add	sp, #12
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97e:	6800      	ldr	r0, [r0, #0]
 800f980:	b120      	cbz	r0, 800f98c <rcl_wait_set_resize+0x1dc>
 800f982:	4649      	mov	r1, r9
 800f984:	47d8      	blx	fp
 800f986:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f98a:	6027      	str	r7, [r4, #0]
 800f98c:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f990:	2800      	cmp	r0, #0
 800f992:	f43f af51 	beq.w	800f838 <rcl_wait_set_resize+0x88>
 800f996:	4649      	mov	r1, r9
 800f998:	47d8      	blx	fp
 800f99a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f99e:	2300      	movs	r3, #0
 800f9a0:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800f9a4:	e748      	b.n	800f838 <rcl_wait_set_resize+0x88>
 800f9a6:	6820      	ldr	r0, [r4, #0]
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	47d8      	blx	fp
 800f9ac:	e9c4 7700 	strd	r7, r7, [r4]
 800f9b0:	200a      	movs	r0, #10
 800f9b2:	b003      	add	sp, #12
 800f9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b8:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800f9bc:	68a0      	ldr	r0, [r4, #8]
 800f9be:	4642      	mov	r2, r8
 800f9c0:	4649      	mov	r1, r9
 800f9c2:	4798      	blx	r3
 800f9c4:	60a0      	str	r0, [r4, #8]
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d0f2      	beq.n	800f9b0 <rcl_wait_set_resize+0x200>
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	464a      	mov	r2, r9
 800f9ce:	f003 fbfd 	bl	80131cc <memset>
 800f9d2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f9d6:	60e5      	str	r5, [r4, #12]
 800f9d8:	2700      	movs	r7, #0
 800f9da:	19ad      	adds	r5, r5, r6
 800f9dc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f9e0:	f8ca 7010 	str.w	r7, [sl, #16]
 800f9e4:	f43f af42 	beq.w	800f86c <rcl_wait_set_resize+0xbc>
 800f9e8:	00ad      	lsls	r5, r5, #2
 800f9ea:	4642      	mov	r2, r8
 800f9ec:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 800f9f0:	f8da 0014 	ldr.w	r0, [sl, #20]
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	4798      	blx	r3
 800f9f8:	4680      	mov	r8, r0
 800f9fa:	f8ca 0014 	str.w	r0, [sl, #20]
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f000 8084 	beq.w	800fb0c <rcl_wait_set_resize+0x35c>
 800fa04:	462a      	mov	r2, r5
 800fa06:	4639      	mov	r1, r7
 800fa08:	f003 fbe0 	bl	80131cc <memset>
 800fa0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa10:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800fa14:	e737      	b.n	800f886 <rcl_wait_set_resize+0xd6>
 800fa16:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800fa1a:	6920      	ldr	r0, [r4, #16]
 800fa1c:	4642      	mov	r2, r8
 800fa1e:	4649      	mov	r1, r9
 800fa20:	47b8      	blx	r7
 800fa22:	6120      	str	r0, [r4, #16]
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d0c3      	beq.n	800f9b0 <rcl_wait_set_resize+0x200>
 800fa28:	464a      	mov	r2, r9
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	f003 fbce 	bl	80131cc <memset>
 800fa30:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa34:	6166      	str	r6, [r4, #20]
 800fa36:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800fa3a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800fa3e:	e736      	b.n	800f8ae <rcl_wait_set_resize+0xfe>
 800fa40:	009e      	lsls	r6, r3, #2
 800fa42:	69a0      	ldr	r0, [r4, #24]
 800fa44:	4631      	mov	r1, r6
 800fa46:	4642      	mov	r2, r8
 800fa48:	47b8      	blx	r7
 800fa4a:	61a0      	str	r0, [r4, #24]
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d0af      	beq.n	800f9b0 <rcl_wait_set_resize+0x200>
 800fa50:	4632      	mov	r2, r6
 800fa52:	4629      	mov	r1, r5
 800fa54:	f003 fbba 	bl	80131cc <memset>
 800fa58:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa5e:	61e3      	str	r3, [r4, #28]
 800fa60:	f8da 0020 	ldr.w	r0, [sl, #32]
 800fa64:	f8ca 501c 	str.w	r5, [sl, #28]
 800fa68:	4642      	mov	r2, r8
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	47b8      	blx	r7
 800fa6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fa70:	f8ca 0020 	str.w	r0, [sl, #32]
 800fa74:	6a1f      	ldr	r7, [r3, #32]
 800fa76:	2f00      	cmp	r7, #0
 800fa78:	d058      	beq.n	800fb2c <rcl_wait_set_resize+0x37c>
 800fa7a:	4632      	mov	r2, r6
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	4638      	mov	r0, r7
 800fa80:	f003 fba4 	bl	80131cc <memset>
 800fa84:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa88:	e72b      	b.n	800f8e2 <rcl_wait_set_resize+0x132>
 800fa8a:	6a20      	ldr	r0, [r4, #32]
 800fa8c:	b128      	cbz	r0, 800fa9a <rcl_wait_set_resize+0x2ea>
 800fa8e:	4639      	mov	r1, r7
 800fa90:	47c0      	blx	r8
 800fa92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa94:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa98:	6223      	str	r3, [r4, #32]
 800fa9a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	f43f af4d 	beq.w	800f93e <rcl_wait_set_resize+0x18e>
 800faa4:	4639      	mov	r1, r7
 800faa6:	47c0      	blx	r8
 800faa8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800faac:	2300      	movs	r3, #0
 800faae:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 800fab2:	e744      	b.n	800f93e <rcl_wait_set_resize+0x18e>
 800fab4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800fab8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800faba:	4641      	mov	r1, r8
 800fabc:	4632      	mov	r2, r6
 800fabe:	47c8      	blx	r9
 800fac0:	62a0      	str	r0, [r4, #40]	; 0x28
 800fac2:	2800      	cmp	r0, #0
 800fac4:	f43f af74 	beq.w	800f9b0 <rcl_wait_set_resize+0x200>
 800fac8:	4642      	mov	r2, r8
 800faca:	4629      	mov	r1, r5
 800facc:	f003 fb7e 	bl	80131cc <memset>
 800fad0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fad6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fad8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800fadc:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800fae0:	4632      	mov	r2, r6
 800fae2:	4641      	mov	r1, r8
 800fae4:	47c8      	blx	r9
 800fae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fae8:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800faec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faee:	b35b      	cbz	r3, 800fb48 <rcl_wait_set_resize+0x398>
 800faf0:	4642      	mov	r2, r8
 800faf2:	4618      	mov	r0, r3
 800faf4:	4629      	mov	r1, r5
 800faf6:	f003 fb69 	bl	80131cc <memset>
 800fafa:	4628      	mov	r0, r5
 800fafc:	b003      	add	sp, #12
 800fafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb02:	200b      	movs	r0, #11
 800fb04:	4770      	bx	lr
 800fb06:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fb0a:	e752      	b.n	800f9b2 <rcl_wait_set_resize+0x202>
 800fb0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fb0e:	68a0      	ldr	r0, [r4, #8]
 800fb10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb12:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fb14:	4790      	blx	r2
 800fb16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fb18:	6920      	ldr	r0, [r4, #16]
 800fb1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb1c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fb1e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800fb22:	4790      	blx	r2
 800fb24:	e9c4 8804 	strd	r8, r8, [r4, #16]
 800fb28:	200a      	movs	r0, #10
 800fb2a:	e742      	b.n	800f9b2 <rcl_wait_set_resize+0x202>
 800fb2c:	69a0      	ldr	r0, [r4, #24]
 800fb2e:	4641      	mov	r1, r8
 800fb30:	47c8      	blx	r9
 800fb32:	e9c4 7706 	strd	r7, r7, [r4, #24]
 800fb36:	200a      	movs	r0, #10
 800fb38:	e73b      	b.n	800f9b2 <rcl_wait_set_resize+0x202>
 800fb3a:	6a20      	ldr	r0, [r4, #32]
 800fb3c:	4639      	mov	r1, r7
 800fb3e:	47c0      	blx	r8
 800fb40:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800fb44:	200a      	movs	r0, #10
 800fb46:	e734      	b.n	800f9b2 <rcl_wait_set_resize+0x202>
 800fb48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	47b8      	blx	r7
 800fb50:	9b00      	ldr	r3, [sp, #0]
 800fb52:	200a      	movs	r0, #10
 800fb54:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fb58:	e72b      	b.n	800f9b2 <rcl_wait_set_resize+0x202>
 800fb5a:	bf00      	nop

0800fb5c <rcl_wait_set_init>:
 800fb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb60:	b084      	sub	sp, #16
 800fb62:	4604      	mov	r4, r0
 800fb64:	a810      	add	r0, sp, #64	; 0x40
 800fb66:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800fb6a:	460f      	mov	r7, r1
 800fb6c:	4690      	mov	r8, r2
 800fb6e:	4699      	mov	r9, r3
 800fb70:	f7fa ff28 	bl	800a9c4 <rcutils_allocator_is_valid>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d06b      	beq.n	800fc50 <rcl_wait_set_init+0xf4>
 800fb78:	2c00      	cmp	r4, #0
 800fb7a:	d069      	beq.n	800fc50 <rcl_wait_set_init+0xf4>
 800fb7c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fb7e:	b125      	cbz	r5, 800fb8a <rcl_wait_set_init+0x2e>
 800fb80:	2564      	movs	r5, #100	; 0x64
 800fb82:	4628      	mov	r0, r5
 800fb84:	b004      	add	sp, #16
 800fb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb8a:	f1ba 0f00 	cmp.w	sl, #0
 800fb8e:	d05f      	beq.n	800fc50 <rcl_wait_set_init+0xf4>
 800fb90:	4650      	mov	r0, sl
 800fb92:	f7fe fa65 	bl	800e060 <rcl_context_is_valid>
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d067      	beq.n	800fc6a <rcl_wait_set_init+0x10e>
 800fb9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb9c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fb9e:	205c      	movs	r0, #92	; 0x5c
 800fba0:	4798      	blx	r3
 800fba2:	6320      	str	r0, [r4, #48]	; 0x30
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d062      	beq.n	800fc6e <rcl_wait_set_init+0x112>
 800fba8:	225c      	movs	r2, #92	; 0x5c
 800fbaa:	4629      	mov	r1, r5
 800fbac:	f003 fb0e 	bl	80131cc <memset>
 800fbb0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800fbb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fbb8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800fbba:	f8dc e000 	ldr.w	lr, [ip]
 800fbbe:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 800fbc2:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 800fbc6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800fbca:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800fbce:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 800fbd2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 800fbd6:	60b5      	str	r5, [r6, #8]
 800fbd8:	6075      	str	r5, [r6, #4]
 800fbda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbde:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800fbe2:	1899      	adds	r1, r3, r2
 800fbe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbe6:	f8da 0000 	ldr.w	r0, [sl]
 800fbea:	f8cc e000 	str.w	lr, [ip]
 800fbee:	4419      	add	r1, r3
 800fbf0:	4441      	add	r1, r8
 800fbf2:	3028      	adds	r0, #40	; 0x28
 800fbf4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800fbf8:	f001 fbe0 	bl	80113bc <rmw_create_wait_set>
 800fbfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbfe:	63f0      	str	r0, [r6, #60]	; 0x3c
 800fc00:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fc02:	b350      	cbz	r0, 800fc5a <rcl_wait_set_init+0xfe>
 800fc04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc06:	9302      	str	r3, [sp, #8]
 800fc08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc0a:	9301      	str	r3, [sp, #4]
 800fc0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	4642      	mov	r2, r8
 800fc12:	464b      	mov	r3, r9
 800fc14:	4639      	mov	r1, r7
 800fc16:	4620      	mov	r0, r4
 800fc18:	f7ff fdca 	bl	800f7b0 <rcl_wait_set_resize>
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d0af      	beq.n	800fb82 <rcl_wait_set_init+0x26>
 800fc22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc24:	bb2b      	cbnz	r3, 800fc72 <rcl_wait_set_init+0x116>
 800fc26:	2600      	movs	r6, #0
 800fc28:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800fc2c:	9600      	str	r6, [sp, #0]
 800fc2e:	4633      	mov	r3, r6
 800fc30:	4632      	mov	r2, r6
 800fc32:	4631      	mov	r1, r6
 800fc34:	4620      	mov	r0, r4
 800fc36:	f7ff fdbb 	bl	800f7b0 <rcl_wait_set_resize>
 800fc3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d0a0      	beq.n	800fb82 <rcl_wait_set_init+0x26>
 800fc40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fc42:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800fc44:	4798      	blx	r3
 800fc46:	4628      	mov	r0, r5
 800fc48:	6326      	str	r6, [r4, #48]	; 0x30
 800fc4a:	b004      	add	sp, #16
 800fc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc50:	250b      	movs	r5, #11
 800fc52:	4628      	mov	r0, r5
 800fc54:	b004      	add	sp, #16
 800fc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5a:	2501      	movs	r5, #1
 800fc5c:	f001 fbb8 	bl	80113d0 <rmw_destroy_wait_set>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	bf18      	it	ne
 800fc64:	f44f 7561 	movne.w	r5, #900	; 0x384
 800fc68:	e7dd      	b.n	800fc26 <rcl_wait_set_init+0xca>
 800fc6a:	2565      	movs	r5, #101	; 0x65
 800fc6c:	e789      	b.n	800fb82 <rcl_wait_set_init+0x26>
 800fc6e:	250a      	movs	r5, #10
 800fc70:	e787      	b.n	800fb82 <rcl_wait_set_init+0x26>
 800fc72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fc74:	e7f2      	b.n	800fc5c <rcl_wait_set_init+0x100>
 800fc76:	bf00      	nop

0800fc78 <rcl_wait_set_add_guard_condition>:
 800fc78:	b320      	cbz	r0, 800fcc4 <rcl_wait_set_add_guard_condition+0x4c>
 800fc7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fc7c:	b570      	push	{r4, r5, r6, lr}
 800fc7e:	4604      	mov	r4, r0
 800fc80:	b1d3      	cbz	r3, 800fcb8 <rcl_wait_set_add_guard_condition+0x40>
 800fc82:	b319      	cbz	r1, 800fccc <rcl_wait_set_add_guard_condition+0x54>
 800fc84:	68dd      	ldr	r5, [r3, #12]
 800fc86:	68e0      	ldr	r0, [r4, #12]
 800fc88:	4285      	cmp	r5, r0
 800fc8a:	d218      	bcs.n	800fcbe <rcl_wait_set_add_guard_condition+0x46>
 800fc8c:	68a0      	ldr	r0, [r4, #8]
 800fc8e:	1c6e      	adds	r6, r5, #1
 800fc90:	60de      	str	r6, [r3, #12]
 800fc92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fc96:	b102      	cbz	r2, 800fc9a <rcl_wait_set_add_guard_condition+0x22>
 800fc98:	6015      	str	r5, [r2, #0]
 800fc9a:	4608      	mov	r0, r1
 800fc9c:	f003 f8b0 	bl	8012e00 <rcl_guard_condition_get_rmw_handle>
 800fca0:	b190      	cbz	r0, 800fcc8 <rcl_wait_set_add_guard_condition+0x50>
 800fca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fca4:	6842      	ldr	r2, [r0, #4]
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fcae:	6913      	ldr	r3, [r2, #16]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	6113      	str	r3, [r2, #16]
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}
 800fcb8:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fcbc:	bd70      	pop	{r4, r5, r6, pc}
 800fcbe:	f240 3086 	movw	r0, #902	; 0x386
 800fcc2:	bd70      	pop	{r4, r5, r6, pc}
 800fcc4:	200b      	movs	r0, #11
 800fcc6:	4770      	bx	lr
 800fcc8:	2001      	movs	r0, #1
 800fcca:	bd70      	pop	{r4, r5, r6, pc}
 800fccc:	200b      	movs	r0, #11
 800fcce:	bd70      	pop	{r4, r5, r6, pc}

0800fcd0 <rcl_wait_set_add_timer>:
 800fcd0:	b340      	cbz	r0, 800fd24 <rcl_wait_set_add_timer+0x54>
 800fcd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	b1f3      	cbz	r3, 800fd18 <rcl_wait_set_add_timer+0x48>
 800fcda:	b329      	cbz	r1, 800fd28 <rcl_wait_set_add_timer+0x58>
 800fcdc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fcde:	6965      	ldr	r5, [r4, #20]
 800fce0:	42a8      	cmp	r0, r5
 800fce2:	d21c      	bcs.n	800fd1e <rcl_wait_set_add_timer+0x4e>
 800fce4:	6925      	ldr	r5, [r4, #16]
 800fce6:	1c46      	adds	r6, r0, #1
 800fce8:	641e      	str	r6, [r3, #64]	; 0x40
 800fcea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800fcee:	b102      	cbz	r2, 800fcf2 <rcl_wait_set_add_timer+0x22>
 800fcf0:	6010      	str	r0, [r2, #0]
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	f7ff faa4 	bl	800f240 <rcl_timer_get_guard_condition>
 800fcf8:	b168      	cbz	r0, 800fd16 <rcl_wait_set_add_timer+0x46>
 800fcfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fcfc:	68e3      	ldr	r3, [r4, #12]
 800fcfe:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800fd00:	3b01      	subs	r3, #1
 800fd02:	441d      	add	r5, r3
 800fd04:	f003 f87c 	bl	8012e00 <rcl_guard_condition_get_rmw_handle>
 800fd08:	b180      	cbz	r0, 800fd2c <rcl_wait_set_add_timer+0x5c>
 800fd0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd0c:	6842      	ldr	r2, [r0, #4]
 800fd0e:	695b      	ldr	r3, [r3, #20]
 800fd10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd14:	2000      	movs	r0, #0
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fd1c:	bd70      	pop	{r4, r5, r6, pc}
 800fd1e:	f240 3086 	movw	r0, #902	; 0x386
 800fd22:	bd70      	pop	{r4, r5, r6, pc}
 800fd24:	200b      	movs	r0, #11
 800fd26:	4770      	bx	lr
 800fd28:	200b      	movs	r0, #11
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
 800fd2c:	2001      	movs	r0, #1
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}

0800fd30 <rcl_wait_set_add_client>:
 800fd30:	b320      	cbz	r0, 800fd7c <rcl_wait_set_add_client+0x4c>
 800fd32:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	4604      	mov	r4, r0
 800fd38:	b1d3      	cbz	r3, 800fd70 <rcl_wait_set_add_client+0x40>
 800fd3a:	b319      	cbz	r1, 800fd84 <rcl_wait_set_add_client+0x54>
 800fd3c:	699d      	ldr	r5, [r3, #24]
 800fd3e:	69e0      	ldr	r0, [r4, #28]
 800fd40:	4285      	cmp	r5, r0
 800fd42:	d218      	bcs.n	800fd76 <rcl_wait_set_add_client+0x46>
 800fd44:	69a0      	ldr	r0, [r4, #24]
 800fd46:	1c6e      	adds	r6, r5, #1
 800fd48:	619e      	str	r6, [r3, #24]
 800fd4a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fd4e:	b102      	cbz	r2, 800fd52 <rcl_wait_set_add_client+0x22>
 800fd50:	6015      	str	r5, [r2, #0]
 800fd52:	4608      	mov	r0, r1
 800fd54:	f7fe f938 	bl	800dfc8 <rcl_client_get_rmw_handle>
 800fd58:	b190      	cbz	r0, 800fd80 <rcl_wait_set_add_client+0x50>
 800fd5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd5c:	6842      	ldr	r2, [r0, #4]
 800fd5e:	6a1b      	ldr	r3, [r3, #32]
 800fd60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fd66:	69d3      	ldr	r3, [r2, #28]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	61d3      	str	r3, [r2, #28]
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}
 800fd70:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fd74:	bd70      	pop	{r4, r5, r6, pc}
 800fd76:	f240 3086 	movw	r0, #902	; 0x386
 800fd7a:	bd70      	pop	{r4, r5, r6, pc}
 800fd7c:	200b      	movs	r0, #11
 800fd7e:	4770      	bx	lr
 800fd80:	2001      	movs	r0, #1
 800fd82:	bd70      	pop	{r4, r5, r6, pc}
 800fd84:	200b      	movs	r0, #11
 800fd86:	bd70      	pop	{r4, r5, r6, pc}

0800fd88 <rcl_wait_set_add_service>:
 800fd88:	b320      	cbz	r0, 800fdd4 <rcl_wait_set_add_service+0x4c>
 800fd8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	4604      	mov	r4, r0
 800fd90:	b1d3      	cbz	r3, 800fdc8 <rcl_wait_set_add_service+0x40>
 800fd92:	b319      	cbz	r1, 800fddc <rcl_wait_set_add_service+0x54>
 800fd94:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fd96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fd98:	4285      	cmp	r5, r0
 800fd9a:	d218      	bcs.n	800fdce <rcl_wait_set_add_service+0x46>
 800fd9c:	6a20      	ldr	r0, [r4, #32]
 800fd9e:	1c6e      	adds	r6, r5, #1
 800fda0:	625e      	str	r6, [r3, #36]	; 0x24
 800fda2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fda6:	b102      	cbz	r2, 800fdaa <rcl_wait_set_add_service+0x22>
 800fda8:	6015      	str	r5, [r2, #0]
 800fdaa:	4608      	mov	r0, r1
 800fdac:	f7fa f95e 	bl	800a06c <rcl_service_get_rmw_handle>
 800fdb0:	b190      	cbz	r0, 800fdd8 <rcl_wait_set_add_service+0x50>
 800fdb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fdb4:	6842      	ldr	r2, [r0, #4]
 800fdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fdbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	6293      	str	r3, [r2, #40]	; 0x28
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fdcc:	bd70      	pop	{r4, r5, r6, pc}
 800fdce:	f240 3086 	movw	r0, #902	; 0x386
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	200b      	movs	r0, #11
 800fdd6:	4770      	bx	lr
 800fdd8:	2001      	movs	r0, #1
 800fdda:	bd70      	pop	{r4, r5, r6, pc}
 800fddc:	200b      	movs	r0, #11
 800fdde:	bd70      	pop	{r4, r5, r6, pc}

0800fde0 <rcl_wait>:
 800fde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde4:	b08f      	sub	sp, #60	; 0x3c
 800fde6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdea:	2800      	cmp	r0, #0
 800fdec:	f000 814c 	beq.w	8010088 <rcl_wait+0x2a8>
 800fdf0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	2d00      	cmp	r5, #0
 800fdf6:	f000 80bc 	beq.w	800ff72 <rcl_wait+0x192>
 800fdfa:	6843      	ldr	r3, [r0, #4]
 800fdfc:	b973      	cbnz	r3, 800fe1c <rcl_wait+0x3c>
 800fdfe:	68e3      	ldr	r3, [r4, #12]
 800fe00:	b963      	cbnz	r3, 800fe1c <rcl_wait+0x3c>
 800fe02:	6963      	ldr	r3, [r4, #20]
 800fe04:	b953      	cbnz	r3, 800fe1c <rcl_wait+0x3c>
 800fe06:	69e3      	ldr	r3, [r4, #28]
 800fe08:	b943      	cbnz	r3, 800fe1c <rcl_wait+0x3c>
 800fe0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe0c:	b933      	cbnz	r3, 800fe1c <rcl_wait+0x3c>
 800fe0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fe10:	b923      	cbnz	r3, 800fe1c <rcl_wait+0x3c>
 800fe12:	f240 3085 	movw	r0, #901	; 0x385
 800fe16:	b00f      	add	sp, #60	; 0x3c
 800fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe20:	2a01      	cmp	r2, #1
 800fe22:	f173 0300 	sbcs.w	r3, r3, #0
 800fe26:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800fe28:	db56      	blt.n	800fed8 <rcl_wait+0xf8>
 800fe2a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800fe2e:	2900      	cmp	r1, #0
 800fe30:	f000 8149 	beq.w	80100c6 <rcl_wait+0x2e6>
 800fe34:	2300      	movs	r3, #0
 800fe36:	9307      	str	r3, [sp, #28]
 800fe38:	469b      	mov	fp, r3
 800fe3a:	f04f 0800 	mov.w	r8, #0
 800fe3e:	f04f 0900 	mov.w	r9, #0
 800fe42:	e00d      	b.n	800fe60 <rcl_wait+0x80>
 800fe44:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fe46:	6922      	ldr	r2, [r4, #16]
 800fe48:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800fe4a:	f842 000a 	str.w	r0, [r2, sl]
 800fe4e:	f118 0801 	adds.w	r8, r8, #1
 800fe52:	f149 0900 	adc.w	r9, r9, #0
 800fe56:	2300      	movs	r3, #0
 800fe58:	4599      	cmp	r9, r3
 800fe5a:	bf08      	it	eq
 800fe5c:	4588      	cmpeq	r8, r1
 800fe5e:	d243      	bcs.n	800fee8 <rcl_wait+0x108>
 800fe60:	6922      	ldr	r2, [r4, #16]
 800fe62:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800fe66:	f852 000a 	ldr.w	r0, [r2, sl]
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d0ef      	beq.n	800fe4e <rcl_wait+0x6e>
 800fe6e:	68e2      	ldr	r2, [r4, #12]
 800fe70:	6969      	ldr	r1, [r5, #20]
 800fe72:	4442      	add	r2, r8
 800fe74:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800fe78:	b13b      	cbz	r3, 800fe8a <rcl_wait+0xaa>
 800fe7a:	692a      	ldr	r2, [r5, #16]
 800fe7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe80:	6921      	ldr	r1, [r4, #16]
 800fe82:	3201      	adds	r2, #1
 800fe84:	f851 000a 	ldr.w	r0, [r1, sl]
 800fe88:	612a      	str	r2, [r5, #16]
 800fe8a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800fe8e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 800fe92:	f7ff f9c3 	bl	800f21c <rcl_timer_is_canceled>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1bd      	bne.n	800fe16 <rcl_wait+0x36>
 800fe9a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800fe9e:	2a00      	cmp	r2, #0
 800fea0:	d1d0      	bne.n	800fe44 <rcl_wait+0x64>
 800fea2:	6922      	ldr	r2, [r4, #16]
 800fea4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fea8:	f852 000a 	ldr.w	r0, [r2, sl]
 800feac:	a90a      	add	r1, sp, #40	; 0x28
 800feae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feb2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800feb6:	f7ff f98d 	bl	800f1d4 <rcl_timer_get_time_until_next_call>
 800feba:	2800      	cmp	r0, #0
 800febc:	d1ab      	bne.n	800fe16 <rcl_wait+0x36>
 800febe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fec2:	42b2      	cmp	r2, r6
 800fec4:	eb73 0107 	sbcs.w	r1, r3, r7
 800fec8:	da03      	bge.n	800fed2 <rcl_wait+0xf2>
 800feca:	461f      	mov	r7, r3
 800fecc:	2301      	movs	r3, #1
 800fece:	4616      	mov	r6, r2
 800fed0:	9307      	str	r3, [sp, #28]
 800fed2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fed4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800fed6:	e7ba      	b.n	800fe4e <rcl_wait+0x6e>
 800fed8:	2900      	cmp	r1, #0
 800feda:	f000 80de 	beq.w	801009a <rcl_wait+0x2ba>
 800fede:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800fee2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800fee6:	e7a5      	b.n	800fe34 <rcl_wait+0x54>
 800fee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feec:	4313      	orrs	r3, r2
 800feee:	d145      	bne.n	800ff7c <rcl_wait+0x19c>
 800fef0:	2300      	movs	r3, #0
 800fef2:	2200      	movs	r2, #0
 800fef4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fef8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800fefc:	ab0a      	add	r3, sp, #40	; 0x28
 800fefe:	9302      	str	r3, [sp, #8]
 800ff00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ff02:	9301      	str	r3, [sp, #4]
 800ff04:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800ff0e:	f105 031c 	add.w	r3, r5, #28
 800ff12:	f105 0110 	add.w	r1, r5, #16
 800ff16:	1d28      	adds	r0, r5, #4
 800ff18:	f001 f8d0 	bl	80110bc <rmw_wait>
 800ff1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff20:	4680      	mov	r8, r0
 800ff22:	b30a      	cbz	r2, 800ff68 <rcl_wait+0x188>
 800ff24:	2500      	movs	r5, #0
 800ff26:	462f      	mov	r7, r5
 800ff28:	e004      	b.n	800ff34 <rcl_wait+0x154>
 800ff2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff2e:	3501      	adds	r5, #1
 800ff30:	42aa      	cmp	r2, r5
 800ff32:	d919      	bls.n	800ff68 <rcl_wait+0x188>
 800ff34:	6922      	ldr	r2, [r4, #16]
 800ff36:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ff3a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800ff3e:	00ae      	lsls	r6, r5, #2
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d0f3      	beq.n	800ff2c <rcl_wait+0x14c>
 800ff44:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800ff48:	f7ff f90c 	bl	800f164 <rcl_timer_is_ready>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	f47f af62 	bne.w	800fe16 <rcl_wait+0x36>
 800ff52:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800ff56:	2a00      	cmp	r2, #0
 800ff58:	d1e7      	bne.n	800ff2a <rcl_wait+0x14a>
 800ff5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff5c:	6921      	ldr	r1, [r4, #16]
 800ff5e:	518a      	str	r2, [r1, r6]
 800ff60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff62:	3501      	adds	r5, #1
 800ff64:	42aa      	cmp	r2, r5
 800ff66:	d8e5      	bhi.n	800ff34 <rcl_wait+0x154>
 800ff68:	f038 0002 	bics.w	r0, r8, #2
 800ff6c:	d029      	beq.n	800ffc2 <rcl_wait+0x1e2>
 800ff6e:	2001      	movs	r0, #1
 800ff70:	e751      	b.n	800fe16 <rcl_wait+0x36>
 800ff72:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ff76:	b00f      	add	sp, #60	; 0x3c
 800ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff80:	2a01      	cmp	r2, #1
 800ff82:	f173 0300 	sbcs.w	r3, r3, #0
 800ff86:	f2c0 8083 	blt.w	8010090 <rcl_wait+0x2b0>
 800ff8a:	2e00      	cmp	r6, #0
 800ff8c:	f177 0300 	sbcs.w	r3, r7, #0
 800ff90:	bfbc      	itt	lt
 800ff92:	2600      	movlt	r6, #0
 800ff94:	2700      	movlt	r7, #0
 800ff96:	a34e      	add	r3, pc, #312	; (adr r3, 80100d0 <rcl_wait+0x2f0>)
 800ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	f7f0 faac 	bl	80004fc <__aeabi_ldivmod>
 800ffa4:	a34a      	add	r3, pc, #296	; (adr r3, 80100d0 <rcl_wait+0x2f0>)
 800ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffaa:	4680      	mov	r8, r0
 800ffac:	4689      	mov	r9, r1
 800ffae:	4630      	mov	r0, r6
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ffb6:	f7f0 faa1 	bl	80004fc <__aeabi_ldivmod>
 800ffba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ffbe:	ab0a      	add	r3, sp, #40	; 0x28
 800ffc0:	e79d      	b.n	800fefe <rcl_wait+0x11e>
 800ffc2:	6866      	ldr	r6, [r4, #4]
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	b91e      	cbnz	r6, 800ffd0 <rcl_wait+0x1f0>
 800ffc8:	e00d      	b.n	800ffe6 <rcl_wait+0x206>
 800ffca:	3201      	adds	r2, #1
 800ffcc:	42b2      	cmp	r2, r6
 800ffce:	d00a      	beq.n	800ffe6 <rcl_wait+0x206>
 800ffd0:	6899      	ldr	r1, [r3, #8]
 800ffd2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ffd6:	2900      	cmp	r1, #0
 800ffd8:	d1f7      	bne.n	800ffca <rcl_wait+0x1ea>
 800ffda:	6825      	ldr	r5, [r4, #0]
 800ffdc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800ffe0:	3201      	adds	r2, #1
 800ffe2:	42b2      	cmp	r2, r6
 800ffe4:	d1f4      	bne.n	800ffd0 <rcl_wait+0x1f0>
 800ffe6:	68e6      	ldr	r6, [r4, #12]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	b91e      	cbnz	r6, 800fff4 <rcl_wait+0x214>
 800ffec:	e00d      	b.n	801000a <rcl_wait+0x22a>
 800ffee:	3201      	adds	r2, #1
 800fff0:	42b2      	cmp	r2, r6
 800fff2:	d00a      	beq.n	801000a <rcl_wait+0x22a>
 800fff4:	6959      	ldr	r1, [r3, #20]
 800fff6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fffa:	2900      	cmp	r1, #0
 800fffc:	d1f7      	bne.n	800ffee <rcl_wait+0x20e>
 800fffe:	68a5      	ldr	r5, [r4, #8]
 8010000:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8010004:	3201      	adds	r2, #1
 8010006:	42b2      	cmp	r2, r6
 8010008:	d1f4      	bne.n	800fff4 <rcl_wait+0x214>
 801000a:	69e6      	ldr	r6, [r4, #28]
 801000c:	2200      	movs	r2, #0
 801000e:	b91e      	cbnz	r6, 8010018 <rcl_wait+0x238>
 8010010:	e00d      	b.n	801002e <rcl_wait+0x24e>
 8010012:	3201      	adds	r2, #1
 8010014:	42b2      	cmp	r2, r6
 8010016:	d00a      	beq.n	801002e <rcl_wait+0x24e>
 8010018:	6a19      	ldr	r1, [r3, #32]
 801001a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801001e:	2900      	cmp	r1, #0
 8010020:	d1f7      	bne.n	8010012 <rcl_wait+0x232>
 8010022:	69a5      	ldr	r5, [r4, #24]
 8010024:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8010028:	3201      	adds	r2, #1
 801002a:	42b2      	cmp	r2, r6
 801002c:	d1f4      	bne.n	8010018 <rcl_wait+0x238>
 801002e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010030:	2200      	movs	r2, #0
 8010032:	b91e      	cbnz	r6, 801003c <rcl_wait+0x25c>
 8010034:	e00d      	b.n	8010052 <rcl_wait+0x272>
 8010036:	3201      	adds	r2, #1
 8010038:	4296      	cmp	r6, r2
 801003a:	d00a      	beq.n	8010052 <rcl_wait+0x272>
 801003c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801003e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010042:	2900      	cmp	r1, #0
 8010044:	d1f7      	bne.n	8010036 <rcl_wait+0x256>
 8010046:	6a25      	ldr	r5, [r4, #32]
 8010048:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801004c:	3201      	adds	r2, #1
 801004e:	4296      	cmp	r6, r2
 8010050:	d1f4      	bne.n	801003c <rcl_wait+0x25c>
 8010052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010054:	2200      	movs	r2, #0
 8010056:	b91e      	cbnz	r6, 8010060 <rcl_wait+0x280>
 8010058:	e00d      	b.n	8010076 <rcl_wait+0x296>
 801005a:	3201      	adds	r2, #1
 801005c:	42b2      	cmp	r2, r6
 801005e:	d00a      	beq.n	8010076 <rcl_wait+0x296>
 8010060:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010062:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010066:	2900      	cmp	r1, #0
 8010068:	d1f7      	bne.n	801005a <rcl_wait+0x27a>
 801006a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801006c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8010070:	3201      	adds	r2, #1
 8010072:	42b2      	cmp	r2, r6
 8010074:	d1f4      	bne.n	8010060 <rcl_wait+0x280>
 8010076:	f1b8 0f02 	cmp.w	r8, #2
 801007a:	f47f aecc 	bne.w	800fe16 <rcl_wait+0x36>
 801007e:	9b07      	ldr	r3, [sp, #28]
 8010080:	2b00      	cmp	r3, #0
 8010082:	bf08      	it	eq
 8010084:	2002      	moveq	r0, #2
 8010086:	e6c6      	b.n	800fe16 <rcl_wait+0x36>
 8010088:	200b      	movs	r0, #11
 801008a:	b00f      	add	sp, #60	; 0x3c
 801008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010090:	9b07      	ldr	r3, [sp, #28]
 8010092:	2b00      	cmp	r3, #0
 8010094:	f47f af79 	bne.w	800ff8a <rcl_wait+0x1aa>
 8010098:	e731      	b.n	800fefe <rcl_wait+0x11e>
 801009a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801009e:	4313      	orrs	r3, r2
 80100a0:	bf08      	it	eq
 80100a2:	9107      	streq	r1, [sp, #28]
 80100a4:	f43f af24 	beq.w	800fef0 <rcl_wait+0x110>
 80100a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100ac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80100b0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80100b4:	2a01      	cmp	r2, #1
 80100b6:	f173 0300 	sbcs.w	r3, r3, #0
 80100ba:	f04f 0300 	mov.w	r3, #0
 80100be:	9307      	str	r3, [sp, #28]
 80100c0:	f6bf af63 	bge.w	800ff8a <rcl_wait+0x1aa>
 80100c4:	e71b      	b.n	800fefe <rcl_wait+0x11e>
 80100c6:	4632      	mov	r2, r6
 80100c8:	463b      	mov	r3, r7
 80100ca:	e7f3      	b.n	80100b4 <rcl_wait+0x2d4>
 80100cc:	f3af 8000 	nop.w
 80100d0:	3b9aca00 	.word	0x3b9aca00
 80100d4:	00000000 	.word	0x00000000

080100d8 <__atomic_load_8>:
 80100d8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80100dc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80100e0:	4b14      	ldr	r3, [pc, #80]	; (8010134 <__atomic_load_8+0x5c>)
 80100e2:	4a15      	ldr	r2, [pc, #84]	; (8010138 <__atomic_load_8+0x60>)
 80100e4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80100e8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80100ec:	fb03 f301 	mul.w	r3, r3, r1
 80100f0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 80100f4:	fba2 1203 	umull	r1, r2, r2, r3
 80100f8:	0912      	lsrs	r2, r2, #4
 80100fa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80100fe:	b430      	push	{r4, r5}
 8010100:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8010104:	4c0d      	ldr	r4, [pc, #52]	; (801013c <__atomic_load_8+0x64>)
 8010106:	1a9b      	subs	r3, r3, r2
 8010108:	18e1      	adds	r1, r4, r3
 801010a:	f04f 0501 	mov.w	r5, #1
 801010e:	e8d1 2f4f 	ldrexb	r2, [r1]
 8010112:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8010116:	f1bc 0f00 	cmp.w	ip, #0
 801011a:	d1f8      	bne.n	801010e <__atomic_load_8+0x36>
 801011c:	f3bf 8f5b 	dmb	ish
 8010120:	b2d2      	uxtb	r2, r2
 8010122:	2a00      	cmp	r2, #0
 8010124:	d1f3      	bne.n	801010e <__atomic_load_8+0x36>
 8010126:	e9d0 0100 	ldrd	r0, r1, [r0]
 801012a:	f3bf 8f5b 	dmb	ish
 801012e:	54e2      	strb	r2, [r4, r3]
 8010130:	bc30      	pop	{r4, r5}
 8010132:	4770      	bx	lr
 8010134:	27d4eb2d 	.word	0x27d4eb2d
 8010138:	b21642c9 	.word	0xb21642c9
 801013c:	2000c1bc 	.word	0x2000c1bc

08010140 <__atomic_store_8>:
 8010140:	b4f0      	push	{r4, r5, r6, r7}
 8010142:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8010146:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801014a:	4914      	ldr	r1, [pc, #80]	; (801019c <__atomic_store_8+0x5c>)
 801014c:	4c14      	ldr	r4, [pc, #80]	; (80101a0 <__atomic_store_8+0x60>)
 801014e:	4e15      	ldr	r6, [pc, #84]	; (80101a4 <__atomic_store_8+0x64>)
 8010150:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8010154:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8010158:	fb01 f105 	mul.w	r1, r1, r5
 801015c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010160:	fba4 5401 	umull	r5, r4, r4, r1
 8010164:	0924      	lsrs	r4, r4, #4
 8010166:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801016a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801016e:	1b09      	subs	r1, r1, r4
 8010170:	1875      	adds	r5, r6, r1
 8010172:	f04f 0701 	mov.w	r7, #1
 8010176:	e8d5 4f4f 	ldrexb	r4, [r5]
 801017a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 801017e:	f1bc 0f00 	cmp.w	ip, #0
 8010182:	d1f8      	bne.n	8010176 <__atomic_store_8+0x36>
 8010184:	f3bf 8f5b 	dmb	ish
 8010188:	b2e4      	uxtb	r4, r4
 801018a:	2c00      	cmp	r4, #0
 801018c:	d1f3      	bne.n	8010176 <__atomic_store_8+0x36>
 801018e:	e9c0 2300 	strd	r2, r3, [r0]
 8010192:	f3bf 8f5b 	dmb	ish
 8010196:	5474      	strb	r4, [r6, r1]
 8010198:	bcf0      	pop	{r4, r5, r6, r7}
 801019a:	4770      	bx	lr
 801019c:	27d4eb2d 	.word	0x27d4eb2d
 80101a0:	b21642c9 	.word	0xb21642c9
 80101a4:	2000c1bc 	.word	0x2000c1bc

080101a8 <__atomic_exchange_8>:
 80101a8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80101ac:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80101b0:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80101b4:	4c16      	ldr	r4, [pc, #88]	; (8010210 <__atomic_exchange_8+0x68>)
 80101b6:	4917      	ldr	r1, [pc, #92]	; (8010214 <__atomic_exchange_8+0x6c>)
 80101b8:	4e17      	ldr	r6, [pc, #92]	; (8010218 <__atomic_exchange_8+0x70>)
 80101ba:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80101be:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80101c2:	fb04 f505 	mul.w	r5, r4, r5
 80101c6:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 80101ca:	fba1 4105 	umull	r4, r1, r1, r5
 80101ce:	0909      	lsrs	r1, r1, #4
 80101d0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80101d4:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80101d8:	1a6c      	subs	r4, r5, r1
 80101da:	1931      	adds	r1, r6, r4
 80101dc:	f04f 0701 	mov.w	r7, #1
 80101e0:	e8d1 5f4f 	ldrexb	r5, [r1]
 80101e4:	e8c1 7f4c 	strexb	ip, r7, [r1]
 80101e8:	f1bc 0f00 	cmp.w	ip, #0
 80101ec:	d1f8      	bne.n	80101e0 <__atomic_exchange_8+0x38>
 80101ee:	f3bf 8f5b 	dmb	ish
 80101f2:	b2ed      	uxtb	r5, r5
 80101f4:	2d00      	cmp	r5, #0
 80101f6:	d1f3      	bne.n	80101e0 <__atomic_exchange_8+0x38>
 80101f8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80101fc:	e9c0 2300 	strd	r2, r3, [r0]
 8010200:	f3bf 8f5b 	dmb	ish
 8010204:	5535      	strb	r5, [r6, r4]
 8010206:	4640      	mov	r0, r8
 8010208:	4649      	mov	r1, r9
 801020a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801020e:	4770      	bx	lr
 8010210:	27d4eb2d 	.word	0x27d4eb2d
 8010214:	b21642c9 	.word	0xb21642c9
 8010218:	2000c1bc 	.word	0x2000c1bc

0801021c <rcutils_is_directory>:
 801021c:	2000      	movs	r0, #0
 801021e:	4770      	bx	lr

08010220 <rcutils_join_path>:
 8010220:	b082      	sub	sp, #8
 8010222:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010226:	2000      	movs	r0, #0
 8010228:	b002      	add	sp, #8
 801022a:	4770      	bx	lr

0801022c <rcutils_to_native_path>:
 801022c:	b084      	sub	sp, #16
 801022e:	a801      	add	r0, sp, #4
 8010230:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010234:	b004      	add	sp, #16
 8010236:	2000      	movs	r0, #0
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop

0801023c <rcutils_format_string_limit>:
 801023c:	b40f      	push	{r0, r1, r2, r3}
 801023e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010240:	b083      	sub	sp, #12
 8010242:	ac08      	add	r4, sp, #32
 8010244:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801024a:	b34e      	cbz	r6, 80102a0 <rcutils_format_string_limit+0x64>
 801024c:	a808      	add	r0, sp, #32
 801024e:	f7fa fbb9 	bl	800a9c4 <rcutils_allocator_is_valid>
 8010252:	b328      	cbz	r0, 80102a0 <rcutils_format_string_limit+0x64>
 8010254:	2100      	movs	r1, #0
 8010256:	ab0f      	add	r3, sp, #60	; 0x3c
 8010258:	4608      	mov	r0, r1
 801025a:	4632      	mov	r2, r6
 801025c:	e9cd 3300 	strd	r3, r3, [sp]
 8010260:	f000 f904 	bl	801046c <rcutils_vsnprintf>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	4605      	mov	r5, r0
 8010268:	d01a      	beq.n	80102a0 <rcutils_format_string_limit+0x64>
 801026a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801026c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801026e:	1c47      	adds	r7, r0, #1
 8010270:	429f      	cmp	r7, r3
 8010272:	bf84      	itt	hi
 8010274:	461f      	movhi	r7, r3
 8010276:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 801027a:	4638      	mov	r0, r7
 801027c:	9b08      	ldr	r3, [sp, #32]
 801027e:	4798      	blx	r3
 8010280:	4604      	mov	r4, r0
 8010282:	b168      	cbz	r0, 80102a0 <rcutils_format_string_limit+0x64>
 8010284:	9b01      	ldr	r3, [sp, #4]
 8010286:	4632      	mov	r2, r6
 8010288:	4639      	mov	r1, r7
 801028a:	f000 f8ef 	bl	801046c <rcutils_vsnprintf>
 801028e:	2800      	cmp	r0, #0
 8010290:	db02      	blt.n	8010298 <rcutils_format_string_limit+0x5c>
 8010292:	2300      	movs	r3, #0
 8010294:	5563      	strb	r3, [r4, r5]
 8010296:	e004      	b.n	80102a2 <rcutils_format_string_limit+0x66>
 8010298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801029a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801029c:	4620      	mov	r0, r4
 801029e:	4798      	blx	r3
 80102a0:	2400      	movs	r4, #0
 80102a2:	4620      	mov	r0, r4
 80102a4:	b003      	add	sp, #12
 80102a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80102aa:	b004      	add	sp, #16
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop

080102b0 <rcutils_get_env>:
 80102b0:	b168      	cbz	r0, 80102ce <rcutils_get_env+0x1e>
 80102b2:	b510      	push	{r4, lr}
 80102b4:	460c      	mov	r4, r1
 80102b6:	b129      	cbz	r1, 80102c4 <rcutils_get_env+0x14>
 80102b8:	f002 fee4 	bl	8013084 <getenv>
 80102bc:	b120      	cbz	r0, 80102c8 <rcutils_get_env+0x18>
 80102be:	6020      	str	r0, [r4, #0]
 80102c0:	2000      	movs	r0, #0
 80102c2:	bd10      	pop	{r4, pc}
 80102c4:	4803      	ldr	r0, [pc, #12]	; (80102d4 <rcutils_get_env+0x24>)
 80102c6:	bd10      	pop	{r4, pc}
 80102c8:	4b03      	ldr	r3, [pc, #12]	; (80102d8 <rcutils_get_env+0x28>)
 80102ca:	6023      	str	r3, [r4, #0]
 80102cc:	bd10      	pop	{r4, pc}
 80102ce:	4803      	ldr	r0, [pc, #12]	; (80102dc <rcutils_get_env+0x2c>)
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	08014d38 	.word	0x08014d38
 80102d8:	08014e5c 	.word	0x08014e5c
 80102dc:	08014d1c 	.word	0x08014d1c

080102e0 <rcutils_repl_str>:
 80102e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e4:	ed2d 8b02 	vpush	{d8}
 80102e8:	b087      	sub	sp, #28
 80102ea:	4680      	mov	r8, r0
 80102ec:	4608      	mov	r0, r1
 80102ee:	f8cd 8000 	str.w	r8, [sp]
 80102f2:	ee08 2a10 	vmov	s16, r2
 80102f6:	468a      	mov	sl, r1
 80102f8:	4699      	mov	r9, r3
 80102fa:	f7ef ff93 	bl	8000224 <strlen>
 80102fe:	2600      	movs	r6, #0
 8010300:	4647      	mov	r7, r8
 8010302:	9001      	str	r0, [sp, #4]
 8010304:	46b3      	mov	fp, r6
 8010306:	2510      	movs	r5, #16
 8010308:	46b0      	mov	r8, r6
 801030a:	e01d      	b.n	8010348 <rcutils_repl_str+0x68>
 801030c:	f10b 0b01 	add.w	fp, fp, #1
 8010310:	455e      	cmp	r6, fp
 8010312:	d211      	bcs.n	8010338 <rcutils_repl_str+0x58>
 8010314:	442e      	add	r6, r5
 8010316:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801031a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801031e:	00b1      	lsls	r1, r6, #2
 8010320:	4798      	blx	r3
 8010322:	2800      	cmp	r0, #0
 8010324:	f000 8084 	beq.w	8010430 <rcutils_repl_str+0x150>
 8010328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801032c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8010330:	bf28      	it	cs
 8010332:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8010336:	4680      	mov	r8, r0
 8010338:	9a00      	ldr	r2, [sp, #0]
 801033a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801033e:	1aa2      	subs	r2, r4, r2
 8010340:	f843 2c04 	str.w	r2, [r3, #-4]
 8010344:	9b01      	ldr	r3, [sp, #4]
 8010346:	18e7      	adds	r7, r4, r3
 8010348:	4651      	mov	r1, sl
 801034a:	4638      	mov	r0, r7
 801034c:	f003 f935 	bl	80135ba <strstr>
 8010350:	4604      	mov	r4, r0
 8010352:	4640      	mov	r0, r8
 8010354:	2c00      	cmp	r4, #0
 8010356:	d1d9      	bne.n	801030c <rcutils_repl_str+0x2c>
 8010358:	46b8      	mov	r8, r7
 801035a:	4607      	mov	r7, r0
 801035c:	4640      	mov	r0, r8
 801035e:	f7ef ff61 	bl	8000224 <strlen>
 8010362:	9b00      	ldr	r3, [sp, #0]
 8010364:	eba8 0303 	sub.w	r3, r8, r3
 8010368:	181d      	adds	r5, r3, r0
 801036a:	9504      	str	r5, [sp, #16]
 801036c:	f1bb 0f00 	cmp.w	fp, #0
 8010370:	d03d      	beq.n	80103ee <rcutils_repl_str+0x10e>
 8010372:	ee18 0a10 	vmov	r0, s16
 8010376:	f7ef ff55 	bl	8000224 <strlen>
 801037a:	9b01      	ldr	r3, [sp, #4]
 801037c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010380:	1ac3      	subs	r3, r0, r3
 8010382:	fb0b 5303 	mla	r3, fp, r3, r5
 8010386:	9305      	str	r3, [sp, #20]
 8010388:	4606      	mov	r6, r0
 801038a:	1c58      	adds	r0, r3, #1
 801038c:	f8d9 3000 	ldr.w	r3, [r9]
 8010390:	4798      	blx	r3
 8010392:	9003      	str	r0, [sp, #12]
 8010394:	2800      	cmp	r0, #0
 8010396:	d04c      	beq.n	8010432 <rcutils_repl_str+0x152>
 8010398:	683a      	ldr	r2, [r7, #0]
 801039a:	9900      	ldr	r1, [sp, #0]
 801039c:	f002 feee 	bl	801317c <memcpy>
 80103a0:	9b03      	ldr	r3, [sp, #12]
 80103a2:	683d      	ldr	r5, [r7, #0]
 80103a4:	ee18 8a10 	vmov	r8, s16
 80103a8:	441d      	add	r5, r3
 80103aa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80103ae:	9302      	str	r3, [sp, #8]
 80103b0:	46ba      	mov	sl, r7
 80103b2:	4632      	mov	r2, r6
 80103b4:	4641      	mov	r1, r8
 80103b6:	4628      	mov	r0, r5
 80103b8:	f002 fee0 	bl	801317c <memcpy>
 80103bc:	9b01      	ldr	r3, [sp, #4]
 80103be:	f85a 2b04 	ldr.w	r2, [sl], #4
 80103c2:	441a      	add	r2, r3
 80103c4:	9b00      	ldr	r3, [sp, #0]
 80103c6:	1899      	adds	r1, r3, r2
 80103c8:	9b02      	ldr	r3, [sp, #8]
 80103ca:	4435      	add	r5, r6
 80103cc:	429c      	cmp	r4, r3
 80103ce:	4628      	mov	r0, r5
 80103d0:	d025      	beq.n	801041e <rcutils_repl_str+0x13e>
 80103d2:	f8da 3000 	ldr.w	r3, [sl]
 80103d6:	3401      	adds	r4, #1
 80103d8:	1a9a      	subs	r2, r3, r2
 80103da:	4415      	add	r5, r2
 80103dc:	f002 fece 	bl	801317c <memcpy>
 80103e0:	455c      	cmp	r4, fp
 80103e2:	d3e6      	bcc.n	80103b2 <rcutils_repl_str+0xd2>
 80103e4:	9a03      	ldr	r2, [sp, #12]
 80103e6:	9905      	ldr	r1, [sp, #20]
 80103e8:	2300      	movs	r3, #0
 80103ea:	5453      	strb	r3, [r2, r1]
 80103ec:	e00b      	b.n	8010406 <rcutils_repl_str+0x126>
 80103ee:	4628      	mov	r0, r5
 80103f0:	f8d9 3000 	ldr.w	r3, [r9]
 80103f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80103f8:	3001      	adds	r0, #1
 80103fa:	4798      	blx	r3
 80103fc:	9003      	str	r0, [sp, #12]
 80103fe:	b110      	cbz	r0, 8010406 <rcutils_repl_str+0x126>
 8010400:	9900      	ldr	r1, [sp, #0]
 8010402:	f003 f8be 	bl	8013582 <strcpy>
 8010406:	4638      	mov	r0, r7
 8010408:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801040c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010410:	4798      	blx	r3
 8010412:	9803      	ldr	r0, [sp, #12]
 8010414:	b007      	add	sp, #28
 8010416:	ecbd 8b02 	vpop	{d8}
 801041a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801041e:	9b04      	ldr	r3, [sp, #16]
 8010420:	3401      	adds	r4, #1
 8010422:	1a9a      	subs	r2, r3, r2
 8010424:	4415      	add	r5, r2
 8010426:	f002 fea9 	bl	801317c <memcpy>
 801042a:	455c      	cmp	r4, fp
 801042c:	d3c1      	bcc.n	80103b2 <rcutils_repl_str+0xd2>
 801042e:	e7d9      	b.n	80103e4 <rcutils_repl_str+0x104>
 8010430:	4647      	mov	r7, r8
 8010432:	2300      	movs	r3, #0
 8010434:	9303      	str	r3, [sp, #12]
 8010436:	e7e6      	b.n	8010406 <rcutils_repl_str+0x126>

08010438 <rcutils_snprintf>:
 8010438:	b40c      	push	{r2, r3}
 801043a:	b530      	push	{r4, r5, lr}
 801043c:	b083      	sub	sp, #12
 801043e:	ab06      	add	r3, sp, #24
 8010440:	f853 2b04 	ldr.w	r2, [r3], #4
 8010444:	9301      	str	r3, [sp, #4]
 8010446:	b152      	cbz	r2, 801045e <rcutils_snprintf+0x26>
 8010448:	b138      	cbz	r0, 801045a <rcutils_snprintf+0x22>
 801044a:	b141      	cbz	r1, 801045e <rcutils_snprintf+0x26>
 801044c:	f003 f974 	bl	8013738 <vsniprintf>
 8010450:	b003      	add	sp, #12
 8010452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010456:	b002      	add	sp, #8
 8010458:	4770      	bx	lr
 801045a:	2900      	cmp	r1, #0
 801045c:	d0f6      	beq.n	801044c <rcutils_snprintf+0x14>
 801045e:	f002 fe0b 	bl	8013078 <__errno>
 8010462:	2316      	movs	r3, #22
 8010464:	6003      	str	r3, [r0, #0]
 8010466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801046a:	e7f1      	b.n	8010450 <rcutils_snprintf+0x18>

0801046c <rcutils_vsnprintf>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	b13a      	cbz	r2, 8010480 <rcutils_vsnprintf+0x14>
 8010470:	b120      	cbz	r0, 801047c <rcutils_vsnprintf+0x10>
 8010472:	b129      	cbz	r1, 8010480 <rcutils_vsnprintf+0x14>
 8010474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010478:	f003 b95e 	b.w	8013738 <vsniprintf>
 801047c:	2900      	cmp	r1, #0
 801047e:	d0f9      	beq.n	8010474 <rcutils_vsnprintf+0x8>
 8010480:	f002 fdfa 	bl	8013078 <__errno>
 8010484:	2316      	movs	r3, #22
 8010486:	6003      	str	r3, [r0, #0]
 8010488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801048c:	bd70      	pop	{r4, r5, r6, pc}
 801048e:	bf00      	nop

08010490 <rcutils_strdup>:
 8010490:	b084      	sub	sp, #16
 8010492:	b570      	push	{r4, r5, r6, lr}
 8010494:	b082      	sub	sp, #8
 8010496:	ac07      	add	r4, sp, #28
 8010498:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801049c:	4605      	mov	r5, r0
 801049e:	b1b0      	cbz	r0, 80104ce <rcutils_strdup+0x3e>
 80104a0:	f7ef fec0 	bl	8000224 <strlen>
 80104a4:	1c42      	adds	r2, r0, #1
 80104a6:	9b07      	ldr	r3, [sp, #28]
 80104a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104aa:	9201      	str	r2, [sp, #4]
 80104ac:	4606      	mov	r6, r0
 80104ae:	4610      	mov	r0, r2
 80104b0:	4798      	blx	r3
 80104b2:	4604      	mov	r4, r0
 80104b4:	b128      	cbz	r0, 80104c2 <rcutils_strdup+0x32>
 80104b6:	9a01      	ldr	r2, [sp, #4]
 80104b8:	4629      	mov	r1, r5
 80104ba:	f002 fe5f 	bl	801317c <memcpy>
 80104be:	2300      	movs	r3, #0
 80104c0:	55a3      	strb	r3, [r4, r6]
 80104c2:	4620      	mov	r0, r4
 80104c4:	b002      	add	sp, #8
 80104c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ca:	b004      	add	sp, #16
 80104cc:	4770      	bx	lr
 80104ce:	4604      	mov	r4, r0
 80104d0:	e7f7      	b.n	80104c2 <rcutils_strdup+0x32>
 80104d2:	bf00      	nop

080104d4 <rcutils_strndup>:
 80104d4:	b082      	sub	sp, #8
 80104d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d8:	460e      	mov	r6, r1
 80104da:	a906      	add	r1, sp, #24
 80104dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80104e0:	4605      	mov	r5, r0
 80104e2:	b180      	cbz	r0, 8010506 <rcutils_strndup+0x32>
 80104e4:	1c77      	adds	r7, r6, #1
 80104e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104e8:	4638      	mov	r0, r7
 80104ea:	4790      	blx	r2
 80104ec:	4604      	mov	r4, r0
 80104ee:	b128      	cbz	r0, 80104fc <rcutils_strndup+0x28>
 80104f0:	463a      	mov	r2, r7
 80104f2:	4629      	mov	r1, r5
 80104f4:	f002 fe42 	bl	801317c <memcpy>
 80104f8:	2300      	movs	r3, #0
 80104fa:	55a3      	strb	r3, [r4, r6]
 80104fc:	4620      	mov	r0, r4
 80104fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010502:	b002      	add	sp, #8
 8010504:	4770      	bx	lr
 8010506:	4604      	mov	r4, r0
 8010508:	e7f8      	b.n	80104fc <rcutils_strndup+0x28>
 801050a:	bf00      	nop

0801050c <rmw_get_zero_initialized_context>:
 801050c:	b510      	push	{r4, lr}
 801050e:	2250      	movs	r2, #80	; 0x50
 8010510:	4604      	mov	r4, r0
 8010512:	2100      	movs	r1, #0
 8010514:	f002 fe5a 	bl	80131cc <memset>
 8010518:	4620      	mov	r0, r4
 801051a:	bd10      	pop	{r4, pc}

0801051c <rmw_get_zero_initialized_init_options>:
 801051c:	b510      	push	{r4, lr}
 801051e:	2238      	movs	r2, #56	; 0x38
 8010520:	4604      	mov	r4, r0
 8010522:	2100      	movs	r1, #0
 8010524:	f002 fe52 	bl	80131cc <memset>
 8010528:	f104 0010 	add.w	r0, r4, #16
 801052c:	f000 f806 	bl	801053c <rmw_get_default_security_options>
 8010530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010534:	60e3      	str	r3, [r4, #12]
 8010536:	4620      	mov	r0, r4
 8010538:	bd10      	pop	{r4, pc}
 801053a:	bf00      	nop

0801053c <rmw_get_default_security_options>:
 801053c:	2200      	movs	r2, #0
 801053e:	7002      	strb	r2, [r0, #0]
 8010540:	6042      	str	r2, [r0, #4]
 8010542:	4770      	bx	lr

08010544 <rmw_get_zero_initialized_message_info>:
 8010544:	b470      	push	{r4, r5, r6}
 8010546:	4d07      	ldr	r5, [pc, #28]	; (8010564 <rmw_get_zero_initialized_message_info+0x20>)
 8010548:	4606      	mov	r6, r0
 801054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801054c:	4634      	mov	r4, r6
 801054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801055c:	4630      	mov	r0, r6
 801055e:	bc70      	pop	{r4, r5, r6}
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	08014950 	.word	0x08014950

08010568 <rmw_validate_namespace_with_size>:
 8010568:	b340      	cbz	r0, 80105bc <rmw_validate_namespace_with_size+0x54>
 801056a:	b5d0      	push	{r4, r6, r7, lr}
 801056c:	4614      	mov	r4, r2
 801056e:	b0c2      	sub	sp, #264	; 0x108
 8010570:	b332      	cbz	r2, 80105c0 <rmw_validate_namespace_with_size+0x58>
 8010572:	2901      	cmp	r1, #1
 8010574:	460f      	mov	r7, r1
 8010576:	461e      	mov	r6, r3
 8010578:	d102      	bne.n	8010580 <rmw_validate_namespace_with_size+0x18>
 801057a:	7803      	ldrb	r3, [r0, #0]
 801057c:	2b2f      	cmp	r3, #47	; 0x2f
 801057e:	d019      	beq.n	80105b4 <rmw_validate_namespace_with_size+0x4c>
 8010580:	aa01      	add	r2, sp, #4
 8010582:	4669      	mov	r1, sp
 8010584:	f7fa fbda 	bl	800ad3c <rmw_validate_full_topic_name>
 8010588:	b990      	cbnz	r0, 80105b0 <rmw_validate_namespace_with_size+0x48>
 801058a:	9b00      	ldr	r3, [sp, #0]
 801058c:	b14b      	cbz	r3, 80105a2 <rmw_validate_namespace_with_size+0x3a>
 801058e:	2b07      	cmp	r3, #7
 8010590:	d007      	beq.n	80105a2 <rmw_validate_namespace_with_size+0x3a>
 8010592:	1e5a      	subs	r2, r3, #1
 8010594:	2a05      	cmp	r2, #5
 8010596:	d82b      	bhi.n	80105f0 <rmw_validate_namespace_with_size+0x88>
 8010598:	e8df f002 	tbb	[pc, r2]
 801059c:	24211e1b 	.word	0x24211e1b
 80105a0:	1427      	.short	0x1427
 80105a2:	2ff5      	cmp	r7, #245	; 0xf5
 80105a4:	d906      	bls.n	80105b4 <rmw_validate_namespace_with_size+0x4c>
 80105a6:	2307      	movs	r3, #7
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	b10e      	cbz	r6, 80105b0 <rmw_validate_namespace_with_size+0x48>
 80105ac:	23f4      	movs	r3, #244	; 0xf4
 80105ae:	6033      	str	r3, [r6, #0]
 80105b0:	b042      	add	sp, #264	; 0x108
 80105b2:	bdd0      	pop	{r4, r6, r7, pc}
 80105b4:	2000      	movs	r0, #0
 80105b6:	6020      	str	r0, [r4, #0]
 80105b8:	b042      	add	sp, #264	; 0x108
 80105ba:	bdd0      	pop	{r4, r6, r7, pc}
 80105bc:	200b      	movs	r0, #11
 80105be:	4770      	bx	lr
 80105c0:	200b      	movs	r0, #11
 80105c2:	e7f5      	b.n	80105b0 <rmw_validate_namespace_with_size+0x48>
 80105c4:	2306      	movs	r3, #6
 80105c6:	6023      	str	r3, [r4, #0]
 80105c8:	2e00      	cmp	r6, #0
 80105ca:	d0f1      	beq.n	80105b0 <rmw_validate_namespace_with_size+0x48>
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	6033      	str	r3, [r6, #0]
 80105d0:	e7ee      	b.n	80105b0 <rmw_validate_namespace_with_size+0x48>
 80105d2:	2301      	movs	r3, #1
 80105d4:	6023      	str	r3, [r4, #0]
 80105d6:	e7f7      	b.n	80105c8 <rmw_validate_namespace_with_size+0x60>
 80105d8:	2302      	movs	r3, #2
 80105da:	6023      	str	r3, [r4, #0]
 80105dc:	e7f4      	b.n	80105c8 <rmw_validate_namespace_with_size+0x60>
 80105de:	2303      	movs	r3, #3
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	e7f1      	b.n	80105c8 <rmw_validate_namespace_with_size+0x60>
 80105e4:	2304      	movs	r3, #4
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	e7ee      	b.n	80105c8 <rmw_validate_namespace_with_size+0x60>
 80105ea:	2305      	movs	r3, #5
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	e7eb      	b.n	80105c8 <rmw_validate_namespace_with_size+0x60>
 80105f0:	4a03      	ldr	r2, [pc, #12]	; (8010600 <rmw_validate_namespace_with_size+0x98>)
 80105f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80105f6:	a802      	add	r0, sp, #8
 80105f8:	f7ff ff1e 	bl	8010438 <rcutils_snprintf>
 80105fc:	2001      	movs	r0, #1
 80105fe:	e7d7      	b.n	80105b0 <rmw_validate_namespace_with_size+0x48>
 8010600:	08014d54 	.word	0x08014d54

08010604 <rmw_validate_namespace>:
 8010604:	b168      	cbz	r0, 8010622 <rmw_validate_namespace+0x1e>
 8010606:	b570      	push	{r4, r5, r6, lr}
 8010608:	460d      	mov	r5, r1
 801060a:	4616      	mov	r6, r2
 801060c:	4604      	mov	r4, r0
 801060e:	f7ef fe09 	bl	8000224 <strlen>
 8010612:	4633      	mov	r3, r6
 8010614:	4601      	mov	r1, r0
 8010616:	462a      	mov	r2, r5
 8010618:	4620      	mov	r0, r4
 801061a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801061e:	f7ff bfa3 	b.w	8010568 <rmw_validate_namespace_with_size>
 8010622:	200b      	movs	r0, #11
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop

08010628 <rmw_namespace_validation_result_string>:
 8010628:	2807      	cmp	r0, #7
 801062a:	bf9a      	itte	ls
 801062c:	4b02      	ldrls	r3, [pc, #8]	; (8010638 <rmw_namespace_validation_result_string+0x10>)
 801062e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010632:	4802      	ldrhi	r0, [pc, #8]	; (801063c <rmw_namespace_validation_result_string+0x14>)
 8010634:	4770      	bx	lr
 8010636:	bf00      	nop
 8010638:	08014f4c 	.word	0x08014f4c
 801063c:	08014da4 	.word	0x08014da4

08010640 <rmw_validate_node_name>:
 8010640:	2800      	cmp	r0, #0
 8010642:	d03b      	beq.n	80106bc <rmw_validate_node_name+0x7c>
 8010644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010648:	460f      	mov	r7, r1
 801064a:	2900      	cmp	r1, #0
 801064c:	d038      	beq.n	80106c0 <rmw_validate_node_name+0x80>
 801064e:	4615      	mov	r5, r2
 8010650:	4604      	mov	r4, r0
 8010652:	f7ef fde7 	bl	8000224 <strlen>
 8010656:	b1e0      	cbz	r0, 8010692 <rmw_validate_node_name+0x52>
 8010658:	1e63      	subs	r3, r4, #1
 801065a:	eb03 0e00 	add.w	lr, r3, r0
 801065e:	f1c4 0c01 	rsb	ip, r4, #1
 8010662:	eb0c 0803 	add.w	r8, ip, r3
 8010666:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801066a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801066e:	f026 0220 	bic.w	r2, r6, #32
 8010672:	2909      	cmp	r1, #9
 8010674:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8010678:	d913      	bls.n	80106a2 <rmw_validate_node_name+0x62>
 801067a:	2a19      	cmp	r2, #25
 801067c:	d911      	bls.n	80106a2 <rmw_validate_node_name+0x62>
 801067e:	2e5f      	cmp	r6, #95	; 0x5f
 8010680:	d00f      	beq.n	80106a2 <rmw_validate_node_name+0x62>
 8010682:	2302      	movs	r3, #2
 8010684:	603b      	str	r3, [r7, #0]
 8010686:	b10d      	cbz	r5, 801068c <rmw_validate_node_name+0x4c>
 8010688:	f8c5 8000 	str.w	r8, [r5]
 801068c:	2000      	movs	r0, #0
 801068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010692:	2301      	movs	r3, #1
 8010694:	603b      	str	r3, [r7, #0]
 8010696:	2d00      	cmp	r5, #0
 8010698:	d0f8      	beq.n	801068c <rmw_validate_node_name+0x4c>
 801069a:	2000      	movs	r0, #0
 801069c:	6028      	str	r0, [r5, #0]
 801069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a2:	4573      	cmp	r3, lr
 80106a4:	d1dd      	bne.n	8010662 <rmw_validate_node_name+0x22>
 80106a6:	7822      	ldrb	r2, [r4, #0]
 80106a8:	4b0d      	ldr	r3, [pc, #52]	; (80106e0 <rmw_validate_node_name+0xa0>)
 80106aa:	5cd3      	ldrb	r3, [r2, r3]
 80106ac:	f013 0304 	ands.w	r3, r3, #4
 80106b0:	d110      	bne.n	80106d4 <rmw_validate_node_name+0x94>
 80106b2:	28ff      	cmp	r0, #255	; 0xff
 80106b4:	d806      	bhi.n	80106c4 <rmw_validate_node_name+0x84>
 80106b6:	603b      	str	r3, [r7, #0]
 80106b8:	4618      	mov	r0, r3
 80106ba:	e7e8      	b.n	801068e <rmw_validate_node_name+0x4e>
 80106bc:	200b      	movs	r0, #11
 80106be:	4770      	bx	lr
 80106c0:	200b      	movs	r0, #11
 80106c2:	e7e4      	b.n	801068e <rmw_validate_node_name+0x4e>
 80106c4:	2204      	movs	r2, #4
 80106c6:	603a      	str	r2, [r7, #0]
 80106c8:	2d00      	cmp	r5, #0
 80106ca:	d0df      	beq.n	801068c <rmw_validate_node_name+0x4c>
 80106cc:	22fe      	movs	r2, #254	; 0xfe
 80106ce:	4618      	mov	r0, r3
 80106d0:	602a      	str	r2, [r5, #0]
 80106d2:	e7dc      	b.n	801068e <rmw_validate_node_name+0x4e>
 80106d4:	2303      	movs	r3, #3
 80106d6:	603b      	str	r3, [r7, #0]
 80106d8:	2d00      	cmp	r5, #0
 80106da:	d1de      	bne.n	801069a <rmw_validate_node_name+0x5a>
 80106dc:	e7d6      	b.n	801068c <rmw_validate_node_name+0x4c>
 80106de:	bf00      	nop
 80106e0:	080152a1 	.word	0x080152a1

080106e4 <rmw_node_name_validation_result_string>:
 80106e4:	2804      	cmp	r0, #4
 80106e6:	bf9a      	itte	ls
 80106e8:	4b02      	ldrls	r3, [pc, #8]	; (80106f4 <rmw_node_name_validation_result_string+0x10>)
 80106ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80106ee:	4802      	ldrhi	r0, [pc, #8]	; (80106f8 <rmw_node_name_validation_result_string+0x14>)
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	08015058 	.word	0x08015058
 80106f8:	08014f6c 	.word	0x08014f6c

080106fc <get_memory>:
 80106fc:	4603      	mov	r3, r0
 80106fe:	6840      	ldr	r0, [r0, #4]
 8010700:	b158      	cbz	r0, 801071a <get_memory+0x1e>
 8010702:	6882      	ldr	r2, [r0, #8]
 8010704:	605a      	str	r2, [r3, #4]
 8010706:	b10a      	cbz	r2, 801070c <get_memory+0x10>
 8010708:	2100      	movs	r1, #0
 801070a:	6051      	str	r1, [r2, #4]
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	6082      	str	r2, [r0, #8]
 8010710:	b102      	cbz	r2, 8010714 <get_memory+0x18>
 8010712:	6050      	str	r0, [r2, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	6042      	str	r2, [r0, #4]
 8010718:	6018      	str	r0, [r3, #0]
 801071a:	4770      	bx	lr

0801071c <put_memory>:
 801071c:	684b      	ldr	r3, [r1, #4]
 801071e:	b10b      	cbz	r3, 8010724 <put_memory+0x8>
 8010720:	688a      	ldr	r2, [r1, #8]
 8010722:	609a      	str	r2, [r3, #8]
 8010724:	688a      	ldr	r2, [r1, #8]
 8010726:	b102      	cbz	r2, 801072a <put_memory+0xe>
 8010728:	6053      	str	r3, [r2, #4]
 801072a:	6803      	ldr	r3, [r0, #0]
 801072c:	428b      	cmp	r3, r1
 801072e:	6843      	ldr	r3, [r0, #4]
 8010730:	bf08      	it	eq
 8010732:	6002      	streq	r2, [r0, #0]
 8010734:	608b      	str	r3, [r1, #8]
 8010736:	b103      	cbz	r3, 801073a <put_memory+0x1e>
 8010738:	6059      	str	r1, [r3, #4]
 801073a:	2300      	movs	r3, #0
 801073c:	604b      	str	r3, [r1, #4]
 801073e:	6041      	str	r1, [r0, #4]
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop

08010744 <rmw_destroy_client>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	b128      	cbz	r0, 8010754 <rmw_destroy_client+0x10>
 8010748:	4604      	mov	r4, r0
 801074a:	6800      	ldr	r0, [r0, #0]
 801074c:	460d      	mov	r5, r1
 801074e:	f7fb f91d 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 8010752:	b910      	cbnz	r0, 801075a <rmw_destroy_client+0x16>
 8010754:	2401      	movs	r4, #1
 8010756:	4620      	mov	r0, r4
 8010758:	bd70      	pop	{r4, r5, r6, pc}
 801075a:	6863      	ldr	r3, [r4, #4]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d0f9      	beq.n	8010754 <rmw_destroy_client+0x10>
 8010760:	2d00      	cmp	r5, #0
 8010762:	d0f7      	beq.n	8010754 <rmw_destroy_client+0x10>
 8010764:	6828      	ldr	r0, [r5, #0]
 8010766:	f7fb f911 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 801076a:	2800      	cmp	r0, #0
 801076c:	d0f2      	beq.n	8010754 <rmw_destroy_client+0x10>
 801076e:	686e      	ldr	r6, [r5, #4]
 8010770:	2e00      	cmp	r6, #0
 8010772:	d0ef      	beq.n	8010754 <rmw_destroy_client+0x10>
 8010774:	6864      	ldr	r4, [r4, #4]
 8010776:	6932      	ldr	r2, [r6, #16]
 8010778:	6920      	ldr	r0, [r4, #16]
 801077a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801077e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010782:	6819      	ldr	r1, [r3, #0]
 8010784:	f7fb fa48 	bl	800bc18 <uxr_buffer_cancel_data>
 8010788:	4602      	mov	r2, r0
 801078a:	6920      	ldr	r0, [r4, #16]
 801078c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010790:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010794:	f7fb f82c 	bl	800b7f0 <run_xrce_session>
 8010798:	6920      	ldr	r0, [r4, #16]
 801079a:	6932      	ldr	r2, [r6, #16]
 801079c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80107a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107a4:	6819      	ldr	r1, [r3, #0]
 80107a6:	f7fb f915 	bl	800b9d4 <uxr_buffer_delete_entity>
 80107aa:	4602      	mov	r2, r0
 80107ac:	6920      	ldr	r0, [r4, #16]
 80107ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80107b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80107b6:	f7fb f81b 	bl	800b7f0 <run_xrce_session>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	4628      	mov	r0, r5
 80107be:	bf14      	ite	ne
 80107c0:	2400      	movne	r4, #0
 80107c2:	2402      	moveq	r4, #2
 80107c4:	f7fa ff04 	bl	800b5d0 <rmw_uxrce_fini_client_memory>
 80107c8:	e7c5      	b.n	8010756 <rmw_destroy_client+0x12>
 80107ca:	bf00      	nop

080107cc <rmw_get_implementation_identifier>:
 80107cc:	4b01      	ldr	r3, [pc, #4]	; (80107d4 <rmw_get_implementation_identifier+0x8>)
 80107ce:	6818      	ldr	r0, [r3, #0]
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop
 80107d4:	08015084 	.word	0x08015084

080107d8 <rmw_init_options_init>:
 80107d8:	b084      	sub	sp, #16
 80107da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107de:	ad09      	add	r5, sp, #36	; 0x24
 80107e0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80107e4:	b130      	cbz	r0, 80107f4 <rmw_init_options_init+0x1c>
 80107e6:	4604      	mov	r4, r0
 80107e8:	4628      	mov	r0, r5
 80107ea:	f7fa f8eb 	bl	800a9c4 <rcutils_allocator_is_valid>
 80107ee:	b108      	cbz	r0, 80107f4 <rmw_init_options_init+0x1c>
 80107f0:	68a3      	ldr	r3, [r4, #8]
 80107f2:	b123      	cbz	r3, 80107fe <rmw_init_options_init+0x26>
 80107f4:	200b      	movs	r0, #11
 80107f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107fa:	b004      	add	sp, #16
 80107fc:	4770      	bx	lr
 80107fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010800:	4f1c      	ldr	r7, [pc, #112]	; (8010874 <rmw_init_options_init+0x9c>)
 8010802:	682e      	ldr	r6, [r5, #0]
 8010804:	683d      	ldr	r5, [r7, #0]
 8010806:	60a5      	str	r5, [r4, #8]
 8010808:	f04f 0800 	mov.w	r8, #0
 801080c:	f04f 0900 	mov.w	r9, #0
 8010810:	f104 0520 	add.w	r5, r4, #32
 8010814:	e9c4 8900 	strd	r8, r9, [r4]
 8010818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801081a:	4b17      	ldr	r3, [pc, #92]	; (8010878 <rmw_init_options_init+0xa0>)
 801081c:	4817      	ldr	r0, [pc, #92]	; (801087c <rmw_init_options_init+0xa4>)
 801081e:	602e      	str	r6, [r5, #0]
 8010820:	4917      	ldr	r1, [pc, #92]	; (8010880 <rmw_init_options_init+0xa8>)
 8010822:	61e3      	str	r3, [r4, #28]
 8010824:	2203      	movs	r2, #3
 8010826:	f7fa fe23 	bl	800b470 <rmw_uxrce_init_init_options_impl_memory>
 801082a:	4814      	ldr	r0, [pc, #80]	; (801087c <rmw_init_options_init+0xa4>)
 801082c:	f7ff ff66 	bl	80106fc <get_memory>
 8010830:	b1e8      	cbz	r0, 801086e <rmw_init_options_init+0x96>
 8010832:	4a14      	ldr	r2, [pc, #80]	; (8010884 <rmw_init_options_init+0xac>)
 8010834:	68c3      	ldr	r3, [r0, #12]
 8010836:	6851      	ldr	r1, [r2, #4]
 8010838:	7810      	ldrb	r0, [r2, #0]
 801083a:	6363      	str	r3, [r4, #52]	; 0x34
 801083c:	7418      	strb	r0, [r3, #16]
 801083e:	6159      	str	r1, [r3, #20]
 8010840:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8010844:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8010848:	e9c3 5006 	strd	r5, r0, [r3, #24]
 801084c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8010850:	f7fc fd10 	bl	800d274 <uxr_nanos>
 8010854:	f002 fdd0 	bl	80133f8 <srand>
 8010858:	f002 fdfc 	bl	8013454 <rand>
 801085c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801085e:	6298      	str	r0, [r3, #40]	; 0x28
 8010860:	2800      	cmp	r0, #0
 8010862:	d0f9      	beq.n	8010858 <rmw_init_options_init+0x80>
 8010864:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010868:	2000      	movs	r0, #0
 801086a:	b004      	add	sp, #16
 801086c:	4770      	bx	lr
 801086e:	2001      	movs	r0, #1
 8010870:	e7c1      	b.n	80107f6 <rmw_init_options_init+0x1e>
 8010872:	bf00      	nop
 8010874:	08015084 	.word	0x08015084
 8010878:	08014bf8 	.word	0x08014bf8
 801087c:	2000f56c 	.word	0x2000f56c
 8010880:	2000f1c0 	.word	0x2000f1c0
 8010884:	2000c250 	.word	0x2000c250

08010888 <rmw_init_options_copy>:
 8010888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088a:	b158      	cbz	r0, 80108a4 <rmw_init_options_copy+0x1c>
 801088c:	460e      	mov	r6, r1
 801088e:	b149      	cbz	r1, 80108a4 <rmw_init_options_copy+0x1c>
 8010890:	4604      	mov	r4, r0
 8010892:	6880      	ldr	r0, [r0, #8]
 8010894:	b120      	cbz	r0, 80108a0 <rmw_init_options_copy+0x18>
 8010896:	4b1b      	ldr	r3, [pc, #108]	; (8010904 <rmw_init_options_copy+0x7c>)
 8010898:	6819      	ldr	r1, [r3, #0]
 801089a:	f7ef fcb9 	bl	8000210 <strcmp>
 801089e:	bb60      	cbnz	r0, 80108fa <rmw_init_options_copy+0x72>
 80108a0:	68b3      	ldr	r3, [r6, #8]
 80108a2:	b113      	cbz	r3, 80108aa <rmw_init_options_copy+0x22>
 80108a4:	230b      	movs	r3, #11
 80108a6:	4618      	mov	r0, r3
 80108a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108aa:	4623      	mov	r3, r4
 80108ac:	4632      	mov	r2, r6
 80108ae:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80108b2:	681d      	ldr	r5, [r3, #0]
 80108b4:	6858      	ldr	r0, [r3, #4]
 80108b6:	6899      	ldr	r1, [r3, #8]
 80108b8:	68df      	ldr	r7, [r3, #12]
 80108ba:	60d7      	str	r7, [r2, #12]
 80108bc:	3310      	adds	r3, #16
 80108be:	4563      	cmp	r3, ip
 80108c0:	6015      	str	r5, [r2, #0]
 80108c2:	6050      	str	r0, [r2, #4]
 80108c4:	6091      	str	r1, [r2, #8]
 80108c6:	f102 0210 	add.w	r2, r2, #16
 80108ca:	d1f2      	bne.n	80108b2 <rmw_init_options_copy+0x2a>
 80108cc:	6819      	ldr	r1, [r3, #0]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	480d      	ldr	r0, [pc, #52]	; (8010908 <rmw_init_options_copy+0x80>)
 80108d2:	6053      	str	r3, [r2, #4]
 80108d4:	6011      	str	r1, [r2, #0]
 80108d6:	f7ff ff11 	bl	80106fc <get_memory>
 80108da:	b188      	cbz	r0, 8010900 <rmw_init_options_copy+0x78>
 80108dc:	68c5      	ldr	r5, [r0, #12]
 80108de:	6375      	str	r5, [r6, #52]	; 0x34
 80108e0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80108e2:	3610      	adds	r6, #16
 80108e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80108e6:	f105 0410 	add.w	r4, r5, #16
 80108ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108ec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80108f0:	2300      	movs	r3, #0
 80108f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80108f6:	4618      	mov	r0, r3
 80108f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108fa:	230c      	movs	r3, #12
 80108fc:	4618      	mov	r0, r3
 80108fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010900:	2301      	movs	r3, #1
 8010902:	e7d0      	b.n	80108a6 <rmw_init_options_copy+0x1e>
 8010904:	08015084 	.word	0x08015084
 8010908:	2000f56c 	.word	0x2000f56c

0801090c <rmw_init_options_fini>:
 801090c:	2800      	cmp	r0, #0
 801090e:	d036      	beq.n	801097e <rmw_init_options_fini+0x72>
 8010910:	b530      	push	{r4, r5, lr}
 8010912:	4604      	mov	r4, r0
 8010914:	b08f      	sub	sp, #60	; 0x3c
 8010916:	3020      	adds	r0, #32
 8010918:	f7fa f854 	bl	800a9c4 <rcutils_allocator_is_valid>
 801091c:	b328      	cbz	r0, 801096a <rmw_init_options_fini+0x5e>
 801091e:	68a0      	ldr	r0, [r4, #8]
 8010920:	b120      	cbz	r0, 801092c <rmw_init_options_fini+0x20>
 8010922:	4b18      	ldr	r3, [pc, #96]	; (8010984 <rmw_init_options_fini+0x78>)
 8010924:	6819      	ldr	r1, [r3, #0]
 8010926:	f7ef fc73 	bl	8000210 <strcmp>
 801092a:	bb30      	cbnz	r0, 801097a <rmw_init_options_fini+0x6e>
 801092c:	4b16      	ldr	r3, [pc, #88]	; (8010988 <rmw_init_options_fini+0x7c>)
 801092e:	6819      	ldr	r1, [r3, #0]
 8010930:	b1f9      	cbz	r1, 8010972 <rmw_init_options_fini+0x66>
 8010932:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010934:	e001      	b.n	801093a <rmw_init_options_fini+0x2e>
 8010936:	6889      	ldr	r1, [r1, #8]
 8010938:	b1d9      	cbz	r1, 8010972 <rmw_init_options_fini+0x66>
 801093a:	68cb      	ldr	r3, [r1, #12]
 801093c:	429a      	cmp	r2, r3
 801093e:	d1fa      	bne.n	8010936 <rmw_init_options_fini+0x2a>
 8010940:	4811      	ldr	r0, [pc, #68]	; (8010988 <rmw_init_options_fini+0x7c>)
 8010942:	f7ff feeb 	bl	801071c <put_memory>
 8010946:	466d      	mov	r5, sp
 8010948:	4668      	mov	r0, sp
 801094a:	f7ff fde7 	bl	801051c <rmw_get_zero_initialized_init_options>
 801094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801095a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801095e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010962:	2300      	movs	r3, #0
 8010964:	4618      	mov	r0, r3
 8010966:	b00f      	add	sp, #60	; 0x3c
 8010968:	bd30      	pop	{r4, r5, pc}
 801096a:	230b      	movs	r3, #11
 801096c:	4618      	mov	r0, r3
 801096e:	b00f      	add	sp, #60	; 0x3c
 8010970:	bd30      	pop	{r4, r5, pc}
 8010972:	2301      	movs	r3, #1
 8010974:	4618      	mov	r0, r3
 8010976:	b00f      	add	sp, #60	; 0x3c
 8010978:	bd30      	pop	{r4, r5, pc}
 801097a:	230c      	movs	r3, #12
 801097c:	e7f2      	b.n	8010964 <rmw_init_options_fini+0x58>
 801097e:	230b      	movs	r3, #11
 8010980:	4618      	mov	r0, r3
 8010982:	4770      	bx	lr
 8010984:	08015084 	.word	0x08015084
 8010988:	2000f56c 	.word	0x2000f56c

0801098c <rmw_init>:
 801098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010990:	b082      	sub	sp, #8
 8010992:	2800      	cmp	r0, #0
 8010994:	f000 80d6 	beq.w	8010b44 <rmw_init+0x1b8>
 8010998:	460e      	mov	r6, r1
 801099a:	2900      	cmp	r1, #0
 801099c:	f000 80d2 	beq.w	8010b44 <rmw_init+0x1b8>
 80109a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80109a2:	4605      	mov	r5, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	f000 80cd 	beq.w	8010b44 <rmw_init+0x1b8>
 80109aa:	4b79      	ldr	r3, [pc, #484]	; (8010b90 <rmw_init+0x204>)
 80109ac:	6880      	ldr	r0, [r0, #8]
 80109ae:	f8d3 9000 	ldr.w	r9, [r3]
 80109b2:	b128      	cbz	r0, 80109c0 <rmw_init+0x34>
 80109b4:	4649      	mov	r1, r9
 80109b6:	f7ef fc2b 	bl	8000210 <strcmp>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	f040 80cc 	bne.w	8010b58 <rmw_init+0x1cc>
 80109c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80109c4:	68eb      	ldr	r3, [r5, #12]
 80109c6:	61f3      	str	r3, [r6, #28]
 80109c8:	e9c6 0100 	strd	r0, r1, [r6]
 80109cc:	2201      	movs	r2, #1
 80109ce:	4971      	ldr	r1, [pc, #452]	; (8010b94 <rmw_init+0x208>)
 80109d0:	4871      	ldr	r0, [pc, #452]	; (8010b98 <rmw_init+0x20c>)
 80109d2:	f8c6 9008 	str.w	r9, [r6, #8]
 80109d6:	f7fa fcf3 	bl	800b3c0 <rmw_uxrce_init_session_memory>
 80109da:	4870      	ldr	r0, [pc, #448]	; (8010b9c <rmw_init+0x210>)
 80109dc:	4970      	ldr	r1, [pc, #448]	; (8010ba0 <rmw_init+0x214>)
 80109de:	2204      	movs	r2, #4
 80109e0:	f7fa fd28 	bl	800b434 <rmw_uxrce_init_static_input_buffer_memory>
 80109e4:	486c      	ldr	r0, [pc, #432]	; (8010b98 <rmw_init+0x20c>)
 80109e6:	f7ff fe89 	bl	80106fc <get_memory>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	f000 80af 	beq.w	8010b4e <rmw_init+0x1c2>
 80109f0:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80109f2:	68c4      	ldr	r4, [r0, #12]
 80109f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109f6:	7c39      	ldrb	r1, [r7, #16]
 80109f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80109fc:	9001      	str	r0, [sp, #4]
 80109fe:	6a38      	ldr	r0, [r7, #32]
 8010a00:	9000      	str	r0, [sp, #0]
 8010a02:	f104 0a10 	add.w	sl, r4, #16
 8010a06:	4650      	mov	r0, sl
 8010a08:	f000 ff1c 	bl	8011844 <uxr_set_custom_transport_callbacks>
 8010a0c:	f241 5294 	movw	r2, #5524	; 0x1594
 8010a10:	f241 5398 	movw	r3, #5528	; 0x1598
 8010a14:	f04f 0800 	mov.w	r8, #0
 8010a18:	f241 509c 	movw	r0, #5532	; 0x159c
 8010a1c:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8010a20:	f844 8002 	str.w	r8, [r4, r2]
 8010a24:	f844 8003 	str.w	r8, [r4, r3]
 8010a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010a2c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8010a30:	f844 8000 	str.w	r8, [r4, r0]
 8010a34:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8010a38:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8010a3c:	4859      	ldr	r0, [pc, #356]	; (8010ba4 <rmw_init+0x218>)
 8010a3e:	f8c1 8000 	str.w	r8, [r1]
 8010a42:	2201      	movs	r2, #1
 8010a44:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8010a48:	4957      	ldr	r1, [pc, #348]	; (8010ba8 <rmw_init+0x21c>)
 8010a4a:	64b4      	str	r4, [r6, #72]	; 0x48
 8010a4c:	f7fa fc9e 	bl	800b38c <rmw_uxrce_init_node_memory>
 8010a50:	4956      	ldr	r1, [pc, #344]	; (8010bac <rmw_init+0x220>)
 8010a52:	4857      	ldr	r0, [pc, #348]	; (8010bb0 <rmw_init+0x224>)
 8010a54:	2205      	movs	r2, #5
 8010a56:	f7fa fc7f 	bl	800b358 <rmw_uxrce_init_subscription_memory>
 8010a5a:	4956      	ldr	r1, [pc, #344]	; (8010bb4 <rmw_init+0x228>)
 8010a5c:	4856      	ldr	r0, [pc, #344]	; (8010bb8 <rmw_init+0x22c>)
 8010a5e:	220a      	movs	r2, #10
 8010a60:	f7fa fc60 	bl	800b324 <rmw_uxrce_init_publisher_memory>
 8010a64:	4955      	ldr	r1, [pc, #340]	; (8010bbc <rmw_init+0x230>)
 8010a66:	4856      	ldr	r0, [pc, #344]	; (8010bc0 <rmw_init+0x234>)
 8010a68:	2201      	movs	r2, #1
 8010a6a:	f7fa fc27 	bl	800b2bc <rmw_uxrce_init_service_memory>
 8010a6e:	4955      	ldr	r1, [pc, #340]	; (8010bc4 <rmw_init+0x238>)
 8010a70:	4855      	ldr	r0, [pc, #340]	; (8010bc8 <rmw_init+0x23c>)
 8010a72:	2201      	movs	r2, #1
 8010a74:	f7fa fc3c 	bl	800b2f0 <rmw_uxrce_init_client_memory>
 8010a78:	4954      	ldr	r1, [pc, #336]	; (8010bcc <rmw_init+0x240>)
 8010a7a:	4855      	ldr	r0, [pc, #340]	; (8010bd0 <rmw_init+0x244>)
 8010a7c:	220f      	movs	r2, #15
 8010a7e:	f7fa fcbd 	bl	800b3fc <rmw_uxrce_init_topic_memory>
 8010a82:	4954      	ldr	r1, [pc, #336]	; (8010bd4 <rmw_init+0x248>)
 8010a84:	4854      	ldr	r0, [pc, #336]	; (8010bd8 <rmw_init+0x24c>)
 8010a86:	2203      	movs	r2, #3
 8010a88:	f7fa fcf2 	bl	800b470 <rmw_uxrce_init_init_options_impl_memory>
 8010a8c:	4953      	ldr	r1, [pc, #332]	; (8010bdc <rmw_init+0x250>)
 8010a8e:	4854      	ldr	r0, [pc, #336]	; (8010be0 <rmw_init+0x254>)
 8010a90:	2204      	movs	r2, #4
 8010a92:	f7fa fd07 	bl	800b4a4 <rmw_uxrce_init_wait_set_memory>
 8010a96:	4953      	ldr	r1, [pc, #332]	; (8010be4 <rmw_init+0x258>)
 8010a98:	4853      	ldr	r0, [pc, #332]	; (8010be8 <rmw_init+0x25c>)
 8010a9a:	2204      	movs	r2, #4
 8010a9c:	f7fa fd1e 	bl	800b4dc <rmw_uxrce_init_guard_condition_memory>
 8010aa0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8010aa2:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8010aa4:	4642      	mov	r2, r8
 8010aa6:	f000 faf1 	bl	801108c <rmw_uxrce_transport_init>
 8010aaa:	4607      	mov	r7, r0
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d158      	bne.n	8010b62 <rmw_init+0x1d6>
 8010ab0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010ab2:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8010ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ab8:	4628      	mov	r0, r5
 8010aba:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8010abe:	f7fb fa25 	bl	800bf0c <uxr_init_session>
 8010ac2:	494a      	ldr	r1, [pc, #296]	; (8010bec <rmw_init+0x260>)
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	f7fb fa42 	bl	800bf50 <uxr_set_topic_callback>
 8010acc:	4948      	ldr	r1, [pc, #288]	; (8010bf0 <rmw_init+0x264>)
 8010ace:	463a      	mov	r2, r7
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f7fb fa39 	bl	800bf48 <uxr_set_status_callback>
 8010ad6:	4947      	ldr	r1, [pc, #284]	; (8010bf4 <rmw_init+0x268>)
 8010ad8:	463a      	mov	r2, r7
 8010ada:	4628      	mov	r0, r5
 8010adc:	f7fb fa3c 	bl	800bf58 <uxr_set_request_callback>
 8010ae0:	4945      	ldr	r1, [pc, #276]	; (8010bf8 <rmw_init+0x26c>)
 8010ae2:	463a      	mov	r2, r7
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	f7fb fa3b 	bl	800bf60 <uxr_set_reply_callback>
 8010aea:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010aee:	2304      	movs	r3, #4
 8010af0:	0092      	lsls	r2, r2, #2
 8010af2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8010af6:	4628      	mov	r0, r5
 8010af8:	f7fb fa72 	bl	800bfe0 <uxr_create_input_reliable_stream>
 8010afc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010b00:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8010b04:	0092      	lsls	r2, r2, #2
 8010b06:	2304      	movs	r3, #4
 8010b08:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	f7fb fa3d 	bl	800bf8c <uxr_create_output_reliable_stream>
 8010b12:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8010b16:	4628      	mov	r0, r5
 8010b18:	f7fb fa5c 	bl	800bfd4 <uxr_create_input_best_effort_stream>
 8010b1c:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8010b20:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8010b24:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010b28:	4628      	mov	r0, r5
 8010b2a:	3114      	adds	r1, #20
 8010b2c:	f7fb fa1c 	bl	800bf68 <uxr_create_output_best_effort_stream>
 8010b30:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8010b34:	4628      	mov	r0, r5
 8010b36:	f7fb fead 	bl	800c894 <uxr_create_session>
 8010b3a:	b1f8      	cbz	r0, 8010b7c <rmw_init+0x1f0>
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	b002      	add	sp, #8
 8010b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b44:	270b      	movs	r7, #11
 8010b46:	4638      	mov	r0, r7
 8010b48:	b002      	add	sp, #8
 8010b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b4e:	2701      	movs	r7, #1
 8010b50:	4638      	mov	r0, r7
 8010b52:	b002      	add	sp, #8
 8010b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b58:	270c      	movs	r7, #12
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	b002      	add	sp, #8
 8010b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b62:	4650      	mov	r0, sl
 8010b64:	f000 feae 	bl	80118c4 <uxr_close_custom_transport>
 8010b68:	480b      	ldr	r0, [pc, #44]	; (8010b98 <rmw_init+0x20c>)
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	f7ff fdd6 	bl	801071c <put_memory>
 8010b70:	4638      	mov	r0, r7
 8010b72:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8010b76:	b002      	add	sp, #8
 8010b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b7c:	4650      	mov	r0, sl
 8010b7e:	f000 fea1 	bl	80118c4 <uxr_close_custom_transport>
 8010b82:	4805      	ldr	r0, [pc, #20]	; (8010b98 <rmw_init+0x20c>)
 8010b84:	4621      	mov	r1, r4
 8010b86:	f7ff fdc9 	bl	801071c <put_memory>
 8010b8a:	64b7      	str	r7, [r6, #72]	; 0x48
 8010b8c:	2701      	movs	r7, #1
 8010b8e:	e7d5      	b.n	8010b3c <rmw_init+0x1b0>
 8010b90:	08015084 	.word	0x08015084
 8010b94:	2000f648 	.word	0x2000f648
 8010b98:	2000f418 	.word	0x2000f418
 8010b9c:	2000c270 	.word	0x2000c270
 8010ba0:	2000d050 	.word	0x2000d050
 8010ba4:	2000f244 	.word	0x2000f244
 8010ba8:	2000f428 	.word	0x2000f428
 8010bac:	2000cb78 	.word	0x2000cb78
 8010bb0:	2000f4dc 	.word	0x2000f4dc
 8010bb4:	2000c290 	.word	0x2000c290
 8010bb8:	2000c280 	.word	0x2000c280
 8010bbc:	2000f580 	.word	0x2000f580
 8010bc0:	2000f4cc 	.word	0x2000f4cc
 8010bc4:	2000cf88 	.word	0x2000cf88
 8010bc8:	2000cb00 	.word	0x2000cb00
 8010bcc:	2000f254 	.word	0x2000f254
 8010bd0:	2000f408 	.word	0x2000f408
 8010bd4:	2000f1c0 	.word	0x2000f1c0
 8010bd8:	2000f56c 	.word	0x2000f56c
 8010bdc:	2000f150 	.word	0x2000f150
 8010be0:	20010bf0 	.word	0x20010bf0
 8010be4:	2000f4ec 	.word	0x2000f4ec
 8010be8:	2000f3f8 	.word	0x2000f3f8
 8010bec:	08012e15 	.word	0x08012e15
 8010bf0:	08012e0d 	.word	0x08012e0d
 8010bf4:	08012ea9 	.word	0x08012ea9
 8010bf8:	08012f41 	.word	0x08012f41

08010bfc <rmw_context_fini>:
 8010bfc:	4b17      	ldr	r3, [pc, #92]	; (8010c5c <rmw_context_fini+0x60>)
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	681c      	ldr	r4, [r3, #0]
 8010c02:	4605      	mov	r5, r0
 8010c04:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8010c06:	b33c      	cbz	r4, 8010c58 <rmw_context_fini+0x5c>
 8010c08:	2600      	movs	r6, #0
 8010c0a:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8010c0e:	691a      	ldr	r2, [r3, #16]
 8010c10:	4282      	cmp	r2, r0
 8010c12:	d018      	beq.n	8010c46 <rmw_context_fini+0x4a>
 8010c14:	2c00      	cmp	r4, #0
 8010c16:	d1f8      	bne.n	8010c0a <rmw_context_fini+0xe>
 8010c18:	b188      	cbz	r0, 8010c3e <rmw_context_fini+0x42>
 8010c1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010c1e:	789b      	ldrb	r3, [r3, #2]
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	bf14      	ite	ne
 8010c24:	210a      	movne	r1, #10
 8010c26:	2100      	moveq	r1, #0
 8010c28:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010c2c:	f7fb fff4 	bl	800cc18 <uxr_delete_session_retries>
 8010c30:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010c32:	f7fa fc6d 	bl	800b510 <rmw_uxrce_fini_session_memory>
 8010c36:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010c38:	3010      	adds	r0, #16
 8010c3a:	f000 fe43 	bl	80118c4 <uxr_close_custom_transport>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	4630      	mov	r0, r6
 8010c42:	64ab      	str	r3, [r5, #72]	; 0x48
 8010c44:	bd70      	pop	{r4, r5, r6, pc}
 8010c46:	f103 0018 	add.w	r0, r3, #24
 8010c4a:	f000 f89b 	bl	8010d84 <rmw_destroy_node>
 8010c4e:	4606      	mov	r6, r0
 8010c50:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	d1d9      	bne.n	8010c0a <rmw_context_fini+0xe>
 8010c56:	e7df      	b.n	8010c18 <rmw_context_fini+0x1c>
 8010c58:	4626      	mov	r6, r4
 8010c5a:	e7dd      	b.n	8010c18 <rmw_context_fini+0x1c>
 8010c5c:	2000f244 	.word	0x2000f244

08010c60 <create_node>:
 8010c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c64:	b083      	sub	sp, #12
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d05f      	beq.n	8010d2a <create_node+0xca>
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	4835      	ldr	r0, [pc, #212]	; (8010d44 <create_node+0xe4>)
 8010c6e:	460f      	mov	r7, r1
 8010c70:	4690      	mov	r8, r2
 8010c72:	461d      	mov	r5, r3
 8010c74:	f7ff fd42 	bl	80106fc <get_memory>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	d056      	beq.n	8010d2a <create_node+0xca>
 8010c7c:	68c4      	ldr	r4, [r0, #12]
 8010c7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8010c80:	6123      	str	r3, [r4, #16]
 8010c82:	f7ff fda3 	bl	80107cc <rmw_get_implementation_identifier>
 8010c86:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8010c8a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8010c8e:	f8c4 9020 	str.w	r9, [r4, #32]
 8010c92:	4630      	mov	r0, r6
 8010c94:	f7ef fac6 	bl	8000224 <strlen>
 8010c98:	1c42      	adds	r2, r0, #1
 8010c9a:	2a3c      	cmp	r2, #60	; 0x3c
 8010c9c:	f104 0518 	add.w	r5, r4, #24
 8010ca0:	d840      	bhi.n	8010d24 <create_node+0xc4>
 8010ca2:	4648      	mov	r0, r9
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8010caa:	f002 fa67 	bl	801317c <memcpy>
 8010cae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8010cb2:	4638      	mov	r0, r7
 8010cb4:	f7ef fab6 	bl	8000224 <strlen>
 8010cb8:	1c42      	adds	r2, r0, #1
 8010cba:	2a3c      	cmp	r2, #60	; 0x3c
 8010cbc:	d832      	bhi.n	8010d24 <create_node+0xc4>
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	4648      	mov	r0, r9
 8010cc2:	f002 fa5b 	bl	801317c <memcpy>
 8010cc6:	f241 5394 	movw	r3, #5524	; 0x1594
 8010cca:	6922      	ldr	r2, [r4, #16]
 8010ccc:	5ad0      	ldrh	r0, [r2, r3]
 8010cce:	2101      	movs	r1, #1
 8010cd0:	eb00 0c01 	add.w	ip, r0, r1
 8010cd4:	f822 c003 	strh.w	ip, [r2, r3]
 8010cd8:	f7fa ff36 	bl	800bb48 <uxr_object_id>
 8010cdc:	6160      	str	r0, [r4, #20]
 8010cde:	783b      	ldrb	r3, [r7, #0]
 8010ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8010ce2:	d127      	bne.n	8010d34 <create_node+0xd4>
 8010ce4:	787b      	ldrb	r3, [r7, #1]
 8010ce6:	bb2b      	cbnz	r3, 8010d34 <create_node+0xd4>
 8010ce8:	4a17      	ldr	r2, [pc, #92]	; (8010d48 <create_node+0xe8>)
 8010cea:	4818      	ldr	r0, [pc, #96]	; (8010d4c <create_node+0xec>)
 8010cec:	4633      	mov	r3, r6
 8010cee:	213c      	movs	r1, #60	; 0x3c
 8010cf0:	f002 fc06 	bl	8013500 <sniprintf>
 8010cf4:	6920      	ldr	r0, [r4, #16]
 8010cf6:	4b15      	ldr	r3, [pc, #84]	; (8010d4c <create_node+0xec>)
 8010cf8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	2306      	movs	r3, #6
 8010d00:	9301      	str	r3, [sp, #4]
 8010d02:	6811      	ldr	r1, [r2, #0]
 8010d04:	6962      	ldr	r2, [r4, #20]
 8010d06:	fa1f f388 	uxth.w	r3, r8
 8010d0a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d0e:	f7fa fead 	bl	800ba6c <uxr_buffer_create_participant_bin>
 8010d12:	4602      	mov	r2, r0
 8010d14:	6920      	ldr	r0, [r4, #16]
 8010d16:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010d1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010d1e:	f7fa fd67 	bl	800b7f0 <run_xrce_session>
 8010d22:	b918      	cbnz	r0, 8010d2c <create_node+0xcc>
 8010d24:	4628      	mov	r0, r5
 8010d26:	f7fa fbf9 	bl	800b51c <rmw_uxrce_fini_node_memory>
 8010d2a:	2500      	movs	r5, #0
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	b003      	add	sp, #12
 8010d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d34:	4a06      	ldr	r2, [pc, #24]	; (8010d50 <create_node+0xf0>)
 8010d36:	9600      	str	r6, [sp, #0]
 8010d38:	463b      	mov	r3, r7
 8010d3a:	213c      	movs	r1, #60	; 0x3c
 8010d3c:	4803      	ldr	r0, [pc, #12]	; (8010d4c <create_node+0xec>)
 8010d3e:	f002 fbdf 	bl	8013500 <sniprintf>
 8010d42:	e7d7      	b.n	8010cf4 <create_node+0x94>
 8010d44:	2000f244 	.word	0x2000f244
 8010d48:	08014b80 	.word	0x08014b80
 8010d4c:	2000c1d4 	.word	0x2000c1d4
 8010d50:	08014bbc 	.word	0x08014bbc

08010d54 <rmw_create_node>:
 8010d54:	b199      	cbz	r1, 8010d7e <rmw_create_node+0x2a>
 8010d56:	b430      	push	{r4, r5}
 8010d58:	4615      	mov	r5, r2
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	780b      	ldrb	r3, [r1, #0]
 8010d5e:	460c      	mov	r4, r1
 8010d60:	b153      	cbz	r3, 8010d78 <rmw_create_node+0x24>
 8010d62:	b14d      	cbz	r5, 8010d78 <rmw_create_node+0x24>
 8010d64:	782b      	ldrb	r3, [r5, #0]
 8010d66:	b13b      	cbz	r3, 8010d78 <rmw_create_node+0x24>
 8010d68:	b902      	cbnz	r2, 8010d6c <rmw_create_node+0x18>
 8010d6a:	69c2      	ldr	r2, [r0, #28]
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	4629      	mov	r1, r5
 8010d70:	4620      	mov	r0, r4
 8010d72:	bc30      	pop	{r4, r5}
 8010d74:	f7ff bf74 	b.w	8010c60 <create_node>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	bc30      	pop	{r4, r5}
 8010d7c:	4770      	bx	lr
 8010d7e:	2000      	movs	r0, #0
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop

08010d84 <rmw_destroy_node>:
 8010d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d86:	b328      	cbz	r0, 8010dd4 <rmw_destroy_node+0x50>
 8010d88:	4607      	mov	r7, r0
 8010d8a:	6800      	ldr	r0, [r0, #0]
 8010d8c:	b120      	cbz	r0, 8010d98 <rmw_destroy_node+0x14>
 8010d8e:	4b36      	ldr	r3, [pc, #216]	; (8010e68 <rmw_destroy_node+0xe4>)
 8010d90:	6819      	ldr	r1, [r3, #0]
 8010d92:	f7ef fa3d 	bl	8000210 <strcmp>
 8010d96:	b9e8      	cbnz	r0, 8010dd4 <rmw_destroy_node+0x50>
 8010d98:	687d      	ldr	r5, [r7, #4]
 8010d9a:	b1dd      	cbz	r5, 8010dd4 <rmw_destroy_node+0x50>
 8010d9c:	4b33      	ldr	r3, [pc, #204]	; (8010e6c <rmw_destroy_node+0xe8>)
 8010d9e:	681c      	ldr	r4, [r3, #0]
 8010da0:	2c00      	cmp	r4, #0
 8010da2:	d05f      	beq.n	8010e64 <rmw_destroy_node+0xe0>
 8010da4:	2600      	movs	r6, #0
 8010da6:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8010daa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8010dae:	429d      	cmp	r5, r3
 8010db0:	d013      	beq.n	8010dda <rmw_destroy_node+0x56>
 8010db2:	2c00      	cmp	r4, #0
 8010db4:	d1f7      	bne.n	8010da6 <rmw_destroy_node+0x22>
 8010db6:	4b2e      	ldr	r3, [pc, #184]	; (8010e70 <rmw_destroy_node+0xec>)
 8010db8:	681c      	ldr	r4, [r3, #0]
 8010dba:	b1c4      	cbz	r4, 8010dee <rmw_destroy_node+0x6a>
 8010dbc:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8010dc0:	6a0b      	ldr	r3, [r1, #32]
 8010dc2:	429d      	cmp	r5, r3
 8010dc4:	d1f9      	bne.n	8010dba <rmw_destroy_node+0x36>
 8010dc6:	317c      	adds	r1, #124	; 0x7c
 8010dc8:	4638      	mov	r0, r7
 8010dca:	f000 f8ad 	bl	8010f28 <rmw_destroy_subscription>
 8010dce:	2801      	cmp	r0, #1
 8010dd0:	4606      	mov	r6, r0
 8010dd2:	d1f2      	bne.n	8010dba <rmw_destroy_node+0x36>
 8010dd4:	2601      	movs	r6, #1
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dda:	3184      	adds	r1, #132	; 0x84
 8010ddc:	4638      	mov	r0, r7
 8010dde:	f000 f853 	bl	8010e88 <rmw_destroy_publisher>
 8010de2:	2801      	cmp	r0, #1
 8010de4:	4606      	mov	r6, r0
 8010de6:	d0f5      	beq.n	8010dd4 <rmw_destroy_node+0x50>
 8010de8:	2c00      	cmp	r4, #0
 8010dea:	d1dc      	bne.n	8010da6 <rmw_destroy_node+0x22>
 8010dec:	e7e3      	b.n	8010db6 <rmw_destroy_node+0x32>
 8010dee:	4b21      	ldr	r3, [pc, #132]	; (8010e74 <rmw_destroy_node+0xf0>)
 8010df0:	681c      	ldr	r4, [r3, #0]
 8010df2:	b16c      	cbz	r4, 8010e10 <rmw_destroy_node+0x8c>
 8010df4:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8010df8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010dfa:	429d      	cmp	r5, r3
 8010dfc:	d1f9      	bne.n	8010df2 <rmw_destroy_node+0x6e>
 8010dfe:	317c      	adds	r1, #124	; 0x7c
 8010e00:	4638      	mov	r0, r7
 8010e02:	f7fa fa17 	bl	800b234 <rmw_destroy_service>
 8010e06:	2801      	cmp	r0, #1
 8010e08:	4606      	mov	r6, r0
 8010e0a:	d0e3      	beq.n	8010dd4 <rmw_destroy_node+0x50>
 8010e0c:	2c00      	cmp	r4, #0
 8010e0e:	d1f1      	bne.n	8010df4 <rmw_destroy_node+0x70>
 8010e10:	4b19      	ldr	r3, [pc, #100]	; (8010e78 <rmw_destroy_node+0xf4>)
 8010e12:	681c      	ldr	r4, [r3, #0]
 8010e14:	b16c      	cbz	r4, 8010e32 <rmw_destroy_node+0xae>
 8010e16:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8010e1a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010e1c:	429d      	cmp	r5, r3
 8010e1e:	d1f9      	bne.n	8010e14 <rmw_destroy_node+0x90>
 8010e20:	317c      	adds	r1, #124	; 0x7c
 8010e22:	4638      	mov	r0, r7
 8010e24:	f7ff fc8e 	bl	8010744 <rmw_destroy_client>
 8010e28:	2801      	cmp	r0, #1
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	d0d2      	beq.n	8010dd4 <rmw_destroy_node+0x50>
 8010e2e:	2c00      	cmp	r4, #0
 8010e30:	d1f1      	bne.n	8010e16 <rmw_destroy_node+0x92>
 8010e32:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 8010e36:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010e3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010e3e:	6819      	ldr	r1, [r3, #0]
 8010e40:	f7fa fdc8 	bl	800b9d4 <uxr_buffer_delete_entity>
 8010e44:	4602      	mov	r2, r0
 8010e46:	6928      	ldr	r0, [r5, #16]
 8010e48:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010e4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010e50:	f7fa fcce 	bl	800b7f0 <run_xrce_session>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	bf08      	it	eq
 8010e58:	2602      	moveq	r6, #2
 8010e5a:	4638      	mov	r0, r7
 8010e5c:	f7fa fb5e 	bl	800b51c <rmw_uxrce_fini_node_memory>
 8010e60:	4630      	mov	r0, r6
 8010e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e64:	4626      	mov	r6, r4
 8010e66:	e7a6      	b.n	8010db6 <rmw_destroy_node+0x32>
 8010e68:	08015084 	.word	0x08015084
 8010e6c:	2000c280 	.word	0x2000c280
 8010e70:	2000f4dc 	.word	0x2000f4dc
 8010e74:	2000f4cc 	.word	0x2000f4cc
 8010e78:	2000cb00 	.word	0x2000cb00

08010e7c <rmw_node_get_graph_guard_condition>:
 8010e7c:	6843      	ldr	r3, [r0, #4]
 8010e7e:	6918      	ldr	r0, [r3, #16]
 8010e80:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop

08010e88 <rmw_destroy_publisher>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	b128      	cbz	r0, 8010e98 <rmw_destroy_publisher+0x10>
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	6800      	ldr	r0, [r0, #0]
 8010e90:	460d      	mov	r5, r1
 8010e92:	f7fa fd7b 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 8010e96:	b910      	cbnz	r0, 8010e9e <rmw_destroy_publisher+0x16>
 8010e98:	2401      	movs	r4, #1
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e9e:	6863      	ldr	r3, [r4, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d0f9      	beq.n	8010e98 <rmw_destroy_publisher+0x10>
 8010ea4:	2d00      	cmp	r5, #0
 8010ea6:	d0f7      	beq.n	8010e98 <rmw_destroy_publisher+0x10>
 8010ea8:	6828      	ldr	r0, [r5, #0]
 8010eaa:	f7fa fd6f 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0f2      	beq.n	8010e98 <rmw_destroy_publisher+0x10>
 8010eb2:	686c      	ldr	r4, [r5, #4]
 8010eb4:	2c00      	cmp	r4, #0
 8010eb6:	d0ef      	beq.n	8010e98 <rmw_destroy_publisher+0x10>
 8010eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010eba:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8010ebe:	f002 f8b1 	bl	8013024 <destroy_topic>
 8010ec2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010ec6:	6962      	ldr	r2, [r4, #20]
 8010ec8:	6918      	ldr	r0, [r3, #16]
 8010eca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010ece:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010ed2:	6819      	ldr	r1, [r3, #0]
 8010ed4:	f7fa fd7e 	bl	800b9d4 <uxr_buffer_delete_entity>
 8010ed8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8010edc:	6922      	ldr	r2, [r4, #16]
 8010ede:	4603      	mov	r3, r0
 8010ee0:	6908      	ldr	r0, [r1, #16]
 8010ee2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010ee6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010eea:	6809      	ldr	r1, [r1, #0]
 8010eec:	461c      	mov	r4, r3
 8010eee:	f7fa fd71 	bl	800b9d4 <uxr_buffer_delete_entity>
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	6938      	ldr	r0, [r7, #16]
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010efc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010f00:	f7fa fc76 	bl	800b7f0 <run_xrce_session>
 8010f04:	4604      	mov	r4, r0
 8010f06:	6938      	ldr	r0, [r7, #16]
 8010f08:	4632      	mov	r2, r6
 8010f0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010f0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010f12:	f7fa fc6d 	bl	800b7f0 <run_xrce_session>
 8010f16:	b12c      	cbz	r4, 8010f24 <rmw_destroy_publisher+0x9c>
 8010f18:	b120      	cbz	r0, 8010f24 <rmw_destroy_publisher+0x9c>
 8010f1a:	2400      	movs	r4, #0
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f7fa fb15 	bl	800b54c <rmw_uxrce_fini_publisher_memory>
 8010f22:	e7ba      	b.n	8010e9a <rmw_destroy_publisher+0x12>
 8010f24:	2402      	movs	r4, #2
 8010f26:	e7f9      	b.n	8010f1c <rmw_destroy_publisher+0x94>

08010f28 <rmw_destroy_subscription>:
 8010f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f2a:	b128      	cbz	r0, 8010f38 <rmw_destroy_subscription+0x10>
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	6800      	ldr	r0, [r0, #0]
 8010f30:	460d      	mov	r5, r1
 8010f32:	f7fa fd2b 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 8010f36:	b910      	cbnz	r0, 8010f3e <rmw_destroy_subscription+0x16>
 8010f38:	2401      	movs	r4, #1
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f3e:	6863      	ldr	r3, [r4, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d0f9      	beq.n	8010f38 <rmw_destroy_subscription+0x10>
 8010f44:	2d00      	cmp	r5, #0
 8010f46:	d0f7      	beq.n	8010f38 <rmw_destroy_subscription+0x10>
 8010f48:	6828      	ldr	r0, [r5, #0]
 8010f4a:	f7fa fd1f 	bl	800b98c <is_uxrce_rmw_identifier_valid>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d0f2      	beq.n	8010f38 <rmw_destroy_subscription+0x10>
 8010f52:	686c      	ldr	r4, [r5, #4]
 8010f54:	2c00      	cmp	r4, #0
 8010f56:	d0ef      	beq.n	8010f38 <rmw_destroy_subscription+0x10>
 8010f58:	6a26      	ldr	r6, [r4, #32]
 8010f5a:	6962      	ldr	r2, [r4, #20]
 8010f5c:	6930      	ldr	r0, [r6, #16]
 8010f5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010f62:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010f66:	6819      	ldr	r1, [r3, #0]
 8010f68:	f7fa fe56 	bl	800bc18 <uxr_buffer_cancel_data>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	6930      	ldr	r0, [r6, #16]
 8010f70:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010f74:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010f78:	f7fa fc3a 	bl	800b7f0 <run_xrce_session>
 8010f7c:	69e0      	ldr	r0, [r4, #28]
 8010f7e:	f002 f851 	bl	8013024 <destroy_topic>
 8010f82:	6a23      	ldr	r3, [r4, #32]
 8010f84:	6962      	ldr	r2, [r4, #20]
 8010f86:	6918      	ldr	r0, [r3, #16]
 8010f88:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010f8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010f90:	6819      	ldr	r1, [r3, #0]
 8010f92:	f7fa fd1f 	bl	800b9d4 <uxr_buffer_delete_entity>
 8010f96:	6a21      	ldr	r1, [r4, #32]
 8010f98:	6922      	ldr	r2, [r4, #16]
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	6908      	ldr	r0, [r1, #16]
 8010f9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010fa2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010fa6:	6809      	ldr	r1, [r1, #0]
 8010fa8:	461c      	mov	r4, r3
 8010faa:	f7fa fd13 	bl	800b9d4 <uxr_buffer_delete_entity>
 8010fae:	4607      	mov	r7, r0
 8010fb0:	6930      	ldr	r0, [r6, #16]
 8010fb2:	4622      	mov	r2, r4
 8010fb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010fb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010fbc:	f7fa fc18 	bl	800b7f0 <run_xrce_session>
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	6930      	ldr	r0, [r6, #16]
 8010fc4:	463a      	mov	r2, r7
 8010fc6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010fca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010fce:	f7fa fc0f 	bl	800b7f0 <run_xrce_session>
 8010fd2:	b12c      	cbz	r4, 8010fe0 <rmw_destroy_subscription+0xb8>
 8010fd4:	b120      	cbz	r0, 8010fe0 <rmw_destroy_subscription+0xb8>
 8010fd6:	2400      	movs	r4, #0
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f7fa facd 	bl	800b578 <rmw_uxrce_fini_subscription_memory>
 8010fde:	e7ac      	b.n	8010f3a <rmw_destroy_subscription+0x12>
 8010fe0:	2402      	movs	r4, #2
 8010fe2:	e7f9      	b.n	8010fd8 <rmw_destroy_subscription+0xb0>

08010fe4 <rmw_take_with_info>:
 8010fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	6800      	ldr	r0, [r0, #0]
 8010fea:	b089      	sub	sp, #36	; 0x24
 8010fec:	460f      	mov	r7, r1
 8010fee:	4615      	mov	r5, r2
 8010ff0:	b128      	cbz	r0, 8010ffe <rmw_take_with_info+0x1a>
 8010ff2:	4b24      	ldr	r3, [pc, #144]	; (8011084 <rmw_take_with_info+0xa0>)
 8010ff4:	6819      	ldr	r1, [r3, #0]
 8010ff6:	f7ef f90b 	bl	8000210 <strcmp>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d13e      	bne.n	801107c <rmw_take_with_info+0x98>
 8010ffe:	b305      	cbz	r5, 8011042 <rmw_take_with_info+0x5e>
 8011000:	6864      	ldr	r4, [r4, #4]
 8011002:	2300      	movs	r3, #0
 8011004:	702b      	strb	r3, [r5, #0]
 8011006:	f7fa fb7b 	bl	800b700 <rmw_uxrce_clean_expired_static_input_buffer>
 801100a:	4620      	mov	r0, r4
 801100c:	f7fa fb4e 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8011010:	4606      	mov	r6, r0
 8011012:	b1f0      	cbz	r0, 8011052 <rmw_take_with_info+0x6e>
 8011014:	68c1      	ldr	r1, [r0, #12]
 8011016:	4668      	mov	r0, sp
 8011018:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801101c:	3110      	adds	r1, #16
 801101e:	f7f8 fe89 	bl	8009d34 <ucdr_init_buffer>
 8011022:	69a3      	ldr	r3, [r4, #24]
 8011024:	4639      	mov	r1, r7
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	4668      	mov	r0, sp
 801102a:	4798      	blx	r3
 801102c:	4631      	mov	r1, r6
 801102e:	4604      	mov	r4, r0
 8011030:	4815      	ldr	r0, [pc, #84]	; (8011088 <rmw_take_with_info+0xa4>)
 8011032:	f7ff fb73 	bl	801071c <put_memory>
 8011036:	702c      	strb	r4, [r5, #0]
 8011038:	f084 0001 	eor.w	r0, r4, #1
 801103c:	b2c0      	uxtb	r0, r0
 801103e:	b009      	add	sp, #36	; 0x24
 8011040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011042:	6864      	ldr	r4, [r4, #4]
 8011044:	f7fa fb5c 	bl	800b700 <rmw_uxrce_clean_expired_static_input_buffer>
 8011048:	4620      	mov	r0, r4
 801104a:	f7fa fb2f 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 801104e:	4605      	mov	r5, r0
 8011050:	b910      	cbnz	r0, 8011058 <rmw_take_with_info+0x74>
 8011052:	2001      	movs	r0, #1
 8011054:	b009      	add	sp, #36	; 0x24
 8011056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011058:	68e9      	ldr	r1, [r5, #12]
 801105a:	4668      	mov	r0, sp
 801105c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8011060:	3110      	adds	r1, #16
 8011062:	f7f8 fe67 	bl	8009d34 <ucdr_init_buffer>
 8011066:	69a3      	ldr	r3, [r4, #24]
 8011068:	4639      	mov	r1, r7
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	4668      	mov	r0, sp
 801106e:	4798      	blx	r3
 8011070:	4629      	mov	r1, r5
 8011072:	4604      	mov	r4, r0
 8011074:	4804      	ldr	r0, [pc, #16]	; (8011088 <rmw_take_with_info+0xa4>)
 8011076:	f7ff fb51 	bl	801071c <put_memory>
 801107a:	e7dd      	b.n	8011038 <rmw_take_with_info+0x54>
 801107c:	200c      	movs	r0, #12
 801107e:	b009      	add	sp, #36	; 0x24
 8011080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011082:	bf00      	nop
 8011084:	08015084 	.word	0x08015084
 8011088:	2000c270 	.word	0x2000c270

0801108c <rmw_uxrce_transport_init>:
 801108c:	b508      	push	{r3, lr}
 801108e:	b108      	cbz	r0, 8011094 <rmw_uxrce_transport_init+0x8>
 8011090:	f100 0210 	add.w	r2, r0, #16
 8011094:	b139      	cbz	r1, 80110a6 <rmw_uxrce_transport_init+0x1a>
 8011096:	6949      	ldr	r1, [r1, #20]
 8011098:	4610      	mov	r0, r2
 801109a:	f000 fbdf 	bl	801185c <uxr_init_custom_transport>
 801109e:	f080 0001 	eor.w	r0, r0, #1
 80110a2:	b2c0      	uxtb	r0, r0
 80110a4:	bd08      	pop	{r3, pc}
 80110a6:	4b04      	ldr	r3, [pc, #16]	; (80110b8 <rmw_uxrce_transport_init+0x2c>)
 80110a8:	4610      	mov	r0, r2
 80110aa:	6859      	ldr	r1, [r3, #4]
 80110ac:	f000 fbd6 	bl	801185c <uxr_init_custom_transport>
 80110b0:	f080 0001 	eor.w	r0, r0, #1
 80110b4:	b2c0      	uxtb	r0, r0
 80110b6:	bd08      	pop	{r3, pc}
 80110b8:	2000c250 	.word	0x2000c250

080110bc <rmw_wait>:
 80110bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	460f      	mov	r7, r1
 80110c2:	4606      	mov	r6, r0
 80110c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80110c6:	469a      	mov	sl, r3
 80110c8:	4615      	mov	r5, r2
 80110ca:	2a00      	cmp	r2, #0
 80110cc:	f000 8122 	beq.w	8011314 <rmw_wait+0x258>
 80110d0:	2900      	cmp	r1, #0
 80110d2:	f000 812a 	beq.w	801132a <rmw_wait+0x26e>
 80110d6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80110da:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80110de:	015c      	lsls	r4, r3, #5
 80110e0:	ebbb 0b02 	subs.w	fp, fp, r2
 80110e4:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 80110e8:	eb64 0403 	sbc.w	r4, r4, r3
 80110ec:	ea4f 008b 	mov.w	r0, fp, lsl #2
 80110f0:	00a4      	lsls	r4, r4, #2
 80110f2:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 80110f6:	eb10 0b02 	adds.w	fp, r0, r2
 80110fa:	eb43 0404 	adc.w	r4, r3, r4
 80110fe:	4aad      	ldr	r2, [pc, #692]	; (80113b4 <rmw_wait+0x2f8>)
 8011100:	2300      	movs	r3, #0
 8011102:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8011106:	f7ef fa49 	bl	800059c <__aeabi_uldivmod>
 801110a:	00e4      	lsls	r4, r4, #3
 801110c:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8011110:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011114:	eb1b 0800 	adds.w	r8, fp, r0
 8011118:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801111c:	eb44 0901 	adc.w	r9, r4, r1
 8011120:	2300      	movs	r3, #0
 8011122:	4542      	cmp	r2, r8
 8011124:	eb73 0109 	sbcs.w	r1, r3, r9
 8011128:	f2c0 80f2 	blt.w	8011310 <rmw_wait+0x254>
 801112c:	f7fa fae8 	bl	800b700 <rmw_uxrce_clean_expired_static_input_buffer>
 8011130:	4ba1      	ldr	r3, [pc, #644]	; (80113b8 <rmw_wait+0x2fc>)
 8011132:	681c      	ldr	r4, [r3, #0]
 8011134:	b144      	cbz	r4, 8011148 <rmw_wait+0x8c>
 8011136:	4623      	mov	r3, r4
 8011138:	f241 50a4 	movw	r0, #5540	; 0x15a4
 801113c:	2100      	movs	r1, #0
 801113e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8011142:	5411      	strb	r1, [r2, r0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1fa      	bne.n	801113e <rmw_wait+0x82>
 8011148:	b185      	cbz	r5, 801116c <rmw_wait+0xb0>
 801114a:	6829      	ldr	r1, [r5, #0]
 801114c:	b171      	cbz	r1, 801116c <rmw_wait+0xb0>
 801114e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8011152:	2300      	movs	r3, #0
 8011154:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8011158:	2001      	movs	r0, #1
 801115a:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 801115e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8011160:	3301      	adds	r3, #1
 8011162:	6912      	ldr	r2, [r2, #16]
 8011164:	4299      	cmp	r1, r3
 8011166:	f802 000c 	strb.w	r0, [r2, ip]
 801116a:	d1f6      	bne.n	801115a <rmw_wait+0x9e>
 801116c:	f1ba 0f00 	cmp.w	sl, #0
 8011170:	d011      	beq.n	8011196 <rmw_wait+0xda>
 8011172:	f8da 1000 	ldr.w	r1, [sl]
 8011176:	b171      	cbz	r1, 8011196 <rmw_wait+0xda>
 8011178:	f8da e004 	ldr.w	lr, [sl, #4]
 801117c:	2300      	movs	r3, #0
 801117e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8011182:	2001      	movs	r0, #1
 8011184:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8011188:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801118a:	3301      	adds	r3, #1
 801118c:	6912      	ldr	r2, [r2, #16]
 801118e:	4299      	cmp	r1, r3
 8011190:	f802 000c 	strb.w	r0, [r2, ip]
 8011194:	d1f6      	bne.n	8011184 <rmw_wait+0xc8>
 8011196:	b186      	cbz	r6, 80111ba <rmw_wait+0xfe>
 8011198:	6831      	ldr	r1, [r6, #0]
 801119a:	b171      	cbz	r1, 80111ba <rmw_wait+0xfe>
 801119c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80111a0:	2300      	movs	r3, #0
 80111a2:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80111a6:	2001      	movs	r0, #1
 80111a8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80111ac:	6a12      	ldr	r2, [r2, #32]
 80111ae:	3301      	adds	r3, #1
 80111b0:	6912      	ldr	r2, [r2, #16]
 80111b2:	4299      	cmp	r1, r3
 80111b4:	f802 000c 	strb.w	r0, [r2, ip]
 80111b8:	d1f6      	bne.n	80111a8 <rmw_wait+0xec>
 80111ba:	b34c      	cbz	r4, 8011210 <rmw_wait+0x154>
 80111bc:	4622      	mov	r2, r4
 80111be:	2300      	movs	r3, #0
 80111c0:	f241 50a4 	movw	r0, #5540	; 0x15a4
 80111c4:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 80111c8:	5c09      	ldrb	r1, [r1, r0]
 80111ca:	440b      	add	r3, r1
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	d1f8      	bne.n	80111c4 <rmw_wait+0x108>
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f000 8082 	beq.w	80112dc <rmw_wait+0x220>
 80111d8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80111dc:	d00d      	beq.n	80111fa <rmw_wait+0x13e>
 80111de:	ee07 8a90 	vmov	s15, r8
 80111e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80111e6:	ee07 3a90 	vmov	s15, r3
 80111ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111f2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80111f6:	ee17 8a90 	vmov	r8, s15
 80111fa:	f241 59a4 	movw	r9, #5540	; 0x15a4
 80111fe:	68e0      	ldr	r0, [r4, #12]
 8011200:	f810 3009 	ldrb.w	r3, [r0, r9]
 8011204:	2b00      	cmp	r3, #0
 8011206:	f040 8093 	bne.w	8011330 <rmw_wait+0x274>
 801120a:	68a4      	ldr	r4, [r4, #8]
 801120c:	2c00      	cmp	r4, #0
 801120e:	d1f6      	bne.n	80111fe <rmw_wait+0x142>
 8011210:	2d00      	cmp	r5, #0
 8011212:	f000 80ac 	beq.w	801136e <rmw_wait+0x2b2>
 8011216:	682b      	ldr	r3, [r5, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	f000 8093 	beq.w	8011344 <rmw_wait+0x288>
 801121e:	2400      	movs	r4, #0
 8011220:	46a0      	mov	r8, r4
 8011222:	686b      	ldr	r3, [r5, #4]
 8011224:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011228:	f7fa fa40 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 801122c:	2800      	cmp	r0, #0
 801122e:	d05f      	beq.n	80112f0 <rmw_wait+0x234>
 8011230:	682b      	ldr	r3, [r5, #0]
 8011232:	3401      	adds	r4, #1
 8011234:	42a3      	cmp	r3, r4
 8011236:	f04f 0801 	mov.w	r8, #1
 801123a:	d8f2      	bhi.n	8011222 <rmw_wait+0x166>
 801123c:	f1ba 0f00 	cmp.w	sl, #0
 8011240:	d012      	beq.n	8011268 <rmw_wait+0x1ac>
 8011242:	f8da 3000 	ldr.w	r3, [sl]
 8011246:	b17b      	cbz	r3, 8011268 <rmw_wait+0x1ac>
 8011248:	2400      	movs	r4, #0
 801124a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801124e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011252:	f7fa fa2b 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8011256:	2800      	cmp	r0, #0
 8011258:	d052      	beq.n	8011300 <rmw_wait+0x244>
 801125a:	f8da 3000 	ldr.w	r3, [sl]
 801125e:	3401      	adds	r4, #1
 8011260:	42a3      	cmp	r3, r4
 8011262:	f04f 0801 	mov.w	r8, #1
 8011266:	d8f0      	bhi.n	801124a <rmw_wait+0x18e>
 8011268:	b1e6      	cbz	r6, 80112a4 <rmw_wait+0x1e8>
 801126a:	6833      	ldr	r3, [r6, #0]
 801126c:	b1d3      	cbz	r3, 80112a4 <rmw_wait+0x1e8>
 801126e:	2400      	movs	r4, #0
 8011270:	6873      	ldr	r3, [r6, #4]
 8011272:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011276:	f7fa fa19 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 801127a:	b160      	cbz	r0, 8011296 <rmw_wait+0x1da>
 801127c:	6833      	ldr	r3, [r6, #0]
 801127e:	3401      	adds	r4, #1
 8011280:	42a3      	cmp	r3, r4
 8011282:	d96c      	bls.n	801135e <rmw_wait+0x2a2>
 8011284:	6873      	ldr	r3, [r6, #4]
 8011286:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801128a:	f04f 0801 	mov.w	r8, #1
 801128e:	f7fa fa0d 	bl	800b6ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8011292:	2800      	cmp	r0, #0
 8011294:	d1f2      	bne.n	801127c <rmw_wait+0x1c0>
 8011296:	e9d6 3200 	ldrd	r3, r2, [r6]
 801129a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801129e:	3401      	adds	r4, #1
 80112a0:	42a3      	cmp	r3, r4
 80112a2:	d8e5      	bhi.n	8011270 <rmw_wait+0x1b4>
 80112a4:	b1a7      	cbz	r7, 80112d0 <rmw_wait+0x214>
 80112a6:	683c      	ldr	r4, [r7, #0]
 80112a8:	b194      	cbz	r4, 80112d0 <rmw_wait+0x214>
 80112aa:	2300      	movs	r3, #0
 80112ac:	461d      	mov	r5, r3
 80112ae:	e004      	b.n	80112ba <rmw_wait+0x1fe>
 80112b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80112b4:	3301      	adds	r3, #1
 80112b6:	42a3      	cmp	r3, r4
 80112b8:	d00a      	beq.n	80112d0 <rmw_wait+0x214>
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80112c0:	7c0a      	ldrb	r2, [r1, #16]
 80112c2:	2a00      	cmp	r2, #0
 80112c4:	d0f4      	beq.n	80112b0 <rmw_wait+0x1f4>
 80112c6:	3301      	adds	r3, #1
 80112c8:	42a3      	cmp	r3, r4
 80112ca:	740d      	strb	r5, [r1, #16]
 80112cc:	4690      	mov	r8, r2
 80112ce:	d1f4      	bne.n	80112ba <rmw_wait+0x1fe>
 80112d0:	f1b8 0f00 	cmp.w	r8, #0
 80112d4:	d040      	beq.n	8011358 <rmw_wait+0x29c>
 80112d6:	2000      	movs	r0, #0
 80112d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112dc:	68e0      	ldr	r0, [r4, #12]
 80112de:	2100      	movs	r1, #0
 80112e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80112e4:	f7fb fa24 	bl	800c730 <uxr_run_session_timeout>
 80112e8:	68a4      	ldr	r4, [r4, #8]
 80112ea:	2c00      	cmp	r4, #0
 80112ec:	d1f6      	bne.n	80112dc <rmw_wait+0x220>
 80112ee:	e78f      	b.n	8011210 <rmw_wait+0x154>
 80112f0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80112f4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80112f8:	3401      	adds	r4, #1
 80112fa:	42a3      	cmp	r3, r4
 80112fc:	d891      	bhi.n	8011222 <rmw_wait+0x166>
 80112fe:	e79d      	b.n	801123c <rmw_wait+0x180>
 8011300:	e9da 3200 	ldrd	r3, r2, [sl]
 8011304:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011308:	3401      	adds	r4, #1
 801130a:	429c      	cmp	r4, r3
 801130c:	d39d      	bcc.n	801124a <rmw_wait+0x18e>
 801130e:	e7ab      	b.n	8011268 <rmw_wait+0x1ac>
 8011310:	4690      	mov	r8, r2
 8011312:	e70b      	b.n	801112c <rmw_wait+0x70>
 8011314:	2b00      	cmp	r3, #0
 8011316:	f47f aedb 	bne.w	80110d0 <rmw_wait+0x14>
 801131a:	2800      	cmp	r0, #0
 801131c:	f47f aed8 	bne.w	80110d0 <rmw_wait+0x14>
 8011320:	2f00      	cmp	r7, #0
 8011322:	d0d8      	beq.n	80112d6 <rmw_wait+0x21a>
 8011324:	2900      	cmp	r1, #0
 8011326:	f47f aed6 	bne.w	80110d6 <rmw_wait+0x1a>
 801132a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801132e:	e6fd      	b.n	801112c <rmw_wait+0x70>
 8011330:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011334:	4641      	mov	r1, r8
 8011336:	f7fb fa15 	bl	800c764 <uxr_run_session_until_data>
 801133a:	68a4      	ldr	r4, [r4, #8]
 801133c:	2c00      	cmp	r4, #0
 801133e:	f47f af5e 	bne.w	80111fe <rmw_wait+0x142>
 8011342:	e765      	b.n	8011210 <rmw_wait+0x154>
 8011344:	f1ba 0f00 	cmp.w	sl, #0
 8011348:	d11e      	bne.n	8011388 <rmw_wait+0x2cc>
 801134a:	b35e      	cbz	r6, 80113a4 <rmw_wait+0x2e8>
 801134c:	6833      	ldr	r3, [r6, #0]
 801134e:	46d0      	mov	r8, sl
 8011350:	2b00      	cmp	r3, #0
 8011352:	d18c      	bne.n	801126e <rmw_wait+0x1b2>
 8011354:	2f00      	cmp	r7, #0
 8011356:	d1a6      	bne.n	80112a6 <rmw_wait+0x1ea>
 8011358:	2002      	movs	r0, #2
 801135a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135e:	2f00      	cmp	r7, #0
 8011360:	d0b9      	beq.n	80112d6 <rmw_wait+0x21a>
 8011362:	683c      	ldr	r4, [r7, #0]
 8011364:	f04f 0801 	mov.w	r8, #1
 8011368:	2c00      	cmp	r4, #0
 801136a:	d19e      	bne.n	80112aa <rmw_wait+0x1ee>
 801136c:	e7b3      	b.n	80112d6 <rmw_wait+0x21a>
 801136e:	f1ba 0f00 	cmp.w	sl, #0
 8011372:	d0ea      	beq.n	801134a <rmw_wait+0x28e>
 8011374:	f8da 3000 	ldr.w	r3, [sl]
 8011378:	46a8      	mov	r8, r5
 801137a:	2b00      	cmp	r3, #0
 801137c:	f47f af64 	bne.w	8011248 <rmw_wait+0x18c>
 8011380:	2e00      	cmp	r6, #0
 8011382:	f47f af72 	bne.w	801126a <rmw_wait+0x1ae>
 8011386:	e009      	b.n	801139c <rmw_wait+0x2e0>
 8011388:	f8da 2000 	ldr.w	r2, [sl]
 801138c:	4698      	mov	r8, r3
 801138e:	2a00      	cmp	r2, #0
 8011390:	f47f af5a 	bne.w	8011248 <rmw_wait+0x18c>
 8011394:	4690      	mov	r8, r2
 8011396:	2e00      	cmp	r6, #0
 8011398:	f47f af67 	bne.w	801126a <rmw_wait+0x1ae>
 801139c:	46b0      	mov	r8, r6
 801139e:	2f00      	cmp	r7, #0
 80113a0:	d181      	bne.n	80112a6 <rmw_wait+0x1ea>
 80113a2:	e7d9      	b.n	8011358 <rmw_wait+0x29c>
 80113a4:	2f00      	cmp	r7, #0
 80113a6:	d0d7      	beq.n	8011358 <rmw_wait+0x29c>
 80113a8:	683c      	ldr	r4, [r7, #0]
 80113aa:	46b0      	mov	r8, r6
 80113ac:	2c00      	cmp	r4, #0
 80113ae:	f47f af7c 	bne.w	80112aa <rmw_wait+0x1ee>
 80113b2:	e7d1      	b.n	8011358 <rmw_wait+0x29c>
 80113b4:	000f4240 	.word	0x000f4240
 80113b8:	2000f418 	.word	0x2000f418

080113bc <rmw_create_wait_set>:
 80113bc:	b508      	push	{r3, lr}
 80113be:	4803      	ldr	r0, [pc, #12]	; (80113cc <rmw_create_wait_set+0x10>)
 80113c0:	f7ff f99c 	bl	80106fc <get_memory>
 80113c4:	b108      	cbz	r0, 80113ca <rmw_create_wait_set+0xe>
 80113c6:	68c0      	ldr	r0, [r0, #12]
 80113c8:	3010      	adds	r0, #16
 80113ca:	bd08      	pop	{r3, pc}
 80113cc:	20010bf0 	.word	0x20010bf0

080113d0 <rmw_destroy_wait_set>:
 80113d0:	b508      	push	{r3, lr}
 80113d2:	4b08      	ldr	r3, [pc, #32]	; (80113f4 <rmw_destroy_wait_set+0x24>)
 80113d4:	6819      	ldr	r1, [r3, #0]
 80113d6:	b911      	cbnz	r1, 80113de <rmw_destroy_wait_set+0xe>
 80113d8:	e00a      	b.n	80113f0 <rmw_destroy_wait_set+0x20>
 80113da:	6889      	ldr	r1, [r1, #8]
 80113dc:	b141      	cbz	r1, 80113f0 <rmw_destroy_wait_set+0x20>
 80113de:	68cb      	ldr	r3, [r1, #12]
 80113e0:	3310      	adds	r3, #16
 80113e2:	4298      	cmp	r0, r3
 80113e4:	d1f9      	bne.n	80113da <rmw_destroy_wait_set+0xa>
 80113e6:	4803      	ldr	r0, [pc, #12]	; (80113f4 <rmw_destroy_wait_set+0x24>)
 80113e8:	f7ff f998 	bl	801071c <put_memory>
 80113ec:	2000      	movs	r0, #0
 80113ee:	bd08      	pop	{r3, pc}
 80113f0:	2001      	movs	r0, #1
 80113f2:	bd08      	pop	{r3, pc}
 80113f4:	20010bf0 	.word	0x20010bf0

080113f8 <rmw_uros_epoch_nanos>:
 80113f8:	4b05      	ldr	r3, [pc, #20]	; (8011410 <rmw_uros_epoch_nanos+0x18>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	b123      	cbz	r3, 8011408 <rmw_uros_epoch_nanos+0x10>
 80113fe:	68d8      	ldr	r0, [r3, #12]
 8011400:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011404:	f7fa be08 	b.w	800c018 <uxr_epoch_nanos>
 8011408:	2000      	movs	r0, #0
 801140a:	2100      	movs	r1, #0
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	2000f418 	.word	0x2000f418

08011414 <ucdr_serialize_endian_array_char>:
 8011414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011418:	4619      	mov	r1, r3
 801141a:	461e      	mov	r6, r3
 801141c:	4690      	mov	r8, r2
 801141e:	4604      	mov	r4, r0
 8011420:	f7f8 fc36 	bl	8009c90 <ucdr_check_buffer_available_for>
 8011424:	b9e0      	cbnz	r0, 8011460 <ucdr_serialize_endian_array_char+0x4c>
 8011426:	4637      	mov	r7, r6
 8011428:	e009      	b.n	801143e <ucdr_serialize_endian_array_char+0x2a>
 801142a:	68a0      	ldr	r0, [r4, #8]
 801142c:	f001 fea6 	bl	801317c <memcpy>
 8011430:	68a2      	ldr	r2, [r4, #8]
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	442a      	add	r2, r5
 8011436:	442b      	add	r3, r5
 8011438:	1b7f      	subs	r7, r7, r5
 801143a:	60a2      	str	r2, [r4, #8]
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	2201      	movs	r2, #1
 8011440:	4639      	mov	r1, r7
 8011442:	4620      	mov	r0, r4
 8011444:	f7f8 fcaa 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 8011448:	1bf1      	subs	r1, r6, r7
 801144a:	4441      	add	r1, r8
 801144c:	4605      	mov	r5, r0
 801144e:	4602      	mov	r2, r0
 8011450:	2800      	cmp	r0, #0
 8011452:	d1ea      	bne.n	801142a <ucdr_serialize_endian_array_char+0x16>
 8011454:	2301      	movs	r3, #1
 8011456:	7da0      	ldrb	r0, [r4, #22]
 8011458:	7563      	strb	r3, [r4, #21]
 801145a:	4058      	eors	r0, r3
 801145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011460:	4632      	mov	r2, r6
 8011462:	68a0      	ldr	r0, [r4, #8]
 8011464:	4641      	mov	r1, r8
 8011466:	f001 fe89 	bl	801317c <memcpy>
 801146a:	68a2      	ldr	r2, [r4, #8]
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	4432      	add	r2, r6
 8011470:	4433      	add	r3, r6
 8011472:	60a2      	str	r2, [r4, #8]
 8011474:	6123      	str	r3, [r4, #16]
 8011476:	e7ed      	b.n	8011454 <ucdr_serialize_endian_array_char+0x40>

08011478 <ucdr_deserialize_endian_array_char>:
 8011478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801147c:	4619      	mov	r1, r3
 801147e:	461e      	mov	r6, r3
 8011480:	4690      	mov	r8, r2
 8011482:	4604      	mov	r4, r0
 8011484:	f7f8 fc04 	bl	8009c90 <ucdr_check_buffer_available_for>
 8011488:	b9e0      	cbnz	r0, 80114c4 <ucdr_deserialize_endian_array_char+0x4c>
 801148a:	4637      	mov	r7, r6
 801148c:	e009      	b.n	80114a2 <ucdr_deserialize_endian_array_char+0x2a>
 801148e:	68a1      	ldr	r1, [r4, #8]
 8011490:	f001 fe74 	bl	801317c <memcpy>
 8011494:	68a2      	ldr	r2, [r4, #8]
 8011496:	6923      	ldr	r3, [r4, #16]
 8011498:	442a      	add	r2, r5
 801149a:	442b      	add	r3, r5
 801149c:	1b7f      	subs	r7, r7, r5
 801149e:	60a2      	str	r2, [r4, #8]
 80114a0:	6123      	str	r3, [r4, #16]
 80114a2:	2201      	movs	r2, #1
 80114a4:	4639      	mov	r1, r7
 80114a6:	4620      	mov	r0, r4
 80114a8:	f7f8 fc78 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 80114ac:	4605      	mov	r5, r0
 80114ae:	1bf0      	subs	r0, r6, r7
 80114b0:	4440      	add	r0, r8
 80114b2:	462a      	mov	r2, r5
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	d1ea      	bne.n	801148e <ucdr_deserialize_endian_array_char+0x16>
 80114b8:	2301      	movs	r3, #1
 80114ba:	7da0      	ldrb	r0, [r4, #22]
 80114bc:	7563      	strb	r3, [r4, #21]
 80114be:	4058      	eors	r0, r3
 80114c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c4:	4632      	mov	r2, r6
 80114c6:	68a1      	ldr	r1, [r4, #8]
 80114c8:	4640      	mov	r0, r8
 80114ca:	f001 fe57 	bl	801317c <memcpy>
 80114ce:	68a2      	ldr	r2, [r4, #8]
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	4432      	add	r2, r6
 80114d4:	4433      	add	r3, r6
 80114d6:	60a2      	str	r2, [r4, #8]
 80114d8:	6123      	str	r3, [r4, #16]
 80114da:	e7ed      	b.n	80114b8 <ucdr_deserialize_endian_array_char+0x40>

080114dc <ucdr_serialize_array_uint8_t>:
 80114dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e0:	4688      	mov	r8, r1
 80114e2:	4611      	mov	r1, r2
 80114e4:	4616      	mov	r6, r2
 80114e6:	4604      	mov	r4, r0
 80114e8:	f7f8 fbd2 	bl	8009c90 <ucdr_check_buffer_available_for>
 80114ec:	b9e0      	cbnz	r0, 8011528 <ucdr_serialize_array_uint8_t+0x4c>
 80114ee:	4637      	mov	r7, r6
 80114f0:	e009      	b.n	8011506 <ucdr_serialize_array_uint8_t+0x2a>
 80114f2:	68a0      	ldr	r0, [r4, #8]
 80114f4:	f001 fe42 	bl	801317c <memcpy>
 80114f8:	68a2      	ldr	r2, [r4, #8]
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	442a      	add	r2, r5
 80114fe:	442b      	add	r3, r5
 8011500:	1b7f      	subs	r7, r7, r5
 8011502:	60a2      	str	r2, [r4, #8]
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	2201      	movs	r2, #1
 8011508:	4639      	mov	r1, r7
 801150a:	4620      	mov	r0, r4
 801150c:	f7f8 fc46 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 8011510:	1bf1      	subs	r1, r6, r7
 8011512:	4441      	add	r1, r8
 8011514:	4605      	mov	r5, r0
 8011516:	4602      	mov	r2, r0
 8011518:	2800      	cmp	r0, #0
 801151a:	d1ea      	bne.n	80114f2 <ucdr_serialize_array_uint8_t+0x16>
 801151c:	2301      	movs	r3, #1
 801151e:	7da0      	ldrb	r0, [r4, #22]
 8011520:	7563      	strb	r3, [r4, #21]
 8011522:	4058      	eors	r0, r3
 8011524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011528:	4632      	mov	r2, r6
 801152a:	68a0      	ldr	r0, [r4, #8]
 801152c:	4641      	mov	r1, r8
 801152e:	f001 fe25 	bl	801317c <memcpy>
 8011532:	68a3      	ldr	r3, [r4, #8]
 8011534:	6922      	ldr	r2, [r4, #16]
 8011536:	4433      	add	r3, r6
 8011538:	4432      	add	r2, r6
 801153a:	60a3      	str	r3, [r4, #8]
 801153c:	6122      	str	r2, [r4, #16]
 801153e:	e7ed      	b.n	801151c <ucdr_serialize_array_uint8_t+0x40>

08011540 <ucdr_serialize_endian_array_uint8_t>:
 8011540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011544:	4619      	mov	r1, r3
 8011546:	461e      	mov	r6, r3
 8011548:	4690      	mov	r8, r2
 801154a:	4604      	mov	r4, r0
 801154c:	f7f8 fba0 	bl	8009c90 <ucdr_check_buffer_available_for>
 8011550:	b9e0      	cbnz	r0, 801158c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011552:	4637      	mov	r7, r6
 8011554:	e009      	b.n	801156a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011556:	68a0      	ldr	r0, [r4, #8]
 8011558:	f001 fe10 	bl	801317c <memcpy>
 801155c:	68a2      	ldr	r2, [r4, #8]
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	442a      	add	r2, r5
 8011562:	442b      	add	r3, r5
 8011564:	1b7f      	subs	r7, r7, r5
 8011566:	60a2      	str	r2, [r4, #8]
 8011568:	6123      	str	r3, [r4, #16]
 801156a:	2201      	movs	r2, #1
 801156c:	4639      	mov	r1, r7
 801156e:	4620      	mov	r0, r4
 8011570:	f7f8 fc14 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 8011574:	1bf1      	subs	r1, r6, r7
 8011576:	4441      	add	r1, r8
 8011578:	4605      	mov	r5, r0
 801157a:	4602      	mov	r2, r0
 801157c:	2800      	cmp	r0, #0
 801157e:	d1ea      	bne.n	8011556 <ucdr_serialize_endian_array_uint8_t+0x16>
 8011580:	2301      	movs	r3, #1
 8011582:	7da0      	ldrb	r0, [r4, #22]
 8011584:	7563      	strb	r3, [r4, #21]
 8011586:	4058      	eors	r0, r3
 8011588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158c:	4632      	mov	r2, r6
 801158e:	68a0      	ldr	r0, [r4, #8]
 8011590:	4641      	mov	r1, r8
 8011592:	f001 fdf3 	bl	801317c <memcpy>
 8011596:	68a2      	ldr	r2, [r4, #8]
 8011598:	6923      	ldr	r3, [r4, #16]
 801159a:	4432      	add	r2, r6
 801159c:	4433      	add	r3, r6
 801159e:	60a2      	str	r2, [r4, #8]
 80115a0:	6123      	str	r3, [r4, #16]
 80115a2:	e7ed      	b.n	8011580 <ucdr_serialize_endian_array_uint8_t+0x40>

080115a4 <ucdr_deserialize_array_uint8_t>:
 80115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	4688      	mov	r8, r1
 80115aa:	4611      	mov	r1, r2
 80115ac:	4616      	mov	r6, r2
 80115ae:	4604      	mov	r4, r0
 80115b0:	f7f8 fb6e 	bl	8009c90 <ucdr_check_buffer_available_for>
 80115b4:	b9e0      	cbnz	r0, 80115f0 <ucdr_deserialize_array_uint8_t+0x4c>
 80115b6:	4637      	mov	r7, r6
 80115b8:	e009      	b.n	80115ce <ucdr_deserialize_array_uint8_t+0x2a>
 80115ba:	68a1      	ldr	r1, [r4, #8]
 80115bc:	f001 fdde 	bl	801317c <memcpy>
 80115c0:	68a2      	ldr	r2, [r4, #8]
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	442a      	add	r2, r5
 80115c6:	442b      	add	r3, r5
 80115c8:	1b7f      	subs	r7, r7, r5
 80115ca:	60a2      	str	r2, [r4, #8]
 80115cc:	6123      	str	r3, [r4, #16]
 80115ce:	2201      	movs	r2, #1
 80115d0:	4639      	mov	r1, r7
 80115d2:	4620      	mov	r0, r4
 80115d4:	f7f8 fbe2 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 80115d8:	4605      	mov	r5, r0
 80115da:	1bf0      	subs	r0, r6, r7
 80115dc:	4440      	add	r0, r8
 80115de:	462a      	mov	r2, r5
 80115e0:	2d00      	cmp	r5, #0
 80115e2:	d1ea      	bne.n	80115ba <ucdr_deserialize_array_uint8_t+0x16>
 80115e4:	2301      	movs	r3, #1
 80115e6:	7da0      	ldrb	r0, [r4, #22]
 80115e8:	7563      	strb	r3, [r4, #21]
 80115ea:	4058      	eors	r0, r3
 80115ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f0:	4632      	mov	r2, r6
 80115f2:	68a1      	ldr	r1, [r4, #8]
 80115f4:	4640      	mov	r0, r8
 80115f6:	f001 fdc1 	bl	801317c <memcpy>
 80115fa:	68a3      	ldr	r3, [r4, #8]
 80115fc:	6922      	ldr	r2, [r4, #16]
 80115fe:	4433      	add	r3, r6
 8011600:	4432      	add	r2, r6
 8011602:	60a3      	str	r3, [r4, #8]
 8011604:	6122      	str	r2, [r4, #16]
 8011606:	e7ed      	b.n	80115e4 <ucdr_deserialize_array_uint8_t+0x40>

08011608 <ucdr_deserialize_endian_array_uint8_t>:
 8011608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801160c:	4619      	mov	r1, r3
 801160e:	461e      	mov	r6, r3
 8011610:	4690      	mov	r8, r2
 8011612:	4604      	mov	r4, r0
 8011614:	f7f8 fb3c 	bl	8009c90 <ucdr_check_buffer_available_for>
 8011618:	b9e0      	cbnz	r0, 8011654 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801161a:	4637      	mov	r7, r6
 801161c:	e009      	b.n	8011632 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801161e:	68a1      	ldr	r1, [r4, #8]
 8011620:	f001 fdac 	bl	801317c <memcpy>
 8011624:	68a2      	ldr	r2, [r4, #8]
 8011626:	6923      	ldr	r3, [r4, #16]
 8011628:	442a      	add	r2, r5
 801162a:	442b      	add	r3, r5
 801162c:	1b7f      	subs	r7, r7, r5
 801162e:	60a2      	str	r2, [r4, #8]
 8011630:	6123      	str	r3, [r4, #16]
 8011632:	2201      	movs	r2, #1
 8011634:	4639      	mov	r1, r7
 8011636:	4620      	mov	r0, r4
 8011638:	f7f8 fbb0 	bl	8009d9c <ucdr_check_final_buffer_behavior_array>
 801163c:	4605      	mov	r5, r0
 801163e:	1bf0      	subs	r0, r6, r7
 8011640:	4440      	add	r0, r8
 8011642:	462a      	mov	r2, r5
 8011644:	2d00      	cmp	r5, #0
 8011646:	d1ea      	bne.n	801161e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011648:	2301      	movs	r3, #1
 801164a:	7da0      	ldrb	r0, [r4, #22]
 801164c:	7563      	strb	r3, [r4, #21]
 801164e:	4058      	eors	r0, r3
 8011650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011654:	4632      	mov	r2, r6
 8011656:	68a1      	ldr	r1, [r4, #8]
 8011658:	4640      	mov	r0, r8
 801165a:	f001 fd8f 	bl	801317c <memcpy>
 801165e:	68a2      	ldr	r2, [r4, #8]
 8011660:	6923      	ldr	r3, [r4, #16]
 8011662:	4432      	add	r2, r6
 8011664:	4433      	add	r3, r6
 8011666:	60a2      	str	r2, [r4, #8]
 8011668:	6123      	str	r3, [r4, #16]
 801166a:	e7ed      	b.n	8011648 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801166c <ucdr_serialize_sequence_char>:
 801166c:	b570      	push	{r4, r5, r6, lr}
 801166e:	460e      	mov	r6, r1
 8011670:	4615      	mov	r5, r2
 8011672:	7d01      	ldrb	r1, [r0, #20]
 8011674:	4604      	mov	r4, r0
 8011676:	f7f7 fccb 	bl	8009010 <ucdr_serialize_endian_uint32_t>
 801167a:	b90d      	cbnz	r5, 8011680 <ucdr_serialize_sequence_char+0x14>
 801167c:	2001      	movs	r0, #1
 801167e:	bd70      	pop	{r4, r5, r6, pc}
 8011680:	7d21      	ldrb	r1, [r4, #20]
 8011682:	462b      	mov	r3, r5
 8011684:	4632      	mov	r2, r6
 8011686:	4620      	mov	r0, r4
 8011688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801168c:	f7ff bec2 	b.w	8011414 <ucdr_serialize_endian_array_char>

08011690 <ucdr_deserialize_sequence_char>:
 8011690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011694:	461d      	mov	r5, r3
 8011696:	4616      	mov	r6, r2
 8011698:	460f      	mov	r7, r1
 801169a:	461a      	mov	r2, r3
 801169c:	7d01      	ldrb	r1, [r0, #20]
 801169e:	4604      	mov	r4, r0
 80116a0:	f7f7 fdde 	bl	8009260 <ucdr_deserialize_endian_uint32_t>
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	429e      	cmp	r6, r3
 80116a8:	bf3c      	itt	cc
 80116aa:	2201      	movcc	r2, #1
 80116ac:	75a2      	strbcc	r2, [r4, #22]
 80116ae:	b913      	cbnz	r3, 80116b6 <ucdr_deserialize_sequence_char+0x26>
 80116b0:	2001      	movs	r0, #1
 80116b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b6:	7d21      	ldrb	r1, [r4, #20]
 80116b8:	463a      	mov	r2, r7
 80116ba:	4620      	mov	r0, r4
 80116bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116c0:	f7ff beda 	b.w	8011478 <ucdr_deserialize_endian_array_char>

080116c4 <ucdr_serialize_sequence_uint8_t>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	460e      	mov	r6, r1
 80116c8:	4615      	mov	r5, r2
 80116ca:	7d01      	ldrb	r1, [r0, #20]
 80116cc:	4604      	mov	r4, r0
 80116ce:	f7f7 fc9f 	bl	8009010 <ucdr_serialize_endian_uint32_t>
 80116d2:	b90d      	cbnz	r5, 80116d8 <ucdr_serialize_sequence_uint8_t+0x14>
 80116d4:	2001      	movs	r0, #1
 80116d6:	bd70      	pop	{r4, r5, r6, pc}
 80116d8:	7d21      	ldrb	r1, [r4, #20]
 80116da:	462b      	mov	r3, r5
 80116dc:	4632      	mov	r2, r6
 80116de:	4620      	mov	r0, r4
 80116e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116e4:	f7ff bf2c 	b.w	8011540 <ucdr_serialize_endian_array_uint8_t>

080116e8 <ucdr_deserialize_sequence_uint8_t>:
 80116e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ec:	461d      	mov	r5, r3
 80116ee:	4616      	mov	r6, r2
 80116f0:	460f      	mov	r7, r1
 80116f2:	461a      	mov	r2, r3
 80116f4:	7d01      	ldrb	r1, [r0, #20]
 80116f6:	4604      	mov	r4, r0
 80116f8:	f7f7 fdb2 	bl	8009260 <ucdr_deserialize_endian_uint32_t>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	429e      	cmp	r6, r3
 8011700:	bf3c      	itt	cc
 8011702:	2201      	movcc	r2, #1
 8011704:	75a2      	strbcc	r2, [r4, #22]
 8011706:	b913      	cbnz	r3, 801170e <ucdr_deserialize_sequence_uint8_t+0x26>
 8011708:	2001      	movs	r0, #1
 801170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801170e:	7d21      	ldrb	r1, [r4, #20]
 8011710:	463a      	mov	r2, r7
 8011712:	4620      	mov	r0, r4
 8011714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011718:	f7ff bf76 	b.w	8011608 <ucdr_deserialize_endian_array_uint8_t>

0801171c <ucdr_serialize_string>:
 801171c:	b510      	push	{r4, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	4604      	mov	r4, r0
 8011722:	4608      	mov	r0, r1
 8011724:	9101      	str	r1, [sp, #4]
 8011726:	f7ee fd7d 	bl	8000224 <strlen>
 801172a:	9901      	ldr	r1, [sp, #4]
 801172c:	4602      	mov	r2, r0
 801172e:	3201      	adds	r2, #1
 8011730:	4620      	mov	r0, r4
 8011732:	b002      	add	sp, #8
 8011734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011738:	f7ff bf98 	b.w	801166c <ucdr_serialize_sequence_char>

0801173c <ucdr_deserialize_string>:
 801173c:	b500      	push	{lr}
 801173e:	b083      	sub	sp, #12
 8011740:	ab01      	add	r3, sp, #4
 8011742:	f7ff ffa5 	bl	8011690 <ucdr_deserialize_sequence_char>
 8011746:	b003      	add	sp, #12
 8011748:	f85d fb04 	ldr.w	pc, [sp], #4

0801174c <get_custom_error>:
 801174c:	4b01      	ldr	r3, [pc, #4]	; (8011754 <get_custom_error+0x8>)
 801174e:	7818      	ldrb	r0, [r3, #0]
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	2000c210 	.word	0x2000c210

08011758 <recv_custom_msg>:
 8011758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011760:	b089      	sub	sp, #36	; 0x24
 8011762:	2600      	movs	r6, #0
 8011764:	4604      	mov	r4, r0
 8011766:	9305      	str	r3, [sp, #20]
 8011768:	468a      	mov	sl, r1
 801176a:	4693      	mov	fp, r2
 801176c:	f88d 601e 	strb.w	r6, [sp, #30]
 8011770:	b325      	cbz	r5, 80117bc <recv_custom_msg+0x64>
 8011772:	f200 2902 	addw	r9, r0, #514	; 0x202
 8011776:	f10d 081f 	add.w	r8, sp, #31
 801177a:	af05      	add	r7, sp, #20
 801177c:	f10d 061e 	add.w	r6, sp, #30
 8011780:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011784:	e002      	b.n	801178c <recv_custom_msg+0x34>
 8011786:	9b05      	ldr	r3, [sp, #20]
 8011788:	2b00      	cmp	r3, #0
 801178a:	dd0f      	ble.n	80117ac <recv_custom_msg+0x54>
 801178c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011790:	e9cd 5600 	strd	r5, r6, [sp]
 8011794:	4623      	mov	r3, r4
 8011796:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801179a:	4622      	mov	r2, r4
 801179c:	4648      	mov	r0, r9
 801179e:	f000 ffb5 	bl	801270c <uxr_read_framed_msg>
 80117a2:	2800      	cmp	r0, #0
 80117a4:	d0ef      	beq.n	8011786 <recv_custom_msg+0x2e>
 80117a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80117aa:	b1b3      	cbz	r3, 80117da <recv_custom_msg+0x82>
 80117ac:	4b0f      	ldr	r3, [pc, #60]	; (80117ec <recv_custom_msg+0x94>)
 80117ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80117b2:	701a      	strb	r2, [r3, #0]
 80117b4:	2000      	movs	r0, #0
 80117b6:	b009      	add	sp, #36	; 0x24
 80117b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117bc:	f10d 021f 	add.w	r2, sp, #31
 80117c0:	9200      	str	r2, [sp, #0]
 80117c2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80117c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80117ca:	4601      	mov	r1, r0
 80117cc:	47a8      	blx	r5
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d0ec      	beq.n	80117ac <recv_custom_msg+0x54>
 80117d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1e8      	bne.n	80117ac <recv_custom_msg+0x54>
 80117da:	f8cb 0000 	str.w	r0, [fp]
 80117de:	2001      	movs	r0, #1
 80117e0:	f8ca 4000 	str.w	r4, [sl]
 80117e4:	b009      	add	sp, #36	; 0x24
 80117e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ea:	bf00      	nop
 80117ec:	2000c210 	.word	0x2000c210

080117f0 <send_custom_msg>:
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80117f6:	b086      	sub	sp, #24
 80117f8:	4616      	mov	r6, r2
 80117fa:	b975      	cbnz	r5, 801181a <send_custom_msg+0x2a>
 80117fc:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8011800:	f10d 0317 	add.w	r3, sp, #23
 8011804:	47a0      	blx	r4
 8011806:	b108      	cbz	r0, 801180c <send_custom_msg+0x1c>
 8011808:	42b0      	cmp	r0, r6
 801180a:	d015      	beq.n	8011838 <send_custom_msg+0x48>
 801180c:	4b0c      	ldr	r3, [pc, #48]	; (8011840 <send_custom_msg+0x50>)
 801180e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011812:	701a      	strb	r2, [r3, #0]
 8011814:	2000      	movs	r0, #0
 8011816:	b006      	add	sp, #24
 8011818:	bd70      	pop	{r4, r5, r6, pc}
 801181a:	460b      	mov	r3, r1
 801181c:	2200      	movs	r2, #0
 801181e:	f10d 0117 	add.w	r1, sp, #23
 8011822:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011826:	9600      	str	r6, [sp, #0]
 8011828:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801182c:	4602      	mov	r2, r0
 801182e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8011832:	f000 fd83 	bl	801233c <uxr_write_framed_msg>
 8011836:	e7e6      	b.n	8011806 <send_custom_msg+0x16>
 8011838:	2001      	movs	r0, #1
 801183a:	b006      	add	sp, #24
 801183c:	bd70      	pop	{r4, r5, r6, pc}
 801183e:	bf00      	nop
 8011840:	2000c210 	.word	0x2000c210

08011844 <uxr_set_custom_transport_callbacks>:
 8011844:	b430      	push	{r4, r5}
 8011846:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801184a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801184e:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 8011852:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8011856:	bc30      	pop	{r4, r5}
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop

0801185c <uxr_init_custom_transport>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8011862:	b303      	cbz	r3, 80118a6 <uxr_init_custom_transport+0x4a>
 8011864:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8011868:	4604      	mov	r4, r0
 801186a:	b1e2      	cbz	r2, 80118a6 <uxr_init_custom_transport+0x4a>
 801186c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8011870:	b1ca      	cbz	r2, 80118a6 <uxr_init_custom_transport+0x4a>
 8011872:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8011876:	b1b2      	cbz	r2, 80118a6 <uxr_init_custom_transport+0x4a>
 8011878:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801187c:	4798      	blx	r3
 801187e:	4605      	mov	r5, r0
 8011880:	b188      	cbz	r0, 80118a6 <uxr_init_custom_transport+0x4a>
 8011882:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8011886:	b98b      	cbnz	r3, 80118ac <uxr_init_custom_transport+0x50>
 8011888:	480b      	ldr	r0, [pc, #44]	; (80118b8 <uxr_init_custom_transport+0x5c>)
 801188a:	490c      	ldr	r1, [pc, #48]	; (80118bc <uxr_init_custom_transport+0x60>)
 801188c:	4a0c      	ldr	r2, [pc, #48]	; (80118c0 <uxr_init_custom_transport+0x64>)
 801188e:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8011892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011896:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 801189a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801189e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80118a2:	4628      	mov	r0, r5
 80118a4:	bd38      	pop	{r3, r4, r5, pc}
 80118a6:	2500      	movs	r5, #0
 80118a8:	4628      	mov	r0, r5
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	2100      	movs	r1, #0
 80118ae:	f204 2002 	addw	r0, r4, #514	; 0x202
 80118b2:	f000 fd3d 	bl	8012330 <uxr_init_framing_io>
 80118b6:	e7e7      	b.n	8011888 <uxr_init_custom_transport+0x2c>
 80118b8:	080117f1 	.word	0x080117f1
 80118bc:	08011759 	.word	0x08011759
 80118c0:	0801174d 	.word	0x0801174d

080118c4 <uxr_close_custom_transport>:
 80118c4:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80118c8:	4718      	bx	r3
 80118ca:	bf00      	nop

080118cc <uxr_init_input_best_effort_stream>:
 80118cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80118d0:	8003      	strh	r3, [r0, #0]
 80118d2:	4770      	bx	lr

080118d4 <uxr_reset_input_best_effort_stream>:
 80118d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80118d8:	8003      	strh	r3, [r0, #0]
 80118da:	4770      	bx	lr

080118dc <uxr_receive_best_effort_message>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	4604      	mov	r4, r0
 80118e0:	8800      	ldrh	r0, [r0, #0]
 80118e2:	460d      	mov	r5, r1
 80118e4:	f000 fd0c 	bl	8012300 <uxr_seq_num_cmp>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80118f0:	bfb8      	it	lt
 80118f2:	8025      	strhlt	r5, [r4, #0]
 80118f4:	bd38      	pop	{r3, r4, r5, pc}
 80118f6:	bf00      	nop

080118f8 <on_full_input_buffer>:
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	6802      	ldr	r2, [r0, #0]
 80118fc:	460d      	mov	r5, r1
 80118fe:	6809      	ldr	r1, [r1, #0]
 8011900:	686c      	ldr	r4, [r5, #4]
 8011902:	1a53      	subs	r3, r2, r1
 8011904:	4606      	mov	r6, r0
 8011906:	8928      	ldrh	r0, [r5, #8]
 8011908:	fbb4 f4f0 	udiv	r4, r4, r0
 801190c:	fbb3 f3f4 	udiv	r3, r3, r4
 8011910:	3301      	adds	r3, #1
 8011912:	b29b      	uxth	r3, r3
 8011914:	fbb3 f2f0 	udiv	r2, r3, r0
 8011918:	fb00 3312 	mls	r3, r0, r2, r3
 801191c:	b29b      	uxth	r3, r3
 801191e:	fb04 f403 	mul.w	r4, r4, r3
 8011922:	1d23      	adds	r3, r4, #4
 8011924:	440b      	add	r3, r1
 8011926:	7d28      	ldrb	r0, [r5, #20]
 8011928:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801192c:	b110      	cbz	r0, 8011934 <on_full_input_buffer+0x3c>
 801192e:	2000      	movs	r0, #0
 8011930:	f843 0c04 	str.w	r0, [r3, #-4]
 8011934:	2a03      	cmp	r2, #3
 8011936:	d801      	bhi.n	801193c <on_full_input_buffer+0x44>
 8011938:	2001      	movs	r0, #1
 801193a:	bd70      	pop	{r4, r5, r6, pc}
 801193c:	3408      	adds	r4, #8
 801193e:	6933      	ldr	r3, [r6, #16]
 8011940:	4421      	add	r1, r4
 8011942:	4630      	mov	r0, r6
 8011944:	3a04      	subs	r2, #4
 8011946:	f7f8 f9ed 	bl	8009d24 <ucdr_init_buffer_origin>
 801194a:	4630      	mov	r0, r6
 801194c:	4902      	ldr	r1, [pc, #8]	; (8011958 <on_full_input_buffer+0x60>)
 801194e:	462a      	mov	r2, r5
 8011950:	f7f8 f9c6 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 8011954:	2000      	movs	r0, #0
 8011956:	bd70      	pop	{r4, r5, r6, pc}
 8011958:	080118f9 	.word	0x080118f9

0801195c <uxr_init_input_reliable_stream>:
 801195c:	b470      	push	{r4, r5, r6}
 801195e:	9c03      	ldr	r4, [sp, #12]
 8011960:	6001      	str	r1, [r0, #0]
 8011962:	2600      	movs	r6, #0
 8011964:	8103      	strh	r3, [r0, #8]
 8011966:	6042      	str	r2, [r0, #4]
 8011968:	6104      	str	r4, [r0, #16]
 801196a:	7506      	strb	r6, [r0, #20]
 801196c:	b1ab      	cbz	r3, 801199a <uxr_init_input_reliable_stream+0x3e>
 801196e:	600e      	str	r6, [r1, #0]
 8011970:	8901      	ldrh	r1, [r0, #8]
 8011972:	2901      	cmp	r1, #1
 8011974:	d911      	bls.n	801199a <uxr_init_input_reliable_stream+0x3e>
 8011976:	2201      	movs	r2, #1
 8011978:	e9d0 5400 	ldrd	r5, r4, [r0]
 801197c:	fbb2 f3f1 	udiv	r3, r2, r1
 8011980:	fb01 2313 	mls	r3, r1, r3, r2
 8011984:	b29b      	uxth	r3, r3
 8011986:	fbb4 f1f1 	udiv	r1, r4, r1
 801198a:	fb03 f301 	mul.w	r3, r3, r1
 801198e:	3201      	adds	r2, #1
 8011990:	50ee      	str	r6, [r5, r3]
 8011992:	8901      	ldrh	r1, [r0, #8]
 8011994:	b292      	uxth	r2, r2
 8011996:	4291      	cmp	r1, r2
 8011998:	d8ee      	bhi.n	8011978 <uxr_init_input_reliable_stream+0x1c>
 801199a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801199e:	bc70      	pop	{r4, r5, r6}
 80119a0:	60c3      	str	r3, [r0, #12]
 80119a2:	4770      	bx	lr

080119a4 <uxr_reset_input_reliable_stream>:
 80119a4:	8902      	ldrh	r2, [r0, #8]
 80119a6:	b1ca      	cbz	r2, 80119dc <uxr_reset_input_reliable_stream+0x38>
 80119a8:	b470      	push	{r4, r5, r6}
 80119aa:	2400      	movs	r4, #0
 80119ac:	4621      	mov	r1, r4
 80119ae:	4626      	mov	r6, r4
 80119b0:	fbb1 f3f2 	udiv	r3, r1, r2
 80119b4:	fb02 1313 	mls	r3, r2, r3, r1
 80119b8:	e9d0 5100 	ldrd	r5, r1, [r0]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	fbb1 f2f2 	udiv	r2, r1, r2
 80119c2:	fb03 f302 	mul.w	r3, r3, r2
 80119c6:	3401      	adds	r4, #1
 80119c8:	50ee      	str	r6, [r5, r3]
 80119ca:	8902      	ldrh	r2, [r0, #8]
 80119cc:	b2a1      	uxth	r1, r4
 80119ce:	428a      	cmp	r2, r1
 80119d0:	d8ee      	bhi.n	80119b0 <uxr_reset_input_reliable_stream+0xc>
 80119d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119d6:	bc70      	pop	{r4, r5, r6}
 80119d8:	60c3      	str	r3, [r0, #12]
 80119da:	4770      	bx	lr
 80119dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119e0:	60c3      	str	r3, [r0, #12]
 80119e2:	4770      	bx	lr

080119e4 <uxr_receive_reliable_message>:
 80119e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119e8:	4604      	mov	r4, r0
 80119ea:	460d      	mov	r5, r1
 80119ec:	8901      	ldrh	r1, [r0, #8]
 80119ee:	8980      	ldrh	r0, [r0, #12]
 80119f0:	4690      	mov	r8, r2
 80119f2:	461f      	mov	r7, r3
 80119f4:	f000 fc7c 	bl	80122f0 <uxr_seq_num_add>
 80119f8:	4629      	mov	r1, r5
 80119fa:	4606      	mov	r6, r0
 80119fc:	89a0      	ldrh	r0, [r4, #12]
 80119fe:	f000 fc7f 	bl	8012300 <uxr_seq_num_cmp>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	db0a      	blt.n	8011a1c <uxr_receive_reliable_message+0x38>
 8011a06:	2600      	movs	r6, #0
 8011a08:	89e0      	ldrh	r0, [r4, #14]
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	f000 fc78 	bl	8012300 <uxr_seq_num_cmp>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	bfb8      	it	lt
 8011a14:	81e5      	strhlt	r5, [r4, #14]
 8011a16:	4630      	mov	r0, r6
 8011a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	4629      	mov	r1, r5
 8011a20:	f000 fc6e 	bl	8012300 <uxr_seq_num_cmp>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	dbee      	blt.n	8011a06 <uxr_receive_reliable_message+0x22>
 8011a28:	6923      	ldr	r3, [r4, #16]
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	4798      	blx	r3
 8011a2e:	2101      	movs	r1, #1
 8011a30:	4681      	mov	r9, r0
 8011a32:	89a0      	ldrh	r0, [r4, #12]
 8011a34:	f000 fc5c 	bl	80122f0 <uxr_seq_num_add>
 8011a38:	f1b9 0f00 	cmp.w	r9, #0
 8011a3c:	d101      	bne.n	8011a42 <uxr_receive_reliable_message+0x5e>
 8011a3e:	4285      	cmp	r5, r0
 8011a40:	d049      	beq.n	8011ad6 <uxr_receive_reliable_message+0xf2>
 8011a42:	8921      	ldrh	r1, [r4, #8]
 8011a44:	fbb5 f3f1 	udiv	r3, r5, r1
 8011a48:	fb01 5313 	mls	r3, r1, r3, r5
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	6862      	ldr	r2, [r4, #4]
 8011a50:	6820      	ldr	r0, [r4, #0]
 8011a52:	fbb2 f2f1 	udiv	r2, r2, r1
 8011a56:	fb03 f302 	mul.w	r3, r3, r2
 8011a5a:	3304      	adds	r3, #4
 8011a5c:	4418      	add	r0, r3
 8011a5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1cf      	bne.n	8011a06 <uxr_receive_reliable_message+0x22>
 8011a66:	4641      	mov	r1, r8
 8011a68:	463a      	mov	r2, r7
 8011a6a:	f001 fb87 	bl	801317c <memcpy>
 8011a6e:	8921      	ldrh	r1, [r4, #8]
 8011a70:	fbb5 f3f1 	udiv	r3, r5, r1
 8011a74:	fb01 5313 	mls	r3, r1, r3, r5
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	6862      	ldr	r2, [r4, #4]
 8011a7c:	fbb2 f2f1 	udiv	r2, r2, r1
 8011a80:	6821      	ldr	r1, [r4, #0]
 8011a82:	fb03 f302 	mul.w	r3, r3, r2
 8011a86:	2201      	movs	r2, #1
 8011a88:	50cf      	str	r7, [r1, r3]
 8011a8a:	9b08      	ldr	r3, [sp, #32]
 8011a8c:	701a      	strb	r2, [r3, #0]
 8011a8e:	f1b9 0f00 	cmp.w	r9, #0
 8011a92:	d0b8      	beq.n	8011a06 <uxr_receive_reliable_message+0x22>
 8011a94:	89a6      	ldrh	r6, [r4, #12]
 8011a96:	e001      	b.n	8011a9c <uxr_receive_reliable_message+0xb8>
 8011a98:	2801      	cmp	r0, #1
 8011a9a:	d1b4      	bne.n	8011a06 <uxr_receive_reliable_message+0x22>
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	2101      	movs	r1, #1
 8011aa0:	f000 fc26 	bl	80122f0 <uxr_seq_num_add>
 8011aa4:	8921      	ldrh	r1, [r4, #8]
 8011aa6:	fbb0 f3f1 	udiv	r3, r0, r1
 8011aaa:	fb01 0313 	mls	r3, r1, r3, r0
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	6862      	ldr	r2, [r4, #4]
 8011ab2:	fbb2 f2f1 	udiv	r2, r2, r1
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	fb03 f302 	mul.w	r3, r3, r2
 8011abc:	6820      	ldr	r0, [r4, #0]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	4418      	add	r0, r3
 8011ac2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d09d      	beq.n	8011a06 <uxr_receive_reliable_message+0x22>
 8011aca:	6923      	ldr	r3, [r4, #16]
 8011acc:	4798      	blx	r3
 8011ace:	2802      	cmp	r0, #2
 8011ad0:	d1e2      	bne.n	8011a98 <uxr_receive_reliable_message+0xb4>
 8011ad2:	2601      	movs	r6, #1
 8011ad4:	e798      	b.n	8011a08 <uxr_receive_reliable_message+0x24>
 8011ad6:	9b08      	ldr	r3, [sp, #32]
 8011ad8:	81a5      	strh	r5, [r4, #12]
 8011ada:	2601      	movs	r6, #1
 8011adc:	f883 9000 	strb.w	r9, [r3]
 8011ae0:	e792      	b.n	8011a08 <uxr_receive_reliable_message+0x24>
 8011ae2:	bf00      	nop

08011ae4 <uxr_next_input_reliable_buffer_available>:
 8011ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae8:	4604      	mov	r4, r0
 8011aea:	460e      	mov	r6, r1
 8011aec:	8980      	ldrh	r0, [r0, #12]
 8011aee:	2101      	movs	r1, #1
 8011af0:	4617      	mov	r7, r2
 8011af2:	f000 fbfd 	bl	80122f0 <uxr_seq_num_add>
 8011af6:	8921      	ldrh	r1, [r4, #8]
 8011af8:	fbb0 f3f1 	udiv	r3, r0, r1
 8011afc:	fb01 0313 	mls	r3, r1, r3, r0
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	6862      	ldr	r2, [r4, #4]
 8011b04:	fbb2 f2f1 	udiv	r2, r2, r1
 8011b08:	fb03 f302 	mul.w	r3, r3, r2
 8011b0c:	6822      	ldr	r2, [r4, #0]
 8011b0e:	3304      	adds	r3, #4
 8011b10:	eb02 0803 	add.w	r8, r2, r3
 8011b14:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8011b18:	f1b9 0f00 	cmp.w	r9, #0
 8011b1c:	d025      	beq.n	8011b6a <uxr_next_input_reliable_buffer_available+0x86>
 8011b1e:	6923      	ldr	r3, [r4, #16]
 8011b20:	4605      	mov	r5, r0
 8011b22:	4640      	mov	r0, r8
 8011b24:	4798      	blx	r3
 8011b26:	4682      	mov	sl, r0
 8011b28:	b310      	cbz	r0, 8011b70 <uxr_next_input_reliable_buffer_available+0x8c>
 8011b2a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011b2e:	e005      	b.n	8011b3c <uxr_next_input_reliable_buffer_available+0x58>
 8011b30:	6923      	ldr	r3, [r4, #16]
 8011b32:	4798      	blx	r3
 8011b34:	2802      	cmp	r0, #2
 8011b36:	d032      	beq.n	8011b9e <uxr_next_input_reliable_buffer_available+0xba>
 8011b38:	2801      	cmp	r0, #1
 8011b3a:	d116      	bne.n	8011b6a <uxr_next_input_reliable_buffer_available+0x86>
 8011b3c:	4650      	mov	r0, sl
 8011b3e:	2101      	movs	r1, #1
 8011b40:	f000 fbd6 	bl	80122f0 <uxr_seq_num_add>
 8011b44:	8921      	ldrh	r1, [r4, #8]
 8011b46:	fbb0 f3f1 	udiv	r3, r0, r1
 8011b4a:	fb01 0313 	mls	r3, r1, r3, r0
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	6862      	ldr	r2, [r4, #4]
 8011b52:	fbb2 f2f1 	udiv	r2, r2, r1
 8011b56:	4682      	mov	sl, r0
 8011b58:	fb03 f302 	mul.w	r3, r3, r2
 8011b5c:	6820      	ldr	r0, [r4, #0]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	4418      	add	r0, r3
 8011b62:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1e2      	bne.n	8011b30 <uxr_next_input_reliable_buffer_available+0x4c>
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b70:	464a      	mov	r2, r9
 8011b72:	4641      	mov	r1, r8
 8011b74:	4630      	mov	r0, r6
 8011b76:	f7f8 f8dd 	bl	8009d34 <ucdr_init_buffer>
 8011b7a:	8921      	ldrh	r1, [r4, #8]
 8011b7c:	fbb5 f3f1 	udiv	r3, r5, r1
 8011b80:	fb01 5313 	mls	r3, r1, r3, r5
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	6862      	ldr	r2, [r4, #4]
 8011b88:	fbb2 f2f1 	udiv	r2, r2, r1
 8011b8c:	6821      	ldr	r1, [r4, #0]
 8011b8e:	fb03 f302 	mul.w	r3, r3, r2
 8011b92:	2001      	movs	r0, #1
 8011b94:	f841 a003 	str.w	sl, [r1, r3]
 8011b98:	81a5      	strh	r5, [r4, #12]
 8011b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b9e:	8922      	ldrh	r2, [r4, #8]
 8011ba0:	fbb5 f0f2 	udiv	r0, r5, r2
 8011ba4:	fb02 5510 	mls	r5, r2, r0, r5
 8011ba8:	b2ad      	uxth	r5, r5
 8011baa:	6863      	ldr	r3, [r4, #4]
 8011bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bb0:	fb05 f503 	mul.w	r5, r5, r3
 8011bb4:	6823      	ldr	r3, [r4, #0]
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	5158      	str	r0, [r3, r5]
 8011bba:	eba9 0207 	sub.w	r2, r9, r7
 8011bbe:	eb08 0107 	add.w	r1, r8, r7
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	f7f8 f8b6 	bl	8009d34 <ucdr_init_buffer>
 8011bc8:	4630      	mov	r0, r6
 8011bca:	4904      	ldr	r1, [pc, #16]	; (8011bdc <uxr_next_input_reliable_buffer_available+0xf8>)
 8011bcc:	4622      	mov	r2, r4
 8011bce:	f7f8 f887 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 8011bd2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	e7c8      	b.n	8011b6c <uxr_next_input_reliable_buffer_available+0x88>
 8011bda:	bf00      	nop
 8011bdc:	080118f9 	.word	0x080118f9

08011be0 <uxr_process_heartbeat>:
 8011be0:	b538      	push	{r3, r4, r5, lr}
 8011be2:	4611      	mov	r1, r2
 8011be4:	4604      	mov	r4, r0
 8011be6:	89c0      	ldrh	r0, [r0, #14]
 8011be8:	4615      	mov	r5, r2
 8011bea:	f000 fb89 	bl	8012300 <uxr_seq_num_cmp>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	bfb8      	it	lt
 8011bf2:	81e5      	strhlt	r5, [r4, #14]
 8011bf4:	bd38      	pop	{r3, r4, r5, pc}
 8011bf6:	bf00      	nop

08011bf8 <uxr_compute_acknack>:
 8011bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bfc:	8903      	ldrh	r3, [r0, #8]
 8011bfe:	8986      	ldrh	r6, [r0, #12]
 8011c00:	4604      	mov	r4, r0
 8011c02:	460d      	mov	r5, r1
 8011c04:	b1d3      	cbz	r3, 8011c3c <uxr_compute_acknack+0x44>
 8011c06:	4630      	mov	r0, r6
 8011c08:	2701      	movs	r7, #1
 8011c0a:	e003      	b.n	8011c14 <uxr_compute_acknack+0x1c>
 8011c0c:	4567      	cmp	r7, ip
 8011c0e:	d215      	bcs.n	8011c3c <uxr_compute_acknack+0x44>
 8011c10:	89a0      	ldrh	r0, [r4, #12]
 8011c12:	3701      	adds	r7, #1
 8011c14:	b2b9      	uxth	r1, r7
 8011c16:	f000 fb6b 	bl	80122f0 <uxr_seq_num_add>
 8011c1a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011c1e:	fbb0 f2fc 	udiv	r2, r0, ip
 8011c22:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011c26:	fb0c 0212 	mls	r2, ip, r2, r0
 8011c2a:	b292      	uxth	r2, r2
 8011c2c:	fbb3 f3fc 	udiv	r3, r3, ip
 8011c30:	fb02 1303 	mla	r3, r2, r3, r1
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1e8      	bne.n	8011c0c <uxr_compute_acknack+0x14>
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	802e      	strh	r6, [r5, #0]
 8011c3e:	4630      	mov	r0, r6
 8011c40:	2101      	movs	r1, #1
 8011c42:	89e6      	ldrh	r6, [r4, #14]
 8011c44:	f000 fb58 	bl	80122f8 <uxr_seq_num_sub>
 8011c48:	4601      	mov	r1, r0
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f000 fb54 	bl	80122f8 <uxr_seq_num_sub>
 8011c50:	4606      	mov	r6, r0
 8011c52:	b318      	cbz	r0, 8011c9c <uxr_compute_acknack+0xa4>
 8011c54:	f04f 0900 	mov.w	r9, #0
 8011c58:	464f      	mov	r7, r9
 8011c5a:	f04f 0801 	mov.w	r8, #1
 8011c5e:	fa1f f189 	uxth.w	r1, r9
 8011c62:	8828      	ldrh	r0, [r5, #0]
 8011c64:	f000 fb44 	bl	80122f0 <uxr_seq_num_add>
 8011c68:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011c6c:	6822      	ldr	r2, [r4, #0]
 8011c6e:	fbb0 f1fc 	udiv	r1, r0, ip
 8011c72:	fb01 011c 	mls	r1, r1, ip, r0
 8011c76:	b289      	uxth	r1, r1
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	fbb3 f3fc 	udiv	r3, r3, ip
 8011c7e:	fb01 2303 	mla	r3, r1, r3, r2
 8011c82:	fa08 f209 	lsl.w	r2, r8, r9
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f109 0901 	add.w	r9, r9, #1
 8011c8c:	b90b      	cbnz	r3, 8011c92 <uxr_compute_acknack+0x9a>
 8011c8e:	4317      	orrs	r7, r2
 8011c90:	b2bf      	uxth	r7, r7
 8011c92:	454e      	cmp	r6, r9
 8011c94:	d1e3      	bne.n	8011c5e <uxr_compute_acknack+0x66>
 8011c96:	4638      	mov	r0, r7
 8011c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c9c:	4607      	mov	r7, r0
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011ca4 <uxr_init_output_best_effort_stream>:
 8011ca4:	b410      	push	{r4}
 8011ca6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8011caa:	81c4      	strh	r4, [r0, #14]
 8011cac:	e9c0 1300 	strd	r1, r3, [r0]
 8011cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cb4:	7303      	strb	r3, [r0, #12]
 8011cb6:	6082      	str	r2, [r0, #8]
 8011cb8:	4770      	bx	lr
 8011cba:	bf00      	nop

08011cbc <uxr_reset_output_best_effort_stream>:
 8011cbc:	7b02      	ldrb	r2, [r0, #12]
 8011cbe:	6042      	str	r2, [r0, #4]
 8011cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cc4:	81c3      	strh	r3, [r0, #14]
 8011cc6:	4770      	bx	lr

08011cc8 <uxr_prepare_best_effort_buffer_to_write>:
 8011cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cca:	4604      	mov	r4, r0
 8011ccc:	b083      	sub	sp, #12
 8011cce:	6840      	ldr	r0, [r0, #4]
 8011cd0:	460d      	mov	r5, r1
 8011cd2:	4616      	mov	r6, r2
 8011cd4:	f7fb faac 	bl	800d230 <uxr_submessage_padding>
 8011cd8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8011cdc:	4410      	add	r0, r2
 8011cde:	1942      	adds	r2, r0, r5
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	bf2c      	ite	cs
 8011ce4:	2701      	movcs	r7, #1
 8011ce6:	2700      	movcc	r7, #0
 8011ce8:	d202      	bcs.n	8011cf0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8011cea:	4638      	mov	r0, r7
 8011cec:	b003      	add	sp, #12
 8011cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cf0:	9000      	str	r0, [sp, #0]
 8011cf2:	6821      	ldr	r1, [r4, #0]
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	f7f8 f80a 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 8011cfc:	6861      	ldr	r1, [r4, #4]
 8011cfe:	4638      	mov	r0, r7
 8011d00:	4429      	add	r1, r5
 8011d02:	6061      	str	r1, [r4, #4]
 8011d04:	b003      	add	sp, #12
 8011d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d08 <uxr_prepare_best_effort_buffer_to_send>:
 8011d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0c:	6845      	ldr	r5, [r0, #4]
 8011d0e:	4604      	mov	r4, r0
 8011d10:	7b00      	ldrb	r0, [r0, #12]
 8011d12:	4285      	cmp	r5, r0
 8011d14:	bf8c      	ite	hi
 8011d16:	2701      	movhi	r7, #1
 8011d18:	2700      	movls	r7, #0
 8011d1a:	d802      	bhi.n	8011d22 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d22:	4688      	mov	r8, r1
 8011d24:	89e0      	ldrh	r0, [r4, #14]
 8011d26:	2101      	movs	r1, #1
 8011d28:	4615      	mov	r5, r2
 8011d2a:	461e      	mov	r6, r3
 8011d2c:	f000 fae0 	bl	80122f0 <uxr_seq_num_add>
 8011d30:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d34:	81e0      	strh	r0, [r4, #14]
 8011d36:	8030      	strh	r0, [r6, #0]
 8011d38:	f8c8 2000 	str.w	r2, [r8]
 8011d3c:	602b      	str	r3, [r5, #0]
 8011d3e:	7b23      	ldrb	r3, [r4, #12]
 8011d40:	6063      	str	r3, [r4, #4]
 8011d42:	4638      	mov	r0, r7
 8011d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d48 <on_full_output_buffer>:
 8011d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d4a:	6802      	ldr	r2, [r0, #0]
 8011d4c:	460d      	mov	r5, r1
 8011d4e:	6809      	ldr	r1, [r1, #0]
 8011d50:	892f      	ldrh	r7, [r5, #8]
 8011d52:	686c      	ldr	r4, [r5, #4]
 8011d54:	fbb4 f4f7 	udiv	r4, r4, r7
 8011d58:	1a53      	subs	r3, r2, r1
 8011d5a:	fbb3 f3f4 	udiv	r3, r3, r4
 8011d5e:	3301      	adds	r3, #1
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	fbb3 f2f7 	udiv	r2, r3, r7
 8011d66:	fb07 3312 	mls	r3, r7, r2, r3
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	fb04 f403 	mul.w	r4, r4, r3
 8011d70:	7b2f      	ldrb	r7, [r5, #12]
 8011d72:	590a      	ldr	r2, [r1, r4]
 8011d74:	6903      	ldr	r3, [r0, #16]
 8011d76:	443c      	add	r4, r7
 8011d78:	3408      	adds	r4, #8
 8011d7a:	1bd2      	subs	r2, r2, r7
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	4421      	add	r1, r4
 8011d80:	3a04      	subs	r2, #4
 8011d82:	f7f7 ffcf 	bl	8009d24 <ucdr_init_buffer_origin>
 8011d86:	4630      	mov	r0, r6
 8011d88:	4902      	ldr	r1, [pc, #8]	; (8011d94 <on_full_output_buffer+0x4c>)
 8011d8a:	462a      	mov	r2, r5
 8011d8c:	f7f7 ffa8 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 8011d90:	2000      	movs	r0, #0
 8011d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d94:	08011d49 	.word	0x08011d49

08011d98 <uxr_init_output_reliable_stream>:
 8011d98:	b430      	push	{r4, r5}
 8011d9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8011d9e:	6001      	str	r1, [r0, #0]
 8011da0:	8103      	strh	r3, [r0, #8]
 8011da2:	6042      	str	r2, [r0, #4]
 8011da4:	7304      	strb	r4, [r0, #12]
 8011da6:	b1b3      	cbz	r3, 8011dd6 <uxr_init_output_reliable_stream+0x3e>
 8011da8:	600c      	str	r4, [r1, #0]
 8011daa:	8901      	ldrh	r1, [r0, #8]
 8011dac:	2901      	cmp	r1, #1
 8011dae:	d912      	bls.n	8011dd6 <uxr_init_output_reliable_stream+0x3e>
 8011db0:	2201      	movs	r2, #1
 8011db2:	e9d0 5400 	ldrd	r5, r4, [r0]
 8011db6:	fbb2 f3f1 	udiv	r3, r2, r1
 8011dba:	fb01 2313 	mls	r3, r1, r3, r2
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	fbb4 f1f1 	udiv	r1, r4, r1
 8011dc4:	fb03 f301 	mul.w	r3, r3, r1
 8011dc8:	7b01      	ldrb	r1, [r0, #12]
 8011dca:	50e9      	str	r1, [r5, r3]
 8011dcc:	3201      	adds	r2, #1
 8011dce:	8901      	ldrh	r1, [r0, #8]
 8011dd0:	b292      	uxth	r2, r2
 8011dd2:	4291      	cmp	r1, r2
 8011dd4:	d8ed      	bhi.n	8011db2 <uxr_init_output_reliable_stream+0x1a>
 8011dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011dda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011dde:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011de2:	4b05      	ldr	r3, [pc, #20]	; (8011df8 <uxr_init_output_reliable_stream+0x60>)
 8011de4:	f8c0 300e 	str.w	r3, [r0, #14]
 8011de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dec:	2300      	movs	r3, #0
 8011dee:	bc30      	pop	{r4, r5}
 8011df0:	8242      	strh	r2, [r0, #18]
 8011df2:	8403      	strh	r3, [r0, #32]
 8011df4:	4770      	bx	lr
 8011df6:	bf00      	nop
 8011df8:	ffff0000 	.word	0xffff0000

08011dfc <uxr_reset_output_reliable_stream>:
 8011dfc:	8902      	ldrh	r2, [r0, #8]
 8011dfe:	b430      	push	{r4, r5}
 8011e00:	b19a      	cbz	r2, 8011e2a <uxr_reset_output_reliable_stream+0x2e>
 8011e02:	2400      	movs	r4, #0
 8011e04:	4621      	mov	r1, r4
 8011e06:	fbb1 f3f2 	udiv	r3, r1, r2
 8011e0a:	fb02 1313 	mls	r3, r2, r3, r1
 8011e0e:	e9d0 5100 	ldrd	r5, r1, [r0]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	fbb1 f2f2 	udiv	r2, r1, r2
 8011e18:	fb03 f302 	mul.w	r3, r3, r2
 8011e1c:	7b02      	ldrb	r2, [r0, #12]
 8011e1e:	50ea      	str	r2, [r5, r3]
 8011e20:	3401      	adds	r4, #1
 8011e22:	8902      	ldrh	r2, [r0, #8]
 8011e24:	b2a1      	uxth	r1, r4
 8011e26:	428a      	cmp	r2, r1
 8011e28:	d8ed      	bhi.n	8011e06 <uxr_reset_output_reliable_stream+0xa>
 8011e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011e32:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011e36:	4b05      	ldr	r3, [pc, #20]	; (8011e4c <uxr_reset_output_reliable_stream+0x50>)
 8011e38:	f8c0 300e 	str.w	r3, [r0, #14]
 8011e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e40:	2300      	movs	r3, #0
 8011e42:	bc30      	pop	{r4, r5}
 8011e44:	8242      	strh	r2, [r0, #18]
 8011e46:	8403      	strh	r3, [r0, #32]
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop
 8011e4c:	ffff0000 	.word	0xffff0000

08011e50 <uxr_prepare_reliable_buffer_to_write>:
 8011e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	89c6      	ldrh	r6, [r0, #14]
 8011e58:	8900      	ldrh	r0, [r0, #8]
 8011e5a:	f8d4 c000 	ldr.w	ip, [r4]
 8011e5e:	fbb6 f3f0 	udiv	r3, r6, r0
 8011e62:	fb00 6313 	mls	r3, r0, r3, r6
 8011e66:	b091      	sub	sp, #68	; 0x44
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	6865      	ldr	r5, [r4, #4]
 8011e6c:	fbb5 f5f0 	udiv	r5, r5, r0
 8011e70:	fb05 c303 	mla	r3, r5, r3, ip
 8011e74:	9204      	str	r2, [sp, #16]
 8011e76:	1d1a      	adds	r2, r3, #4
 8011e78:	f8d3 8000 	ldr.w	r8, [r3]
 8011e7c:	f894 900c 	ldrb.w	r9, [r4, #12]
 8011e80:	9203      	str	r2, [sp, #12]
 8011e82:	468b      	mov	fp, r1
 8011e84:	1f2f      	subs	r7, r5, #4
 8011e86:	2800      	cmp	r0, #0
 8011e88:	f000 814e 	beq.w	8012128 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 8011e8c:	f04f 0e00 	mov.w	lr, #0
 8011e90:	46f2      	mov	sl, lr
 8011e92:	4672      	mov	r2, lr
 8011e94:	fbb2 f3f0 	udiv	r3, r2, r0
 8011e98:	fb00 2313 	mls	r3, r0, r3, r2
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	fb05 c303 	mla	r3, r5, r3, ip
 8011ea2:	f10e 0e01 	add.w	lr, lr, #1
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	454b      	cmp	r3, r9
 8011eaa:	bf08      	it	eq
 8011eac:	f10a 0a01 	addeq.w	sl, sl, #1
 8011eb0:	fa1f f28e 	uxth.w	r2, lr
 8011eb4:	bf08      	it	eq
 8011eb6:	fa1f fa8a 	uxtheq.w	sl, sl
 8011eba:	4282      	cmp	r2, r0
 8011ebc:	d3ea      	bcc.n	8011e94 <uxr_prepare_reliable_buffer_to_write+0x44>
 8011ebe:	4640      	mov	r0, r8
 8011ec0:	2104      	movs	r1, #4
 8011ec2:	f8cd a014 	str.w	sl, [sp, #20]
 8011ec6:	f7f7 ff39 	bl	8009d3c <ucdr_alignment>
 8011eca:	4480      	add	r8, r0
 8011ecc:	eb08 020b 	add.w	r2, r8, fp
 8011ed0:	42ba      	cmp	r2, r7
 8011ed2:	f240 80cf 	bls.w	8012074 <uxr_prepare_reliable_buffer_to_write+0x224>
 8011ed6:	7b22      	ldrb	r2, [r4, #12]
 8011ed8:	445a      	add	r2, fp
 8011eda:	42ba      	cmp	r2, r7
 8011edc:	f240 80b7 	bls.w	801204e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8011ee0:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8011ee4:	33fc      	adds	r3, #252	; 0xfc
 8011ee6:	b2ba      	uxth	r2, r7
 8011ee8:	4413      	add	r3, r2
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	fb0a f903 	mul.w	r9, sl, r3
 8011ef0:	45d9      	cmp	r9, fp
 8011ef2:	9305      	str	r3, [sp, #20]
 8011ef4:	9306      	str	r3, [sp, #24]
 8011ef6:	f0c0 80b9 	bcc.w	801206c <uxr_prepare_reliable_buffer_to_write+0x21c>
 8011efa:	f108 0304 	add.w	r3, r8, #4
 8011efe:	42bb      	cmp	r3, r7
 8011f00:	f080 80dd 	bcs.w	80120be <uxr_prepare_reliable_buffer_to_write+0x26e>
 8011f04:	f1a2 0904 	sub.w	r9, r2, #4
 8011f08:	eba9 0908 	sub.w	r9, r9, r8
 8011f0c:	9b05      	ldr	r3, [sp, #20]
 8011f0e:	fa1f f989 	uxth.w	r9, r9
 8011f12:	ebab 0b09 	sub.w	fp, fp, r9
 8011f16:	fbbb f2f3 	udiv	r2, fp, r3
 8011f1a:	fb03 b312 	mls	r3, r3, r2, fp
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f000 80ca 	beq.w	80120b8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8011f24:	3201      	adds	r2, #1
 8011f26:	b292      	uxth	r2, r2
 8011f28:	4611      	mov	r1, r2
 8011f2a:	9306      	str	r3, [sp, #24]
 8011f2c:	4551      	cmp	r1, sl
 8011f2e:	f200 809d 	bhi.w	801206c <uxr_prepare_reliable_buffer_to_write+0x21c>
 8011f32:	f10d 0b20 	add.w	fp, sp, #32
 8011f36:	2900      	cmp	r1, #0
 8011f38:	d042      	beq.n	8011fc0 <uxr_prepare_reliable_buffer_to_write+0x170>
 8011f3a:	f8cd 801c 	str.w	r8, [sp, #28]
 8011f3e:	f04f 0a00 	mov.w	sl, #0
 8011f42:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011f46:	9505      	str	r5, [sp, #20]
 8011f48:	f10d 0b20 	add.w	fp, sp, #32
 8011f4c:	460d      	mov	r5, r1
 8011f4e:	e000      	b.n	8011f52 <uxr_prepare_reliable_buffer_to_write+0x102>
 8011f50:	46c1      	mov	r9, r8
 8011f52:	8920      	ldrh	r0, [r4, #8]
 8011f54:	fbb6 f1f0 	udiv	r1, r6, r0
 8011f58:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011f5c:	fb00 6111 	mls	r1, r0, r1, r6
 8011f60:	b289      	uxth	r1, r1
 8011f62:	fbb2 f2f0 	udiv	r2, r2, r0
 8011f66:	fb01 f102 	mul.w	r1, r1, r2
 8011f6a:	3104      	adds	r1, #4
 8011f6c:	4419      	add	r1, r3
 8011f6e:	463a      	mov	r2, r7
 8011f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	4658      	mov	r0, fp
 8011f78:	2300      	movs	r3, #0
 8011f7a:	f7f7 fec9 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 8011f7e:	464a      	mov	r2, r9
 8011f80:	2300      	movs	r3, #0
 8011f82:	210d      	movs	r1, #13
 8011f84:	4658      	mov	r0, fp
 8011f86:	f7fb f913 	bl	800d1b0 <uxr_buffer_submessage_header>
 8011f8a:	8920      	ldrh	r0, [r4, #8]
 8011f8c:	fbb6 f3f0 	udiv	r3, r6, r0
 8011f90:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011f94:	fb00 6313 	mls	r3, r0, r3, r6
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	fbb1 f1f0 	udiv	r1, r1, r0
 8011f9e:	fb03 f301 	mul.w	r3, r3, r1
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	50d7      	str	r7, [r2, r3]
 8011fa6:	2101      	movs	r1, #1
 8011fa8:	f000 f9a2 	bl	80122f0 <uxr_seq_num_add>
 8011fac:	f10a 0a01 	add.w	sl, sl, #1
 8011fb0:	fa1f f38a 	uxth.w	r3, sl
 8011fb4:	429d      	cmp	r5, r3
 8011fb6:	4606      	mov	r6, r0
 8011fb8:	d8ca      	bhi.n	8011f50 <uxr_prepare_reliable_buffer_to_write+0x100>
 8011fba:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8011fbe:	9d05      	ldr	r5, [sp, #20]
 8011fc0:	8921      	ldrh	r1, [r4, #8]
 8011fc2:	fbb6 f3f1 	udiv	r3, r6, r1
 8011fc6:	fb01 6313 	mls	r3, r1, r3, r6
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	6862      	ldr	r2, [r4, #4]
 8011fce:	fbb2 f2f1 	udiv	r2, r2, r1
 8011fd2:	6821      	ldr	r1, [r4, #0]
 8011fd4:	fb03 f302 	mul.w	r3, r3, r2
 8011fd8:	3304      	adds	r3, #4
 8011fda:	4419      	add	r1, r3
 8011fdc:	463a      	mov	r2, r7
 8011fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fe2:	9300      	str	r3, [sp, #0]
 8011fe4:	4658      	mov	r0, fp
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	f7f7 fe92 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 8011fec:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8011ff0:	4658      	mov	r0, fp
 8011ff2:	fa1f f289 	uxth.w	r2, r9
 8011ff6:	2302      	movs	r3, #2
 8011ff8:	210d      	movs	r1, #13
 8011ffa:	f7fb f8d9 	bl	800d1b0 <uxr_buffer_submessage_header>
 8011ffe:	8921      	ldrh	r1, [r4, #8]
 8012000:	7b27      	ldrb	r7, [r4, #12]
 8012002:	fbb6 f0f1 	udiv	r0, r6, r1
 8012006:	e9d4 3200 	ldrd	r3, r2, [r4]
 801200a:	fb01 6010 	mls	r0, r1, r0, r6
 801200e:	b280      	uxth	r0, r0
 8012010:	fbb2 f2f1 	udiv	r2, r2, r1
 8012014:	3704      	adds	r7, #4
 8012016:	fb00 f002 	mul.w	r0, r0, r2
 801201a:	f1a5 0208 	sub.w	r2, r5, #8
 801201e:	464d      	mov	r5, r9
 8012020:	443d      	add	r5, r7
 8012022:	9f03      	ldr	r7, [sp, #12]
 8012024:	501d      	str	r5, [r3, r0]
 8012026:	f108 0104 	add.w	r1, r8, #4
 801202a:	9d04      	ldr	r5, [sp, #16]
 801202c:	440f      	add	r7, r1
 801202e:	eba2 0208 	sub.w	r2, r2, r8
 8012032:	4639      	mov	r1, r7
 8012034:	4628      	mov	r0, r5
 8012036:	f7f7 fe7d 	bl	8009d34 <ucdr_init_buffer>
 801203a:	4628      	mov	r0, r5
 801203c:	493b      	ldr	r1, [pc, #236]	; (801212c <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 801203e:	4622      	mov	r2, r4
 8012040:	f7f7 fe4e 	bl	8009ce0 <ucdr_set_on_full_buffer_callback>
 8012044:	2001      	movs	r0, #1
 8012046:	81e6      	strh	r6, [r4, #14]
 8012048:	b011      	add	sp, #68	; 0x44
 801204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204e:	2101      	movs	r1, #1
 8012050:	89e0      	ldrh	r0, [r4, #14]
 8012052:	f000 f94d 	bl	80122f0 <uxr_seq_num_add>
 8012056:	8921      	ldrh	r1, [r4, #8]
 8012058:	4605      	mov	r5, r0
 801205a:	8a60      	ldrh	r0, [r4, #18]
 801205c:	f000 f948 	bl	80122f0 <uxr_seq_num_add>
 8012060:	4601      	mov	r1, r0
 8012062:	4628      	mov	r0, r5
 8012064:	f000 f94c 	bl	8012300 <uxr_seq_num_cmp>
 8012068:	2800      	cmp	r0, #0
 801206a:	dd42      	ble.n	80120f2 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 801206c:	2000      	movs	r0, #0
 801206e:	b011      	add	sp, #68	; 0x44
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	8921      	ldrh	r1, [r4, #8]
 8012076:	8a60      	ldrh	r0, [r4, #18]
 8012078:	9205      	str	r2, [sp, #20]
 801207a:	f000 f939 	bl	80122f0 <uxr_seq_num_add>
 801207e:	4601      	mov	r1, r0
 8012080:	4630      	mov	r0, r6
 8012082:	f000 f93d 	bl	8012300 <uxr_seq_num_cmp>
 8012086:	2800      	cmp	r0, #0
 8012088:	9a05      	ldr	r2, [sp, #20]
 801208a:	dcef      	bgt.n	801206c <uxr_prepare_reliable_buffer_to_write+0x21c>
 801208c:	8920      	ldrh	r0, [r4, #8]
 801208e:	fbb6 f3f0 	udiv	r3, r6, r0
 8012092:	e9d4 4100 	ldrd	r4, r1, [r4]
 8012096:	fb00 6313 	mls	r3, r0, r3, r6
 801209a:	b29b      	uxth	r3, r3
 801209c:	fbb1 f1f0 	udiv	r1, r1, r0
 80120a0:	fb03 f301 	mul.w	r3, r3, r1
 80120a4:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80120a8:	50e2      	str	r2, [r4, r3]
 80120aa:	f8cd 8000 	str.w	r8, [sp]
 80120ae:	2300      	movs	r3, #0
 80120b0:	f7f7 fe2e 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 80120b4:	2001      	movs	r0, #1
 80120b6:	e7da      	b.n	801206e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80120b8:	b293      	uxth	r3, r2
 80120ba:	4619      	mov	r1, r3
 80120bc:	e736      	b.n	8011f2c <uxr_prepare_reliable_buffer_to_write+0xdc>
 80120be:	4630      	mov	r0, r6
 80120c0:	2101      	movs	r1, #1
 80120c2:	9207      	str	r2, [sp, #28]
 80120c4:	f000 f914 	bl	80122f0 <uxr_seq_num_add>
 80120c8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80120cc:	fbb0 f1fc 	udiv	r1, r0, ip
 80120d0:	fb0c 0111 	mls	r1, ip, r1, r0
 80120d4:	b289      	uxth	r1, r1
 80120d6:	6863      	ldr	r3, [r4, #4]
 80120d8:	fbb3 f3fc 	udiv	r3, r3, ip
 80120dc:	fb01 f103 	mul.w	r1, r1, r3
 80120e0:	6823      	ldr	r3, [r4, #0]
 80120e2:	9a07      	ldr	r2, [sp, #28]
 80120e4:	3104      	adds	r1, #4
 80120e6:	440b      	add	r3, r1
 80120e8:	4606      	mov	r6, r0
 80120ea:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80120ee:	9303      	str	r3, [sp, #12]
 80120f0:	e708      	b.n	8011f04 <uxr_prepare_reliable_buffer_to_write+0xb4>
 80120f2:	8920      	ldrh	r0, [r4, #8]
 80120f4:	fbb5 f3f0 	udiv	r3, r5, r0
 80120f8:	fb00 5313 	mls	r3, r0, r3, r5
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	6862      	ldr	r2, [r4, #4]
 8012100:	6821      	ldr	r1, [r4, #0]
 8012102:	fbb2 f0f0 	udiv	r0, r2, r0
 8012106:	fb03 f300 	mul.w	r3, r3, r0
 801210a:	7b22      	ldrb	r2, [r4, #12]
 801210c:	9804      	ldr	r0, [sp, #16]
 801210e:	3304      	adds	r3, #4
 8012110:	4419      	add	r1, r3
 8012112:	445a      	add	r2, fp
 8012114:	f841 2c04 	str.w	r2, [r1, #-4]
 8012118:	7b23      	ldrb	r3, [r4, #12]
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	2300      	movs	r3, #0
 801211e:	f7f7 fdf7 	bl	8009d10 <ucdr_init_buffer_origin_offset>
 8012122:	81e5      	strh	r5, [r4, #14]
 8012124:	2001      	movs	r0, #1
 8012126:	e7a2      	b.n	801206e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8012128:	4682      	mov	sl, r0
 801212a:	e6c8      	b.n	8011ebe <uxr_prepare_reliable_buffer_to_write+0x6e>
 801212c:	08011d49 	.word	0x08011d49

08012130 <uxr_prepare_next_reliable_buffer_to_send>:
 8012130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012134:	4605      	mov	r5, r0
 8012136:	4688      	mov	r8, r1
 8012138:	8a00      	ldrh	r0, [r0, #16]
 801213a:	2101      	movs	r1, #1
 801213c:	4617      	mov	r7, r2
 801213e:	461e      	mov	r6, r3
 8012140:	f000 f8d6 	bl	80122f0 <uxr_seq_num_add>
 8012144:	8030      	strh	r0, [r6, #0]
 8012146:	892a      	ldrh	r2, [r5, #8]
 8012148:	fbb0 f3f2 	udiv	r3, r0, r2
 801214c:	fb02 0413 	mls	r4, r2, r3, r0
 8012150:	b2a4      	uxth	r4, r4
 8012152:	686b      	ldr	r3, [r5, #4]
 8012154:	fbb3 f2f2 	udiv	r2, r3, r2
 8012158:	682b      	ldr	r3, [r5, #0]
 801215a:	89e9      	ldrh	r1, [r5, #14]
 801215c:	fb04 f402 	mul.w	r4, r4, r2
 8012160:	3404      	adds	r4, #4
 8012162:	4423      	add	r3, r4
 8012164:	f8c8 3000 	str.w	r3, [r8]
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	441c      	add	r4, r3
 801216c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012170:	603b      	str	r3, [r7, #0]
 8012172:	f000 f8c5 	bl	8012300 <uxr_seq_num_cmp>
 8012176:	2800      	cmp	r0, #0
 8012178:	dd02      	ble.n	8012180 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 801217a:	2000      	movs	r0, #0
 801217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012180:	683a      	ldr	r2, [r7, #0]
 8012182:	7b2b      	ldrb	r3, [r5, #12]
 8012184:	429a      	cmp	r2, r3
 8012186:	d9f8      	bls.n	801217a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012188:	8a69      	ldrh	r1, [r5, #18]
 801218a:	8a28      	ldrh	r0, [r5, #16]
 801218c:	f000 f8b4 	bl	80122f8 <uxr_seq_num_sub>
 8012190:	892b      	ldrh	r3, [r5, #8]
 8012192:	4283      	cmp	r3, r0
 8012194:	d0f1      	beq.n	801217a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8012196:	8830      	ldrh	r0, [r6, #0]
 8012198:	89eb      	ldrh	r3, [r5, #14]
 801219a:	8228      	strh	r0, [r5, #16]
 801219c:	4298      	cmp	r0, r3
 801219e:	d002      	beq.n	80121a6 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80121a0:	2001      	movs	r0, #1
 80121a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a6:	2101      	movs	r1, #1
 80121a8:	f000 f8a2 	bl	80122f0 <uxr_seq_num_add>
 80121ac:	81e8      	strh	r0, [r5, #14]
 80121ae:	2001      	movs	r0, #1
 80121b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121b4 <uxr_update_output_stream_heartbeat_timestamp>:
 80121b4:	b5d0      	push	{r4, r6, r7, lr}
 80121b6:	8a01      	ldrh	r1, [r0, #16]
 80121b8:	4604      	mov	r4, r0
 80121ba:	8a40      	ldrh	r0, [r0, #18]
 80121bc:	4616      	mov	r6, r2
 80121be:	461f      	mov	r7, r3
 80121c0:	f000 f89e 	bl	8012300 <uxr_seq_num_cmp>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	db07      	blt.n	80121d8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80121c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80121d0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80121d4:	2000      	movs	r0, #0
 80121d6:	bdd0      	pop	{r4, r6, r7, pc}
 80121d8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80121dc:	b948      	cbnz	r0, 80121f2 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80121de:	2301      	movs	r3, #1
 80121e0:	f884 3020 	strb.w	r3, [r4, #32]
 80121e4:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 80121e8:	f147 0200 	adc.w	r2, r7, #0
 80121ec:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80121f0:	bdd0      	pop	{r4, r6, r7, pc}
 80121f2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80121f6:	4296      	cmp	r6, r2
 80121f8:	eb77 0303 	sbcs.w	r3, r7, r3
 80121fc:	bfa5      	ittet	ge
 80121fe:	3001      	addge	r0, #1
 8012200:	f884 0020 	strbge.w	r0, [r4, #32]
 8012204:	2000      	movlt	r0, #0
 8012206:	2001      	movge	r0, #1
 8012208:	e7ec      	b.n	80121e4 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801220a:	bf00      	nop

0801220c <uxr_begin_output_nack_buffer_it>:
 801220c:	8a40      	ldrh	r0, [r0, #18]
 801220e:	4770      	bx	lr

08012210 <uxr_next_reliable_nack_buffer_to_send>:
 8012210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012214:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8012218:	f1b9 0f00 	cmp.w	r9, #0
 801221c:	d011      	beq.n	8012242 <uxr_next_reliable_nack_buffer_to_send+0x32>
 801221e:	4605      	mov	r5, r0
 8012220:	8818      	ldrh	r0, [r3, #0]
 8012222:	460f      	mov	r7, r1
 8012224:	4690      	mov	r8, r2
 8012226:	461e      	mov	r6, r3
 8012228:	2101      	movs	r1, #1
 801222a:	f000 f861 	bl	80122f0 <uxr_seq_num_add>
 801222e:	8030      	strh	r0, [r6, #0]
 8012230:	8a29      	ldrh	r1, [r5, #16]
 8012232:	f000 f865 	bl	8012300 <uxr_seq_num_cmp>
 8012236:	2800      	cmp	r0, #0
 8012238:	dd06      	ble.n	8012248 <uxr_next_reliable_nack_buffer_to_send+0x38>
 801223a:	f04f 0900 	mov.w	r9, #0
 801223e:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8012242:	4648      	mov	r0, r9
 8012244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012248:	892a      	ldrh	r2, [r5, #8]
 801224a:	8830      	ldrh	r0, [r6, #0]
 801224c:	fbb0 f4f2 	udiv	r4, r0, r2
 8012250:	fb02 0414 	mls	r4, r2, r4, r0
 8012254:	b2a4      	uxth	r4, r4
 8012256:	686b      	ldr	r3, [r5, #4]
 8012258:	fbb3 f2f2 	udiv	r2, r3, r2
 801225c:	682b      	ldr	r3, [r5, #0]
 801225e:	fb04 f402 	mul.w	r4, r4, r2
 8012262:	3404      	adds	r4, #4
 8012264:	4423      	add	r3, r4
 8012266:	603b      	str	r3, [r7, #0]
 8012268:	682b      	ldr	r3, [r5, #0]
 801226a:	441c      	add	r4, r3
 801226c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012270:	f8c8 3000 	str.w	r3, [r8]
 8012274:	7b2a      	ldrb	r2, [r5, #12]
 8012276:	429a      	cmp	r2, r3
 8012278:	d0d6      	beq.n	8012228 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801227a:	4648      	mov	r0, r9
 801227c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012280 <uxr_process_acknack>:
 8012280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012282:	4604      	mov	r4, r0
 8012284:	460e      	mov	r6, r1
 8012286:	4610      	mov	r0, r2
 8012288:	2101      	movs	r1, #1
 801228a:	f000 f835 	bl	80122f8 <uxr_seq_num_sub>
 801228e:	8a61      	ldrh	r1, [r4, #18]
 8012290:	f000 f832 	bl	80122f8 <uxr_seq_num_sub>
 8012294:	b1c0      	cbz	r0, 80122c8 <uxr_process_acknack+0x48>
 8012296:	4605      	mov	r5, r0
 8012298:	2700      	movs	r7, #0
 801229a:	2101      	movs	r1, #1
 801229c:	8a60      	ldrh	r0, [r4, #18]
 801229e:	f000 f827 	bl	80122f0 <uxr_seq_num_add>
 80122a2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80122a6:	fbb0 f3fc 	udiv	r3, r0, ip
 80122aa:	e9d4 2100 	ldrd	r2, r1, [r4]
 80122ae:	fb0c 0313 	mls	r3, ip, r3, r0
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	fbb1 f1fc 	udiv	r1, r1, ip
 80122b8:	3701      	adds	r7, #1
 80122ba:	fb03 f301 	mul.w	r3, r3, r1
 80122be:	42bd      	cmp	r5, r7
 80122c0:	7b21      	ldrb	r1, [r4, #12]
 80122c2:	8260      	strh	r0, [r4, #18]
 80122c4:	50d1      	str	r1, [r2, r3]
 80122c6:	d1e8      	bne.n	801229a <uxr_process_acknack+0x1a>
 80122c8:	3e00      	subs	r6, #0
 80122ca:	f04f 0300 	mov.w	r3, #0
 80122ce:	bf18      	it	ne
 80122d0:	2601      	movne	r6, #1
 80122d2:	f884 3020 	strb.w	r3, [r4, #32]
 80122d6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80122da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080122dc <uxr_is_output_up_to_date>:
 80122dc:	8a01      	ldrh	r1, [r0, #16]
 80122de:	8a40      	ldrh	r0, [r0, #18]
 80122e0:	b508      	push	{r3, lr}
 80122e2:	f000 f80d 	bl	8012300 <uxr_seq_num_cmp>
 80122e6:	fab0 f080 	clz	r0, r0
 80122ea:	0940      	lsrs	r0, r0, #5
 80122ec:	bd08      	pop	{r3, pc}
 80122ee:	bf00      	nop

080122f0 <uxr_seq_num_add>:
 80122f0:	4408      	add	r0, r1
 80122f2:	b280      	uxth	r0, r0
 80122f4:	4770      	bx	lr
 80122f6:	bf00      	nop

080122f8 <uxr_seq_num_sub>:
 80122f8:	1a40      	subs	r0, r0, r1
 80122fa:	b280      	uxth	r0, r0
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop

08012300 <uxr_seq_num_cmp>:
 8012300:	4288      	cmp	r0, r1
 8012302:	d011      	beq.n	8012328 <uxr_seq_num_cmp+0x28>
 8012304:	d309      	bcc.n	801231a <uxr_seq_num_cmp+0x1a>
 8012306:	4288      	cmp	r0, r1
 8012308:	d910      	bls.n	801232c <uxr_seq_num_cmp+0x2c>
 801230a:	1a40      	subs	r0, r0, r1
 801230c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012310:	bfd4      	ite	le
 8012312:	2001      	movle	r0, #1
 8012314:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8012318:	4770      	bx	lr
 801231a:	1a0b      	subs	r3, r1, r0
 801231c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012320:	daf1      	bge.n	8012306 <uxr_seq_num_cmp+0x6>
 8012322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012326:	4770      	bx	lr
 8012328:	2000      	movs	r0, #0
 801232a:	4770      	bx	lr
 801232c:	2001      	movs	r0, #1
 801232e:	4770      	bx	lr

08012330 <uxr_init_framing_io>:
 8012330:	2300      	movs	r3, #0
 8012332:	7041      	strb	r1, [r0, #1]
 8012334:	7003      	strb	r3, [r0, #0]
 8012336:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop

0801233c <uxr_write_framed_msg>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	7845      	ldrb	r5, [r0, #1]
 8012342:	b085      	sub	sp, #20
 8012344:	4604      	mov	r4, r0
 8012346:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 801234a:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 801234e:	f1bc 0f01 	cmp.w	ip, #1
 8012352:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8012356:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801235a:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 801235e:	460e      	mov	r6, r1
 8012360:	4617      	mov	r7, r2
 8012362:	469b      	mov	fp, r3
 8012364:	f240 8116 	bls.w	8012594 <uxr_write_framed_msg+0x258>
 8012368:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801236c:	2302      	movs	r3, #2
 801236e:	2a01      	cmp	r2, #1
 8012370:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8012374:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012378:	f240 8091 	bls.w	801249e <uxr_write_framed_msg+0x162>
 801237c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801237e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8012382:	b2d9      	uxtb	r1, r3
 8012384:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012388:	2203      	movs	r2, #3
 801238a:	2b01      	cmp	r3, #1
 801238c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012390:	f240 809a 	bls.w	80124c8 <uxr_write_framed_msg+0x18c>
 8012394:	18a3      	adds	r3, r4, r2
 8012396:	3201      	adds	r2, #1
 8012398:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801239c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80123a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80123a6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80123aa:	2901      	cmp	r1, #1
 80123ac:	eb04 0102 	add.w	r1, r4, r2
 80123b0:	f240 8101 	bls.w	80125b6 <uxr_write_framed_msg+0x27a>
 80123b4:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80123b8:	3201      	adds	r2, #1
 80123ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123bc:	b2d2      	uxtb	r2, r2
 80123be:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f000 8106 	beq.w	80125d4 <uxr_write_framed_msg+0x298>
 80123c8:	f04f 0a00 	mov.w	sl, #0
 80123cc:	46d1      	mov	r9, sl
 80123ce:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80123d2:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80123d6:	2901      	cmp	r1, #1
 80123d8:	f240 80a3 	bls.w	8012522 <uxr_write_framed_msg+0x1e6>
 80123dc:	2a29      	cmp	r2, #41	; 0x29
 80123de:	d87f      	bhi.n	80124e0 <uxr_write_framed_msg+0x1a4>
 80123e0:	18a1      	adds	r1, r4, r2
 80123e2:	3201      	adds	r2, #1
 80123e4:	b2d2      	uxtb	r2, r2
 80123e6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80123ea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80123ee:	ea8a 0303 	eor.w	r3, sl, r3
 80123f2:	4984      	ldr	r1, [pc, #528]	; (8012604 <uxr_write_framed_msg+0x2c8>)
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f109 0901 	add.w	r9, r9, #1
 80123fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80123fe:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8012402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012404:	454b      	cmp	r3, r9
 8012406:	d8e2      	bhi.n	80123ce <uxr_write_framed_msg+0x92>
 8012408:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801240c:	fa5f f98a 	uxtb.w	r9, sl
 8012410:	9301      	str	r3, [sp, #4]
 8012412:	f04f 0b00 	mov.w	fp, #0
 8012416:	f88d 900c 	strb.w	r9, [sp, #12]
 801241a:	f88d 300d 	strb.w	r3, [sp, #13]
 801241e:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8012422:	fa5f f18a 	uxtb.w	r1, sl
 8012426:	2901      	cmp	r1, #1
 8012428:	d920      	bls.n	801246c <uxr_write_framed_msg+0x130>
 801242a:	2a29      	cmp	r2, #41	; 0x29
 801242c:	f240 808b 	bls.w	8012546 <uxr_write_framed_msg+0x20a>
 8012430:	2500      	movs	r5, #0
 8012432:	e000      	b.n	8012436 <uxr_write_framed_msg+0xfa>
 8012434:	b160      	cbz	r0, 8012450 <uxr_write_framed_msg+0x114>
 8012436:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801243a:	1b52      	subs	r2, r2, r5
 801243c:	4421      	add	r1, r4
 801243e:	4643      	mov	r3, r8
 8012440:	4638      	mov	r0, r7
 8012442:	47b0      	blx	r6
 8012444:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012448:	4405      	add	r5, r0
 801244a:	4295      	cmp	r5, r2
 801244c:	d3f2      	bcc.n	8012434 <uxr_write_framed_msg+0xf8>
 801244e:	d003      	beq.n	8012458 <uxr_write_framed_msg+0x11c>
 8012450:	2000      	movs	r0, #0
 8012452:	b005      	add	sp, #20
 8012454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012458:	fa5f f18a 	uxtb.w	r1, sl
 801245c:	f04f 0300 	mov.w	r3, #0
 8012460:	2901      	cmp	r1, #1
 8012462:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012466:	f04f 0200 	mov.w	r2, #0
 801246a:	d86c      	bhi.n	8012546 <uxr_write_framed_msg+0x20a>
 801246c:	1c51      	adds	r1, r2, #1
 801246e:	b2c9      	uxtb	r1, r1
 8012470:	2929      	cmp	r1, #41	; 0x29
 8012472:	d8dd      	bhi.n	8012430 <uxr_write_framed_msg+0xf4>
 8012474:	18a0      	adds	r0, r4, r2
 8012476:	3202      	adds	r2, #2
 8012478:	f089 0920 	eor.w	r9, r9, #32
 801247c:	b2d2      	uxtb	r2, r2
 801247e:	4659      	mov	r1, fp
 8012480:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8012484:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8012488:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801248c:	f04f 0b01 	mov.w	fp, #1
 8012490:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012494:	2900      	cmp	r1, #0
 8012496:	d162      	bne.n	801255e <uxr_write_framed_msg+0x222>
 8012498:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801249c:	e7bf      	b.n	801241e <uxr_write_framed_msg+0xe2>
 801249e:	2204      	movs	r2, #4
 80124a0:	2503      	movs	r5, #3
 80124a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80124a4:	4423      	add	r3, r4
 80124a6:	b2c9      	uxtb	r1, r1
 80124a8:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80124ac:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 80124b0:	4425      	add	r5, r4
 80124b2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80124b6:	f080 0020 	eor.w	r0, r0, #32
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80124c0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80124c4:	f63f af66 	bhi.w	8012394 <uxr_write_framed_msg+0x58>
 80124c8:	18a3      	adds	r3, r4, r2
 80124ca:	f081 0120 	eor.w	r1, r1, #32
 80124ce:	3202      	adds	r2, #2
 80124d0:	207d      	movs	r0, #125	; 0x7d
 80124d2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80124d6:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80124da:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80124de:	e75f      	b.n	80123a0 <uxr_write_framed_msg+0x64>
 80124e0:	2500      	movs	r5, #0
 80124e2:	e001      	b.n	80124e8 <uxr_write_framed_msg+0x1ac>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d0b3      	beq.n	8012450 <uxr_write_framed_msg+0x114>
 80124e8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80124ec:	1b52      	subs	r2, r2, r5
 80124ee:	4421      	add	r1, r4
 80124f0:	4643      	mov	r3, r8
 80124f2:	4638      	mov	r0, r7
 80124f4:	47b0      	blx	r6
 80124f6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80124fa:	4405      	add	r5, r0
 80124fc:	4295      	cmp	r5, r2
 80124fe:	d3f1      	bcc.n	80124e4 <uxr_write_framed_msg+0x1a8>
 8012500:	d1a6      	bne.n	8012450 <uxr_write_framed_msg+0x114>
 8012502:	f04f 0300 	mov.w	r3, #0
 8012506:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801250a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801250c:	454b      	cmp	r3, r9
 801250e:	d971      	bls.n	80125f4 <uxr_write_framed_msg+0x2b8>
 8012510:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012514:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012518:	2901      	cmp	r1, #1
 801251a:	f04f 0200 	mov.w	r2, #0
 801251e:	f63f af5d 	bhi.w	80123dc <uxr_write_framed_msg+0xa0>
 8012522:	1c51      	adds	r1, r2, #1
 8012524:	b2c9      	uxtb	r1, r1
 8012526:	2929      	cmp	r1, #41	; 0x29
 8012528:	d8da      	bhi.n	80124e0 <uxr_write_framed_msg+0x1a4>
 801252a:	18a0      	adds	r0, r4, r2
 801252c:	3202      	adds	r2, #2
 801252e:	b2d2      	uxtb	r2, r2
 8012530:	f083 0120 	eor.w	r1, r3, #32
 8012534:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8012538:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801253c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8012540:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012544:	e753      	b.n	80123ee <uxr_write_framed_msg+0xb2>
 8012546:	18a0      	adds	r0, r4, r2
 8012548:	3201      	adds	r2, #1
 801254a:	b2d2      	uxtb	r2, r2
 801254c:	4659      	mov	r1, fp
 801254e:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8012552:	f04f 0b01 	mov.w	fp, #1
 8012556:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801255a:	2900      	cmp	r1, #0
 801255c:	d09c      	beq.n	8012498 <uxr_write_framed_msg+0x15c>
 801255e:	2500      	movs	r5, #0
 8012560:	e002      	b.n	8012568 <uxr_write_framed_msg+0x22c>
 8012562:	2800      	cmp	r0, #0
 8012564:	f43f af74 	beq.w	8012450 <uxr_write_framed_msg+0x114>
 8012568:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801256c:	1b52      	subs	r2, r2, r5
 801256e:	4421      	add	r1, r4
 8012570:	4643      	mov	r3, r8
 8012572:	4638      	mov	r0, r7
 8012574:	47b0      	blx	r6
 8012576:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801257a:	4405      	add	r5, r0
 801257c:	4295      	cmp	r5, r2
 801257e:	d3f0      	bcc.n	8012562 <uxr_write_framed_msg+0x226>
 8012580:	f47f af66 	bne.w	8012450 <uxr_write_framed_msg+0x114>
 8012584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012586:	2300      	movs	r3, #0
 8012588:	b290      	uxth	r0, r2
 801258a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801258e:	b005      	add	sp, #20
 8012590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012594:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012598:	f085 0520 	eor.w	r5, r5, #32
 801259c:	2303      	movs	r3, #3
 801259e:	217d      	movs	r1, #125	; 0x7d
 80125a0:	2a01      	cmp	r2, #1
 80125a2:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 80125a6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80125aa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80125ae:	d814      	bhi.n	80125da <uxr_write_framed_msg+0x29e>
 80125b0:	2205      	movs	r2, #5
 80125b2:	2504      	movs	r5, #4
 80125b4:	e775      	b.n	80124a2 <uxr_write_framed_msg+0x166>
 80125b6:	f083 0320 	eor.w	r3, r3, #32
 80125ba:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 80125be:	3202      	adds	r2, #2
 80125c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125c2:	b2d2      	uxtb	r2, r2
 80125c4:	207d      	movs	r0, #125	; 0x7d
 80125c6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80125ca:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	f47f aefa 	bne.w	80123c8 <uxr_write_framed_msg+0x8c>
 80125d4:	9301      	str	r3, [sp, #4]
 80125d6:	4699      	mov	r9, r3
 80125d8:	e71b      	b.n	8012412 <uxr_write_framed_msg+0xd6>
 80125da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125dc:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80125e0:	b2d9      	uxtb	r1, r3
 80125e2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80125e6:	2204      	movs	r2, #4
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80125ee:	f63f aed1 	bhi.w	8012394 <uxr_write_framed_msg+0x58>
 80125f2:	e769      	b.n	80124c8 <uxr_write_framed_msg+0x18c>
 80125f4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80125f8:	fa5f f98a 	uxtb.w	r9, sl
 80125fc:	9301      	str	r3, [sp, #4]
 80125fe:	2200      	movs	r2, #0
 8012600:	e707      	b.n	8012412 <uxr_write_framed_msg+0xd6>
 8012602:	bf00      	nop
 8012604:	08015088 	.word	0x08015088

08012608 <uxr_framing_read_transport>:
 8012608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801260c:	4604      	mov	r4, r0
 801260e:	b083      	sub	sp, #12
 8012610:	461f      	mov	r7, r3
 8012612:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8012616:	4689      	mov	r9, r1
 8012618:	4692      	mov	sl, r2
 801261a:	f7fa fe0f 	bl	800d23c <uxr_millis>
 801261e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012622:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8012626:	42b3      	cmp	r3, r6
 8012628:	4680      	mov	r8, r0
 801262a:	d05f      	beq.n	80126ec <uxr_framing_read_transport+0xe4>
 801262c:	d81b      	bhi.n	8012666 <uxr_framing_read_transport+0x5e>
 801262e:	1e75      	subs	r5, r6, #1
 8012630:	1aed      	subs	r5, r5, r3
 8012632:	b2ed      	uxtb	r5, r5
 8012634:	2600      	movs	r6, #0
 8012636:	455d      	cmp	r5, fp
 8012638:	d81e      	bhi.n	8012678 <uxr_framing_read_transport+0x70>
 801263a:	19ab      	adds	r3, r5, r6
 801263c:	455b      	cmp	r3, fp
 801263e:	bf84      	itt	hi
 8012640:	ebab 0605 	subhi.w	r6, fp, r5
 8012644:	b2f6      	uxtbhi	r6, r6
 8012646:	b9e5      	cbnz	r5, 8012682 <uxr_framing_read_transport+0x7a>
 8012648:	f04f 0b00 	mov.w	fp, #0
 801264c:	f7fa fdf6 	bl	800d23c <uxr_millis>
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	eba0 0008 	sub.w	r0, r0, r8
 8012656:	1a1b      	subs	r3, r3, r0
 8012658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801265c:	4658      	mov	r0, fp
 801265e:	603b      	str	r3, [r7, #0]
 8012660:	b003      	add	sp, #12
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	2e00      	cmp	r6, #0
 8012668:	d048      	beq.n	80126fc <uxr_framing_read_transport+0xf4>
 801266a:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801266e:	b2ed      	uxtb	r5, r5
 8012670:	3e01      	subs	r6, #1
 8012672:	455d      	cmp	r5, fp
 8012674:	b2f6      	uxtb	r6, r6
 8012676:	d9e0      	bls.n	801263a <uxr_framing_read_transport+0x32>
 8012678:	fa5f f58b 	uxtb.w	r5, fp
 801267c:	2600      	movs	r6, #0
 801267e:	2d00      	cmp	r5, #0
 8012680:	d0e2      	beq.n	8012648 <uxr_framing_read_transport+0x40>
 8012682:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012686:	3102      	adds	r1, #2
 8012688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	4421      	add	r1, r4
 8012690:	462a      	mov	r2, r5
 8012692:	4650      	mov	r0, sl
 8012694:	47c8      	blx	r9
 8012696:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801269a:	4a1b      	ldr	r2, [pc, #108]	; (8012708 <uxr_framing_read_transport+0x100>)
 801269c:	4403      	add	r3, r0
 801269e:	0859      	lsrs	r1, r3, #1
 80126a0:	fba2 2101 	umull	r2, r1, r2, r1
 80126a4:	0889      	lsrs	r1, r1, #2
 80126a6:	222a      	movs	r2, #42	; 0x2a
 80126a8:	fb02 3111 	mls	r1, r2, r1, r3
 80126ac:	4683      	mov	fp, r0
 80126ae:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d0c8      	beq.n	8012648 <uxr_framing_read_transport+0x40>
 80126b6:	42a8      	cmp	r0, r5
 80126b8:	d1c8      	bne.n	801264c <uxr_framing_read_transport+0x44>
 80126ba:	b31e      	cbz	r6, 8012704 <uxr_framing_read_transport+0xfc>
 80126bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	3102      	adds	r1, #2
 80126c2:	4421      	add	r1, r4
 80126c4:	4632      	mov	r2, r6
 80126c6:	2300      	movs	r3, #0
 80126c8:	4650      	mov	r0, sl
 80126ca:	47c8      	blx	r9
 80126cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80126d0:	490d      	ldr	r1, [pc, #52]	; (8012708 <uxr_framing_read_transport+0x100>)
 80126d2:	181a      	adds	r2, r3, r0
 80126d4:	0853      	lsrs	r3, r2, #1
 80126d6:	fba1 1303 	umull	r1, r3, r1, r3
 80126da:	089b      	lsrs	r3, r3, #2
 80126dc:	212a      	movs	r1, #42	; 0x2a
 80126de:	fb01 2313 	mls	r3, r1, r3, r2
 80126e2:	eb00 0b05 	add.w	fp, r0, r5
 80126e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80126ea:	e7af      	b.n	801264c <uxr_framing_read_transport+0x44>
 80126ec:	2600      	movs	r6, #0
 80126ee:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80126f2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80126f4:	d9c0      	bls.n	8012678 <uxr_framing_read_transport+0x70>
 80126f6:	2102      	movs	r1, #2
 80126f8:	2529      	movs	r5, #41	; 0x29
 80126fa:	e7c5      	b.n	8012688 <uxr_framing_read_transport+0x80>
 80126fc:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8012700:	b2ed      	uxtb	r5, r5
 8012702:	e798      	b.n	8012636 <uxr_framing_read_transport+0x2e>
 8012704:	46ab      	mov	fp, r5
 8012706:	e7a1      	b.n	801264c <uxr_framing_read_transport+0x44>
 8012708:	30c30c31 	.word	0x30c30c31

0801270c <uxr_read_framed_msg>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8012714:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8012718:	42ae      	cmp	r6, r5
 801271a:	b083      	sub	sp, #12
 801271c:	4604      	mov	r4, r0
 801271e:	461f      	mov	r7, r3
 8012720:	4689      	mov	r9, r1
 8012722:	4692      	mov	sl, r2
 8012724:	f000 817d 	beq.w	8012a22 <uxr_read_framed_msg+0x316>
 8012728:	7823      	ldrb	r3, [r4, #0]
 801272a:	4ecc      	ldr	r6, [pc, #816]	; (8012a5c <uxr_read_framed_msg+0x350>)
 801272c:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8012a60 <uxr_read_framed_msg+0x354>
 8012730:	2b07      	cmp	r3, #7
 8012732:	d8fd      	bhi.n	8012730 <uxr_read_framed_msg+0x24>
 8012734:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012738:	00f40113 	.word	0x00f40113
 801273c:	00b700d4 	.word	0x00b700d4
 8012740:	004d008e 	.word	0x004d008e
 8012744:	00080030 	.word	0x00080030
 8012748:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801274c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012750:	4298      	cmp	r0, r3
 8012752:	f000 8141 	beq.w	80129d8 <uxr_read_framed_msg+0x2cc>
 8012756:	18e2      	adds	r2, r4, r3
 8012758:	7891      	ldrb	r1, [r2, #2]
 801275a:	297d      	cmp	r1, #125	; 0x7d
 801275c:	f000 81a2 	beq.w	8012aa4 <uxr_read_framed_msg+0x398>
 8012760:	3301      	adds	r3, #1
 8012762:	085a      	lsrs	r2, r3, #1
 8012764:	fba6 0202 	umull	r0, r2, r6, r2
 8012768:	0892      	lsrs	r2, r2, #2
 801276a:	202a      	movs	r0, #42	; 0x2a
 801276c:	fb00 3312 	mls	r3, r0, r2, r3
 8012770:	297e      	cmp	r1, #126	; 0x7e
 8012772:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012776:	f000 8251 	beq.w	8012c1c <uxr_read_framed_msg+0x510>
 801277a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801277c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801277e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012782:	b29b      	uxth	r3, r3
 8012784:	2100      	movs	r1, #0
 8012786:	429a      	cmp	r2, r3
 8012788:	86a3      	strh	r3, [r4, #52]	; 0x34
 801278a:	7021      	strb	r1, [r4, #0]
 801278c:	f000 8182 	beq.w	8012a94 <uxr_read_framed_msg+0x388>
 8012790:	2000      	movs	r0, #0
 8012792:	b003      	add	sp, #12
 8012794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012798:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801279c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80127a0:	4298      	cmp	r0, r3
 80127a2:	f000 8128 	beq.w	80129f6 <uxr_read_framed_msg+0x2ea>
 80127a6:	18e2      	adds	r2, r4, r3
 80127a8:	7891      	ldrb	r1, [r2, #2]
 80127aa:	297d      	cmp	r1, #125	; 0x7d
 80127ac:	f000 8196 	beq.w	8012adc <uxr_read_framed_msg+0x3d0>
 80127b0:	3301      	adds	r3, #1
 80127b2:	085a      	lsrs	r2, r3, #1
 80127b4:	fba6 0202 	umull	r0, r2, r6, r2
 80127b8:	0892      	lsrs	r2, r2, #2
 80127ba:	202a      	movs	r0, #42	; 0x2a
 80127bc:	fb00 3312 	mls	r3, r0, r2, r3
 80127c0:	297e      	cmp	r1, #126	; 0x7e
 80127c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80127c6:	f000 8219 	beq.w	8012bfc <uxr_read_framed_msg+0x4f0>
 80127ca:	2307      	movs	r3, #7
 80127cc:	86a1      	strh	r1, [r4, #52]	; 0x34
 80127ce:	7023      	strb	r3, [r4, #0]
 80127d0:	e7ae      	b.n	8012730 <uxr_read_framed_msg+0x24>
 80127d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80127d4:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80127d6:	429d      	cmp	r5, r3
 80127d8:	d937      	bls.n	801284a <uxr_read_framed_msg+0x13e>
 80127da:	ee07 9a90 	vmov	s15, r9
 80127de:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80127e2:	e01e      	b.n	8012822 <uxr_read_framed_msg+0x116>
 80127e4:	f89e e002 	ldrb.w	lr, [lr, #2]
 80127e8:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80127ec:	f000 80d2 	beq.w	8012994 <uxr_read_framed_msg+0x288>
 80127f0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80127f4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80127f8:	f000 8214 	beq.w	8012c24 <uxr_read_framed_msg+0x518>
 80127fc:	f807 e003 	strb.w	lr, [r7, r3]
 8012800:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8012802:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012804:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012806:	ea80 010e 	eor.w	r1, r0, lr
 801280a:	b2c9      	uxtb	r1, r1
 801280c:	3301      	adds	r3, #1
 801280e:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8012812:	b29b      	uxth	r3, r3
 8012814:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8012818:	42ab      	cmp	r3, r5
 801281a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801281c:	8663      	strh	r3, [r4, #50]	; 0x32
 801281e:	f080 8121 	bcs.w	8012a64 <uxr_read_framed_msg+0x358>
 8012822:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8012826:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801282a:	f101 0b01 	add.w	fp, r1, #1
 801282e:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012832:	fba6 9202 	umull	r9, r2, r6, r2
 8012836:	0892      	lsrs	r2, r2, #2
 8012838:	4288      	cmp	r0, r1
 801283a:	eb04 0e01 	add.w	lr, r4, r1
 801283e:	fb0c b212 	mls	r2, ip, r2, fp
 8012842:	d1cf      	bne.n	80127e4 <uxr_read_framed_msg+0xd8>
 8012844:	ee17 9a90 	vmov	r9, s15
 8012848:	429d      	cmp	r5, r3
 801284a:	f040 8112 	bne.w	8012a72 <uxr_read_framed_msg+0x366>
 801284e:	2306      	movs	r3, #6
 8012850:	7023      	strb	r3, [r4, #0]
 8012852:	e76d      	b.n	8012730 <uxr_read_framed_msg+0x24>
 8012854:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012858:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801285c:	4298      	cmp	r0, r3
 801285e:	f000 80bb 	beq.w	80129d8 <uxr_read_framed_msg+0x2cc>
 8012862:	18e2      	adds	r2, r4, r3
 8012864:	7891      	ldrb	r1, [r2, #2]
 8012866:	297d      	cmp	r1, #125	; 0x7d
 8012868:	f000 8153 	beq.w	8012b12 <uxr_read_framed_msg+0x406>
 801286c:	3301      	adds	r3, #1
 801286e:	085a      	lsrs	r2, r3, #1
 8012870:	fba6 0202 	umull	r0, r2, r6, r2
 8012874:	0892      	lsrs	r2, r2, #2
 8012876:	202a      	movs	r0, #42	; 0x2a
 8012878:	fb00 3212 	mls	r2, r0, r2, r3
 801287c:	297e      	cmp	r1, #126	; 0x7e
 801287e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012882:	f000 81cb 	beq.w	8012c1c <uxr_read_framed_msg+0x510>
 8012886:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012888:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801288c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801288e:	b29b      	uxth	r3, r3
 8012890:	2000      	movs	r0, #0
 8012892:	428b      	cmp	r3, r1
 8012894:	8623      	strh	r3, [r4, #48]	; 0x30
 8012896:	8660      	strh	r0, [r4, #50]	; 0x32
 8012898:	86e0      	strh	r0, [r4, #54]	; 0x36
 801289a:	f240 80db 	bls.w	8012a54 <uxr_read_framed_msg+0x348>
 801289e:	7020      	strb	r0, [r4, #0]
 80128a0:	b003      	add	sp, #12
 80128a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80128aa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80128ae:	4298      	cmp	r0, r3
 80128b0:	f000 80a1 	beq.w	80129f6 <uxr_read_framed_msg+0x2ea>
 80128b4:	18e2      	adds	r2, r4, r3
 80128b6:	7891      	ldrb	r1, [r2, #2]
 80128b8:	297d      	cmp	r1, #125	; 0x7d
 80128ba:	f000 8167 	beq.w	8012b8c <uxr_read_framed_msg+0x480>
 80128be:	3301      	adds	r3, #1
 80128c0:	085a      	lsrs	r2, r3, #1
 80128c2:	fba6 0202 	umull	r0, r2, r6, r2
 80128c6:	0892      	lsrs	r2, r2, #2
 80128c8:	202a      	movs	r0, #42	; 0x2a
 80128ca:	fb00 3312 	mls	r3, r0, r2, r3
 80128ce:	297e      	cmp	r1, #126	; 0x7e
 80128d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80128d4:	f000 8192 	beq.w	8012bfc <uxr_read_framed_msg+0x4f0>
 80128d8:	2304      	movs	r3, #4
 80128da:	8621      	strh	r1, [r4, #48]	; 0x30
 80128dc:	7023      	strb	r3, [r4, #0]
 80128de:	e727      	b.n	8012730 <uxr_read_framed_msg+0x24>
 80128e0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80128e4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80128e8:	4290      	cmp	r0, r2
 80128ea:	f000 80b1 	beq.w	8012a50 <uxr_read_framed_msg+0x344>
 80128ee:	18a3      	adds	r3, r4, r2
 80128f0:	7899      	ldrb	r1, [r3, #2]
 80128f2:	297d      	cmp	r1, #125	; 0x7d
 80128f4:	f000 8166 	beq.w	8012bc4 <uxr_read_framed_msg+0x4b8>
 80128f8:	3201      	adds	r2, #1
 80128fa:	0850      	lsrs	r0, r2, #1
 80128fc:	fba6 3000 	umull	r3, r0, r6, r0
 8012900:	0880      	lsrs	r0, r0, #2
 8012902:	232a      	movs	r3, #42	; 0x2a
 8012904:	fb03 2210 	mls	r2, r3, r0, r2
 8012908:	297e      	cmp	r1, #126	; 0x7e
 801290a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801290e:	f000 8187 	beq.w	8012c20 <uxr_read_framed_msg+0x514>
 8012912:	7863      	ldrb	r3, [r4, #1]
 8012914:	428b      	cmp	r3, r1
 8012916:	bf0c      	ite	eq
 8012918:	2303      	moveq	r3, #3
 801291a:	2300      	movne	r3, #0
 801291c:	7023      	strb	r3, [r4, #0]
 801291e:	e707      	b.n	8012730 <uxr_read_framed_msg+0x24>
 8012920:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012924:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012928:	2200      	movs	r2, #0
 801292a:	4299      	cmp	r1, r3
 801292c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012930:	d063      	beq.n	80129fa <uxr_read_framed_msg+0x2ee>
 8012932:	18e2      	adds	r2, r4, r3
 8012934:	7892      	ldrb	r2, [r2, #2]
 8012936:	2a7d      	cmp	r2, #125	; 0x7d
 8012938:	f000 8107 	beq.w	8012b4a <uxr_read_framed_msg+0x43e>
 801293c:	1c59      	adds	r1, r3, #1
 801293e:	084b      	lsrs	r3, r1, #1
 8012940:	fba6 0303 	umull	r0, r3, r6, r3
 8012944:	089b      	lsrs	r3, r3, #2
 8012946:	202a      	movs	r0, #42	; 0x2a
 8012948:	fb00 1313 	mls	r3, r0, r3, r1
 801294c:	2a7e      	cmp	r2, #126	; 0x7e
 801294e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012952:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012956:	d050      	beq.n	80129fa <uxr_read_framed_msg+0x2ee>
 8012958:	2302      	movs	r3, #2
 801295a:	7023      	strb	r3, [r4, #0]
 801295c:	e6e8      	b.n	8012730 <uxr_read_framed_msg+0x24>
 801295e:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8012962:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012966:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801296a:	1c51      	adds	r1, r2, #1
 801296c:	084b      	lsrs	r3, r1, #1
 801296e:	fba6 5303 	umull	r5, r3, r6, r3
 8012972:	089b      	lsrs	r3, r3, #2
 8012974:	fb0c 1313 	mls	r3, ip, r3, r1
 8012978:	4596      	cmp	lr, r2
 801297a:	eb04 0002 	add.w	r0, r4, r2
 801297e:	b2da      	uxtb	r2, r3
 8012980:	f43f af06 	beq.w	8012790 <uxr_read_framed_msg+0x84>
 8012984:	7883      	ldrb	r3, [r0, #2]
 8012986:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801298a:	2b7e      	cmp	r3, #126	; 0x7e
 801298c:	d1ed      	bne.n	801296a <uxr_read_framed_msg+0x25e>
 801298e:	2301      	movs	r3, #1
 8012990:	7023      	strb	r3, [r4, #0]
 8012992:	e6cd      	b.n	8012730 <uxr_read_framed_msg+0x24>
 8012994:	f101 0b01 	add.w	fp, r1, #1
 8012998:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801299c:	fba6 e202 	umull	lr, r2, r6, r2
 80129a0:	3102      	adds	r1, #2
 80129a2:	0892      	lsrs	r2, r2, #2
 80129a4:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80129a8:	fb0c b212 	mls	r2, ip, r2, fp
 80129ac:	fba6 9e0e 	umull	r9, lr, r6, lr
 80129b0:	eb04 0b02 	add.w	fp, r4, r2
 80129b4:	b2d2      	uxtb	r2, r2
 80129b6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80129ba:	4290      	cmp	r0, r2
 80129bc:	fb0c 111e 	mls	r1, ip, lr, r1
 80129c0:	f43f af40 	beq.w	8012844 <uxr_read_framed_msg+0x138>
 80129c4:	f89b e002 	ldrb.w	lr, [fp, #2]
 80129c8:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80129cc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80129d0:	d036      	beq.n	8012a40 <uxr_read_framed_msg+0x334>
 80129d2:	f08e 0e20 	eor.w	lr, lr, #32
 80129d6:	e711      	b.n	80127fc <uxr_read_framed_msg+0xf0>
 80129d8:	2301      	movs	r3, #1
 80129da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129dc:	4649      	mov	r1, r9
 80129de:	e9cd 2300 	strd	r2, r3, [sp]
 80129e2:	4620      	mov	r0, r4
 80129e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129e6:	4652      	mov	r2, sl
 80129e8:	f7ff fe0e 	bl	8012608 <uxr_framing_read_transport>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	f43f aecf 	beq.w	8012790 <uxr_read_framed_msg+0x84>
 80129f2:	7823      	ldrb	r3, [r4, #0]
 80129f4:	e69c      	b.n	8012730 <uxr_read_framed_msg+0x24>
 80129f6:	2302      	movs	r3, #2
 80129f8:	e7ef      	b.n	80129da <uxr_read_framed_msg+0x2ce>
 80129fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129fc:	2304      	movs	r3, #4
 80129fe:	e9cd 2300 	strd	r2, r3, [sp]
 8012a02:	4649      	mov	r1, r9
 8012a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a06:	4652      	mov	r2, sl
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7ff fdfd 	bl	8012608 <uxr_framing_read_transport>
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	d1ef      	bne.n	80129f2 <uxr_read_framed_msg+0x2e6>
 8012a12:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8012a16:	387e      	subs	r0, #126	; 0x7e
 8012a18:	bf18      	it	ne
 8012a1a:	2001      	movne	r0, #1
 8012a1c:	2800      	cmp	r0, #0
 8012a1e:	d0e8      	beq.n	80129f2 <uxr_read_framed_msg+0x2e6>
 8012a20:	e6b6      	b.n	8012790 <uxr_read_framed_msg+0x84>
 8012a22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a24:	2305      	movs	r3, #5
 8012a26:	e9cd 5300 	strd	r5, r3, [sp]
 8012a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a2c:	f7ff fdec 	bl	8012608 <uxr_framing_read_transport>
 8012a30:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012a34:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	f43f aea9 	beq.w	8012790 <uxr_read_framed_msg+0x84>
 8012a3e:	e673      	b.n	8012728 <uxr_read_framed_msg+0x1c>
 8012a40:	429d      	cmp	r5, r3
 8012a42:	ee17 9a90 	vmov	r9, s15
 8012a46:	f43f af02 	beq.w	801284e <uxr_read_framed_msg+0x142>
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	7023      	strb	r3, [r4, #0]
 8012a4e:	e66f      	b.n	8012730 <uxr_read_framed_msg+0x24>
 8012a50:	2303      	movs	r3, #3
 8012a52:	e7c2      	b.n	80129da <uxr_read_framed_msg+0x2ce>
 8012a54:	2305      	movs	r3, #5
 8012a56:	7023      	strb	r3, [r4, #0]
 8012a58:	e66a      	b.n	8012730 <uxr_read_framed_msg+0x24>
 8012a5a:	bf00      	nop
 8012a5c:	30c30c31 	.word	0x30c30c31
 8012a60:	08015088 	.word	0x08015088
 8012a64:	ee17 9a90 	vmov	r9, s15
 8012a68:	f43f aef1 	beq.w	801284e <uxr_read_framed_msg+0x142>
 8012a6c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012a70:	d08d      	beq.n	801298e <uxr_read_framed_msg+0x282>
 8012a72:	1aeb      	subs	r3, r5, r3
 8012a74:	3302      	adds	r3, #2
 8012a76:	9301      	str	r3, [sp, #4]
 8012a78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	4652      	mov	r2, sl
 8012a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a80:	4649      	mov	r1, r9
 8012a82:	4620      	mov	r0, r4
 8012a84:	f7ff fdc0 	bl	8012608 <uxr_framing_read_transport>
 8012a88:	fab0 f080 	clz	r0, r0
 8012a8c:	0940      	lsrs	r0, r0, #5
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d0af      	beq.n	80129f2 <uxr_read_framed_msg+0x2e6>
 8012a92:	e67d      	b.n	8012790 <uxr_read_framed_msg+0x84>
 8012a94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a96:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012a9a:	7013      	strb	r3, [r2, #0]
 8012a9c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012a9e:	b003      	add	sp, #12
 8012aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa4:	1c59      	adds	r1, r3, #1
 8012aa6:	084a      	lsrs	r2, r1, #1
 8012aa8:	fba6 5202 	umull	r5, r2, r6, r2
 8012aac:	0892      	lsrs	r2, r2, #2
 8012aae:	252a      	movs	r5, #42	; 0x2a
 8012ab0:	fb05 1212 	mls	r2, r5, r2, r1
 8012ab4:	b2d1      	uxtb	r1, r2
 8012ab6:	4288      	cmp	r0, r1
 8012ab8:	d08e      	beq.n	80129d8 <uxr_read_framed_msg+0x2cc>
 8012aba:	3302      	adds	r3, #2
 8012abc:	4422      	add	r2, r4
 8012abe:	0858      	lsrs	r0, r3, #1
 8012ac0:	fba6 1000 	umull	r1, r0, r6, r0
 8012ac4:	7891      	ldrb	r1, [r2, #2]
 8012ac6:	0882      	lsrs	r2, r0, #2
 8012ac8:	fb05 3312 	mls	r3, r5, r2, r3
 8012acc:	297e      	cmp	r1, #126	; 0x7e
 8012ace:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012ad2:	f000 80a3 	beq.w	8012c1c <uxr_read_framed_msg+0x510>
 8012ad6:	f081 0120 	eor.w	r1, r1, #32
 8012ada:	e64e      	b.n	801277a <uxr_read_framed_msg+0x6e>
 8012adc:	1c59      	adds	r1, r3, #1
 8012ade:	084a      	lsrs	r2, r1, #1
 8012ae0:	fba6 5202 	umull	r5, r2, r6, r2
 8012ae4:	0892      	lsrs	r2, r2, #2
 8012ae6:	252a      	movs	r5, #42	; 0x2a
 8012ae8:	fb05 1212 	mls	r2, r5, r2, r1
 8012aec:	b2d1      	uxtb	r1, r2
 8012aee:	4288      	cmp	r0, r1
 8012af0:	d081      	beq.n	80129f6 <uxr_read_framed_msg+0x2ea>
 8012af2:	3302      	adds	r3, #2
 8012af4:	4422      	add	r2, r4
 8012af6:	0858      	lsrs	r0, r3, #1
 8012af8:	fba6 1000 	umull	r1, r0, r6, r0
 8012afc:	7891      	ldrb	r1, [r2, #2]
 8012afe:	0882      	lsrs	r2, r0, #2
 8012b00:	fb05 3312 	mls	r3, r5, r2, r3
 8012b04:	297e      	cmp	r1, #126	; 0x7e
 8012b06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012b0a:	d077      	beq.n	8012bfc <uxr_read_framed_msg+0x4f0>
 8012b0c:	f081 0120 	eor.w	r1, r1, #32
 8012b10:	e65b      	b.n	80127ca <uxr_read_framed_msg+0xbe>
 8012b12:	1c59      	adds	r1, r3, #1
 8012b14:	084a      	lsrs	r2, r1, #1
 8012b16:	fba6 5202 	umull	r5, r2, r6, r2
 8012b1a:	0892      	lsrs	r2, r2, #2
 8012b1c:	252a      	movs	r5, #42	; 0x2a
 8012b1e:	fb05 1212 	mls	r2, r5, r2, r1
 8012b22:	b2d1      	uxtb	r1, r2
 8012b24:	4288      	cmp	r0, r1
 8012b26:	f43f af57 	beq.w	80129d8 <uxr_read_framed_msg+0x2cc>
 8012b2a:	3302      	adds	r3, #2
 8012b2c:	4422      	add	r2, r4
 8012b2e:	0858      	lsrs	r0, r3, #1
 8012b30:	fba6 1000 	umull	r1, r0, r6, r0
 8012b34:	7891      	ldrb	r1, [r2, #2]
 8012b36:	0882      	lsrs	r2, r0, #2
 8012b38:	fb05 3312 	mls	r3, r5, r2, r3
 8012b3c:	297e      	cmp	r1, #126	; 0x7e
 8012b3e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012b42:	d06b      	beq.n	8012c1c <uxr_read_framed_msg+0x510>
 8012b44:	f081 0120 	eor.w	r1, r1, #32
 8012b48:	e69d      	b.n	8012886 <uxr_read_framed_msg+0x17a>
 8012b4a:	1c5d      	adds	r5, r3, #1
 8012b4c:	086a      	lsrs	r2, r5, #1
 8012b4e:	fba6 0202 	umull	r0, r2, r6, r2
 8012b52:	0892      	lsrs	r2, r2, #2
 8012b54:	202a      	movs	r0, #42	; 0x2a
 8012b56:	fb00 5212 	mls	r2, r0, r2, r5
 8012b5a:	b2d5      	uxtb	r5, r2
 8012b5c:	42a9      	cmp	r1, r5
 8012b5e:	f43f af4c 	beq.w	80129fa <uxr_read_framed_msg+0x2ee>
 8012b62:	3302      	adds	r3, #2
 8012b64:	4422      	add	r2, r4
 8012b66:	0859      	lsrs	r1, r3, #1
 8012b68:	fba6 5101 	umull	r5, r1, r6, r1
 8012b6c:	7895      	ldrb	r5, [r2, #2]
 8012b6e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012b72:	088a      	lsrs	r2, r1, #2
 8012b74:	fb00 3312 	mls	r3, r0, r2, r3
 8012b78:	2d7e      	cmp	r5, #126	; 0x7e
 8012b7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012b7e:	f43f af3c 	beq.w	80129fa <uxr_read_framed_msg+0x2ee>
 8012b82:	f085 0520 	eor.w	r5, r5, #32
 8012b86:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012b8a:	e6e5      	b.n	8012958 <uxr_read_framed_msg+0x24c>
 8012b8c:	1c59      	adds	r1, r3, #1
 8012b8e:	084a      	lsrs	r2, r1, #1
 8012b90:	fba6 5202 	umull	r5, r2, r6, r2
 8012b94:	0892      	lsrs	r2, r2, #2
 8012b96:	252a      	movs	r5, #42	; 0x2a
 8012b98:	fb05 1212 	mls	r2, r5, r2, r1
 8012b9c:	b2d1      	uxtb	r1, r2
 8012b9e:	4288      	cmp	r0, r1
 8012ba0:	f43f af29 	beq.w	80129f6 <uxr_read_framed_msg+0x2ea>
 8012ba4:	3302      	adds	r3, #2
 8012ba6:	4422      	add	r2, r4
 8012ba8:	0858      	lsrs	r0, r3, #1
 8012baa:	fba6 1000 	umull	r1, r0, r6, r0
 8012bae:	7891      	ldrb	r1, [r2, #2]
 8012bb0:	0882      	lsrs	r2, r0, #2
 8012bb2:	fb05 3312 	mls	r3, r5, r2, r3
 8012bb6:	297e      	cmp	r1, #126	; 0x7e
 8012bb8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012bbc:	d01e      	beq.n	8012bfc <uxr_read_framed_msg+0x4f0>
 8012bbe:	f081 0120 	eor.w	r1, r1, #32
 8012bc2:	e689      	b.n	80128d8 <uxr_read_framed_msg+0x1cc>
 8012bc4:	1c51      	adds	r1, r2, #1
 8012bc6:	084b      	lsrs	r3, r1, #1
 8012bc8:	fba6 5303 	umull	r5, r3, r6, r3
 8012bcc:	089b      	lsrs	r3, r3, #2
 8012bce:	252a      	movs	r5, #42	; 0x2a
 8012bd0:	fb05 1313 	mls	r3, r5, r3, r1
 8012bd4:	b2d9      	uxtb	r1, r3
 8012bd6:	4288      	cmp	r0, r1
 8012bd8:	f43f af3a 	beq.w	8012a50 <uxr_read_framed_msg+0x344>
 8012bdc:	3202      	adds	r2, #2
 8012bde:	4423      	add	r3, r4
 8012be0:	0850      	lsrs	r0, r2, #1
 8012be2:	789b      	ldrb	r3, [r3, #2]
 8012be4:	fba6 1000 	umull	r1, r0, r6, r0
 8012be8:	0880      	lsrs	r0, r0, #2
 8012bea:	fb05 2210 	mls	r2, r5, r0, r2
 8012bee:	2b7e      	cmp	r3, #126	; 0x7e
 8012bf0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012bf4:	d014      	beq.n	8012c20 <uxr_read_framed_msg+0x514>
 8012bf6:	f083 0120 	eor.w	r1, r3, #32
 8012bfa:	e68a      	b.n	8012912 <uxr_read_framed_msg+0x206>
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c00:	4649      	mov	r1, r9
 8012c02:	e9cd 2300 	strd	r2, r3, [sp]
 8012c06:	4620      	mov	r0, r4
 8012c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c0a:	4652      	mov	r2, sl
 8012c0c:	f7ff fcfc 	bl	8012608 <uxr_framing_read_transport>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	f47f aeee 	bne.w	80129f2 <uxr_read_framed_msg+0x2e6>
 8012c16:	2301      	movs	r3, #1
 8012c18:	7023      	strb	r3, [r4, #0]
 8012c1a:	e589      	b.n	8012730 <uxr_read_framed_msg+0x24>
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e7ee      	b.n	8012bfe <uxr_read_framed_msg+0x4f2>
 8012c20:	2303      	movs	r3, #3
 8012c22:	e7ec      	b.n	8012bfe <uxr_read_framed_msg+0x4f2>
 8012c24:	ee17 9a90 	vmov	r9, s15
 8012c28:	e6b1      	b.n	801298e <uxr_read_framed_msg+0x282>
 8012c2a:	bf00      	nop

08012c2c <rcl_convert_rmw_ret_to_rcl_ret>:
 8012c2c:	280b      	cmp	r0, #11
 8012c2e:	dc0d      	bgt.n	8012c4c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012c30:	2800      	cmp	r0, #0
 8012c32:	db09      	blt.n	8012c48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012c34:	280b      	cmp	r0, #11
 8012c36:	d807      	bhi.n	8012c48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012c38:	e8df f000 	tbb	[pc, r0]
 8012c3c:	07060607 	.word	0x07060607
 8012c40:	06060606 	.word	0x06060606
 8012c44:	07070606 	.word	0x07070606
 8012c48:	2001      	movs	r0, #1
 8012c4a:	4770      	bx	lr
 8012c4c:	28cb      	cmp	r0, #203	; 0xcb
 8012c4e:	bf18      	it	ne
 8012c50:	2001      	movne	r0, #1
 8012c52:	4770      	bx	lr

08012c54 <rcl_get_default_domain_id>:
 8012c54:	b530      	push	{r4, r5, lr}
 8012c56:	b083      	sub	sp, #12
 8012c58:	2300      	movs	r3, #0
 8012c5a:	9300      	str	r3, [sp, #0]
 8012c5c:	b1d0      	cbz	r0, 8012c94 <rcl_get_default_domain_id+0x40>
 8012c5e:	4604      	mov	r4, r0
 8012c60:	4669      	mov	r1, sp
 8012c62:	4815      	ldr	r0, [pc, #84]	; (8012cb8 <rcl_get_default_domain_id+0x64>)
 8012c64:	f7fd fb24 	bl	80102b0 <rcutils_get_env>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	b110      	cbz	r0, 8012c72 <rcl_get_default_domain_id+0x1e>
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	b003      	add	sp, #12
 8012c70:	bd30      	pop	{r4, r5, pc}
 8012c72:	9b00      	ldr	r3, [sp, #0]
 8012c74:	b18b      	cbz	r3, 8012c9a <rcl_get_default_domain_id+0x46>
 8012c76:	7818      	ldrb	r0, [r3, #0]
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d0f8      	beq.n	8012c6e <rcl_get_default_domain_id+0x1a>
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	a901      	add	r1, sp, #4
 8012c80:	9201      	str	r2, [sp, #4]
 8012c82:	f000 fd23 	bl	80136cc <strtoul>
 8012c86:	4605      	mov	r5, r0
 8012c88:	b150      	cbz	r0, 8012ca0 <rcl_get_default_domain_id+0x4c>
 8012c8a:	1c43      	adds	r3, r0, #1
 8012c8c:	d00d      	beq.n	8012caa <rcl_get_default_domain_id+0x56>
 8012c8e:	6025      	str	r5, [r4, #0]
 8012c90:	2000      	movs	r0, #0
 8012c92:	e7ec      	b.n	8012c6e <rcl_get_default_domain_id+0x1a>
 8012c94:	200b      	movs	r0, #11
 8012c96:	b003      	add	sp, #12
 8012c98:	bd30      	pop	{r4, r5, pc}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	b003      	add	sp, #12
 8012c9e:	bd30      	pop	{r4, r5, pc}
 8012ca0:	9b01      	ldr	r3, [sp, #4]
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d0f2      	beq.n	8012c8e <rcl_get_default_domain_id+0x3a>
 8012ca8:	e7e0      	b.n	8012c6c <rcl_get_default_domain_id+0x18>
 8012caa:	f000 f9e5 	bl	8013078 <__errno>
 8012cae:	6803      	ldr	r3, [r0, #0]
 8012cb0:	2b22      	cmp	r3, #34	; 0x22
 8012cb2:	d1ec      	bne.n	8012c8e <rcl_get_default_domain_id+0x3a>
 8012cb4:	e7da      	b.n	8012c6c <rcl_get_default_domain_id+0x18>
 8012cb6:	bf00      	nop
 8012cb8:	08015288 	.word	0x08015288

08012cbc <rcl_get_zero_initialized_guard_condition>:
 8012cbc:	4a03      	ldr	r2, [pc, #12]	; (8012ccc <rcl_get_zero_initialized_guard_condition+0x10>)
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	4770      	bx	lr
 8012ccc:	08015298 	.word	0x08015298

08012cd0 <rcl_guard_condition_init_from_rmw>:
 8012cd0:	b082      	sub	sp, #8
 8012cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd6:	b086      	sub	sp, #24
 8012cd8:	ac0c      	add	r4, sp, #48	; 0x30
 8012cda:	4684      	mov	ip, r0
 8012cdc:	f844 3f04 	str.w	r3, [r4, #4]!
 8012ce0:	460f      	mov	r7, r1
 8012ce2:	4690      	mov	r8, r2
 8012ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ce6:	ad01      	add	r5, sp, #4
 8012ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012cea:	6823      	ldr	r3, [r4, #0]
 8012cec:	602b      	str	r3, [r5, #0]
 8012cee:	a801      	add	r0, sp, #4
 8012cf0:	4664      	mov	r4, ip
 8012cf2:	f7f7 fe67 	bl	800a9c4 <rcutils_allocator_is_valid>
 8012cf6:	b328      	cbz	r0, 8012d44 <rcl_guard_condition_init_from_rmw+0x74>
 8012cf8:	b324      	cbz	r4, 8012d44 <rcl_guard_condition_init_from_rmw+0x74>
 8012cfa:	6866      	ldr	r6, [r4, #4]
 8012cfc:	b9e6      	cbnz	r6, 8012d38 <rcl_guard_condition_init_from_rmw+0x68>
 8012cfe:	f1b8 0f00 	cmp.w	r8, #0
 8012d02:	d01f      	beq.n	8012d44 <rcl_guard_condition_init_from_rmw+0x74>
 8012d04:	4640      	mov	r0, r8
 8012d06:	f7fb f9ab 	bl	800e060 <rcl_context_is_valid>
 8012d0a:	b308      	cbz	r0, 8012d50 <rcl_guard_condition_init_from_rmw+0x80>
 8012d0c:	9b01      	ldr	r3, [sp, #4]
 8012d0e:	9905      	ldr	r1, [sp, #20]
 8012d10:	201c      	movs	r0, #28
 8012d12:	4798      	blx	r3
 8012d14:	4605      	mov	r5, r0
 8012d16:	6060      	str	r0, [r4, #4]
 8012d18:	b340      	cbz	r0, 8012d6c <rcl_guard_condition_init_from_rmw+0x9c>
 8012d1a:	b1df      	cbz	r7, 8012d54 <rcl_guard_condition_init_from_rmw+0x84>
 8012d1c:	6007      	str	r7, [r0, #0]
 8012d1e:	7106      	strb	r6, [r0, #4]
 8012d20:	ac01      	add	r4, sp, #4
 8012d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d24:	3508      	adds	r5, #8
 8012d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d28:	6823      	ldr	r3, [r4, #0]
 8012d2a:	602b      	str	r3, [r5, #0]
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	b006      	add	sp, #24
 8012d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d34:	b002      	add	sp, #8
 8012d36:	4770      	bx	lr
 8012d38:	2064      	movs	r0, #100	; 0x64
 8012d3a:	b006      	add	sp, #24
 8012d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d40:	b002      	add	sp, #8
 8012d42:	4770      	bx	lr
 8012d44:	200b      	movs	r0, #11
 8012d46:	b006      	add	sp, #24
 8012d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4c:	b002      	add	sp, #8
 8012d4e:	4770      	bx	lr
 8012d50:	2065      	movs	r0, #101	; 0x65
 8012d52:	e7f2      	b.n	8012d3a <rcl_guard_condition_init_from_rmw+0x6a>
 8012d54:	f8d8 0000 	ldr.w	r0, [r8]
 8012d58:	3028      	adds	r0, #40	; 0x28
 8012d5a:	f000 f93b 	bl	8012fd4 <rmw_create_guard_condition>
 8012d5e:	6028      	str	r0, [r5, #0]
 8012d60:	6865      	ldr	r5, [r4, #4]
 8012d62:	682e      	ldr	r6, [r5, #0]
 8012d64:	b126      	cbz	r6, 8012d70 <rcl_guard_condition_init_from_rmw+0xa0>
 8012d66:	2301      	movs	r3, #1
 8012d68:	712b      	strb	r3, [r5, #4]
 8012d6a:	e7d9      	b.n	8012d20 <rcl_guard_condition_init_from_rmw+0x50>
 8012d6c:	200a      	movs	r0, #10
 8012d6e:	e7e4      	b.n	8012d3a <rcl_guard_condition_init_from_rmw+0x6a>
 8012d70:	4628      	mov	r0, r5
 8012d72:	9b02      	ldr	r3, [sp, #8]
 8012d74:	9905      	ldr	r1, [sp, #20]
 8012d76:	4798      	blx	r3
 8012d78:	6066      	str	r6, [r4, #4]
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	e7dd      	b.n	8012d3a <rcl_guard_condition_init_from_rmw+0x6a>
 8012d7e:	bf00      	nop

08012d80 <rcl_guard_condition_fini>:
 8012d80:	b570      	push	{r4, r5, r6, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	b1f0      	cbz	r0, 8012dc4 <rcl_guard_condition_fini+0x44>
 8012d86:	4604      	mov	r4, r0
 8012d88:	6840      	ldr	r0, [r0, #4]
 8012d8a:	b158      	cbz	r0, 8012da4 <rcl_guard_condition_fini+0x24>
 8012d8c:	6803      	ldr	r3, [r0, #0]
 8012d8e:	68c6      	ldr	r6, [r0, #12]
 8012d90:	6981      	ldr	r1, [r0, #24]
 8012d92:	b15b      	cbz	r3, 8012dac <rcl_guard_condition_fini+0x2c>
 8012d94:	7905      	ldrb	r5, [r0, #4]
 8012d96:	b95d      	cbnz	r5, 8012db0 <rcl_guard_condition_fini+0x30>
 8012d98:	47b0      	blx	r6
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	6063      	str	r3, [r4, #4]
 8012da0:	b002      	add	sp, #8
 8012da2:	bd70      	pop	{r4, r5, r6, pc}
 8012da4:	4605      	mov	r5, r0
 8012da6:	4628      	mov	r0, r5
 8012da8:	b002      	add	sp, #8
 8012daa:	bd70      	pop	{r4, r5, r6, pc}
 8012dac:	461d      	mov	r5, r3
 8012dae:	e7f3      	b.n	8012d98 <rcl_guard_condition_fini+0x18>
 8012db0:	4618      	mov	r0, r3
 8012db2:	9101      	str	r1, [sp, #4]
 8012db4:	f000 f922 	bl	8012ffc <rmw_destroy_guard_condition>
 8012db8:	1e05      	subs	r5, r0, #0
 8012dba:	9901      	ldr	r1, [sp, #4]
 8012dbc:	6860      	ldr	r0, [r4, #4]
 8012dbe:	bf18      	it	ne
 8012dc0:	2501      	movne	r5, #1
 8012dc2:	e7e9      	b.n	8012d98 <rcl_guard_condition_fini+0x18>
 8012dc4:	250b      	movs	r5, #11
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	b002      	add	sp, #8
 8012dca:	bd70      	pop	{r4, r5, r6, pc}

08012dcc <rcl_guard_condition_get_default_options>:
 8012dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dce:	b087      	sub	sp, #28
 8012dd0:	4607      	mov	r7, r0
 8012dd2:	466c      	mov	r4, sp
 8012dd4:	4668      	mov	r0, sp
 8012dd6:	f7f7 fde7 	bl	800a9a8 <rcutils_get_default_allocator>
 8012dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ddc:	4d07      	ldr	r5, [pc, #28]	; (8012dfc <rcl_guard_condition_get_default_options+0x30>)
 8012dde:	f8d4 c000 	ldr.w	ip, [r4]
 8012de2:	462e      	mov	r6, r5
 8012de4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012de6:	462c      	mov	r4, r5
 8012de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dea:	463c      	mov	r4, r7
 8012dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dee:	4638      	mov	r0, r7
 8012df0:	f8c6 c000 	str.w	ip, [r6]
 8012df4:	f8c4 c000 	str.w	ip, [r4]
 8012df8:	b007      	add	sp, #28
 8012dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dfc:	2000c214 	.word	0x2000c214

08012e00 <rcl_guard_condition_get_rmw_handle>:
 8012e00:	b110      	cbz	r0, 8012e08 <rcl_guard_condition_get_rmw_handle+0x8>
 8012e02:	6840      	ldr	r0, [r0, #4]
 8012e04:	b100      	cbz	r0, 8012e08 <rcl_guard_condition_get_rmw_handle+0x8>
 8012e06:	6800      	ldr	r0, [r0, #0]
 8012e08:	4770      	bx	lr
 8012e0a:	bf00      	nop

08012e0c <on_status>:
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	b002      	add	sp, #8
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop

08012e14 <on_topic>:
 8012e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e18:	4a21      	ldr	r2, [pc, #132]	; (8012ea0 <on_topic+0x8c>)
 8012e1a:	b094      	sub	sp, #80	; 0x50
 8012e1c:	6812      	ldr	r2, [r2, #0]
 8012e1e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012e20:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8012e24:	9113      	str	r1, [sp, #76]	; 0x4c
 8012e26:	9312      	str	r3, [sp, #72]	; 0x48
 8012e28:	b3ba      	cbz	r2, 8012e9a <on_topic+0x86>
 8012e2a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8012e2e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8012e32:	e001      	b.n	8012e38 <on_topic+0x24>
 8012e34:	6892      	ldr	r2, [r2, #8]
 8012e36:	b382      	cbz	r2, 8012e9a <on_topic+0x86>
 8012e38:	68d4      	ldr	r4, [r2, #12]
 8012e3a:	8aa3      	ldrh	r3, [r4, #20]
 8012e3c:	428b      	cmp	r3, r1
 8012e3e:	d1f9      	bne.n	8012e34 <on_topic+0x20>
 8012e40:	7da3      	ldrb	r3, [r4, #22]
 8012e42:	4283      	cmp	r3, r0
 8012e44:	d1f6      	bne.n	8012e34 <on_topic+0x20>
 8012e46:	2248      	movs	r2, #72	; 0x48
 8012e48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012e4c:	4668      	mov	r0, sp
 8012e4e:	f000 f995 	bl	801317c <memcpy>
 8012e52:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8012e56:	4620      	mov	r0, r4
 8012e58:	f7f8 fbdc 	bl	800b614 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012e5c:	4607      	mov	r7, r0
 8012e5e:	b1e0      	cbz	r0, 8012e9a <on_topic+0x86>
 8012e60:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8012e64:	462a      	mov	r2, r5
 8012e66:	4630      	mov	r0, r6
 8012e68:	f108 0110 	add.w	r1, r8, #16
 8012e6c:	f7fe fb9a 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8012e70:	b930      	cbnz	r0, 8012e80 <on_topic+0x6c>
 8012e72:	480c      	ldr	r0, [pc, #48]	; (8012ea4 <on_topic+0x90>)
 8012e74:	4639      	mov	r1, r7
 8012e76:	b014      	add	sp, #80	; 0x50
 8012e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7c:	f7fd bc4e 	b.w	801071c <put_memory>
 8012e80:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8012e84:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8012e88:	f7fe fab6 	bl	80113f8 <rmw_uros_epoch_nanos>
 8012e8c:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8012e90:	2305      	movs	r3, #5
 8012e92:	e9c2 0100 	strd	r0, r1, [r2]
 8012e96:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8012e9a:	b014      	add	sp, #80	; 0x50
 8012e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea0:	2000f4dc 	.word	0x2000f4dc
 8012ea4:	2000c270 	.word	0x2000c270

08012ea8 <on_request>:
 8012ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eac:	4822      	ldr	r0, [pc, #136]	; (8012f38 <on_request+0x90>)
 8012eae:	b095      	sub	sp, #84	; 0x54
 8012eb0:	9113      	str	r1, [sp, #76]	; 0x4c
 8012eb2:	6801      	ldr	r1, [r0, #0]
 8012eb4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012eb6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8012eba:	2900      	cmp	r1, #0
 8012ebc:	d039      	beq.n	8012f32 <on_request+0x8a>
 8012ebe:	461d      	mov	r5, r3
 8012ec0:	e001      	b.n	8012ec6 <on_request+0x1e>
 8012ec2:	6889      	ldr	r1, [r1, #8]
 8012ec4:	b3a9      	cbz	r1, 8012f32 <on_request+0x8a>
 8012ec6:	68cc      	ldr	r4, [r1, #12]
 8012ec8:	8b20      	ldrh	r0, [r4, #24]
 8012eca:	4290      	cmp	r0, r2
 8012ecc:	d1f9      	bne.n	8012ec2 <on_request+0x1a>
 8012ece:	2248      	movs	r2, #72	; 0x48
 8012ed0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8012ed4:	4668      	mov	r0, sp
 8012ed6:	f000 f951 	bl	801317c <memcpy>
 8012eda:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f7f8 fb98 	bl	800b614 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012ee4:	4680      	mov	r8, r0
 8012ee6:	b320      	cbz	r0, 8012f32 <on_request+0x8a>
 8012ee8:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8012eec:	4632      	mov	r2, r6
 8012eee:	4638      	mov	r0, r7
 8012ef0:	f109 0110 	add.w	r1, r9, #16
 8012ef4:	f7fe fb56 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8012ef8:	b930      	cbnz	r0, 8012f08 <on_request+0x60>
 8012efa:	4810      	ldr	r0, [pc, #64]	; (8012f3c <on_request+0x94>)
 8012efc:	4641      	mov	r1, r8
 8012efe:	b015      	add	sp, #84	; 0x54
 8012f00:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f04:	f7fd bc0a 	b.w	801071c <put_memory>
 8012f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f0a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8012f0e:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8012f12:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8012f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012f1c:	e884 0003 	stmia.w	r4, {r0, r1}
 8012f20:	f7fe fa6a 	bl	80113f8 <rmw_uros_epoch_nanos>
 8012f24:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8012f28:	2303      	movs	r3, #3
 8012f2a:	e9c2 0100 	strd	r0, r1, [r2]
 8012f2e:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8012f32:	b015      	add	sp, #84	; 0x54
 8012f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f38:	2000f4cc 	.word	0x2000f4cc
 8012f3c:	2000c270 	.word	0x2000c270

08012f40 <on_reply>:
 8012f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f44:	4821      	ldr	r0, [pc, #132]	; (8012fcc <on_reply+0x8c>)
 8012f46:	b095      	sub	sp, #84	; 0x54
 8012f48:	9113      	str	r1, [sp, #76]	; 0x4c
 8012f4a:	6801      	ldr	r1, [r0, #0]
 8012f4c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012f4e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8012f52:	b3b9      	cbz	r1, 8012fc4 <on_reply+0x84>
 8012f54:	461d      	mov	r5, r3
 8012f56:	e001      	b.n	8012f5c <on_reply+0x1c>
 8012f58:	6889      	ldr	r1, [r1, #8]
 8012f5a:	b399      	cbz	r1, 8012fc4 <on_reply+0x84>
 8012f5c:	68cc      	ldr	r4, [r1, #12]
 8012f5e:	8b20      	ldrh	r0, [r4, #24]
 8012f60:	4290      	cmp	r0, r2
 8012f62:	d1f9      	bne.n	8012f58 <on_reply+0x18>
 8012f64:	2248      	movs	r2, #72	; 0x48
 8012f66:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8012f6a:	4668      	mov	r0, sp
 8012f6c:	f000 f906 	bl	801317c <memcpy>
 8012f70:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8012f74:	4620      	mov	r0, r4
 8012f76:	f7f8 fb4d 	bl	800b614 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012f7a:	4680      	mov	r8, r0
 8012f7c:	b310      	cbz	r0, 8012fc4 <on_reply+0x84>
 8012f7e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8012f82:	4632      	mov	r2, r6
 8012f84:	4638      	mov	r0, r7
 8012f86:	f109 0110 	add.w	r1, r9, #16
 8012f8a:	f7fe fb0b 	bl	80115a4 <ucdr_deserialize_array_uint8_t>
 8012f8e:	b930      	cbnz	r0, 8012f9e <on_reply+0x5e>
 8012f90:	480f      	ldr	r0, [pc, #60]	; (8012fd0 <on_reply+0x90>)
 8012f92:	4641      	mov	r1, r8
 8012f94:	b015      	add	sp, #84	; 0x54
 8012f96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f9a:	f7fd bbbf 	b.w	801071c <put_memory>
 8012f9e:	b2aa      	uxth	r2, r5
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8012fa6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8012faa:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8012fae:	e9c1 2300 	strd	r2, r3, [r1]
 8012fb2:	f7fe fa21 	bl	80113f8 <rmw_uros_epoch_nanos>
 8012fb6:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8012fba:	2304      	movs	r3, #4
 8012fbc:	e9c2 0100 	strd	r0, r1, [r2]
 8012fc0:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8012fc4:	b015      	add	sp, #84	; 0x54
 8012fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fca:	bf00      	nop
 8012fcc:	2000cb00 	.word	0x2000cb00
 8012fd0:	2000c270 	.word	0x2000c270

08012fd4 <rmw_create_guard_condition>:
 8012fd4:	b538      	push	{r3, r4, r5, lr}
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	4807      	ldr	r0, [pc, #28]	; (8012ff8 <rmw_create_guard_condition+0x24>)
 8012fda:	f7fd fb8f 	bl	80106fc <get_memory>
 8012fde:	b148      	cbz	r0, 8012ff4 <rmw_create_guard_condition+0x20>
 8012fe0:	68c4      	ldr	r4, [r0, #12]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	61e5      	str	r5, [r4, #28]
 8012fe6:	7423      	strb	r3, [r4, #16]
 8012fe8:	f7fd fbf0 	bl	80107cc <rmw_get_implementation_identifier>
 8012fec:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012ff0:	f104 0014 	add.w	r0, r4, #20
 8012ff4:	bd38      	pop	{r3, r4, r5, pc}
 8012ff6:	bf00      	nop
 8012ff8:	2000f3f8 	.word	0x2000f3f8

08012ffc <rmw_destroy_guard_condition>:
 8012ffc:	b508      	push	{r3, lr}
 8012ffe:	4b08      	ldr	r3, [pc, #32]	; (8013020 <rmw_destroy_guard_condition+0x24>)
 8013000:	6819      	ldr	r1, [r3, #0]
 8013002:	b911      	cbnz	r1, 801300a <rmw_destroy_guard_condition+0xe>
 8013004:	e00a      	b.n	801301c <rmw_destroy_guard_condition+0x20>
 8013006:	6889      	ldr	r1, [r1, #8]
 8013008:	b141      	cbz	r1, 801301c <rmw_destroy_guard_condition+0x20>
 801300a:	68cb      	ldr	r3, [r1, #12]
 801300c:	3314      	adds	r3, #20
 801300e:	4298      	cmp	r0, r3
 8013010:	d1f9      	bne.n	8013006 <rmw_destroy_guard_condition+0xa>
 8013012:	4803      	ldr	r0, [pc, #12]	; (8013020 <rmw_destroy_guard_condition+0x24>)
 8013014:	f7fd fb82 	bl	801071c <put_memory>
 8013018:	2000      	movs	r0, #0
 801301a:	bd08      	pop	{r3, pc}
 801301c:	2001      	movs	r0, #1
 801301e:	bd08      	pop	{r3, pc}
 8013020:	2000f3f8 	.word	0x2000f3f8

08013024 <destroy_topic>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	6985      	ldr	r5, [r0, #24]
 8013028:	b1d5      	cbz	r5, 8013060 <destroy_topic+0x3c>
 801302a:	4604      	mov	r4, r0
 801302c:	6928      	ldr	r0, [r5, #16]
 801302e:	6922      	ldr	r2, [r4, #16]
 8013030:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013034:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013038:	6819      	ldr	r1, [r3, #0]
 801303a:	f7f8 fccb 	bl	800b9d4 <uxr_buffer_delete_entity>
 801303e:	4602      	mov	r2, r0
 8013040:	6928      	ldr	r0, [r5, #16]
 8013042:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013046:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801304a:	f7f8 fbd1 	bl	800b7f0 <run_xrce_session>
 801304e:	2800      	cmp	r0, #0
 8013050:	4620      	mov	r0, r4
 8013052:	bf14      	ite	ne
 8013054:	2400      	movne	r4, #0
 8013056:	2402      	moveq	r4, #2
 8013058:	f7f8 fad0 	bl	800b5fc <rmw_uxrce_fini_topic_memory>
 801305c:	4620      	mov	r0, r4
 801305e:	bd38      	pop	{r3, r4, r5, pc}
 8013060:	2401      	movs	r4, #1
 8013062:	4620      	mov	r0, r4
 8013064:	bd38      	pop	{r3, r4, r5, pc}
 8013066:	bf00      	nop

08013068 <calloc>:
 8013068:	4b02      	ldr	r3, [pc, #8]	; (8013074 <calloc+0xc>)
 801306a:	460a      	mov	r2, r1
 801306c:	4601      	mov	r1, r0
 801306e:	6818      	ldr	r0, [r3, #0]
 8013070:	f000 b8b4 	b.w	80131dc <_calloc_r>
 8013074:	200000b0 	.word	0x200000b0

08013078 <__errno>:
 8013078:	4b01      	ldr	r3, [pc, #4]	; (8013080 <__errno+0x8>)
 801307a:	6818      	ldr	r0, [r3, #0]
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop
 8013080:	200000b0 	.word	0x200000b0

08013084 <getenv>:
 8013084:	b507      	push	{r0, r1, r2, lr}
 8013086:	4b04      	ldr	r3, [pc, #16]	; (8013098 <getenv+0x14>)
 8013088:	4601      	mov	r1, r0
 801308a:	aa01      	add	r2, sp, #4
 801308c:	6818      	ldr	r0, [r3, #0]
 801308e:	f000 f805 	bl	801309c <_findenv_r>
 8013092:	b003      	add	sp, #12
 8013094:	f85d fb04 	ldr.w	pc, [sp], #4
 8013098:	200000b0 	.word	0x200000b0

0801309c <_findenv_r>:
 801309c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8013110 <_findenv_r+0x74>
 80130a4:	4607      	mov	r7, r0
 80130a6:	4689      	mov	r9, r1
 80130a8:	4616      	mov	r6, r2
 80130aa:	f000 fb71 	bl	8013790 <__env_lock>
 80130ae:	f8da 4000 	ldr.w	r4, [sl]
 80130b2:	b134      	cbz	r4, 80130c2 <_findenv_r+0x26>
 80130b4:	464b      	mov	r3, r9
 80130b6:	4698      	mov	r8, r3
 80130b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130bc:	b13a      	cbz	r2, 80130ce <_findenv_r+0x32>
 80130be:	2a3d      	cmp	r2, #61	; 0x3d
 80130c0:	d1f9      	bne.n	80130b6 <_findenv_r+0x1a>
 80130c2:	4638      	mov	r0, r7
 80130c4:	f000 fb6a 	bl	801379c <__env_unlock>
 80130c8:	2000      	movs	r0, #0
 80130ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ce:	eba8 0809 	sub.w	r8, r8, r9
 80130d2:	46a3      	mov	fp, r4
 80130d4:	f854 0b04 	ldr.w	r0, [r4], #4
 80130d8:	2800      	cmp	r0, #0
 80130da:	d0f2      	beq.n	80130c2 <_findenv_r+0x26>
 80130dc:	4642      	mov	r2, r8
 80130de:	4649      	mov	r1, r9
 80130e0:	f000 fa57 	bl	8013592 <strncmp>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d1f4      	bne.n	80130d2 <_findenv_r+0x36>
 80130e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80130ec:	eb03 0508 	add.w	r5, r3, r8
 80130f0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80130f4:	2b3d      	cmp	r3, #61	; 0x3d
 80130f6:	d1ec      	bne.n	80130d2 <_findenv_r+0x36>
 80130f8:	f8da 3000 	ldr.w	r3, [sl]
 80130fc:	ebab 0303 	sub.w	r3, fp, r3
 8013100:	109b      	asrs	r3, r3, #2
 8013102:	4638      	mov	r0, r7
 8013104:	6033      	str	r3, [r6, #0]
 8013106:	f000 fb49 	bl	801379c <__env_unlock>
 801310a:	1c68      	adds	r0, r5, #1
 801310c:	e7dd      	b.n	80130ca <_findenv_r+0x2e>
 801310e:	bf00      	nop
 8013110:	20000000 	.word	0x20000000

08013114 <__libc_init_array>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	4d0d      	ldr	r5, [pc, #52]	; (801314c <__libc_init_array+0x38>)
 8013118:	4c0d      	ldr	r4, [pc, #52]	; (8013150 <__libc_init_array+0x3c>)
 801311a:	1b64      	subs	r4, r4, r5
 801311c:	10a4      	asrs	r4, r4, #2
 801311e:	2600      	movs	r6, #0
 8013120:	42a6      	cmp	r6, r4
 8013122:	d109      	bne.n	8013138 <__libc_init_array+0x24>
 8013124:	4d0b      	ldr	r5, [pc, #44]	; (8013154 <__libc_init_array+0x40>)
 8013126:	4c0c      	ldr	r4, [pc, #48]	; (8013158 <__libc_init_array+0x44>)
 8013128:	f001 fbb4 	bl	8014894 <_init>
 801312c:	1b64      	subs	r4, r4, r5
 801312e:	10a4      	asrs	r4, r4, #2
 8013130:	2600      	movs	r6, #0
 8013132:	42a6      	cmp	r6, r4
 8013134:	d105      	bne.n	8013142 <__libc_init_array+0x2e>
 8013136:	bd70      	pop	{r4, r5, r6, pc}
 8013138:	f855 3b04 	ldr.w	r3, [r5], #4
 801313c:	4798      	blx	r3
 801313e:	3601      	adds	r6, #1
 8013140:	e7ee      	b.n	8013120 <__libc_init_array+0xc>
 8013142:	f855 3b04 	ldr.w	r3, [r5], #4
 8013146:	4798      	blx	r3
 8013148:	3601      	adds	r6, #1
 801314a:	e7f2      	b.n	8013132 <__libc_init_array+0x1e>
 801314c:	080154f4 	.word	0x080154f4
 8013150:	080154f4 	.word	0x080154f4
 8013154:	080154f4 	.word	0x080154f4
 8013158:	080154f8 	.word	0x080154f8

0801315c <malloc>:
 801315c:	4b02      	ldr	r3, [pc, #8]	; (8013168 <malloc+0xc>)
 801315e:	4601      	mov	r1, r0
 8013160:	6818      	ldr	r0, [r3, #0]
 8013162:	f000 b8bd 	b.w	80132e0 <_malloc_r>
 8013166:	bf00      	nop
 8013168:	200000b0 	.word	0x200000b0

0801316c <free>:
 801316c:	4b02      	ldr	r3, [pc, #8]	; (8013178 <free+0xc>)
 801316e:	4601      	mov	r1, r0
 8013170:	6818      	ldr	r0, [r3, #0]
 8013172:	f000 b849 	b.w	8013208 <_free_r>
 8013176:	bf00      	nop
 8013178:	200000b0 	.word	0x200000b0

0801317c <memcpy>:
 801317c:	440a      	add	r2, r1
 801317e:	4291      	cmp	r1, r2
 8013180:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013184:	d100      	bne.n	8013188 <memcpy+0xc>
 8013186:	4770      	bx	lr
 8013188:	b510      	push	{r4, lr}
 801318a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801318e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013192:	4291      	cmp	r1, r2
 8013194:	d1f9      	bne.n	801318a <memcpy+0xe>
 8013196:	bd10      	pop	{r4, pc}

08013198 <memmove>:
 8013198:	4288      	cmp	r0, r1
 801319a:	b510      	push	{r4, lr}
 801319c:	eb01 0402 	add.w	r4, r1, r2
 80131a0:	d902      	bls.n	80131a8 <memmove+0x10>
 80131a2:	4284      	cmp	r4, r0
 80131a4:	4623      	mov	r3, r4
 80131a6:	d807      	bhi.n	80131b8 <memmove+0x20>
 80131a8:	1e43      	subs	r3, r0, #1
 80131aa:	42a1      	cmp	r1, r4
 80131ac:	d008      	beq.n	80131c0 <memmove+0x28>
 80131ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80131b6:	e7f8      	b.n	80131aa <memmove+0x12>
 80131b8:	4402      	add	r2, r0
 80131ba:	4601      	mov	r1, r0
 80131bc:	428a      	cmp	r2, r1
 80131be:	d100      	bne.n	80131c2 <memmove+0x2a>
 80131c0:	bd10      	pop	{r4, pc}
 80131c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80131ca:	e7f7      	b.n	80131bc <memmove+0x24>

080131cc <memset>:
 80131cc:	4402      	add	r2, r0
 80131ce:	4603      	mov	r3, r0
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d100      	bne.n	80131d6 <memset+0xa>
 80131d4:	4770      	bx	lr
 80131d6:	f803 1b01 	strb.w	r1, [r3], #1
 80131da:	e7f9      	b.n	80131d0 <memset+0x4>

080131dc <_calloc_r>:
 80131dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131de:	fba1 2402 	umull	r2, r4, r1, r2
 80131e2:	b94c      	cbnz	r4, 80131f8 <_calloc_r+0x1c>
 80131e4:	4611      	mov	r1, r2
 80131e6:	9201      	str	r2, [sp, #4]
 80131e8:	f000 f87a 	bl	80132e0 <_malloc_r>
 80131ec:	9a01      	ldr	r2, [sp, #4]
 80131ee:	4605      	mov	r5, r0
 80131f0:	b930      	cbnz	r0, 8013200 <_calloc_r+0x24>
 80131f2:	4628      	mov	r0, r5
 80131f4:	b003      	add	sp, #12
 80131f6:	bd30      	pop	{r4, r5, pc}
 80131f8:	220c      	movs	r2, #12
 80131fa:	6002      	str	r2, [r0, #0]
 80131fc:	2500      	movs	r5, #0
 80131fe:	e7f8      	b.n	80131f2 <_calloc_r+0x16>
 8013200:	4621      	mov	r1, r4
 8013202:	f7ff ffe3 	bl	80131cc <memset>
 8013206:	e7f4      	b.n	80131f2 <_calloc_r+0x16>

08013208 <_free_r>:
 8013208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801320a:	2900      	cmp	r1, #0
 801320c:	d044      	beq.n	8013298 <_free_r+0x90>
 801320e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013212:	9001      	str	r0, [sp, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	f1a1 0404 	sub.w	r4, r1, #4
 801321a:	bfb8      	it	lt
 801321c:	18e4      	addlt	r4, r4, r3
 801321e:	f000 fbcd 	bl	80139bc <__malloc_lock>
 8013222:	4a1e      	ldr	r2, [pc, #120]	; (801329c <_free_r+0x94>)
 8013224:	9801      	ldr	r0, [sp, #4]
 8013226:	6813      	ldr	r3, [r2, #0]
 8013228:	b933      	cbnz	r3, 8013238 <_free_r+0x30>
 801322a:	6063      	str	r3, [r4, #4]
 801322c:	6014      	str	r4, [r2, #0]
 801322e:	b003      	add	sp, #12
 8013230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013234:	f000 bbc8 	b.w	80139c8 <__malloc_unlock>
 8013238:	42a3      	cmp	r3, r4
 801323a:	d908      	bls.n	801324e <_free_r+0x46>
 801323c:	6825      	ldr	r5, [r4, #0]
 801323e:	1961      	adds	r1, r4, r5
 8013240:	428b      	cmp	r3, r1
 8013242:	bf01      	itttt	eq
 8013244:	6819      	ldreq	r1, [r3, #0]
 8013246:	685b      	ldreq	r3, [r3, #4]
 8013248:	1949      	addeq	r1, r1, r5
 801324a:	6021      	streq	r1, [r4, #0]
 801324c:	e7ed      	b.n	801322a <_free_r+0x22>
 801324e:	461a      	mov	r2, r3
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	b10b      	cbz	r3, 8013258 <_free_r+0x50>
 8013254:	42a3      	cmp	r3, r4
 8013256:	d9fa      	bls.n	801324e <_free_r+0x46>
 8013258:	6811      	ldr	r1, [r2, #0]
 801325a:	1855      	adds	r5, r2, r1
 801325c:	42a5      	cmp	r5, r4
 801325e:	d10b      	bne.n	8013278 <_free_r+0x70>
 8013260:	6824      	ldr	r4, [r4, #0]
 8013262:	4421      	add	r1, r4
 8013264:	1854      	adds	r4, r2, r1
 8013266:	42a3      	cmp	r3, r4
 8013268:	6011      	str	r1, [r2, #0]
 801326a:	d1e0      	bne.n	801322e <_free_r+0x26>
 801326c:	681c      	ldr	r4, [r3, #0]
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	6053      	str	r3, [r2, #4]
 8013272:	4421      	add	r1, r4
 8013274:	6011      	str	r1, [r2, #0]
 8013276:	e7da      	b.n	801322e <_free_r+0x26>
 8013278:	d902      	bls.n	8013280 <_free_r+0x78>
 801327a:	230c      	movs	r3, #12
 801327c:	6003      	str	r3, [r0, #0]
 801327e:	e7d6      	b.n	801322e <_free_r+0x26>
 8013280:	6825      	ldr	r5, [r4, #0]
 8013282:	1961      	adds	r1, r4, r5
 8013284:	428b      	cmp	r3, r1
 8013286:	bf04      	itt	eq
 8013288:	6819      	ldreq	r1, [r3, #0]
 801328a:	685b      	ldreq	r3, [r3, #4]
 801328c:	6063      	str	r3, [r4, #4]
 801328e:	bf04      	itt	eq
 8013290:	1949      	addeq	r1, r1, r5
 8013292:	6021      	streq	r1, [r4, #0]
 8013294:	6054      	str	r4, [r2, #4]
 8013296:	e7ca      	b.n	801322e <_free_r+0x26>
 8013298:	b003      	add	sp, #12
 801329a:	bd30      	pop	{r4, r5, pc}
 801329c:	2000c228 	.word	0x2000c228

080132a0 <sbrk_aligned>:
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	4e0e      	ldr	r6, [pc, #56]	; (80132dc <sbrk_aligned+0x3c>)
 80132a4:	460c      	mov	r4, r1
 80132a6:	6831      	ldr	r1, [r6, #0]
 80132a8:	4605      	mov	r5, r0
 80132aa:	b911      	cbnz	r1, 80132b2 <sbrk_aligned+0x12>
 80132ac:	f000 f918 	bl	80134e0 <_sbrk_r>
 80132b0:	6030      	str	r0, [r6, #0]
 80132b2:	4621      	mov	r1, r4
 80132b4:	4628      	mov	r0, r5
 80132b6:	f000 f913 	bl	80134e0 <_sbrk_r>
 80132ba:	1c43      	adds	r3, r0, #1
 80132bc:	d00a      	beq.n	80132d4 <sbrk_aligned+0x34>
 80132be:	1cc4      	adds	r4, r0, #3
 80132c0:	f024 0403 	bic.w	r4, r4, #3
 80132c4:	42a0      	cmp	r0, r4
 80132c6:	d007      	beq.n	80132d8 <sbrk_aligned+0x38>
 80132c8:	1a21      	subs	r1, r4, r0
 80132ca:	4628      	mov	r0, r5
 80132cc:	f000 f908 	bl	80134e0 <_sbrk_r>
 80132d0:	3001      	adds	r0, #1
 80132d2:	d101      	bne.n	80132d8 <sbrk_aligned+0x38>
 80132d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80132d8:	4620      	mov	r0, r4
 80132da:	bd70      	pop	{r4, r5, r6, pc}
 80132dc:	2000c22c 	.word	0x2000c22c

080132e0 <_malloc_r>:
 80132e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132e4:	1ccd      	adds	r5, r1, #3
 80132e6:	f025 0503 	bic.w	r5, r5, #3
 80132ea:	3508      	adds	r5, #8
 80132ec:	2d0c      	cmp	r5, #12
 80132ee:	bf38      	it	cc
 80132f0:	250c      	movcc	r5, #12
 80132f2:	2d00      	cmp	r5, #0
 80132f4:	4607      	mov	r7, r0
 80132f6:	db01      	blt.n	80132fc <_malloc_r+0x1c>
 80132f8:	42a9      	cmp	r1, r5
 80132fa:	d905      	bls.n	8013308 <_malloc_r+0x28>
 80132fc:	230c      	movs	r3, #12
 80132fe:	603b      	str	r3, [r7, #0]
 8013300:	2600      	movs	r6, #0
 8013302:	4630      	mov	r0, r6
 8013304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013308:	4e2e      	ldr	r6, [pc, #184]	; (80133c4 <_malloc_r+0xe4>)
 801330a:	f000 fb57 	bl	80139bc <__malloc_lock>
 801330e:	6833      	ldr	r3, [r6, #0]
 8013310:	461c      	mov	r4, r3
 8013312:	bb34      	cbnz	r4, 8013362 <_malloc_r+0x82>
 8013314:	4629      	mov	r1, r5
 8013316:	4638      	mov	r0, r7
 8013318:	f7ff ffc2 	bl	80132a0 <sbrk_aligned>
 801331c:	1c43      	adds	r3, r0, #1
 801331e:	4604      	mov	r4, r0
 8013320:	d14d      	bne.n	80133be <_malloc_r+0xde>
 8013322:	6834      	ldr	r4, [r6, #0]
 8013324:	4626      	mov	r6, r4
 8013326:	2e00      	cmp	r6, #0
 8013328:	d140      	bne.n	80133ac <_malloc_r+0xcc>
 801332a:	6823      	ldr	r3, [r4, #0]
 801332c:	4631      	mov	r1, r6
 801332e:	4638      	mov	r0, r7
 8013330:	eb04 0803 	add.w	r8, r4, r3
 8013334:	f000 f8d4 	bl	80134e0 <_sbrk_r>
 8013338:	4580      	cmp	r8, r0
 801333a:	d13a      	bne.n	80133b2 <_malloc_r+0xd2>
 801333c:	6821      	ldr	r1, [r4, #0]
 801333e:	3503      	adds	r5, #3
 8013340:	1a6d      	subs	r5, r5, r1
 8013342:	f025 0503 	bic.w	r5, r5, #3
 8013346:	3508      	adds	r5, #8
 8013348:	2d0c      	cmp	r5, #12
 801334a:	bf38      	it	cc
 801334c:	250c      	movcc	r5, #12
 801334e:	4629      	mov	r1, r5
 8013350:	4638      	mov	r0, r7
 8013352:	f7ff ffa5 	bl	80132a0 <sbrk_aligned>
 8013356:	3001      	adds	r0, #1
 8013358:	d02b      	beq.n	80133b2 <_malloc_r+0xd2>
 801335a:	6823      	ldr	r3, [r4, #0]
 801335c:	442b      	add	r3, r5
 801335e:	6023      	str	r3, [r4, #0]
 8013360:	e00e      	b.n	8013380 <_malloc_r+0xa0>
 8013362:	6822      	ldr	r2, [r4, #0]
 8013364:	1b52      	subs	r2, r2, r5
 8013366:	d41e      	bmi.n	80133a6 <_malloc_r+0xc6>
 8013368:	2a0b      	cmp	r2, #11
 801336a:	d916      	bls.n	801339a <_malloc_r+0xba>
 801336c:	1961      	adds	r1, r4, r5
 801336e:	42a3      	cmp	r3, r4
 8013370:	6025      	str	r5, [r4, #0]
 8013372:	bf18      	it	ne
 8013374:	6059      	strne	r1, [r3, #4]
 8013376:	6863      	ldr	r3, [r4, #4]
 8013378:	bf08      	it	eq
 801337a:	6031      	streq	r1, [r6, #0]
 801337c:	5162      	str	r2, [r4, r5]
 801337e:	604b      	str	r3, [r1, #4]
 8013380:	4638      	mov	r0, r7
 8013382:	f104 060b 	add.w	r6, r4, #11
 8013386:	f000 fb1f 	bl	80139c8 <__malloc_unlock>
 801338a:	f026 0607 	bic.w	r6, r6, #7
 801338e:	1d23      	adds	r3, r4, #4
 8013390:	1af2      	subs	r2, r6, r3
 8013392:	d0b6      	beq.n	8013302 <_malloc_r+0x22>
 8013394:	1b9b      	subs	r3, r3, r6
 8013396:	50a3      	str	r3, [r4, r2]
 8013398:	e7b3      	b.n	8013302 <_malloc_r+0x22>
 801339a:	6862      	ldr	r2, [r4, #4]
 801339c:	42a3      	cmp	r3, r4
 801339e:	bf0c      	ite	eq
 80133a0:	6032      	streq	r2, [r6, #0]
 80133a2:	605a      	strne	r2, [r3, #4]
 80133a4:	e7ec      	b.n	8013380 <_malloc_r+0xa0>
 80133a6:	4623      	mov	r3, r4
 80133a8:	6864      	ldr	r4, [r4, #4]
 80133aa:	e7b2      	b.n	8013312 <_malloc_r+0x32>
 80133ac:	4634      	mov	r4, r6
 80133ae:	6876      	ldr	r6, [r6, #4]
 80133b0:	e7b9      	b.n	8013326 <_malloc_r+0x46>
 80133b2:	230c      	movs	r3, #12
 80133b4:	603b      	str	r3, [r7, #0]
 80133b6:	4638      	mov	r0, r7
 80133b8:	f000 fb06 	bl	80139c8 <__malloc_unlock>
 80133bc:	e7a1      	b.n	8013302 <_malloc_r+0x22>
 80133be:	6025      	str	r5, [r4, #0]
 80133c0:	e7de      	b.n	8013380 <_malloc_r+0xa0>
 80133c2:	bf00      	nop
 80133c4:	2000c228 	.word	0x2000c228

080133c8 <iprintf>:
 80133c8:	b40f      	push	{r0, r1, r2, r3}
 80133ca:	4b0a      	ldr	r3, [pc, #40]	; (80133f4 <iprintf+0x2c>)
 80133cc:	b513      	push	{r0, r1, r4, lr}
 80133ce:	681c      	ldr	r4, [r3, #0]
 80133d0:	b124      	cbz	r4, 80133dc <iprintf+0x14>
 80133d2:	69a3      	ldr	r3, [r4, #24]
 80133d4:	b913      	cbnz	r3, 80133dc <iprintf+0x14>
 80133d6:	4620      	mov	r0, r4
 80133d8:	f000 fa3e 	bl	8013858 <__sinit>
 80133dc:	ab05      	add	r3, sp, #20
 80133de:	9a04      	ldr	r2, [sp, #16]
 80133e0:	68a1      	ldr	r1, [r4, #8]
 80133e2:	9301      	str	r3, [sp, #4]
 80133e4:	4620      	mov	r0, r4
 80133e6:	f000 fca9 	bl	8013d3c <_vfiprintf_r>
 80133ea:	b002      	add	sp, #8
 80133ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133f0:	b004      	add	sp, #16
 80133f2:	4770      	bx	lr
 80133f4:	200000b0 	.word	0x200000b0

080133f8 <srand>:
 80133f8:	b538      	push	{r3, r4, r5, lr}
 80133fa:	4b10      	ldr	r3, [pc, #64]	; (801343c <srand+0x44>)
 80133fc:	681d      	ldr	r5, [r3, #0]
 80133fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013400:	4604      	mov	r4, r0
 8013402:	b9b3      	cbnz	r3, 8013432 <srand+0x3a>
 8013404:	2018      	movs	r0, #24
 8013406:	f7ff fea9 	bl	801315c <malloc>
 801340a:	4602      	mov	r2, r0
 801340c:	63a8      	str	r0, [r5, #56]	; 0x38
 801340e:	b920      	cbnz	r0, 801341a <srand+0x22>
 8013410:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <srand+0x48>)
 8013412:	480c      	ldr	r0, [pc, #48]	; (8013444 <srand+0x4c>)
 8013414:	2142      	movs	r1, #66	; 0x42
 8013416:	f000 f99d 	bl	8013754 <__assert_func>
 801341a:	490b      	ldr	r1, [pc, #44]	; (8013448 <srand+0x50>)
 801341c:	4b0b      	ldr	r3, [pc, #44]	; (801344c <srand+0x54>)
 801341e:	e9c0 1300 	strd	r1, r3, [r0]
 8013422:	4b0b      	ldr	r3, [pc, #44]	; (8013450 <srand+0x58>)
 8013424:	6083      	str	r3, [r0, #8]
 8013426:	230b      	movs	r3, #11
 8013428:	8183      	strh	r3, [r0, #12]
 801342a:	2100      	movs	r1, #0
 801342c:	2001      	movs	r0, #1
 801342e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013432:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013434:	2200      	movs	r2, #0
 8013436:	611c      	str	r4, [r3, #16]
 8013438:	615a      	str	r2, [r3, #20]
 801343a:	bd38      	pop	{r3, r4, r5, pc}
 801343c:	200000b0 	.word	0x200000b0
 8013440:	080153a8 	.word	0x080153a8
 8013444:	080153bf 	.word	0x080153bf
 8013448:	abcd330e 	.word	0xabcd330e
 801344c:	e66d1234 	.word	0xe66d1234
 8013450:	0005deec 	.word	0x0005deec

08013454 <rand>:
 8013454:	4b16      	ldr	r3, [pc, #88]	; (80134b0 <rand+0x5c>)
 8013456:	b510      	push	{r4, lr}
 8013458:	681c      	ldr	r4, [r3, #0]
 801345a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801345c:	b9b3      	cbnz	r3, 801348c <rand+0x38>
 801345e:	2018      	movs	r0, #24
 8013460:	f7ff fe7c 	bl	801315c <malloc>
 8013464:	63a0      	str	r0, [r4, #56]	; 0x38
 8013466:	b928      	cbnz	r0, 8013474 <rand+0x20>
 8013468:	4602      	mov	r2, r0
 801346a:	4b12      	ldr	r3, [pc, #72]	; (80134b4 <rand+0x60>)
 801346c:	4812      	ldr	r0, [pc, #72]	; (80134b8 <rand+0x64>)
 801346e:	214e      	movs	r1, #78	; 0x4e
 8013470:	f000 f970 	bl	8013754 <__assert_func>
 8013474:	4a11      	ldr	r2, [pc, #68]	; (80134bc <rand+0x68>)
 8013476:	4b12      	ldr	r3, [pc, #72]	; (80134c0 <rand+0x6c>)
 8013478:	e9c0 2300 	strd	r2, r3, [r0]
 801347c:	4b11      	ldr	r3, [pc, #68]	; (80134c4 <rand+0x70>)
 801347e:	6083      	str	r3, [r0, #8]
 8013480:	230b      	movs	r3, #11
 8013482:	8183      	strh	r3, [r0, #12]
 8013484:	2201      	movs	r2, #1
 8013486:	2300      	movs	r3, #0
 8013488:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801348c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801348e:	4a0e      	ldr	r2, [pc, #56]	; (80134c8 <rand+0x74>)
 8013490:	6920      	ldr	r0, [r4, #16]
 8013492:	6963      	ldr	r3, [r4, #20]
 8013494:	490d      	ldr	r1, [pc, #52]	; (80134cc <rand+0x78>)
 8013496:	4342      	muls	r2, r0
 8013498:	fb01 2203 	mla	r2, r1, r3, r2
 801349c:	fba0 0101 	umull	r0, r1, r0, r1
 80134a0:	1c43      	adds	r3, r0, #1
 80134a2:	eb42 0001 	adc.w	r0, r2, r1
 80134a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80134aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80134ae:	bd10      	pop	{r4, pc}
 80134b0:	200000b0 	.word	0x200000b0
 80134b4:	080153a8 	.word	0x080153a8
 80134b8:	080153bf 	.word	0x080153bf
 80134bc:	abcd330e 	.word	0xabcd330e
 80134c0:	e66d1234 	.word	0xe66d1234
 80134c4:	0005deec 	.word	0x0005deec
 80134c8:	5851f42d 	.word	0x5851f42d
 80134cc:	4c957f2d 	.word	0x4c957f2d

080134d0 <realloc>:
 80134d0:	4b02      	ldr	r3, [pc, #8]	; (80134dc <realloc+0xc>)
 80134d2:	460a      	mov	r2, r1
 80134d4:	4601      	mov	r1, r0
 80134d6:	6818      	ldr	r0, [r3, #0]
 80134d8:	f000 ba7c 	b.w	80139d4 <_realloc_r>
 80134dc:	200000b0 	.word	0x200000b0

080134e0 <_sbrk_r>:
 80134e0:	b538      	push	{r3, r4, r5, lr}
 80134e2:	4d06      	ldr	r5, [pc, #24]	; (80134fc <_sbrk_r+0x1c>)
 80134e4:	2300      	movs	r3, #0
 80134e6:	4604      	mov	r4, r0
 80134e8:	4608      	mov	r0, r1
 80134ea:	602b      	str	r3, [r5, #0]
 80134ec:	f7ee fa5c 	bl	80019a8 <_sbrk>
 80134f0:	1c43      	adds	r3, r0, #1
 80134f2:	d102      	bne.n	80134fa <_sbrk_r+0x1a>
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	b103      	cbz	r3, 80134fa <_sbrk_r+0x1a>
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	bd38      	pop	{r3, r4, r5, pc}
 80134fc:	2000c234 	.word	0x2000c234

08013500 <sniprintf>:
 8013500:	b40c      	push	{r2, r3}
 8013502:	b530      	push	{r4, r5, lr}
 8013504:	4b17      	ldr	r3, [pc, #92]	; (8013564 <sniprintf+0x64>)
 8013506:	1e0c      	subs	r4, r1, #0
 8013508:	681d      	ldr	r5, [r3, #0]
 801350a:	b09d      	sub	sp, #116	; 0x74
 801350c:	da08      	bge.n	8013520 <sniprintf+0x20>
 801350e:	238b      	movs	r3, #139	; 0x8b
 8013510:	602b      	str	r3, [r5, #0]
 8013512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013516:	b01d      	add	sp, #116	; 0x74
 8013518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801351c:	b002      	add	sp, #8
 801351e:	4770      	bx	lr
 8013520:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013524:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013528:	bf14      	ite	ne
 801352a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801352e:	4623      	moveq	r3, r4
 8013530:	9304      	str	r3, [sp, #16]
 8013532:	9307      	str	r3, [sp, #28]
 8013534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013538:	9002      	str	r0, [sp, #8]
 801353a:	9006      	str	r0, [sp, #24]
 801353c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013540:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013542:	ab21      	add	r3, sp, #132	; 0x84
 8013544:	a902      	add	r1, sp, #8
 8013546:	4628      	mov	r0, r5
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	f000 facd 	bl	8013ae8 <_svfiprintf_r>
 801354e:	1c43      	adds	r3, r0, #1
 8013550:	bfbc      	itt	lt
 8013552:	238b      	movlt	r3, #139	; 0x8b
 8013554:	602b      	strlt	r3, [r5, #0]
 8013556:	2c00      	cmp	r4, #0
 8013558:	d0dd      	beq.n	8013516 <sniprintf+0x16>
 801355a:	9b02      	ldr	r3, [sp, #8]
 801355c:	2200      	movs	r2, #0
 801355e:	701a      	strb	r2, [r3, #0]
 8013560:	e7d9      	b.n	8013516 <sniprintf+0x16>
 8013562:	bf00      	nop
 8013564:	200000b0 	.word	0x200000b0

08013568 <strchr>:
 8013568:	b2c9      	uxtb	r1, r1
 801356a:	4603      	mov	r3, r0
 801356c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013570:	b11a      	cbz	r2, 801357a <strchr+0x12>
 8013572:	428a      	cmp	r2, r1
 8013574:	d1f9      	bne.n	801356a <strchr+0x2>
 8013576:	4618      	mov	r0, r3
 8013578:	4770      	bx	lr
 801357a:	2900      	cmp	r1, #0
 801357c:	bf18      	it	ne
 801357e:	2300      	movne	r3, #0
 8013580:	e7f9      	b.n	8013576 <strchr+0xe>

08013582 <strcpy>:
 8013582:	4603      	mov	r3, r0
 8013584:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013588:	f803 2b01 	strb.w	r2, [r3], #1
 801358c:	2a00      	cmp	r2, #0
 801358e:	d1f9      	bne.n	8013584 <strcpy+0x2>
 8013590:	4770      	bx	lr

08013592 <strncmp>:
 8013592:	b510      	push	{r4, lr}
 8013594:	b17a      	cbz	r2, 80135b6 <strncmp+0x24>
 8013596:	4603      	mov	r3, r0
 8013598:	3901      	subs	r1, #1
 801359a:	1884      	adds	r4, r0, r2
 801359c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80135a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80135a4:	4290      	cmp	r0, r2
 80135a6:	d101      	bne.n	80135ac <strncmp+0x1a>
 80135a8:	42a3      	cmp	r3, r4
 80135aa:	d101      	bne.n	80135b0 <strncmp+0x1e>
 80135ac:	1a80      	subs	r0, r0, r2
 80135ae:	bd10      	pop	{r4, pc}
 80135b0:	2800      	cmp	r0, #0
 80135b2:	d1f3      	bne.n	801359c <strncmp+0xa>
 80135b4:	e7fa      	b.n	80135ac <strncmp+0x1a>
 80135b6:	4610      	mov	r0, r2
 80135b8:	e7f9      	b.n	80135ae <strncmp+0x1c>

080135ba <strstr>:
 80135ba:	780a      	ldrb	r2, [r1, #0]
 80135bc:	b570      	push	{r4, r5, r6, lr}
 80135be:	b96a      	cbnz	r2, 80135dc <strstr+0x22>
 80135c0:	bd70      	pop	{r4, r5, r6, pc}
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d109      	bne.n	80135da <strstr+0x20>
 80135c6:	460c      	mov	r4, r1
 80135c8:	4605      	mov	r5, r0
 80135ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d0f6      	beq.n	80135c0 <strstr+0x6>
 80135d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80135d6:	429e      	cmp	r6, r3
 80135d8:	d0f7      	beq.n	80135ca <strstr+0x10>
 80135da:	3001      	adds	r0, #1
 80135dc:	7803      	ldrb	r3, [r0, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1ef      	bne.n	80135c2 <strstr+0x8>
 80135e2:	4618      	mov	r0, r3
 80135e4:	e7ec      	b.n	80135c0 <strstr+0x6>
	...

080135e8 <_strtoul_l.constprop.0>:
 80135e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135ec:	4f36      	ldr	r7, [pc, #216]	; (80136c8 <_strtoul_l.constprop.0+0xe0>)
 80135ee:	4686      	mov	lr, r0
 80135f0:	460d      	mov	r5, r1
 80135f2:	4628      	mov	r0, r5
 80135f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135f8:	5de6      	ldrb	r6, [r4, r7]
 80135fa:	f016 0608 	ands.w	r6, r6, #8
 80135fe:	d1f8      	bne.n	80135f2 <_strtoul_l.constprop.0+0xa>
 8013600:	2c2d      	cmp	r4, #45	; 0x2d
 8013602:	d12f      	bne.n	8013664 <_strtoul_l.constprop.0+0x7c>
 8013604:	782c      	ldrb	r4, [r5, #0]
 8013606:	2601      	movs	r6, #1
 8013608:	1c85      	adds	r5, r0, #2
 801360a:	2b00      	cmp	r3, #0
 801360c:	d057      	beq.n	80136be <_strtoul_l.constprop.0+0xd6>
 801360e:	2b10      	cmp	r3, #16
 8013610:	d109      	bne.n	8013626 <_strtoul_l.constprop.0+0x3e>
 8013612:	2c30      	cmp	r4, #48	; 0x30
 8013614:	d107      	bne.n	8013626 <_strtoul_l.constprop.0+0x3e>
 8013616:	7828      	ldrb	r0, [r5, #0]
 8013618:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801361c:	2858      	cmp	r0, #88	; 0x58
 801361e:	d149      	bne.n	80136b4 <_strtoul_l.constprop.0+0xcc>
 8013620:	786c      	ldrb	r4, [r5, #1]
 8013622:	2310      	movs	r3, #16
 8013624:	3502      	adds	r5, #2
 8013626:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801362a:	2700      	movs	r7, #0
 801362c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013630:	fb03 f908 	mul.w	r9, r3, r8
 8013634:	ea6f 0909 	mvn.w	r9, r9
 8013638:	4638      	mov	r0, r7
 801363a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801363e:	f1bc 0f09 	cmp.w	ip, #9
 8013642:	d814      	bhi.n	801366e <_strtoul_l.constprop.0+0x86>
 8013644:	4664      	mov	r4, ip
 8013646:	42a3      	cmp	r3, r4
 8013648:	dd22      	ble.n	8013690 <_strtoul_l.constprop.0+0xa8>
 801364a:	2f00      	cmp	r7, #0
 801364c:	db1d      	blt.n	801368a <_strtoul_l.constprop.0+0xa2>
 801364e:	4580      	cmp	r8, r0
 8013650:	d31b      	bcc.n	801368a <_strtoul_l.constprop.0+0xa2>
 8013652:	d101      	bne.n	8013658 <_strtoul_l.constprop.0+0x70>
 8013654:	45a1      	cmp	r9, r4
 8013656:	db18      	blt.n	801368a <_strtoul_l.constprop.0+0xa2>
 8013658:	fb00 4003 	mla	r0, r0, r3, r4
 801365c:	2701      	movs	r7, #1
 801365e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013662:	e7ea      	b.n	801363a <_strtoul_l.constprop.0+0x52>
 8013664:	2c2b      	cmp	r4, #43	; 0x2b
 8013666:	bf04      	itt	eq
 8013668:	782c      	ldrbeq	r4, [r5, #0]
 801366a:	1c85      	addeq	r5, r0, #2
 801366c:	e7cd      	b.n	801360a <_strtoul_l.constprop.0+0x22>
 801366e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013672:	f1bc 0f19 	cmp.w	ip, #25
 8013676:	d801      	bhi.n	801367c <_strtoul_l.constprop.0+0x94>
 8013678:	3c37      	subs	r4, #55	; 0x37
 801367a:	e7e4      	b.n	8013646 <_strtoul_l.constprop.0+0x5e>
 801367c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013680:	f1bc 0f19 	cmp.w	ip, #25
 8013684:	d804      	bhi.n	8013690 <_strtoul_l.constprop.0+0xa8>
 8013686:	3c57      	subs	r4, #87	; 0x57
 8013688:	e7dd      	b.n	8013646 <_strtoul_l.constprop.0+0x5e>
 801368a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801368e:	e7e6      	b.n	801365e <_strtoul_l.constprop.0+0x76>
 8013690:	2f00      	cmp	r7, #0
 8013692:	da07      	bge.n	80136a4 <_strtoul_l.constprop.0+0xbc>
 8013694:	2322      	movs	r3, #34	; 0x22
 8013696:	f8ce 3000 	str.w	r3, [lr]
 801369a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801369e:	b932      	cbnz	r2, 80136ae <_strtoul_l.constprop.0+0xc6>
 80136a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136a4:	b106      	cbz	r6, 80136a8 <_strtoul_l.constprop.0+0xc0>
 80136a6:	4240      	negs	r0, r0
 80136a8:	2a00      	cmp	r2, #0
 80136aa:	d0f9      	beq.n	80136a0 <_strtoul_l.constprop.0+0xb8>
 80136ac:	b107      	cbz	r7, 80136b0 <_strtoul_l.constprop.0+0xc8>
 80136ae:	1e69      	subs	r1, r5, #1
 80136b0:	6011      	str	r1, [r2, #0]
 80136b2:	e7f5      	b.n	80136a0 <_strtoul_l.constprop.0+0xb8>
 80136b4:	2430      	movs	r4, #48	; 0x30
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d1b5      	bne.n	8013626 <_strtoul_l.constprop.0+0x3e>
 80136ba:	2308      	movs	r3, #8
 80136bc:	e7b3      	b.n	8013626 <_strtoul_l.constprop.0+0x3e>
 80136be:	2c30      	cmp	r4, #48	; 0x30
 80136c0:	d0a9      	beq.n	8013616 <_strtoul_l.constprop.0+0x2e>
 80136c2:	230a      	movs	r3, #10
 80136c4:	e7af      	b.n	8013626 <_strtoul_l.constprop.0+0x3e>
 80136c6:	bf00      	nop
 80136c8:	080152a1 	.word	0x080152a1

080136cc <strtoul>:
 80136cc:	4613      	mov	r3, r2
 80136ce:	460a      	mov	r2, r1
 80136d0:	4601      	mov	r1, r0
 80136d2:	4802      	ldr	r0, [pc, #8]	; (80136dc <strtoul+0x10>)
 80136d4:	6800      	ldr	r0, [r0, #0]
 80136d6:	f7ff bf87 	b.w	80135e8 <_strtoul_l.constprop.0>
 80136da:	bf00      	nop
 80136dc:	200000b0 	.word	0x200000b0

080136e0 <_vsniprintf_r>:
 80136e0:	b530      	push	{r4, r5, lr}
 80136e2:	4614      	mov	r4, r2
 80136e4:	2c00      	cmp	r4, #0
 80136e6:	b09b      	sub	sp, #108	; 0x6c
 80136e8:	4605      	mov	r5, r0
 80136ea:	461a      	mov	r2, r3
 80136ec:	da05      	bge.n	80136fa <_vsniprintf_r+0x1a>
 80136ee:	238b      	movs	r3, #139	; 0x8b
 80136f0:	6003      	str	r3, [r0, #0]
 80136f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136f6:	b01b      	add	sp, #108	; 0x6c
 80136f8:	bd30      	pop	{r4, r5, pc}
 80136fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80136fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013702:	bf14      	ite	ne
 8013704:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013708:	4623      	moveq	r3, r4
 801370a:	9302      	str	r3, [sp, #8]
 801370c:	9305      	str	r3, [sp, #20]
 801370e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013712:	9100      	str	r1, [sp, #0]
 8013714:	9104      	str	r1, [sp, #16]
 8013716:	f8ad 300e 	strh.w	r3, [sp, #14]
 801371a:	4669      	mov	r1, sp
 801371c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801371e:	f000 f9e3 	bl	8013ae8 <_svfiprintf_r>
 8013722:	1c43      	adds	r3, r0, #1
 8013724:	bfbc      	itt	lt
 8013726:	238b      	movlt	r3, #139	; 0x8b
 8013728:	602b      	strlt	r3, [r5, #0]
 801372a:	2c00      	cmp	r4, #0
 801372c:	d0e3      	beq.n	80136f6 <_vsniprintf_r+0x16>
 801372e:	9b00      	ldr	r3, [sp, #0]
 8013730:	2200      	movs	r2, #0
 8013732:	701a      	strb	r2, [r3, #0]
 8013734:	e7df      	b.n	80136f6 <_vsniprintf_r+0x16>
	...

08013738 <vsniprintf>:
 8013738:	b507      	push	{r0, r1, r2, lr}
 801373a:	9300      	str	r3, [sp, #0]
 801373c:	4613      	mov	r3, r2
 801373e:	460a      	mov	r2, r1
 8013740:	4601      	mov	r1, r0
 8013742:	4803      	ldr	r0, [pc, #12]	; (8013750 <vsniprintf+0x18>)
 8013744:	6800      	ldr	r0, [r0, #0]
 8013746:	f7ff ffcb 	bl	80136e0 <_vsniprintf_r>
 801374a:	b003      	add	sp, #12
 801374c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013750:	200000b0 	.word	0x200000b0

08013754 <__assert_func>:
 8013754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013756:	4614      	mov	r4, r2
 8013758:	461a      	mov	r2, r3
 801375a:	4b09      	ldr	r3, [pc, #36]	; (8013780 <__assert_func+0x2c>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	4605      	mov	r5, r0
 8013760:	68d8      	ldr	r0, [r3, #12]
 8013762:	b14c      	cbz	r4, 8013778 <__assert_func+0x24>
 8013764:	4b07      	ldr	r3, [pc, #28]	; (8013784 <__assert_func+0x30>)
 8013766:	9100      	str	r1, [sp, #0]
 8013768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801376c:	4906      	ldr	r1, [pc, #24]	; (8013788 <__assert_func+0x34>)
 801376e:	462b      	mov	r3, r5
 8013770:	f000 f8f0 	bl	8013954 <fiprintf>
 8013774:	f000 febc 	bl	80144f0 <abort>
 8013778:	4b04      	ldr	r3, [pc, #16]	; (801378c <__assert_func+0x38>)
 801377a:	461c      	mov	r4, r3
 801377c:	e7f3      	b.n	8013766 <__assert_func+0x12>
 801377e:	bf00      	nop
 8013780:	200000b0 	.word	0x200000b0
 8013784:	0801541a 	.word	0x0801541a
 8013788:	08015427 	.word	0x08015427
 801378c:	08015455 	.word	0x08015455

08013790 <__env_lock>:
 8013790:	4801      	ldr	r0, [pc, #4]	; (8013798 <__env_lock+0x8>)
 8013792:	f000 b911 	b.w	80139b8 <__retarget_lock_acquire_recursive>
 8013796:	bf00      	nop
 8013798:	2000c230 	.word	0x2000c230

0801379c <__env_unlock>:
 801379c:	4801      	ldr	r0, [pc, #4]	; (80137a4 <__env_unlock+0x8>)
 801379e:	f000 b90c 	b.w	80139ba <__retarget_lock_release_recursive>
 80137a2:	bf00      	nop
 80137a4:	2000c230 	.word	0x2000c230

080137a8 <std>:
 80137a8:	2300      	movs	r3, #0
 80137aa:	b510      	push	{r4, lr}
 80137ac:	4604      	mov	r4, r0
 80137ae:	e9c0 3300 	strd	r3, r3, [r0]
 80137b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137b6:	6083      	str	r3, [r0, #8]
 80137b8:	8181      	strh	r1, [r0, #12]
 80137ba:	6643      	str	r3, [r0, #100]	; 0x64
 80137bc:	81c2      	strh	r2, [r0, #14]
 80137be:	6183      	str	r3, [r0, #24]
 80137c0:	4619      	mov	r1, r3
 80137c2:	2208      	movs	r2, #8
 80137c4:	305c      	adds	r0, #92	; 0x5c
 80137c6:	f7ff fd01 	bl	80131cc <memset>
 80137ca:	4b05      	ldr	r3, [pc, #20]	; (80137e0 <std+0x38>)
 80137cc:	6263      	str	r3, [r4, #36]	; 0x24
 80137ce:	4b05      	ldr	r3, [pc, #20]	; (80137e4 <std+0x3c>)
 80137d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80137d2:	4b05      	ldr	r3, [pc, #20]	; (80137e8 <std+0x40>)
 80137d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137d6:	4b05      	ldr	r3, [pc, #20]	; (80137ec <std+0x44>)
 80137d8:	6224      	str	r4, [r4, #32]
 80137da:	6323      	str	r3, [r4, #48]	; 0x30
 80137dc:	bd10      	pop	{r4, pc}
 80137de:	bf00      	nop
 80137e0:	080142c5 	.word	0x080142c5
 80137e4:	080142e7 	.word	0x080142e7
 80137e8:	0801431f 	.word	0x0801431f
 80137ec:	08014343 	.word	0x08014343

080137f0 <_cleanup_r>:
 80137f0:	4901      	ldr	r1, [pc, #4]	; (80137f8 <_cleanup_r+0x8>)
 80137f2:	f000 b8c1 	b.w	8013978 <_fwalk_reent>
 80137f6:	bf00      	nop
 80137f8:	0801462d 	.word	0x0801462d

080137fc <__sfmoreglue>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	2268      	movs	r2, #104	; 0x68
 8013800:	1e4d      	subs	r5, r1, #1
 8013802:	4355      	muls	r5, r2
 8013804:	460e      	mov	r6, r1
 8013806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801380a:	f7ff fd69 	bl	80132e0 <_malloc_r>
 801380e:	4604      	mov	r4, r0
 8013810:	b140      	cbz	r0, 8013824 <__sfmoreglue+0x28>
 8013812:	2100      	movs	r1, #0
 8013814:	e9c0 1600 	strd	r1, r6, [r0]
 8013818:	300c      	adds	r0, #12
 801381a:	60a0      	str	r0, [r4, #8]
 801381c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013820:	f7ff fcd4 	bl	80131cc <memset>
 8013824:	4620      	mov	r0, r4
 8013826:	bd70      	pop	{r4, r5, r6, pc}

08013828 <__sfp_lock_acquire>:
 8013828:	4801      	ldr	r0, [pc, #4]	; (8013830 <__sfp_lock_acquire+0x8>)
 801382a:	f000 b8c5 	b.w	80139b8 <__retarget_lock_acquire_recursive>
 801382e:	bf00      	nop
 8013830:	2000c232 	.word	0x2000c232

08013834 <__sfp_lock_release>:
 8013834:	4801      	ldr	r0, [pc, #4]	; (801383c <__sfp_lock_release+0x8>)
 8013836:	f000 b8c0 	b.w	80139ba <__retarget_lock_release_recursive>
 801383a:	bf00      	nop
 801383c:	2000c232 	.word	0x2000c232

08013840 <__sinit_lock_acquire>:
 8013840:	4801      	ldr	r0, [pc, #4]	; (8013848 <__sinit_lock_acquire+0x8>)
 8013842:	f000 b8b9 	b.w	80139b8 <__retarget_lock_acquire_recursive>
 8013846:	bf00      	nop
 8013848:	2000c233 	.word	0x2000c233

0801384c <__sinit_lock_release>:
 801384c:	4801      	ldr	r0, [pc, #4]	; (8013854 <__sinit_lock_release+0x8>)
 801384e:	f000 b8b4 	b.w	80139ba <__retarget_lock_release_recursive>
 8013852:	bf00      	nop
 8013854:	2000c233 	.word	0x2000c233

08013858 <__sinit>:
 8013858:	b510      	push	{r4, lr}
 801385a:	4604      	mov	r4, r0
 801385c:	f7ff fff0 	bl	8013840 <__sinit_lock_acquire>
 8013860:	69a3      	ldr	r3, [r4, #24]
 8013862:	b11b      	cbz	r3, 801386c <__sinit+0x14>
 8013864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013868:	f7ff bff0 	b.w	801384c <__sinit_lock_release>
 801386c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013870:	6523      	str	r3, [r4, #80]	; 0x50
 8013872:	4b13      	ldr	r3, [pc, #76]	; (80138c0 <__sinit+0x68>)
 8013874:	4a13      	ldr	r2, [pc, #76]	; (80138c4 <__sinit+0x6c>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	62a2      	str	r2, [r4, #40]	; 0x28
 801387a:	42a3      	cmp	r3, r4
 801387c:	bf04      	itt	eq
 801387e:	2301      	moveq	r3, #1
 8013880:	61a3      	streq	r3, [r4, #24]
 8013882:	4620      	mov	r0, r4
 8013884:	f000 f820 	bl	80138c8 <__sfp>
 8013888:	6060      	str	r0, [r4, #4]
 801388a:	4620      	mov	r0, r4
 801388c:	f000 f81c 	bl	80138c8 <__sfp>
 8013890:	60a0      	str	r0, [r4, #8]
 8013892:	4620      	mov	r0, r4
 8013894:	f000 f818 	bl	80138c8 <__sfp>
 8013898:	2200      	movs	r2, #0
 801389a:	60e0      	str	r0, [r4, #12]
 801389c:	2104      	movs	r1, #4
 801389e:	6860      	ldr	r0, [r4, #4]
 80138a0:	f7ff ff82 	bl	80137a8 <std>
 80138a4:	68a0      	ldr	r0, [r4, #8]
 80138a6:	2201      	movs	r2, #1
 80138a8:	2109      	movs	r1, #9
 80138aa:	f7ff ff7d 	bl	80137a8 <std>
 80138ae:	68e0      	ldr	r0, [r4, #12]
 80138b0:	2202      	movs	r2, #2
 80138b2:	2112      	movs	r1, #18
 80138b4:	f7ff ff78 	bl	80137a8 <std>
 80138b8:	2301      	movs	r3, #1
 80138ba:	61a3      	str	r3, [r4, #24]
 80138bc:	e7d2      	b.n	8013864 <__sinit+0xc>
 80138be:	bf00      	nop
 80138c0:	080153a4 	.word	0x080153a4
 80138c4:	080137f1 	.word	0x080137f1

080138c8 <__sfp>:
 80138c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ca:	4607      	mov	r7, r0
 80138cc:	f7ff ffac 	bl	8013828 <__sfp_lock_acquire>
 80138d0:	4b1e      	ldr	r3, [pc, #120]	; (801394c <__sfp+0x84>)
 80138d2:	681e      	ldr	r6, [r3, #0]
 80138d4:	69b3      	ldr	r3, [r6, #24]
 80138d6:	b913      	cbnz	r3, 80138de <__sfp+0x16>
 80138d8:	4630      	mov	r0, r6
 80138da:	f7ff ffbd 	bl	8013858 <__sinit>
 80138de:	3648      	adds	r6, #72	; 0x48
 80138e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138e4:	3b01      	subs	r3, #1
 80138e6:	d503      	bpl.n	80138f0 <__sfp+0x28>
 80138e8:	6833      	ldr	r3, [r6, #0]
 80138ea:	b30b      	cbz	r3, 8013930 <__sfp+0x68>
 80138ec:	6836      	ldr	r6, [r6, #0]
 80138ee:	e7f7      	b.n	80138e0 <__sfp+0x18>
 80138f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80138f4:	b9d5      	cbnz	r5, 801392c <__sfp+0x64>
 80138f6:	4b16      	ldr	r3, [pc, #88]	; (8013950 <__sfp+0x88>)
 80138f8:	60e3      	str	r3, [r4, #12]
 80138fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80138fe:	6665      	str	r5, [r4, #100]	; 0x64
 8013900:	f000 f859 	bl	80139b6 <__retarget_lock_init_recursive>
 8013904:	f7ff ff96 	bl	8013834 <__sfp_lock_release>
 8013908:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801390c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013910:	6025      	str	r5, [r4, #0]
 8013912:	61a5      	str	r5, [r4, #24]
 8013914:	2208      	movs	r2, #8
 8013916:	4629      	mov	r1, r5
 8013918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801391c:	f7ff fc56 	bl	80131cc <memset>
 8013920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013928:	4620      	mov	r0, r4
 801392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801392c:	3468      	adds	r4, #104	; 0x68
 801392e:	e7d9      	b.n	80138e4 <__sfp+0x1c>
 8013930:	2104      	movs	r1, #4
 8013932:	4638      	mov	r0, r7
 8013934:	f7ff ff62 	bl	80137fc <__sfmoreglue>
 8013938:	4604      	mov	r4, r0
 801393a:	6030      	str	r0, [r6, #0]
 801393c:	2800      	cmp	r0, #0
 801393e:	d1d5      	bne.n	80138ec <__sfp+0x24>
 8013940:	f7ff ff78 	bl	8013834 <__sfp_lock_release>
 8013944:	230c      	movs	r3, #12
 8013946:	603b      	str	r3, [r7, #0]
 8013948:	e7ee      	b.n	8013928 <__sfp+0x60>
 801394a:	bf00      	nop
 801394c:	080153a4 	.word	0x080153a4
 8013950:	ffff0001 	.word	0xffff0001

08013954 <fiprintf>:
 8013954:	b40e      	push	{r1, r2, r3}
 8013956:	b503      	push	{r0, r1, lr}
 8013958:	4601      	mov	r1, r0
 801395a:	ab03      	add	r3, sp, #12
 801395c:	4805      	ldr	r0, [pc, #20]	; (8013974 <fiprintf+0x20>)
 801395e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013962:	6800      	ldr	r0, [r0, #0]
 8013964:	9301      	str	r3, [sp, #4]
 8013966:	f000 f9e9 	bl	8013d3c <_vfiprintf_r>
 801396a:	b002      	add	sp, #8
 801396c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013970:	b003      	add	sp, #12
 8013972:	4770      	bx	lr
 8013974:	200000b0 	.word	0x200000b0

08013978 <_fwalk_reent>:
 8013978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801397c:	4606      	mov	r6, r0
 801397e:	4688      	mov	r8, r1
 8013980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013984:	2700      	movs	r7, #0
 8013986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801398a:	f1b9 0901 	subs.w	r9, r9, #1
 801398e:	d505      	bpl.n	801399c <_fwalk_reent+0x24>
 8013990:	6824      	ldr	r4, [r4, #0]
 8013992:	2c00      	cmp	r4, #0
 8013994:	d1f7      	bne.n	8013986 <_fwalk_reent+0xe>
 8013996:	4638      	mov	r0, r7
 8013998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399c:	89ab      	ldrh	r3, [r5, #12]
 801399e:	2b01      	cmp	r3, #1
 80139a0:	d907      	bls.n	80139b2 <_fwalk_reent+0x3a>
 80139a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80139a6:	3301      	adds	r3, #1
 80139a8:	d003      	beq.n	80139b2 <_fwalk_reent+0x3a>
 80139aa:	4629      	mov	r1, r5
 80139ac:	4630      	mov	r0, r6
 80139ae:	47c0      	blx	r8
 80139b0:	4307      	orrs	r7, r0
 80139b2:	3568      	adds	r5, #104	; 0x68
 80139b4:	e7e9      	b.n	801398a <_fwalk_reent+0x12>

080139b6 <__retarget_lock_init_recursive>:
 80139b6:	4770      	bx	lr

080139b8 <__retarget_lock_acquire_recursive>:
 80139b8:	4770      	bx	lr

080139ba <__retarget_lock_release_recursive>:
 80139ba:	4770      	bx	lr

080139bc <__malloc_lock>:
 80139bc:	4801      	ldr	r0, [pc, #4]	; (80139c4 <__malloc_lock+0x8>)
 80139be:	f7ff bffb 	b.w	80139b8 <__retarget_lock_acquire_recursive>
 80139c2:	bf00      	nop
 80139c4:	2000c231 	.word	0x2000c231

080139c8 <__malloc_unlock>:
 80139c8:	4801      	ldr	r0, [pc, #4]	; (80139d0 <__malloc_unlock+0x8>)
 80139ca:	f7ff bff6 	b.w	80139ba <__retarget_lock_release_recursive>
 80139ce:	bf00      	nop
 80139d0:	2000c231 	.word	0x2000c231

080139d4 <_realloc_r>:
 80139d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d8:	4680      	mov	r8, r0
 80139da:	4614      	mov	r4, r2
 80139dc:	460e      	mov	r6, r1
 80139de:	b921      	cbnz	r1, 80139ea <_realloc_r+0x16>
 80139e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	4611      	mov	r1, r2
 80139e6:	f7ff bc7b 	b.w	80132e0 <_malloc_r>
 80139ea:	b92a      	cbnz	r2, 80139f8 <_realloc_r+0x24>
 80139ec:	f7ff fc0c 	bl	8013208 <_free_r>
 80139f0:	4625      	mov	r5, r4
 80139f2:	4628      	mov	r0, r5
 80139f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f8:	f000 fecc 	bl	8014794 <_malloc_usable_size_r>
 80139fc:	4284      	cmp	r4, r0
 80139fe:	4607      	mov	r7, r0
 8013a00:	d802      	bhi.n	8013a08 <_realloc_r+0x34>
 8013a02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013a06:	d812      	bhi.n	8013a2e <_realloc_r+0x5a>
 8013a08:	4621      	mov	r1, r4
 8013a0a:	4640      	mov	r0, r8
 8013a0c:	f7ff fc68 	bl	80132e0 <_malloc_r>
 8013a10:	4605      	mov	r5, r0
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0ed      	beq.n	80139f2 <_realloc_r+0x1e>
 8013a16:	42bc      	cmp	r4, r7
 8013a18:	4622      	mov	r2, r4
 8013a1a:	4631      	mov	r1, r6
 8013a1c:	bf28      	it	cs
 8013a1e:	463a      	movcs	r2, r7
 8013a20:	f7ff fbac 	bl	801317c <memcpy>
 8013a24:	4631      	mov	r1, r6
 8013a26:	4640      	mov	r0, r8
 8013a28:	f7ff fbee 	bl	8013208 <_free_r>
 8013a2c:	e7e1      	b.n	80139f2 <_realloc_r+0x1e>
 8013a2e:	4635      	mov	r5, r6
 8013a30:	e7df      	b.n	80139f2 <_realloc_r+0x1e>

08013a32 <__ssputs_r>:
 8013a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a36:	688e      	ldr	r6, [r1, #8]
 8013a38:	429e      	cmp	r6, r3
 8013a3a:	4682      	mov	sl, r0
 8013a3c:	460c      	mov	r4, r1
 8013a3e:	4690      	mov	r8, r2
 8013a40:	461f      	mov	r7, r3
 8013a42:	d838      	bhi.n	8013ab6 <__ssputs_r+0x84>
 8013a44:	898a      	ldrh	r2, [r1, #12]
 8013a46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a4a:	d032      	beq.n	8013ab2 <__ssputs_r+0x80>
 8013a4c:	6825      	ldr	r5, [r4, #0]
 8013a4e:	6909      	ldr	r1, [r1, #16]
 8013a50:	eba5 0901 	sub.w	r9, r5, r1
 8013a54:	6965      	ldr	r5, [r4, #20]
 8013a56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a5e:	3301      	adds	r3, #1
 8013a60:	444b      	add	r3, r9
 8013a62:	106d      	asrs	r5, r5, #1
 8013a64:	429d      	cmp	r5, r3
 8013a66:	bf38      	it	cc
 8013a68:	461d      	movcc	r5, r3
 8013a6a:	0553      	lsls	r3, r2, #21
 8013a6c:	d531      	bpl.n	8013ad2 <__ssputs_r+0xa0>
 8013a6e:	4629      	mov	r1, r5
 8013a70:	f7ff fc36 	bl	80132e0 <_malloc_r>
 8013a74:	4606      	mov	r6, r0
 8013a76:	b950      	cbnz	r0, 8013a8e <__ssputs_r+0x5c>
 8013a78:	230c      	movs	r3, #12
 8013a7a:	f8ca 3000 	str.w	r3, [sl]
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a84:	81a3      	strh	r3, [r4, #12]
 8013a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a8e:	6921      	ldr	r1, [r4, #16]
 8013a90:	464a      	mov	r2, r9
 8013a92:	f7ff fb73 	bl	801317c <memcpy>
 8013a96:	89a3      	ldrh	r3, [r4, #12]
 8013a98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013aa0:	81a3      	strh	r3, [r4, #12]
 8013aa2:	6126      	str	r6, [r4, #16]
 8013aa4:	6165      	str	r5, [r4, #20]
 8013aa6:	444e      	add	r6, r9
 8013aa8:	eba5 0509 	sub.w	r5, r5, r9
 8013aac:	6026      	str	r6, [r4, #0]
 8013aae:	60a5      	str	r5, [r4, #8]
 8013ab0:	463e      	mov	r6, r7
 8013ab2:	42be      	cmp	r6, r7
 8013ab4:	d900      	bls.n	8013ab8 <__ssputs_r+0x86>
 8013ab6:	463e      	mov	r6, r7
 8013ab8:	6820      	ldr	r0, [r4, #0]
 8013aba:	4632      	mov	r2, r6
 8013abc:	4641      	mov	r1, r8
 8013abe:	f7ff fb6b 	bl	8013198 <memmove>
 8013ac2:	68a3      	ldr	r3, [r4, #8]
 8013ac4:	1b9b      	subs	r3, r3, r6
 8013ac6:	60a3      	str	r3, [r4, #8]
 8013ac8:	6823      	ldr	r3, [r4, #0]
 8013aca:	4433      	add	r3, r6
 8013acc:	6023      	str	r3, [r4, #0]
 8013ace:	2000      	movs	r0, #0
 8013ad0:	e7db      	b.n	8013a8a <__ssputs_r+0x58>
 8013ad2:	462a      	mov	r2, r5
 8013ad4:	f7ff ff7e 	bl	80139d4 <_realloc_r>
 8013ad8:	4606      	mov	r6, r0
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d1e1      	bne.n	8013aa2 <__ssputs_r+0x70>
 8013ade:	6921      	ldr	r1, [r4, #16]
 8013ae0:	4650      	mov	r0, sl
 8013ae2:	f7ff fb91 	bl	8013208 <_free_r>
 8013ae6:	e7c7      	b.n	8013a78 <__ssputs_r+0x46>

08013ae8 <_svfiprintf_r>:
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	4698      	mov	r8, r3
 8013aee:	898b      	ldrh	r3, [r1, #12]
 8013af0:	061b      	lsls	r3, r3, #24
 8013af2:	b09d      	sub	sp, #116	; 0x74
 8013af4:	4607      	mov	r7, r0
 8013af6:	460d      	mov	r5, r1
 8013af8:	4614      	mov	r4, r2
 8013afa:	d50e      	bpl.n	8013b1a <_svfiprintf_r+0x32>
 8013afc:	690b      	ldr	r3, [r1, #16]
 8013afe:	b963      	cbnz	r3, 8013b1a <_svfiprintf_r+0x32>
 8013b00:	2140      	movs	r1, #64	; 0x40
 8013b02:	f7ff fbed 	bl	80132e0 <_malloc_r>
 8013b06:	6028      	str	r0, [r5, #0]
 8013b08:	6128      	str	r0, [r5, #16]
 8013b0a:	b920      	cbnz	r0, 8013b16 <_svfiprintf_r+0x2e>
 8013b0c:	230c      	movs	r3, #12
 8013b0e:	603b      	str	r3, [r7, #0]
 8013b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b14:	e0d1      	b.n	8013cba <_svfiprintf_r+0x1d2>
 8013b16:	2340      	movs	r3, #64	; 0x40
 8013b18:	616b      	str	r3, [r5, #20]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b1e:	2320      	movs	r3, #32
 8013b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b28:	2330      	movs	r3, #48	; 0x30
 8013b2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013cd4 <_svfiprintf_r+0x1ec>
 8013b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b32:	f04f 0901 	mov.w	r9, #1
 8013b36:	4623      	mov	r3, r4
 8013b38:	469a      	mov	sl, r3
 8013b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b3e:	b10a      	cbz	r2, 8013b44 <_svfiprintf_r+0x5c>
 8013b40:	2a25      	cmp	r2, #37	; 0x25
 8013b42:	d1f9      	bne.n	8013b38 <_svfiprintf_r+0x50>
 8013b44:	ebba 0b04 	subs.w	fp, sl, r4
 8013b48:	d00b      	beq.n	8013b62 <_svfiprintf_r+0x7a>
 8013b4a:	465b      	mov	r3, fp
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	4629      	mov	r1, r5
 8013b50:	4638      	mov	r0, r7
 8013b52:	f7ff ff6e 	bl	8013a32 <__ssputs_r>
 8013b56:	3001      	adds	r0, #1
 8013b58:	f000 80aa 	beq.w	8013cb0 <_svfiprintf_r+0x1c8>
 8013b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b5e:	445a      	add	r2, fp
 8013b60:	9209      	str	r2, [sp, #36]	; 0x24
 8013b62:	f89a 3000 	ldrb.w	r3, [sl]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f000 80a2 	beq.w	8013cb0 <_svfiprintf_r+0x1c8>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b76:	f10a 0a01 	add.w	sl, sl, #1
 8013b7a:	9304      	str	r3, [sp, #16]
 8013b7c:	9307      	str	r3, [sp, #28]
 8013b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b82:	931a      	str	r3, [sp, #104]	; 0x68
 8013b84:	4654      	mov	r4, sl
 8013b86:	2205      	movs	r2, #5
 8013b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8c:	4851      	ldr	r0, [pc, #324]	; (8013cd4 <_svfiprintf_r+0x1ec>)
 8013b8e:	f7ec fb57 	bl	8000240 <memchr>
 8013b92:	9a04      	ldr	r2, [sp, #16]
 8013b94:	b9d8      	cbnz	r0, 8013bce <_svfiprintf_r+0xe6>
 8013b96:	06d0      	lsls	r0, r2, #27
 8013b98:	bf44      	itt	mi
 8013b9a:	2320      	movmi	r3, #32
 8013b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ba0:	0711      	lsls	r1, r2, #28
 8013ba2:	bf44      	itt	mi
 8013ba4:	232b      	movmi	r3, #43	; 0x2b
 8013ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013baa:	f89a 3000 	ldrb.w	r3, [sl]
 8013bae:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb0:	d015      	beq.n	8013bde <_svfiprintf_r+0xf6>
 8013bb2:	9a07      	ldr	r2, [sp, #28]
 8013bb4:	4654      	mov	r4, sl
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	f04f 0c0a 	mov.w	ip, #10
 8013bbc:	4621      	mov	r1, r4
 8013bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bc2:	3b30      	subs	r3, #48	; 0x30
 8013bc4:	2b09      	cmp	r3, #9
 8013bc6:	d94e      	bls.n	8013c66 <_svfiprintf_r+0x17e>
 8013bc8:	b1b0      	cbz	r0, 8013bf8 <_svfiprintf_r+0x110>
 8013bca:	9207      	str	r2, [sp, #28]
 8013bcc:	e014      	b.n	8013bf8 <_svfiprintf_r+0x110>
 8013bce:	eba0 0308 	sub.w	r3, r0, r8
 8013bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	9304      	str	r3, [sp, #16]
 8013bda:	46a2      	mov	sl, r4
 8013bdc:	e7d2      	b.n	8013b84 <_svfiprintf_r+0x9c>
 8013bde:	9b03      	ldr	r3, [sp, #12]
 8013be0:	1d19      	adds	r1, r3, #4
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	9103      	str	r1, [sp, #12]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	bfbb      	ittet	lt
 8013bea:	425b      	neglt	r3, r3
 8013bec:	f042 0202 	orrlt.w	r2, r2, #2
 8013bf0:	9307      	strge	r3, [sp, #28]
 8013bf2:	9307      	strlt	r3, [sp, #28]
 8013bf4:	bfb8      	it	lt
 8013bf6:	9204      	strlt	r2, [sp, #16]
 8013bf8:	7823      	ldrb	r3, [r4, #0]
 8013bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8013bfc:	d10c      	bne.n	8013c18 <_svfiprintf_r+0x130>
 8013bfe:	7863      	ldrb	r3, [r4, #1]
 8013c00:	2b2a      	cmp	r3, #42	; 0x2a
 8013c02:	d135      	bne.n	8013c70 <_svfiprintf_r+0x188>
 8013c04:	9b03      	ldr	r3, [sp, #12]
 8013c06:	1d1a      	adds	r2, r3, #4
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	9203      	str	r2, [sp, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	bfb8      	it	lt
 8013c10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013c14:	3402      	adds	r4, #2
 8013c16:	9305      	str	r3, [sp, #20]
 8013c18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013ce4 <_svfiprintf_r+0x1fc>
 8013c1c:	7821      	ldrb	r1, [r4, #0]
 8013c1e:	2203      	movs	r2, #3
 8013c20:	4650      	mov	r0, sl
 8013c22:	f7ec fb0d 	bl	8000240 <memchr>
 8013c26:	b140      	cbz	r0, 8013c3a <_svfiprintf_r+0x152>
 8013c28:	2340      	movs	r3, #64	; 0x40
 8013c2a:	eba0 000a 	sub.w	r0, r0, sl
 8013c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8013c32:	9b04      	ldr	r3, [sp, #16]
 8013c34:	4303      	orrs	r3, r0
 8013c36:	3401      	adds	r4, #1
 8013c38:	9304      	str	r3, [sp, #16]
 8013c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c3e:	4826      	ldr	r0, [pc, #152]	; (8013cd8 <_svfiprintf_r+0x1f0>)
 8013c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c44:	2206      	movs	r2, #6
 8013c46:	f7ec fafb 	bl	8000240 <memchr>
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d038      	beq.n	8013cc0 <_svfiprintf_r+0x1d8>
 8013c4e:	4b23      	ldr	r3, [pc, #140]	; (8013cdc <_svfiprintf_r+0x1f4>)
 8013c50:	bb1b      	cbnz	r3, 8013c9a <_svfiprintf_r+0x1b2>
 8013c52:	9b03      	ldr	r3, [sp, #12]
 8013c54:	3307      	adds	r3, #7
 8013c56:	f023 0307 	bic.w	r3, r3, #7
 8013c5a:	3308      	adds	r3, #8
 8013c5c:	9303      	str	r3, [sp, #12]
 8013c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c60:	4433      	add	r3, r6
 8013c62:	9309      	str	r3, [sp, #36]	; 0x24
 8013c64:	e767      	b.n	8013b36 <_svfiprintf_r+0x4e>
 8013c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c6a:	460c      	mov	r4, r1
 8013c6c:	2001      	movs	r0, #1
 8013c6e:	e7a5      	b.n	8013bbc <_svfiprintf_r+0xd4>
 8013c70:	2300      	movs	r3, #0
 8013c72:	3401      	adds	r4, #1
 8013c74:	9305      	str	r3, [sp, #20]
 8013c76:	4619      	mov	r1, r3
 8013c78:	f04f 0c0a 	mov.w	ip, #10
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c82:	3a30      	subs	r2, #48	; 0x30
 8013c84:	2a09      	cmp	r2, #9
 8013c86:	d903      	bls.n	8013c90 <_svfiprintf_r+0x1a8>
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d0c5      	beq.n	8013c18 <_svfiprintf_r+0x130>
 8013c8c:	9105      	str	r1, [sp, #20]
 8013c8e:	e7c3      	b.n	8013c18 <_svfiprintf_r+0x130>
 8013c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c94:	4604      	mov	r4, r0
 8013c96:	2301      	movs	r3, #1
 8013c98:	e7f0      	b.n	8013c7c <_svfiprintf_r+0x194>
 8013c9a:	ab03      	add	r3, sp, #12
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	462a      	mov	r2, r5
 8013ca0:	4b0f      	ldr	r3, [pc, #60]	; (8013ce0 <_svfiprintf_r+0x1f8>)
 8013ca2:	a904      	add	r1, sp, #16
 8013ca4:	4638      	mov	r0, r7
 8013ca6:	f3af 8000 	nop.w
 8013caa:	1c42      	adds	r2, r0, #1
 8013cac:	4606      	mov	r6, r0
 8013cae:	d1d6      	bne.n	8013c5e <_svfiprintf_r+0x176>
 8013cb0:	89ab      	ldrh	r3, [r5, #12]
 8013cb2:	065b      	lsls	r3, r3, #25
 8013cb4:	f53f af2c 	bmi.w	8013b10 <_svfiprintf_r+0x28>
 8013cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cba:	b01d      	add	sp, #116	; 0x74
 8013cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc0:	ab03      	add	r3, sp, #12
 8013cc2:	9300      	str	r3, [sp, #0]
 8013cc4:	462a      	mov	r2, r5
 8013cc6:	4b06      	ldr	r3, [pc, #24]	; (8013ce0 <_svfiprintf_r+0x1f8>)
 8013cc8:	a904      	add	r1, sp, #16
 8013cca:	4638      	mov	r0, r7
 8013ccc:	f000 f9d4 	bl	8014078 <_printf_i>
 8013cd0:	e7eb      	b.n	8013caa <_svfiprintf_r+0x1c2>
 8013cd2:	bf00      	nop
 8013cd4:	080154b8 	.word	0x080154b8
 8013cd8:	080154c2 	.word	0x080154c2
 8013cdc:	00000000 	.word	0x00000000
 8013ce0:	08013a33 	.word	0x08013a33
 8013ce4:	080154be 	.word	0x080154be

08013ce8 <__sfputc_r>:
 8013ce8:	6893      	ldr	r3, [r2, #8]
 8013cea:	3b01      	subs	r3, #1
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	b410      	push	{r4}
 8013cf0:	6093      	str	r3, [r2, #8]
 8013cf2:	da08      	bge.n	8013d06 <__sfputc_r+0x1e>
 8013cf4:	6994      	ldr	r4, [r2, #24]
 8013cf6:	42a3      	cmp	r3, r4
 8013cf8:	db01      	blt.n	8013cfe <__sfputc_r+0x16>
 8013cfa:	290a      	cmp	r1, #10
 8013cfc:	d103      	bne.n	8013d06 <__sfputc_r+0x1e>
 8013cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d02:	f000 bb23 	b.w	801434c <__swbuf_r>
 8013d06:	6813      	ldr	r3, [r2, #0]
 8013d08:	1c58      	adds	r0, r3, #1
 8013d0a:	6010      	str	r0, [r2, #0]
 8013d0c:	7019      	strb	r1, [r3, #0]
 8013d0e:	4608      	mov	r0, r1
 8013d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d14:	4770      	bx	lr

08013d16 <__sfputs_r>:
 8013d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d18:	4606      	mov	r6, r0
 8013d1a:	460f      	mov	r7, r1
 8013d1c:	4614      	mov	r4, r2
 8013d1e:	18d5      	adds	r5, r2, r3
 8013d20:	42ac      	cmp	r4, r5
 8013d22:	d101      	bne.n	8013d28 <__sfputs_r+0x12>
 8013d24:	2000      	movs	r0, #0
 8013d26:	e007      	b.n	8013d38 <__sfputs_r+0x22>
 8013d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d2c:	463a      	mov	r2, r7
 8013d2e:	4630      	mov	r0, r6
 8013d30:	f7ff ffda 	bl	8013ce8 <__sfputc_r>
 8013d34:	1c43      	adds	r3, r0, #1
 8013d36:	d1f3      	bne.n	8013d20 <__sfputs_r+0xa>
 8013d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d3c <_vfiprintf_r>:
 8013d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d40:	460d      	mov	r5, r1
 8013d42:	b09d      	sub	sp, #116	; 0x74
 8013d44:	4614      	mov	r4, r2
 8013d46:	4698      	mov	r8, r3
 8013d48:	4606      	mov	r6, r0
 8013d4a:	b118      	cbz	r0, 8013d54 <_vfiprintf_r+0x18>
 8013d4c:	6983      	ldr	r3, [r0, #24]
 8013d4e:	b90b      	cbnz	r3, 8013d54 <_vfiprintf_r+0x18>
 8013d50:	f7ff fd82 	bl	8013858 <__sinit>
 8013d54:	4b89      	ldr	r3, [pc, #548]	; (8013f7c <_vfiprintf_r+0x240>)
 8013d56:	429d      	cmp	r5, r3
 8013d58:	d11b      	bne.n	8013d92 <_vfiprintf_r+0x56>
 8013d5a:	6875      	ldr	r5, [r6, #4]
 8013d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d5e:	07d9      	lsls	r1, r3, #31
 8013d60:	d405      	bmi.n	8013d6e <_vfiprintf_r+0x32>
 8013d62:	89ab      	ldrh	r3, [r5, #12]
 8013d64:	059a      	lsls	r2, r3, #22
 8013d66:	d402      	bmi.n	8013d6e <_vfiprintf_r+0x32>
 8013d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d6a:	f7ff fe25 	bl	80139b8 <__retarget_lock_acquire_recursive>
 8013d6e:	89ab      	ldrh	r3, [r5, #12]
 8013d70:	071b      	lsls	r3, r3, #28
 8013d72:	d501      	bpl.n	8013d78 <_vfiprintf_r+0x3c>
 8013d74:	692b      	ldr	r3, [r5, #16]
 8013d76:	b9eb      	cbnz	r3, 8013db4 <_vfiprintf_r+0x78>
 8013d78:	4629      	mov	r1, r5
 8013d7a:	4630      	mov	r0, r6
 8013d7c:	f000 fb4a 	bl	8014414 <__swsetup_r>
 8013d80:	b1c0      	cbz	r0, 8013db4 <_vfiprintf_r+0x78>
 8013d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d84:	07dc      	lsls	r4, r3, #31
 8013d86:	d50e      	bpl.n	8013da6 <_vfiprintf_r+0x6a>
 8013d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d8c:	b01d      	add	sp, #116	; 0x74
 8013d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d92:	4b7b      	ldr	r3, [pc, #492]	; (8013f80 <_vfiprintf_r+0x244>)
 8013d94:	429d      	cmp	r5, r3
 8013d96:	d101      	bne.n	8013d9c <_vfiprintf_r+0x60>
 8013d98:	68b5      	ldr	r5, [r6, #8]
 8013d9a:	e7df      	b.n	8013d5c <_vfiprintf_r+0x20>
 8013d9c:	4b79      	ldr	r3, [pc, #484]	; (8013f84 <_vfiprintf_r+0x248>)
 8013d9e:	429d      	cmp	r5, r3
 8013da0:	bf08      	it	eq
 8013da2:	68f5      	ldreq	r5, [r6, #12]
 8013da4:	e7da      	b.n	8013d5c <_vfiprintf_r+0x20>
 8013da6:	89ab      	ldrh	r3, [r5, #12]
 8013da8:	0598      	lsls	r0, r3, #22
 8013daa:	d4ed      	bmi.n	8013d88 <_vfiprintf_r+0x4c>
 8013dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dae:	f7ff fe04 	bl	80139ba <__retarget_lock_release_recursive>
 8013db2:	e7e9      	b.n	8013d88 <_vfiprintf_r+0x4c>
 8013db4:	2300      	movs	r3, #0
 8013db6:	9309      	str	r3, [sp, #36]	; 0x24
 8013db8:	2320      	movs	r3, #32
 8013dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dc2:	2330      	movs	r3, #48	; 0x30
 8013dc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f88 <_vfiprintf_r+0x24c>
 8013dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013dcc:	f04f 0901 	mov.w	r9, #1
 8013dd0:	4623      	mov	r3, r4
 8013dd2:	469a      	mov	sl, r3
 8013dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dd8:	b10a      	cbz	r2, 8013dde <_vfiprintf_r+0xa2>
 8013dda:	2a25      	cmp	r2, #37	; 0x25
 8013ddc:	d1f9      	bne.n	8013dd2 <_vfiprintf_r+0x96>
 8013dde:	ebba 0b04 	subs.w	fp, sl, r4
 8013de2:	d00b      	beq.n	8013dfc <_vfiprintf_r+0xc0>
 8013de4:	465b      	mov	r3, fp
 8013de6:	4622      	mov	r2, r4
 8013de8:	4629      	mov	r1, r5
 8013dea:	4630      	mov	r0, r6
 8013dec:	f7ff ff93 	bl	8013d16 <__sfputs_r>
 8013df0:	3001      	adds	r0, #1
 8013df2:	f000 80aa 	beq.w	8013f4a <_vfiprintf_r+0x20e>
 8013df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013df8:	445a      	add	r2, fp
 8013dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8013dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f000 80a2 	beq.w	8013f4a <_vfiprintf_r+0x20e>
 8013e06:	2300      	movs	r3, #0
 8013e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e10:	f10a 0a01 	add.w	sl, sl, #1
 8013e14:	9304      	str	r3, [sp, #16]
 8013e16:	9307      	str	r3, [sp, #28]
 8013e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e1e:	4654      	mov	r4, sl
 8013e20:	2205      	movs	r2, #5
 8013e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e26:	4858      	ldr	r0, [pc, #352]	; (8013f88 <_vfiprintf_r+0x24c>)
 8013e28:	f7ec fa0a 	bl	8000240 <memchr>
 8013e2c:	9a04      	ldr	r2, [sp, #16]
 8013e2e:	b9d8      	cbnz	r0, 8013e68 <_vfiprintf_r+0x12c>
 8013e30:	06d1      	lsls	r1, r2, #27
 8013e32:	bf44      	itt	mi
 8013e34:	2320      	movmi	r3, #32
 8013e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e3a:	0713      	lsls	r3, r2, #28
 8013e3c:	bf44      	itt	mi
 8013e3e:	232b      	movmi	r3, #43	; 0x2b
 8013e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e44:	f89a 3000 	ldrb.w	r3, [sl]
 8013e48:	2b2a      	cmp	r3, #42	; 0x2a
 8013e4a:	d015      	beq.n	8013e78 <_vfiprintf_r+0x13c>
 8013e4c:	9a07      	ldr	r2, [sp, #28]
 8013e4e:	4654      	mov	r4, sl
 8013e50:	2000      	movs	r0, #0
 8013e52:	f04f 0c0a 	mov.w	ip, #10
 8013e56:	4621      	mov	r1, r4
 8013e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e5c:	3b30      	subs	r3, #48	; 0x30
 8013e5e:	2b09      	cmp	r3, #9
 8013e60:	d94e      	bls.n	8013f00 <_vfiprintf_r+0x1c4>
 8013e62:	b1b0      	cbz	r0, 8013e92 <_vfiprintf_r+0x156>
 8013e64:	9207      	str	r2, [sp, #28]
 8013e66:	e014      	b.n	8013e92 <_vfiprintf_r+0x156>
 8013e68:	eba0 0308 	sub.w	r3, r0, r8
 8013e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8013e70:	4313      	orrs	r3, r2
 8013e72:	9304      	str	r3, [sp, #16]
 8013e74:	46a2      	mov	sl, r4
 8013e76:	e7d2      	b.n	8013e1e <_vfiprintf_r+0xe2>
 8013e78:	9b03      	ldr	r3, [sp, #12]
 8013e7a:	1d19      	adds	r1, r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	9103      	str	r1, [sp, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	bfbb      	ittet	lt
 8013e84:	425b      	neglt	r3, r3
 8013e86:	f042 0202 	orrlt.w	r2, r2, #2
 8013e8a:	9307      	strge	r3, [sp, #28]
 8013e8c:	9307      	strlt	r3, [sp, #28]
 8013e8e:	bfb8      	it	lt
 8013e90:	9204      	strlt	r2, [sp, #16]
 8013e92:	7823      	ldrb	r3, [r4, #0]
 8013e94:	2b2e      	cmp	r3, #46	; 0x2e
 8013e96:	d10c      	bne.n	8013eb2 <_vfiprintf_r+0x176>
 8013e98:	7863      	ldrb	r3, [r4, #1]
 8013e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013e9c:	d135      	bne.n	8013f0a <_vfiprintf_r+0x1ce>
 8013e9e:	9b03      	ldr	r3, [sp, #12]
 8013ea0:	1d1a      	adds	r2, r3, #4
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	9203      	str	r2, [sp, #12]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	bfb8      	it	lt
 8013eaa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013eae:	3402      	adds	r4, #2
 8013eb0:	9305      	str	r3, [sp, #20]
 8013eb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f98 <_vfiprintf_r+0x25c>
 8013eb6:	7821      	ldrb	r1, [r4, #0]
 8013eb8:	2203      	movs	r2, #3
 8013eba:	4650      	mov	r0, sl
 8013ebc:	f7ec f9c0 	bl	8000240 <memchr>
 8013ec0:	b140      	cbz	r0, 8013ed4 <_vfiprintf_r+0x198>
 8013ec2:	2340      	movs	r3, #64	; 0x40
 8013ec4:	eba0 000a 	sub.w	r0, r0, sl
 8013ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8013ecc:	9b04      	ldr	r3, [sp, #16]
 8013ece:	4303      	orrs	r3, r0
 8013ed0:	3401      	adds	r4, #1
 8013ed2:	9304      	str	r3, [sp, #16]
 8013ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ed8:	482c      	ldr	r0, [pc, #176]	; (8013f8c <_vfiprintf_r+0x250>)
 8013eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ede:	2206      	movs	r2, #6
 8013ee0:	f7ec f9ae 	bl	8000240 <memchr>
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d03f      	beq.n	8013f68 <_vfiprintf_r+0x22c>
 8013ee8:	4b29      	ldr	r3, [pc, #164]	; (8013f90 <_vfiprintf_r+0x254>)
 8013eea:	bb1b      	cbnz	r3, 8013f34 <_vfiprintf_r+0x1f8>
 8013eec:	9b03      	ldr	r3, [sp, #12]
 8013eee:	3307      	adds	r3, #7
 8013ef0:	f023 0307 	bic.w	r3, r3, #7
 8013ef4:	3308      	adds	r3, #8
 8013ef6:	9303      	str	r3, [sp, #12]
 8013ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013efa:	443b      	add	r3, r7
 8013efc:	9309      	str	r3, [sp, #36]	; 0x24
 8013efe:	e767      	b.n	8013dd0 <_vfiprintf_r+0x94>
 8013f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f04:	460c      	mov	r4, r1
 8013f06:	2001      	movs	r0, #1
 8013f08:	e7a5      	b.n	8013e56 <_vfiprintf_r+0x11a>
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	3401      	adds	r4, #1
 8013f0e:	9305      	str	r3, [sp, #20]
 8013f10:	4619      	mov	r1, r3
 8013f12:	f04f 0c0a 	mov.w	ip, #10
 8013f16:	4620      	mov	r0, r4
 8013f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f1c:	3a30      	subs	r2, #48	; 0x30
 8013f1e:	2a09      	cmp	r2, #9
 8013f20:	d903      	bls.n	8013f2a <_vfiprintf_r+0x1ee>
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d0c5      	beq.n	8013eb2 <_vfiprintf_r+0x176>
 8013f26:	9105      	str	r1, [sp, #20]
 8013f28:	e7c3      	b.n	8013eb2 <_vfiprintf_r+0x176>
 8013f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f2e:	4604      	mov	r4, r0
 8013f30:	2301      	movs	r3, #1
 8013f32:	e7f0      	b.n	8013f16 <_vfiprintf_r+0x1da>
 8013f34:	ab03      	add	r3, sp, #12
 8013f36:	9300      	str	r3, [sp, #0]
 8013f38:	462a      	mov	r2, r5
 8013f3a:	4b16      	ldr	r3, [pc, #88]	; (8013f94 <_vfiprintf_r+0x258>)
 8013f3c:	a904      	add	r1, sp, #16
 8013f3e:	4630      	mov	r0, r6
 8013f40:	f3af 8000 	nop.w
 8013f44:	4607      	mov	r7, r0
 8013f46:	1c78      	adds	r0, r7, #1
 8013f48:	d1d6      	bne.n	8013ef8 <_vfiprintf_r+0x1bc>
 8013f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f4c:	07d9      	lsls	r1, r3, #31
 8013f4e:	d405      	bmi.n	8013f5c <_vfiprintf_r+0x220>
 8013f50:	89ab      	ldrh	r3, [r5, #12]
 8013f52:	059a      	lsls	r2, r3, #22
 8013f54:	d402      	bmi.n	8013f5c <_vfiprintf_r+0x220>
 8013f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f58:	f7ff fd2f 	bl	80139ba <__retarget_lock_release_recursive>
 8013f5c:	89ab      	ldrh	r3, [r5, #12]
 8013f5e:	065b      	lsls	r3, r3, #25
 8013f60:	f53f af12 	bmi.w	8013d88 <_vfiprintf_r+0x4c>
 8013f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f66:	e711      	b.n	8013d8c <_vfiprintf_r+0x50>
 8013f68:	ab03      	add	r3, sp, #12
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	462a      	mov	r2, r5
 8013f6e:	4b09      	ldr	r3, [pc, #36]	; (8013f94 <_vfiprintf_r+0x258>)
 8013f70:	a904      	add	r1, sp, #16
 8013f72:	4630      	mov	r0, r6
 8013f74:	f000 f880 	bl	8014078 <_printf_i>
 8013f78:	e7e4      	b.n	8013f44 <_vfiprintf_r+0x208>
 8013f7a:	bf00      	nop
 8013f7c:	08015478 	.word	0x08015478
 8013f80:	08015498 	.word	0x08015498
 8013f84:	08015458 	.word	0x08015458
 8013f88:	080154b8 	.word	0x080154b8
 8013f8c:	080154c2 	.word	0x080154c2
 8013f90:	00000000 	.word	0x00000000
 8013f94:	08013d17 	.word	0x08013d17
 8013f98:	080154be 	.word	0x080154be

08013f9c <_printf_common>:
 8013f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa0:	4616      	mov	r6, r2
 8013fa2:	4699      	mov	r9, r3
 8013fa4:	688a      	ldr	r2, [r1, #8]
 8013fa6:	690b      	ldr	r3, [r1, #16]
 8013fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013fac:	4293      	cmp	r3, r2
 8013fae:	bfb8      	it	lt
 8013fb0:	4613      	movlt	r3, r2
 8013fb2:	6033      	str	r3, [r6, #0]
 8013fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013fb8:	4607      	mov	r7, r0
 8013fba:	460c      	mov	r4, r1
 8013fbc:	b10a      	cbz	r2, 8013fc2 <_printf_common+0x26>
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	6033      	str	r3, [r6, #0]
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	0699      	lsls	r1, r3, #26
 8013fc6:	bf42      	ittt	mi
 8013fc8:	6833      	ldrmi	r3, [r6, #0]
 8013fca:	3302      	addmi	r3, #2
 8013fcc:	6033      	strmi	r3, [r6, #0]
 8013fce:	6825      	ldr	r5, [r4, #0]
 8013fd0:	f015 0506 	ands.w	r5, r5, #6
 8013fd4:	d106      	bne.n	8013fe4 <_printf_common+0x48>
 8013fd6:	f104 0a19 	add.w	sl, r4, #25
 8013fda:	68e3      	ldr	r3, [r4, #12]
 8013fdc:	6832      	ldr	r2, [r6, #0]
 8013fde:	1a9b      	subs	r3, r3, r2
 8013fe0:	42ab      	cmp	r3, r5
 8013fe2:	dc26      	bgt.n	8014032 <_printf_common+0x96>
 8013fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013fe8:	1e13      	subs	r3, r2, #0
 8013fea:	6822      	ldr	r2, [r4, #0]
 8013fec:	bf18      	it	ne
 8013fee:	2301      	movne	r3, #1
 8013ff0:	0692      	lsls	r2, r2, #26
 8013ff2:	d42b      	bmi.n	801404c <_printf_common+0xb0>
 8013ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ff8:	4649      	mov	r1, r9
 8013ffa:	4638      	mov	r0, r7
 8013ffc:	47c0      	blx	r8
 8013ffe:	3001      	adds	r0, #1
 8014000:	d01e      	beq.n	8014040 <_printf_common+0xa4>
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	68e5      	ldr	r5, [r4, #12]
 8014006:	6832      	ldr	r2, [r6, #0]
 8014008:	f003 0306 	and.w	r3, r3, #6
 801400c:	2b04      	cmp	r3, #4
 801400e:	bf08      	it	eq
 8014010:	1aad      	subeq	r5, r5, r2
 8014012:	68a3      	ldr	r3, [r4, #8]
 8014014:	6922      	ldr	r2, [r4, #16]
 8014016:	bf0c      	ite	eq
 8014018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801401c:	2500      	movne	r5, #0
 801401e:	4293      	cmp	r3, r2
 8014020:	bfc4      	itt	gt
 8014022:	1a9b      	subgt	r3, r3, r2
 8014024:	18ed      	addgt	r5, r5, r3
 8014026:	2600      	movs	r6, #0
 8014028:	341a      	adds	r4, #26
 801402a:	42b5      	cmp	r5, r6
 801402c:	d11a      	bne.n	8014064 <_printf_common+0xc8>
 801402e:	2000      	movs	r0, #0
 8014030:	e008      	b.n	8014044 <_printf_common+0xa8>
 8014032:	2301      	movs	r3, #1
 8014034:	4652      	mov	r2, sl
 8014036:	4649      	mov	r1, r9
 8014038:	4638      	mov	r0, r7
 801403a:	47c0      	blx	r8
 801403c:	3001      	adds	r0, #1
 801403e:	d103      	bne.n	8014048 <_printf_common+0xac>
 8014040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014048:	3501      	adds	r5, #1
 801404a:	e7c6      	b.n	8013fda <_printf_common+0x3e>
 801404c:	18e1      	adds	r1, r4, r3
 801404e:	1c5a      	adds	r2, r3, #1
 8014050:	2030      	movs	r0, #48	; 0x30
 8014052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014056:	4422      	add	r2, r4
 8014058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801405c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014060:	3302      	adds	r3, #2
 8014062:	e7c7      	b.n	8013ff4 <_printf_common+0x58>
 8014064:	2301      	movs	r3, #1
 8014066:	4622      	mov	r2, r4
 8014068:	4649      	mov	r1, r9
 801406a:	4638      	mov	r0, r7
 801406c:	47c0      	blx	r8
 801406e:	3001      	adds	r0, #1
 8014070:	d0e6      	beq.n	8014040 <_printf_common+0xa4>
 8014072:	3601      	adds	r6, #1
 8014074:	e7d9      	b.n	801402a <_printf_common+0x8e>
	...

08014078 <_printf_i>:
 8014078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801407c:	7e0f      	ldrb	r7, [r1, #24]
 801407e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014080:	2f78      	cmp	r7, #120	; 0x78
 8014082:	4691      	mov	r9, r2
 8014084:	4680      	mov	r8, r0
 8014086:	460c      	mov	r4, r1
 8014088:	469a      	mov	sl, r3
 801408a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801408e:	d807      	bhi.n	80140a0 <_printf_i+0x28>
 8014090:	2f62      	cmp	r7, #98	; 0x62
 8014092:	d80a      	bhi.n	80140aa <_printf_i+0x32>
 8014094:	2f00      	cmp	r7, #0
 8014096:	f000 80d8 	beq.w	801424a <_printf_i+0x1d2>
 801409a:	2f58      	cmp	r7, #88	; 0x58
 801409c:	f000 80a3 	beq.w	80141e6 <_printf_i+0x16e>
 80140a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80140a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80140a8:	e03a      	b.n	8014120 <_printf_i+0xa8>
 80140aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80140ae:	2b15      	cmp	r3, #21
 80140b0:	d8f6      	bhi.n	80140a0 <_printf_i+0x28>
 80140b2:	a101      	add	r1, pc, #4	; (adr r1, 80140b8 <_printf_i+0x40>)
 80140b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80140b8:	08014111 	.word	0x08014111
 80140bc:	08014125 	.word	0x08014125
 80140c0:	080140a1 	.word	0x080140a1
 80140c4:	080140a1 	.word	0x080140a1
 80140c8:	080140a1 	.word	0x080140a1
 80140cc:	080140a1 	.word	0x080140a1
 80140d0:	08014125 	.word	0x08014125
 80140d4:	080140a1 	.word	0x080140a1
 80140d8:	080140a1 	.word	0x080140a1
 80140dc:	080140a1 	.word	0x080140a1
 80140e0:	080140a1 	.word	0x080140a1
 80140e4:	08014231 	.word	0x08014231
 80140e8:	08014155 	.word	0x08014155
 80140ec:	08014213 	.word	0x08014213
 80140f0:	080140a1 	.word	0x080140a1
 80140f4:	080140a1 	.word	0x080140a1
 80140f8:	08014253 	.word	0x08014253
 80140fc:	080140a1 	.word	0x080140a1
 8014100:	08014155 	.word	0x08014155
 8014104:	080140a1 	.word	0x080140a1
 8014108:	080140a1 	.word	0x080140a1
 801410c:	0801421b 	.word	0x0801421b
 8014110:	682b      	ldr	r3, [r5, #0]
 8014112:	1d1a      	adds	r2, r3, #4
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	602a      	str	r2, [r5, #0]
 8014118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801411c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014120:	2301      	movs	r3, #1
 8014122:	e0a3      	b.n	801426c <_printf_i+0x1f4>
 8014124:	6820      	ldr	r0, [r4, #0]
 8014126:	6829      	ldr	r1, [r5, #0]
 8014128:	0606      	lsls	r6, r0, #24
 801412a:	f101 0304 	add.w	r3, r1, #4
 801412e:	d50a      	bpl.n	8014146 <_printf_i+0xce>
 8014130:	680e      	ldr	r6, [r1, #0]
 8014132:	602b      	str	r3, [r5, #0]
 8014134:	2e00      	cmp	r6, #0
 8014136:	da03      	bge.n	8014140 <_printf_i+0xc8>
 8014138:	232d      	movs	r3, #45	; 0x2d
 801413a:	4276      	negs	r6, r6
 801413c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014140:	485e      	ldr	r0, [pc, #376]	; (80142bc <_printf_i+0x244>)
 8014142:	230a      	movs	r3, #10
 8014144:	e019      	b.n	801417a <_printf_i+0x102>
 8014146:	680e      	ldr	r6, [r1, #0]
 8014148:	602b      	str	r3, [r5, #0]
 801414a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801414e:	bf18      	it	ne
 8014150:	b236      	sxthne	r6, r6
 8014152:	e7ef      	b.n	8014134 <_printf_i+0xbc>
 8014154:	682b      	ldr	r3, [r5, #0]
 8014156:	6820      	ldr	r0, [r4, #0]
 8014158:	1d19      	adds	r1, r3, #4
 801415a:	6029      	str	r1, [r5, #0]
 801415c:	0601      	lsls	r1, r0, #24
 801415e:	d501      	bpl.n	8014164 <_printf_i+0xec>
 8014160:	681e      	ldr	r6, [r3, #0]
 8014162:	e002      	b.n	801416a <_printf_i+0xf2>
 8014164:	0646      	lsls	r6, r0, #25
 8014166:	d5fb      	bpl.n	8014160 <_printf_i+0xe8>
 8014168:	881e      	ldrh	r6, [r3, #0]
 801416a:	4854      	ldr	r0, [pc, #336]	; (80142bc <_printf_i+0x244>)
 801416c:	2f6f      	cmp	r7, #111	; 0x6f
 801416e:	bf0c      	ite	eq
 8014170:	2308      	moveq	r3, #8
 8014172:	230a      	movne	r3, #10
 8014174:	2100      	movs	r1, #0
 8014176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801417a:	6865      	ldr	r5, [r4, #4]
 801417c:	60a5      	str	r5, [r4, #8]
 801417e:	2d00      	cmp	r5, #0
 8014180:	bfa2      	ittt	ge
 8014182:	6821      	ldrge	r1, [r4, #0]
 8014184:	f021 0104 	bicge.w	r1, r1, #4
 8014188:	6021      	strge	r1, [r4, #0]
 801418a:	b90e      	cbnz	r6, 8014190 <_printf_i+0x118>
 801418c:	2d00      	cmp	r5, #0
 801418e:	d04d      	beq.n	801422c <_printf_i+0x1b4>
 8014190:	4615      	mov	r5, r2
 8014192:	fbb6 f1f3 	udiv	r1, r6, r3
 8014196:	fb03 6711 	mls	r7, r3, r1, r6
 801419a:	5dc7      	ldrb	r7, [r0, r7]
 801419c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80141a0:	4637      	mov	r7, r6
 80141a2:	42bb      	cmp	r3, r7
 80141a4:	460e      	mov	r6, r1
 80141a6:	d9f4      	bls.n	8014192 <_printf_i+0x11a>
 80141a8:	2b08      	cmp	r3, #8
 80141aa:	d10b      	bne.n	80141c4 <_printf_i+0x14c>
 80141ac:	6823      	ldr	r3, [r4, #0]
 80141ae:	07de      	lsls	r6, r3, #31
 80141b0:	d508      	bpl.n	80141c4 <_printf_i+0x14c>
 80141b2:	6923      	ldr	r3, [r4, #16]
 80141b4:	6861      	ldr	r1, [r4, #4]
 80141b6:	4299      	cmp	r1, r3
 80141b8:	bfde      	ittt	le
 80141ba:	2330      	movle	r3, #48	; 0x30
 80141bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80141c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80141c4:	1b52      	subs	r2, r2, r5
 80141c6:	6122      	str	r2, [r4, #16]
 80141c8:	f8cd a000 	str.w	sl, [sp]
 80141cc:	464b      	mov	r3, r9
 80141ce:	aa03      	add	r2, sp, #12
 80141d0:	4621      	mov	r1, r4
 80141d2:	4640      	mov	r0, r8
 80141d4:	f7ff fee2 	bl	8013f9c <_printf_common>
 80141d8:	3001      	adds	r0, #1
 80141da:	d14c      	bne.n	8014276 <_printf_i+0x1fe>
 80141dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141e0:	b004      	add	sp, #16
 80141e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141e6:	4835      	ldr	r0, [pc, #212]	; (80142bc <_printf_i+0x244>)
 80141e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80141ec:	6829      	ldr	r1, [r5, #0]
 80141ee:	6823      	ldr	r3, [r4, #0]
 80141f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80141f4:	6029      	str	r1, [r5, #0]
 80141f6:	061d      	lsls	r5, r3, #24
 80141f8:	d514      	bpl.n	8014224 <_printf_i+0x1ac>
 80141fa:	07df      	lsls	r7, r3, #31
 80141fc:	bf44      	itt	mi
 80141fe:	f043 0320 	orrmi.w	r3, r3, #32
 8014202:	6023      	strmi	r3, [r4, #0]
 8014204:	b91e      	cbnz	r6, 801420e <_printf_i+0x196>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	f023 0320 	bic.w	r3, r3, #32
 801420c:	6023      	str	r3, [r4, #0]
 801420e:	2310      	movs	r3, #16
 8014210:	e7b0      	b.n	8014174 <_printf_i+0xfc>
 8014212:	6823      	ldr	r3, [r4, #0]
 8014214:	f043 0320 	orr.w	r3, r3, #32
 8014218:	6023      	str	r3, [r4, #0]
 801421a:	2378      	movs	r3, #120	; 0x78
 801421c:	4828      	ldr	r0, [pc, #160]	; (80142c0 <_printf_i+0x248>)
 801421e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014222:	e7e3      	b.n	80141ec <_printf_i+0x174>
 8014224:	0659      	lsls	r1, r3, #25
 8014226:	bf48      	it	mi
 8014228:	b2b6      	uxthmi	r6, r6
 801422a:	e7e6      	b.n	80141fa <_printf_i+0x182>
 801422c:	4615      	mov	r5, r2
 801422e:	e7bb      	b.n	80141a8 <_printf_i+0x130>
 8014230:	682b      	ldr	r3, [r5, #0]
 8014232:	6826      	ldr	r6, [r4, #0]
 8014234:	6961      	ldr	r1, [r4, #20]
 8014236:	1d18      	adds	r0, r3, #4
 8014238:	6028      	str	r0, [r5, #0]
 801423a:	0635      	lsls	r5, r6, #24
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	d501      	bpl.n	8014244 <_printf_i+0x1cc>
 8014240:	6019      	str	r1, [r3, #0]
 8014242:	e002      	b.n	801424a <_printf_i+0x1d2>
 8014244:	0670      	lsls	r0, r6, #25
 8014246:	d5fb      	bpl.n	8014240 <_printf_i+0x1c8>
 8014248:	8019      	strh	r1, [r3, #0]
 801424a:	2300      	movs	r3, #0
 801424c:	6123      	str	r3, [r4, #16]
 801424e:	4615      	mov	r5, r2
 8014250:	e7ba      	b.n	80141c8 <_printf_i+0x150>
 8014252:	682b      	ldr	r3, [r5, #0]
 8014254:	1d1a      	adds	r2, r3, #4
 8014256:	602a      	str	r2, [r5, #0]
 8014258:	681d      	ldr	r5, [r3, #0]
 801425a:	6862      	ldr	r2, [r4, #4]
 801425c:	2100      	movs	r1, #0
 801425e:	4628      	mov	r0, r5
 8014260:	f7eb ffee 	bl	8000240 <memchr>
 8014264:	b108      	cbz	r0, 801426a <_printf_i+0x1f2>
 8014266:	1b40      	subs	r0, r0, r5
 8014268:	6060      	str	r0, [r4, #4]
 801426a:	6863      	ldr	r3, [r4, #4]
 801426c:	6123      	str	r3, [r4, #16]
 801426e:	2300      	movs	r3, #0
 8014270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014274:	e7a8      	b.n	80141c8 <_printf_i+0x150>
 8014276:	6923      	ldr	r3, [r4, #16]
 8014278:	462a      	mov	r2, r5
 801427a:	4649      	mov	r1, r9
 801427c:	4640      	mov	r0, r8
 801427e:	47d0      	blx	sl
 8014280:	3001      	adds	r0, #1
 8014282:	d0ab      	beq.n	80141dc <_printf_i+0x164>
 8014284:	6823      	ldr	r3, [r4, #0]
 8014286:	079b      	lsls	r3, r3, #30
 8014288:	d413      	bmi.n	80142b2 <_printf_i+0x23a>
 801428a:	68e0      	ldr	r0, [r4, #12]
 801428c:	9b03      	ldr	r3, [sp, #12]
 801428e:	4298      	cmp	r0, r3
 8014290:	bfb8      	it	lt
 8014292:	4618      	movlt	r0, r3
 8014294:	e7a4      	b.n	80141e0 <_printf_i+0x168>
 8014296:	2301      	movs	r3, #1
 8014298:	4632      	mov	r2, r6
 801429a:	4649      	mov	r1, r9
 801429c:	4640      	mov	r0, r8
 801429e:	47d0      	blx	sl
 80142a0:	3001      	adds	r0, #1
 80142a2:	d09b      	beq.n	80141dc <_printf_i+0x164>
 80142a4:	3501      	adds	r5, #1
 80142a6:	68e3      	ldr	r3, [r4, #12]
 80142a8:	9903      	ldr	r1, [sp, #12]
 80142aa:	1a5b      	subs	r3, r3, r1
 80142ac:	42ab      	cmp	r3, r5
 80142ae:	dcf2      	bgt.n	8014296 <_printf_i+0x21e>
 80142b0:	e7eb      	b.n	801428a <_printf_i+0x212>
 80142b2:	2500      	movs	r5, #0
 80142b4:	f104 0619 	add.w	r6, r4, #25
 80142b8:	e7f5      	b.n	80142a6 <_printf_i+0x22e>
 80142ba:	bf00      	nop
 80142bc:	080154c9 	.word	0x080154c9
 80142c0:	080154da 	.word	0x080154da

080142c4 <__sread>:
 80142c4:	b510      	push	{r4, lr}
 80142c6:	460c      	mov	r4, r1
 80142c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142cc:	f000 fa6a 	bl	80147a4 <_read_r>
 80142d0:	2800      	cmp	r0, #0
 80142d2:	bfab      	itete	ge
 80142d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142d6:	89a3      	ldrhlt	r3, [r4, #12]
 80142d8:	181b      	addge	r3, r3, r0
 80142da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80142de:	bfac      	ite	ge
 80142e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80142e2:	81a3      	strhlt	r3, [r4, #12]
 80142e4:	bd10      	pop	{r4, pc}

080142e6 <__swrite>:
 80142e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ea:	461f      	mov	r7, r3
 80142ec:	898b      	ldrh	r3, [r1, #12]
 80142ee:	05db      	lsls	r3, r3, #23
 80142f0:	4605      	mov	r5, r0
 80142f2:	460c      	mov	r4, r1
 80142f4:	4616      	mov	r6, r2
 80142f6:	d505      	bpl.n	8014304 <__swrite+0x1e>
 80142f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142fc:	2302      	movs	r3, #2
 80142fe:	2200      	movs	r2, #0
 8014300:	f000 f9d0 	bl	80146a4 <_lseek_r>
 8014304:	89a3      	ldrh	r3, [r4, #12]
 8014306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801430a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801430e:	81a3      	strh	r3, [r4, #12]
 8014310:	4632      	mov	r2, r6
 8014312:	463b      	mov	r3, r7
 8014314:	4628      	mov	r0, r5
 8014316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801431a:	f000 b869 	b.w	80143f0 <_write_r>

0801431e <__sseek>:
 801431e:	b510      	push	{r4, lr}
 8014320:	460c      	mov	r4, r1
 8014322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014326:	f000 f9bd 	bl	80146a4 <_lseek_r>
 801432a:	1c43      	adds	r3, r0, #1
 801432c:	89a3      	ldrh	r3, [r4, #12]
 801432e:	bf15      	itete	ne
 8014330:	6560      	strne	r0, [r4, #84]	; 0x54
 8014332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801433a:	81a3      	strheq	r3, [r4, #12]
 801433c:	bf18      	it	ne
 801433e:	81a3      	strhne	r3, [r4, #12]
 8014340:	bd10      	pop	{r4, pc}

08014342 <__sclose>:
 8014342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014346:	f000 b8db 	b.w	8014500 <_close_r>
	...

0801434c <__swbuf_r>:
 801434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801434e:	460e      	mov	r6, r1
 8014350:	4614      	mov	r4, r2
 8014352:	4605      	mov	r5, r0
 8014354:	b118      	cbz	r0, 801435e <__swbuf_r+0x12>
 8014356:	6983      	ldr	r3, [r0, #24]
 8014358:	b90b      	cbnz	r3, 801435e <__swbuf_r+0x12>
 801435a:	f7ff fa7d 	bl	8013858 <__sinit>
 801435e:	4b21      	ldr	r3, [pc, #132]	; (80143e4 <__swbuf_r+0x98>)
 8014360:	429c      	cmp	r4, r3
 8014362:	d12b      	bne.n	80143bc <__swbuf_r+0x70>
 8014364:	686c      	ldr	r4, [r5, #4]
 8014366:	69a3      	ldr	r3, [r4, #24]
 8014368:	60a3      	str	r3, [r4, #8]
 801436a:	89a3      	ldrh	r3, [r4, #12]
 801436c:	071a      	lsls	r2, r3, #28
 801436e:	d52f      	bpl.n	80143d0 <__swbuf_r+0x84>
 8014370:	6923      	ldr	r3, [r4, #16]
 8014372:	b36b      	cbz	r3, 80143d0 <__swbuf_r+0x84>
 8014374:	6923      	ldr	r3, [r4, #16]
 8014376:	6820      	ldr	r0, [r4, #0]
 8014378:	1ac0      	subs	r0, r0, r3
 801437a:	6963      	ldr	r3, [r4, #20]
 801437c:	b2f6      	uxtb	r6, r6
 801437e:	4283      	cmp	r3, r0
 8014380:	4637      	mov	r7, r6
 8014382:	dc04      	bgt.n	801438e <__swbuf_r+0x42>
 8014384:	4621      	mov	r1, r4
 8014386:	4628      	mov	r0, r5
 8014388:	f000 f950 	bl	801462c <_fflush_r>
 801438c:	bb30      	cbnz	r0, 80143dc <__swbuf_r+0x90>
 801438e:	68a3      	ldr	r3, [r4, #8]
 8014390:	3b01      	subs	r3, #1
 8014392:	60a3      	str	r3, [r4, #8]
 8014394:	6823      	ldr	r3, [r4, #0]
 8014396:	1c5a      	adds	r2, r3, #1
 8014398:	6022      	str	r2, [r4, #0]
 801439a:	701e      	strb	r6, [r3, #0]
 801439c:	6963      	ldr	r3, [r4, #20]
 801439e:	3001      	adds	r0, #1
 80143a0:	4283      	cmp	r3, r0
 80143a2:	d004      	beq.n	80143ae <__swbuf_r+0x62>
 80143a4:	89a3      	ldrh	r3, [r4, #12]
 80143a6:	07db      	lsls	r3, r3, #31
 80143a8:	d506      	bpl.n	80143b8 <__swbuf_r+0x6c>
 80143aa:	2e0a      	cmp	r6, #10
 80143ac:	d104      	bne.n	80143b8 <__swbuf_r+0x6c>
 80143ae:	4621      	mov	r1, r4
 80143b0:	4628      	mov	r0, r5
 80143b2:	f000 f93b 	bl	801462c <_fflush_r>
 80143b6:	b988      	cbnz	r0, 80143dc <__swbuf_r+0x90>
 80143b8:	4638      	mov	r0, r7
 80143ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143bc:	4b0a      	ldr	r3, [pc, #40]	; (80143e8 <__swbuf_r+0x9c>)
 80143be:	429c      	cmp	r4, r3
 80143c0:	d101      	bne.n	80143c6 <__swbuf_r+0x7a>
 80143c2:	68ac      	ldr	r4, [r5, #8]
 80143c4:	e7cf      	b.n	8014366 <__swbuf_r+0x1a>
 80143c6:	4b09      	ldr	r3, [pc, #36]	; (80143ec <__swbuf_r+0xa0>)
 80143c8:	429c      	cmp	r4, r3
 80143ca:	bf08      	it	eq
 80143cc:	68ec      	ldreq	r4, [r5, #12]
 80143ce:	e7ca      	b.n	8014366 <__swbuf_r+0x1a>
 80143d0:	4621      	mov	r1, r4
 80143d2:	4628      	mov	r0, r5
 80143d4:	f000 f81e 	bl	8014414 <__swsetup_r>
 80143d8:	2800      	cmp	r0, #0
 80143da:	d0cb      	beq.n	8014374 <__swbuf_r+0x28>
 80143dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80143e0:	e7ea      	b.n	80143b8 <__swbuf_r+0x6c>
 80143e2:	bf00      	nop
 80143e4:	08015478 	.word	0x08015478
 80143e8:	08015498 	.word	0x08015498
 80143ec:	08015458 	.word	0x08015458

080143f0 <_write_r>:
 80143f0:	b538      	push	{r3, r4, r5, lr}
 80143f2:	4d07      	ldr	r5, [pc, #28]	; (8014410 <_write_r+0x20>)
 80143f4:	4604      	mov	r4, r0
 80143f6:	4608      	mov	r0, r1
 80143f8:	4611      	mov	r1, r2
 80143fa:	2200      	movs	r2, #0
 80143fc:	602a      	str	r2, [r5, #0]
 80143fe:	461a      	mov	r2, r3
 8014400:	f7ed fa81 	bl	8001906 <_write>
 8014404:	1c43      	adds	r3, r0, #1
 8014406:	d102      	bne.n	801440e <_write_r+0x1e>
 8014408:	682b      	ldr	r3, [r5, #0]
 801440a:	b103      	cbz	r3, 801440e <_write_r+0x1e>
 801440c:	6023      	str	r3, [r4, #0]
 801440e:	bd38      	pop	{r3, r4, r5, pc}
 8014410:	2000c234 	.word	0x2000c234

08014414 <__swsetup_r>:
 8014414:	4b32      	ldr	r3, [pc, #200]	; (80144e0 <__swsetup_r+0xcc>)
 8014416:	b570      	push	{r4, r5, r6, lr}
 8014418:	681d      	ldr	r5, [r3, #0]
 801441a:	4606      	mov	r6, r0
 801441c:	460c      	mov	r4, r1
 801441e:	b125      	cbz	r5, 801442a <__swsetup_r+0x16>
 8014420:	69ab      	ldr	r3, [r5, #24]
 8014422:	b913      	cbnz	r3, 801442a <__swsetup_r+0x16>
 8014424:	4628      	mov	r0, r5
 8014426:	f7ff fa17 	bl	8013858 <__sinit>
 801442a:	4b2e      	ldr	r3, [pc, #184]	; (80144e4 <__swsetup_r+0xd0>)
 801442c:	429c      	cmp	r4, r3
 801442e:	d10f      	bne.n	8014450 <__swsetup_r+0x3c>
 8014430:	686c      	ldr	r4, [r5, #4]
 8014432:	89a3      	ldrh	r3, [r4, #12]
 8014434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014438:	0719      	lsls	r1, r3, #28
 801443a:	d42c      	bmi.n	8014496 <__swsetup_r+0x82>
 801443c:	06dd      	lsls	r5, r3, #27
 801443e:	d411      	bmi.n	8014464 <__swsetup_r+0x50>
 8014440:	2309      	movs	r3, #9
 8014442:	6033      	str	r3, [r6, #0]
 8014444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014448:	81a3      	strh	r3, [r4, #12]
 801444a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801444e:	e03e      	b.n	80144ce <__swsetup_r+0xba>
 8014450:	4b25      	ldr	r3, [pc, #148]	; (80144e8 <__swsetup_r+0xd4>)
 8014452:	429c      	cmp	r4, r3
 8014454:	d101      	bne.n	801445a <__swsetup_r+0x46>
 8014456:	68ac      	ldr	r4, [r5, #8]
 8014458:	e7eb      	b.n	8014432 <__swsetup_r+0x1e>
 801445a:	4b24      	ldr	r3, [pc, #144]	; (80144ec <__swsetup_r+0xd8>)
 801445c:	429c      	cmp	r4, r3
 801445e:	bf08      	it	eq
 8014460:	68ec      	ldreq	r4, [r5, #12]
 8014462:	e7e6      	b.n	8014432 <__swsetup_r+0x1e>
 8014464:	0758      	lsls	r0, r3, #29
 8014466:	d512      	bpl.n	801448e <__swsetup_r+0x7a>
 8014468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801446a:	b141      	cbz	r1, 801447e <__swsetup_r+0x6a>
 801446c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014470:	4299      	cmp	r1, r3
 8014472:	d002      	beq.n	801447a <__swsetup_r+0x66>
 8014474:	4630      	mov	r0, r6
 8014476:	f7fe fec7 	bl	8013208 <_free_r>
 801447a:	2300      	movs	r3, #0
 801447c:	6363      	str	r3, [r4, #52]	; 0x34
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014484:	81a3      	strh	r3, [r4, #12]
 8014486:	2300      	movs	r3, #0
 8014488:	6063      	str	r3, [r4, #4]
 801448a:	6923      	ldr	r3, [r4, #16]
 801448c:	6023      	str	r3, [r4, #0]
 801448e:	89a3      	ldrh	r3, [r4, #12]
 8014490:	f043 0308 	orr.w	r3, r3, #8
 8014494:	81a3      	strh	r3, [r4, #12]
 8014496:	6923      	ldr	r3, [r4, #16]
 8014498:	b94b      	cbnz	r3, 80144ae <__swsetup_r+0x9a>
 801449a:	89a3      	ldrh	r3, [r4, #12]
 801449c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144a4:	d003      	beq.n	80144ae <__swsetup_r+0x9a>
 80144a6:	4621      	mov	r1, r4
 80144a8:	4630      	mov	r0, r6
 80144aa:	f000 f933 	bl	8014714 <__smakebuf_r>
 80144ae:	89a0      	ldrh	r0, [r4, #12]
 80144b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80144b4:	f010 0301 	ands.w	r3, r0, #1
 80144b8:	d00a      	beq.n	80144d0 <__swsetup_r+0xbc>
 80144ba:	2300      	movs	r3, #0
 80144bc:	60a3      	str	r3, [r4, #8]
 80144be:	6963      	ldr	r3, [r4, #20]
 80144c0:	425b      	negs	r3, r3
 80144c2:	61a3      	str	r3, [r4, #24]
 80144c4:	6923      	ldr	r3, [r4, #16]
 80144c6:	b943      	cbnz	r3, 80144da <__swsetup_r+0xc6>
 80144c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80144cc:	d1ba      	bne.n	8014444 <__swsetup_r+0x30>
 80144ce:	bd70      	pop	{r4, r5, r6, pc}
 80144d0:	0781      	lsls	r1, r0, #30
 80144d2:	bf58      	it	pl
 80144d4:	6963      	ldrpl	r3, [r4, #20]
 80144d6:	60a3      	str	r3, [r4, #8]
 80144d8:	e7f4      	b.n	80144c4 <__swsetup_r+0xb0>
 80144da:	2000      	movs	r0, #0
 80144dc:	e7f7      	b.n	80144ce <__swsetup_r+0xba>
 80144de:	bf00      	nop
 80144e0:	200000b0 	.word	0x200000b0
 80144e4:	08015478 	.word	0x08015478
 80144e8:	08015498 	.word	0x08015498
 80144ec:	08015458 	.word	0x08015458

080144f0 <abort>:
 80144f0:	b508      	push	{r3, lr}
 80144f2:	2006      	movs	r0, #6
 80144f4:	f000 f990 	bl	8014818 <raise>
 80144f8:	2001      	movs	r0, #1
 80144fa:	f7ed f9dd 	bl	80018b8 <_exit>
	...

08014500 <_close_r>:
 8014500:	b538      	push	{r3, r4, r5, lr}
 8014502:	4d06      	ldr	r5, [pc, #24]	; (801451c <_close_r+0x1c>)
 8014504:	2300      	movs	r3, #0
 8014506:	4604      	mov	r4, r0
 8014508:	4608      	mov	r0, r1
 801450a:	602b      	str	r3, [r5, #0]
 801450c:	f7ed fa17 	bl	800193e <_close>
 8014510:	1c43      	adds	r3, r0, #1
 8014512:	d102      	bne.n	801451a <_close_r+0x1a>
 8014514:	682b      	ldr	r3, [r5, #0]
 8014516:	b103      	cbz	r3, 801451a <_close_r+0x1a>
 8014518:	6023      	str	r3, [r4, #0]
 801451a:	bd38      	pop	{r3, r4, r5, pc}
 801451c:	2000c234 	.word	0x2000c234

08014520 <__sflush_r>:
 8014520:	898a      	ldrh	r2, [r1, #12]
 8014522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014526:	4605      	mov	r5, r0
 8014528:	0710      	lsls	r0, r2, #28
 801452a:	460c      	mov	r4, r1
 801452c:	d458      	bmi.n	80145e0 <__sflush_r+0xc0>
 801452e:	684b      	ldr	r3, [r1, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	dc05      	bgt.n	8014540 <__sflush_r+0x20>
 8014534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014536:	2b00      	cmp	r3, #0
 8014538:	dc02      	bgt.n	8014540 <__sflush_r+0x20>
 801453a:	2000      	movs	r0, #0
 801453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014542:	2e00      	cmp	r6, #0
 8014544:	d0f9      	beq.n	801453a <__sflush_r+0x1a>
 8014546:	2300      	movs	r3, #0
 8014548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801454c:	682f      	ldr	r7, [r5, #0]
 801454e:	602b      	str	r3, [r5, #0]
 8014550:	d032      	beq.n	80145b8 <__sflush_r+0x98>
 8014552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014554:	89a3      	ldrh	r3, [r4, #12]
 8014556:	075a      	lsls	r2, r3, #29
 8014558:	d505      	bpl.n	8014566 <__sflush_r+0x46>
 801455a:	6863      	ldr	r3, [r4, #4]
 801455c:	1ac0      	subs	r0, r0, r3
 801455e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014560:	b10b      	cbz	r3, 8014566 <__sflush_r+0x46>
 8014562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014564:	1ac0      	subs	r0, r0, r3
 8014566:	2300      	movs	r3, #0
 8014568:	4602      	mov	r2, r0
 801456a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801456c:	6a21      	ldr	r1, [r4, #32]
 801456e:	4628      	mov	r0, r5
 8014570:	47b0      	blx	r6
 8014572:	1c43      	adds	r3, r0, #1
 8014574:	89a3      	ldrh	r3, [r4, #12]
 8014576:	d106      	bne.n	8014586 <__sflush_r+0x66>
 8014578:	6829      	ldr	r1, [r5, #0]
 801457a:	291d      	cmp	r1, #29
 801457c:	d82c      	bhi.n	80145d8 <__sflush_r+0xb8>
 801457e:	4a2a      	ldr	r2, [pc, #168]	; (8014628 <__sflush_r+0x108>)
 8014580:	40ca      	lsrs	r2, r1
 8014582:	07d6      	lsls	r6, r2, #31
 8014584:	d528      	bpl.n	80145d8 <__sflush_r+0xb8>
 8014586:	2200      	movs	r2, #0
 8014588:	6062      	str	r2, [r4, #4]
 801458a:	04d9      	lsls	r1, r3, #19
 801458c:	6922      	ldr	r2, [r4, #16]
 801458e:	6022      	str	r2, [r4, #0]
 8014590:	d504      	bpl.n	801459c <__sflush_r+0x7c>
 8014592:	1c42      	adds	r2, r0, #1
 8014594:	d101      	bne.n	801459a <__sflush_r+0x7a>
 8014596:	682b      	ldr	r3, [r5, #0]
 8014598:	b903      	cbnz	r3, 801459c <__sflush_r+0x7c>
 801459a:	6560      	str	r0, [r4, #84]	; 0x54
 801459c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801459e:	602f      	str	r7, [r5, #0]
 80145a0:	2900      	cmp	r1, #0
 80145a2:	d0ca      	beq.n	801453a <__sflush_r+0x1a>
 80145a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145a8:	4299      	cmp	r1, r3
 80145aa:	d002      	beq.n	80145b2 <__sflush_r+0x92>
 80145ac:	4628      	mov	r0, r5
 80145ae:	f7fe fe2b 	bl	8013208 <_free_r>
 80145b2:	2000      	movs	r0, #0
 80145b4:	6360      	str	r0, [r4, #52]	; 0x34
 80145b6:	e7c1      	b.n	801453c <__sflush_r+0x1c>
 80145b8:	6a21      	ldr	r1, [r4, #32]
 80145ba:	2301      	movs	r3, #1
 80145bc:	4628      	mov	r0, r5
 80145be:	47b0      	blx	r6
 80145c0:	1c41      	adds	r1, r0, #1
 80145c2:	d1c7      	bne.n	8014554 <__sflush_r+0x34>
 80145c4:	682b      	ldr	r3, [r5, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d0c4      	beq.n	8014554 <__sflush_r+0x34>
 80145ca:	2b1d      	cmp	r3, #29
 80145cc:	d001      	beq.n	80145d2 <__sflush_r+0xb2>
 80145ce:	2b16      	cmp	r3, #22
 80145d0:	d101      	bne.n	80145d6 <__sflush_r+0xb6>
 80145d2:	602f      	str	r7, [r5, #0]
 80145d4:	e7b1      	b.n	801453a <__sflush_r+0x1a>
 80145d6:	89a3      	ldrh	r3, [r4, #12]
 80145d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145dc:	81a3      	strh	r3, [r4, #12]
 80145de:	e7ad      	b.n	801453c <__sflush_r+0x1c>
 80145e0:	690f      	ldr	r7, [r1, #16]
 80145e2:	2f00      	cmp	r7, #0
 80145e4:	d0a9      	beq.n	801453a <__sflush_r+0x1a>
 80145e6:	0793      	lsls	r3, r2, #30
 80145e8:	680e      	ldr	r6, [r1, #0]
 80145ea:	bf08      	it	eq
 80145ec:	694b      	ldreq	r3, [r1, #20]
 80145ee:	600f      	str	r7, [r1, #0]
 80145f0:	bf18      	it	ne
 80145f2:	2300      	movne	r3, #0
 80145f4:	eba6 0807 	sub.w	r8, r6, r7
 80145f8:	608b      	str	r3, [r1, #8]
 80145fa:	f1b8 0f00 	cmp.w	r8, #0
 80145fe:	dd9c      	ble.n	801453a <__sflush_r+0x1a>
 8014600:	6a21      	ldr	r1, [r4, #32]
 8014602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014604:	4643      	mov	r3, r8
 8014606:	463a      	mov	r2, r7
 8014608:	4628      	mov	r0, r5
 801460a:	47b0      	blx	r6
 801460c:	2800      	cmp	r0, #0
 801460e:	dc06      	bgt.n	801461e <__sflush_r+0xfe>
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014616:	81a3      	strh	r3, [r4, #12]
 8014618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801461c:	e78e      	b.n	801453c <__sflush_r+0x1c>
 801461e:	4407      	add	r7, r0
 8014620:	eba8 0800 	sub.w	r8, r8, r0
 8014624:	e7e9      	b.n	80145fa <__sflush_r+0xda>
 8014626:	bf00      	nop
 8014628:	20400001 	.word	0x20400001

0801462c <_fflush_r>:
 801462c:	b538      	push	{r3, r4, r5, lr}
 801462e:	690b      	ldr	r3, [r1, #16]
 8014630:	4605      	mov	r5, r0
 8014632:	460c      	mov	r4, r1
 8014634:	b913      	cbnz	r3, 801463c <_fflush_r+0x10>
 8014636:	2500      	movs	r5, #0
 8014638:	4628      	mov	r0, r5
 801463a:	bd38      	pop	{r3, r4, r5, pc}
 801463c:	b118      	cbz	r0, 8014646 <_fflush_r+0x1a>
 801463e:	6983      	ldr	r3, [r0, #24]
 8014640:	b90b      	cbnz	r3, 8014646 <_fflush_r+0x1a>
 8014642:	f7ff f909 	bl	8013858 <__sinit>
 8014646:	4b14      	ldr	r3, [pc, #80]	; (8014698 <_fflush_r+0x6c>)
 8014648:	429c      	cmp	r4, r3
 801464a:	d11b      	bne.n	8014684 <_fflush_r+0x58>
 801464c:	686c      	ldr	r4, [r5, #4]
 801464e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d0ef      	beq.n	8014636 <_fflush_r+0xa>
 8014656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014658:	07d0      	lsls	r0, r2, #31
 801465a:	d404      	bmi.n	8014666 <_fflush_r+0x3a>
 801465c:	0599      	lsls	r1, r3, #22
 801465e:	d402      	bmi.n	8014666 <_fflush_r+0x3a>
 8014660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014662:	f7ff f9a9 	bl	80139b8 <__retarget_lock_acquire_recursive>
 8014666:	4628      	mov	r0, r5
 8014668:	4621      	mov	r1, r4
 801466a:	f7ff ff59 	bl	8014520 <__sflush_r>
 801466e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014670:	07da      	lsls	r2, r3, #31
 8014672:	4605      	mov	r5, r0
 8014674:	d4e0      	bmi.n	8014638 <_fflush_r+0xc>
 8014676:	89a3      	ldrh	r3, [r4, #12]
 8014678:	059b      	lsls	r3, r3, #22
 801467a:	d4dd      	bmi.n	8014638 <_fflush_r+0xc>
 801467c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801467e:	f7ff f99c 	bl	80139ba <__retarget_lock_release_recursive>
 8014682:	e7d9      	b.n	8014638 <_fflush_r+0xc>
 8014684:	4b05      	ldr	r3, [pc, #20]	; (801469c <_fflush_r+0x70>)
 8014686:	429c      	cmp	r4, r3
 8014688:	d101      	bne.n	801468e <_fflush_r+0x62>
 801468a:	68ac      	ldr	r4, [r5, #8]
 801468c:	e7df      	b.n	801464e <_fflush_r+0x22>
 801468e:	4b04      	ldr	r3, [pc, #16]	; (80146a0 <_fflush_r+0x74>)
 8014690:	429c      	cmp	r4, r3
 8014692:	bf08      	it	eq
 8014694:	68ec      	ldreq	r4, [r5, #12]
 8014696:	e7da      	b.n	801464e <_fflush_r+0x22>
 8014698:	08015478 	.word	0x08015478
 801469c:	08015498 	.word	0x08015498
 80146a0:	08015458 	.word	0x08015458

080146a4 <_lseek_r>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	4d07      	ldr	r5, [pc, #28]	; (80146c4 <_lseek_r+0x20>)
 80146a8:	4604      	mov	r4, r0
 80146aa:	4608      	mov	r0, r1
 80146ac:	4611      	mov	r1, r2
 80146ae:	2200      	movs	r2, #0
 80146b0:	602a      	str	r2, [r5, #0]
 80146b2:	461a      	mov	r2, r3
 80146b4:	f7ed f96a 	bl	800198c <_lseek>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_lseek_r+0x1e>
 80146bc:	682b      	ldr	r3, [r5, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_lseek_r+0x1e>
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	2000c234 	.word	0x2000c234

080146c8 <__swhatbuf_r>:
 80146c8:	b570      	push	{r4, r5, r6, lr}
 80146ca:	460e      	mov	r6, r1
 80146cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146d0:	2900      	cmp	r1, #0
 80146d2:	b096      	sub	sp, #88	; 0x58
 80146d4:	4614      	mov	r4, r2
 80146d6:	461d      	mov	r5, r3
 80146d8:	da08      	bge.n	80146ec <__swhatbuf_r+0x24>
 80146da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80146de:	2200      	movs	r2, #0
 80146e0:	602a      	str	r2, [r5, #0]
 80146e2:	061a      	lsls	r2, r3, #24
 80146e4:	d410      	bmi.n	8014708 <__swhatbuf_r+0x40>
 80146e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146ea:	e00e      	b.n	801470a <__swhatbuf_r+0x42>
 80146ec:	466a      	mov	r2, sp
 80146ee:	f000 f8af 	bl	8014850 <_fstat_r>
 80146f2:	2800      	cmp	r0, #0
 80146f4:	dbf1      	blt.n	80146da <__swhatbuf_r+0x12>
 80146f6:	9a01      	ldr	r2, [sp, #4]
 80146f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80146fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014700:	425a      	negs	r2, r3
 8014702:	415a      	adcs	r2, r3
 8014704:	602a      	str	r2, [r5, #0]
 8014706:	e7ee      	b.n	80146e6 <__swhatbuf_r+0x1e>
 8014708:	2340      	movs	r3, #64	; 0x40
 801470a:	2000      	movs	r0, #0
 801470c:	6023      	str	r3, [r4, #0]
 801470e:	b016      	add	sp, #88	; 0x58
 8014710:	bd70      	pop	{r4, r5, r6, pc}
	...

08014714 <__smakebuf_r>:
 8014714:	898b      	ldrh	r3, [r1, #12]
 8014716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014718:	079d      	lsls	r5, r3, #30
 801471a:	4606      	mov	r6, r0
 801471c:	460c      	mov	r4, r1
 801471e:	d507      	bpl.n	8014730 <__smakebuf_r+0x1c>
 8014720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	6123      	str	r3, [r4, #16]
 8014728:	2301      	movs	r3, #1
 801472a:	6163      	str	r3, [r4, #20]
 801472c:	b002      	add	sp, #8
 801472e:	bd70      	pop	{r4, r5, r6, pc}
 8014730:	ab01      	add	r3, sp, #4
 8014732:	466a      	mov	r2, sp
 8014734:	f7ff ffc8 	bl	80146c8 <__swhatbuf_r>
 8014738:	9900      	ldr	r1, [sp, #0]
 801473a:	4605      	mov	r5, r0
 801473c:	4630      	mov	r0, r6
 801473e:	f7fe fdcf 	bl	80132e0 <_malloc_r>
 8014742:	b948      	cbnz	r0, 8014758 <__smakebuf_r+0x44>
 8014744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014748:	059a      	lsls	r2, r3, #22
 801474a:	d4ef      	bmi.n	801472c <__smakebuf_r+0x18>
 801474c:	f023 0303 	bic.w	r3, r3, #3
 8014750:	f043 0302 	orr.w	r3, r3, #2
 8014754:	81a3      	strh	r3, [r4, #12]
 8014756:	e7e3      	b.n	8014720 <__smakebuf_r+0xc>
 8014758:	4b0d      	ldr	r3, [pc, #52]	; (8014790 <__smakebuf_r+0x7c>)
 801475a:	62b3      	str	r3, [r6, #40]	; 0x28
 801475c:	89a3      	ldrh	r3, [r4, #12]
 801475e:	6020      	str	r0, [r4, #0]
 8014760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014764:	81a3      	strh	r3, [r4, #12]
 8014766:	9b00      	ldr	r3, [sp, #0]
 8014768:	6163      	str	r3, [r4, #20]
 801476a:	9b01      	ldr	r3, [sp, #4]
 801476c:	6120      	str	r0, [r4, #16]
 801476e:	b15b      	cbz	r3, 8014788 <__smakebuf_r+0x74>
 8014770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014774:	4630      	mov	r0, r6
 8014776:	f000 f87d 	bl	8014874 <_isatty_r>
 801477a:	b128      	cbz	r0, 8014788 <__smakebuf_r+0x74>
 801477c:	89a3      	ldrh	r3, [r4, #12]
 801477e:	f023 0303 	bic.w	r3, r3, #3
 8014782:	f043 0301 	orr.w	r3, r3, #1
 8014786:	81a3      	strh	r3, [r4, #12]
 8014788:	89a0      	ldrh	r0, [r4, #12]
 801478a:	4305      	orrs	r5, r0
 801478c:	81a5      	strh	r5, [r4, #12]
 801478e:	e7cd      	b.n	801472c <__smakebuf_r+0x18>
 8014790:	080137f1 	.word	0x080137f1

08014794 <_malloc_usable_size_r>:
 8014794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014798:	1f18      	subs	r0, r3, #4
 801479a:	2b00      	cmp	r3, #0
 801479c:	bfbc      	itt	lt
 801479e:	580b      	ldrlt	r3, [r1, r0]
 80147a0:	18c0      	addlt	r0, r0, r3
 80147a2:	4770      	bx	lr

080147a4 <_read_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	4d07      	ldr	r5, [pc, #28]	; (80147c4 <_read_r+0x20>)
 80147a8:	4604      	mov	r4, r0
 80147aa:	4608      	mov	r0, r1
 80147ac:	4611      	mov	r1, r2
 80147ae:	2200      	movs	r2, #0
 80147b0:	602a      	str	r2, [r5, #0]
 80147b2:	461a      	mov	r2, r3
 80147b4:	f7ed f88a 	bl	80018cc <_read>
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d102      	bne.n	80147c2 <_read_r+0x1e>
 80147bc:	682b      	ldr	r3, [r5, #0]
 80147be:	b103      	cbz	r3, 80147c2 <_read_r+0x1e>
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	bd38      	pop	{r3, r4, r5, pc}
 80147c4:	2000c234 	.word	0x2000c234

080147c8 <_raise_r>:
 80147c8:	291f      	cmp	r1, #31
 80147ca:	b538      	push	{r3, r4, r5, lr}
 80147cc:	4604      	mov	r4, r0
 80147ce:	460d      	mov	r5, r1
 80147d0:	d904      	bls.n	80147dc <_raise_r+0x14>
 80147d2:	2316      	movs	r3, #22
 80147d4:	6003      	str	r3, [r0, #0]
 80147d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147da:	bd38      	pop	{r3, r4, r5, pc}
 80147dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80147de:	b112      	cbz	r2, 80147e6 <_raise_r+0x1e>
 80147e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80147e4:	b94b      	cbnz	r3, 80147fa <_raise_r+0x32>
 80147e6:	4620      	mov	r0, r4
 80147e8:	f000 f830 	bl	801484c <_getpid_r>
 80147ec:	462a      	mov	r2, r5
 80147ee:	4601      	mov	r1, r0
 80147f0:	4620      	mov	r0, r4
 80147f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147f6:	f000 b817 	b.w	8014828 <_kill_r>
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d00a      	beq.n	8014814 <_raise_r+0x4c>
 80147fe:	1c59      	adds	r1, r3, #1
 8014800:	d103      	bne.n	801480a <_raise_r+0x42>
 8014802:	2316      	movs	r3, #22
 8014804:	6003      	str	r3, [r0, #0]
 8014806:	2001      	movs	r0, #1
 8014808:	e7e7      	b.n	80147da <_raise_r+0x12>
 801480a:	2400      	movs	r4, #0
 801480c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014810:	4628      	mov	r0, r5
 8014812:	4798      	blx	r3
 8014814:	2000      	movs	r0, #0
 8014816:	e7e0      	b.n	80147da <_raise_r+0x12>

08014818 <raise>:
 8014818:	4b02      	ldr	r3, [pc, #8]	; (8014824 <raise+0xc>)
 801481a:	4601      	mov	r1, r0
 801481c:	6818      	ldr	r0, [r3, #0]
 801481e:	f7ff bfd3 	b.w	80147c8 <_raise_r>
 8014822:	bf00      	nop
 8014824:	200000b0 	.word	0x200000b0

08014828 <_kill_r>:
 8014828:	b538      	push	{r3, r4, r5, lr}
 801482a:	4d07      	ldr	r5, [pc, #28]	; (8014848 <_kill_r+0x20>)
 801482c:	2300      	movs	r3, #0
 801482e:	4604      	mov	r4, r0
 8014830:	4608      	mov	r0, r1
 8014832:	4611      	mov	r1, r2
 8014834:	602b      	str	r3, [r5, #0]
 8014836:	f7ed f82f 	bl	8001898 <_kill>
 801483a:	1c43      	adds	r3, r0, #1
 801483c:	d102      	bne.n	8014844 <_kill_r+0x1c>
 801483e:	682b      	ldr	r3, [r5, #0]
 8014840:	b103      	cbz	r3, 8014844 <_kill_r+0x1c>
 8014842:	6023      	str	r3, [r4, #0]
 8014844:	bd38      	pop	{r3, r4, r5, pc}
 8014846:	bf00      	nop
 8014848:	2000c234 	.word	0x2000c234

0801484c <_getpid_r>:
 801484c:	f7ed b81c 	b.w	8001888 <_getpid>

08014850 <_fstat_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d07      	ldr	r5, [pc, #28]	; (8014870 <_fstat_r+0x20>)
 8014854:	2300      	movs	r3, #0
 8014856:	4604      	mov	r4, r0
 8014858:	4608      	mov	r0, r1
 801485a:	4611      	mov	r1, r2
 801485c:	602b      	str	r3, [r5, #0]
 801485e:	f7ed f87a 	bl	8001956 <_fstat>
 8014862:	1c43      	adds	r3, r0, #1
 8014864:	d102      	bne.n	801486c <_fstat_r+0x1c>
 8014866:	682b      	ldr	r3, [r5, #0]
 8014868:	b103      	cbz	r3, 801486c <_fstat_r+0x1c>
 801486a:	6023      	str	r3, [r4, #0]
 801486c:	bd38      	pop	{r3, r4, r5, pc}
 801486e:	bf00      	nop
 8014870:	2000c234 	.word	0x2000c234

08014874 <_isatty_r>:
 8014874:	b538      	push	{r3, r4, r5, lr}
 8014876:	4d06      	ldr	r5, [pc, #24]	; (8014890 <_isatty_r+0x1c>)
 8014878:	2300      	movs	r3, #0
 801487a:	4604      	mov	r4, r0
 801487c:	4608      	mov	r0, r1
 801487e:	602b      	str	r3, [r5, #0]
 8014880:	f7ed f879 	bl	8001976 <_isatty>
 8014884:	1c43      	adds	r3, r0, #1
 8014886:	d102      	bne.n	801488e <_isatty_r+0x1a>
 8014888:	682b      	ldr	r3, [r5, #0]
 801488a:	b103      	cbz	r3, 801488e <_isatty_r+0x1a>
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	bd38      	pop	{r3, r4, r5, pc}
 8014890:	2000c234 	.word	0x2000c234

08014894 <_init>:
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014896:	bf00      	nop
 8014898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489a:	bc08      	pop	{r3}
 801489c:	469e      	mov	lr, r3
 801489e:	4770      	bx	lr

080148a0 <_fini>:
 80148a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a2:	bf00      	nop
 80148a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148a6:	bc08      	pop	{r3}
 80148a8:	469e      	mov	lr, r3
 80148aa:	4770      	bx	lr
