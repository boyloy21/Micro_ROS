
microros_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c58  08014bf0  08014bf0  00024bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015848  08015848  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015848  08015848  00025848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015850  08015850  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015850  08015850  00025850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015854  08015854  00025854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08015858  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000daf0  200000f8  08015950  000300f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dbe8  08015950  0003dbe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e338  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467c  00000000  00000000  0004e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00052ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00054278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dae  00000000  00000000  00055828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddca  00000000  00000000  0007d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4ee9  00000000  00000000  0009b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  00180289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f14  00000000  00000000  00180334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014bd4 	.word	0x08014bd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	08014bd4 	.word	0x08014bd4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_d2uiz>:
 80002e0:	004a      	lsls	r2, r1, #1
 80002e2:	d211      	bcs.n	8000308 <__aeabi_d2uiz+0x28>
 80002e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80002e8:	d211      	bcs.n	800030e <__aeabi_d2uiz+0x2e>
 80002ea:	d50d      	bpl.n	8000308 <__aeabi_d2uiz+0x28>
 80002ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80002f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80002f4:	d40e      	bmi.n	8000314 <__aeabi_d2uiz+0x34>
 80002f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80002fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000302:	fa23 f002 	lsr.w	r0, r3, r2
 8000306:	4770      	bx	lr
 8000308:	f04f 0000 	mov.w	r0, #0
 800030c:	4770      	bx	lr
 800030e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000312:	d102      	bne.n	800031a <__aeabi_d2uiz+0x3a>
 8000314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000318:	4770      	bx	lr
 800031a:	f04f 0000 	mov.w	r0, #0
 800031e:	4770      	bx	lr

08000320 <__aeabi_d2f>:
 8000320:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000324:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000328:	bf24      	itt	cs
 800032a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800032e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000332:	d90d      	bls.n	8000350 <__aeabi_d2f+0x30>
 8000334:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000338:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800033c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000340:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000344:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000348:	bf08      	it	eq
 800034a:	f020 0001 	biceq.w	r0, r0, #1
 800034e:	4770      	bx	lr
 8000350:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000354:	d121      	bne.n	800039a <__aeabi_d2f+0x7a>
 8000356:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800035a:	bfbc      	itt	lt
 800035c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000360:	4770      	bxlt	lr
 8000362:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000366:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800036a:	f1c2 0218 	rsb	r2, r2, #24
 800036e:	f1c2 0c20 	rsb	ip, r2, #32
 8000372:	fa10 f30c 	lsls.w	r3, r0, ip
 8000376:	fa20 f002 	lsr.w	r0, r0, r2
 800037a:	bf18      	it	ne
 800037c:	f040 0001 	orrne.w	r0, r0, #1
 8000380:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000384:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000388:	fa03 fc0c 	lsl.w	ip, r3, ip
 800038c:	ea40 000c 	orr.w	r0, r0, ip
 8000390:	fa23 f302 	lsr.w	r3, r3, r2
 8000394:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000398:	e7cc      	b.n	8000334 <__aeabi_d2f+0x14>
 800039a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800039e:	d107      	bne.n	80003b0 <__aeabi_d2f+0x90>
 80003a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80003a4:	bf1e      	ittt	ne
 80003a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80003aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80003ae:	4770      	bxne	lr
 80003b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80003b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_ldivmod>:
 80003c0:	b97b      	cbnz	r3, 80003e2 <__aeabi_ldivmod+0x22>
 80003c2:	b972      	cbnz	r2, 80003e2 <__aeabi_ldivmod+0x22>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bfbe      	ittt	lt
 80003c8:	2000      	movlt	r0, #0
 80003ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003ce:	e006      	blt.n	80003de <__aeabi_ldivmod+0x1e>
 80003d0:	bf08      	it	eq
 80003d2:	2800      	cmpeq	r0, #0
 80003d4:	bf1c      	itt	ne
 80003d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003da:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003de:	f000 b9bf 	b.w	8000760 <__aeabi_idiv0>
 80003e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ea:	2900      	cmp	r1, #0
 80003ec:	db09      	blt.n	8000402 <__aeabi_ldivmod+0x42>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db1a      	blt.n	8000428 <__aeabi_ldivmod+0x68>
 80003f2:	f000 f84d 	bl	8000490 <__udivmoddi4>
 80003f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fe:	b004      	add	sp, #16
 8000400:	4770      	bx	lr
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	db1b      	blt.n	8000444 <__aeabi_ldivmod+0x84>
 800040c:	f000 f840 	bl	8000490 <__udivmoddi4>
 8000410:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000418:	b004      	add	sp, #16
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	4252      	negs	r2, r2
 8000422:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f82f 	bl	8000490 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	4770      	bx	lr
 8000444:	4252      	negs	r2, r2
 8000446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044a:	f000 f821 	bl	8000490 <__udivmoddi4>
 800044e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000456:	b004      	add	sp, #16
 8000458:	4252      	negs	r2, r2
 800045a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045e:	4770      	bx	lr

08000460 <__aeabi_uldivmod>:
 8000460:	b953      	cbnz	r3, 8000478 <__aeabi_uldivmod+0x18>
 8000462:	b94a      	cbnz	r2, 8000478 <__aeabi_uldivmod+0x18>
 8000464:	2900      	cmp	r1, #0
 8000466:	bf08      	it	eq
 8000468:	2800      	cmpeq	r0, #0
 800046a:	bf1c      	itt	ne
 800046c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000470:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000474:	f000 b974 	b.w	8000760 <__aeabi_idiv0>
 8000478:	f1ad 0c08 	sub.w	ip, sp, #8
 800047c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000480:	f000 f806 	bl	8000490 <__udivmoddi4>
 8000484:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800048c:	b004      	add	sp, #16
 800048e:	4770      	bx	lr

08000490 <__udivmoddi4>:
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000494:	9d08      	ldr	r5, [sp, #32]
 8000496:	4604      	mov	r4, r0
 8000498:	468e      	mov	lr, r1
 800049a:	2b00      	cmp	r3, #0
 800049c:	d14d      	bne.n	800053a <__udivmoddi4+0xaa>
 800049e:	428a      	cmp	r2, r1
 80004a0:	4694      	mov	ip, r2
 80004a2:	d969      	bls.n	8000578 <__udivmoddi4+0xe8>
 80004a4:	fab2 f282 	clz	r2, r2
 80004a8:	b152      	cbz	r2, 80004c0 <__udivmoddi4+0x30>
 80004aa:	fa01 f302 	lsl.w	r3, r1, r2
 80004ae:	f1c2 0120 	rsb	r1, r2, #32
 80004b2:	fa20 f101 	lsr.w	r1, r0, r1
 80004b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ba:	ea41 0e03 	orr.w	lr, r1, r3
 80004be:	4094      	lsls	r4, r2
 80004c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c4:	0c21      	lsrs	r1, r4, #16
 80004c6:	fbbe f6f8 	udiv	r6, lr, r8
 80004ca:	fa1f f78c 	uxth.w	r7, ip
 80004ce:	fb08 e316 	mls	r3, r8, r6, lr
 80004d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004d6:	fb06 f107 	mul.w	r1, r6, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d90a      	bls.n	80004f4 <__udivmoddi4+0x64>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004e6:	f080 811f 	bcs.w	8000728 <__udivmoddi4+0x298>
 80004ea:	4299      	cmp	r1, r3
 80004ec:	f240 811c 	bls.w	8000728 <__udivmoddi4+0x298>
 80004f0:	3e02      	subs	r6, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1a5b      	subs	r3, r3, r1
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000500:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000504:	fb00 f707 	mul.w	r7, r0, r7
 8000508:	42a7      	cmp	r7, r4
 800050a:	d90a      	bls.n	8000522 <__udivmoddi4+0x92>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000514:	f080 810a 	bcs.w	800072c <__udivmoddi4+0x29c>
 8000518:	42a7      	cmp	r7, r4
 800051a:	f240 8107 	bls.w	800072c <__udivmoddi4+0x29c>
 800051e:	4464      	add	r4, ip
 8000520:	3802      	subs	r0, #2
 8000522:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000526:	1be4      	subs	r4, r4, r7
 8000528:	2600      	movs	r6, #0
 800052a:	b11d      	cbz	r5, 8000534 <__udivmoddi4+0xa4>
 800052c:	40d4      	lsrs	r4, r2
 800052e:	2300      	movs	r3, #0
 8000530:	e9c5 4300 	strd	r4, r3, [r5]
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0xc2>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80ef 	beq.w	8000722 <__udivmoddi4+0x292>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x160>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0xd4>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80f9 	bhi.w	8000756 <__udivmoddi4+0x2c6>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0303 	sbc.w	r3, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	469e      	mov	lr, r3
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0e0      	beq.n	8000534 <__udivmoddi4+0xa4>
 8000572:	e9c5 4e00 	strd	r4, lr, [r5]
 8000576:	e7dd      	b.n	8000534 <__udivmoddi4+0xa4>
 8000578:	b902      	cbnz	r2, 800057c <__udivmoddi4+0xec>
 800057a:	deff      	udf	#255	; 0xff
 800057c:	fab2 f282 	clz	r2, r2
 8000580:	2a00      	cmp	r2, #0
 8000582:	f040 8092 	bne.w	80006aa <__udivmoddi4+0x21a>
 8000586:	eba1 010c 	sub.w	r1, r1, ip
 800058a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800058e:	fa1f fe8c 	uxth.w	lr, ip
 8000592:	2601      	movs	r6, #1
 8000594:	0c20      	lsrs	r0, r4, #16
 8000596:	fbb1 f3f7 	udiv	r3, r1, r7
 800059a:	fb07 1113 	mls	r1, r7, r3, r1
 800059e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a2:	fb0e f003 	mul.w	r0, lr, r3
 80005a6:	4288      	cmp	r0, r1
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x12c>
 80005aa:	eb1c 0101 	adds.w	r1, ip, r1
 80005ae:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80005b2:	d202      	bcs.n	80005ba <__udivmoddi4+0x12a>
 80005b4:	4288      	cmp	r0, r1
 80005b6:	f200 80cb 	bhi.w	8000750 <__udivmoddi4+0x2c0>
 80005ba:	4643      	mov	r3, r8
 80005bc:	1a09      	subs	r1, r1, r0
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c4:	fb07 1110 	mls	r1, r7, r0, r1
 80005c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005cc:	fb0e fe00 	mul.w	lr, lr, r0
 80005d0:	45a6      	cmp	lr, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x156>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005dc:	d202      	bcs.n	80005e4 <__udivmoddi4+0x154>
 80005de:	45a6      	cmp	lr, r4
 80005e0:	f200 80bb 	bhi.w	800075a <__udivmoddi4+0x2ca>
 80005e4:	4608      	mov	r0, r1
 80005e6:	eba4 040e 	sub.w	r4, r4, lr
 80005ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x9a>
 80005f0:	f1c6 0720 	rsb	r7, r6, #32
 80005f4:	40b3      	lsls	r3, r6
 80005f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80005fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	431c      	orrs	r4, r3
 8000608:	40f9      	lsrs	r1, r7
 800060a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800060e:	fa00 f306 	lsl.w	r3, r0, r6
 8000612:	fbb1 f8f9 	udiv	r8, r1, r9
 8000616:	0c20      	lsrs	r0, r4, #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fb09 1118 	mls	r1, r9, r8, r1
 8000620:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000624:	fb08 f00e 	mul.w	r0, r8, lr
 8000628:	4288      	cmp	r0, r1
 800062a:	fa02 f206 	lsl.w	r2, r2, r6
 800062e:	d90b      	bls.n	8000648 <__udivmoddi4+0x1b8>
 8000630:	eb1c 0101 	adds.w	r1, ip, r1
 8000634:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000638:	f080 8088 	bcs.w	800074c <__udivmoddi4+0x2bc>
 800063c:	4288      	cmp	r0, r1
 800063e:	f240 8085 	bls.w	800074c <__udivmoddi4+0x2bc>
 8000642:	f1a8 0802 	sub.w	r8, r8, #2
 8000646:	4461      	add	r1, ip
 8000648:	1a09      	subs	r1, r1, r0
 800064a:	b2a4      	uxth	r4, r4
 800064c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000650:	fb09 1110 	mls	r1, r9, r0, r1
 8000654:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000658:	fb00 fe0e 	mul.w	lr, r0, lr
 800065c:	458e      	cmp	lr, r1
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x1e2>
 8000660:	eb1c 0101 	adds.w	r1, ip, r1
 8000664:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000668:	d26c      	bcs.n	8000744 <__udivmoddi4+0x2b4>
 800066a:	458e      	cmp	lr, r1
 800066c:	d96a      	bls.n	8000744 <__udivmoddi4+0x2b4>
 800066e:	3802      	subs	r0, #2
 8000670:	4461      	add	r1, ip
 8000672:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000676:	fba0 9402 	umull	r9, r4, r0, r2
 800067a:	eba1 010e 	sub.w	r1, r1, lr
 800067e:	42a1      	cmp	r1, r4
 8000680:	46c8      	mov	r8, r9
 8000682:	46a6      	mov	lr, r4
 8000684:	d356      	bcc.n	8000734 <__udivmoddi4+0x2a4>
 8000686:	d053      	beq.n	8000730 <__udivmoddi4+0x2a0>
 8000688:	b15d      	cbz	r5, 80006a2 <__udivmoddi4+0x212>
 800068a:	ebb3 0208 	subs.w	r2, r3, r8
 800068e:	eb61 010e 	sbc.w	r1, r1, lr
 8000692:	fa01 f707 	lsl.w	r7, r1, r7
 8000696:	fa22 f306 	lsr.w	r3, r2, r6
 800069a:	40f1      	lsrs	r1, r6
 800069c:	431f      	orrs	r7, r3
 800069e:	e9c5 7100 	strd	r7, r1, [r5]
 80006a2:	2600      	movs	r6, #0
 80006a4:	4631      	mov	r1, r6
 80006a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	40d8      	lsrs	r0, r3
 80006b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006b4:	fa21 f303 	lsr.w	r3, r1, r3
 80006b8:	4091      	lsls	r1, r2
 80006ba:	4301      	orrs	r1, r0
 80006bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c0:	fa1f fe8c 	uxth.w	lr, ip
 80006c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006c8:	fb07 3610 	mls	r6, r7, r0, r3
 80006cc:	0c0b      	lsrs	r3, r1, #16
 80006ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006d2:	fb00 f60e 	mul.w	r6, r0, lr
 80006d6:	429e      	cmp	r6, r3
 80006d8:	fa04 f402 	lsl.w	r4, r4, r2
 80006dc:	d908      	bls.n	80006f0 <__udivmoddi4+0x260>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006e6:	d22f      	bcs.n	8000748 <__udivmoddi4+0x2b8>
 80006e8:	429e      	cmp	r6, r3
 80006ea:	d92d      	bls.n	8000748 <__udivmoddi4+0x2b8>
 80006ec:	3802      	subs	r0, #2
 80006ee:	4463      	add	r3, ip
 80006f0:	1b9b      	subs	r3, r3, r6
 80006f2:	b289      	uxth	r1, r1
 80006f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006f8:	fb07 3316 	mls	r3, r7, r6, r3
 80006fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000700:	fb06 f30e 	mul.w	r3, r6, lr
 8000704:	428b      	cmp	r3, r1
 8000706:	d908      	bls.n	800071a <__udivmoddi4+0x28a>
 8000708:	eb1c 0101 	adds.w	r1, ip, r1
 800070c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000710:	d216      	bcs.n	8000740 <__udivmoddi4+0x2b0>
 8000712:	428b      	cmp	r3, r1
 8000714:	d914      	bls.n	8000740 <__udivmoddi4+0x2b0>
 8000716:	3e02      	subs	r6, #2
 8000718:	4461      	add	r1, ip
 800071a:	1ac9      	subs	r1, r1, r3
 800071c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000720:	e738      	b.n	8000594 <__udivmoddi4+0x104>
 8000722:	462e      	mov	r6, r5
 8000724:	4628      	mov	r0, r5
 8000726:	e705      	b.n	8000534 <__udivmoddi4+0xa4>
 8000728:	4606      	mov	r6, r0
 800072a:	e6e3      	b.n	80004f4 <__udivmoddi4+0x64>
 800072c:	4618      	mov	r0, r3
 800072e:	e6f8      	b.n	8000522 <__udivmoddi4+0x92>
 8000730:	454b      	cmp	r3, r9
 8000732:	d2a9      	bcs.n	8000688 <__udivmoddi4+0x1f8>
 8000734:	ebb9 0802 	subs.w	r8, r9, r2
 8000738:	eb64 0e0c 	sbc.w	lr, r4, ip
 800073c:	3801      	subs	r0, #1
 800073e:	e7a3      	b.n	8000688 <__udivmoddi4+0x1f8>
 8000740:	4646      	mov	r6, r8
 8000742:	e7ea      	b.n	800071a <__udivmoddi4+0x28a>
 8000744:	4620      	mov	r0, r4
 8000746:	e794      	b.n	8000672 <__udivmoddi4+0x1e2>
 8000748:	4640      	mov	r0, r8
 800074a:	e7d1      	b.n	80006f0 <__udivmoddi4+0x260>
 800074c:	46d0      	mov	r8, sl
 800074e:	e77b      	b.n	8000648 <__udivmoddi4+0x1b8>
 8000750:	3b02      	subs	r3, #2
 8000752:	4461      	add	r1, ip
 8000754:	e732      	b.n	80005bc <__udivmoddi4+0x12c>
 8000756:	4630      	mov	r0, r6
 8000758:	e709      	b.n	800056e <__udivmoddi4+0xde>
 800075a:	4464      	add	r4, ip
 800075c:	3802      	subs	r0, #2
 800075e:	e742      	b.n	80005e6 <__udivmoddi4+0x156>

08000760 <__aeabi_idiv0>:
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000770:	f006 fb9a 	bl	8006ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000774:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <pvPortMallocMicroROS+0x174>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d101      	bne.n	8000780 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800077c:	f000 f980 	bl	8000a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000780:	4b56      	ldr	r3, [pc, #344]	; (80008dc <pvPortMallocMicroROS+0x178>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4013      	ands	r3, r2
 8000788:	2b00      	cmp	r3, #0
 800078a:	f040 808e 	bne.w	80008aa <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d01d      	beq.n	80007d0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000794:	2208      	movs	r2, #8
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d014      	beq.n	80007d0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f023 0307 	bic.w	r3, r3, #7
 80007ac:	3308      	adds	r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00a      	beq.n	80007d0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007cc:	bf00      	nop
 80007ce:	e7fe      	b.n	80007ce <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d069      	beq.n	80008aa <pvPortMallocMicroROS+0x146>
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <pvPortMallocMicroROS+0x17c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d864      	bhi.n	80008aa <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007e0:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <pvPortMallocMicroROS+0x180>)
 80007e2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <pvPortMallocMicroROS+0x180>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007ea:	e004      	b.n	80007f6 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d903      	bls.n	8000808 <pvPortMallocMicroROS+0xa4>
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f1      	bne.n	80007ec <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000808:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <pvPortMallocMicroROS+0x174>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080e:	429a      	cmp	r2, r3
 8000810:	d04b      	beq.n	80008aa <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2208      	movs	r2, #8
 8000818:	4413      	add	r3, r2
 800081a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1ad2      	subs	r2, r2, r3
 800082c:	2308      	movs	r3, #8
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	429a      	cmp	r2, r3
 8000832:	d91f      	bls.n	8000874 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	613b      	str	r3, [r7, #16]
}
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800086e:	69b8      	ldr	r0, [r7, #24]
 8000870:	f000 f968 	bl	8000b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <pvPortMallocMicroROS+0x17c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <pvPortMallocMicroROS+0x17c>)
 8000880:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <pvPortMallocMicroROS+0x17c>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <pvPortMallocMicroROS+0x184>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d203      	bcs.n	8000896 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <pvPortMallocMicroROS+0x17c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <pvPortMallocMicroROS+0x184>)
 8000894:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <pvPortMallocMicroROS+0x178>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	431a      	orrs	r2, r3
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008aa:	f006 fb0b 	bl	8006ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00a      	beq.n	80008ce <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80008b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008bc:	f383 8811 	msr	BASEPRI, r3
 80008c0:	f3bf 8f6f 	isb	sy
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	60fb      	str	r3, [r7, #12]
}
 80008ca:	bf00      	nop
 80008cc:	e7fe      	b.n	80008cc <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20003d1c 	.word	0x20003d1c
 80008dc:	20003d28 	.word	0x20003d28
 80008e0:	20003d20 	.word	0x20003d20
 80008e4:	20003d14 	.word	0x20003d14
 80008e8:	20003d24 	.word	0x20003d24

080008ec <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d048      	beq.n	8000990 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <vPortFreeMicroROS+0xac>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <vPortFreeMicroROS+0x44>
	__asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
}
 800092c:	bf00      	nop
 800092e:	e7fe      	b.n	800092e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00a      	beq.n	800094e <vPortFreeMicroROS+0x62>
	__asm volatile
 8000938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093c:	f383 8811 	msr	BASEPRI, r3
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	60bb      	str	r3, [r7, #8]
}
 800094a:	bf00      	nop
 800094c:	e7fe      	b.n	800094c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <vPortFreeMicroROS+0xac>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d019      	beq.n	8000990 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d115      	bne.n	8000990 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <vPortFreeMicroROS+0xac>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000974:	f006 fa98 	bl	8006ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <vPortFreeMicroROS+0xb0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4413      	add	r3, r2
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <vPortFreeMicroROS+0xb0>)
 8000984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000986:	6938      	ldr	r0, [r7, #16]
 8000988:	f000 f8dc 	bl	8000b44 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800098c:	f006 fa9a 	bl	8006ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20003d28 	.word	0x20003d28
 800099c:	20003d20 	.word	0x20003d20

080009a0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80009ac:	2308      	movs	r3, #8
 80009ae:	425b      	negs	r3, r3
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	4413      	add	r3, r2
 80009b4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <getBlockSize+0x38>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	43db      	mvns	r3, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

	return count;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	371c      	adds	r7, #28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20003d28 	.word	0x20003d28

080009dc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009e6:	f006 fa5f 	bl	8006ea8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f7ff feba 	bl	8000764 <pvPortMallocMicroROS>
 80009f0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d017      	beq.n	8000a28 <pvPortReallocMicroROS+0x4c>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d014      	beq.n	8000a28 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffce 	bl	80009a0 <getBlockSize>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2208      	movs	r2, #8
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d201      	bcs.n	8000a18 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	f012 fd4d 	bl	80134bc <memcpy>

		vPortFreeMicroROS(pv);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff62 	bl	80008ec <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a28:	f006 fa4c 	bl	8006ec4 <xTaskResumeAll>

	return newmem;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a40:	f006 fa32 	bl	8006ea8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff fe88 	bl	8000764 <pvPortMallocMicroROS>
 8000a54:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a5a:	e004      	b.n	8000a66 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	613a      	str	r2, [r7, #16]
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	617a      	str	r2, [r7, #20]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f5      	bne.n	8000a5c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a70:	f006 fa28 	bl	8006ec4 <xTaskResumeAll>
  	return mem;
 8000a74:	68fb      	ldr	r3, [r7, #12]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <prvHeapInit+0xac>)
 8000a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00c      	beq.n	8000ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3307      	adds	r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f023 0307 	bic.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <prvHeapInit+0xac>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <prvHeapInit+0xb0>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <prvHeapInit+0xb0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000acc:	2208      	movs	r2, #8
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 0307 	bic.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <prvHeapInit+0xb4>)
 8000ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <prvHeapInit+0xb4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <prvHeapInit+0xb4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	1ad2      	subs	r2, r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <prvHeapInit+0xb4>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <prvHeapInit+0xb8>)
 8000b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <prvHeapInit+0xbc>)
 8000b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <prvHeapInit+0xc0>)
 8000b1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	20000114 	.word	0x20000114
 8000b30:	20003d14 	.word	0x20003d14
 8000b34:	20003d1c 	.word	0x20003d1c
 8000b38:	20003d24 	.word	0x20003d24
 8000b3c:	20003d20 	.word	0x20003d20
 8000b40:	20003d28 	.word	0x20003d28

08000b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <prvInsertBlockIntoFreeList+0xac>)
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e002      	b.n	8000b58 <prvInsertBlockIntoFreeList+0x14>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d8f7      	bhi.n	8000b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d108      	bne.n	8000b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	441a      	add	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d118      	bne.n	8000bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d00d      	beq.n	8000bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e008      	b.n	8000bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e003      	b.n	8000bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d002      	beq.n	8000be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20003d14 	.word	0x20003d14
 8000bf4:	20003d1c 	.word	0x20003d1c

08000bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_DMA_Init+0x4c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <MX_DMA_Init+0x4c>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_DMA_Init+0x4c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f001 f9a6 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c24:	2010      	movs	r0, #16
 8000c26:	f001 f9bf 	bl	8001fa8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	2011      	movs	r0, #17
 8000c30:	f001 f99e 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c34:	2011      	movs	r0, #17
 8000c36:	f001 f9b7 	bl	8001fa8 <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c56:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5c:	4904      	ldr	r1, [pc, #16]	; (8000c70 <cubemx_transport_open+0x28>)
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f003 fe32 	bl	80048c8 <HAL_UART_Receive_DMA>
    return true;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20003d2c 	.word	0x20003d2c

08000c74 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c82:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f003 fe4f 	bl	8004928 <HAL_UART_DMAStop>
    return true;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000ca8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d11c      	bne.n	8000cf0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f003 fd84 	bl	80047cc <HAL_UART_Transmit_DMA>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cc8:	e002      	b.n	8000cd0 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f005 f8c0 	bl	8005e50 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cd0:	7cfb      	ldrb	r3, [r7, #19]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d105      	bne.n	8000ce2 <cubemx_transport_write+0x4e>
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	d1f3      	bne.n	8000cca <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000ce2:	7cfb      	ldrb	r3, [r7, #19]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <cubemx_transport_write+0x58>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	e002      	b.n	8000cf2 <cubemx_transport_write+0x5e>
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000cf0:	2300      	movs	r3, #0
    }
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000d10:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d16:	b672      	cpsid	i
}
 8000d18:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <cubemx_transport_read+0x9c>)
 8000d28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d2a:	b662      	cpsie	i
}
 8000d2c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3301      	adds	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f005 f88b 	bl	8005e50 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <cubemx_transport_read+0xa0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <cubemx_transport_read+0x9c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d103      	bne.n	8000d4e <cubemx_transport_read+0x52>
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dbe3      	blt.n	8000d16 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000d52:	e011      	b.n	8000d78 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <cubemx_transport_read+0xa0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	440b      	add	r3, r1
 8000d5e:	4910      	ldr	r1, [pc, #64]	; (8000da0 <cubemx_transport_read+0xa4>)
 8000d60:	5c8a      	ldrb	r2, [r1, r2]
 8000d62:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <cubemx_transport_read+0xa0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <cubemx_transport_read+0xa0>)
 8000d70:	6013      	str	r3, [r2, #0]
        wrote++;
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	3301      	adds	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <cubemx_transport_read+0xa0>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <cubemx_transport_read+0x9c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d003      	beq.n	8000d8c <cubemx_transport_read+0x90>
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3e3      	bcc.n	8000d54 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000d8c:	69bb      	ldr	r3, [r7, #24]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20004530 	.word	0x20004530
 8000d9c:	2000452c 	.word	0x2000452c
 8000da0:	20003d2c 	.word	0x20003d2c

08000da4 <map>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	ed87 0a05 	vstr	s0, [r7, #20]
 8000dae:	edc7 0a04 	vstr	s1, [r7, #16]
 8000db2:	ed87 1a03 	vstr	s2, [r7, #12]
 8000db6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000dba:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8000dbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dca:	edd7 6a01 	vldr	s13, [r7, #4]
 8000dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dd6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000dda:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000df2:	eeb0 0a67 	vmov.f32	s0, s15
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <subscription_callback>:

void subscription_callback(const void *msgin) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	const geometry_msgs__msg__Twist *twist_msg = (const geometry_msgs__msg__Twist *)msgin;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
	led1= twist_msg->linear.x;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fa83 	bl	8000320 <__aeabi_d2f>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <subscription_callback+0x100>)
 8000e1e:	6013      	str	r3, [r2, #0]
	led2= twist_msg->linear.y;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fa79 	bl	8000320 <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <subscription_callback+0x104>)
 8000e32:	6013      	str	r3, [r2, #0]
	led3= twist_msg->angular.z;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fa6f 	bl	8000320 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a30      	ldr	r2, [pc, #192]	; (8000f08 <subscription_callback+0x108>)
 8000e46:	6013      	str	r3, [r2, #0]

	Red=map(led1,0,255,0,65535);
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <subscription_callback+0x100>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8000f0c <subscription_callback+0x10c>
 8000e52:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8000f10 <subscription_callback+0x110>
 8000e56:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8000f14 <subscription_callback+0x114>
 8000e5a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8000f10 <subscription_callback+0x110>
 8000e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e62:	f7ff ff9f 	bl	8000da4 <map>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <subscription_callback+0x118>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
	Green=map(led2,0,255,0,65535);
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <subscription_callback+0x104>)
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8000f0c <subscription_callback+0x10c>
 8000e7a:	eddf 1a25 	vldr	s3, [pc, #148]	; 8000f10 <subscription_callback+0x110>
 8000e7e:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8000f14 <subscription_callback+0x114>
 8000e82:	eddf 0a23 	vldr	s1, [pc, #140]	; 8000f10 <subscription_callback+0x110>
 8000e86:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8a:	f7ff ff8b 	bl	8000da4 <map>
 8000e8e:	eef0 7a40 	vmov.f32	s15, s0
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <subscription_callback+0x11c>)
 8000e94:	edc3 7a00 	vstr	s15, [r3]
	Blue=map(led3,0,255,0,65535);
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <subscription_callback+0x108>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8000f0c <subscription_callback+0x10c>
 8000ea2:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8000f10 <subscription_callback+0x110>
 8000ea6:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8000f14 <subscription_callback+0x114>
 8000eaa:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000f10 <subscription_callback+0x110>
 8000eae:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb2:	f7ff ff77 	bl	8000da4 <map>
 8000eb6:	eef0 7a40 	vmov.f32	s15, s0
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <subscription_callback+0x120>)
 8000ebc:	edc3 7a00 	vstr	s15, [r3]

	TIM3->CCR1=Red;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <subscription_callback+0x118>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <subscription_callback+0x124>)
 8000ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ecc:	ee17 2a90 	vmov	r2, s15
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=Green;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <subscription_callback+0x11c>)
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <subscription_callback+0x124>)
 8000eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ede:	ee17 2a90 	vmov	r2, s15
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3=Blue;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <subscription_callback+0x120>)
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <subscription_callback+0x124>)
 8000eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef0:	ee17 2a90 	vmov	r2, s15
 8000ef4:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20004540 	.word	0x20004540
 8000f04:	20004544 	.word	0x20004544
 8000f08:	20004548 	.word	0x20004548
 8000f0c:	477fff00 	.word	0x477fff00
 8000f10:	00000000 	.word	0x00000000
 8000f14:	437f0000 	.word	0x437f0000
 8000f18:	20004534 	.word	0x20004534
 8000f1c:	20004538 	.word	0x20004538
 8000f20:	2000453c 	.word	0x2000453c
 8000f24:	40000400 	.word	0x40000400

08000f28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	//Create a Task handle
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <MX_FREERTOS_Init+0x38>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_FREERTOS_Init+0x3c>)
 8000f32:	f004 fefb 	bl	8005d2c <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <MX_FREERTOS_Init+0x40>)
 8000f3a:	6013      	str	r3, [r2, #0]

	//Create Task lED
	led1Handle = osThreadNew(Led1Task, NULL, &led1_attributes);
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <MX_FREERTOS_Init+0x44>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <MX_FREERTOS_Init+0x48>)
 8000f42:	f004 fef3 	bl	8005d2c <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <MX_FREERTOS_Init+0x4c>)
 8000f4a:	6013      	str	r3, [r2, #0]

	led2Handle = osThreadNew(Led2Task, NULL, &led2_attributes);
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <MX_FREERTOS_Init+0x50>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <MX_FREERTOS_Init+0x54>)
 8000f52:	f004 feeb 	bl	8005d2c <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <MX_FREERTOS_Init+0x58>)
 8000f5a:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	08014ccc 	.word	0x08014ccc
 8000f64:	08000f85 	.word	0x08000f85
 8000f68:	20004584 	.word	0x20004584
 8000f6c:	08014cf0 	.word	0x08014cf0
 8000f70:	080010e9 	.word	0x080010e9
 8000f74:	20004588 	.word	0x20004588
 8000f78:	08014d14 	.word	0x08014d14
 8000f7c:	080010f9 	.word	0x080010f9
 8000f80:	2000458c 	.word	0x2000458c

08000f84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b0c8      	sub	sp, #288	; 0x120
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	rmw_uros_set_custom_transport(
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <StartDefaultTask+0x120>)
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <StartDefaultTask+0x124>)
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <StartDefaultTask+0x128>)
 8000f96:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <StartDefaultTask+0x12c>)
 8000f98:	4946      	ldr	r1, [pc, #280]	; (80010b4 <StartDefaultTask+0x130>)
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f009 ff24 	bl	800ade8 <rmw_uros_set_custom_transport>
			    cubemx_transport_open,
			    cubemx_transport_close,
			    cubemx_transport_write,
			    cubemx_transport_read);

			  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000fa0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f009 fc8b 	bl	800a8c0 <rcutils_get_zero_initialized_allocator>
			  freeRTOS_allocator.allocate = microros_allocate;
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <StartDefaultTask+0x134>)
 8000fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			  freeRTOS_allocator.deallocate = microros_deallocate;
 8000fb0:	4b42      	ldr	r3, [pc, #264]	; (80010bc <StartDefaultTask+0x138>)
 8000fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			  freeRTOS_allocator.reallocate = microros_reallocate;
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <StartDefaultTask+0x13c>)
 8000fb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <StartDefaultTask+0x140>)
 8000fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

			  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000fc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f009 fc88 	bl	800a8dc <rcutils_set_default_allocator>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f083 0301 	eor.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <StartDefaultTask+0x5c>
			      printf("Error on default allocators (line %d)\n", __LINE__);
 8000fd8:	21d2      	movs	r1, #210	; 0xd2
 8000fda:	483b      	ldr	r0, [pc, #236]	; (80010c8 <StartDefaultTask+0x144>)
 8000fdc:	f012 fb94 	bl	8013708 <iprintf>

			  // micro-ROS App //
			  rclc_executor_t executor;
			  // Initialize micro-ROS allocator
			  rcl_allocator_t allocator;
			  allocator = rcl_get_default_allocator();
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f009 fc9a 	bl	800a91c <rcutils_get_default_allocator>
 8000fe8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ff0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	6023      	str	r3, [r4, #0]

			  // Initialize support object
			  rclc_support_t support;
			  rclc_support_init(&support, 0, NULL, &allocator);
 8000ffe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001002:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	f009 fb93 	bl	800a734 <rclc_support_init>

			  // Create node object
			  rcl_node_t node;
			  rclc_node_init_default(&node, "stm32f446re_node", "", &support);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <StartDefaultTask+0x148>)
 8001018:	492d      	ldr	r1, [pc, #180]	; (80010d0 <StartDefaultTask+0x14c>)
 800101a:	f009 fbd9 	bl	800a7d0 <rclc_node_init_default>

			  //Create Subscription
			  const char * sub_topic_name = "/cmd_vel";
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <StartDefaultTask+0x150>)
 8001020:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			  const rosidl_message_type_support_t * sub_type_support = ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8001024:	f007 fbb2 	bl	800878c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001028:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
			  rclc_subscription_init_default(
 800102c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001034:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001038:	4827      	ldr	r0, [pc, #156]	; (80010d8 <StartDefaultTask+0x154>)
 800103a:	f009 fc05 	bl	800a848 <rclc_subscription_init_default>
			      &node,
				  sub_type_support,
				  sub_topic_name);

			   // create executor
			  rclc_executor_init(&executor, &support.context, 1, &allocator);
 800103e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001046:	1d19      	adds	r1, r3, #4
 8001048:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800104c:	4613      	mov	r3, r2
 800104e:	2201      	movs	r2, #1
 8001050:	f009 f90e 	bl	800a270 <rclc_executor_init>
			  rclc_executor_add_subscription(&executor, &subscriber, &twist_msg, &subscription_callback, ON_NEW_DATA);
 8001054:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001058:	2300      	movs	r3, #0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <StartDefaultTask+0x158>)
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <StartDefaultTask+0x15c>)
 8001060:	491d      	ldr	r1, [pc, #116]	; (80010d8 <StartDefaultTask+0x154>)
 8001062:	f009 f979 	bl	800a358 <rclc_executor_add_subscription>

			  // Spin executor to receive messages
			  rclc_executor_prepare(&executor);
 8001066:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800106a:	4618      	mov	r0, r3
 800106c:	f009 f9ae 	bl	800a3cc <rclc_executor_prepare>
			  rclc_executor_spin(&executor);
 8001070:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001074:	4618      	mov	r0, r3
 8001076:	f009 fb23 	bl	800a6c0 <rclc_executor_spin>

			    for(;;)
			    {

			    	rcl_ret_t ret;
			      ret = rcl_subscription_fini(&subscriber, &node);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4815      	ldr	r0, [pc, #84]	; (80010d8 <StartDefaultTask+0x154>)
 8001082:	f008 ff57 	bl	8009f34 <rcl_subscription_fini>
 8001086:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			      if (ret != RCL_RET_OK)
 800108a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <StartDefaultTask+0x116>
			      {
			        printf("Error publishing (line %d)\n", __LINE__);
 8001092:	21fb      	movs	r1, #251	; 0xfb
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <StartDefaultTask+0x160>)
 8001096:	f012 fb37 	bl	8013708 <iprintf>
			      }
			      osDelay(10);
 800109a:	200a      	movs	r0, #10
 800109c:	f004 fed8 	bl	8005e50 <osDelay>
			    {
 80010a0:	e7eb      	b.n	800107a <StartDefaultTask+0xf6>
 80010a2:	bf00      	nop
 80010a4:	08000cfd 	.word	0x08000cfd
 80010a8:	08000c95 	.word	0x08000c95
 80010ac:	08000c75 	.word	0x08000c75
 80010b0:	08000c49 	.word	0x08000c49
 80010b4:	20004630 	.word	0x20004630
 80010b8:	0800131d 	.word	0x0800131d
 80010bc:	08001361 	.word	0x08001361
 80010c0:	08001399 	.word	0x08001399
 80010c4:	08001405 	.word	0x08001405
 80010c8:	08014c0c 	.word	0x08014c0c
 80010cc:	08014c34 	.word	0x08014c34
 80010d0:	08014c38 	.word	0x08014c38
 80010d4:	08014c4c 	.word	0x08014c4c
 80010d8:	20004580 	.word	0x20004580
 80010dc:	08000e01 	.word	0x08000e01
 80010e0:	20004550 	.word	0x20004550
 80010e4:	08014c58 	.word	0x08014c58

080010e8 <Led1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led1Task */
void Led1Task(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led1Task */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f004 fead 	bl	8005e50 <osDelay>
 80010f6:	e7fb      	b.n	80010f0 <Led1Task+0x8>

080010f8 <Led2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led2Task */
void Led2Task(void *argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //TIM3->CCR1= (twist_msg.x)*100 ;

    osDelay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f004 fea5 	bl	8005e50 <osDelay>
 8001106:	e7fb      	b.n	8001100 <Led2Task+0x8>

08001108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_GPIO_Init+0x68>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <MX_GPIO_Init+0x68>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_GPIO_Init+0x68>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_GPIO_Init+0x68>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <MX_GPIO_Init+0x68>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_GPIO_Init+0x68>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_GPIO_Init+0x68>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <MX_GPIO_Init+0x68>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_GPIO_Init+0x68>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b598      	push	{r3, r4, r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f000 fe00 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f844 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f7ff ffc2 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 8001184:	f7ff fd38 	bl	8000bf8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001188:	f000 fcec 	bl	8001b64 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800118c:	f000 fbe2 	bl	8001954 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001190:	2100      	movs	r1, #0
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <main+0x80>)
 8001194:	f002 fbaa 	bl	80038ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001198:	2104      	movs	r1, #4
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <main+0x80>)
 800119c:	f002 fba6 	bl	80038ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011a0:	2108      	movs	r1, #8
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <main+0x80>)
 80011a4:	f002 fba2 	bl	80038ec <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011a8:	f004 fd76 	bl	8005c98 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011ac:	f7ff febc 	bl	8000f28 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011b0:	f004 fd96 	bl	8005ce0 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //TIM3->CCR1=led1*1000;
	  TIM3->CCR1=Red;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <main+0x84>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	4c10      	ldr	r4, [pc, #64]	; (80011fc <main+0x88>)
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff f88e 	bl	80002e0 <__aeabi_d2uiz>
 80011c4:	4603      	mov	r3, r0
 80011c6:	6363      	str	r3, [r4, #52]	; 0x34
	  	TIM3->CCR2=Green;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <main+0x8c>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <main+0x88>)
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff f884 	bl	80002e0 <__aeabi_d2uiz>
 80011d8:	4603      	mov	r3, r0
 80011da:	63a3      	str	r3, [r4, #56]	; 0x38
	  	TIM3->CCR3=Blue;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <main+0x90>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	4c06      	ldr	r4, [pc, #24]	; (80011fc <main+0x88>)
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff f87a 	bl	80002e0 <__aeabi_d2uiz>
 80011ec:	4603      	mov	r3, r0
 80011ee:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM3->CCR1=Red;
 80011f0:	e7e0      	b.n	80011b4 <main+0x40>
 80011f2:	bf00      	nop
 80011f4:	200045e8 	.word	0x200045e8
 80011f8:	20004534 	.word	0x20004534
 80011fc:	40000400 	.word	0x40000400
 8001200:	20004538 	.word	0x20004538
 8001204:	2000453c 	.word	0x2000453c

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2234      	movs	r2, #52	; 0x34
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f012 f978 	bl	801350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <SystemClock_Config+0xdc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <SystemClock_Config+0xdc>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <SystemClock_Config+0xdc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <SystemClock_Config+0xe0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <SystemClock_Config+0xe0>)
 8001252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <SystemClock_Config+0xe0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001278:	2308      	movs	r3, #8
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800127c:	23b4      	movs	r3, #180	; 0xb4
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001288:	2302      	movs	r3, #2
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4618      	mov	r0, r3
 8001292:	f001 ff73 	bl	800317c <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800129c:	f000 f838 	bl	8001310 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012a0:	f001 fc26 	bl	8002af0 <HAL_PWREx_EnableOverDrive>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012aa:	f000 f831 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fc5f 	bl	8002b90 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012d8:	f000 f81a 	bl	8001310 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	; 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fe:	f000 fd5f 	bl	8001dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010000 	.word	0x40010000

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>
	...

0800131c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <microros_allocate+0x3c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <microros_allocate+0x3c>)
 8001334:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <microros_allocate+0x40>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <microros_allocate+0x40>)
 8001344:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fa0c 	bl	8000764 <pvPortMallocMicroROS>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20004590 	.word	0x20004590
 800135c:	20004594 	.word	0x20004594

08001360 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00c      	beq.n	800138a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fb15 	bl	80009a0 <getBlockSize>
 8001376:	4603      	mov	r3, r0
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <microros_deallocate+0x34>)
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	461a      	mov	r2, r3
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <microros_deallocate+0x34>)
 8001382:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fab1 	bl	80008ec <vPortFreeMicroROS>
  }
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20004594 	.word	0x20004594

08001398 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <microros_reallocate+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <microros_reallocate+0x64>)
 80013b2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <microros_reallocate+0x68>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	461a      	mov	r2, r3
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <microros_reallocate+0x68>)
 80013c2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f7ff f9ca 	bl	8000764 <pvPortMallocMicroROS>
 80013d0:	4603      	mov	r3, r0
 80013d2:	e00e      	b.n	80013f2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff fae3 	bl	80009a0 <getBlockSize>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a08      	ldr	r2, [pc, #32]	; (8001400 <microros_reallocate+0x68>)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <microros_reallocate+0x68>)
 80013e6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff faf6 	bl	80009dc <pvPortReallocMicroROS>
 80013f0:	4603      	mov	r3, r0
  }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20004590 	.word	0x20004590
 8001400:	20004594 	.word	0x20004594

08001404 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <microros_zero_allocate+0x48>)
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	4413      	add	r3, r2
 800141e:	461a      	mov	r2, r3
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <microros_zero_allocate+0x48>)
 8001422:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <microros_zero_allocate+0x4c>)
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	4413      	add	r3, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <microros_zero_allocate+0x4c>)
 8001436:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff fafb 	bl	8000a36 <pvPortCallocMicroROS>
 8001440:	4603      	mov	r3, r0
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20004590 	.word	0x20004590
 8001450:	20004594 	.word	0x20004594
 8001454:	00000000 	.word	0x00000000

08001458 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800146a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800146e:	a320      	add	r3, pc, #128	; (adr r3, 80014f0 <UTILS_NanosecondsToTimespec+0x98>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7fe ffa4 	bl	80003c0 <__aeabi_ldivmod>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001486:	a31a      	add	r3, pc, #104	; (adr r3, 80014f0 <UTILS_NanosecondsToTimespec+0x98>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7fe ff98 	bl	80003c0 <__aeabi_ldivmod>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da20      	bge.n	80014de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <UTILS_NanosecondsToTimespec+0x90>)
 80014a2:	fb82 1203 	smull	r1, r2, r2, r3
 80014a6:	1712      	asrs	r2, r2, #28
 80014a8:	17db      	asrs	r3, r3, #31
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	6979      	ldr	r1, [r7, #20]
 80014b8:	17c8      	asrs	r0, r1, #31
 80014ba:	460c      	mov	r4, r1
 80014bc:	4605      	mov	r5, r0
 80014be:	ebb2 0804 	subs.w	r8, r2, r4
 80014c2:	eb63 0905 	sbc.w	r9, r3, r5
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	4906      	ldr	r1, [pc, #24]	; (80014ec <UTILS_NanosecondsToTimespec+0x94>)
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	441a      	add	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
    }
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e8:	44b82fa1 	.word	0x44b82fa1
 80014ec:	3b9aca00 	.word	0x3b9aca00
 80014f0:	3b9aca00 	.word	0x3b9aca00
 80014f4:	00000000 	.word	0x00000000

080014f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80014f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014fc:	b08e      	sub	sp, #56	; 0x38
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6278      	str	r0, [r7, #36]	; 0x24
 8001502:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001508:	2300      	movs	r3, #0
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800151a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151e:	4618      	mov	r0, r3
 8001520:	f005 ff4a 	bl	80073b8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	17da      	asrs	r2, r3, #31
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	61fa      	str	r2, [r7, #28]
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	000b      	movs	r3, r1
 8001538:	2200      	movs	r2, #0
 800153a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	2200      	movs	r2, #0
 8001542:	461c      	mov	r4, r3
 8001544:	4615      	mov	r5, r2
 8001546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154a:	1911      	adds	r1, r2, r4
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	416b      	adcs	r3, r5
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001556:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800155a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	f04f 0400 	mov.w	r4, #0
 8001566:	f04f 0500 	mov.w	r5, #0
 800156a:	015d      	lsls	r5, r3, #5
 800156c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001570:	0154      	lsls	r4, r2, #5
 8001572:	4622      	mov	r2, r4
 8001574:	462b      	mov	r3, r5
 8001576:	ebb2 0800 	subs.w	r8, r2, r0
 800157a:	eb63 0901 	sbc.w	r9, r3, r1
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800158a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800158e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001592:	4690      	mov	r8, r2
 8001594:	4699      	mov	r9, r3
 8001596:	eb18 0a00 	adds.w	sl, r8, r0
 800159a:	eb49 0b01 	adc.w	fp, r9, r1
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015b2:	ebb2 040a 	subs.w	r4, r2, sl
 80015b6:	603c      	str	r4, [r7, #0]
 80015b8:	eb63 030b 	sbc.w	r3, r3, fp
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015c2:	4623      	mov	r3, r4
 80015c4:	181b      	adds	r3, r3, r0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	462b      	mov	r3, r5
 80015ca:	eb41 0303 	adc.w	r3, r1, r3
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	6a3a      	ldr	r2, [r7, #32]
 80015d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d6:	f7ff ff3f 	bl	8001458 <UTILS_NanosecondsToTimespec>

    return 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	3738      	adds	r7, #56	; 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_MspInit+0x54>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_MspInit+0x54>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x54>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_MspInit+0x54>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_MspInit+0x54>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_MspInit+0x54>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	210f      	movs	r1, #15
 800162a:	f06f 0001 	mvn.w	r0, #1
 800162e:	f000 fc9f 	bl	8001f70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_InitTick+0xd4>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <HAL_InitTick+0xd4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6453      	str	r3, [r2, #68]	; 0x44
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_InitTick+0xd4>)
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800166c:	f107 020c 	add.w	r2, r7, #12
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f001 fba4 	bl	8002dc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800167c:	f001 fb8e 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8001680:	4603      	mov	r3, r0
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	4a23      	ldr	r2, [pc, #140]	; (8001718 <HAL_InitTick+0xd8>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9b      	lsrs	r3, r3, #18
 8001690:	3b01      	subs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_InitTick+0xdc>)
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_InitTick+0xe0>)
 8001698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_InitTick+0xdc>)
 800169c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_InitTick+0xdc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_InitTick+0xdc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_InitTick+0xdc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_InitTick+0xdc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <HAL_InitTick+0xdc>)
 80016bc:	f001 fffc 	bl	80036b8 <HAL_TIM_Base_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11b      	bne.n	8001706 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <HAL_InitTick+0xdc>)
 80016d0:	f002 f842 	bl	8003758 <HAL_TIM_Base_Start_IT>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d111      	bne.n	8001706 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016e2:	2019      	movs	r0, #25
 80016e4:	f000 fc60 	bl	8001fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d808      	bhi.n	8001700 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016ee:	2200      	movs	r2, #0
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	2019      	movs	r0, #25
 80016f4:	f000 fc3c 	bl	8001f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_InitTick+0xe4>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e002      	b.n	8001706 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800170a:	4618      	mov	r0, r3
 800170c:	3730      	adds	r7, #48	; 0x30
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	431bde83 	.word	0x431bde83
 800171c:	20004598 	.word	0x20004598
 8001720:	40010000 	.word	0x40010000
 8001724:	20000008 	.word	0x20000008

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <DMA1_Stream5_IRQHandler+0x10>)
 800175a:	f000 fdcb 	bl	80022f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20004674 	.word	0x20004674

08001768 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Stream6_IRQHandler+0x10>)
 800176e:	f000 fdc1 	bl	80022f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200046d4 	.word	0x200046d4

0800177c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001782:	f002 f97b 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20004598 	.word	0x20004598

08001790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <USART2_IRQHandler+0x10>)
 8001796:	f003 f947 	bl	8004a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20004630 	.word	0x20004630

080017a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return 1;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_kill>:

int _kill(int pid, int sig)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017be:	f011 fdfb 	bl	80133b8 <__errno>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2216      	movs	r2, #22
 80017c6:	601a      	str	r2, [r3, #0]
  return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_exit>:

void _exit (int status)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffe7 	bl	80017b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e6:	e7fe      	b.n	80017e6 <_exit+0x12>

080017e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e00a      	b.n	8001810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fa:	f3af 8000 	nop.w
 80017fe:	4601      	mov	r1, r0
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf0      	blt.n	80017fa <_read+0x12>
  }

  return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e009      	b.n	8001848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf1      	blt.n	8001834 <_write+0x12>
  }
  return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_close>:

int _close(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	605a      	str	r2, [r3, #4]
  return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_isatty>:

int _isatty(int file)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f011 fd60 	bl	80133b8 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20020000 	.word	0x20020000
 8001924:	00000400 	.word	0x00000400
 8001928:	200045e4 	.word	0x200045e4
 800192c:	2000dbe8 	.word	0x2000dbe8

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <SystemInit+0x20>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <SystemInit+0x20>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08e      	sub	sp, #56	; 0x38
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001986:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <MX_TIM3_Init+0x114>)
 8001988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198a:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <MX_TIM3_Init+0x110>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <MX_TIM3_Init+0x110>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <MX_TIM3_Init+0x110>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019aa:	482e      	ldr	r0, [pc, #184]	; (8001a64 <MX_TIM3_Init+0x110>)
 80019ac:	f001 fe84 	bl	80036b8 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019b6:	f7ff fcab 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4827      	ldr	r0, [pc, #156]	; (8001a64 <MX_TIM3_Init+0x110>)
 80019c8:	f002 fa22 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019d2:	f7ff fc9d 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019d6:	4823      	ldr	r0, [pc, #140]	; (8001a64 <MX_TIM3_Init+0x110>)
 80019d8:	f001 ff2e 	bl	8003838 <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019e2:	f7ff fc95 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4619      	mov	r1, r3
 80019f4:	481b      	ldr	r0, [pc, #108]	; (8001a64 <MX_TIM3_Init+0x110>)
 80019f6:	f002 fe0b 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a00:	f7ff fc86 	bl	8001310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4812      	ldr	r0, [pc, #72]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001a1c:	f002 f936 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a26:	f7ff fc73 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001a32:	f002 f92b 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a3c:	f7ff fc68 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2208      	movs	r2, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001a48:	f002 f920 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001a52:	f7ff fc5d 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM3_Init+0x110>)
 8001a58:	f000 f82a 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 8001a5c:	bf00      	nop
 8001a5e:	3738      	adds	r7, #56	; 0x38
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200045e8 	.word	0x200045e8
 8001a68:	40000400 	.word	0x40000400

08001a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10d      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_Base_MspInit+0x40>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_TIM_Base_MspInit+0x40>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_TIM_Base_MspInit+0x40>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d13b      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_TIM_MspPostInit+0xa8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <HAL_TIM_MspPostInit+0xac>)
 8001b26:	f000 fe4f 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <HAL_TIM_MspPostInit+0xb0>)
 8001b46:	f000 fe3f 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400

08001b64 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_USART2_UART_Init+0x50>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	f002 fdc8 	bl	8004730 <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ba6:	f7ff fbb3 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20004630 	.word	0x20004630
 8001bb4:	40004400 	.word	0x40004400

08001bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4d      	ldr	r2, [pc, #308]	; (8001d0c <HAL_UART_MspInit+0x154>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	f040 8093 	bne.w	8001d02 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_UART_MspInit+0x158>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c14:	230c      	movs	r3, #12
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c24:	2307      	movs	r3, #7
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4839      	ldr	r0, [pc, #228]	; (8001d14 <HAL_UART_MspInit+0x15c>)
 8001c30:	f000 fdca 	bl	80027c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c36:	4a39      	ldr	r2, [pc, #228]	; (8001d1c <HAL_UART_MspInit+0x164>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c3a:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c42:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c48:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c68:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c78:	4827      	ldr	r0, [pc, #156]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c7a:	f000 f9a3 	bl	8001fc4 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001c84:	f7ff fb44 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c8e:	4a22      	ldr	r2, [pc, #136]	; (8001d18 <HAL_UART_MspInit+0x160>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_UART_MspInit+0x16c>)
 8001c98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001ca4:	2240      	movs	r2, #64	; 0x40
 8001ca6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cd8:	f000 f974 	bl	8001fc4 <HAL_DMA_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001ce2:	f7ff fb15 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
 8001cec:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <HAL_UART_MspInit+0x168>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	2026      	movs	r0, #38	; 0x26
 8001cf8:	f000 f93a 	bl	8001f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cfc:	2026      	movs	r0, #38	; 0x26
 8001cfe:	f000 f953 	bl	8001fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40004400 	.word	0x40004400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	20004674 	.word	0x20004674
 8001d1c:	40026088 	.word	0x40026088
 8001d20:	200046d4 	.word	0x200046d4
 8001d24:	400260a0 	.word	0x400260a0

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2e:	490e      	ldr	r1, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d52:	f7ff fded 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f011 fb7d 	bl	8013454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff fa0b 	bl	8001174 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001d6c:	08015858 	.word	0x08015858
  ldr r2, =_sbss
 8001d70:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001d74:	2000dbe8 	.word	0x2000dbe8

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f8d8 	bl	8001f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f7ff fc48 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fc1a 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	20004734 	.word	0x20004734

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20004734 	.word	0x20004734

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ff4c 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f82:	f7ff ff61 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f7ff ffb1 	bl	8001ef4 <NVIC_EncodePriority>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff80 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fa0:	bf00      	nop
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff54 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff ff0a 	bl	8001de8 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e099      	b.n	8002114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002000:	e00f      	b.n	8002022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002002:	f7ff fef1 	bl	8001de8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b05      	cmp	r3, #5
 800200e:	d908      	bls.n	8002022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2203      	movs	r2, #3
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e078      	b.n	8002114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e8      	bne.n	8002002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_DMA_Init+0x158>)
 800203c:	4013      	ands	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2b04      	cmp	r3, #4
 800207a:	d107      	bne.n	800208c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4313      	orrs	r3, r2
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d117      	bne.n	80020e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fb01 	bl	80026d0 <DMA_CheckFifoParam>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	; 0x40
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020e2:	2301      	movs	r3, #1
 80020e4:	e016      	b.n	8002114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fab8 	bl	8002664 <DMA_CalcBaseAndBitshift>
 80020f4:	4603      	mov	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	223f      	movs	r2, #63	; 0x3f
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	f010803f 	.word	0xf010803f

08002120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_DMA_Start_IT+0x26>
 8002142:	2302      	movs	r3, #2
 8002144:	e040      	b.n	80021c8 <HAL_DMA_Start_IT+0xa8>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d12f      	bne.n	80021ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fa4a 	bl	8002608 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	223f      	movs	r2, #63	; 0x3f
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0216 	orr.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0208 	orr.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e005      	b.n	80021c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021de:	f7ff fe03 	bl	8001de8 <HAL_GetTick>
 80021e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d008      	beq.n	8002202 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e052      	b.n	80022a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0216 	bic.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002220:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_DMA_Abort+0x62>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0208 	bic.w	r2, r2, #8
 8002240:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002252:	e013      	b.n	800227c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002254:	f7ff fdc8 	bl	8001de8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b05      	cmp	r3, #5
 8002260:	d90c      	bls.n	800227c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2203      	movs	r2, #3
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e015      	b.n	80022a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e4      	bne.n	8002254 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	223f      	movs	r2, #63	; 0x3f
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00c      	b.n	80022e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2205      	movs	r2, #5
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002300:	4b8e      	ldr	r3, [pc, #568]	; (800253c <HAL_DMA_IRQHandler+0x248>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a8e      	ldr	r2, [pc, #568]	; (8002540 <HAL_DMA_IRQHandler+0x24c>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a9b      	lsrs	r3, r3, #10
 800230c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2208      	movs	r2, #8
 8002320:	409a      	lsls	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0204 	bic.w	r2, r2, #4
 8002346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	2208      	movs	r2, #8
 800234e:	409a      	lsls	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	2201      	movs	r2, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	2201      	movs	r2, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f043 0202 	orr.w	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	2204      	movs	r2, #4
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	2204      	movs	r2, #4
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f043 0204 	orr.w	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2210      	movs	r2, #16
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d043      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d03c      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2210      	movs	r2, #16
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d018      	beq.n	8002436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
 8002422:	e01f      	b.n	8002464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e016      	b.n	8002464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0208 	bic.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2220      	movs	r2, #32
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 808f 	beq.w	8002594 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8087 	beq.w	8002594 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2220      	movs	r2, #32
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b05      	cmp	r3, #5
 800249c:	d136      	bne.n	800250c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0216 	bic.w	r2, r2, #22
 80024ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <HAL_DMA_IRQHandler+0x1da>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0208 	bic.w	r2, r2, #8
 80024dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	223f      	movs	r2, #63	; 0x3f
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d07e      	beq.n	8002600 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
        }
        return;
 800250a:	e079      	b.n	8002600 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01d      	beq.n	8002556 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10d      	bne.n	8002544 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	2b00      	cmp	r3, #0
 800252e:	d031      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e02c      	b.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
 800253a:	bf00      	nop
 800253c:	20000004 	.word	0x20000004
 8002540:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d023      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
 8002554:	e01e      	b.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0210 	bic.w	r2, r2, #16
 8002572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d032      	beq.n	8002602 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2205      	movs	r2, #5
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3301      	adds	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d307      	bcc.n	80025dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f2      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x2cc>
 80025da:	e000      	b.n	80025de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
 80025fe:	e000      	b.n	8002602 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002600:	bf00      	nop
    }
  }
}
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002624:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d108      	bne.n	8002648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002646:	e007      	b.n	8002658 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3b10      	subs	r3, #16
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <DMA_CalcBaseAndBitshift+0x68>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d909      	bls.n	80026a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	1d1a      	adds	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58
 80026a4:	e007      	b.n	80026b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ae:	f023 0303 	bic.w	r3, r3, #3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	aaaaaaab 	.word	0xaaaaaaab
 80026cc:	08014d50 	.word	0x08014d50

080026d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11f      	bne.n	800272a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d856      	bhi.n	800279e <DMA_CheckFifoParam+0xce>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <DMA_CheckFifoParam+0x28>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	08002709 	.word	0x08002709
 80026fc:	0800271b 	.word	0x0800271b
 8002700:	08002709 	.word	0x08002709
 8002704:	0800279f 	.word	0x0800279f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d046      	beq.n	80027a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e043      	b.n	80027a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002722:	d140      	bne.n	80027a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002728:	e03d      	b.n	80027a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002732:	d121      	bne.n	8002778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d837      	bhi.n	80027aa <DMA_CheckFifoParam+0xda>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <DMA_CheckFifoParam+0x70>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002757 	.word	0x08002757
 8002748:	08002751 	.word	0x08002751
 800274c:	08002769 	.word	0x08002769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e030      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d025      	beq.n	80027ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002766:	e022      	b.n	80027ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002770:	d11f      	bne.n	80027b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002776:	e01c      	b.n	80027b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d903      	bls.n	8002786 <DMA_CheckFifoParam+0xb6>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d003      	beq.n	800278c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002784:	e018      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      break;
 800278a:	e015      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e00b      	b.n	80027b6 <DMA_CheckFifoParam+0xe6>
      break;
 800279e:	bf00      	nop
 80027a0:	e00a      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e008      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e006      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e004      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <DMA_CheckFifoParam+0xe8>
      break;
 80027b6:	bf00      	nop
    }
  } 
  
  return status; 
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e165      	b.n	8002ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8154 	bne.w	8002aaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ae 	beq.w	8002aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a58      	ldr	r2, [pc, #352]	; (8002acc <HAL_GPIO_Init+0x304>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x308>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x216>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x314>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x318>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x206>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_GPIO_Init+0x320>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x202>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	; (8002acc <HAL_GPIO_Init+0x304>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae96 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b1c:	f7ff f964 	bl	8001de8 <HAL_GetTick>
 8002b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b22:	e009      	b.n	8002b38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b24:	f7ff f960 	bl	8001de8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b32:	d901      	bls.n	8002b38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e01f      	b.n	8002b78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d1ee      	bne.n	8002b24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4c:	f7ff f94c 	bl	8001de8 <HAL_GetTick>
 8002b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b52:	e009      	b.n	8002b68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b54:	f7ff f948 	bl	8001de8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b62:	d901      	bls.n	8002b68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e007      	b.n	8002b78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b74:	d1ee      	bne.n	8002b54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	420e0040 	.word	0x420e0040
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	420e0044 	.word	0x420e0044

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cc      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d90c      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d044      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e067      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4934      	ldr	r1, [pc, #208]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7ff f8b2 	bl	8001de8 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7ff f8ae 	bl	8001de8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d20c      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f887 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fc82 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08014d38 	.word	0x08014d38
 8002d54:	20000004 	.word	0x20000004
 8002d58:	20000008 	.word	0x20000008

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000004 	.word	0x20000004

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08014d48 	.word	0x08014d48

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffdc 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0b5b      	lsrs	r3, r3, #13
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	08014d48 	.word	0x08014d48

08002dc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCC_GetClockConfig+0x60>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40023c00 	.word	0x40023c00

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0a6      	sub	sp, #152	; 0x98
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4e:	4bc8      	ldr	r3, [pc, #800]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	f200 817e 	bhi.w	8003158 <HAL_RCC_GetSysClockFreq+0x330>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08003159 	.word	0x08003159
 8002e6c:	08003159 	.word	0x08003159
 8002e70:	08003159 	.word	0x08003159
 8002e74:	08002ea1 	.word	0x08002ea1
 8002e78:	08003159 	.word	0x08003159
 8002e7c:	08003159 	.word	0x08003159
 8002e80:	08003159 	.word	0x08003159
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08003159 	.word	0x08003159
 8002e8c:	08003159 	.word	0x08003159
 8002e90:	08003159 	.word	0x08003159
 8002e94:	08003013 	.word	0x08003013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4bb6      	ldr	r3, [pc, #728]	; (8003174 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002e9e:	e15f      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea0:	4bb5      	ldr	r3, [pc, #724]	; (8003178 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ea6:	e15b      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea8:	4bb1      	ldr	r3, [pc, #708]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb4:	4bae      	ldr	r3, [pc, #696]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d031      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4bab      	ldr	r3, [pc, #684]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed8:	4ba7      	ldr	r3, [pc, #668]	; (8003178 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eda:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ede:	462a      	mov	r2, r5
 8002ee0:	fb03 f202 	mul.w	r2, r3, r2
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	4aa2      	ldr	r2, [pc, #648]	; (8003178 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	fba1 1202 	umull	r1, r2, r1, r2
 8002ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ef8:	460a      	mov	r2, r1
 8002efa:	67ba      	str	r2, [r7, #120]	; 0x78
 8002efc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002efe:	4413      	add	r3, r2
 8002f00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f06:	2200      	movs	r2, #0
 8002f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002f14:	f7fd faa4 	bl	8000460 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f22:	e064      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f2e:	657a      	str	r2, [r7, #84]	; 0x54
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f40:	4622      	mov	r2, r4
 8002f42:	462b      	mov	r3, r5
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	0159      	lsls	r1, r3, #5
 8002f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f52:	0150      	lsls	r0, r2, #5
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4621      	mov	r1, r4
 8002f5a:	1a51      	subs	r1, r2, r1
 8002f5c:	6139      	str	r1, [r7, #16]
 8002f5e:	4629      	mov	r1, r5
 8002f60:	eb63 0301 	sbc.w	r3, r3, r1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f72:	4659      	mov	r1, fp
 8002f74:	018b      	lsls	r3, r1, #6
 8002f76:	4651      	mov	r1, sl
 8002f78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7c:	4651      	mov	r1, sl
 8002f7e:	018a      	lsls	r2, r1, #6
 8002f80:	4651      	mov	r1, sl
 8002f82:	ebb2 0801 	subs.w	r8, r2, r1
 8002f86:	4659      	mov	r1, fp
 8002f88:	eb63 0901 	sbc.w	r9, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa0:	4690      	mov	r8, r2
 8002fa2:	4699      	mov	r9, r3
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	eb18 0303 	adds.w	r3, r8, r3
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	462b      	mov	r3, r5
 8002fae:	eb49 0303 	adc.w	r3, r9, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	028b      	lsls	r3, r1, #10
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fca:	4621      	mov	r1, r4
 8002fcc:	028a      	lsls	r2, r1, #10
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fda:	647a      	str	r2, [r7, #68]	; 0x44
 8002fdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe0:	f7fd fa3e 	bl	8000460 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fee:	4b60      	ldr	r3, [pc, #384]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003000:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003010:	e0a6      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003012:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02a      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	2200      	movs	r2, #0
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
 8003034:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800303c:	2100      	movs	r1, #0
 800303e:	4b4e      	ldr	r3, [pc, #312]	; (8003178 <HAL_RCC_GetSysClockFreq+0x350>)
 8003040:	fb03 f201 	mul.w	r2, r3, r1
 8003044:	2300      	movs	r3, #0
 8003046:	fb00 f303 	mul.w	r3, r0, r3
 800304a:	4413      	add	r3, r2
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_RCC_GetSysClockFreq+0x350>)
 800304e:	fba0 1202 	umull	r1, r2, r0, r2
 8003052:	677a      	str	r2, [r7, #116]	; 0x74
 8003054:	460a      	mov	r2, r1
 8003056:	673a      	str	r2, [r7, #112]	; 0x70
 8003058:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800305a:	4413      	add	r3, r2
 800305c:	677b      	str	r3, [r7, #116]	; 0x74
 800305e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003062:	2200      	movs	r2, #0
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
 8003066:	637a      	str	r2, [r7, #52]	; 0x34
 8003068:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800306c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003070:	f7fd f9f6 	bl	8000460 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800307e:	e05b      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
 800308a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ae:	0150      	lsls	r0, r2, #5
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4641      	mov	r1, r8
 80030b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d4:	ebb2 040a 	subs.w	r4, r2, sl
 80030d8:	eb63 050b 	sbc.w	r5, r3, fp
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	00eb      	lsls	r3, r5, #3
 80030e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4643      	mov	r3, r8
 80030f2:	18e3      	adds	r3, r4, r3
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb45 0303 	adc.w	r3, r5, r3
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003120:	2200      	movs	r2, #0
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	61fa      	str	r2, [r7, #28]
 8003126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800312a:	f7fd f999 	bl	8000460 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4613      	mov	r3, r2
 8003134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_GetSysClockFreq+0x348>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0f1b      	lsrs	r3, r3, #28
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800314a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003156:	e003      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_GetSysClockFreq+0x34c>)
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800315e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003164:	4618      	mov	r0, r3
 8003166:	3798      	adds	r7, #152	; 0x98
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e28d      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8083 	beq.w	80032a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800319c:	4b94      	ldr	r3, [pc, #592]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d019      	beq.n	80031dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a8:	4b91      	ldr	r3, [pc, #580]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b4:	4b8e      	ldr	r3, [pc, #568]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c0:	d00c      	beq.n	80031dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b8b      	ldr	r3, [pc, #556]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d112      	bne.n	80031f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031da:	d10b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	4b84      	ldr	r3, [pc, #528]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05b      	beq.n	80032a0 <HAL_RCC_OscConfig+0x124>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d157      	bne.n	80032a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e25a      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x90>
 80031fe:	4b7c      	ldr	r3, [pc, #496]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7b      	ldr	r2, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e01d      	b.n	8003248 <HAL_RCC_OscConfig+0xcc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0xb4>
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a75      	ldr	r2, [pc, #468]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0xcc>
 8003230:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6b      	ldr	r2, [pc, #428]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fdca 	bl	8001de8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe fdc6 	bl	8001de8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e21f      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0xdc>
 8003276:	e014      	b.n	80032a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fdb6 	bl	8001de8 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe fdb2 	bl	8001de8 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e20b      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x104>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06f      	beq.n	800338e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ae:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ba:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d105      	bne.n	80032d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b44      	ldr	r3, [pc, #272]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x186>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1d3      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4937      	ldr	r1, [pc, #220]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe fd5f 	bl	8001de8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe fd5b 	bl	8001de8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1b4      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4925      	ldr	r1, [pc, #148]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fd3e 	bl	8001de8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe fd3a 	bl	8001de8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e193      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d036      	beq.n	8003408 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe fd1e 	bl	8001de8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe fd1a 	bl	8001de8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e173      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x234>
 80033ce:	e01b      	b.n	8003408 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fd07 	bl	8001de8 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	e00e      	b.n	80033fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033de:	f7fe fd03 	bl	8001de8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d907      	bls.n	80033fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e15c      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470000 	.word	0x42470000
 80033f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b8a      	ldr	r3, [pc, #552]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ea      	bne.n	80033de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8097 	beq.w	8003544 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b83      	ldr	r3, [pc, #524]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a7e      	ldr	r2, [pc, #504]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b7c      	ldr	r3, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b79      	ldr	r3, [pc, #484]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b76      	ldr	r3, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe fcc3 	bl	8001de8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe fcbf 	bl	8001de8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e118      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b6c      	ldr	r3, [pc, #432]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x31e>
 800348c:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	e01c      	b.n	80034d4 <HAL_RCC_OscConfig+0x358>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x340>
 80034a2:	4b61      	ldr	r3, [pc, #388]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a60      	ldr	r2, [pc, #384]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	4b5e      	ldr	r3, [pc, #376]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a5d      	ldr	r2, [pc, #372]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0x358>
 80034bc:	4b5a      	ldr	r3, [pc, #360]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a59      	ldr	r2, [pc, #356]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	4b57      	ldr	r3, [pc, #348]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a56      	ldr	r2, [pc, #344]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe fc84 	bl	8001de8 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fe fc80 	bl	8001de8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0d7      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ee      	beq.n	80034e4 <HAL_RCC_OscConfig+0x368>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe fc6e 	bl	8001de8 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe fc6a 	bl	8001de8 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0c1      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ee      	bne.n	8003510 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003538:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80ad 	beq.w	80036a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d060      	beq.n	800361c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d145      	bne.n	80035ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b33      	ldr	r3, [pc, #204]	; (8003630 <HAL_RCC_OscConfig+0x4b4>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe fc3e 	bl	8001de8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fc3a 	bl	8001de8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e093      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	071b      	lsls	r3, r3, #28
 80035ba:	491b      	ldr	r1, [pc, #108]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x4b4>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fe fc0f 	bl	8001de8 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fc0b 	bl	8001de8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e064      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x452>
 80035ec:	e05c      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b10      	ldr	r3, [pc, #64]	; (8003630 <HAL_RCC_OscConfig+0x4b4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe fbf8 	bl	8001de8 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fbf4 	bl	8001de8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04d      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x480>
 800361a:	e045      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e040      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
 8003628:	40023800 	.word	0x40023800
 800362c:	40007000 	.word	0x40007000
 8003630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003634:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <HAL_RCC_OscConfig+0x538>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d030      	beq.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d129      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d122      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800366a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366c:	4293      	cmp	r3, r2
 800366e:	d119      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	3b01      	subs	r3, #1
 800367e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d10f      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe f9c4 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 fc7a 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e04e      	b.n	800380e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_TIM_Base_Start_IT+0xc4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d022      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d01d      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <HAL_TIM_Base_Start_IT+0xc8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d018      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIM_Base_Start_IT+0xcc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_TIM_Base_Start_IT+0xd0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_TIM_Base_Start_IT+0xd4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a19      	ldr	r2, [pc, #100]	; (8003830 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIM_Base_Start_IT+0xdc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d010      	beq.n	800380c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	e007      	b.n	800380c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40010400 	.word	0x40010400
 8003830:	40014000 	.word	0x40014000
 8003834:	40001800 	.word	0x40001800

08003838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e041      	b.n	80038ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f839 	bl	80038d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f000 fbba 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_TIM_PWM_Start+0x24>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e022      	b.n	8003956 <HAL_TIM_PWM_Start+0x6a>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d109      	bne.n	800392a <HAL_TIM_PWM_Start+0x3e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e015      	b.n	8003956 <HAL_TIM_PWM_Start+0x6a>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d109      	bne.n	8003944 <HAL_TIM_PWM_Start+0x58>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e008      	b.n	8003956 <HAL_TIM_PWM_Start+0x6a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e07c      	b.n	8003a58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <HAL_TIM_PWM_Start+0x82>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800396c:	e013      	b.n	8003996 <HAL_TIM_PWM_Start+0xaa>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d104      	bne.n	800397e <HAL_TIM_PWM_Start+0x92>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800397c:	e00b      	b.n	8003996 <HAL_TIM_PWM_Start+0xaa>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start+0xa2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800398c:	e003      	b.n	8003996 <HAL_TIM_PWM_Start+0xaa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fe10 	bl	80045c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <HAL_TIM_PWM_Start+0x174>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_TIM_PWM_Start+0xcc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2c      	ldr	r2, [pc, #176]	; (8003a64 <HAL_TIM_PWM_Start+0x178>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_TIM_PWM_Start+0xd0>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_TIM_PWM_Start+0xd2>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_TIM_PWM_Start+0x174>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_TIM_PWM_Start+0x17c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_TIM_PWM_Start+0x180>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_TIM_PWM_Start+0x184>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_TIM_PWM_Start+0x178>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_TIM_PWM_Start+0x188>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x136>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_TIM_PWM_Start+0x18c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d111      	bne.n	8003a46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d010      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a44:	e007      	b.n	8003a56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40001800 	.word	0x40001800

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa77 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa69 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa7a 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa4d 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa3f 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa50 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa23 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa15 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa26 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9f9 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9eb 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9fc 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fb76 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fd78 	bl	800471c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9c1 	bl	8003fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fd42 	bl	8004708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0ae      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	f200 809f 	bhi.w	8003df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003df9 	.word	0x08003df9
 8003cc8:	08003df9 	.word	0x08003df9
 8003ccc:	08003df9 	.word	0x08003df9
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003df9 	.word	0x08003df9
 8003cd8:	08003df9 	.word	0x08003df9
 8003cdc:	08003df9 	.word	0x08003df9
 8003ce0:	08003d77 	.word	0x08003d77
 8003ce4:	08003df9 	.word	0x08003df9
 8003ce8:	08003df9 	.word	0x08003df9
 8003cec:	08003df9 	.word	0x08003df9
 8003cf0:	08003db7 	.word	0x08003db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa18 	bl	8004130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
      break;
 8003d32:	e064      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fa68 	bl	8004210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
      break;
 8003d74:	e043      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fabd 	bl	80042fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0208 	orr.w	r2, r2, #8
 8003d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
      break;
 8003db4:	e023      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fb11 	bl	80043e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69d9      	ldr	r1, [r3, #28]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	021a      	lsls	r2, r3, #8
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	61da      	str	r2, [r3, #28]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_ConfigClockSource+0x1c>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0b4      	b.n	8003f96 <HAL_TIM_ConfigClockSource+0x186>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d03e      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	f200 8087 	bhi.w	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	f000 8086 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x172>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d87f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d87b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d050      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x11a>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d877      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d03c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xfa>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d873      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d058      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x13a>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d86f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d064      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d86b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d060      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d867      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d05a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	e062      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f000 fb5d 	bl	8004584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	609a      	str	r2, [r3, #8]
      break;
 8003ee2:	e04f      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f000 fb46 	bl	8004584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e03c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 faba 	bl	8004490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2150      	movs	r1, #80	; 0x50
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb13 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8003f28:	e02c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fad9 	bl	80044ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2160      	movs	r1, #96	; 0x60
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fb03 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8003f48:	e01c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 fa9a 	bl	8004490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 faf3 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 faea 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d027      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d023      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d017      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_Base_SetConfig+0x12c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_Base_SetConfig+0x130>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0x134>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a24      	ldr	r2, [pc, #144]	; (8004128 <TIM_Base_SetConfig+0x138>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <TIM_Base_SetConfig+0x13c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	40001800 	.word	0x40001800
 8004128:	40001c00 	.word	0x40001c00
 800412c:	40002000 	.word	0x40002000

08004130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0302 	bic.w	r3, r3, #2
 8004178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a20      	ldr	r2, [pc, #128]	; (8004208 <TIM_OC1_SetConfig+0xd8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_OC1_SetConfig+0x64>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a1f      	ldr	r2, [pc, #124]	; (800420c <TIM_OC1_SetConfig+0xdc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10c      	bne.n	80041ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0308 	bic.w	r3, r3, #8
 800419a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 0304 	bic.w	r3, r3, #4
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <TIM_OC1_SetConfig+0xd8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC1_SetConfig+0x8e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <TIM_OC1_SetConfig+0xdc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d111      	bne.n	80041e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <TIM_OC2_SetConfig+0xe4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_OC2_SetConfig+0x68>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <TIM_OC2_SetConfig+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <TIM_OC2_SetConfig+0xe4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x94>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <TIM_OC2_SetConfig+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d113      	bne.n	80042cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40010400 	.word	0x40010400

080042fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <TIM_OC3_SetConfig+0xe0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_OC3_SetConfig+0x66>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <TIM_OC3_SetConfig+0xe4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10d      	bne.n	800437e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800437c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <TIM_OC3_SetConfig+0xe0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC3_SetConfig+0x92>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <TIM_OC3_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d113      	bne.n	80043b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40010400 	.word	0x40010400

080043e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800442e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <TIM_OC4_SetConfig+0xa4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_OC4_SetConfig+0x68>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a11      	ldr	r2, [pc, #68]	; (800448c <TIM_OC4_SetConfig+0xa8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d109      	bne.n	8004460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40010400 	.word	0x40010400

08004490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 030a 	bic.w	r3, r3, #10
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0210 	bic.w	r2, r3, #16
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800452a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	f043 0307 	orr.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2201      	movs	r2, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	401a      	ands	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004624:	2302      	movs	r3, #2
 8004626:	e05a      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a21      	ldr	r2, [pc, #132]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d01d      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a17      	ldr	r2, [pc, #92]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a15      	ldr	r2, [pc, #84]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10c      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40010400 	.word	0x40010400
 8004700:	40014000 	.word	0x40014000
 8004704:	40001800 	.word	0x40001800

08004708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e03f      	b.n	80047c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd fa2e 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	; 0x24
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 ffd7 	bl	8005728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	; 0x30
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d165      	bne.n	80048b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_Transmit_DMA+0x26>
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e05e      	b.n	80048b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_UART_Transmit_DMA+0x38>
 8004800:	2302      	movs	r3, #2
 8004802:	e057      	b.n	80048b4 <HAL_UART_Transmit_DMA+0xe8>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	88fa      	ldrh	r2, [r7, #6]
 8004816:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2221      	movs	r2, #33	; 0x21
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	4a22      	ldr	r2, [pc, #136]	; (80048bc <HAL_UART_Transmit_DMA+0xf0>)
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <HAL_UART_Transmit_DMA+0xf4>)
 800483a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <HAL_UART_Transmit_DMA+0xf8>)
 8004842:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	2200      	movs	r2, #0
 800484a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3304      	adds	r3, #4
 8004860:	461a      	mov	r2, r3
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	f7fd fc5c 	bl	8002120 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	617b      	str	r3, [r7, #20]
   return(result);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3314      	adds	r3, #20
 8004898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489a:	627a      	str	r2, [r7, #36]	; 0x24
 800489c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6a39      	ldr	r1, [r7, #32]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3730      	adds	r7, #48	; 0x30
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	08004fc1 	.word	0x08004fc1
 80048c0:	0800505b 	.word	0x0800505b
 80048c4:	080051d3 	.word	0x080051d3

080048c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d11d      	bne.n	800491e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_Receive_DMA+0x26>
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e016      	b.n	8004920 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Receive_DMA+0x38>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e00f      	b.n	8004920 <HAL_UART_Receive_DMA+0x58>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	461a      	mov	r2, r3
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fca7 	bl	8005268 <UART_Start_Receive_DMA>
 800491a:	4603      	mov	r3, r0
 800491c:	e000      	b.n	8004920 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b090      	sub	sp, #64	; 0x40
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004930:	2300      	movs	r3, #0
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b21      	cmp	r3, #33	; 0x21
 8004954:	d128      	bne.n	80049a8 <HAL_UART_DMAStop+0x80>
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d025      	beq.n	80049a8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	623b      	str	r3, [r7, #32]
   return(result);
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004972:	63bb      	str	r3, [r7, #56]	; 0x38
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497c:	633a      	str	r2, [r7, #48]	; 0x30
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	4618      	mov	r0, r3
 800499e:	f7fd fc17 	bl	80021d0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fcfe 	bl	80053a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b22      	cmp	r3, #34	; 0x22
 80049c8:	d128      	bne.n	8004a1c <HAL_UART_DMAStop+0xf4>
 80049ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d025      	beq.n	8004a1c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f0:	61fa      	str	r2, [r7, #28]
 80049f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	617b      	str	r3, [r7, #20]
   return(result);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e5      	bne.n	80049d0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd fbdd 	bl	80021d0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fcec 	bl	80053f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3740      	adds	r7, #64	; 0x40
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0ba      	sub	sp, #232	; 0xe8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_UART_IRQHandler+0x66>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fd93 	bl	80055b2 <UART_Receive_IT>
      return;
 8004a8c:	e256      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80de 	beq.w	8004c54 <HAL_UART_IRQHandler+0x22c>
 8004a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80d1 	beq.w	8004c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xae>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f043 0201 	orr.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0xd2>
 8004ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0202 	orr.w	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_UART_IRQHandler+0xf6>
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f043 0204 	orr.w	r2, r3, #4
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <HAL_UART_IRQHandler+0x126>
 8004b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d105      	bne.n	8004b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0208 	orr.w	r2, r3, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 81ed 	beq.w	8004f32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_IRQHandler+0x14e>
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fd1e 	bl	80055b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x17a>
 8004b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d04f      	beq.n	8004c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fc26 	bl	80053f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d141      	bne.n	8004c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3314      	adds	r3, #20
 8004bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3314      	adds	r3, #20
 8004bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1d9      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d013      	beq.n	8004c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	4a7d      	ldr	r2, [pc, #500]	; (8004e04 <HAL_UART_IRQHandler+0x3dc>)
 8004c10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fd fb4a 	bl	80022b0 <HAL_DMA_Abort_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e00e      	b.n	8004c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9ae 	bl	8004f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e00a      	b.n	8004c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f9aa 	bl	8004f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e006      	b.n	8004c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9a6 	bl	8004f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c4e:	e170      	b.n	8004f32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	bf00      	nop
    return;
 8004c52:	e16e      	b.n	8004f32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 814a 	bne.w	8004ef2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8143 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 813c 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	f040 80b4 	bne.w	8004e08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8140 	beq.w	8004f36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	f080 8139 	bcs.w	8004f36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd6:	f000 8088 	beq.w	8004dea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1d9      	bne.n	8004cda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3314      	adds	r3, #20
 8004d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3314      	adds	r3, #20
 8004d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e1      	bne.n	8004d26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3314      	adds	r3, #20
 8004d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e3      	bne.n	8004d62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dba:	f023 0310 	bic.w	r3, r3, #16
 8004dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e3      	bne.n	8004da8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fd f9f3 	bl	80021d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8d4 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e00:	e099      	b.n	8004f36 <HAL_UART_IRQHandler+0x50e>
 8004e02:	bf00      	nop
 8004e04:	080054bb 	.word	0x080054bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 808b 	beq.w	8004f3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8086 	beq.w	8004f3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e52:	647a      	str	r2, [r7, #68]	; 0x44
 8004e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e3      	bne.n	8004e2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3314      	adds	r3, #20
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	623b      	str	r3, [r7, #32]
   return(result);
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e3      	bne.n	8004e66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0310 	bic.w	r3, r3, #16
 8004ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e3      	bne.n	8004eac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f85c 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ef0:	e023      	b.n	8004f3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_UART_IRQHandler+0x4ea>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fae9 	bl	80054e2 <UART_Transmit_IT>
    return;
 8004f10:	e014      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <HAL_UART_IRQHandler+0x514>
 8004f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fb29 	bl	8005582 <UART_EndTransmit_IT>
    return;
 8004f30:	e004      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
    return;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
      return;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_UART_IRQHandler+0x514>
      return;
 8004f3a:	bf00      	nop
  }
}
 8004f3c:	37e8      	adds	r7, #232	; 0xe8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop

08004f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b090      	sub	sp, #64	; 0x40
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d137      	bne.n	800504c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	2200      	movs	r2, #0
 8004fe0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005002:	633a      	str	r2, [r7, #48]	; 0x30
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	60fb      	str	r3, [r7, #12]
   return(result);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	617b      	str	r3, [r7, #20]
   return(result);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800504a:	e002      	b.n	8005052 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800504c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800504e:	f7ff ff79 	bl	8004f44 <HAL_UART_TxCpltCallback>
}
 8005052:	bf00      	nop
 8005054:	3740      	adds	r7, #64	; 0x40
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff ff75 	bl	8004f58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b09c      	sub	sp, #112	; 0x70
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d172      	bne.n	8005178 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	2200      	movs	r2, #0
 8005096:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3314      	adds	r3, #20
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	667b      	str	r3, [r7, #100]	; 0x64
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050ec:	647a      	str	r2, [r7, #68]	; 0x44
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	623b      	str	r3, [r7, #32]
   return(result);
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005116:	663b      	str	r3, [r7, #96]	; 0x60
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005120:	633a      	str	r2, [r7, #48]	; 0x30
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	2b01      	cmp	r3, #1
 8005142:	d119      	bne.n	8005178 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60fb      	str	r3, [r7, #12]
   return(result);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005164:	61fa      	str	r2, [r7, #28]
 8005166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	617b      	str	r3, [r7, #20]
   return(result);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	d106      	bne.n	800518e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005184:	4619      	mov	r1, r3
 8005186:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005188:	f7ff ff0e 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800518c:	e002      	b.n	8005194 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800518e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005190:	f7ff feec 	bl	8004f6c <HAL_UART_RxCpltCallback>
}
 8005194:	bf00      	nop
 8005196:	3770      	adds	r7, #112	; 0x70
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d108      	bne.n	80051c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fef3 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051c2:	e002      	b.n	80051ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fedb 	bl	8004f80 <HAL_UART_RxHalfCpltCallback>
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b21      	cmp	r3, #33	; 0x21
 8005204:	d108      	bne.n	8005218 <UART_DMAError+0x46>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f000 f8c6 	bl	80053a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	d108      	bne.n	800524c <UART_DMAError+0x7a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2200      	movs	r2, #0
 8005244:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005246:	68b8      	ldr	r0, [r7, #8]
 8005248:	f000 f8d4 	bl	80053f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0210 	orr.w	r2, r3, #16
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005258:	68b8      	ldr	r0, [r7, #8]
 800525a:	f7ff fe9b 	bl	8004f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b098      	sub	sp, #96	; 0x60
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2222      	movs	r2, #34	; 0x22
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	4a40      	ldr	r2, [pc, #256]	; (8005398 <UART_Start_Receive_DMA+0x130>)
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	4a3f      	ldr	r2, [pc, #252]	; (800539c <UART_Start_Receive_DMA+0x134>)
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	4a3e      	ldr	r2, [pc, #248]	; (80053a0 <UART_Start_Receive_DMA+0x138>)
 80052a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2200      	movs	r2, #0
 80052ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80052b0:	f107 0308 	add.w	r3, r7, #8
 80052b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	f7fc ff2a 	bl	8002120 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d019      	beq.n	8005326 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	65bb      	str	r3, [r7, #88]	; 0x58
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005312:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005314:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e5      	bne.n	80052f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	657b      	str	r3, [r7, #84]	; 0x54
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005346:	63ba      	str	r2, [r7, #56]	; 0x38
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800534c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e5      	bne.n	8005326 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3314      	adds	r3, #20
 8005360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	617b      	str	r3, [r7, #20]
   return(result);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005370:	653b      	str	r3, [r7, #80]	; 0x50
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800537a:	627a      	str	r2, [r7, #36]	; 0x24
 800537c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6a39      	ldr	r1, [r7, #32]
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	61fb      	str	r3, [r7, #28]
   return(result);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3760      	adds	r7, #96	; 0x60
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	08005077 	.word	0x08005077
 800539c:	0800519d 	.word	0x0800519d
 80053a0:	080051d3 	.word	0x080051d3

080053a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	61ba      	str	r2, [r7, #24]
 80053ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6979      	ldr	r1, [r7, #20]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	613b      	str	r3, [r7, #16]
   return(result);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80053e8:	bf00      	nop
 80053ea:	3724      	adds	r7, #36	; 0x24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b095      	sub	sp, #84	; 0x54
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800541c:	643a      	str	r2, [r7, #64]	; 0x40
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	d119      	bne.n	80054a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60bb      	str	r3, [r7, #8]
   return(result);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	647b      	str	r3, [r7, #68]	; 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800548c:	61ba      	str	r2, [r7, #24]
 800548e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	613b      	str	r3, [r7, #16]
   return(result);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054ae:	bf00      	nop
 80054b0:	3754      	adds	r7, #84	; 0x54
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fd5d 	bl	8004f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b21      	cmp	r3, #33	; 0x21
 80054f4:	d13e      	bne.n	8005574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d114      	bne.n	800552a <UART_Transmit_IT+0x48>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d110      	bne.n	800552a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	1c9a      	adds	r2, r3, #2
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	621a      	str	r2, [r3, #32]
 8005528:	e008      	b.n	800553c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6211      	str	r1, [r2, #32]
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29b      	uxth	r3, r3
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4619      	mov	r1, r3
 800554a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800555e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fcce 	bl	8004f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b08c      	sub	sp, #48	; 0x30
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b22      	cmp	r3, #34	; 0x22
 80055c4:	f040 80ab 	bne.w	800571e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d0:	d117      	bne.n	8005602 <UART_Receive_IT+0x50>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d113      	bne.n	8005602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005600:	e026      	b.n	8005650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	d007      	beq.n	8005626 <UART_Receive_IT+0x74>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <UART_Receive_IT+0x82>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e008      	b.n	8005646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4619      	mov	r1, r3
 800565e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005660:	2b00      	cmp	r3, #0
 8005662:	d15a      	bne.n	800571a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0220 	bic.w	r2, r2, #32
 8005672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d135      	bne.n	8005710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f023 0310 	bic.w	r3, r3, #16
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	623a      	str	r2, [r7, #32]
 80056cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	69f9      	ldr	r1, [r7, #28]
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d10a      	bne.n	8005702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fc4d 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
 800570e:	e002      	b.n	8005716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff fc2b 	bl	8004f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e002      	b.n	8005720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3730      	adds	r7, #48	; 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b0c0      	sub	sp, #256	; 0x100
 800572e:	af00      	add	r7, sp, #0
 8005730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	ea40 0301 	orr.w	r3, r0, r1
 8005750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	431a      	orrs	r2, r3
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	431a      	orrs	r2, r3
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005780:	f021 010c 	bic.w	r1, r1, #12
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800578e:	430b      	orrs	r3, r1
 8005790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	6999      	ldr	r1, [r3, #24]
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	ea40 0301 	orr.w	r3, r0, r1
 80057ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b8f      	ldr	r3, [pc, #572]	; (80059f4 <UART_SetConfig+0x2cc>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0xa0>
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b8d      	ldr	r3, [pc, #564]	; (80059f8 <UART_SetConfig+0x2d0>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d104      	bne.n	80057d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fd fae8 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80057cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057d0:	e003      	b.n	80057da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057d2:	f7fd facf 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 80057d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	f040 810c 	bne.w	8005a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	65b9      	str	r1, [r7, #88]	; 0x58
 8005802:	415b      	adcs	r3, r3
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800580a:	4621      	mov	r1, r4
 800580c:	eb12 0801 	adds.w	r8, r2, r1
 8005810:	4629      	mov	r1, r5
 8005812:	eb43 0901 	adc.w	r9, r3, r1
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582a:	4690      	mov	r8, r2
 800582c:	4699      	mov	r9, r3
 800582e:	4623      	mov	r3, r4
 8005830:	eb18 0303 	adds.w	r3, r8, r3
 8005834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005838:	462b      	mov	r3, r5
 800583a:	eb49 0303 	adc.w	r3, r9, r3
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800584e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005856:	460b      	mov	r3, r1
 8005858:	18db      	adds	r3, r3, r3
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	4613      	mov	r3, r2
 800585e:	eb42 0303 	adc.w	r3, r2, r3
 8005862:	657b      	str	r3, [r7, #84]	; 0x54
 8005864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800586c:	f7fa fdf8 	bl	8000460 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4b61      	ldr	r3, [pc, #388]	; (80059fc <UART_SetConfig+0x2d4>)
 8005876:	fba3 2302 	umull	r2, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	011c      	lsls	r4, r3, #4
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800588c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	64b9      	str	r1, [r7, #72]	; 0x48
 8005898:	415b      	adcs	r3, r3
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058a0:	4641      	mov	r1, r8
 80058a2:	eb12 0a01 	adds.w	sl, r2, r1
 80058a6:	4649      	mov	r1, r9
 80058a8:	eb43 0b01 	adc.w	fp, r3, r1
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c0:	4692      	mov	sl, r2
 80058c2:	469b      	mov	fp, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ce:	464b      	mov	r3, r9
 80058d0:	eb4b 0303 	adc.w	r3, fp, r3
 80058d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058ec:	460b      	mov	r3, r1
 80058ee:	18db      	adds	r3, r3, r3
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
 80058f2:	4613      	mov	r3, r2
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	647b      	str	r3, [r7, #68]	; 0x44
 80058fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005902:	f7fa fdad 	bl	8000460 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <UART_SetConfig+0x2d4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	; 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005922:	4b36      	ldr	r3, [pc, #216]	; (80059fc <UART_SetConfig+0x2d4>)
 8005924:	fba3 2302 	umull	r2, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005930:	441c      	add	r4, r3
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800593c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	1891      	adds	r1, r2, r2
 800594a:	63b9      	str	r1, [r7, #56]	; 0x38
 800594c:	415b      	adcs	r3, r3
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005954:	4641      	mov	r1, r8
 8005956:	1851      	adds	r1, r2, r1
 8005958:	6339      	str	r1, [r7, #48]	; 0x30
 800595a:	4649      	mov	r1, r9
 800595c:	414b      	adcs	r3, r1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800596c:	4659      	mov	r1, fp
 800596e:	00cb      	lsls	r3, r1, #3
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005976:	4651      	mov	r1, sl
 8005978:	00ca      	lsls	r2, r1, #3
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	4603      	mov	r3, r0
 8005980:	4642      	mov	r2, r8
 8005982:	189b      	adds	r3, r3, r2
 8005984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005988:	464b      	mov	r3, r9
 800598a:	460a      	mov	r2, r1
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059be:	f7fa fd4f 	bl	8000460 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <UART_SetConfig+0x2d4>)
 80059c8:	fba3 1302 	umull	r1, r3, r3, r2
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	2164      	movs	r1, #100	; 0x64
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	3332      	adds	r3, #50	; 0x32
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <UART_SetConfig+0x2d4>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	f003 0207 	and.w	r2, r3, #7
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4422      	add	r2, r4
 80059ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f0:	e105      	b.n	8005bfe <UART_SetConfig+0x4d6>
 80059f2:	bf00      	nop
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40011400 	.word	0x40011400
 80059fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a12:	4642      	mov	r2, r8
 8005a14:	464b      	mov	r3, r9
 8005a16:	1891      	adds	r1, r2, r2
 8005a18:	6239      	str	r1, [r7, #32]
 8005a1a:	415b      	adcs	r3, r3
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a22:	4641      	mov	r1, r8
 8005a24:	1854      	adds	r4, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb43 0501 	adc.w	r5, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	00eb      	lsls	r3, r5, #3
 8005a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3a:	00e2      	lsls	r2, r4, #3
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	461d      	mov	r5, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	18e3      	adds	r3, r4, r3
 8005a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a48:	464b      	mov	r3, r9
 8005a4a:	eb45 0303 	adc.w	r3, r5, r3
 8005a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a6e:	4629      	mov	r1, r5
 8005a70:	008b      	lsls	r3, r1, #2
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a78:	4621      	mov	r1, r4
 8005a7a:	008a      	lsls	r2, r1, #2
 8005a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a80:	f7fa fcee 	bl	8000460 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	011c      	lsls	r4, r3, #4
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	61b9      	str	r1, [r7, #24]
 8005aac:	415b      	adcs	r3, r3
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6139      	str	r1, [r7, #16]
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	008b      	lsls	r3, r1, #2
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b16:	4641      	mov	r1, r8
 8005b18:	008a      	lsls	r2, r1, #2
 8005b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b1e:	f7fa fc9f 	bl	8000460 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a34      	ldr	r2, [pc, #208]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b46:	441c      	add	r4, r3
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b50:	677a      	str	r2, [r7, #116]	; 0x74
 8005b52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b66:	4641      	mov	r1, r8
 8005b68:	1851      	adds	r1, r2, r1
 8005b6a:	6039      	str	r1, [r7, #0]
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	414b      	adcs	r3, r1
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b7e:	4659      	mov	r1, fp
 8005b80:	00cb      	lsls	r3, r1, #3
 8005b82:	4651      	mov	r1, sl
 8005b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b88:	4651      	mov	r1, sl
 8005b8a:	00ca      	lsls	r2, r1, #3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	4642      	mov	r2, r8
 8005b94:	189b      	adds	r3, r3, r2
 8005b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b98:	464b      	mov	r3, r9
 8005b9a:	460a      	mov	r2, r1
 8005b9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	663b      	str	r3, [r7, #96]	; 0x60
 8005bac:	667a      	str	r2, [r7, #100]	; 0x64
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bba:	4649      	mov	r1, r9
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bcc:	f7fa fc48 	bl	8000460 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	2164      	movs	r1, #100	; 0x64
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	3332      	adds	r3, #50	; 0x32
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4422      	add	r2, r4
 8005bfc:	609a      	str	r2, [r3, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0a:	bf00      	nop
 8005c0c:	51eb851f 	.word	0x51eb851f

08005c10 <__NVIC_SetPriority>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	6039      	str	r1, [r7, #0]
 8005c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	db0a      	blt.n	8005c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	490c      	ldr	r1, [pc, #48]	; (8005c5c <__NVIC_SetPriority+0x4c>)
 8005c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2e:	0112      	lsls	r2, r2, #4
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	440b      	add	r3, r1
 8005c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c38:	e00a      	b.n	8005c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4908      	ldr	r1, [pc, #32]	; (8005c60 <__NVIC_SetPriority+0x50>)
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	3b04      	subs	r3, #4
 8005c48:	0112      	lsls	r2, r2, #4
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	761a      	strb	r2, [r3, #24]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	e000e100 	.word	0xe000e100
 8005c60:	e000ed00 	.word	0xe000ed00

08005c64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <SysTick_Handler+0x1c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c6c:	f001 fd24 	bl	80076b8 <xTaskGetSchedulerState>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d001      	beq.n	8005c7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c76:	f002 fb0f 	bl	8008298 <xPortSysTickHandler>
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	e000e010 	.word	0xe000e010

08005c84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c88:	2100      	movs	r1, #0
 8005c8a:	f06f 0004 	mvn.w	r0, #4
 8005c8e:	f7ff ffbf 	bl	8005c10 <__NVIC_SetPriority>
#endif
}
 8005c92:	bf00      	nop
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c9e:	f3ef 8305 	mrs	r3, IPSR
 8005ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ca4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005caa:	f06f 0305 	mvn.w	r3, #5
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	e00c      	b.n	8005ccc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <osKernelInitialize+0x44>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <osKernelInitialize+0x44>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	e002      	b.n	8005ccc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ccc:	687b      	ldr	r3, [r7, #4]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20004738 	.word	0x20004738

08005ce0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ce6:	f3ef 8305 	mrs	r3, IPSR
 8005cea:	603b      	str	r3, [r7, #0]
  return(result);
 8005cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005cf2:	f06f 0305 	mvn.w	r3, #5
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	e010      	b.n	8005d1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <osKernelStart+0x48>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d109      	bne.n	8005d16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d02:	f7ff ffbf 	bl	8005c84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <osKernelStart+0x48>)
 8005d08:	2202      	movs	r2, #2
 8005d0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d0c:	f001 f866 	bl	8006ddc <vTaskStartScheduler>
      stat = osOK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	e002      	b.n	8005d1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d1c:	687b      	ldr	r3, [r7, #4]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20004738 	.word	0x20004738

08005d2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af04      	add	r7, sp, #16
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3c:	f3ef 8305 	mrs	r3, IPSR
 8005d40:	617b      	str	r3, [r7, #20]
  return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d17e      	bne.n	8005e46 <osThreadNew+0x11a>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d07b      	beq.n	8005e46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d52:	2318      	movs	r3, #24
 8005d54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d045      	beq.n	8005df2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <osThreadNew+0x48>
        name = attr->name;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <osThreadNew+0x6e>
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b38      	cmp	r3, #56	; 0x38
 8005d8c:	d805      	bhi.n	8005d9a <osThreadNew+0x6e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <osThreadNew+0x72>
        return (NULL);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e054      	b.n	8005e48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00e      	beq.n	8005dd4 <osThreadNew+0xa8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2b5b      	cmp	r3, #91	; 0x5b
 8005dbc:	d90a      	bls.n	8005dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <osThreadNew+0xa8>
        mem = 1;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e010      	b.n	8005df6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10c      	bne.n	8005df6 <osThreadNew+0xca>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <osThreadNew+0xca>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <osThreadNew+0xca>
          mem = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e001      	b.n	8005df6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d110      	bne.n	8005e1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e04:	9202      	str	r2, [sp, #8]
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fe0c 	bl	8006a30 <xTaskCreateStatic>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e013      	b.n	8005e46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d110      	bne.n	8005e46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fe57 	bl	8006aea <xTaskCreate>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d001      	beq.n	8005e46 <osThreadNew+0x11a>
            hTask = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e46:	693b      	ldr	r3, [r7, #16]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	; 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e58:	f3ef 8305 	mrs	r3, IPSR
 8005e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <osDelay+0x1c>
    stat = osErrorISR;
 8005e64:	f06f 0305 	mvn.w	r3, #5
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e007      	b.n	8005e7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 ff7c 	bl	8006d74 <vTaskDelay>
    }
  }

  return (stat);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a07      	ldr	r2, [pc, #28]	; (8005eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a06      	ldr	r2, [pc, #24]	; (8005eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8005e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2280      	movs	r2, #128	; 0x80
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	2000473c 	.word	0x2000473c
 8005eb8:	20004798 	.word	0x20004798

08005ebc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4a06      	ldr	r2, [pc, #24]	; (8005eec <vApplicationGetTimerTaskMemory+0x30>)
 8005ed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eda:	601a      	str	r2, [r3, #0]
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20004998 	.word	0x20004998
 8005eec:	200049f4 	.word	0x200049f4

08005ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0208 	add.w	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f103 0208 	add.w	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f103 0208 	add.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa8:	d103      	bne.n	8005fb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e00c      	b.n	8005fcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e002      	b.n	8005fc0 <vListInsert+0x2e>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d2f6      	bcs.n	8005fba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6852      	ldr	r2, [r2, #4]
 8006024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	429a      	cmp	r2, r3
 800602e:	d103      	bne.n	8006038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	1e5a      	subs	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <xQueueGenericReset+0x2a>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60bb      	str	r3, [r7, #8]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006082:	f002 f877 	bl	8008174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	3b01      	subs	r3, #1
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d114      	bne.n	8006102 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01a      	beq.n	8006116 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3310      	adds	r3, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f903 	bl	80072f0 <xTaskRemoveFromEventList>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d012      	beq.n	8006116 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060f0:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <xQueueGenericReset+0xcc>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	e009      	b.n	8006116 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3310      	adds	r3, #16
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fef2 	bl	8005ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff feed 	bl	8005ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006116:	f002 f85d 	bl	80081d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800611a:	2301      	movs	r3, #1
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	; 0x38
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <xQueueGenericCreateStatic+0x52>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <xQueueGenericCreateStatic+0x56>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <xQueueGenericCreateStatic+0x58>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <xQueueGenericCreateStatic+0x7e>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <xQueueGenericCreateStatic+0x82>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <xQueueGenericCreateStatic+0x84>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	61fb      	str	r3, [r7, #28]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061c6:	2350      	movs	r3, #80	; 0x50
 80061c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d00a      	beq.n	80061e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61bb      	str	r3, [r7, #24]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f805 	bl	8006218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006210:	4618      	mov	r0, r3
 8006212:	3730      	adds	r7, #48	; 0x30
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e002      	b.n	800623a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006246:	2101      	movs	r1, #1
 8006248:	69b8      	ldr	r0, [r7, #24]
 800624a:	f7ff ff05 	bl	8006058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	; 0x38
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800626e:	2300      	movs	r3, #0
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueGenericSend+0x32>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <xQueueGenericSend+0x40>
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <xQueueGenericSend+0x44>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <xQueueGenericSend+0x46>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <xQueueGenericSend+0x60>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSend+0x6e>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <xQueueGenericSend+0x72>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <xQueueGenericSend+0x74>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xQueueGenericSend+0x8e>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	623b      	str	r3, [r7, #32]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ee:	f001 f9e3 	bl	80076b8 <xTaskGetSchedulerState>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <xQueueGenericSend+0x9e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <xQueueGenericSend+0xa2>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <xQueueGenericSend+0xa4>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xQueueGenericSend+0xbe>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	61fb      	str	r3, [r7, #28]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800631e:	f001 ff29 	bl	8008174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <xQueueGenericSend+0xd4>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d129      	bne.n	8006388 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633a:	f000 fa0b 	bl	8006754 <prvCopyDataToQueue>
 800633e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d010      	beq.n	800636a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f000 ffcf 	bl	80072f0 <xTaskRemoveFromEventList>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006358:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <xQueueGenericSend+0x1f8>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	e00a      	b.n	8006380 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006370:	4b39      	ldr	r3, [pc, #228]	; (8006458 <xQueueGenericSend+0x1f8>)
 8006372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006380:	f001 ff28 	bl	80081d4 <vPortExitCritical>
				return pdPASS;
 8006384:	2301      	movs	r3, #1
 8006386:	e063      	b.n	8006450 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800638e:	f001 ff21 	bl	80081d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006392:	2300      	movs	r3, #0
 8006394:	e05c      	b.n	8006450 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800639c:	f107 0314 	add.w	r3, r7, #20
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 f82f 	bl	8007404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063aa:	f001 ff13 	bl	80081d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ae:	f000 fd7b 	bl	8006ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b2:	f001 fedf 	bl	8008174 <vPortEnterCritical>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c2:	d103      	bne.n	80063cc <xQueueGenericSend+0x16c>
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d8:	d103      	bne.n	80063e2 <xQueueGenericSend+0x182>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e2:	f001 fef7 	bl	80081d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e6:	1d3a      	adds	r2, r7, #4
 80063e8:	f107 0314 	add.w	r3, r7, #20
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 f81e 	bl	8007430 <xTaskCheckForTimeOut>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d124      	bne.n	8006444 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063fc:	f000 faa2 	bl	8006944 <prvIsQueueFull>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d018      	beq.n	8006438 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	3310      	adds	r3, #16
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f000 ff1e 	bl	8007250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006416:	f000 fa2d 	bl	8006874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800641a:	f000 fd53 	bl	8006ec4 <xTaskResumeAll>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f47f af7c 	bne.w	800631e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <xQueueGenericSend+0x1f8>)
 8006428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	e772      	b.n	800631e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643a:	f000 fa1b 	bl	8006874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800643e:	f000 fd41 	bl	8006ec4 <xTaskResumeAll>
 8006442:	e76c      	b.n	800631e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006446:	f000 fa15 	bl	8006874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800644a:	f000 fd3b 	bl	8006ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800644e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006450:	4618      	mov	r0, r3
 8006452:	3738      	adds	r7, #56	; 0x38
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b090      	sub	sp, #64	; 0x40
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <xQueueGenericSendFromISR+0x3c>
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <xQueueGenericSendFromISR+0x40>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <xQueueGenericSendFromISR+0x42>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d103      	bne.n	80064c6 <xQueueGenericSendFromISR+0x6a>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <xQueueGenericSendFromISR+0x6e>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <xQueueGenericSendFromISR+0x70>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	623b      	str	r3, [r7, #32]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064e6:	f001 ff27 	bl	8008338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064ea:	f3ef 8211 	mrs	r2, BASEPRI
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	61fa      	str	r2, [r7, #28]
 8006500:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006502:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <xQueueGenericSendFromISR+0xbc>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d12f      	bne.n	8006578 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800652e:	f000 f911 	bl	8006754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006532:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800653a:	d112      	bne.n	8006562 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d016      	beq.n	8006572 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	3324      	adds	r3, #36	; 0x24
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fed1 	bl	80072f0 <xTaskRemoveFromEventList>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00e      	beq.n	8006572 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e007      	b.n	8006572 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006566:	3301      	adds	r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	b25a      	sxtb	r2, r3
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006572:	2301      	movs	r3, #1
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006576:	e001      	b.n	800657c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006578:	2300      	movs	r3, #0
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006586:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800658a:	4618      	mov	r0, r3
 800658c:	3740      	adds	r7, #64	; 0x40
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	; 0x30
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <xQueueReceive+0x30>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	623b      	str	r3, [r7, #32]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <xQueueReceive+0x3e>
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <xQueueReceive+0x42>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueReceive+0x44>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueReceive+0x5e>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fb      	str	r3, [r7, #28]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065f2:	f001 f861 	bl	80076b8 <xTaskGetSchedulerState>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <xQueueReceive+0x6e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <xQueueReceive+0x72>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <xQueueReceive+0x74>
 8006606:	2300      	movs	r3, #0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <xQueueReceive+0x8e>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	61bb      	str	r3, [r7, #24]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006622:	f001 fda7 	bl	8008174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01f      	beq.n	8006672 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006636:	f000 f8f7 	bl	8006828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	1e5a      	subs	r2, r3, #1
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00f      	beq.n	800666a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	3310      	adds	r3, #16
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fe4e 	bl	80072f0 <xTaskRemoveFromEventList>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800665a:	4b3d      	ldr	r3, [pc, #244]	; (8006750 <xQueueReceive+0x1bc>)
 800665c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800666a:	f001 fdb3 	bl	80081d4 <vPortExitCritical>
				return pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	e069      	b.n	8006746 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006678:	f001 fdac 	bl	80081d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800667c:	2300      	movs	r3, #0
 800667e:	e062      	b.n	8006746 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006686:	f107 0310 	add.w	r3, r7, #16
 800668a:	4618      	mov	r0, r3
 800668c:	f000 feba 	bl	8007404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006690:	2301      	movs	r3, #1
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006694:	f001 fd9e 	bl	80081d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006698:	f000 fc06 	bl	8006ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800669c:	f001 fd6a 	bl	8008174 <vPortEnterCritical>
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ac:	d103      	bne.n	80066b6 <xQueueReceive+0x122>
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c2:	d103      	bne.n	80066cc <xQueueReceive+0x138>
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066cc:	f001 fd82 	bl	80081d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d0:	1d3a      	adds	r2, r7, #4
 80066d2:	f107 0310 	add.w	r3, r7, #16
 80066d6:	4611      	mov	r1, r2
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fea9 	bl	8007430 <xTaskCheckForTimeOut>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d123      	bne.n	800672c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e6:	f000 f917 	bl	8006918 <prvIsQueueEmpty>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d017      	beq.n	8006720 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fda9 	bl	8007250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006700:	f000 f8b8 	bl	8006874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006704:	f000 fbde 	bl	8006ec4 <xTaskResumeAll>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d189      	bne.n	8006622 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <xQueueReceive+0x1bc>)
 8006710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	e780      	b.n	8006622 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006722:	f000 f8a7 	bl	8006874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006726:	f000 fbcd 	bl	8006ec4 <xTaskResumeAll>
 800672a:	e77a      	b.n	8006622 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800672c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672e:	f000 f8a1 	bl	8006874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006732:	f000 fbc7 	bl	8006ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006738:	f000 f8ee 	bl	8006918 <prvIsQueueEmpty>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	f43f af6f 	beq.w	8006622 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006744:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006746:	4618      	mov	r0, r3
 8006748:	3730      	adds	r7, #48	; 0x30
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10d      	bne.n	800678e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d14d      	bne.n	8006816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 ffb8 	bl	80076f4 <xTaskPriorityDisinherit>
 8006784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	609a      	str	r2, [r3, #8]
 800678c:	e043      	b.n	8006816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d119      	bne.n	80067c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6858      	ldr	r0, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	461a      	mov	r2, r3
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	f00c fe8c 	bl	80134bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	441a      	add	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d32b      	bcc.n	8006816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	e026      	b.n	8006816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68d8      	ldr	r0, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	461a      	mov	r2, r3
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	f00c fe72 	bl	80134bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	425b      	negs	r3, r3
 80067e2:	441a      	add	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d207      	bcs.n	8006804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	425b      	negs	r3, r3
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d105      	bne.n	8006816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	3b01      	subs	r3, #1
 8006814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800681e:	697b      	ldr	r3, [r7, #20]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d018      	beq.n	800686c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	441a      	add	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	429a      	cmp	r2, r3
 8006852:	d303      	bcc.n	800685c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68d9      	ldr	r1, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	461a      	mov	r2, r3
 8006866:	6838      	ldr	r0, [r7, #0]
 8006868:	f00c fe28 	bl	80134bc <memcpy>
	}
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800687c:	f001 fc7a 	bl	8008174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006888:	e011      	b.n	80068ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d012      	beq.n	80068b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fd2a 	bl	80072f0 <xTaskRemoveFromEventList>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068a2:	f000 fe27 	bl	80074f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dce9      	bgt.n	800688a <prvUnlockQueue+0x16>
 80068b6:	e000      	b.n	80068ba <prvUnlockQueue+0x46>
					break;
 80068b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	22ff      	movs	r2, #255	; 0xff
 80068be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068c2:	f001 fc87 	bl	80081d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068c6:	f001 fc55 	bl	8008174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068d2:	e011      	b.n	80068f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d012      	beq.n	8006902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3310      	adds	r3, #16
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fd05 	bl	80072f0 <xTaskRemoveFromEventList>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068ec:	f000 fe02 	bl	80074f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dce9      	bgt.n	80068d4 <prvUnlockQueue+0x60>
 8006900:	e000      	b.n	8006904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	22ff      	movs	r2, #255	; 0xff
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800690c:	f001 fc62 	bl	80081d4 <vPortExitCritical>
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006920:	f001 fc28 	bl	8008174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e001      	b.n	8006936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006936:	f001 fc4d 	bl	80081d4 <vPortExitCritical>

	return xReturn;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800694c:	f001 fc12 	bl	8008174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	429a      	cmp	r2, r3
 800695a:	d102      	bne.n	8006962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800695c:	2301      	movs	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e001      	b.n	8006966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006966:	f001 fc35 	bl	80081d4 <vPortExitCritical>

	return xReturn;
 800696a:	68fb      	ldr	r3, [r7, #12]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e014      	b.n	80069ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006984:	4a0f      	ldr	r2, [pc, #60]	; (80069c4 <vQueueAddToRegistry+0x50>)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006990:	490c      	ldr	r1, [pc, #48]	; (80069c4 <vQueueAddToRegistry+0x50>)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <vQueueAddToRegistry+0x50>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069a6:	e006      	b.n	80069b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b07      	cmp	r3, #7
 80069b2:	d9e7      	bls.n	8006984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20004df4 	.word	0x20004df4

080069c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069d8:	f001 fbcc 	bl	8008174 <vPortEnterCritical>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e8:	d103      	bne.n	80069f2 <vQueueWaitForMessageRestricted+0x2a>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f8:	b25b      	sxtb	r3, r3
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fe:	d103      	bne.n	8006a08 <vQueueWaitForMessageRestricted+0x40>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a08:	f001 fbe4 	bl	80081d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d106      	bne.n	8006a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	3324      	adds	r3, #36	; 0x24
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fc3b 	bl	8007298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a22:	6978      	ldr	r0, [r7, #20]
 8006a24:	f7ff ff26 	bl	8006874 <prvUnlockQueue>
	}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08e      	sub	sp, #56	; 0x38
 8006a34:	af04      	add	r7, sp, #16
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	623b      	str	r3, [r7, #32]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61fb      	str	r3, [r7, #28]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a76:	235c      	movs	r3, #92	; 0x5c
 8006a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a7e:	d00a      	beq.n	8006a96 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	61bb      	str	r3, [r7, #24]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01e      	beq.n	8006adc <xTaskCreateStatic+0xac>
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01b      	beq.n	8006adc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f850 	bl	8006b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ad6:	f000 f8dd 	bl	8006c94 <prvAddNewTaskToReadyList>
 8006ada:	e001      	b.n	8006ae0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ae0:	697b      	ldr	r3, [r7, #20]
	}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3728      	adds	r7, #40	; 0x28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b08c      	sub	sp, #48	; 0x30
 8006aee:	af04      	add	r7, sp, #16
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 fc5a 	bl	80083b8 <pvPortMalloc>
 8006b04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00e      	beq.n	8006b2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b0c:	205c      	movs	r0, #92	; 0x5c
 8006b0e:	f001 fc53 	bl	80083b8 <pvPortMalloc>
 8006b12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b20:	e005      	b.n	8006b2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b22:	6978      	ldr	r0, [r7, #20]
 8006b24:	f001 fd14 	bl	8008550 <vPortFree>
 8006b28:	e001      	b.n	8006b2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d017      	beq.n	8006b64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b3c:	88fa      	ldrh	r2, [r7, #6]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9303      	str	r3, [sp, #12]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	9302      	str	r3, [sp, #8]
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f80e 	bl	8006b74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b58:	69f8      	ldr	r0, [r7, #28]
 8006b5a:	f000 f89b 	bl	8006c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	e002      	b.n	8006b6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	21a5      	movs	r1, #165	; 0xa5
 8006b8e:	f00c fcbd 	bl	801350c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f023 0307 	bic.w	r3, r3, #7
 8006baa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	617b      	str	r3, [r7, #20]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01f      	beq.n	8006c12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e012      	b.n	8006bfe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	7819      	ldrb	r1, [r3, #0]
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	3334      	adds	r3, #52	; 0x34
 8006be8:	460a      	mov	r2, r1
 8006bea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	2b0f      	cmp	r3, #15
 8006c02:	d9e9      	bls.n	8006bd8 <prvInitialiseNewTask+0x64>
 8006c04:	e000      	b.n	8006c08 <prvInitialiseNewTask+0x94>
			{
				break;
 8006c06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c10:	e003      	b.n	8006c1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	2b37      	cmp	r3, #55	; 0x37
 8006c1e:	d901      	bls.n	8006c24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c20:	2337      	movs	r3, #55	; 0x37
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	2200      	movs	r2, #0
 8006c34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff f978 	bl	8005f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	3318      	adds	r3, #24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff f973 	bl	8005f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	68f9      	ldr	r1, [r7, #12]
 8006c72:	69b8      	ldr	r0, [r7, #24]
 8006c74:	f001 f94e 	bl	8007f14 <pxPortInitialiseStack>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c9c:	f001 fa6a 	bl	8008174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a2c      	ldr	r2, [pc, #176]	; (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006caa:	4b2c      	ldr	r3, [pc, #176]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cb8:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cc0:	f000 fc3c 	bl	800753c <prvInitialiseTaskLists>
 8006cc4:	e00d      	b.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cc6:	4b26      	ldr	r3, [pc, #152]	; (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cce:	4b23      	ldr	r3, [pc, #140]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d802      	bhi.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ce2:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	4a1e      	ldr	r2, [pc, #120]	; (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <prvAddNewTaskToReadyList+0xd4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d903      	bls.n	8006d08 <prvAddNewTaskToReadyList+0x74>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <prvAddNewTaskToReadyList+0xd4>)
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <prvAddNewTaskToReadyList+0xd8>)
 8006d16:	441a      	add	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7ff f913 	bl	8005f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d24:	f001 fa56 	bl	80081d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d207      	bcs.n	8006d4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <prvAddNewTaskToReadyList+0xdc>)
 8006d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20005308 	.word	0x20005308
 8006d5c:	20004e34 	.word	0x20004e34
 8006d60:	20005314 	.word	0x20005314
 8006d64:	20005324 	.word	0x20005324
 8006d68:	20005310 	.word	0x20005310
 8006d6c:	20004e38 	.word	0x20004e38
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <vTaskDelay+0x60>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <vTaskDelay+0x30>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006da4:	f000 f880 	bl	8006ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006da8:	2100      	movs	r1, #0
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fd10 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006db0:	f000 f888 	bl	8006ec4 <xTaskResumeAll>
 8006db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <vTaskDelay+0x64>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20005330 	.word	0x20005330
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dea:	463a      	mov	r2, r7
 8006dec:	1d39      	adds	r1, r7, #4
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff f848 	bl	8005e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	9202      	str	r2, [sp, #8]
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	460a      	mov	r2, r1
 8006e0a:	4921      	ldr	r1, [pc, #132]	; (8006e90 <vTaskStartScheduler+0xb4>)
 8006e0c:	4821      	ldr	r0, [pc, #132]	; (8006e94 <vTaskStartScheduler+0xb8>)
 8006e0e:	f7ff fe0f 	bl	8006a30 <xTaskCreateStatic>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <vTaskStartScheduler+0xbc>)
 8006e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e18:	4b1f      	ldr	r3, [pc, #124]	; (8006e98 <vTaskStartScheduler+0xbc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	e001      	b.n	8006e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e30:	f000 fd22 	bl	8007878 <xTimerCreateTimerTask>
 8006e34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d116      	bne.n	8006e6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
}
 8006e4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e50:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <vTaskStartScheduler+0xc0>)
 8006e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e58:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <vTaskStartScheduler+0xc4>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e5e:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <vTaskStartScheduler+0xc8>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e64:	f001 f8e4 	bl	8008030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e68:	e00e      	b.n	8006e88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e70:	d10a      	bne.n	8006e88 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60fb      	str	r3, [r7, #12]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <vTaskStartScheduler+0xaa>
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	08014c74 	.word	0x08014c74
 8006e94:	0800750d 	.word	0x0800750d
 8006e98:	2000532c 	.word	0x2000532c
 8006e9c:	20005328 	.word	0x20005328
 8006ea0:	20005314 	.word	0x20005314
 8006ea4:	2000530c 	.word	0x2000530c

08006ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <vTaskSuspendAll+0x18>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a03      	ldr	r2, [pc, #12]	; (8006ec0 <vTaskSuspendAll+0x18>)
 8006eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20005330 	.word	0x20005330

08006ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ed2:	4b42      	ldr	r3, [pc, #264]	; (8006fdc <xTaskResumeAll+0x118>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ef0:	f001 f940 	bl	8008174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ef4:	4b39      	ldr	r3, [pc, #228]	; (8006fdc <xTaskResumeAll+0x118>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a38      	ldr	r2, [pc, #224]	; (8006fdc <xTaskResumeAll+0x118>)
 8006efc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efe:	4b37      	ldr	r3, [pc, #220]	; (8006fdc <xTaskResumeAll+0x118>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d162      	bne.n	8006fcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f06:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <xTaskResumeAll+0x11c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d05e      	beq.n	8006fcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f0e:	e02f      	b.n	8006f70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f10:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <xTaskResumeAll+0x120>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3318      	adds	r3, #24
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff f871 	bl	8006004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff f86c 	bl	8006004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <xTaskResumeAll+0x124>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d903      	bls.n	8006f40 <xTaskResumeAll+0x7c>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <xTaskResumeAll+0x124>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a27      	ldr	r2, [pc, #156]	; (8006fec <xTaskResumeAll+0x128>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe fff7 	bl	8005f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4b23      	ldr	r3, [pc, #140]	; (8006ff0 <xTaskResumeAll+0x12c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f6a:	4b22      	ldr	r3, [pc, #136]	; (8006ff4 <xTaskResumeAll+0x130>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f70:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <xTaskResumeAll+0x120>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1cb      	bne.n	8006f10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f7e:	f000 fb7b 	bl	8007678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <xTaskResumeAll+0x134>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d010      	beq.n	8006fb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f8e:	f000 f847 	bl	8007020 <xTaskIncrementTick>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <xTaskResumeAll+0x130>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f1      	bne.n	8006f8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006faa:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <xTaskResumeAll+0x134>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fb0:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <xTaskResumeAll+0x130>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <xTaskResumeAll+0x138>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fcc:	f001 f902 	bl	80081d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20005330 	.word	0x20005330
 8006fe0:	20005308 	.word	0x20005308
 8006fe4:	200052c8 	.word	0x200052c8
 8006fe8:	20005310 	.word	0x20005310
 8006fec:	20004e38 	.word	0x20004e38
 8006ff0:	20004e34 	.word	0x20004e34
 8006ff4:	2000531c 	.word	0x2000531c
 8006ff8:	20005318 	.word	0x20005318
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <xTaskGetTickCount+0x1c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800700c:	687b      	ldr	r3, [r7, #4]
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	2000530c 	.word	0x2000530c

08007020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702a:	4b4f      	ldr	r3, [pc, #316]	; (8007168 <xTaskIncrementTick+0x148>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 808f 	bne.w	8007152 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007034:	4b4d      	ldr	r3, [pc, #308]	; (800716c <xTaskIncrementTick+0x14c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800703c:	4a4b      	ldr	r2, [pc, #300]	; (800716c <xTaskIncrementTick+0x14c>)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d120      	bne.n	800708a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007048:	4b49      	ldr	r3, [pc, #292]	; (8007170 <xTaskIncrementTick+0x150>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <xTaskIncrementTick+0x48>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	603b      	str	r3, [r7, #0]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xTaskIncrementTick+0x46>
 8007068:	4b41      	ldr	r3, [pc, #260]	; (8007170 <xTaskIncrementTick+0x150>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	4b41      	ldr	r3, [pc, #260]	; (8007174 <xTaskIncrementTick+0x154>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3f      	ldr	r2, [pc, #252]	; (8007170 <xTaskIncrementTick+0x150>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	4a3f      	ldr	r2, [pc, #252]	; (8007174 <xTaskIncrementTick+0x154>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	4b3e      	ldr	r3, [pc, #248]	; (8007178 <xTaskIncrementTick+0x158>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3301      	adds	r3, #1
 8007082:	4a3d      	ldr	r2, [pc, #244]	; (8007178 <xTaskIncrementTick+0x158>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	f000 faf7 	bl	8007678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800708a:	4b3c      	ldr	r3, [pc, #240]	; (800717c <xTaskIncrementTick+0x15c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	429a      	cmp	r2, r3
 8007092:	d349      	bcc.n	8007128 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007094:	4b36      	ldr	r3, [pc, #216]	; (8007170 <xTaskIncrementTick+0x150>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <xTaskIncrementTick+0x15c>)
 80070a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070a4:	601a      	str	r2, [r3, #0]
					break;
 80070a6:	e03f      	b.n	8007128 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	4b31      	ldr	r3, [pc, #196]	; (8007170 <xTaskIncrementTick+0x150>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d203      	bcs.n	80070c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070c0:	4a2e      	ldr	r2, [pc, #184]	; (800717c <xTaskIncrementTick+0x15c>)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070c6:	e02f      	b.n	8007128 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe ff99 	bl	8006004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	3318      	adds	r3, #24
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe ff90 	bl	8006004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4b25      	ldr	r3, [pc, #148]	; (8007180 <xTaskIncrementTick+0x160>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <xTaskIncrementTick+0xd8>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	4a22      	ldr	r2, [pc, #136]	; (8007180 <xTaskIncrementTick+0x160>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <xTaskIncrementTick+0x164>)
 8007106:	441a      	add	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe ff1b 	bl	8005f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <xTaskIncrementTick+0x168>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	429a      	cmp	r2, r3
 8007120:	d3b8      	bcc.n	8007094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007122:	2301      	movs	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007126:	e7b5      	b.n	8007094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007128:	4b17      	ldr	r3, [pc, #92]	; (8007188 <xTaskIncrementTick+0x168>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	4915      	ldr	r1, [pc, #84]	; (8007184 <xTaskIncrementTick+0x164>)
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d901      	bls.n	8007144 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007144:	4b11      	ldr	r3, [pc, #68]	; (800718c <xTaskIncrementTick+0x16c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e004      	b.n	800715c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <xTaskIncrementTick+0x170>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a0d      	ldr	r2, [pc, #52]	; (8007190 <xTaskIncrementTick+0x170>)
 800715a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800715c:	697b      	ldr	r3, [r7, #20]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20005330 	.word	0x20005330
 800716c:	2000530c 	.word	0x2000530c
 8007170:	200052c0 	.word	0x200052c0
 8007174:	200052c4 	.word	0x200052c4
 8007178:	20005320 	.word	0x20005320
 800717c:	20005328 	.word	0x20005328
 8007180:	20005310 	.word	0x20005310
 8007184:	20004e38 	.word	0x20004e38
 8007188:	20004e34 	.word	0x20004e34
 800718c:	2000531c 	.word	0x2000531c
 8007190:	20005318 	.word	0x20005318

08007194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800719a:	4b28      	ldr	r3, [pc, #160]	; (800723c <vTaskSwitchContext+0xa8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071a2:	4b27      	ldr	r3, [pc, #156]	; (8007240 <vTaskSwitchContext+0xac>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071a8:	e041      	b.n	800722e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80071aa:	4b25      	ldr	r3, [pc, #148]	; (8007240 <vTaskSwitchContext+0xac>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b24      	ldr	r3, [pc, #144]	; (8007244 <vTaskSwitchContext+0xb0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e010      	b.n	80071da <vTaskSwitchContext+0x46>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <vTaskSwitchContext+0x3e>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	491b      	ldr	r1, [pc, #108]	; (8007248 <vTaskSwitchContext+0xb4>)
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0e4      	beq.n	80071b8 <vTaskSwitchContext+0x24>
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4a13      	ldr	r2, [pc, #76]	; (8007248 <vTaskSwitchContext+0xb4>)
 80071fa:	4413      	add	r3, r2
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	3308      	adds	r3, #8
 8007210:	429a      	cmp	r2, r3
 8007212:	d104      	bne.n	800721e <vTaskSwitchContext+0x8a>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4a09      	ldr	r2, [pc, #36]	; (800724c <vTaskSwitchContext+0xb8>)
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	4a06      	ldr	r2, [pc, #24]	; (8007244 <vTaskSwitchContext+0xb0>)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6013      	str	r3, [r2, #0]
}
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20005330 	.word	0x20005330
 8007240:	2000531c 	.word	0x2000531c
 8007244:	20005310 	.word	0x20005310
 8007248:	20004e38 	.word	0x20004e38
 800724c:	20004e34 	.word	0x20004e34

08007250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <vTaskPlaceOnEventList+0x44>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3318      	adds	r3, #24
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fe fe87 	bl	8005f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007284:	2101      	movs	r1, #1
 8007286:	6838      	ldr	r0, [r7, #0]
 8007288:	f000 faa2 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20004e34 	.word	0x20004e34

08007298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	617b      	str	r3, [r7, #20]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c0:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <vTaskPlaceOnEventListRestricted+0x54>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3318      	adds	r3, #24
 80072c6:	4619      	mov	r1, r3
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7fe fe3e 	bl	8005f4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	f000 fa77 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
	}
 80072e2:	bf00      	nop
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20004e34 	.word	0x20004e34

080072f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10a      	bne.n	800731c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60fb      	str	r3, [r7, #12]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3318      	adds	r3, #24
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fe6f 	bl	8006004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007326:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <xTaskRemoveFromEventList+0xb0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11d      	bne.n	800736a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3304      	adds	r3, #4
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fe66 	bl	8006004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733c:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <xTaskRemoveFromEventList+0xb4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d903      	bls.n	800734c <xTaskRemoveFromEventList+0x5c>
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <xTaskRemoveFromEventList+0xb4>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <xTaskRemoveFromEventList+0xb8>)
 800735a:	441a      	add	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7fe fdf1 	bl	8005f4a <vListInsertEnd>
 8007368:	e005      	b.n	8007376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3318      	adds	r3, #24
 800736e:	4619      	mov	r1, r3
 8007370:	480e      	ldr	r0, [pc, #56]	; (80073ac <xTaskRemoveFromEventList+0xbc>)
 8007372:	f7fe fdea 	bl	8005f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737a:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <xTaskRemoveFromEventList+0xc0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	429a      	cmp	r2, r3
 8007382:	d905      	bls.n	8007390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007388:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <xTaskRemoveFromEventList+0xc4>)
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e001      	b.n	8007394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007394:	697b      	ldr	r3, [r7, #20]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20005330 	.word	0x20005330
 80073a4:	20005310 	.word	0x20005310
 80073a8:	20004e38 	.word	0x20004e38
 80073ac:	200052c8 	.word	0x200052c8
 80073b0:	20004e34 	.word	0x20004e34
 80073b4:	2000531c 	.word	0x2000531c

080073b8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <vTaskSetTimeOutState+0x24>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60fb      	str	r3, [r7, #12]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80073dc:	f000 feca 	bl	8008174 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <vTaskSetTimeOutState+0x44>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <vTaskSetTimeOutState+0x48>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80073f0:	f000 fef0 	bl	80081d4 <vPortExitCritical>
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20005320 	.word	0x20005320
 8007400:	2000530c 	.word	0x2000530c

08007404 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800740c:	4b06      	ldr	r3, [pc, #24]	; (8007428 <vTaskInternalSetTimeOutState+0x24>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <vTaskInternalSetTimeOutState+0x28>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	20005320 	.word	0x20005320
 800742c:	2000530c 	.word	0x2000530c

08007430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007472:	f000 fe7f 	bl	8008174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <xTaskCheckForTimeOut+0xbc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800748e:	d102      	bne.n	8007496 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e023      	b.n	80074de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <xTaskCheckForTimeOut+0xc0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d007      	beq.n	80074b2 <xTaskCheckForTimeOut+0x82>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	e015      	b.n	80074de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d20b      	bcs.n	80074d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	1ad2      	subs	r2, r2, r3
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff9b 	bl	8007404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	e004      	b.n	80074de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074de:	f000 fe79 	bl	80081d4 <vPortExitCritical>

	return xReturn;
 80074e2:	69fb      	ldr	r3, [r7, #28]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	2000530c 	.word	0x2000530c
 80074f0:	20005320 	.word	0x20005320

080074f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074f8:	4b03      	ldr	r3, [pc, #12]	; (8007508 <vTaskMissedYield+0x14>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
}
 80074fe:	bf00      	nop
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	2000531c 	.word	0x2000531c

0800750c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007514:	f000 f852 	bl	80075bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <prvIdleTask+0x28>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d9f9      	bls.n	8007514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <prvIdleTask+0x2c>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007530:	e7f0      	b.n	8007514 <prvIdleTask+0x8>
 8007532:	bf00      	nop
 8007534:	20004e38 	.word	0x20004e38
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	e00c      	b.n	8007562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4a12      	ldr	r2, [pc, #72]	; (800759c <prvInitialiseTaskLists+0x60>)
 8007554:	4413      	add	r3, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fcca 	bl	8005ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3301      	adds	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b37      	cmp	r3, #55	; 0x37
 8007566:	d9ef      	bls.n	8007548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007568:	480d      	ldr	r0, [pc, #52]	; (80075a0 <prvInitialiseTaskLists+0x64>)
 800756a:	f7fe fcc1 	bl	8005ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800756e:	480d      	ldr	r0, [pc, #52]	; (80075a4 <prvInitialiseTaskLists+0x68>)
 8007570:	f7fe fcbe 	bl	8005ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007574:	480c      	ldr	r0, [pc, #48]	; (80075a8 <prvInitialiseTaskLists+0x6c>)
 8007576:	f7fe fcbb 	bl	8005ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800757a:	480c      	ldr	r0, [pc, #48]	; (80075ac <prvInitialiseTaskLists+0x70>)
 800757c:	f7fe fcb8 	bl	8005ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007580:	480b      	ldr	r0, [pc, #44]	; (80075b0 <prvInitialiseTaskLists+0x74>)
 8007582:	f7fe fcb5 	bl	8005ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <prvInitialiseTaskLists+0x78>)
 8007588:	4a05      	ldr	r2, [pc, #20]	; (80075a0 <prvInitialiseTaskLists+0x64>)
 800758a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <prvInitialiseTaskLists+0x7c>)
 800758e:	4a05      	ldr	r2, [pc, #20]	; (80075a4 <prvInitialiseTaskLists+0x68>)
 8007590:	601a      	str	r2, [r3, #0]
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20004e38 	.word	0x20004e38
 80075a0:	20005298 	.word	0x20005298
 80075a4:	200052ac 	.word	0x200052ac
 80075a8:	200052c8 	.word	0x200052c8
 80075ac:	200052dc 	.word	0x200052dc
 80075b0:	200052f4 	.word	0x200052f4
 80075b4:	200052c0 	.word	0x200052c0
 80075b8:	200052c4 	.word	0x200052c4

080075bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c2:	e019      	b.n	80075f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075c4:	f000 fdd6 	bl	8008174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <prvCheckTasksWaitingTermination+0x50>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fd15 	bl	8006004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075da:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3b01      	subs	r3, #1
 80075e0:	4a0b      	ldr	r2, [pc, #44]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <prvCheckTasksWaitingTermination+0x58>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	4a0a      	ldr	r2, [pc, #40]	; (8007614 <prvCheckTasksWaitingTermination+0x58>)
 80075ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075ee:	f000 fdf1 	bl	80081d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f810 	bl	8007618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <prvCheckTasksWaitingTermination+0x58>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e1      	bne.n	80075c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	200052dc 	.word	0x200052dc
 8007610:	20005308 	.word	0x20005308
 8007614:	200052f0 	.word	0x200052f0

08007618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007626:	2b00      	cmp	r3, #0
 8007628:	d108      	bne.n	800763c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	4618      	mov	r0, r3
 8007630:	f000 ff8e 	bl	8008550 <vPortFree>
				vPortFree( pxTCB );
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 ff8b 	bl	8008550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800763a:	e018      	b.n	800766e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007642:	2b01      	cmp	r3, #1
 8007644:	d103      	bne.n	800764e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 ff82 	bl	8008550 <vPortFree>
	}
 800764c:	e00f      	b.n	800766e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007654:	2b02      	cmp	r3, #2
 8007656:	d00a      	beq.n	800766e <prvDeleteTCB+0x56>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvDeleteTCB+0x54>
	}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <prvResetNextTaskUnblockTime+0x38>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <prvResetNextTaskUnblockTime+0x3c>)
 800768a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800768e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007690:	e008      	b.n	80076a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007692:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <prvResetNextTaskUnblockTime+0x38>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <prvResetNextTaskUnblockTime+0x3c>)
 80076a2:	6013      	str	r3, [r2, #0]
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	200052c0 	.word	0x200052c0
 80076b4:	20005328 	.word	0x20005328

080076b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076be:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <xTaskGetSchedulerState+0x34>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076c6:	2301      	movs	r3, #1
 80076c8:	607b      	str	r3, [r7, #4]
 80076ca:	e008      	b.n	80076de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <xTaskGetSchedulerState+0x38>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076d4:	2302      	movs	r3, #2
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	e001      	b.n	80076de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076de:	687b      	ldr	r3, [r7, #4]
	}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20005314 	.word	0x20005314
 80076f0:	20005330 	.word	0x20005330

080076f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d056      	beq.n	80077b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800770a:	4b2e      	ldr	r3, [pc, #184]	; (80077c4 <xTaskPriorityDisinherit+0xd0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d00a      	beq.n	800772a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60bb      	str	r3, [r7, #8]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774c:	1e5a      	subs	r2, r3, #1
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775a:	429a      	cmp	r2, r3
 800775c:	d02c      	beq.n	80077b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	2b00      	cmp	r3, #0
 8007764:	d128      	bne.n	80077b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	3304      	adds	r3, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fc4a 	bl	8006004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <xTaskPriorityDisinherit+0xd4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d903      	bls.n	8007798 <xTaskPriorityDisinherit+0xa4>
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <xTaskPriorityDisinherit+0xd4>)
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4a09      	ldr	r2, [pc, #36]	; (80077cc <xTaskPriorityDisinherit+0xd8>)
 80077a6:	441a      	add	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f7fe fbcb 	bl	8005f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077b8:	697b      	ldr	r3, [r7, #20]
	}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20004e34 	.word	0x20004e34
 80077c8:	20005310 	.word	0x20005310
 80077cc:	20004e38 	.word	0x20004e38

080077d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077da:	4b21      	ldr	r3, [pc, #132]	; (8007860 <prvAddCurrentTaskToDelayedList+0x90>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e0:	4b20      	ldr	r3, [pc, #128]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fc0c 	bl	8006004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f2:	d10a      	bne.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fa:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4819      	ldr	r0, [pc, #100]	; (8007868 <prvAddCurrentTaskToDelayedList+0x98>)
 8007804:	f7fe fba1 	bl	8005f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007808:	e026      	b.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	429a      	cmp	r2, r3
 8007820:	d209      	bcs.n	8007836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fbaf 	bl	8005f92 <vListInsert>
}
 8007834:	e010      	b.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fe fba5 	bl	8005f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	d202      	bcs.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007852:	4a08      	ldr	r2, [pc, #32]	; (8007874 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6013      	str	r3, [r2, #0]
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	2000530c 	.word	0x2000530c
 8007864:	20004e34 	.word	0x20004e34
 8007868:	200052f4 	.word	0x200052f4
 800786c:	200052c4 	.word	0x200052c4
 8007870:	200052c0 	.word	0x200052c0
 8007874:	20005328 	.word	0x20005328

08007878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007882:	f000 fb07 	bl	8007e94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007886:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <xTimerCreateTimerTask+0x80>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d021      	beq.n	80078d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007896:	1d3a      	adds	r2, r7, #4
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fb0b 	bl	8005ebc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	9202      	str	r2, [sp, #8]
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	2302      	movs	r3, #2
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	2300      	movs	r3, #0
 80078b6:	460a      	mov	r2, r1
 80078b8:	4910      	ldr	r1, [pc, #64]	; (80078fc <xTimerCreateTimerTask+0x84>)
 80078ba:	4811      	ldr	r0, [pc, #68]	; (8007900 <xTimerCreateTimerTask+0x88>)
 80078bc:	f7ff f8b8 	bl	8006a30 <xTaskCreateStatic>
 80078c0:	4603      	mov	r3, r0
 80078c2:	4a10      	ldr	r2, [pc, #64]	; (8007904 <xTimerCreateTimerTask+0x8c>)
 80078c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <xTimerCreateTimerTask+0x8c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	613b      	str	r3, [r7, #16]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078ee:	697b      	ldr	r3, [r7, #20]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20005364 	.word	0x20005364
 80078fc:	08014c7c 	.word	0x08014c7c
 8007900:	08007a3d 	.word	0x08007a3d
 8007904:	20005368 	.word	0x20005368

08007908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	623b      	str	r3, [r7, #32]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007936:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <xTimerGenericCommand+0x98>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d02a      	beq.n	8007994 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b05      	cmp	r3, #5
 800794e:	dc18      	bgt.n	8007982 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007950:	f7ff feb2 	bl	80076b8 <xTaskGetSchedulerState>
 8007954:	4603      	mov	r3, r0
 8007956:	2b02      	cmp	r3, #2
 8007958:	d109      	bne.n	800796e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <xTimerGenericCommand+0x98>)
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	f107 0110 	add.w	r1, r7, #16
 8007962:	2300      	movs	r3, #0
 8007964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007966:	f7fe fc7b 	bl	8006260 <xQueueGenericSend>
 800796a:	6278      	str	r0, [r7, #36]	; 0x24
 800796c:	e012      	b.n	8007994 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800796e:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <xTimerGenericCommand+0x98>)
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	f107 0110 	add.w	r1, r7, #16
 8007976:	2300      	movs	r3, #0
 8007978:	2200      	movs	r2, #0
 800797a:	f7fe fc71 	bl	8006260 <xQueueGenericSend>
 800797e:	6278      	str	r0, [r7, #36]	; 0x24
 8007980:	e008      	b.n	8007994 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <xTimerGenericCommand+0x98>)
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	f107 0110 	add.w	r1, r7, #16
 800798a:	2300      	movs	r3, #0
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	f7fe fd65 	bl	800645c <xQueueGenericSendFromISR>
 8007992:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007996:	4618      	mov	r0, r3
 8007998:	3728      	adds	r7, #40	; 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20005364 	.word	0x20005364

080079a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ae:	4b22      	ldr	r3, [pc, #136]	; (8007a38 <prvProcessExpiredTimer+0x94>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fb21 	bl	8006004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d022      	beq.n	8007a16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	699a      	ldr	r2, [r3, #24]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	18d1      	adds	r1, r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	6978      	ldr	r0, [r7, #20]
 80079de:	f000 f8d1 	bl	8007b84 <prvInsertTimerInActiveList>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01f      	beq.n	8007a28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079e8:	2300      	movs	r3, #0
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	2300      	movs	r3, #0
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	2100      	movs	r1, #0
 80079f2:	6978      	ldr	r0, [r7, #20]
 80079f4:	f7ff ff88 	bl	8007908 <xTimerGenericCommand>
 80079f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d113      	bne.n	8007a28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	6978      	ldr	r0, [r7, #20]
 8007a2e:	4798      	blx	r3
}
 8007a30:	bf00      	nop
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	2000535c 	.word	0x2000535c

08007a3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f857 	bl	8007afc <prvGetNextExpireTime>
 8007a4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4619      	mov	r1, r3
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f803 	bl	8007a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a5a:	f000 f8d5 	bl	8007c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a5e:	e7f1      	b.n	8007a44 <prvTimerTask+0x8>

08007a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a6a:	f7ff fa1d 	bl	8006ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a6e:	f107 0308 	add.w	r3, r7, #8
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 f866 	bl	8007b44 <prvSampleTimeNow>
 8007a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d130      	bne.n	8007ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <prvProcessTimerOrBlockTask+0x3c>
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d806      	bhi.n	8007a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a8e:	f7ff fa19 	bl	8006ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff ff85 	bl	80079a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a9a:	e024      	b.n	8007ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <prvProcessTimerOrBlockTask+0x90>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <prvProcessTimerOrBlockTask+0x50>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <prvProcessTimerOrBlockTask+0x52>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <prvProcessTimerOrBlockTask+0x94>)
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f7fe ff81 	bl	80069c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ac6:	f7ff f9fd 	bl	8006ec4 <xTaskResumeAll>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ad0:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <prvProcessTimerOrBlockTask+0x98>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
}
 8007ae0:	e001      	b.n	8007ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ae2:	f7ff f9ef 	bl	8006ec4 <xTaskResumeAll>
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20005360 	.word	0x20005360
 8007af4:	20005364 	.word	0x20005364
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b04:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <prvGetNextExpireTime+0x44>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <prvGetNextExpireTime+0x16>
 8007b0e:	2201      	movs	r2, #1
 8007b10:	e000      	b.n	8007b14 <prvGetNextExpireTime+0x18>
 8007b12:	2200      	movs	r2, #0
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d105      	bne.n	8007b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <prvGetNextExpireTime+0x44>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	e001      	b.n	8007b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	2000535c 	.word	0x2000535c

08007b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b4c:	f7ff fa58 	bl	8007000 <xTaskGetTickCount>
 8007b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b52:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <prvSampleTimeNow+0x3c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d205      	bcs.n	8007b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b5c:	f000 f936 	bl	8007dcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e002      	b.n	8007b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b6e:	4a04      	ldr	r2, [pc, #16]	; (8007b80 <prvSampleTimeNow+0x3c>)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b74:	68fb      	ldr	r3, [r7, #12]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	2000536c 	.word	0x2000536c

08007b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d812      	bhi.n	8007bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d302      	bcc.n	8007bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e01b      	b.n	8007bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <prvInsertTimerInActiveList+0x7c>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7fe f9e2 	bl	8005f92 <vListInsert>
 8007bce:	e012      	b.n	8007bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d206      	bcs.n	8007be6 <prvInsertTimerInActiveList+0x62>
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d302      	bcc.n	8007be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007be0:	2301      	movs	r3, #1
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e007      	b.n	8007bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007be6:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <prvInsertTimerInActiveList+0x80>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	f7fe f9ce 	bl	8005f92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bf6:	697b      	ldr	r3, [r7, #20]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20005360 	.word	0x20005360
 8007c04:	2000535c 	.word	0x2000535c

08007c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c0e:	e0ca      	b.n	8007da6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	da18      	bge.n	8007c48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	3304      	adds	r3, #4
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61fb      	str	r3, [r7, #28]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3e:	6850      	ldr	r0, [r2, #4]
 8007c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c42:	6892      	ldr	r2, [r2, #8]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f2c0 80aa 	blt.w	8007da4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe f9cf 	bl	8006004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c66:	463b      	mov	r3, r7
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff ff6b 	bl	8007b44 <prvSampleTimeNow>
 8007c6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b09      	cmp	r3, #9
 8007c74:	f200 8097 	bhi.w	8007da6 <prvProcessReceivedCommands+0x19e>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <prvProcessReceivedCommands+0x78>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007ca9 	.word	0x08007ca9
 8007c8c:	08007d1d 	.word	0x08007d1d
 8007c90:	08007d31 	.word	0x08007d31
 8007c94:	08007d7b 	.word	0x08007d7b
 8007c98:	08007ca9 	.word	0x08007ca9
 8007c9c:	08007ca9 	.word	0x08007ca9
 8007ca0:	08007d1d 	.word	0x08007d1d
 8007ca4:	08007d31 	.word	0x08007d31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	18d1      	adds	r1, r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc8:	f7ff ff5c 	bl	8007b84 <prvInsertTimerInActiveList>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d069      	beq.n	8007da6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d05e      	beq.n	8007da6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	441a      	add	r2, r3
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfa:	f7ff fe05 	bl	8007908 <xTimerGenericCommand>
 8007cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d14f      	bne.n	8007da6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	61bb      	str	r3, [r7, #24]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d2e:	e03a      	b.n	8007da6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	617b      	str	r3, [r7, #20]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	18d1      	adds	r1, r2, r3
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d74:	f7ff ff06 	bl	8007b84 <prvInsertTimerInActiveList>
					break;
 8007d78:	e015      	b.n	8007da6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d8a:	f000 fbe1 	bl	8008550 <vPortFree>
 8007d8e:	e00a      	b.n	8007da6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d96:	f023 0301 	bic.w	r3, r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007da2:	e000      	b.n	8007da6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007da4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007da6:	4b08      	ldr	r3, [pc, #32]	; (8007dc8 <prvProcessReceivedCommands+0x1c0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	1d39      	adds	r1, r7, #4
 8007dac:	2200      	movs	r2, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fbf0 	bl	8006594 <xQueueReceive>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f47f af2a 	bne.w	8007c10 <prvProcessReceivedCommands+0x8>
	}
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	3730      	adds	r7, #48	; 0x30
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20005364 	.word	0x20005364

08007dcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dd2:	e048      	b.n	8007e66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dd4:	4b2d      	ldr	r3, [pc, #180]	; (8007e8c <prvSwitchTimerLists+0xc0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dde:	4b2b      	ldr	r3, [pc, #172]	; (8007e8c <prvSwitchTimerLists+0xc0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3304      	adds	r3, #4
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe f909 	bl	8006004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d02e      	beq.n	8007e66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4413      	add	r3, r2
 8007e10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d90e      	bls.n	8007e38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e26:	4b19      	ldr	r3, [pc, #100]	; (8007e8c <prvSwitchTimerLists+0xc0>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f7fe f8ae 	bl	8005f92 <vListInsert>
 8007e36:	e016      	b.n	8007e66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	2100      	movs	r1, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff fd60 	bl	8007908 <xTimerGenericCommand>
 8007e48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	603b      	str	r3, [r7, #0]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <prvSwitchTimerLists+0xc0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1b1      	bne.n	8007dd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <prvSwitchTimerLists+0xc0>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <prvSwitchTimerLists+0xc4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <prvSwitchTimerLists+0xc0>)
 8007e7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e7e:	4a04      	ldr	r2, [pc, #16]	; (8007e90 <prvSwitchTimerLists+0xc4>)
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	6013      	str	r3, [r2, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	2000535c 	.word	0x2000535c
 8007e90:	20005360 	.word	0x20005360

08007e94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e9a:	f000 f96b 	bl	8008174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e9e:	4b15      	ldr	r3, [pc, #84]	; (8007ef4 <prvCheckForValidListAndQueue+0x60>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d120      	bne.n	8007ee8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ea6:	4814      	ldr	r0, [pc, #80]	; (8007ef8 <prvCheckForValidListAndQueue+0x64>)
 8007ea8:	f7fe f822 	bl	8005ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007eac:	4813      	ldr	r0, [pc, #76]	; (8007efc <prvCheckForValidListAndQueue+0x68>)
 8007eae:	f7fe f81f 	bl	8005ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007eb2:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <prvCheckForValidListAndQueue+0x6c>)
 8007eb4:	4a10      	ldr	r2, [pc, #64]	; (8007ef8 <prvCheckForValidListAndQueue+0x64>)
 8007eb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007eb8:	4b12      	ldr	r3, [pc, #72]	; (8007f04 <prvCheckForValidListAndQueue+0x70>)
 8007eba:	4a10      	ldr	r2, [pc, #64]	; (8007efc <prvCheckForValidListAndQueue+0x68>)
 8007ebc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <prvCheckForValidListAndQueue+0x74>)
 8007ec4:	4a11      	ldr	r2, [pc, #68]	; (8007f0c <prvCheckForValidListAndQueue+0x78>)
 8007ec6:	2110      	movs	r1, #16
 8007ec8:	200a      	movs	r0, #10
 8007eca:	f7fe f92d 	bl	8006128 <xQueueGenericCreateStatic>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <prvCheckForValidListAndQueue+0x60>)
 8007ed2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ed4:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <prvCheckForValidListAndQueue+0x60>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <prvCheckForValidListAndQueue+0x60>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	490b      	ldr	r1, [pc, #44]	; (8007f10 <prvCheckForValidListAndQueue+0x7c>)
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fd46 	bl	8006974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ee8:	f000 f974 	bl	80081d4 <vPortExitCritical>
}
 8007eec:	bf00      	nop
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20005364 	.word	0x20005364
 8007ef8:	20005334 	.word	0x20005334
 8007efc:	20005348 	.word	0x20005348
 8007f00:	2000535c 	.word	0x2000535c
 8007f04:	20005360 	.word	0x20005360
 8007f08:	20005410 	.word	0x20005410
 8007f0c:	20005370 	.word	0x20005370
 8007f10:	08014c84 	.word	0x08014c84

08007f14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3b04      	subs	r3, #4
 8007f24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3b04      	subs	r3, #4
 8007f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f023 0201 	bic.w	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f44:	4a0c      	ldr	r2, [pc, #48]	; (8007f78 <pxPortInitialiseStack+0x64>)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3b14      	subs	r3, #20
 8007f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f06f 0202 	mvn.w	r2, #2
 8007f62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3b20      	subs	r3, #32
 8007f68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	08007f7d 	.word	0x08007f7d

08007f7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <prvTaskExitError+0x54>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f8e:	d00a      	beq.n	8007fa6 <prvTaskExitError+0x2a>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60fb      	str	r3, [r7, #12]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <prvTaskExitError+0x28>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60bb      	str	r3, [r7, #8]
}
 8007fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fba:	bf00      	nop
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0fc      	beq.n	8007fbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000010 	.word	0x20000010
	...

08007fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <pxCurrentTCBConst2>)
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6808      	ldr	r0, [r1, #0]
 8007fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fea:	f380 8809 	msr	PSP, r0
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8811 	msr	BASEPRI, r0
 8007ffa:	4770      	bx	lr
 8007ffc:	f3af 8000 	nop.w

08008000 <pxCurrentTCBConst2>:
 8008000:	20004e34 	.word	0x20004e34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008008:	4808      	ldr	r0, [pc, #32]	; (800802c <prvPortStartFirstTask+0x24>)
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	6800      	ldr	r0, [r0, #0]
 800800e:	f380 8808 	msr	MSP, r0
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8814 	msr	CONTROL, r0
 800801a:	b662      	cpsie	i
 800801c:	b661      	cpsie	f
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	df00      	svc	0
 8008028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800802a:	bf00      	nop
 800802c:	e000ed08 	.word	0xe000ed08

08008030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008036:	4b46      	ldr	r3, [pc, #280]	; (8008150 <xPortStartScheduler+0x120>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a46      	ldr	r2, [pc, #280]	; (8008154 <xPortStartScheduler+0x124>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d10a      	bne.n	8008056 <xPortStartScheduler+0x26>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	613b      	str	r3, [r7, #16]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008056:	4b3e      	ldr	r3, [pc, #248]	; (8008150 <xPortStartScheduler+0x120>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a3f      	ldr	r2, [pc, #252]	; (8008158 <xPortStartScheduler+0x128>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10a      	bne.n	8008076 <xPortStartScheduler+0x46>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60fb      	str	r3, [r7, #12]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008076:	4b39      	ldr	r3, [pc, #228]	; (800815c <xPortStartScheduler+0x12c>)
 8008078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008098:	b2da      	uxtb	r2, r3
 800809a:	4b31      	ldr	r3, [pc, #196]	; (8008160 <xPortStartScheduler+0x130>)
 800809c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800809e:	4b31      	ldr	r3, [pc, #196]	; (8008164 <xPortStartScheduler+0x134>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080a4:	e009      	b.n	80080ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080a6:	4b2f      	ldr	r3, [pc, #188]	; (8008164 <xPortStartScheduler+0x134>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	4a2d      	ldr	r2, [pc, #180]	; (8008164 <xPortStartScheduler+0x134>)
 80080ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	2b80      	cmp	r3, #128	; 0x80
 80080c4:	d0ef      	beq.n	80080a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080c6:	4b27      	ldr	r3, [pc, #156]	; (8008164 <xPortStartScheduler+0x134>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f1c3 0307 	rsb	r3, r3, #7
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d00a      	beq.n	80080e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60bb      	str	r3, [r7, #8]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080e8:	4b1e      	ldr	r3, [pc, #120]	; (8008164 <xPortStartScheduler+0x134>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	4a1d      	ldr	r2, [pc, #116]	; (8008164 <xPortStartScheduler+0x134>)
 80080f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080f2:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <xPortStartScheduler+0x134>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080fa:	4a1a      	ldr	r2, [pc, #104]	; (8008164 <xPortStartScheduler+0x134>)
 80080fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008106:	4b18      	ldr	r3, [pc, #96]	; (8008168 <xPortStartScheduler+0x138>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a17      	ldr	r2, [pc, #92]	; (8008168 <xPortStartScheduler+0x138>)
 800810c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <xPortStartScheduler+0x138>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a14      	ldr	r2, [pc, #80]	; (8008168 <xPortStartScheduler+0x138>)
 8008118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800811c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800811e:	f000 f8dd 	bl	80082dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008122:	4b12      	ldr	r3, [pc, #72]	; (800816c <xPortStartScheduler+0x13c>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008128:	f000 f8fc 	bl	8008324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800812c:	4b10      	ldr	r3, [pc, #64]	; (8008170 <xPortStartScheduler+0x140>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a0f      	ldr	r2, [pc, #60]	; (8008170 <xPortStartScheduler+0x140>)
 8008132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008138:	f7ff ff66 	bl	8008008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800813c:	f7ff f82a 	bl	8007194 <vTaskSwitchContext>
	prvTaskExitError();
 8008140:	f7ff ff1c 	bl	8007f7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	e000ed00 	.word	0xe000ed00
 8008154:	410fc271 	.word	0x410fc271
 8008158:	410fc270 	.word	0x410fc270
 800815c:	e000e400 	.word	0xe000e400
 8008160:	20005460 	.word	0x20005460
 8008164:	20005464 	.word	0x20005464
 8008168:	e000ed20 	.word	0xe000ed20
 800816c:	20000010 	.word	0x20000010
 8008170:	e000ef34 	.word	0xe000ef34

08008174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	607b      	str	r3, [r7, #4]
}
 800818c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <vPortEnterCritical+0x58>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	4a0d      	ldr	r2, [pc, #52]	; (80081cc <vPortEnterCritical+0x58>)
 8008196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <vPortEnterCritical+0x58>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d10f      	bne.n	80081c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <vPortEnterCritical+0x5c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	603b      	str	r3, [r7, #0]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <vPortEnterCritical+0x4a>
	}
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20000010 	.word	0x20000010
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081da:	4b12      	ldr	r3, [pc, #72]	; (8008224 <vPortExitCritical+0x50>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <vPortExitCritical+0x24>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	607b      	str	r3, [r7, #4]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081f8:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <vPortExitCritical+0x50>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	4a09      	ldr	r2, [pc, #36]	; (8008224 <vPortExitCritical+0x50>)
 8008200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008202:	4b08      	ldr	r3, [pc, #32]	; (8008224 <vPortExitCritical+0x50>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <vPortExitCritical+0x42>
 800820a:	2300      	movs	r3, #0
 800820c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	f383 8811 	msr	BASEPRI, r3
}
 8008214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000010 	.word	0x20000010
	...

08008230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008230:	f3ef 8009 	mrs	r0, PSP
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4b15      	ldr	r3, [pc, #84]	; (8008290 <pxCurrentTCBConst>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	f01e 0f10 	tst.w	lr, #16
 8008240:	bf08      	it	eq
 8008242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824a:	6010      	str	r0, [r2, #0]
 800824c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008254:	f380 8811 	msr	BASEPRI, r0
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f7fe ff98 	bl	8007194 <vTaskSwitchContext>
 8008264:	f04f 0000 	mov.w	r0, #0
 8008268:	f380 8811 	msr	BASEPRI, r0
 800826c:	bc09      	pop	{r0, r3}
 800826e:	6819      	ldr	r1, [r3, #0]
 8008270:	6808      	ldr	r0, [r1, #0]
 8008272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008276:	f01e 0f10 	tst.w	lr, #16
 800827a:	bf08      	it	eq
 800827c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008280:	f380 8809 	msr	PSP, r0
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst>:
 8008290:	20004e34 	.word	0x20004e34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop

08008298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	607b      	str	r3, [r7, #4]
}
 80082b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082b2:	f7fe feb5 	bl	8007020 <xTaskIncrementTick>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082bc:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <xPortSysTickHandler+0x40>)
 80082be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f383 8811 	msr	BASEPRI, r3
}
 80082ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <vPortSetupTimerInterrupt+0x34>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <vPortSetupTimerInterrupt+0x38>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082ec:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <vPortSetupTimerInterrupt+0x3c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <vPortSetupTimerInterrupt+0x40>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	099b      	lsrs	r3, r3, #6
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <vPortSetupTimerInterrupt+0x44>)
 80082fa:	3b01      	subs	r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082fe:	4b04      	ldr	r3, [pc, #16]	; (8008310 <vPortSetupTimerInterrupt+0x34>)
 8008300:	2207      	movs	r2, #7
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	e000e010 	.word	0xe000e010
 8008314:	e000e018 	.word	0xe000e018
 8008318:	20000004 	.word	0x20000004
 800831c:	10624dd3 	.word	0x10624dd3
 8008320:	e000e014 	.word	0xe000e014

08008324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008334 <vPortEnableVFP+0x10>
 8008328:	6801      	ldr	r1, [r0, #0]
 800832a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800832e:	6001      	str	r1, [r0, #0]
 8008330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008332:	bf00      	nop
 8008334:	e000ed88 	.word	0xe000ed88

08008338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800833e:	f3ef 8305 	mrs	r3, IPSR
 8008342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b0f      	cmp	r3, #15
 8008348:	d914      	bls.n	8008374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800834a:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <vPortValidateInterruptPriority+0x70>)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008354:	4b15      	ldr	r3, [pc, #84]	; (80083ac <vPortValidateInterruptPriority+0x74>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	7afa      	ldrb	r2, [r7, #11]
 800835a:	429a      	cmp	r2, r3
 800835c:	d20a      	bcs.n	8008374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	607b      	str	r3, [r7, #4]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <vPortValidateInterruptPriority+0x78>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <vPortValidateInterruptPriority+0x7c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	d90a      	bls.n	800839a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	603b      	str	r3, [r7, #0]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <vPortValidateInterruptPriority+0x60>
	}
 800839a:	bf00      	nop
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	e000e3f0 	.word	0xe000e3f0
 80083ac:	20005460 	.word	0x20005460
 80083b0:	e000ed0c 	.word	0xe000ed0c
 80083b4:	20005464 	.word	0x20005464

080083b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083c4:	f7fe fd70 	bl	8006ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083c8:	4b5b      	ldr	r3, [pc, #364]	; (8008538 <pvPortMalloc+0x180>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083d0:	f000 f920 	bl	8008614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083d4:	4b59      	ldr	r3, [pc, #356]	; (800853c <pvPortMalloc+0x184>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 8093 	bne.w	8008508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01d      	beq.n	8008424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083e8:	2208      	movs	r2, #8
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d014      	beq.n	8008424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f023 0307 	bic.w	r3, r3, #7
 8008400:	3308      	adds	r3, #8
 8008402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <pvPortMalloc+0x6c>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	617b      	str	r3, [r7, #20]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d06e      	beq.n	8008508 <pvPortMalloc+0x150>
 800842a:	4b45      	ldr	r3, [pc, #276]	; (8008540 <pvPortMalloc+0x188>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d869      	bhi.n	8008508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008434:	4b43      	ldr	r3, [pc, #268]	; (8008544 <pvPortMalloc+0x18c>)
 8008436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008438:	4b42      	ldr	r3, [pc, #264]	; (8008544 <pvPortMalloc+0x18c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800843e:	e004      	b.n	800844a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d903      	bls.n	800845c <pvPortMalloc+0xa4>
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1f1      	bne.n	8008440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800845c:	4b36      	ldr	r3, [pc, #216]	; (8008538 <pvPortMalloc+0x180>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008462:	429a      	cmp	r2, r3
 8008464:	d050      	beq.n	8008508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2208      	movs	r2, #8
 800846c:	4413      	add	r3, r2
 800846e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	2308      	movs	r3, #8
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	429a      	cmp	r2, r3
 8008486:	d91f      	bls.n	80084c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <pvPortMalloc+0xf8>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	613b      	str	r3, [r7, #16]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084c2:	69b8      	ldr	r0, [r7, #24]
 80084c4:	f000 f908 	bl	80086d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084c8:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <pvPortMalloc+0x188>)
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	4a1b      	ldr	r2, [pc, #108]	; (8008540 <pvPortMalloc+0x188>)
 80084d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084d6:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <pvPortMalloc+0x188>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <pvPortMalloc+0x190>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d203      	bcs.n	80084ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084e2:	4b17      	ldr	r3, [pc, #92]	; (8008540 <pvPortMalloc+0x188>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a18      	ldr	r2, [pc, #96]	; (8008548 <pvPortMalloc+0x190>)
 80084e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <pvPortMalloc+0x184>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	431a      	orrs	r2, r3
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <pvPortMalloc+0x194>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	4a11      	ldr	r2, [pc, #68]	; (800854c <pvPortMalloc+0x194>)
 8008506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008508:	f7fe fcdc 	bl	8006ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <pvPortMalloc+0x174>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60fb      	str	r3, [r7, #12]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <pvPortMalloc+0x172>
	return pvReturn;
 800852c:	69fb      	ldr	r3, [r7, #28]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3728      	adds	r7, #40	; 0x28
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20009070 	.word	0x20009070
 800853c:	20009084 	.word	0x20009084
 8008540:	20009074 	.word	0x20009074
 8008544:	20009068 	.word	0x20009068
 8008548:	20009078 	.word	0x20009078
 800854c:	2000907c 	.word	0x2000907c

08008550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d04d      	beq.n	80085fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008562:	2308      	movs	r3, #8
 8008564:	425b      	negs	r3, r3
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4413      	add	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	4b24      	ldr	r3, [pc, #144]	; (8008608 <vPortFree+0xb8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4013      	ands	r3, r2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <vPortFree+0x44>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <vPortFree+0x62>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	60bb      	str	r3, [r7, #8]
}
 80085ae:	bf00      	nop
 80085b0:	e7fe      	b.n	80085b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4b14      	ldr	r3, [pc, #80]	; (8008608 <vPortFree+0xb8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01e      	beq.n	80085fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11a      	bne.n	80085fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b0e      	ldr	r3, [pc, #56]	; (8008608 <vPortFree+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	401a      	ands	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085d8:	f7fe fc66 	bl	8006ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	4b0a      	ldr	r3, [pc, #40]	; (800860c <vPortFree+0xbc>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4413      	add	r3, r2
 80085e6:	4a09      	ldr	r2, [pc, #36]	; (800860c <vPortFree+0xbc>)
 80085e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ea:	6938      	ldr	r0, [r7, #16]
 80085ec:	f000 f874 	bl	80086d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <vPortFree+0xc0>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	4a06      	ldr	r2, [pc, #24]	; (8008610 <vPortFree+0xc0>)
 80085f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085fa:	f7fe fc63 	bl	8006ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085fe:	bf00      	nop
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20009084 	.word	0x20009084
 800860c:	20009074 	.word	0x20009074
 8008610:	20009080 	.word	0x20009080

08008614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800861a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800861e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008620:	4b27      	ldr	r3, [pc, #156]	; (80086c0 <prvHeapInit+0xac>)
 8008622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3307      	adds	r3, #7
 8008632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0307 	bic.w	r3, r3, #7
 800863a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <prvHeapInit+0xac>)
 8008644:	4413      	add	r3, r2
 8008646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800864c:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <prvHeapInit+0xb0>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <prvHeapInit+0xb0>)
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	4413      	add	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008660:	2208      	movs	r2, #8
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <prvHeapInit+0xb4>)
 8008674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <prvHeapInit+0xb4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <prvHeapInit+0xb4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <prvHeapInit+0xb4>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <prvHeapInit+0xb8>)
 80086a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <prvHeapInit+0xbc>)
 80086aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <prvHeapInit+0xc0>)
 80086ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086b2:	601a      	str	r2, [r3, #0]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20005468 	.word	0x20005468
 80086c4:	20009068 	.word	0x20009068
 80086c8:	20009070 	.word	0x20009070
 80086cc:	20009078 	.word	0x20009078
 80086d0:	20009074 	.word	0x20009074
 80086d4:	20009084 	.word	0x20009084

080086d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086e0:	4b28      	ldr	r3, [pc, #160]	; (8008784 <prvInsertBlockIntoFreeList+0xac>)
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	e002      	b.n	80086ec <prvInsertBlockIntoFreeList+0x14>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d8f7      	bhi.n	80086e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	d108      	bne.n	800871a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	441a      	add	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d118      	bne.n	8008760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <prvInsertBlockIntoFreeList+0xb0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d00d      	beq.n	8008756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	441a      	add	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	e008      	b.n	8008768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <prvInsertBlockIntoFreeList+0xb0>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	e003      	b.n	8008768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	429a      	cmp	r2, r3
 800876e:	d002      	beq.n	8008776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008776:	bf00      	nop
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20009068 	.word	0x20009068
 8008788:	20009070 	.word	0x20009070

0800878c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800878c:	f000 b862 	b.w	8008854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

08008790 <get_serialized_size_geometry_msgs__msg__Twist>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4604      	mov	r4, r0
 8008794:	b148      	cbz	r0, 80087aa <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8008796:	460d      	mov	r5, r1
 8008798:	f000 f860 	bl	800885c <get_serialized_size_geometry_msgs__msg__Vector3>
 800879c:	4606      	mov	r6, r0
 800879e:	1829      	adds	r1, r5, r0
 80087a0:	f104 0018 	add.w	r0, r4, #24
 80087a4:	f000 f85a 	bl	800885c <get_serialized_size_geometry_msgs__msg__Vector3>
 80087a8:	4430      	add	r0, r6
 80087aa:	bd70      	pop	{r4, r5, r6, pc}

080087ac <_Twist__cdr_deserialize>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	460c      	mov	r4, r1
 80087b0:	b189      	cbz	r1, 80087d6 <_Twist__cdr_deserialize+0x2a>
 80087b2:	4605      	mov	r5, r0
 80087b4:	f000 f8de 	bl	8008974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80087b8:	6843      	ldr	r3, [r0, #4]
 80087ba:	4621      	mov	r1, r4
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	4628      	mov	r0, r5
 80087c0:	4798      	blx	r3
 80087c2:	f000 f8d7 	bl	8008974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80087c6:	6843      	ldr	r3, [r0, #4]
 80087c8:	f104 0118 	add.w	r1, r4, #24
 80087cc:	4628      	mov	r0, r5
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087d4:	4718      	bx	r3
 80087d6:	4608      	mov	r0, r1
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	bf00      	nop

080087dc <_Twist__cdr_serialize>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	9101      	str	r1, [sp, #4]
 80087e2:	b190      	cbz	r0, 800880a <_Twist__cdr_serialize+0x2e>
 80087e4:	4604      	mov	r4, r0
 80087e6:	f000 f8c5 	bl	8008974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80087ea:	6843      	ldr	r3, [r0, #4]
 80087ec:	9901      	ldr	r1, [sp, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	4620      	mov	r0, r4
 80087f2:	4798      	blx	r3
 80087f4:	f000 f8be 	bl	8008974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80087f8:	6843      	ldr	r3, [r0, #4]
 80087fa:	9901      	ldr	r1, [sp, #4]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f104 0018 	add.w	r0, r4, #24
 8008802:	b002      	add	sp, #8
 8008804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008808:	4718      	bx	r3
 800880a:	b002      	add	sp, #8
 800880c:	bd10      	pop	{r4, pc}
 800880e:	bf00      	nop

08008810 <_Twist__get_serialized_size>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	b148      	cbz	r0, 800882a <_Twist__get_serialized_size+0x1a>
 8008816:	2100      	movs	r1, #0
 8008818:	f000 f820 	bl	800885c <get_serialized_size_geometry_msgs__msg__Vector3>
 800881c:	4605      	mov	r5, r0
 800881e:	4629      	mov	r1, r5
 8008820:	f104 0018 	add.w	r0, r4, #24
 8008824:	f000 f81a 	bl	800885c <get_serialized_size_geometry_msgs__msg__Vector3>
 8008828:	4428      	add	r0, r5
 800882a:	bd38      	pop	{r3, r4, r5, pc}

0800882c <_Twist__max_serialized_size>:
 800882c:	b510      	push	{r4, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	2301      	movs	r3, #1
 8008832:	f10d 0007 	add.w	r0, sp, #7
 8008836:	2100      	movs	r1, #0
 8008838:	f88d 3007 	strb.w	r3, [sp, #7]
 800883c:	f000 f87e 	bl	800893c <max_serialized_size_geometry_msgs__msg__Vector3>
 8008840:	4604      	mov	r4, r0
 8008842:	4621      	mov	r1, r4
 8008844:	f10d 0007 	add.w	r0, sp, #7
 8008848:	f000 f878 	bl	800893c <max_serialized_size_geometry_msgs__msg__Vector3>
 800884c:	4420      	add	r0, r4
 800884e:	b002      	add	sp, #8
 8008850:	bd10      	pop	{r4, pc}
 8008852:	bf00      	nop

08008854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008854:	4800      	ldr	r0, [pc, #0]	; (8008858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8008856:	4770      	bx	lr
 8008858:	20000014 	.word	0x20000014

0800885c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800885c:	b1b8      	cbz	r0, 800888e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800885e:	b538      	push	{r3, r4, r5, lr}
 8008860:	460d      	mov	r5, r1
 8008862:	4628      	mov	r0, r5
 8008864:	2108      	movs	r1, #8
 8008866:	f001 f9fd 	bl	8009c64 <ucdr_alignment>
 800886a:	f105 0308 	add.w	r3, r5, #8
 800886e:	181c      	adds	r4, r3, r0
 8008870:	4620      	mov	r0, r4
 8008872:	2108      	movs	r1, #8
 8008874:	f001 f9f6 	bl	8009c64 <ucdr_alignment>
 8008878:	3008      	adds	r0, #8
 800887a:	4404      	add	r4, r0
 800887c:	4620      	mov	r0, r4
 800887e:	2108      	movs	r1, #8
 8008880:	f001 f9f0 	bl	8009c64 <ucdr_alignment>
 8008884:	f1c5 0508 	rsb	r5, r5, #8
 8008888:	4428      	add	r0, r5
 800888a:	4420      	add	r0, r4
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	4770      	bx	lr

08008890 <_Vector3__cdr_deserialize>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	460c      	mov	r4, r1
 8008894:	b171      	cbz	r1, 80088b4 <_Vector3__cdr_deserialize+0x24>
 8008896:	4605      	mov	r5, r0
 8008898:	f001 f8c8 	bl	8009a2c <ucdr_deserialize_double>
 800889c:	f104 0108 	add.w	r1, r4, #8
 80088a0:	4628      	mov	r0, r5
 80088a2:	f001 f8c3 	bl	8009a2c <ucdr_deserialize_double>
 80088a6:	f104 0110 	add.w	r1, r4, #16
 80088aa:	4628      	mov	r0, r5
 80088ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b0:	f001 b8bc 	b.w	8009a2c <ucdr_deserialize_double>
 80088b4:	4608      	mov	r0, r1
 80088b6:	bd38      	pop	{r3, r4, r5, pc}

080088b8 <_Vector3__cdr_serialize>:
 80088b8:	b198      	cbz	r0, 80088e2 <_Vector3__cdr_serialize+0x2a>
 80088ba:	b538      	push	{r3, r4, r5, lr}
 80088bc:	ed90 0b00 	vldr	d0, [r0]
 80088c0:	460d      	mov	r5, r1
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	f000 ffe1 	bl	800988c <ucdr_serialize_double>
 80088ca:	ed94 0b02 	vldr	d0, [r4, #8]
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 ffdc 	bl	800988c <ucdr_serialize_double>
 80088d4:	ed94 0b04 	vldr	d0, [r4, #16]
 80088d8:	4628      	mov	r0, r5
 80088da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088de:	f000 bfd5 	b.w	800988c <ucdr_serialize_double>
 80088e2:	4770      	bx	lr

080088e4 <_Vector3__get_serialized_size>:
 80088e4:	b198      	cbz	r0, 800890e <_Vector3__get_serialized_size+0x2a>
 80088e6:	b510      	push	{r4, lr}
 80088e8:	2108      	movs	r1, #8
 80088ea:	2000      	movs	r0, #0
 80088ec:	f001 f9ba 	bl	8009c64 <ucdr_alignment>
 80088f0:	f100 0408 	add.w	r4, r0, #8
 80088f4:	4620      	mov	r0, r4
 80088f6:	2108      	movs	r1, #8
 80088f8:	f001 f9b4 	bl	8009c64 <ucdr_alignment>
 80088fc:	3008      	adds	r0, #8
 80088fe:	4404      	add	r4, r0
 8008900:	4620      	mov	r0, r4
 8008902:	2108      	movs	r1, #8
 8008904:	f001 f9ae 	bl	8009c64 <ucdr_alignment>
 8008908:	3008      	adds	r0, #8
 800890a:	4420      	add	r0, r4
 800890c:	bd10      	pop	{r4, pc}
 800890e:	4770      	bx	lr

08008910 <_Vector3__max_serialized_size>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	2108      	movs	r1, #8
 8008914:	2000      	movs	r0, #0
 8008916:	f001 f9a5 	bl	8009c64 <ucdr_alignment>
 800891a:	f100 0508 	add.w	r5, r0, #8
 800891e:	4628      	mov	r0, r5
 8008920:	2108      	movs	r1, #8
 8008922:	f001 f99f 	bl	8009c64 <ucdr_alignment>
 8008926:	f100 0408 	add.w	r4, r0, #8
 800892a:	442c      	add	r4, r5
 800892c:	4620      	mov	r0, r4
 800892e:	2108      	movs	r1, #8
 8008930:	f001 f998 	bl	8009c64 <ucdr_alignment>
 8008934:	3008      	adds	r0, #8
 8008936:	4420      	add	r0, r4
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop

0800893c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800893c:	2301      	movs	r3, #1
 800893e:	b570      	push	{r4, r5, r6, lr}
 8008940:	7003      	strb	r3, [r0, #0]
 8008942:	460c      	mov	r4, r1
 8008944:	4608      	mov	r0, r1
 8008946:	2108      	movs	r1, #8
 8008948:	f001 f98c 	bl	8009c64 <ucdr_alignment>
 800894c:	f104 0508 	add.w	r5, r4, #8
 8008950:	1946      	adds	r6, r0, r5
 8008952:	4630      	mov	r0, r6
 8008954:	2108      	movs	r1, #8
 8008956:	f001 f985 	bl	8009c64 <ucdr_alignment>
 800895a:	f100 0508 	add.w	r5, r0, #8
 800895e:	4435      	add	r5, r6
 8008960:	4628      	mov	r0, r5
 8008962:	2108      	movs	r1, #8
 8008964:	f001 f97e 	bl	8009c64 <ucdr_alignment>
 8008968:	f1c4 0408 	rsb	r4, r4, #8
 800896c:	4420      	add	r0, r4
 800896e:	4428      	add	r0, r5
 8008970:	bd70      	pop	{r4, r5, r6, pc}
 8008972:	bf00      	nop

08008974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8008974:	4800      	ldr	r0, [pc, #0]	; (8008978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8008976:	4770      	bx	lr
 8008978:	2000003c 	.word	0x2000003c

0800897c <ucdr_serialize_bool>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	460d      	mov	r5, r1
 8008980:	2101      	movs	r1, #1
 8008982:	4604      	mov	r4, r0
 8008984:	f001 f924 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008988:	b148      	cbz	r0, 800899e <ucdr_serialize_bool+0x22>
 800898a:	68a3      	ldr	r3, [r4, #8]
 800898c:	701d      	strb	r5, [r3, #0]
 800898e:	68a2      	ldr	r2, [r4, #8]
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	3201      	adds	r2, #1
 8008994:	3301      	adds	r3, #1
 8008996:	2101      	movs	r1, #1
 8008998:	60a2      	str	r2, [r4, #8]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	7561      	strb	r1, [r4, #21]
 800899e:	7da0      	ldrb	r0, [r4, #22]
 80089a0:	f080 0001 	eor.w	r0, r0, #1
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	bf00      	nop

080089a8 <ucdr_deserialize_bool>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	460d      	mov	r5, r1
 80089ac:	2101      	movs	r1, #1
 80089ae:	4604      	mov	r4, r0
 80089b0:	f001 f90e 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80089b4:	b168      	cbz	r0, 80089d2 <ucdr_deserialize_bool+0x2a>
 80089b6:	68a2      	ldr	r2, [r4, #8]
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80089be:	3900      	subs	r1, #0
 80089c0:	f103 0301 	add.w	r3, r3, #1
 80089c4:	bf18      	it	ne
 80089c6:	2101      	movne	r1, #1
 80089c8:	2001      	movs	r0, #1
 80089ca:	7029      	strb	r1, [r5, #0]
 80089cc:	60a2      	str	r2, [r4, #8]
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	7560      	strb	r0, [r4, #21]
 80089d2:	7da0      	ldrb	r0, [r4, #22]
 80089d4:	f080 0001 	eor.w	r0, r0, #1
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	bf00      	nop

080089dc <ucdr_serialize_uint8_t>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	460d      	mov	r5, r1
 80089e0:	2101      	movs	r1, #1
 80089e2:	4604      	mov	r4, r0
 80089e4:	f001 f8f4 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80089e8:	b148      	cbz	r0, 80089fe <ucdr_serialize_uint8_t+0x22>
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	701d      	strb	r5, [r3, #0]
 80089ee:	68a2      	ldr	r2, [r4, #8]
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	3201      	adds	r2, #1
 80089f4:	3301      	adds	r3, #1
 80089f6:	2101      	movs	r1, #1
 80089f8:	60a2      	str	r2, [r4, #8]
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	7561      	strb	r1, [r4, #21]
 80089fe:	7da0      	ldrb	r0, [r4, #22]
 8008a00:	f080 0001 	eor.w	r0, r0, #1
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	bf00      	nop

08008a08 <ucdr_deserialize_uint8_t>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f001 f8de 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008a14:	b150      	cbz	r0, 8008a2c <ucdr_deserialize_uint8_t+0x24>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	702b      	strb	r3, [r5, #0]
 8008a1c:	68a2      	ldr	r2, [r4, #8]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	3201      	adds	r2, #1
 8008a22:	3301      	adds	r3, #1
 8008a24:	2101      	movs	r1, #1
 8008a26:	60a2      	str	r2, [r4, #8]
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	7561      	strb	r1, [r4, #21]
 8008a2c:	7da0      	ldrb	r0, [r4, #22]
 8008a2e:	f080 0001 	eor.w	r0, r0, #1
 8008a32:	bd38      	pop	{r3, r4, r5, pc}

08008a34 <ucdr_serialize_uint16_t>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	2102      	movs	r1, #2
 8008a3e:	4604      	mov	r4, r0
 8008a40:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008a44:	f001 f916 	bl	8009c74 <ucdr_buffer_alignment>
 8008a48:	4601      	mov	r1, r0
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	7d67      	ldrb	r7, [r4, #21]
 8008a4e:	f001 f955 	bl	8009cfc <ucdr_advance_buffer>
 8008a52:	4620      	mov	r0, r4
 8008a54:	2102      	movs	r1, #2
 8008a56:	f001 f8af 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8008a5a:	bb78      	cbnz	r0, 8008abc <ucdr_serialize_uint16_t+0x88>
 8008a5c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8008a60:	42b5      	cmp	r5, r6
 8008a62:	d926      	bls.n	8008ab2 <ucdr_serialize_uint16_t+0x7e>
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	60a5      	str	r5, [r4, #8]
 8008a68:	1bad      	subs	r5, r5, r6
 8008a6a:	442a      	add	r2, r5
 8008a6c:	f1c5 0802 	rsb	r8, r5, #2
 8008a70:	6122      	str	r2, [r4, #16]
 8008a72:	4641      	mov	r1, r8
 8008a74:	4620      	mov	r0, r4
 8008a76:	f001 f8ab 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d03b      	beq.n	8008af6 <ucdr_serialize_uint16_t+0xc2>
 8008a7e:	7d23      	ldrb	r3, [r4, #20]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d04a      	beq.n	8008b1a <ucdr_serialize_uint16_t+0xe6>
 8008a84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a88:	7033      	strb	r3, [r6, #0]
 8008a8a:	2d00      	cmp	r5, #0
 8008a8c:	d040      	beq.n	8008b10 <ucdr_serialize_uint16_t+0xdc>
 8008a8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a92:	7073      	strb	r3, [r6, #1]
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	68a2      	ldr	r2, [r4, #8]
 8008a98:	7da0      	ldrb	r0, [r4, #22]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	1b5b      	subs	r3, r3, r5
 8008a9e:	4442      	add	r2, r8
 8008aa0:	2102      	movs	r1, #2
 8008aa2:	f080 0001 	eor.w	r0, r0, #1
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	60a2      	str	r2, [r4, #8]
 8008aaa:	7561      	strb	r1, [r4, #21]
 8008aac:	b002      	add	sp, #8
 8008aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab2:	2102      	movs	r1, #2
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f001 f88b 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008aba:	b190      	cbz	r0, 8008ae2 <ucdr_serialize_uint16_t+0xae>
 8008abc:	7d23      	ldrb	r3, [r4, #20]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	d014      	beq.n	8008aee <ucdr_serialize_uint16_t+0xba>
 8008ac4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	68a3      	ldr	r3, [r4, #8]
 8008acc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ad0:	705a      	strb	r2, [r3, #1]
 8008ad2:	68a2      	ldr	r2, [r4, #8]
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	3202      	adds	r2, #2
 8008ad8:	3302      	adds	r3, #2
 8008ada:	2102      	movs	r1, #2
 8008adc:	60a2      	str	r2, [r4, #8]
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	7561      	strb	r1, [r4, #21]
 8008ae2:	7da0      	ldrb	r0, [r4, #22]
 8008ae4:	f080 0001 	eor.w	r0, r0, #1
 8008ae8:	b002      	add	sp, #8
 8008aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	e7ed      	b.n	8008ad2 <ucdr_serialize_uint16_t+0x9e>
 8008af6:	68a2      	ldr	r2, [r4, #8]
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	7da0      	ldrb	r0, [r4, #22]
 8008afc:	7567      	strb	r7, [r4, #21]
 8008afe:	1b52      	subs	r2, r2, r5
 8008b00:	1b5b      	subs	r3, r3, r5
 8008b02:	f080 0001 	eor.w	r0, r0, #1
 8008b06:	60a2      	str	r2, [r4, #8]
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	b002      	add	sp, #8
 8008b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b10:	68a3      	ldr	r3, [r4, #8]
 8008b12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b16:	701a      	strb	r2, [r3, #0]
 8008b18:	e7bc      	b.n	8008a94 <ucdr_serialize_uint16_t+0x60>
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f10d 0606 	add.w	r6, sp, #6
 8008b20:	4631      	mov	r1, r6
 8008b22:	462a      	mov	r2, r5
 8008b24:	f00a fcca 	bl	80134bc <memcpy>
 8008b28:	68a0      	ldr	r0, [r4, #8]
 8008b2a:	4642      	mov	r2, r8
 8008b2c:	1971      	adds	r1, r6, r5
 8008b2e:	f00a fcc5 	bl	80134bc <memcpy>
 8008b32:	e7af      	b.n	8008a94 <ucdr_serialize_uint16_t+0x60>

08008b34 <ucdr_serialize_endian_uint16_t>:
 8008b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	460d      	mov	r5, r1
 8008b3c:	2102      	movs	r1, #2
 8008b3e:	4604      	mov	r4, r0
 8008b40:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008b44:	f001 f896 	bl	8009c74 <ucdr_buffer_alignment>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008b50:	f001 f8d4 	bl	8009cfc <ucdr_advance_buffer>
 8008b54:	4620      	mov	r0, r4
 8008b56:	2102      	movs	r1, #2
 8008b58:	f001 f82e 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8008b5c:	bb70      	cbnz	r0, 8008bbc <ucdr_serialize_endian_uint16_t+0x88>
 8008b5e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b62:	42be      	cmp	r6, r7
 8008b64:	d925      	bls.n	8008bb2 <ucdr_serialize_endian_uint16_t+0x7e>
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	60a6      	str	r6, [r4, #8]
 8008b6a:	1bf6      	subs	r6, r6, r7
 8008b6c:	4432      	add	r2, r6
 8008b6e:	f1c6 0902 	rsb	r9, r6, #2
 8008b72:	6122      	str	r2, [r4, #16]
 8008b74:	4649      	mov	r1, r9
 8008b76:	4620      	mov	r0, r4
 8008b78:	f001 f82a 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d039      	beq.n	8008bf4 <ucdr_serialize_endian_uint16_t+0xc0>
 8008b80:	2d01      	cmp	r5, #1
 8008b82:	d04a      	beq.n	8008c1a <ucdr_serialize_endian_uint16_t+0xe6>
 8008b84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008b88:	703b      	strb	r3, [r7, #0]
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d040      	beq.n	8008c10 <ucdr_serialize_endian_uint16_t+0xdc>
 8008b8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b92:	707b      	strb	r3, [r7, #1]
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	68a2      	ldr	r2, [r4, #8]
 8008b98:	7da0      	ldrb	r0, [r4, #22]
 8008b9a:	3302      	adds	r3, #2
 8008b9c:	1b9b      	subs	r3, r3, r6
 8008b9e:	444a      	add	r2, r9
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	f080 0001 	eor.w	r0, r0, #1
 8008ba6:	6123      	str	r3, [r4, #16]
 8008ba8:	60a2      	str	r2, [r4, #8]
 8008baa:	7561      	strb	r1, [r4, #21]
 8008bac:	b003      	add	sp, #12
 8008bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bb2:	2102      	movs	r1, #2
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f001 f80b 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008bba:	b188      	cbz	r0, 8008be0 <ucdr_serialize_endian_uint16_t+0xac>
 8008bbc:	2d01      	cmp	r5, #1
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	d014      	beq.n	8008bec <ucdr_serialize_endian_uint16_t+0xb8>
 8008bc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008bc6:	701a      	strb	r2, [r3, #0]
 8008bc8:	68a3      	ldr	r3, [r4, #8]
 8008bca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008bce:	705a      	strb	r2, [r3, #1]
 8008bd0:	68a2      	ldr	r2, [r4, #8]
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	3202      	adds	r2, #2
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	2102      	movs	r1, #2
 8008bda:	60a2      	str	r2, [r4, #8]
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	7561      	strb	r1, [r4, #21]
 8008be0:	7da0      	ldrb	r0, [r4, #22]
 8008be2:	f080 0001 	eor.w	r0, r0, #1
 8008be6:	b003      	add	sp, #12
 8008be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e7ed      	b.n	8008bd0 <ucdr_serialize_endian_uint16_t+0x9c>
 8008bf4:	68a2      	ldr	r2, [r4, #8]
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	7da0      	ldrb	r0, [r4, #22]
 8008bfa:	f884 8015 	strb.w	r8, [r4, #21]
 8008bfe:	1b92      	subs	r2, r2, r6
 8008c00:	1b9b      	subs	r3, r3, r6
 8008c02:	f080 0001 	eor.w	r0, r0, #1
 8008c06:	60a2      	str	r2, [r4, #8]
 8008c08:	6123      	str	r3, [r4, #16]
 8008c0a:	b003      	add	sp, #12
 8008c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e7bc      	b.n	8008b94 <ucdr_serialize_endian_uint16_t+0x60>
 8008c1a:	f10d 0506 	add.w	r5, sp, #6
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4632      	mov	r2, r6
 8008c22:	4638      	mov	r0, r7
 8008c24:	f00a fc4a 	bl	80134bc <memcpy>
 8008c28:	68a0      	ldr	r0, [r4, #8]
 8008c2a:	464a      	mov	r2, r9
 8008c2c:	19a9      	adds	r1, r5, r6
 8008c2e:	f00a fc45 	bl	80134bc <memcpy>
 8008c32:	e7af      	b.n	8008b94 <ucdr_serialize_endian_uint16_t+0x60>

08008c34 <ucdr_deserialize_uint16_t>:
 8008c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c38:	460d      	mov	r5, r1
 8008c3a:	2102      	movs	r1, #2
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	f001 f819 	bl	8009c74 <ucdr_buffer_alignment>
 8008c42:	4601      	mov	r1, r0
 8008c44:	4620      	mov	r0, r4
 8008c46:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008c4a:	f001 f857 	bl	8009cfc <ucdr_advance_buffer>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	2102      	movs	r1, #2
 8008c52:	f000 ffb1 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8008c56:	bb60      	cbnz	r0, 8008cb2 <ucdr_deserialize_uint16_t+0x7e>
 8008c58:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008c5c:	42be      	cmp	r6, r7
 8008c5e:	d923      	bls.n	8008ca8 <ucdr_deserialize_uint16_t+0x74>
 8008c60:	6922      	ldr	r2, [r4, #16]
 8008c62:	60a6      	str	r6, [r4, #8]
 8008c64:	1bf6      	subs	r6, r6, r7
 8008c66:	4432      	add	r2, r6
 8008c68:	f1c6 0902 	rsb	r9, r6, #2
 8008c6c:	6122      	str	r2, [r4, #16]
 8008c6e:	4649      	mov	r1, r9
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 ffad 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d034      	beq.n	8008ce4 <ucdr_deserialize_uint16_t+0xb0>
 8008c7a:	7d23      	ldrb	r3, [r4, #20]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d042      	beq.n	8008d06 <ucdr_deserialize_uint16_t+0xd2>
 8008c80:	787b      	ldrb	r3, [r7, #1]
 8008c82:	702b      	strb	r3, [r5, #0]
 8008c84:	2e00      	cmp	r6, #0
 8008c86:	d03a      	beq.n	8008cfe <ucdr_deserialize_uint16_t+0xca>
 8008c88:	783b      	ldrb	r3, [r7, #0]
 8008c8a:	706b      	strb	r3, [r5, #1]
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	68a2      	ldr	r2, [r4, #8]
 8008c90:	7da0      	ldrb	r0, [r4, #22]
 8008c92:	2102      	movs	r1, #2
 8008c94:	3302      	adds	r3, #2
 8008c96:	1b9b      	subs	r3, r3, r6
 8008c98:	444a      	add	r2, r9
 8008c9a:	7561      	strb	r1, [r4, #21]
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	60a2      	str	r2, [r4, #8]
 8008ca0:	f080 0001 	eor.w	r0, r0, #1
 8008ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 ff90 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008cb0:	b180      	cbz	r0, 8008cd4 <ucdr_deserialize_uint16_t+0xa0>
 8008cb2:	7d23      	ldrb	r3, [r4, #20]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	d011      	beq.n	8008cde <ucdr_deserialize_uint16_t+0xaa>
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	702b      	strb	r3, [r5, #0]
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	706b      	strb	r3, [r5, #1]
 8008cc4:	68a2      	ldr	r2, [r4, #8]
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	3202      	adds	r2, #2
 8008cca:	3302      	adds	r3, #2
 8008ccc:	2102      	movs	r1, #2
 8008cce:	60a2      	str	r2, [r4, #8]
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	7561      	strb	r1, [r4, #21]
 8008cd4:	7da0      	ldrb	r0, [r4, #22]
 8008cd6:	f080 0001 	eor.w	r0, r0, #1
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	802b      	strh	r3, [r5, #0]
 8008ce2:	e7ef      	b.n	8008cc4 <ucdr_deserialize_uint16_t+0x90>
 8008ce4:	68a2      	ldr	r2, [r4, #8]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	7da0      	ldrb	r0, [r4, #22]
 8008cea:	f884 8015 	strb.w	r8, [r4, #21]
 8008cee:	1b92      	subs	r2, r2, r6
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	60a2      	str	r2, [r4, #8]
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	f080 0001 	eor.w	r0, r0, #1
 8008cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	706b      	strb	r3, [r5, #1]
 8008d04:	e7c2      	b.n	8008c8c <ucdr_deserialize_uint16_t+0x58>
 8008d06:	4639      	mov	r1, r7
 8008d08:	4632      	mov	r2, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f00a fbd6 	bl	80134bc <memcpy>
 8008d10:	68a1      	ldr	r1, [r4, #8]
 8008d12:	464a      	mov	r2, r9
 8008d14:	19a8      	adds	r0, r5, r6
 8008d16:	f00a fbd1 	bl	80134bc <memcpy>
 8008d1a:	e7b7      	b.n	8008c8c <ucdr_deserialize_uint16_t+0x58>

08008d1c <ucdr_deserialize_endian_uint16_t>:
 8008d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d20:	460e      	mov	r6, r1
 8008d22:	2102      	movs	r1, #2
 8008d24:	4604      	mov	r4, r0
 8008d26:	4615      	mov	r5, r2
 8008d28:	f000 ffa4 	bl	8009c74 <ucdr_buffer_alignment>
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008d34:	f000 ffe2 	bl	8009cfc <ucdr_advance_buffer>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	f000 ff3c 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8008d40:	bb70      	cbnz	r0, 8008da0 <ucdr_deserialize_endian_uint16_t+0x84>
 8008d42:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008d46:	4547      	cmp	r7, r8
 8008d48:	d925      	bls.n	8008d96 <ucdr_deserialize_endian_uint16_t+0x7a>
 8008d4a:	6922      	ldr	r2, [r4, #16]
 8008d4c:	60a7      	str	r7, [r4, #8]
 8008d4e:	eba7 0708 	sub.w	r7, r7, r8
 8008d52:	443a      	add	r2, r7
 8008d54:	f1c7 0a02 	rsb	sl, r7, #2
 8008d58:	6122      	str	r2, [r4, #16]
 8008d5a:	4651      	mov	r1, sl
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 ff37 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d034      	beq.n	8008dd0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008d66:	2e01      	cmp	r6, #1
 8008d68:	d043      	beq.n	8008df2 <ucdr_deserialize_endian_uint16_t+0xd6>
 8008d6a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d6e:	702b      	strb	r3, [r5, #0]
 8008d70:	2f00      	cmp	r7, #0
 8008d72:	d03a      	beq.n	8008dea <ucdr_deserialize_endian_uint16_t+0xce>
 8008d74:	f898 3000 	ldrb.w	r3, [r8]
 8008d78:	706b      	strb	r3, [r5, #1]
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	68a2      	ldr	r2, [r4, #8]
 8008d7e:	7da0      	ldrb	r0, [r4, #22]
 8008d80:	2102      	movs	r1, #2
 8008d82:	3302      	adds	r3, #2
 8008d84:	1bdb      	subs	r3, r3, r7
 8008d86:	4452      	add	r2, sl
 8008d88:	7561      	strb	r1, [r4, #21]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	60a2      	str	r2, [r4, #8]
 8008d8e:	f080 0001 	eor.w	r0, r0, #1
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	2102      	movs	r1, #2
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 ff19 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008d9e:	b178      	cbz	r0, 8008dc0 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008da0:	2e01      	cmp	r6, #1
 8008da2:	68a3      	ldr	r3, [r4, #8]
 8008da4:	d011      	beq.n	8008dca <ucdr_deserialize_endian_uint16_t+0xae>
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	702b      	strb	r3, [r5, #0]
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	706b      	strb	r3, [r5, #1]
 8008db0:	68a2      	ldr	r2, [r4, #8]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	3202      	adds	r2, #2
 8008db6:	3302      	adds	r3, #2
 8008db8:	2102      	movs	r1, #2
 8008dba:	60a2      	str	r2, [r4, #8]
 8008dbc:	6123      	str	r3, [r4, #16]
 8008dbe:	7561      	strb	r1, [r4, #21]
 8008dc0:	7da0      	ldrb	r0, [r4, #22]
 8008dc2:	f080 0001 	eor.w	r0, r0, #1
 8008dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	802b      	strh	r3, [r5, #0]
 8008dce:	e7ef      	b.n	8008db0 <ucdr_deserialize_endian_uint16_t+0x94>
 8008dd0:	68a2      	ldr	r2, [r4, #8]
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	7da0      	ldrb	r0, [r4, #22]
 8008dd6:	f884 9015 	strb.w	r9, [r4, #21]
 8008dda:	1bd2      	subs	r2, r2, r7
 8008ddc:	1bdb      	subs	r3, r3, r7
 8008dde:	60a2      	str	r2, [r4, #8]
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	f080 0001 	eor.w	r0, r0, #1
 8008de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	706b      	strb	r3, [r5, #1]
 8008df0:	e7c3      	b.n	8008d7a <ucdr_deserialize_endian_uint16_t+0x5e>
 8008df2:	4641      	mov	r1, r8
 8008df4:	463a      	mov	r2, r7
 8008df6:	4628      	mov	r0, r5
 8008df8:	f00a fb60 	bl	80134bc <memcpy>
 8008dfc:	68a1      	ldr	r1, [r4, #8]
 8008dfe:	4652      	mov	r2, sl
 8008e00:	19e8      	adds	r0, r5, r7
 8008e02:	f00a fb5b 	bl	80134bc <memcpy>
 8008e06:	e7b8      	b.n	8008d7a <ucdr_deserialize_endian_uint16_t+0x5e>

08008e08 <ucdr_serialize_uint32_t>:
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	4604      	mov	r4, r0
 8008e10:	9101      	str	r1, [sp, #4]
 8008e12:	2104      	movs	r1, #4
 8008e14:	f000 ff2e 	bl	8009c74 <ucdr_buffer_alignment>
 8008e18:	4601      	mov	r1, r0
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	7d67      	ldrb	r7, [r4, #21]
 8008e1e:	f000 ff6d 	bl	8009cfc <ucdr_advance_buffer>
 8008e22:	4620      	mov	r0, r4
 8008e24:	2104      	movs	r1, #4
 8008e26:	f000 fec7 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d139      	bne.n	8008ea2 <ucdr_serialize_uint32_t+0x9a>
 8008e2e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8008e32:	42ae      	cmp	r6, r5
 8008e34:	d930      	bls.n	8008e98 <ucdr_serialize_uint32_t+0x90>
 8008e36:	6922      	ldr	r2, [r4, #16]
 8008e38:	60a6      	str	r6, [r4, #8]
 8008e3a:	1b76      	subs	r6, r6, r5
 8008e3c:	4432      	add	r2, r6
 8008e3e:	f1c6 0804 	rsb	r8, r6, #4
 8008e42:	6122      	str	r2, [r4, #16]
 8008e44:	4641      	mov	r1, r8
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 fec2 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d04c      	beq.n	8008eea <ucdr_serialize_uint32_t+0xe2>
 8008e50:	7d23      	ldrb	r3, [r4, #20]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d063      	beq.n	8008f1e <ucdr_serialize_uint32_t+0x116>
 8008e56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e5a:	702b      	strb	r3, [r5, #0]
 8008e5c:	2e00      	cmp	r6, #0
 8008e5e:	d051      	beq.n	8008f04 <ucdr_serialize_uint32_t+0xfc>
 8008e60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e64:	706b      	strb	r3, [r5, #1]
 8008e66:	2e01      	cmp	r6, #1
 8008e68:	d050      	beq.n	8008f0c <ucdr_serialize_uint32_t+0x104>
 8008e6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e6e:	70ab      	strb	r3, [r5, #2]
 8008e70:	2e02      	cmp	r6, #2
 8008e72:	d04f      	beq.n	8008f14 <ucdr_serialize_uint32_t+0x10c>
 8008e74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008e78:	70eb      	strb	r3, [r5, #3]
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	68a2      	ldr	r2, [r4, #8]
 8008e7e:	7da0      	ldrb	r0, [r4, #22]
 8008e80:	3304      	adds	r3, #4
 8008e82:	1b9b      	subs	r3, r3, r6
 8008e84:	4442      	add	r2, r8
 8008e86:	2104      	movs	r1, #4
 8008e88:	f080 0001 	eor.w	r0, r0, #1
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	60a2      	str	r2, [r4, #8]
 8008e90:	7561      	strb	r1, [r4, #21]
 8008e92:	b002      	add	sp, #8
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	2104      	movs	r1, #4
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fe98 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008ea0:	b1d0      	cbz	r0, 8008ed8 <ucdr_serialize_uint32_t+0xd0>
 8008ea2:	7d23      	ldrb	r3, [r4, #20]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	d01c      	beq.n	8008ee4 <ucdr_serialize_uint32_t+0xdc>
 8008eaa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	68a3      	ldr	r3, [r4, #8]
 8008eb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008eb6:	705a      	strb	r2, [r3, #1]
 8008eb8:	68a3      	ldr	r3, [r4, #8]
 8008eba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008ebe:	709a      	strb	r2, [r3, #2]
 8008ec0:	68a3      	ldr	r3, [r4, #8]
 8008ec2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ec6:	70da      	strb	r2, [r3, #3]
 8008ec8:	68a2      	ldr	r2, [r4, #8]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	3204      	adds	r2, #4
 8008ece:	3304      	adds	r3, #4
 8008ed0:	2104      	movs	r1, #4
 8008ed2:	60a2      	str	r2, [r4, #8]
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	7561      	strb	r1, [r4, #21]
 8008ed8:	7da0      	ldrb	r0, [r4, #22]
 8008eda:	f080 0001 	eor.w	r0, r0, #1
 8008ede:	b002      	add	sp, #8
 8008ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee4:	9a01      	ldr	r2, [sp, #4]
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e7ee      	b.n	8008ec8 <ucdr_serialize_uint32_t+0xc0>
 8008eea:	68a2      	ldr	r2, [r4, #8]
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	7da0      	ldrb	r0, [r4, #22]
 8008ef0:	7567      	strb	r7, [r4, #21]
 8008ef2:	1b92      	subs	r2, r2, r6
 8008ef4:	1b9b      	subs	r3, r3, r6
 8008ef6:	f080 0001 	eor.w	r0, r0, #1
 8008efa:	60a2      	str	r2, [r4, #8]
 8008efc:	6123      	str	r3, [r4, #16]
 8008efe:	b002      	add	sp, #8
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f04:	68a3      	ldr	r3, [r4, #8]
 8008f06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	e7ad      	b.n	8008e7a <ucdr_serialize_uint32_t+0x72>
 8008f1e:	4628      	mov	r0, r5
 8008f20:	ad01      	add	r5, sp, #4
 8008f22:	4629      	mov	r1, r5
 8008f24:	4632      	mov	r2, r6
 8008f26:	f00a fac9 	bl	80134bc <memcpy>
 8008f2a:	68a0      	ldr	r0, [r4, #8]
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	19a9      	adds	r1, r5, r6
 8008f30:	f00a fac4 	bl	80134bc <memcpy>
 8008f34:	e7a1      	b.n	8008e7a <ucdr_serialize_uint32_t+0x72>
 8008f36:	bf00      	nop

08008f38 <ucdr_serialize_endian_uint32_t>:
 8008f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	460d      	mov	r5, r1
 8008f40:	2104      	movs	r1, #4
 8008f42:	4604      	mov	r4, r0
 8008f44:	9201      	str	r2, [sp, #4]
 8008f46:	f000 fe95 	bl	8009c74 <ucdr_buffer_alignment>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008f52:	f000 fed3 	bl	8009cfc <ucdr_advance_buffer>
 8008f56:	4620      	mov	r0, r4
 8008f58:	2104      	movs	r1, #4
 8008f5a:	f000 fe2d 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d138      	bne.n	8008fd4 <ucdr_serialize_endian_uint32_t+0x9c>
 8008f62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008f66:	42b7      	cmp	r7, r6
 8008f68:	d92f      	bls.n	8008fca <ucdr_serialize_endian_uint32_t+0x92>
 8008f6a:	6922      	ldr	r2, [r4, #16]
 8008f6c:	60a7      	str	r7, [r4, #8]
 8008f6e:	1bbf      	subs	r7, r7, r6
 8008f70:	443a      	add	r2, r7
 8008f72:	f1c7 0904 	rsb	r9, r7, #4
 8008f76:	6122      	str	r2, [r4, #16]
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fe28 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d04a      	beq.n	800901a <ucdr_serialize_endian_uint32_t+0xe2>
 8008f84:	2d01      	cmp	r5, #1
 8008f86:	d063      	beq.n	8009050 <ucdr_serialize_endian_uint32_t+0x118>
 8008f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f8c:	7033      	strb	r3, [r6, #0]
 8008f8e:	2f00      	cmp	r7, #0
 8008f90:	d051      	beq.n	8009036 <ucdr_serialize_endian_uint32_t+0xfe>
 8008f92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f96:	7073      	strb	r3, [r6, #1]
 8008f98:	2f01      	cmp	r7, #1
 8008f9a:	d050      	beq.n	800903e <ucdr_serialize_endian_uint32_t+0x106>
 8008f9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008fa0:	70b3      	strb	r3, [r6, #2]
 8008fa2:	2f02      	cmp	r7, #2
 8008fa4:	d04f      	beq.n	8009046 <ucdr_serialize_endian_uint32_t+0x10e>
 8008fa6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008faa:	70f3      	strb	r3, [r6, #3]
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	68a2      	ldr	r2, [r4, #8]
 8008fb0:	7da0      	ldrb	r0, [r4, #22]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	1bdb      	subs	r3, r3, r7
 8008fb6:	444a      	add	r2, r9
 8008fb8:	2104      	movs	r1, #4
 8008fba:	f080 0001 	eor.w	r0, r0, #1
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	60a2      	str	r2, [r4, #8]
 8008fc2:	7561      	strb	r1, [r4, #21]
 8008fc4:	b003      	add	sp, #12
 8008fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fca:	2104      	movs	r1, #4
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fdff 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8008fd2:	b1c8      	cbz	r0, 8009008 <ucdr_serialize_endian_uint32_t+0xd0>
 8008fd4:	2d01      	cmp	r5, #1
 8008fd6:	68a3      	ldr	r3, [r4, #8]
 8008fd8:	d01c      	beq.n	8009014 <ucdr_serialize_endian_uint32_t+0xdc>
 8008fda:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	68a3      	ldr	r3, [r4, #8]
 8008fe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008fe6:	705a      	strb	r2, [r3, #1]
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008fee:	709a      	strb	r2, [r3, #2]
 8008ff0:	68a3      	ldr	r3, [r4, #8]
 8008ff2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ff6:	70da      	strb	r2, [r3, #3]
 8008ff8:	68a2      	ldr	r2, [r4, #8]
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	3204      	adds	r2, #4
 8008ffe:	3304      	adds	r3, #4
 8009000:	2104      	movs	r1, #4
 8009002:	60a2      	str	r2, [r4, #8]
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	7561      	strb	r1, [r4, #21]
 8009008:	7da0      	ldrb	r0, [r4, #22]
 800900a:	f080 0001 	eor.w	r0, r0, #1
 800900e:	b003      	add	sp, #12
 8009010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009014:	9a01      	ldr	r2, [sp, #4]
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e7ee      	b.n	8008ff8 <ucdr_serialize_endian_uint32_t+0xc0>
 800901a:	68a2      	ldr	r2, [r4, #8]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	7da0      	ldrb	r0, [r4, #22]
 8009020:	f884 8015 	strb.w	r8, [r4, #21]
 8009024:	1bd2      	subs	r2, r2, r7
 8009026:	1bdb      	subs	r3, r3, r7
 8009028:	f080 0001 	eor.w	r0, r0, #1
 800902c:	60a2      	str	r2, [r4, #8]
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	b003      	add	sp, #12
 8009032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009036:	68a3      	ldr	r3, [r4, #8]
 8009038:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e7ad      	b.n	8008fac <ucdr_serialize_endian_uint32_t+0x74>
 8009050:	ad01      	add	r5, sp, #4
 8009052:	4629      	mov	r1, r5
 8009054:	463a      	mov	r2, r7
 8009056:	4630      	mov	r0, r6
 8009058:	f00a fa30 	bl	80134bc <memcpy>
 800905c:	68a0      	ldr	r0, [r4, #8]
 800905e:	464a      	mov	r2, r9
 8009060:	19e9      	adds	r1, r5, r7
 8009062:	f00a fa2b 	bl	80134bc <memcpy>
 8009066:	e7a1      	b.n	8008fac <ucdr_serialize_endian_uint32_t+0x74>

08009068 <ucdr_deserialize_uint32_t>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	460d      	mov	r5, r1
 800906e:	2104      	movs	r1, #4
 8009070:	4604      	mov	r4, r0
 8009072:	f000 fdff 	bl	8009c74 <ucdr_buffer_alignment>
 8009076:	4601      	mov	r1, r0
 8009078:	4620      	mov	r0, r4
 800907a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800907e:	f000 fe3d 	bl	8009cfc <ucdr_advance_buffer>
 8009082:	4620      	mov	r0, r4
 8009084:	2104      	movs	r1, #4
 8009086:	f000 fd97 	bl	8009bb8 <ucdr_check_buffer_available_for>
 800908a:	2800      	cmp	r0, #0
 800908c:	d138      	bne.n	8009100 <ucdr_deserialize_uint32_t+0x98>
 800908e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009092:	42b7      	cmp	r7, r6
 8009094:	d92f      	bls.n	80090f6 <ucdr_deserialize_uint32_t+0x8e>
 8009096:	6922      	ldr	r2, [r4, #16]
 8009098:	60a7      	str	r7, [r4, #8]
 800909a:	1bbf      	subs	r7, r7, r6
 800909c:	443a      	add	r2, r7
 800909e:	f1c7 0904 	rsb	r9, r7, #4
 80090a2:	6122      	str	r2, [r4, #16]
 80090a4:	4649      	mov	r1, r9
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 fd92 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d046      	beq.n	800913e <ucdr_deserialize_uint32_t+0xd6>
 80090b0:	7d23      	ldrb	r3, [r4, #20]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d05c      	beq.n	8009170 <ucdr_deserialize_uint32_t+0x108>
 80090b6:	78f3      	ldrb	r3, [r6, #3]
 80090b8:	702b      	strb	r3, [r5, #0]
 80090ba:	2f00      	cmp	r7, #0
 80090bc:	d04c      	beq.n	8009158 <ucdr_deserialize_uint32_t+0xf0>
 80090be:	78b3      	ldrb	r3, [r6, #2]
 80090c0:	706b      	strb	r3, [r5, #1]
 80090c2:	2f01      	cmp	r7, #1
 80090c4:	f105 0302 	add.w	r3, r5, #2
 80090c8:	d04a      	beq.n	8009160 <ucdr_deserialize_uint32_t+0xf8>
 80090ca:	7873      	ldrb	r3, [r6, #1]
 80090cc:	70ab      	strb	r3, [r5, #2]
 80090ce:	2f02      	cmp	r7, #2
 80090d0:	f105 0303 	add.w	r3, r5, #3
 80090d4:	d048      	beq.n	8009168 <ucdr_deserialize_uint32_t+0x100>
 80090d6:	7833      	ldrb	r3, [r6, #0]
 80090d8:	70eb      	strb	r3, [r5, #3]
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	68a2      	ldr	r2, [r4, #8]
 80090de:	7da0      	ldrb	r0, [r4, #22]
 80090e0:	2104      	movs	r1, #4
 80090e2:	3304      	adds	r3, #4
 80090e4:	1bdb      	subs	r3, r3, r7
 80090e6:	444a      	add	r2, r9
 80090e8:	7561      	strb	r1, [r4, #21]
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	60a2      	str	r2, [r4, #8]
 80090ee:	f080 0001 	eor.w	r0, r0, #1
 80090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f6:	2104      	movs	r1, #4
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 fd69 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80090fe:	b1b0      	cbz	r0, 800912e <ucdr_deserialize_uint32_t+0xc6>
 8009100:	7d23      	ldrb	r3, [r4, #20]
 8009102:	2b01      	cmp	r3, #1
 8009104:	68a3      	ldr	r3, [r4, #8]
 8009106:	d017      	beq.n	8009138 <ucdr_deserialize_uint32_t+0xd0>
 8009108:	78db      	ldrb	r3, [r3, #3]
 800910a:	702b      	strb	r3, [r5, #0]
 800910c:	68a3      	ldr	r3, [r4, #8]
 800910e:	789b      	ldrb	r3, [r3, #2]
 8009110:	706b      	strb	r3, [r5, #1]
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	785b      	ldrb	r3, [r3, #1]
 8009116:	70ab      	strb	r3, [r5, #2]
 8009118:	68a3      	ldr	r3, [r4, #8]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	70eb      	strb	r3, [r5, #3]
 800911e:	68a2      	ldr	r2, [r4, #8]
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	3204      	adds	r2, #4
 8009124:	3304      	adds	r3, #4
 8009126:	2104      	movs	r1, #4
 8009128:	60a2      	str	r2, [r4, #8]
 800912a:	6123      	str	r3, [r4, #16]
 800912c:	7561      	strb	r1, [r4, #21]
 800912e:	7da0      	ldrb	r0, [r4, #22]
 8009130:	f080 0001 	eor.w	r0, r0, #1
 8009134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	e7ef      	b.n	800911e <ucdr_deserialize_uint32_t+0xb6>
 800913e:	68a2      	ldr	r2, [r4, #8]
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	7da0      	ldrb	r0, [r4, #22]
 8009144:	f884 8015 	strb.w	r8, [r4, #21]
 8009148:	1bd2      	subs	r2, r2, r7
 800914a:	1bdb      	subs	r3, r3, r7
 800914c:	60a2      	str	r2, [r4, #8]
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	f080 0001 	eor.w	r0, r0, #1
 8009154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009158:	68a3      	ldr	r3, [r4, #8]
 800915a:	789b      	ldrb	r3, [r3, #2]
 800915c:	706b      	strb	r3, [r5, #1]
 800915e:	1cab      	adds	r3, r5, #2
 8009160:	68a2      	ldr	r2, [r4, #8]
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	f803 2b01 	strb.w	r2, [r3], #1
 8009168:	68a2      	ldr	r2, [r4, #8]
 800916a:	7812      	ldrb	r2, [r2, #0]
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e7b4      	b.n	80090da <ucdr_deserialize_uint32_t+0x72>
 8009170:	4631      	mov	r1, r6
 8009172:	463a      	mov	r2, r7
 8009174:	4628      	mov	r0, r5
 8009176:	f00a f9a1 	bl	80134bc <memcpy>
 800917a:	68a1      	ldr	r1, [r4, #8]
 800917c:	464a      	mov	r2, r9
 800917e:	19e8      	adds	r0, r5, r7
 8009180:	f00a f99c 	bl	80134bc <memcpy>
 8009184:	e7a9      	b.n	80090da <ucdr_deserialize_uint32_t+0x72>
 8009186:	bf00      	nop

08009188 <ucdr_deserialize_endian_uint32_t>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	460e      	mov	r6, r1
 800918e:	2104      	movs	r1, #4
 8009190:	4604      	mov	r4, r0
 8009192:	4615      	mov	r5, r2
 8009194:	f000 fd6e 	bl	8009c74 <ucdr_buffer_alignment>
 8009198:	4601      	mov	r1, r0
 800919a:	4620      	mov	r0, r4
 800919c:	f894 9015 	ldrb.w	r9, [r4, #21]
 80091a0:	f000 fdac 	bl	8009cfc <ucdr_advance_buffer>
 80091a4:	4620      	mov	r0, r4
 80091a6:	2104      	movs	r1, #4
 80091a8:	f000 fd06 	bl	8009bb8 <ucdr_check_buffer_available_for>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d13c      	bne.n	800922a <ucdr_deserialize_endian_uint32_t+0xa2>
 80091b0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80091b4:	42bb      	cmp	r3, r7
 80091b6:	d933      	bls.n	8009220 <ucdr_deserialize_endian_uint32_t+0x98>
 80091b8:	6922      	ldr	r2, [r4, #16]
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	eba3 0807 	sub.w	r8, r3, r7
 80091c0:	4442      	add	r2, r8
 80091c2:	f1c8 0a04 	rsb	sl, r8, #4
 80091c6:	6122      	str	r2, [r4, #16]
 80091c8:	4651      	mov	r1, sl
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 fd00 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d048      	beq.n	8009266 <ucdr_deserialize_endian_uint32_t+0xde>
 80091d4:	2e01      	cmp	r6, #1
 80091d6:	d061      	beq.n	800929c <ucdr_deserialize_endian_uint32_t+0x114>
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	702b      	strb	r3, [r5, #0]
 80091dc:	f1b8 0f00 	cmp.w	r8, #0
 80091e0:	d050      	beq.n	8009284 <ucdr_deserialize_endian_uint32_t+0xfc>
 80091e2:	78bb      	ldrb	r3, [r7, #2]
 80091e4:	706b      	strb	r3, [r5, #1]
 80091e6:	f1b8 0f01 	cmp.w	r8, #1
 80091ea:	f105 0302 	add.w	r3, r5, #2
 80091ee:	d04d      	beq.n	800928c <ucdr_deserialize_endian_uint32_t+0x104>
 80091f0:	787b      	ldrb	r3, [r7, #1]
 80091f2:	70ab      	strb	r3, [r5, #2]
 80091f4:	f1b8 0f02 	cmp.w	r8, #2
 80091f8:	f105 0303 	add.w	r3, r5, #3
 80091fc:	d04a      	beq.n	8009294 <ucdr_deserialize_endian_uint32_t+0x10c>
 80091fe:	783b      	ldrb	r3, [r7, #0]
 8009200:	70eb      	strb	r3, [r5, #3]
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	68a2      	ldr	r2, [r4, #8]
 8009206:	7da0      	ldrb	r0, [r4, #22]
 8009208:	2104      	movs	r1, #4
 800920a:	3304      	adds	r3, #4
 800920c:	eba3 0308 	sub.w	r3, r3, r8
 8009210:	4452      	add	r2, sl
 8009212:	7561      	strb	r1, [r4, #21]
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	60a2      	str	r2, [r4, #8]
 8009218:	f080 0001 	eor.w	r0, r0, #1
 800921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009220:	2104      	movs	r1, #4
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fcd4 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009228:	b1a8      	cbz	r0, 8009256 <ucdr_deserialize_endian_uint32_t+0xce>
 800922a:	2e01      	cmp	r6, #1
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	d017      	beq.n	8009260 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009230:	78db      	ldrb	r3, [r3, #3]
 8009232:	702b      	strb	r3, [r5, #0]
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	789b      	ldrb	r3, [r3, #2]
 8009238:	706b      	strb	r3, [r5, #1]
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	70ab      	strb	r3, [r5, #2]
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	70eb      	strb	r3, [r5, #3]
 8009246:	68a2      	ldr	r2, [r4, #8]
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	3204      	adds	r2, #4
 800924c:	3304      	adds	r3, #4
 800924e:	2104      	movs	r1, #4
 8009250:	60a2      	str	r2, [r4, #8]
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	7561      	strb	r1, [r4, #21]
 8009256:	7da0      	ldrb	r0, [r4, #22]
 8009258:	f080 0001 	eor.w	r0, r0, #1
 800925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	e7ef      	b.n	8009246 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009266:	68a2      	ldr	r2, [r4, #8]
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	7da0      	ldrb	r0, [r4, #22]
 800926c:	f884 9015 	strb.w	r9, [r4, #21]
 8009270:	eba2 0208 	sub.w	r2, r2, r8
 8009274:	eba3 0308 	sub.w	r3, r3, r8
 8009278:	60a2      	str	r2, [r4, #8]
 800927a:	6123      	str	r3, [r4, #16]
 800927c:	f080 0001 	eor.w	r0, r0, #1
 8009280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	789b      	ldrb	r3, [r3, #2]
 8009288:	706b      	strb	r3, [r5, #1]
 800928a:	1cab      	adds	r3, r5, #2
 800928c:	68a2      	ldr	r2, [r4, #8]
 800928e:	7852      	ldrb	r2, [r2, #1]
 8009290:	f803 2b01 	strb.w	r2, [r3], #1
 8009294:	68a2      	ldr	r2, [r4, #8]
 8009296:	7812      	ldrb	r2, [r2, #0]
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	e7b2      	b.n	8009202 <ucdr_deserialize_endian_uint32_t+0x7a>
 800929c:	4639      	mov	r1, r7
 800929e:	4642      	mov	r2, r8
 80092a0:	4628      	mov	r0, r5
 80092a2:	f00a f90b 	bl	80134bc <memcpy>
 80092a6:	68a1      	ldr	r1, [r4, #8]
 80092a8:	4652      	mov	r2, sl
 80092aa:	eb05 0008 	add.w	r0, r5, r8
 80092ae:	f00a f905 	bl	80134bc <memcpy>
 80092b2:	e7a6      	b.n	8009202 <ucdr_deserialize_endian_uint32_t+0x7a>

080092b4 <ucdr_serialize_uint64_t>:
 80092b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b8:	2108      	movs	r1, #8
 80092ba:	b082      	sub	sp, #8
 80092bc:	4604      	mov	r4, r0
 80092be:	e9cd 2300 	strd	r2, r3, [sp]
 80092c2:	f000 fcd7 	bl	8009c74 <ucdr_buffer_alignment>
 80092c6:	4601      	mov	r1, r0
 80092c8:	4620      	mov	r0, r4
 80092ca:	7d67      	ldrb	r7, [r4, #21]
 80092cc:	f000 fd16 	bl	8009cfc <ucdr_advance_buffer>
 80092d0:	4620      	mov	r0, r4
 80092d2:	2108      	movs	r1, #8
 80092d4:	f000 fc70 	bl	8009bb8 <ucdr_check_buffer_available_for>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d14e      	bne.n	800937a <ucdr_serialize_uint64_t+0xc6>
 80092dc:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80092e0:	42b5      	cmp	r5, r6
 80092e2:	d945      	bls.n	8009370 <ucdr_serialize_uint64_t+0xbc>
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	60a5      	str	r5, [r4, #8]
 80092e8:	1bad      	subs	r5, r5, r6
 80092ea:	442b      	add	r3, r5
 80092ec:	f1c5 0808 	rsb	r8, r5, #8
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	4641      	mov	r1, r8
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fc6b 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d074      	beq.n	80093e8 <ucdr_serialize_uint64_t+0x134>
 80092fe:	7d23      	ldrb	r3, [r4, #20]
 8009300:	2b01      	cmp	r3, #1
 8009302:	f000 809b 	beq.w	800943c <ucdr_serialize_uint64_t+0x188>
 8009306:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800930a:	7033      	strb	r3, [r6, #0]
 800930c:	2d00      	cmp	r5, #0
 800930e:	d078      	beq.n	8009402 <ucdr_serialize_uint64_t+0x14e>
 8009310:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009314:	7073      	strb	r3, [r6, #1]
 8009316:	2d01      	cmp	r5, #1
 8009318:	d077      	beq.n	800940a <ucdr_serialize_uint64_t+0x156>
 800931a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800931e:	70b3      	strb	r3, [r6, #2]
 8009320:	2d02      	cmp	r5, #2
 8009322:	d076      	beq.n	8009412 <ucdr_serialize_uint64_t+0x15e>
 8009324:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009328:	70f3      	strb	r3, [r6, #3]
 800932a:	2d03      	cmp	r5, #3
 800932c:	d075      	beq.n	800941a <ucdr_serialize_uint64_t+0x166>
 800932e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009332:	7133      	strb	r3, [r6, #4]
 8009334:	2d04      	cmp	r5, #4
 8009336:	d074      	beq.n	8009422 <ucdr_serialize_uint64_t+0x16e>
 8009338:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800933c:	7173      	strb	r3, [r6, #5]
 800933e:	2d05      	cmp	r5, #5
 8009340:	d073      	beq.n	800942a <ucdr_serialize_uint64_t+0x176>
 8009342:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009346:	71b3      	strb	r3, [r6, #6]
 8009348:	2d06      	cmp	r5, #6
 800934a:	d072      	beq.n	8009432 <ucdr_serialize_uint64_t+0x17e>
 800934c:	f89d 3000 	ldrb.w	r3, [sp]
 8009350:	71f3      	strb	r3, [r6, #7]
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	68a2      	ldr	r2, [r4, #8]
 8009356:	7da0      	ldrb	r0, [r4, #22]
 8009358:	3308      	adds	r3, #8
 800935a:	1b5d      	subs	r5, r3, r5
 800935c:	4442      	add	r2, r8
 800935e:	2308      	movs	r3, #8
 8009360:	f080 0001 	eor.w	r0, r0, #1
 8009364:	6125      	str	r5, [r4, #16]
 8009366:	60a2      	str	r2, [r4, #8]
 8009368:	7563      	strb	r3, [r4, #21]
 800936a:	b002      	add	sp, #8
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009370:	2108      	movs	r1, #8
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fc2c 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009378:	b350      	cbz	r0, 80093d0 <ucdr_serialize_uint64_t+0x11c>
 800937a:	7d23      	ldrb	r3, [r4, #20]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d02d      	beq.n	80093dc <ucdr_serialize_uint64_t+0x128>
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	68a3      	ldr	r3, [r4, #8]
 800938a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800938e:	705a      	strb	r2, [r3, #1]
 8009390:	68a3      	ldr	r3, [r4, #8]
 8009392:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009396:	709a      	strb	r2, [r3, #2]
 8009398:	68a3      	ldr	r3, [r4, #8]
 800939a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800939e:	70da      	strb	r2, [r3, #3]
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80093a6:	711a      	strb	r2, [r3, #4]
 80093a8:	68a3      	ldr	r3, [r4, #8]
 80093aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80093ae:	715a      	strb	r2, [r3, #5]
 80093b0:	68a3      	ldr	r3, [r4, #8]
 80093b2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80093b6:	719a      	strb	r2, [r3, #6]
 80093b8:	68a3      	ldr	r3, [r4, #8]
 80093ba:	f89d 2000 	ldrb.w	r2, [sp]
 80093be:	71da      	strb	r2, [r3, #7]
 80093c0:	68a2      	ldr	r2, [r4, #8]
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	3208      	adds	r2, #8
 80093c6:	3308      	adds	r3, #8
 80093c8:	2108      	movs	r1, #8
 80093ca:	60a2      	str	r2, [r4, #8]
 80093cc:	6123      	str	r3, [r4, #16]
 80093ce:	7561      	strb	r1, [r4, #21]
 80093d0:	7da0      	ldrb	r0, [r4, #22]
 80093d2:	f080 0001 	eor.w	r0, r0, #1
 80093d6:	b002      	add	sp, #8
 80093d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093dc:	466b      	mov	r3, sp
 80093de:	cb03      	ldmia	r3!, {r0, r1}
 80093e0:	68a3      	ldr	r3, [r4, #8]
 80093e2:	6018      	str	r0, [r3, #0]
 80093e4:	6059      	str	r1, [r3, #4]
 80093e6:	e7eb      	b.n	80093c0 <ucdr_serialize_uint64_t+0x10c>
 80093e8:	68a2      	ldr	r2, [r4, #8]
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	7da0      	ldrb	r0, [r4, #22]
 80093ee:	7567      	strb	r7, [r4, #21]
 80093f0:	1b52      	subs	r2, r2, r5
 80093f2:	f080 0001 	eor.w	r0, r0, #1
 80093f6:	1b5d      	subs	r5, r3, r5
 80093f8:	60a2      	str	r2, [r4, #8]
 80093fa:	6125      	str	r5, [r4, #16]
 80093fc:	b002      	add	sp, #8
 80093fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009420:	701a      	strb	r2, [r3, #0]
 8009422:	68a3      	ldr	r3, [r4, #8]
 8009424:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	68a3      	ldr	r3, [r4, #8]
 8009434:	f89d 2000 	ldrb.w	r2, [sp]
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	e78a      	b.n	8009352 <ucdr_serialize_uint64_t+0x9e>
 800943c:	4630      	mov	r0, r6
 800943e:	466e      	mov	r6, sp
 8009440:	4631      	mov	r1, r6
 8009442:	462a      	mov	r2, r5
 8009444:	f00a f83a 	bl	80134bc <memcpy>
 8009448:	68a0      	ldr	r0, [r4, #8]
 800944a:	4642      	mov	r2, r8
 800944c:	1971      	adds	r1, r6, r5
 800944e:	f00a f835 	bl	80134bc <memcpy>
 8009452:	e77e      	b.n	8009352 <ucdr_serialize_uint64_t+0x9e>

08009454 <ucdr_serialize_int16_t>:
 8009454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	460b      	mov	r3, r1
 800945c:	2102      	movs	r1, #2
 800945e:	4604      	mov	r4, r0
 8009460:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009464:	f000 fc06 	bl	8009c74 <ucdr_buffer_alignment>
 8009468:	4601      	mov	r1, r0
 800946a:	4620      	mov	r0, r4
 800946c:	7d67      	ldrb	r7, [r4, #21]
 800946e:	f000 fc45 	bl	8009cfc <ucdr_advance_buffer>
 8009472:	4620      	mov	r0, r4
 8009474:	2102      	movs	r1, #2
 8009476:	f000 fb9f 	bl	8009bb8 <ucdr_check_buffer_available_for>
 800947a:	bb78      	cbnz	r0, 80094dc <ucdr_serialize_int16_t+0x88>
 800947c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009480:	42b5      	cmp	r5, r6
 8009482:	d926      	bls.n	80094d2 <ucdr_serialize_int16_t+0x7e>
 8009484:	6922      	ldr	r2, [r4, #16]
 8009486:	60a5      	str	r5, [r4, #8]
 8009488:	1bad      	subs	r5, r5, r6
 800948a:	442a      	add	r2, r5
 800948c:	f1c5 0802 	rsb	r8, r5, #2
 8009490:	6122      	str	r2, [r4, #16]
 8009492:	4641      	mov	r1, r8
 8009494:	4620      	mov	r0, r4
 8009496:	f000 fb9b 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 800949a:	2800      	cmp	r0, #0
 800949c:	d03b      	beq.n	8009516 <ucdr_serialize_int16_t+0xc2>
 800949e:	7d23      	ldrb	r3, [r4, #20]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d04a      	beq.n	800953a <ucdr_serialize_int16_t+0xe6>
 80094a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094a8:	7033      	strb	r3, [r6, #0]
 80094aa:	2d00      	cmp	r5, #0
 80094ac:	d040      	beq.n	8009530 <ucdr_serialize_int16_t+0xdc>
 80094ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80094b2:	7073      	strb	r3, [r6, #1]
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	68a2      	ldr	r2, [r4, #8]
 80094b8:	7da0      	ldrb	r0, [r4, #22]
 80094ba:	3302      	adds	r3, #2
 80094bc:	1b5b      	subs	r3, r3, r5
 80094be:	4442      	add	r2, r8
 80094c0:	2102      	movs	r1, #2
 80094c2:	f080 0001 	eor.w	r0, r0, #1
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	60a2      	str	r2, [r4, #8]
 80094ca:	7561      	strb	r1, [r4, #21]
 80094cc:	b002      	add	sp, #8
 80094ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d2:	2102      	movs	r1, #2
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fb7b 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80094da:	b190      	cbz	r0, 8009502 <ucdr_serialize_int16_t+0xae>
 80094dc:	7d23      	ldrb	r3, [r4, #20]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	d014      	beq.n	800950e <ucdr_serialize_int16_t+0xba>
 80094e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80094f0:	705a      	strb	r2, [r3, #1]
 80094f2:	68a2      	ldr	r2, [r4, #8]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	3202      	adds	r2, #2
 80094f8:	3302      	adds	r3, #2
 80094fa:	2102      	movs	r1, #2
 80094fc:	60a2      	str	r2, [r4, #8]
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	7561      	strb	r1, [r4, #21]
 8009502:	7da0      	ldrb	r0, [r4, #22]
 8009504:	f080 0001 	eor.w	r0, r0, #1
 8009508:	b002      	add	sp, #8
 800950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009512:	801a      	strh	r2, [r3, #0]
 8009514:	e7ed      	b.n	80094f2 <ucdr_serialize_int16_t+0x9e>
 8009516:	68a2      	ldr	r2, [r4, #8]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	7da0      	ldrb	r0, [r4, #22]
 800951c:	7567      	strb	r7, [r4, #21]
 800951e:	1b52      	subs	r2, r2, r5
 8009520:	1b5b      	subs	r3, r3, r5
 8009522:	f080 0001 	eor.w	r0, r0, #1
 8009526:	60a2      	str	r2, [r4, #8]
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	b002      	add	sp, #8
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	e7bc      	b.n	80094b4 <ucdr_serialize_int16_t+0x60>
 800953a:	4630      	mov	r0, r6
 800953c:	f10d 0606 	add.w	r6, sp, #6
 8009540:	4631      	mov	r1, r6
 8009542:	462a      	mov	r2, r5
 8009544:	f009 ffba 	bl	80134bc <memcpy>
 8009548:	68a0      	ldr	r0, [r4, #8]
 800954a:	4642      	mov	r2, r8
 800954c:	1971      	adds	r1, r6, r5
 800954e:	f009 ffb5 	bl	80134bc <memcpy>
 8009552:	e7af      	b.n	80094b4 <ucdr_serialize_int16_t+0x60>

08009554 <ucdr_deserialize_int16_t>:
 8009554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009558:	460d      	mov	r5, r1
 800955a:	2102      	movs	r1, #2
 800955c:	4604      	mov	r4, r0
 800955e:	f000 fb89 	bl	8009c74 <ucdr_buffer_alignment>
 8009562:	4601      	mov	r1, r0
 8009564:	4620      	mov	r0, r4
 8009566:	f894 8015 	ldrb.w	r8, [r4, #21]
 800956a:	f000 fbc7 	bl	8009cfc <ucdr_advance_buffer>
 800956e:	4620      	mov	r0, r4
 8009570:	2102      	movs	r1, #2
 8009572:	f000 fb21 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8009576:	bb60      	cbnz	r0, 80095d2 <ucdr_deserialize_int16_t+0x7e>
 8009578:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800957c:	42be      	cmp	r6, r7
 800957e:	d923      	bls.n	80095c8 <ucdr_deserialize_int16_t+0x74>
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	60a6      	str	r6, [r4, #8]
 8009584:	1bf6      	subs	r6, r6, r7
 8009586:	4432      	add	r2, r6
 8009588:	f1c6 0902 	rsb	r9, r6, #2
 800958c:	6122      	str	r2, [r4, #16]
 800958e:	4649      	mov	r1, r9
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fb1d 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009596:	2800      	cmp	r0, #0
 8009598:	d034      	beq.n	8009604 <ucdr_deserialize_int16_t+0xb0>
 800959a:	7d23      	ldrb	r3, [r4, #20]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d042      	beq.n	8009626 <ucdr_deserialize_int16_t+0xd2>
 80095a0:	787b      	ldrb	r3, [r7, #1]
 80095a2:	702b      	strb	r3, [r5, #0]
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	d03a      	beq.n	800961e <ucdr_deserialize_int16_t+0xca>
 80095a8:	783b      	ldrb	r3, [r7, #0]
 80095aa:	706b      	strb	r3, [r5, #1]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	68a2      	ldr	r2, [r4, #8]
 80095b0:	7da0      	ldrb	r0, [r4, #22]
 80095b2:	2102      	movs	r1, #2
 80095b4:	3302      	adds	r3, #2
 80095b6:	1b9b      	subs	r3, r3, r6
 80095b8:	444a      	add	r2, r9
 80095ba:	7561      	strb	r1, [r4, #21]
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	60a2      	str	r2, [r4, #8]
 80095c0:	f080 0001 	eor.w	r0, r0, #1
 80095c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c8:	2102      	movs	r1, #2
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fb00 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80095d0:	b180      	cbz	r0, 80095f4 <ucdr_deserialize_int16_t+0xa0>
 80095d2:	7d23      	ldrb	r3, [r4, #20]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	d011      	beq.n	80095fe <ucdr_deserialize_int16_t+0xaa>
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	702b      	strb	r3, [r5, #0]
 80095de:	68a3      	ldr	r3, [r4, #8]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	706b      	strb	r3, [r5, #1]
 80095e4:	68a2      	ldr	r2, [r4, #8]
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	3202      	adds	r2, #2
 80095ea:	3302      	adds	r3, #2
 80095ec:	2102      	movs	r1, #2
 80095ee:	60a2      	str	r2, [r4, #8]
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	7561      	strb	r1, [r4, #21]
 80095f4:	7da0      	ldrb	r0, [r4, #22]
 80095f6:	f080 0001 	eor.w	r0, r0, #1
 80095fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	802b      	strh	r3, [r5, #0]
 8009602:	e7ef      	b.n	80095e4 <ucdr_deserialize_int16_t+0x90>
 8009604:	68a2      	ldr	r2, [r4, #8]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	7da0      	ldrb	r0, [r4, #22]
 800960a:	f884 8015 	strb.w	r8, [r4, #21]
 800960e:	1b92      	subs	r2, r2, r6
 8009610:	1b9b      	subs	r3, r3, r6
 8009612:	60a2      	str	r2, [r4, #8]
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	f080 0001 	eor.w	r0, r0, #1
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961e:	68a3      	ldr	r3, [r4, #8]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	706b      	strb	r3, [r5, #1]
 8009624:	e7c2      	b.n	80095ac <ucdr_deserialize_int16_t+0x58>
 8009626:	4639      	mov	r1, r7
 8009628:	4632      	mov	r2, r6
 800962a:	4628      	mov	r0, r5
 800962c:	f009 ff46 	bl	80134bc <memcpy>
 8009630:	68a1      	ldr	r1, [r4, #8]
 8009632:	464a      	mov	r2, r9
 8009634:	19a8      	adds	r0, r5, r6
 8009636:	f009 ff41 	bl	80134bc <memcpy>
 800963a:	e7b7      	b.n	80095ac <ucdr_deserialize_int16_t+0x58>

0800963c <ucdr_serialize_int32_t>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	4604      	mov	r4, r0
 8009644:	9101      	str	r1, [sp, #4]
 8009646:	2104      	movs	r1, #4
 8009648:	f000 fb14 	bl	8009c74 <ucdr_buffer_alignment>
 800964c:	4601      	mov	r1, r0
 800964e:	4620      	mov	r0, r4
 8009650:	7d67      	ldrb	r7, [r4, #21]
 8009652:	f000 fb53 	bl	8009cfc <ucdr_advance_buffer>
 8009656:	4620      	mov	r0, r4
 8009658:	2104      	movs	r1, #4
 800965a:	f000 faad 	bl	8009bb8 <ucdr_check_buffer_available_for>
 800965e:	2800      	cmp	r0, #0
 8009660:	d139      	bne.n	80096d6 <ucdr_serialize_int32_t+0x9a>
 8009662:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8009666:	42ae      	cmp	r6, r5
 8009668:	d930      	bls.n	80096cc <ucdr_serialize_int32_t+0x90>
 800966a:	6922      	ldr	r2, [r4, #16]
 800966c:	60a6      	str	r6, [r4, #8]
 800966e:	1b76      	subs	r6, r6, r5
 8009670:	4432      	add	r2, r6
 8009672:	f1c6 0804 	rsb	r8, r6, #4
 8009676:	6122      	str	r2, [r4, #16]
 8009678:	4641      	mov	r1, r8
 800967a:	4620      	mov	r0, r4
 800967c:	f000 faa8 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009680:	2800      	cmp	r0, #0
 8009682:	d04c      	beq.n	800971e <ucdr_serialize_int32_t+0xe2>
 8009684:	7d23      	ldrb	r3, [r4, #20]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d063      	beq.n	8009752 <ucdr_serialize_int32_t+0x116>
 800968a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800968e:	702b      	strb	r3, [r5, #0]
 8009690:	2e00      	cmp	r6, #0
 8009692:	d051      	beq.n	8009738 <ucdr_serialize_int32_t+0xfc>
 8009694:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009698:	706b      	strb	r3, [r5, #1]
 800969a:	2e01      	cmp	r6, #1
 800969c:	d050      	beq.n	8009740 <ucdr_serialize_int32_t+0x104>
 800969e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80096a2:	70ab      	strb	r3, [r5, #2]
 80096a4:	2e02      	cmp	r6, #2
 80096a6:	d04f      	beq.n	8009748 <ucdr_serialize_int32_t+0x10c>
 80096a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80096ac:	70eb      	strb	r3, [r5, #3]
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	68a2      	ldr	r2, [r4, #8]
 80096b2:	7da0      	ldrb	r0, [r4, #22]
 80096b4:	3304      	adds	r3, #4
 80096b6:	1b9b      	subs	r3, r3, r6
 80096b8:	4442      	add	r2, r8
 80096ba:	2104      	movs	r1, #4
 80096bc:	f080 0001 	eor.w	r0, r0, #1
 80096c0:	6123      	str	r3, [r4, #16]
 80096c2:	60a2      	str	r2, [r4, #8]
 80096c4:	7561      	strb	r1, [r4, #21]
 80096c6:	b002      	add	sp, #8
 80096c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096cc:	2104      	movs	r1, #4
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fa7e 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80096d4:	b1d0      	cbz	r0, 800970c <ucdr_serialize_int32_t+0xd0>
 80096d6:	7d23      	ldrb	r3, [r4, #20]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	68a3      	ldr	r3, [r4, #8]
 80096dc:	d01c      	beq.n	8009718 <ucdr_serialize_int32_t+0xdc>
 80096de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	68a3      	ldr	r3, [r4, #8]
 80096e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80096ea:	705a      	strb	r2, [r3, #1]
 80096ec:	68a3      	ldr	r3, [r4, #8]
 80096ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80096f2:	709a      	strb	r2, [r3, #2]
 80096f4:	68a3      	ldr	r3, [r4, #8]
 80096f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80096fa:	70da      	strb	r2, [r3, #3]
 80096fc:	68a2      	ldr	r2, [r4, #8]
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	3204      	adds	r2, #4
 8009702:	3304      	adds	r3, #4
 8009704:	2104      	movs	r1, #4
 8009706:	60a2      	str	r2, [r4, #8]
 8009708:	6123      	str	r3, [r4, #16]
 800970a:	7561      	strb	r1, [r4, #21]
 800970c:	7da0      	ldrb	r0, [r4, #22]
 800970e:	f080 0001 	eor.w	r0, r0, #1
 8009712:	b002      	add	sp, #8
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	9a01      	ldr	r2, [sp, #4]
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	e7ee      	b.n	80096fc <ucdr_serialize_int32_t+0xc0>
 800971e:	68a2      	ldr	r2, [r4, #8]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	7da0      	ldrb	r0, [r4, #22]
 8009724:	7567      	strb	r7, [r4, #21]
 8009726:	1b92      	subs	r2, r2, r6
 8009728:	1b9b      	subs	r3, r3, r6
 800972a:	f080 0001 	eor.w	r0, r0, #1
 800972e:	60a2      	str	r2, [r4, #8]
 8009730:	6123      	str	r3, [r4, #16]
 8009732:	b002      	add	sp, #8
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009738:	68a3      	ldr	r3, [r4, #8]
 800973a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	68a3      	ldr	r3, [r4, #8]
 8009742:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	68a3      	ldr	r3, [r4, #8]
 800974a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800974e:	701a      	strb	r2, [r3, #0]
 8009750:	e7ad      	b.n	80096ae <ucdr_serialize_int32_t+0x72>
 8009752:	4628      	mov	r0, r5
 8009754:	ad01      	add	r5, sp, #4
 8009756:	4629      	mov	r1, r5
 8009758:	4632      	mov	r2, r6
 800975a:	f009 feaf 	bl	80134bc <memcpy>
 800975e:	68a0      	ldr	r0, [r4, #8]
 8009760:	4642      	mov	r2, r8
 8009762:	19a9      	adds	r1, r5, r6
 8009764:	f009 feaa 	bl	80134bc <memcpy>
 8009768:	e7a1      	b.n	80096ae <ucdr_serialize_int32_t+0x72>
 800976a:	bf00      	nop

0800976c <ucdr_deserialize_int32_t>:
 800976c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009770:	460d      	mov	r5, r1
 8009772:	2104      	movs	r1, #4
 8009774:	4604      	mov	r4, r0
 8009776:	f000 fa7d 	bl	8009c74 <ucdr_buffer_alignment>
 800977a:	4601      	mov	r1, r0
 800977c:	4620      	mov	r0, r4
 800977e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009782:	f000 fabb 	bl	8009cfc <ucdr_advance_buffer>
 8009786:	4620      	mov	r0, r4
 8009788:	2104      	movs	r1, #4
 800978a:	f000 fa15 	bl	8009bb8 <ucdr_check_buffer_available_for>
 800978e:	2800      	cmp	r0, #0
 8009790:	d138      	bne.n	8009804 <ucdr_deserialize_int32_t+0x98>
 8009792:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009796:	42b7      	cmp	r7, r6
 8009798:	d92f      	bls.n	80097fa <ucdr_deserialize_int32_t+0x8e>
 800979a:	6922      	ldr	r2, [r4, #16]
 800979c:	60a7      	str	r7, [r4, #8]
 800979e:	1bbf      	subs	r7, r7, r6
 80097a0:	443a      	add	r2, r7
 80097a2:	f1c7 0904 	rsb	r9, r7, #4
 80097a6:	6122      	str	r2, [r4, #16]
 80097a8:	4649      	mov	r1, r9
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fa10 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d046      	beq.n	8009842 <ucdr_deserialize_int32_t+0xd6>
 80097b4:	7d23      	ldrb	r3, [r4, #20]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d05c      	beq.n	8009874 <ucdr_deserialize_int32_t+0x108>
 80097ba:	78f3      	ldrb	r3, [r6, #3]
 80097bc:	702b      	strb	r3, [r5, #0]
 80097be:	2f00      	cmp	r7, #0
 80097c0:	d04c      	beq.n	800985c <ucdr_deserialize_int32_t+0xf0>
 80097c2:	78b3      	ldrb	r3, [r6, #2]
 80097c4:	706b      	strb	r3, [r5, #1]
 80097c6:	2f01      	cmp	r7, #1
 80097c8:	f105 0302 	add.w	r3, r5, #2
 80097cc:	d04a      	beq.n	8009864 <ucdr_deserialize_int32_t+0xf8>
 80097ce:	7873      	ldrb	r3, [r6, #1]
 80097d0:	70ab      	strb	r3, [r5, #2]
 80097d2:	2f02      	cmp	r7, #2
 80097d4:	f105 0303 	add.w	r3, r5, #3
 80097d8:	d048      	beq.n	800986c <ucdr_deserialize_int32_t+0x100>
 80097da:	7833      	ldrb	r3, [r6, #0]
 80097dc:	70eb      	strb	r3, [r5, #3]
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	68a2      	ldr	r2, [r4, #8]
 80097e2:	7da0      	ldrb	r0, [r4, #22]
 80097e4:	2104      	movs	r1, #4
 80097e6:	3304      	adds	r3, #4
 80097e8:	1bdb      	subs	r3, r3, r7
 80097ea:	444a      	add	r2, r9
 80097ec:	7561      	strb	r1, [r4, #21]
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	60a2      	str	r2, [r4, #8]
 80097f2:	f080 0001 	eor.w	r0, r0, #1
 80097f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fa:	2104      	movs	r1, #4
 80097fc:	4620      	mov	r0, r4
 80097fe:	f000 f9e7 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009802:	b1b0      	cbz	r0, 8009832 <ucdr_deserialize_int32_t+0xc6>
 8009804:	7d23      	ldrb	r3, [r4, #20]
 8009806:	2b01      	cmp	r3, #1
 8009808:	68a3      	ldr	r3, [r4, #8]
 800980a:	d017      	beq.n	800983c <ucdr_deserialize_int32_t+0xd0>
 800980c:	78db      	ldrb	r3, [r3, #3]
 800980e:	702b      	strb	r3, [r5, #0]
 8009810:	68a3      	ldr	r3, [r4, #8]
 8009812:	789b      	ldrb	r3, [r3, #2]
 8009814:	706b      	strb	r3, [r5, #1]
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	70ab      	strb	r3, [r5, #2]
 800981c:	68a3      	ldr	r3, [r4, #8]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	70eb      	strb	r3, [r5, #3]
 8009822:	68a2      	ldr	r2, [r4, #8]
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	3204      	adds	r2, #4
 8009828:	3304      	adds	r3, #4
 800982a:	2104      	movs	r1, #4
 800982c:	60a2      	str	r2, [r4, #8]
 800982e:	6123      	str	r3, [r4, #16]
 8009830:	7561      	strb	r1, [r4, #21]
 8009832:	7da0      	ldrb	r0, [r4, #22]
 8009834:	f080 0001 	eor.w	r0, r0, #1
 8009838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	e7ef      	b.n	8009822 <ucdr_deserialize_int32_t+0xb6>
 8009842:	68a2      	ldr	r2, [r4, #8]
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	7da0      	ldrb	r0, [r4, #22]
 8009848:	f884 8015 	strb.w	r8, [r4, #21]
 800984c:	1bd2      	subs	r2, r2, r7
 800984e:	1bdb      	subs	r3, r3, r7
 8009850:	60a2      	str	r2, [r4, #8]
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	f080 0001 	eor.w	r0, r0, #1
 8009858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	789b      	ldrb	r3, [r3, #2]
 8009860:	706b      	strb	r3, [r5, #1]
 8009862:	1cab      	adds	r3, r5, #2
 8009864:	68a2      	ldr	r2, [r4, #8]
 8009866:	7852      	ldrb	r2, [r2, #1]
 8009868:	f803 2b01 	strb.w	r2, [r3], #1
 800986c:	68a2      	ldr	r2, [r4, #8]
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	e7b4      	b.n	80097de <ucdr_deserialize_int32_t+0x72>
 8009874:	4631      	mov	r1, r6
 8009876:	463a      	mov	r2, r7
 8009878:	4628      	mov	r0, r5
 800987a:	f009 fe1f 	bl	80134bc <memcpy>
 800987e:	68a1      	ldr	r1, [r4, #8]
 8009880:	464a      	mov	r2, r9
 8009882:	19e8      	adds	r0, r5, r7
 8009884:	f009 fe1a 	bl	80134bc <memcpy>
 8009888:	e7a9      	b.n	80097de <ucdr_deserialize_int32_t+0x72>
 800988a:	bf00      	nop

0800988c <ucdr_serialize_double>:
 800988c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009890:	2108      	movs	r1, #8
 8009892:	b082      	sub	sp, #8
 8009894:	4604      	mov	r4, r0
 8009896:	ed8d 0b00 	vstr	d0, [sp]
 800989a:	f000 f9eb 	bl	8009c74 <ucdr_buffer_alignment>
 800989e:	4601      	mov	r1, r0
 80098a0:	4620      	mov	r0, r4
 80098a2:	7d67      	ldrb	r7, [r4, #21]
 80098a4:	f000 fa2a 	bl	8009cfc <ucdr_advance_buffer>
 80098a8:	4620      	mov	r0, r4
 80098aa:	2108      	movs	r1, #8
 80098ac:	f000 f984 	bl	8009bb8 <ucdr_check_buffer_available_for>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d14e      	bne.n	8009952 <ucdr_serialize_double+0xc6>
 80098b4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80098b8:	42b5      	cmp	r5, r6
 80098ba:	d945      	bls.n	8009948 <ucdr_serialize_double+0xbc>
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	60a5      	str	r5, [r4, #8]
 80098c0:	1bad      	subs	r5, r5, r6
 80098c2:	442b      	add	r3, r5
 80098c4:	f1c5 0808 	rsb	r8, r5, #8
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	4641      	mov	r1, r8
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 f97f 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d074      	beq.n	80099c0 <ucdr_serialize_double+0x134>
 80098d6:	7d23      	ldrb	r3, [r4, #20]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	f000 809b 	beq.w	8009a14 <ucdr_serialize_double+0x188>
 80098de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098e2:	7033      	strb	r3, [r6, #0]
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	d078      	beq.n	80099da <ucdr_serialize_double+0x14e>
 80098e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80098ec:	7073      	strb	r3, [r6, #1]
 80098ee:	2d01      	cmp	r5, #1
 80098f0:	d077      	beq.n	80099e2 <ucdr_serialize_double+0x156>
 80098f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80098f6:	70b3      	strb	r3, [r6, #2]
 80098f8:	2d02      	cmp	r5, #2
 80098fa:	d076      	beq.n	80099ea <ucdr_serialize_double+0x15e>
 80098fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009900:	70f3      	strb	r3, [r6, #3]
 8009902:	2d03      	cmp	r5, #3
 8009904:	d075      	beq.n	80099f2 <ucdr_serialize_double+0x166>
 8009906:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800990a:	7133      	strb	r3, [r6, #4]
 800990c:	2d04      	cmp	r5, #4
 800990e:	d074      	beq.n	80099fa <ucdr_serialize_double+0x16e>
 8009910:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009914:	7173      	strb	r3, [r6, #5]
 8009916:	2d05      	cmp	r5, #5
 8009918:	d073      	beq.n	8009a02 <ucdr_serialize_double+0x176>
 800991a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800991e:	71b3      	strb	r3, [r6, #6]
 8009920:	2d06      	cmp	r5, #6
 8009922:	d072      	beq.n	8009a0a <ucdr_serialize_double+0x17e>
 8009924:	f89d 3000 	ldrb.w	r3, [sp]
 8009928:	71f3      	strb	r3, [r6, #7]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	68a2      	ldr	r2, [r4, #8]
 800992e:	7da0      	ldrb	r0, [r4, #22]
 8009930:	3308      	adds	r3, #8
 8009932:	1b5d      	subs	r5, r3, r5
 8009934:	4442      	add	r2, r8
 8009936:	2308      	movs	r3, #8
 8009938:	f080 0001 	eor.w	r0, r0, #1
 800993c:	6125      	str	r5, [r4, #16]
 800993e:	60a2      	str	r2, [r4, #8]
 8009940:	7563      	strb	r3, [r4, #21]
 8009942:	b002      	add	sp, #8
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	2108      	movs	r1, #8
 800994a:	4620      	mov	r0, r4
 800994c:	f000 f940 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009950:	b350      	cbz	r0, 80099a8 <ucdr_serialize_double+0x11c>
 8009952:	7d23      	ldrb	r3, [r4, #20]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d02d      	beq.n	80099b4 <ucdr_serialize_double+0x128>
 8009958:	68a3      	ldr	r3, [r4, #8]
 800995a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009966:	705a      	strb	r2, [r3, #1]
 8009968:	68a3      	ldr	r3, [r4, #8]
 800996a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800996e:	709a      	strb	r2, [r3, #2]
 8009970:	68a3      	ldr	r3, [r4, #8]
 8009972:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009976:	70da      	strb	r2, [r3, #3]
 8009978:	68a3      	ldr	r3, [r4, #8]
 800997a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800997e:	711a      	strb	r2, [r3, #4]
 8009980:	68a3      	ldr	r3, [r4, #8]
 8009982:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009986:	715a      	strb	r2, [r3, #5]
 8009988:	68a3      	ldr	r3, [r4, #8]
 800998a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800998e:	719a      	strb	r2, [r3, #6]
 8009990:	68a3      	ldr	r3, [r4, #8]
 8009992:	f89d 2000 	ldrb.w	r2, [sp]
 8009996:	71da      	strb	r2, [r3, #7]
 8009998:	68a2      	ldr	r2, [r4, #8]
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	3208      	adds	r2, #8
 800999e:	3308      	adds	r3, #8
 80099a0:	2108      	movs	r1, #8
 80099a2:	60a2      	str	r2, [r4, #8]
 80099a4:	6123      	str	r3, [r4, #16]
 80099a6:	7561      	strb	r1, [r4, #21]
 80099a8:	7da0      	ldrb	r0, [r4, #22]
 80099aa:	f080 0001 	eor.w	r0, r0, #1
 80099ae:	b002      	add	sp, #8
 80099b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b4:	466b      	mov	r3, sp
 80099b6:	cb03      	ldmia	r3!, {r0, r1}
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	6018      	str	r0, [r3, #0]
 80099bc:	6059      	str	r1, [r3, #4]
 80099be:	e7eb      	b.n	8009998 <ucdr_serialize_double+0x10c>
 80099c0:	68a2      	ldr	r2, [r4, #8]
 80099c2:	6923      	ldr	r3, [r4, #16]
 80099c4:	7da0      	ldrb	r0, [r4, #22]
 80099c6:	7567      	strb	r7, [r4, #21]
 80099c8:	1b52      	subs	r2, r2, r5
 80099ca:	f080 0001 	eor.w	r0, r0, #1
 80099ce:	1b5d      	subs	r5, r3, r5
 80099d0:	60a2      	str	r2, [r4, #8]
 80099d2:	6125      	str	r5, [r4, #16]
 80099d4:	b002      	add	sp, #8
 80099d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	68a3      	ldr	r3, [r4, #8]
 80099ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	f89d 2000 	ldrb.w	r2, [sp]
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	e78a      	b.n	800992a <ucdr_serialize_double+0x9e>
 8009a14:	4630      	mov	r0, r6
 8009a16:	466e      	mov	r6, sp
 8009a18:	4631      	mov	r1, r6
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	f009 fd4e 	bl	80134bc <memcpy>
 8009a20:	68a0      	ldr	r0, [r4, #8]
 8009a22:	4642      	mov	r2, r8
 8009a24:	1971      	adds	r1, r6, r5
 8009a26:	f009 fd49 	bl	80134bc <memcpy>
 8009a2a:	e77e      	b.n	800992a <ucdr_serialize_double+0x9e>

08009a2c <ucdr_deserialize_double>:
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	460d      	mov	r5, r1
 8009a32:	2108      	movs	r1, #8
 8009a34:	4604      	mov	r4, r0
 8009a36:	f000 f91d 	bl	8009c74 <ucdr_buffer_alignment>
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009a42:	f000 f95b 	bl	8009cfc <ucdr_advance_buffer>
 8009a46:	4620      	mov	r0, r4
 8009a48:	2108      	movs	r1, #8
 8009a4a:	f000 f8b5 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d151      	bne.n	8009af6 <ucdr_deserialize_double+0xca>
 8009a52:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009a56:	42be      	cmp	r6, r7
 8009a58:	d948      	bls.n	8009aec <ucdr_deserialize_double+0xc0>
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	60a6      	str	r6, [r4, #8]
 8009a5e:	1bf6      	subs	r6, r6, r7
 8009a60:	4433      	add	r3, r6
 8009a62:	f1c6 0808 	rsb	r8, r6, #8
 8009a66:	6123      	str	r3, [r4, #16]
 8009a68:	4641      	mov	r1, r8
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f8b0 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d06d      	beq.n	8009b50 <ucdr_deserialize_double+0x124>
 8009a74:	7d23      	ldrb	r3, [r4, #20]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	f000 8093 	beq.w	8009ba2 <ucdr_deserialize_double+0x176>
 8009a7c:	79fb      	ldrb	r3, [r7, #7]
 8009a7e:	702b      	strb	r3, [r5, #0]
 8009a80:	2e00      	cmp	r6, #0
 8009a82:	d072      	beq.n	8009b6a <ucdr_deserialize_double+0x13e>
 8009a84:	79bb      	ldrb	r3, [r7, #6]
 8009a86:	706b      	strb	r3, [r5, #1]
 8009a88:	2e01      	cmp	r6, #1
 8009a8a:	f105 0302 	add.w	r3, r5, #2
 8009a8e:	d070      	beq.n	8009b72 <ucdr_deserialize_double+0x146>
 8009a90:	797b      	ldrb	r3, [r7, #5]
 8009a92:	70ab      	strb	r3, [r5, #2]
 8009a94:	2e02      	cmp	r6, #2
 8009a96:	f105 0303 	add.w	r3, r5, #3
 8009a9a:	d06e      	beq.n	8009b7a <ucdr_deserialize_double+0x14e>
 8009a9c:	793b      	ldrb	r3, [r7, #4]
 8009a9e:	70eb      	strb	r3, [r5, #3]
 8009aa0:	2e03      	cmp	r6, #3
 8009aa2:	f105 0304 	add.w	r3, r5, #4
 8009aa6:	d06c      	beq.n	8009b82 <ucdr_deserialize_double+0x156>
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	712b      	strb	r3, [r5, #4]
 8009aac:	2e04      	cmp	r6, #4
 8009aae:	f105 0305 	add.w	r3, r5, #5
 8009ab2:	d06a      	beq.n	8009b8a <ucdr_deserialize_double+0x15e>
 8009ab4:	78bb      	ldrb	r3, [r7, #2]
 8009ab6:	716b      	strb	r3, [r5, #5]
 8009ab8:	2e05      	cmp	r6, #5
 8009aba:	f105 0306 	add.w	r3, r5, #6
 8009abe:	d068      	beq.n	8009b92 <ucdr_deserialize_double+0x166>
 8009ac0:	787b      	ldrb	r3, [r7, #1]
 8009ac2:	71ab      	strb	r3, [r5, #6]
 8009ac4:	2e06      	cmp	r6, #6
 8009ac6:	f105 0307 	add.w	r3, r5, #7
 8009aca:	d066      	beq.n	8009b9a <ucdr_deserialize_double+0x16e>
 8009acc:	783b      	ldrb	r3, [r7, #0]
 8009ace:	71eb      	strb	r3, [r5, #7]
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	68a2      	ldr	r2, [r4, #8]
 8009ad4:	7da0      	ldrb	r0, [r4, #22]
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	1b9e      	subs	r6, r3, r6
 8009ada:	2308      	movs	r3, #8
 8009adc:	4442      	add	r2, r8
 8009ade:	7563      	strb	r3, [r4, #21]
 8009ae0:	6126      	str	r6, [r4, #16]
 8009ae2:	60a2      	str	r2, [r4, #8]
 8009ae4:	f080 0001 	eor.w	r0, r0, #1
 8009ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aec:	2108      	movs	r1, #8
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 f86e 	bl	8009bd0 <ucdr_check_final_buffer_behavior>
 8009af4:	b310      	cbz	r0, 8009b3c <ucdr_deserialize_double+0x110>
 8009af6:	7d23      	ldrb	r3, [r4, #20]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	68a3      	ldr	r3, [r4, #8]
 8009afc:	d023      	beq.n	8009b46 <ucdr_deserialize_double+0x11a>
 8009afe:	79db      	ldrb	r3, [r3, #7]
 8009b00:	702b      	strb	r3, [r5, #0]
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	799b      	ldrb	r3, [r3, #6]
 8009b06:	706b      	strb	r3, [r5, #1]
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	795b      	ldrb	r3, [r3, #5]
 8009b0c:	70ab      	strb	r3, [r5, #2]
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	791b      	ldrb	r3, [r3, #4]
 8009b12:	70eb      	strb	r3, [r5, #3]
 8009b14:	68a3      	ldr	r3, [r4, #8]
 8009b16:	78db      	ldrb	r3, [r3, #3]
 8009b18:	712b      	strb	r3, [r5, #4]
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	789b      	ldrb	r3, [r3, #2]
 8009b1e:	716b      	strb	r3, [r5, #5]
 8009b20:	68a3      	ldr	r3, [r4, #8]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	71ab      	strb	r3, [r5, #6]
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	71eb      	strb	r3, [r5, #7]
 8009b2c:	68a2      	ldr	r2, [r4, #8]
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	3208      	adds	r2, #8
 8009b32:	3308      	adds	r3, #8
 8009b34:	2108      	movs	r1, #8
 8009b36:	60a2      	str	r2, [r4, #8]
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	7561      	strb	r1, [r4, #21]
 8009b3c:	7da0      	ldrb	r0, [r4, #22]
 8009b3e:	f080 0001 	eor.w	r0, r0, #1
 8009b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	606b      	str	r3, [r5, #4]
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	e7ed      	b.n	8009b2c <ucdr_deserialize_double+0x100>
 8009b50:	68a2      	ldr	r2, [r4, #8]
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	7da0      	ldrb	r0, [r4, #22]
 8009b56:	f884 9015 	strb.w	r9, [r4, #21]
 8009b5a:	1b92      	subs	r2, r2, r6
 8009b5c:	1b9e      	subs	r6, r3, r6
 8009b5e:	60a2      	str	r2, [r4, #8]
 8009b60:	6126      	str	r6, [r4, #16]
 8009b62:	f080 0001 	eor.w	r0, r0, #1
 8009b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	799b      	ldrb	r3, [r3, #6]
 8009b6e:	706b      	strb	r3, [r5, #1]
 8009b70:	1cab      	adds	r3, r5, #2
 8009b72:	68a2      	ldr	r2, [r4, #8]
 8009b74:	7952      	ldrb	r2, [r2, #5]
 8009b76:	f803 2b01 	strb.w	r2, [r3], #1
 8009b7a:	68a2      	ldr	r2, [r4, #8]
 8009b7c:	7912      	ldrb	r2, [r2, #4]
 8009b7e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b82:	68a2      	ldr	r2, [r4, #8]
 8009b84:	78d2      	ldrb	r2, [r2, #3]
 8009b86:	f803 2b01 	strb.w	r2, [r3], #1
 8009b8a:	68a2      	ldr	r2, [r4, #8]
 8009b8c:	7892      	ldrb	r2, [r2, #2]
 8009b8e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b92:	68a2      	ldr	r2, [r4, #8]
 8009b94:	7852      	ldrb	r2, [r2, #1]
 8009b96:	f803 2b01 	strb.w	r2, [r3], #1
 8009b9a:	68a2      	ldr	r2, [r4, #8]
 8009b9c:	7812      	ldrb	r2, [r2, #0]
 8009b9e:	701a      	strb	r2, [r3, #0]
 8009ba0:	e796      	b.n	8009ad0 <ucdr_deserialize_double+0xa4>
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f009 fc88 	bl	80134bc <memcpy>
 8009bac:	68a1      	ldr	r1, [r4, #8]
 8009bae:	4642      	mov	r2, r8
 8009bb0:	19a8      	adds	r0, r5, r6
 8009bb2:	f009 fc83 	bl	80134bc <memcpy>
 8009bb6:	e78b      	b.n	8009ad0 <ucdr_deserialize_double+0xa4>

08009bb8 <ucdr_check_buffer_available_for>:
 8009bb8:	7d83      	ldrb	r3, [r0, #22]
 8009bba:	b93b      	cbnz	r3, 8009bcc <ucdr_check_buffer_available_for+0x14>
 8009bbc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009bc0:	4419      	add	r1, r3
 8009bc2:	4288      	cmp	r0, r1
 8009bc4:	bf34      	ite	cc
 8009bc6:	2000      	movcc	r0, #0
 8009bc8:	2001      	movcs	r0, #1
 8009bca:	4770      	bx	lr
 8009bcc:	2000      	movs	r0, #0
 8009bce:	4770      	bx	lr

08009bd0 <ucdr_check_final_buffer_behavior>:
 8009bd0:	7d83      	ldrb	r3, [r0, #22]
 8009bd2:	b943      	cbnz	r3, 8009be6 <ucdr_check_final_buffer_behavior+0x16>
 8009bd4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009bd8:	4291      	cmp	r1, r2
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	4604      	mov	r4, r0
 8009bde:	d205      	bcs.n	8009bec <ucdr_check_final_buffer_behavior+0x1c>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	2300      	movs	r3, #0
 8009be8:	4618      	mov	r0, r3
 8009bea:	4770      	bx	lr
 8009bec:	6982      	ldr	r2, [r0, #24]
 8009bee:	b13a      	cbz	r2, 8009c00 <ucdr_check_final_buffer_behavior+0x30>
 8009bf0:	69c1      	ldr	r1, [r0, #28]
 8009bf2:	4790      	blx	r2
 8009bf4:	f080 0301 	eor.w	r3, r0, #1
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	75a0      	strb	r0, [r4, #22]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	bd10      	pop	{r4, pc}
 8009c00:	2001      	movs	r0, #1
 8009c02:	75a0      	strb	r0, [r4, #22]
 8009c04:	e7fa      	b.n	8009bfc <ucdr_check_final_buffer_behavior+0x2c>
 8009c06:	bf00      	nop

08009c08 <ucdr_set_on_full_buffer_callback>:
 8009c08:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop

08009c10 <ucdr_init_buffer_origin_offset_endian>:
 8009c10:	b430      	push	{r4, r5}
 8009c12:	9c02      	ldr	r4, [sp, #8]
 8009c14:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8009c18:	6001      	str	r1, [r0, #0]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	60c3      	str	r3, [r0, #12]
 8009c1e:	4421      	add	r1, r4
 8009c20:	441c      	add	r4, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	6104      	str	r4, [r0, #16]
 8009c26:	7505      	strb	r5, [r0, #20]
 8009c28:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c2c:	bc30      	pop	{r4, r5}
 8009c2e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8009c32:	7543      	strb	r3, [r0, #21]
 8009c34:	7583      	strb	r3, [r0, #22]
 8009c36:	4770      	bx	lr

08009c38 <ucdr_init_buffer_origin_offset>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	9c04      	ldr	r4, [sp, #16]
 8009c3e:	9400      	str	r4, [sp, #0]
 8009c40:	2401      	movs	r4, #1
 8009c42:	9401      	str	r4, [sp, #4]
 8009c44:	f7ff ffe4 	bl	8009c10 <ucdr_init_buffer_origin_offset_endian>
 8009c48:	b002      	add	sp, #8
 8009c4a:	bd10      	pop	{r4, pc}

08009c4c <ucdr_init_buffer_origin>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	2400      	movs	r4, #0
 8009c52:	9400      	str	r4, [sp, #0]
 8009c54:	f7ff fff0 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 8009c58:	b002      	add	sp, #8
 8009c5a:	bd10      	pop	{r4, pc}

08009c5c <ucdr_init_buffer>:
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f7ff bff5 	b.w	8009c4c <ucdr_init_buffer_origin>
 8009c62:	bf00      	nop

08009c64 <ucdr_alignment>:
 8009c64:	fbb0 f3f1 	udiv	r3, r0, r1
 8009c68:	fb03 0011 	mls	r0, r3, r1, r0
 8009c6c:	1a08      	subs	r0, r1, r0
 8009c6e:	3901      	subs	r1, #1
 8009c70:	4008      	ands	r0, r1
 8009c72:	4770      	bx	lr

08009c74 <ucdr_buffer_alignment>:
 8009c74:	7d43      	ldrb	r3, [r0, #21]
 8009c76:	428b      	cmp	r3, r1
 8009c78:	d208      	bcs.n	8009c8c <ucdr_buffer_alignment+0x18>
 8009c7a:	6903      	ldr	r3, [r0, #16]
 8009c7c:	fbb3 f0f1 	udiv	r0, r3, r1
 8009c80:	fb01 3010 	mls	r0, r1, r0, r3
 8009c84:	1a08      	subs	r0, r1, r0
 8009c86:	3901      	subs	r1, #1
 8009c88:	4008      	ands	r0, r1
 8009c8a:	4770      	bx	lr
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	4770      	bx	lr

08009c90 <ucdr_align_to>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	4604      	mov	r4, r0
 8009c94:	460e      	mov	r6, r1
 8009c96:	f7ff ffed 	bl	8009c74 <ucdr_buffer_alignment>
 8009c9a:	68a5      	ldr	r5, [r4, #8]
 8009c9c:	6863      	ldr	r3, [r4, #4]
 8009c9e:	6922      	ldr	r2, [r4, #16]
 8009ca0:	7566      	strb	r6, [r4, #21]
 8009ca2:	4405      	add	r5, r0
 8009ca4:	42ab      	cmp	r3, r5
 8009ca6:	4410      	add	r0, r2
 8009ca8:	bf28      	it	cs
 8009caa:	462b      	movcs	r3, r5
 8009cac:	6120      	str	r0, [r4, #16]
 8009cae:	60a3      	str	r3, [r4, #8]
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	bf00      	nop

08009cb4 <ucdr_buffer_length>:
 8009cb4:	6882      	ldr	r2, [r0, #8]
 8009cb6:	6800      	ldr	r0, [r0, #0]
 8009cb8:	1a10      	subs	r0, r2, r0
 8009cba:	4770      	bx	lr

08009cbc <ucdr_buffer_remaining>:
 8009cbc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009cc0:	1a10      	subs	r0, r2, r0
 8009cc2:	4770      	bx	lr

08009cc4 <ucdr_check_final_buffer_behavior_array>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	7d83      	ldrb	r3, [r0, #22]
 8009cc8:	b963      	cbnz	r3, 8009ce4 <ucdr_check_final_buffer_behavior_array+0x20>
 8009cca:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	d308      	bcc.n	8009ce8 <ucdr_check_final_buffer_behavior_array+0x24>
 8009cd6:	b139      	cbz	r1, 8009ce8 <ucdr_check_final_buffer_behavior_array+0x24>
 8009cd8:	6983      	ldr	r3, [r0, #24]
 8009cda:	b163      	cbz	r3, 8009cf6 <ucdr_check_final_buffer_behavior_array+0x32>
 8009cdc:	69c1      	ldr	r1, [r0, #28]
 8009cde:	4798      	blx	r3
 8009ce0:	75a0      	strb	r0, [r4, #22]
 8009ce2:	b108      	cbz	r0, 8009ce8 <ucdr_check_final_buffer_behavior_array+0x24>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7ff ffe7 	bl	8009cbc <ucdr_buffer_remaining>
 8009cee:	42a8      	cmp	r0, r5
 8009cf0:	bf28      	it	cs
 8009cf2:	4628      	movcs	r0, r5
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	7583      	strb	r3, [r0, #22]
 8009cfa:	e7f3      	b.n	8009ce4 <ucdr_check_final_buffer_behavior_array+0x20>

08009cfc <ucdr_advance_buffer>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	460d      	mov	r5, r1
 8009d02:	f7ff ff59 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8009d06:	b178      	cbz	r0, 8009d28 <ucdr_advance_buffer+0x2c>
 8009d08:	68a3      	ldr	r3, [r4, #8]
 8009d0a:	6921      	ldr	r1, [r4, #16]
 8009d0c:	442b      	add	r3, r5
 8009d0e:	60a3      	str	r3, [r4, #8]
 8009d10:	2301      	movs	r3, #1
 8009d12:	4429      	add	r1, r5
 8009d14:	7563      	strb	r3, [r4, #21]
 8009d16:	6121      	str	r1, [r4, #16]
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	68a2      	ldr	r2, [r4, #8]
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	4402      	add	r2, r0
 8009d20:	4403      	add	r3, r0
 8009d22:	1a2d      	subs	r5, r5, r0
 8009d24:	60a2      	str	r2, [r4, #8]
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f7ff ffc9 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d1f1      	bne.n	8009d1a <ucdr_advance_buffer+0x1e>
 8009d36:	2301      	movs	r3, #1
 8009d38:	7563      	strb	r3, [r4, #21]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}

08009d3c <rcl_get_zero_initialized_subscription>:
 8009d3c:	4b01      	ldr	r3, [pc, #4]	; (8009d44 <rcl_get_zero_initialized_subscription+0x8>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	08014da0 	.word	0x08014da0

08009d48 <rcl_subscription_init>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	b091      	sub	sp, #68	; 0x44
 8009d4e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009d50:	b1d7      	cbz	r7, 8009d88 <rcl_subscription_init+0x40>
 8009d52:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8009d56:	4604      	mov	r4, r0
 8009d58:	4648      	mov	r0, r9
 8009d5a:	4688      	mov	r8, r1
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	461d      	mov	r5, r3
 8009d60:	f000 fdea 	bl	800a938 <rcutils_allocator_is_valid>
 8009d64:	b180      	cbz	r0, 8009d88 <rcl_subscription_init+0x40>
 8009d66:	b17c      	cbz	r4, 8009d88 <rcl_subscription_init+0x40>
 8009d68:	4640      	mov	r0, r8
 8009d6a:	f004 ffc3 	bl	800ecf4 <rcl_node_is_valid>
 8009d6e:	b380      	cbz	r0, 8009dd2 <rcl_subscription_init+0x8a>
 8009d70:	b156      	cbz	r6, 8009d88 <rcl_subscription_init+0x40>
 8009d72:	b14d      	cbz	r5, 8009d88 <rcl_subscription_init+0x40>
 8009d74:	f8d4 a000 	ldr.w	sl, [r4]
 8009d78:	f1ba 0f00 	cmp.w	sl, #0
 8009d7c:	d009      	beq.n	8009d92 <rcl_subscription_init+0x4a>
 8009d7e:	2564      	movs	r5, #100	; 0x64
 8009d80:	4628      	mov	r0, r5
 8009d82:	b011      	add	sp, #68	; 0x44
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	250b      	movs	r5, #11
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	b011      	add	sp, #68	; 0x44
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	46ce      	mov	lr, r9
 8009d94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009d98:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8009d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009da0:	f8de 3000 	ldr.w	r3, [lr]
 8009da4:	f8cc 3000 	str.w	r3, [ip]
 8009da8:	f000 fe02 	bl	800a9b0 <rcutils_get_zero_initialized_string_map>
 8009dac:	ab10      	add	r3, sp, #64	; 0x40
 8009dae:	4684      	mov	ip, r0
 8009db0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009db4:	f8cd c020 	str.w	ip, [sp, #32]
 8009db8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009dbc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8009dc0:	4651      	mov	r1, sl
 8009dc2:	a808      	add	r0, sp, #32
 8009dc4:	f000 fe6e 	bl	800aaa4 <rcutils_string_map_init>
 8009dc8:	b140      	cbz	r0, 8009ddc <rcl_subscription_init+0x94>
 8009dca:	280a      	cmp	r0, #10
 8009dcc:	d011      	beq.n	8009df2 <rcl_subscription_init+0xaa>
 8009dce:	2501      	movs	r5, #1
 8009dd0:	e7db      	b.n	8009d8a <rcl_subscription_init+0x42>
 8009dd2:	25c8      	movs	r5, #200	; 0xc8
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	b011      	add	sp, #68	; 0x44
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ddc:	a808      	add	r0, sp, #32
 8009dde:	f004 fbb7 	bl	800e550 <rcl_get_default_topic_name_substitutions>
 8009de2:	4682      	mov	sl, r0
 8009de4:	b138      	cbz	r0, 8009df6 <rcl_subscription_init+0xae>
 8009de6:	a808      	add	r0, sp, #32
 8009de8:	f000 fe9c 	bl	800ab24 <rcutils_string_map_fini>
 8009dec:	f1ba 0f0a 	cmp.w	sl, #10
 8009df0:	d1ed      	bne.n	8009dce <rcl_subscription_init+0x86>
 8009df2:	250a      	movs	r5, #10
 8009df4:	e7c9      	b.n	8009d8a <rcl_subscription_init+0x42>
 8009df6:	4640      	mov	r0, r8
 8009df8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009dfc:	f004 ff84 	bl	800ed08 <rcl_node_get_name>
 8009e00:	4682      	mov	sl, r0
 8009e02:	4640      	mov	r0, r8
 8009e04:	f004 ff88 	bl	800ed18 <rcl_node_get_namespace>
 8009e08:	4686      	mov	lr, r0
 8009e0a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8009e0e:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8009e12:	46ec      	mov	ip, sp
 8009e14:	f8cd b014 	str.w	fp, [sp, #20]
 8009e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e1c:	f8d9 3000 	ldr.w	r3, [r9]
 8009e20:	f8cc 3000 	str.w	r3, [ip]
 8009e24:	4628      	mov	r0, r5
 8009e26:	4651      	mov	r1, sl
 8009e28:	4672      	mov	r2, lr
 8009e2a:	ab08      	add	r3, sp, #32
 8009e2c:	f004 fa2a 	bl	800e284 <rcl_expand_topic_name>
 8009e30:	4605      	mov	r5, r0
 8009e32:	a808      	add	r0, sp, #32
 8009e34:	f000 fe76 	bl	800ab24 <rcutils_string_map_fini>
 8009e38:	b920      	cbnz	r0, 8009e44 <rcl_subscription_init+0xfc>
 8009e3a:	b15d      	cbz	r5, 8009e54 <rcl_subscription_init+0x10c>
 8009e3c:	2d67      	cmp	r5, #103	; 0x67
 8009e3e:	d002      	beq.n	8009e46 <rcl_subscription_init+0xfe>
 8009e40:	2d69      	cmp	r5, #105	; 0x69
 8009e42:	d05a      	beq.n	8009efa <rcl_subscription_init+0x1b2>
 8009e44:	2501      	movs	r5, #1
 8009e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d09e      	beq.n	8009d8a <rcl_subscription_init+0x42>
 8009e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e50:	4798      	blx	r3
 8009e52:	e79a      	b.n	8009d8a <rcl_subscription_init+0x42>
 8009e54:	4640      	mov	r0, r8
 8009e56:	f004 ff67 	bl	800ed28 <rcl_node_get_options>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d0f2      	beq.n	8009e44 <rcl_subscription_init+0xfc>
 8009e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e60:	f7f6 f9e0 	bl	8000224 <strlen>
 8009e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e68:	3001      	adds	r0, #1
 8009e6a:	4798      	blx	r3
 8009e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e6e:	9107      	str	r1, [sp, #28]
 8009e70:	4681      	mov	r9, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	f7f6 f9d6 	bl	8000224 <strlen>
 8009e78:	9907      	ldr	r1, [sp, #28]
 8009e7a:	1c42      	adds	r2, r0, #1
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	f009 fb1d 	bl	80134bc <memcpy>
 8009e82:	462a      	mov	r2, r5
 8009e84:	4648      	mov	r0, r9
 8009e86:	a90a      	add	r1, sp, #40	; 0x28
 8009e88:	f000 ff28 	bl	800acdc <rmw_validate_full_topic_name>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d132      	bne.n	8009ef6 <rcl_subscription_init+0x1ae>
 8009e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d133      	bne.n	8009efe <rcl_subscription_init+0x1b6>
 8009e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e9a:	20c8      	movs	r0, #200	; 0xc8
 8009e9c:	4798      	blx	r3
 8009e9e:	6020      	str	r0, [r4, #0]
 8009ea0:	b378      	cbz	r0, 8009f02 <rcl_subscription_init+0x1ba>
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f004 ff48 	bl	800ed38 <rcl_node_get_rmw_handle>
 8009ea8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4631      	mov	r1, r6
 8009eb0:	463b      	mov	r3, r7
 8009eb2:	464a      	mov	r2, r9
 8009eb4:	6825      	ldr	r5, [r4, #0]
 8009eb6:	f000 ffad 	bl	800ae14 <rmw_create_subscription>
 8009eba:	6821      	ldr	r1, [r4, #0]
 8009ebc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8009ec0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8009ec4:	b368      	cbz	r0, 8009f22 <rcl_subscription_init+0x1da>
 8009ec6:	3170      	adds	r1, #112	; 0x70
 8009ec8:	f001 f880 	bl	800afcc <rmw_subscription_get_actual_qos>
 8009ecc:	4605      	mov	r5, r0
 8009ece:	b9d0      	cbnz	r0, 8009f06 <rcl_subscription_init+0x1be>
 8009ed0:	6820      	ldr	r0, [r4, #0]
 8009ed2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009ed6:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8009eda:	2270      	movs	r2, #112	; 0x70
 8009edc:	4639      	mov	r1, r7
 8009ede:	f009 faed 	bl	80134bc <memcpy>
 8009ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee4:	b110      	cbz	r0, 8009eec <rcl_subscription_init+0x1a4>
 8009ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009eea:	4798      	blx	r3
 8009eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	4798      	blx	r3
 8009ef4:	e749      	b.n	8009d8a <rcl_subscription_init+0x42>
 8009ef6:	2501      	movs	r5, #1
 8009ef8:	e7f3      	b.n	8009ee2 <rcl_subscription_init+0x19a>
 8009efa:	2567      	movs	r5, #103	; 0x67
 8009efc:	e7a3      	b.n	8009e46 <rcl_subscription_init+0xfe>
 8009efe:	2567      	movs	r5, #103	; 0x67
 8009f00:	e7ef      	b.n	8009ee2 <rcl_subscription_init+0x19a>
 8009f02:	250a      	movs	r5, #10
 8009f04:	e7ed      	b.n	8009ee2 <rcl_subscription_init+0x19a>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0f4      	beq.n	8009ef6 <rcl_subscription_init+0x1ae>
 8009f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009f10:	b13b      	cbz	r3, 8009f22 <rcl_subscription_init+0x1da>
 8009f12:	4640      	mov	r0, r8
 8009f14:	f004 ff10 	bl	800ed38 <rcl_node_get_rmw_handle>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8009f1e:	f001 f863 	bl	800afe8 <rmw_destroy_subscription>
 8009f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	4798      	blx	r3
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	2501      	movs	r5, #1
 8009f30:	e7d7      	b.n	8009ee2 <rcl_subscription_init+0x19a>
 8009f32:	bf00      	nop

08009f34 <rcl_subscription_fini>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	b300      	cbz	r0, 8009f7a <rcl_subscription_fini+0x46>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4608      	mov	r0, r1
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	f004 fed1 	bl	800ece4 <rcl_node_is_valid_except_context>
 8009f42:	b1f0      	cbz	r0, 8009f82 <rcl_subscription_fini+0x4e>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	b1ab      	cbz	r3, 8009f74 <rcl_subscription_fini+0x40>
 8009f48:	4628      	mov	r0, r5
 8009f4a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8009f4c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8009f4e:	f004 fef3 	bl	800ed38 <rcl_node_get_rmw_handle>
 8009f52:	b1c8      	cbz	r0, 8009f88 <rcl_subscription_fini+0x54>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8009f5a:	f001 f845 	bl	800afe8 <rmw_destroy_subscription>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	4629      	mov	r1, r5
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	1e1d      	subs	r5, r3, #0
 8009f66:	bf18      	it	ne
 8009f68:	2501      	movne	r5, #1
 8009f6a:	47b0      	blx	r6
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	4628      	mov	r0, r5
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	461d      	mov	r5, r3
 8009f76:	4628      	mov	r0, r5
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
 8009f7a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009f7e:	4628      	mov	r0, r5
 8009f80:	bd70      	pop	{r4, r5, r6, pc}
 8009f82:	25c8      	movs	r5, #200	; 0xc8
 8009f84:	4628      	mov	r0, r5
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	250b      	movs	r5, #11
 8009f8a:	e7f1      	b.n	8009f70 <rcl_subscription_fini+0x3c>

08009f8c <rcl_subscription_get_default_options>:
 8009f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	4f12      	ldr	r7, [pc, #72]	; (8009fdc <rcl_subscription_get_default_options+0x50>)
 8009f92:	4913      	ldr	r1, [pc, #76]	; (8009fe0 <rcl_subscription_get_default_options+0x54>)
 8009f94:	b088      	sub	sp, #32
 8009f96:	4606      	mov	r6, r0
 8009f98:	2250      	movs	r2, #80	; 0x50
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f009 fa8e 	bl	80134bc <memcpy>
 8009fa0:	ac02      	add	r4, sp, #8
 8009fa2:	a802      	add	r0, sp, #8
 8009fa4:	f000 fcba 	bl	800a91c <rcutils_get_default_allocator>
 8009fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009faa:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8009fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fb0:	46e8      	mov	r8, sp
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	f000 fe7a 	bl	800acb0 <rmw_get_default_subscription_options>
 8009fbc:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009fc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8009fc8:	2270      	movs	r2, #112	; 0x70
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f009 fa75 	bl	80134bc <memcpy>
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	b008      	add	sp, #32
 8009fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fda:	bf00      	nop
 8009fdc:	20009088 	.word	0x20009088
 8009fe0:	08014da8 	.word	0x08014da8

08009fe4 <rcl_take>:
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d03f      	beq.n	800a068 <rcl_take+0x84>
 8009fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fec:	4617      	mov	r7, r2
 8009fee:	6802      	ldr	r2, [r0, #0]
 8009ff0:	b09d      	sub	sp, #116	; 0x74
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	b382      	cbz	r2, 800a058 <rcl_take+0x74>
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8009ffc:	b363      	cbz	r3, 800a058 <rcl_take+0x74>
 8009ffe:	4688      	mov	r8, r1
 800a000:	b381      	cbz	r1, 800a064 <rcl_take+0x80>
 800a002:	2f00      	cmp	r7, #0
 800a004:	d034      	beq.n	800a070 <rcl_take+0x8c>
 800a006:	a802      	add	r0, sp, #8
 800a008:	ac02      	add	r4, sp, #8
 800a00a:	f000 fe55 	bl	800acb8 <rmw_get_zero_initialized_message_info>
 800a00e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a010:	463d      	mov	r5, r7
 800a012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a018:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a01c:	6834      	ldr	r4, [r6, #0]
 800a01e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800a022:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a026:	2400      	movs	r4, #0
 800a028:	463b      	mov	r3, r7
 800a02a:	4630      	mov	r0, r6
 800a02c:	f8cd 9000 	str.w	r9, [sp]
 800a030:	4641      	mov	r1, r8
 800a032:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800a036:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800a03a:	f001 f833 	bl	800b0a4 <rmw_take_with_info>
 800a03e:	4603      	mov	r3, r0
 800a040:	b9c0      	cbnz	r0, 800a074 <rcl_take+0x90>
 800a042:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800a046:	f240 1291 	movw	r2, #401	; 0x191
 800a04a:	2900      	cmp	r1, #0
 800a04c:	bf08      	it	eq
 800a04e:	4613      	moveq	r3, r2
 800a050:	4618      	mov	r0, r3
 800a052:	b01d      	add	sp, #116	; 0x74
 800a054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a058:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a05c:	4618      	mov	r0, r3
 800a05e:	b01d      	add	sp, #116	; 0x74
 800a060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a064:	230b      	movs	r3, #11
 800a066:	e7f3      	b.n	800a050 <rcl_take+0x6c>
 800a068:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a06c:	4618      	mov	r0, r3
 800a06e:	4770      	bx	lr
 800a070:	af10      	add	r7, sp, #64	; 0x40
 800a072:	e7c8      	b.n	800a006 <rcl_take+0x22>
 800a074:	f004 f87e 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800a078:	4603      	mov	r3, r0
 800a07a:	e7e9      	b.n	800a050 <rcl_take+0x6c>

0800a07c <rcl_subscription_get_rmw_handle>:
 800a07c:	b118      	cbz	r0, 800a086 <rcl_subscription_get_rmw_handle+0xa>
 800a07e:	6800      	ldr	r0, [r0, #0]
 800a080:	b108      	cbz	r0, 800a086 <rcl_subscription_get_rmw_handle+0xa>
 800a082:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800a086:	4770      	bx	lr

0800a088 <_rclc_check_for_new_data>:
 800a088:	b1e0      	cbz	r0, 800a0c4 <_rclc_check_for_new_data+0x3c>
 800a08a:	7803      	ldrb	r3, [r0, #0]
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d81b      	bhi.n	800a0c8 <_rclc_check_for_new_data+0x40>
 800a090:	e8df f003 	tbb	[pc, r3]
 800a094:	12161010 	.word	0x12161010
 800a098:	05050512 	.word	0x05050512
 800a09c:	14          	.byte	0x14
 800a09d:	00          	.byte	0x00
 800a09e:	6a0b      	ldr	r3, [r1, #32]
 800a0a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a6:	3b00      	subs	r3, #0
 800a0a8:	bf18      	it	ne
 800a0aa:	2301      	movne	r3, #1
 800a0ac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	4770      	bx	lr
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	e7f3      	b.n	800a0a0 <_rclc_check_for_new_data+0x18>
 800a0b8:	698b      	ldr	r3, [r1, #24]
 800a0ba:	e7f1      	b.n	800a0a0 <_rclc_check_for_new_data+0x18>
 800a0bc:	688b      	ldr	r3, [r1, #8]
 800a0be:	e7ef      	b.n	800a0a0 <_rclc_check_for_new_data+0x18>
 800a0c0:	690b      	ldr	r3, [r1, #16]
 800a0c2:	e7ed      	b.n	800a0a0 <_rclc_check_for_new_data+0x18>
 800a0c4:	200b      	movs	r0, #11
 800a0c6:	4770      	bx	lr
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop

0800a0d4 <_rclc_take_new_data>:
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d049      	beq.n	800a16c <_rclc_take_new_data+0x98>
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	7803      	ldrb	r3, [r0, #0]
 800a0dc:	b08e      	sub	sp, #56	; 0x38
 800a0de:	4604      	mov	r4, r0
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d84a      	bhi.n	800a17a <_rclc_take_new_data+0xa6>
 800a0e4:	e8df f003 	tbb	[pc, r3]
 800a0e8:	2b121515 	.word	0x2b121515
 800a0ec:	0505052b 	.word	0x0505052b
 800a0f0:	12          	.byte	0x12
 800a0f1:	00          	.byte	0x00
 800a0f2:	6a0b      	ldr	r3, [r1, #32]
 800a0f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0fa:	b13b      	cbz	r3, 800a10c <_rclc_take_new_data+0x38>
 800a0fc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a100:	f104 0110 	add.w	r1, r4, #16
 800a104:	f004 ff52 	bl	800efac <rcl_take_request>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d131      	bne.n	800a170 <_rclc_take_new_data+0x9c>
 800a10c:	2000      	movs	r0, #0
 800a10e:	b00e      	add	sp, #56	; 0x38
 800a110:	bd10      	pop	{r4, pc}
 800a112:	680b      	ldr	r3, [r1, #0]
 800a114:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f6      	beq.n	800a10c <_rclc_take_new_data+0x38>
 800a11e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a122:	2300      	movs	r3, #0
 800a124:	aa02      	add	r2, sp, #8
 800a126:	f7ff ff5d 	bl	8009fe4 <rcl_take>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d0ef      	beq.n	800a10e <_rclc_take_new_data+0x3a>
 800a12e:	f240 1391 	movw	r3, #401	; 0x191
 800a132:	4298      	cmp	r0, r3
 800a134:	d115      	bne.n	800a162 <_rclc_take_new_data+0x8e>
 800a136:	2300      	movs	r3, #0
 800a138:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a13c:	e7e7      	b.n	800a10e <_rclc_take_new_data+0x3a>
 800a13e:	698b      	ldr	r3, [r1, #24]
 800a140:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0e0      	beq.n	800a10c <_rclc_take_new_data+0x38>
 800a14a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a14e:	f104 0110 	add.w	r1, r4, #16
 800a152:	f003 ffd3 	bl	800e0fc <rcl_take_response>
 800a156:	2800      	cmp	r0, #0
 800a158:	d0d8      	beq.n	800a10c <_rclc_take_new_data+0x38>
 800a15a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a15e:	4298      	cmp	r0, r3
 800a160:	d0d5      	beq.n	800a10e <_rclc_take_new_data+0x3a>
 800a162:	9001      	str	r0, [sp, #4]
 800a164:	f000 fc0c 	bl	800a980 <rcutils_reset_error>
 800a168:	9801      	ldr	r0, [sp, #4]
 800a16a:	e7d0      	b.n	800a10e <_rclc_take_new_data+0x3a>
 800a16c:	200b      	movs	r0, #11
 800a16e:	4770      	bx	lr
 800a170:	f240 2359 	movw	r3, #601	; 0x259
 800a174:	4298      	cmp	r0, r3
 800a176:	d0de      	beq.n	800a136 <_rclc_take_new_data+0x62>
 800a178:	e7f3      	b.n	800a162 <_rclc_take_new_data+0x8e>
 800a17a:	2001      	movs	r0, #1
 800a17c:	e7c7      	b.n	800a10e <_rclc_take_new_data+0x3a>
 800a17e:	bf00      	nop

0800a180 <rclc_executor_trigger_any>:
 800a180:	b170      	cbz	r0, 800a1a0 <rclc_executor_trigger_any+0x20>
 800a182:	b179      	cbz	r1, 800a1a4 <rclc_executor_trigger_any+0x24>
 800a184:	4603      	mov	r3, r0
 800a186:	2200      	movs	r2, #0
 800a188:	e005      	b.n	800a196 <rclc_executor_trigger_any+0x16>
 800a18a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a18e:	3340      	adds	r3, #64	; 0x40
 800a190:	b930      	cbnz	r0, 800a1a0 <rclc_executor_trigger_any+0x20>
 800a192:	4291      	cmp	r1, r2
 800a194:	d005      	beq.n	800a1a2 <rclc_executor_trigger_any+0x22>
 800a196:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a19a:	3201      	adds	r2, #1
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1f4      	bne.n	800a18a <rclc_executor_trigger_any+0xa>
 800a1a0:	4770      	bx	lr
 800a1a2:	4770      	bx	lr
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	e7fb      	b.n	800a1a0 <rclc_executor_trigger_any+0x20>

0800a1a8 <_rclc_execute.part.0>:
 800a1a8:	b530      	push	{r4, r5, lr}
 800a1aa:	7803      	ldrb	r3, [r0, #0]
 800a1ac:	b083      	sub	sp, #12
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	d85b      	bhi.n	800a26c <_rclc_execute.part.0+0xc4>
 800a1b4:	e8df f003 	tbb	[pc, r3]
 800a1b8:	3036271f 	.word	0x3036271f
 800a1bc:	0505053f 	.word	0x0505053f
 800a1c0:	1a          	.byte	0x1a
 800a1c1:	00          	.byte	0x00
 800a1c2:	2b06      	cmp	r3, #6
 800a1c4:	d049      	beq.n	800a25a <_rclc_execute.part.0+0xb2>
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a1ca:	d140      	bne.n	800a24e <_rclc_execute.part.0+0xa6>
 800a1cc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a1d0:	6880      	ldr	r0, [r0, #8]
 800a1d2:	4798      	blx	r3
 800a1d4:	f104 0110 	add.w	r1, r4, #16
 800a1d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a1da:	6860      	ldr	r0, [r4, #4]
 800a1dc:	f004 ff1e 	bl	800f01c <rcl_send_response>
 800a1e0:	b138      	cbz	r0, 800a1f2 <_rclc_execute.part.0+0x4a>
 800a1e2:	9001      	str	r0, [sp, #4]
 800a1e4:	f000 fbcc 	bl	800a980 <rcutils_reset_error>
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	e002      	b.n	800a1f2 <_rclc_execute.part.0+0x4a>
 800a1ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a1ee:	4798      	blx	r3
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	b003      	add	sp, #12
 800a1f4:	bd30      	pop	{r4, r5, pc}
 800a1f6:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a1fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a1fc:	b96d      	cbnz	r5, 800a21a <_rclc_execute.part.0+0x72>
 800a1fe:	4628      	mov	r0, r5
 800a200:	4798      	blx	r3
 800a202:	4628      	mov	r0, r5
 800a204:	e7f5      	b.n	800a1f2 <_rclc_execute.part.0+0x4a>
 800a206:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a20a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a20e:	b1d5      	cbz	r5, 800a246 <_rclc_execute.part.0+0x9e>
 800a210:	6880      	ldr	r0, [r0, #8]
 800a212:	4798      	blx	r3
 800a214:	2000      	movs	r0, #0
 800a216:	e7ec      	b.n	800a1f2 <_rclc_execute.part.0+0x4a>
 800a218:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a21a:	68a0      	ldr	r0, [r4, #8]
 800a21c:	4798      	blx	r3
 800a21e:	2000      	movs	r0, #0
 800a220:	b003      	add	sp, #12
 800a222:	bd30      	pop	{r4, r5, pc}
 800a224:	6840      	ldr	r0, [r0, #4]
 800a226:	f004 ffb3 	bl	800f190 <rcl_timer_call>
 800a22a:	f240 3321 	movw	r3, #801	; 0x321
 800a22e:	4298      	cmp	r0, r3
 800a230:	d1d6      	bne.n	800a1e0 <_rclc_execute.part.0+0x38>
 800a232:	2000      	movs	r0, #0
 800a234:	e7dd      	b.n	800a1f2 <_rclc_execute.part.0+0x4a>
 800a236:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a238:	6880      	ldr	r0, [r0, #8]
 800a23a:	f104 0110 	add.w	r1, r4, #16
 800a23e:	4798      	blx	r3
 800a240:	2000      	movs	r0, #0
 800a242:	b003      	add	sp, #12
 800a244:	bd30      	pop	{r4, r5, pc}
 800a246:	4628      	mov	r0, r5
 800a248:	4798      	blx	r3
 800a24a:	4628      	mov	r0, r5
 800a24c:	e7d1      	b.n	800a1f2 <_rclc_execute.part.0+0x4a>
 800a24e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a250:	6880      	ldr	r0, [r0, #8]
 800a252:	4798      	blx	r3
 800a254:	f104 0110 	add.w	r1, r4, #16
 800a258:	e7be      	b.n	800a1d8 <_rclc_execute.part.0+0x30>
 800a25a:	f100 0110 	add.w	r1, r0, #16
 800a25e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a260:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a262:	6880      	ldr	r0, [r0, #8]
 800a264:	9101      	str	r1, [sp, #4]
 800a266:	4798      	blx	r3
 800a268:	9901      	ldr	r1, [sp, #4]
 800a26a:	e7b5      	b.n	800a1d8 <_rclc_execute.part.0+0x30>
 800a26c:	2001      	movs	r0, #1
 800a26e:	e7c0      	b.n	800a1f2 <_rclc_execute.part.0+0x4a>

0800a270 <rclc_executor_init>:
 800a270:	2800      	cmp	r0, #0
 800a272:	d063      	beq.n	800a33c <rclc_executor_init+0xcc>
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	460f      	mov	r7, r1
 800a27a:	b0ae      	sub	sp, #184	; 0xb8
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d055      	beq.n	800a32c <rclc_executor_init+0xbc>
 800a280:	4605      	mov	r5, r0
 800a282:	4618      	mov	r0, r3
 800a284:	4616      	mov	r6, r2
 800a286:	4698      	mov	r8, r3
 800a288:	f000 fb56 	bl	800a938 <rcutils_allocator_is_valid>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d04d      	beq.n	800a32c <rclc_executor_init+0xbc>
 800a290:	2e00      	cmp	r6, #0
 800a292:	d04b      	beq.n	800a32c <rclc_executor_init+0xbc>
 800a294:	492e      	ldr	r1, [pc, #184]	; (800a350 <rclc_executor_init+0xe0>)
 800a296:	2280      	movs	r2, #128	; 0x80
 800a298:	a80e      	add	r0, sp, #56	; 0x38
 800a29a:	f009 f90f 	bl	80134bc <memcpy>
 800a29e:	2400      	movs	r4, #0
 800a2a0:	a90e      	add	r1, sp, #56	; 0x38
 800a2a2:	2280      	movs	r2, #128	; 0x80
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f009 f909 	bl	80134bc <memcpy>
 800a2aa:	602f      	str	r7, [r5, #0]
 800a2ac:	4668      	mov	r0, sp
 800a2ae:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800a2b2:	466f      	mov	r7, sp
 800a2b4:	f005 f9c6 	bl	800f644 <rcl_get_zero_initialized_wait_set>
 800a2b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a2ba:	f105 0c14 	add.w	ip, r5, #20
 800a2be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a2c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a2ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2ce:	a31e      	add	r3, pc, #120	; (adr r3, 800a348 <rclc_executor_init+0xd8>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	f8cc 1000 	str.w	r1, [ip]
 800a2da:	f8d8 7000 	ldr.w	r7, [r8]
 800a2de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a2e2:	f8c5 8010 	str.w	r8, [r5, #16]
 800a2e6:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800a2ea:	01b0      	lsls	r0, r6, #6
 800a2ec:	47b8      	blx	r7
 800a2ee:	6068      	str	r0, [r5, #4]
 800a2f0:	b908      	cbnz	r0, 800a2f6 <rclc_executor_init+0x86>
 800a2f2:	e025      	b.n	800a340 <rclc_executor_init+0xd0>
 800a2f4:	6868      	ldr	r0, [r5, #4]
 800a2f6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	3401      	adds	r4, #1
 800a2fe:	f000 fa05 	bl	800a70c <rclc_executor_handle_init>
 800a302:	42a6      	cmp	r6, r4
 800a304:	d1f6      	bne.n	800a2f4 <rclc_executor_init+0x84>
 800a306:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a30a:	f000 f9f3 	bl	800a6f4 <rclc_executor_handle_counters_zero_init>
 800a30e:	686b      	ldr	r3, [r5, #4]
 800a310:	4a10      	ldr	r2, [pc, #64]	; (800a354 <rclc_executor_init+0xe4>)
 800a312:	672a      	str	r2, [r5, #112]	; 0x70
 800a314:	2000      	movs	r0, #0
 800a316:	6768      	str	r0, [r5, #116]	; 0x74
 800a318:	b163      	cbz	r3, 800a334 <rclc_executor_init+0xc4>
 800a31a:	692b      	ldr	r3, [r5, #16]
 800a31c:	b153      	cbz	r3, 800a334 <rclc_executor_init+0xc4>
 800a31e:	68ab      	ldr	r3, [r5, #8]
 800a320:	b143      	cbz	r3, 800a334 <rclc_executor_init+0xc4>
 800a322:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800a326:	b02e      	add	sp, #184	; 0xb8
 800a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32c:	200b      	movs	r0, #11
 800a32e:	b02e      	add	sp, #184	; 0xb8
 800a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a334:	4618      	mov	r0, r3
 800a336:	b02e      	add	sp, #184	; 0xb8
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	200b      	movs	r0, #11
 800a33e:	4770      	bx	lr
 800a340:	200a      	movs	r0, #10
 800a342:	e7f4      	b.n	800a32e <rclc_executor_init+0xbe>
 800a344:	f3af 8000 	nop.w
 800a348:	3b9aca00 	.word	0x3b9aca00
 800a34c:	00000000 	.word	0x00000000
 800a350:	08014df8 	.word	0x08014df8
 800a354:	0800a181 	.word	0x0800a181

0800a358 <rclc_executor_add_subscription>:
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800a360:	b358      	cbz	r0, 800a3ba <rclc_executor_add_subscription+0x62>
 800a362:	b351      	cbz	r1, 800a3ba <rclc_executor_add_subscription+0x62>
 800a364:	b34a      	cbz	r2, 800a3ba <rclc_executor_add_subscription+0x62>
 800a366:	b343      	cbz	r3, 800a3ba <rclc_executor_add_subscription+0x62>
 800a368:	4604      	mov	r4, r0
 800a36a:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800a36e:	4285      	cmp	r5, r0
 800a370:	d302      	bcc.n	800a378 <rclc_executor_add_subscription+0x20>
 800a372:	2001      	movs	r0, #1
 800a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a378:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800a37c:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800a380:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800a384:	f04f 0c00 	mov.w	ip, #0
 800a388:	f80e c008 	strb.w	ip, [lr, r8]
 800a38c:	2001      	movs	r0, #1
 800a38e:	3501      	adds	r5, #1
 800a390:	f104 0814 	add.w	r8, r4, #20
 800a394:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800a398:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800a39c:	6333      	str	r3, [r6, #48]	; 0x30
 800a39e:	7077      	strb	r7, [r6, #1]
 800a3a0:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	60e5      	str	r5, [r4, #12]
 800a3a8:	f005 f95e 	bl	800f668 <rcl_wait_set_is_valid>
 800a3ac:	b940      	cbnz	r0, 800a3c0 <rclc_executor_add_subscription+0x68>
 800a3ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	64a3      	str	r3, [r4, #72]	; 0x48
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ba:	200b      	movs	r0, #11
 800a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	f005 f957 	bl	800f674 <rcl_wait_set_fini>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d0f1      	beq.n	800a3ae <rclc_executor_add_subscription+0x56>
 800a3ca:	e7d3      	b.n	800a374 <rclc_executor_add_subscription+0x1c>

0800a3cc <rclc_executor_prepare>:
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d03d      	beq.n	800a44c <rclc_executor_prepare+0x80>
 800a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	f100 0814 	add.w	r8, r0, #20
 800a3d8:	b09a      	sub	sp, #104	; 0x68
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4640      	mov	r0, r8
 800a3de:	f005 f943 	bl	800f668 <rcl_wait_set_is_valid>
 800a3e2:	b118      	cbz	r0, 800a3ec <rclc_executor_prepare+0x20>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	b01a      	add	sp, #104	; 0x68
 800a3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	f005 f941 	bl	800f674 <rcl_wait_set_fini>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d127      	bne.n	800a446 <rclc_executor_prepare+0x7a>
 800a3f6:	a80c      	add	r0, sp, #48	; 0x30
 800a3f8:	ad0c      	add	r5, sp, #48	; 0x30
 800a3fa:	f005 f923 	bl	800f644 <rcl_get_zero_initialized_wait_set>
 800a3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a400:	4646      	mov	r6, r8
 800a402:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a406:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a40a:	6927      	ldr	r7, [r4, #16]
 800a40c:	682d      	ldr	r5, [r5, #0]
 800a40e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a410:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a412:	6035      	str	r5, [r6, #0]
 800a414:	ad04      	add	r5, sp, #16
 800a416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a418:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800a41c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a41e:	6826      	ldr	r6, [r4, #0]
 800a420:	6838      	ldr	r0, [r7, #0]
 800a422:	6028      	str	r0, [r5, #0]
 800a424:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800a428:	e9cd 3200 	strd	r3, r2, [sp]
 800a42c:	4640      	mov	r0, r8
 800a42e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a430:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a432:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a434:	f005 fc3c 	bl	800fcb0 <rcl_wait_set_init>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d0d4      	beq.n	800a3e6 <rclc_executor_prepare+0x1a>
 800a43c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a43e:	f000 fa9f 	bl	800a980 <rcutils_reset_error>
 800a442:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a444:	e7cf      	b.n	800a3e6 <rclc_executor_prepare+0x1a>
 800a446:	f000 fa9b 	bl	800a980 <rcutils_reset_error>
 800a44a:	e7d4      	b.n	800a3f6 <rclc_executor_prepare+0x2a>
 800a44c:	200b      	movs	r0, #11
 800a44e:	4770      	bx	lr

0800a450 <rclc_executor_spin_some.part.0>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	f100 0814 	add.w	r8, r0, #20
 800a458:	b083      	sub	sp, #12
 800a45a:	4692      	mov	sl, r2
 800a45c:	4699      	mov	r9, r3
 800a45e:	4605      	mov	r5, r0
 800a460:	f7ff ffb4 	bl	800a3cc <rclc_executor_prepare>
 800a464:	4640      	mov	r0, r8
 800a466:	f005 f9d1 	bl	800f80c <rcl_wait_set_clear>
 800a46a:	4607      	mov	r7, r0
 800a46c:	2800      	cmp	r0, #0
 800a46e:	f040 80be 	bne.w	800a5ee <rclc_executor_spin_some.part.0+0x19e>
 800a472:	68ab      	ldr	r3, [r5, #8]
 800a474:	4604      	mov	r4, r0
 800a476:	b1eb      	cbz	r3, 800a4b4 <rclc_executor_spin_some.part.0+0x64>
 800a478:	686e      	ldr	r6, [r5, #4]
 800a47a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800a47e:	01a2      	lsls	r2, r4, #6
 800a480:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800a484:	b1b3      	cbz	r3, 800a4b4 <rclc_executor_spin_some.part.0+0x64>
 800a486:	5cb3      	ldrb	r3, [r6, r2]
 800a488:	2b08      	cmp	r3, #8
 800a48a:	f200 80a9 	bhi.w	800a5e0 <rclc_executor_spin_some.part.0+0x190>
 800a48e:	e8df f003 	tbb	[pc, r3]
 800a492:	8989      	.short	0x8989
 800a494:	057b7b93 	.word	0x057b7b93
 800a498:	0505      	.short	0x0505
 800a49a:	9d          	.byte	0x9d
 800a49b:	00          	.byte	0x00
 800a49c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	6849      	ldr	r1, [r1, #4]
 800a4a4:	f005 fd1a 	bl	800fedc <rcl_wait_set_add_service>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d175      	bne.n	800a598 <rclc_executor_spin_some.part.0+0x148>
 800a4ac:	68ab      	ldr	r3, [r5, #8]
 800a4ae:	3401      	adds	r4, #1
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	d3e1      	bcc.n	800a478 <rclc_executor_spin_some.part.0+0x28>
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	4652      	mov	r2, sl
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f005 fd3d 	bl	800ff38 <rcl_wait>
 800a4be:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 809b 	beq.w	800a5fe <rclc_executor_spin_some.part.0+0x1ae>
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	f040 8089 	bne.w	800a5e0 <rclc_executor_spin_some.part.0+0x190>
 800a4ce:	68ab      	ldr	r3, [r5, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 80ef 	beq.w	800a6b4 <rclc_executor_spin_some.part.0+0x264>
 800a4d6:	2400      	movs	r4, #0
 800a4d8:	4626      	mov	r6, r4
 800a4da:	f240 1991 	movw	r9, #401	; 0x191
 800a4de:	e00a      	b.n	800a4f6 <rclc_executor_spin_some.part.0+0xa6>
 800a4e0:	f7ff fdd2 	bl	800a088 <_rclc_check_for_new_data>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	b110      	cbz	r0, 800a4ee <rclc_executor_spin_some.part.0+0x9e>
 800a4e8:	4548      	cmp	r0, r9
 800a4ea:	f040 8086 	bne.w	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a4ee:	68ab      	ldr	r3, [r5, #8]
 800a4f0:	429e      	cmp	r6, r3
 800a4f2:	f080 80db 	bcs.w	800a6ac <rclc_executor_spin_some.part.0+0x25c>
 800a4f6:	686a      	ldr	r2, [r5, #4]
 800a4f8:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a502:	3601      	adds	r6, #1
 800a504:	f1bc 0f00 	cmp.w	ip, #0
 800a508:	d1ea      	bne.n	800a4e0 <rclc_executor_spin_some.part.0+0x90>
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800a512:	4798      	blx	r3
 800a514:	2800      	cmp	r0, #0
 800a516:	d070      	beq.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a518:	68aa      	ldr	r2, [r5, #8]
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	d06d      	beq.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a51e:	2600      	movs	r6, #0
 800a520:	f240 1991 	movw	r9, #401	; 0x191
 800a524:	e008      	b.n	800a538 <rclc_executor_spin_some.part.0+0xe8>
 800a526:	f7ff fdd5 	bl	800a0d4 <_rclc_take_new_data>
 800a52a:	4604      	mov	r4, r0
 800a52c:	b108      	cbz	r0, 800a532 <rclc_executor_spin_some.part.0+0xe2>
 800a52e:	4548      	cmp	r0, r9
 800a530:	d163      	bne.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a532:	68aa      	ldr	r2, [r5, #8]
 800a534:	4296      	cmp	r6, r2
 800a536:	d208      	bcs.n	800a54a <rclc_executor_spin_some.part.0+0xfa>
 800a538:	6868      	ldr	r0, [r5, #4]
 800a53a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800a53e:	4641      	mov	r1, r8
 800a540:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a544:	3601      	adds	r6, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1ed      	bne.n	800a526 <rclc_executor_spin_some.part.0+0xd6>
 800a54a:	2600      	movs	r6, #0
 800a54c:	b932      	cbnz	r2, 800a55c <rclc_executor_spin_some.part.0+0x10c>
 800a54e:	e054      	b.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a550:	2901      	cmp	r1, #1
 800a552:	d012      	beq.n	800a57a <rclc_executor_spin_some.part.0+0x12a>
 800a554:	3601      	adds	r6, #1
 800a556:	4296      	cmp	r6, r2
 800a558:	d245      	bcs.n	800a5e6 <rclc_executor_spin_some.part.0+0x196>
 800a55a:	2400      	movs	r4, #0
 800a55c:	686b      	ldr	r3, [r5, #4]
 800a55e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800a562:	4618      	mov	r0, r3
 800a564:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800a568:	2900      	cmp	r1, #0
 800a56a:	d046      	beq.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a56c:	7859      	ldrb	r1, [r3, #1]
 800a56e:	2900      	cmp	r1, #0
 800a570:	d1ee      	bne.n	800a550 <rclc_executor_spin_some.part.0+0x100>
 800a572:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0ec      	beq.n	800a554 <rclc_executor_spin_some.part.0+0x104>
 800a57a:	f7ff fe15 	bl	800a1a8 <_rclc_execute.part.0>
 800a57e:	2800      	cmp	r0, #0
 800a580:	f040 8096 	bne.w	800a6b0 <rclc_executor_spin_some.part.0+0x260>
 800a584:	68aa      	ldr	r2, [r5, #8]
 800a586:	e7e5      	b.n	800a554 <rclc_executor_spin_some.part.0+0x104>
 800a588:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a58c:	4640      	mov	r0, r8
 800a58e:	6849      	ldr	r1, [r1, #4]
 800a590:	f005 fc78 	bl	800fe84 <rcl_wait_set_add_client>
 800a594:	2800      	cmp	r0, #0
 800a596:	d089      	beq.n	800a4ac <rclc_executor_spin_some.part.0+0x5c>
 800a598:	9001      	str	r0, [sp, #4]
 800a59a:	f000 f9f1 	bl	800a980 <rcutils_reset_error>
 800a59e:	9801      	ldr	r0, [sp, #4]
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	e020      	b.n	800a5e6 <rclc_executor_spin_some.part.0+0x196>
 800a5a4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	6849      	ldr	r1, [r1, #4]
 800a5ac:	f005 f902 	bl	800f7b4 <rcl_wait_set_add_subscription>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f43f af7b 	beq.w	800a4ac <rclc_executor_spin_some.part.0+0x5c>
 800a5b6:	e7ef      	b.n	800a598 <rclc_executor_spin_some.part.0+0x148>
 800a5b8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a5bc:	4640      	mov	r0, r8
 800a5be:	6849      	ldr	r1, [r1, #4]
 800a5c0:	f005 fc30 	bl	800fe24 <rcl_wait_set_add_timer>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f43f af71 	beq.w	800a4ac <rclc_executor_spin_some.part.0+0x5c>
 800a5ca:	e7e5      	b.n	800a598 <rclc_executor_spin_some.part.0+0x148>
 800a5cc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	6849      	ldr	r1, [r1, #4]
 800a5d4:	f005 fbfa 	bl	800fdcc <rcl_wait_set_add_guard_condition>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	f43f af67 	beq.w	800a4ac <rclc_executor_spin_some.part.0+0x5c>
 800a5de:	e7db      	b.n	800a598 <rclc_executor_spin_some.part.0+0x148>
 800a5e0:	f000 f9ce 	bl	800a980 <rcutils_reset_error>
 800a5e4:	2701      	movs	r7, #1
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	b003      	add	sp, #12
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	f000 f9c7 	bl	800a980 <rcutils_reset_error>
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	b003      	add	sp, #12
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	4627      	mov	r7, r4
 800a5fc:	e7f3      	b.n	800a5e6 <rclc_executor_spin_some.part.0+0x196>
 800a5fe:	68ab      	ldr	r3, [r5, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d05a      	beq.n	800a6ba <rclc_executor_spin_some.part.0+0x26a>
 800a604:	2400      	movs	r4, #0
 800a606:	4626      	mov	r6, r4
 800a608:	f240 1991 	movw	r9, #401	; 0x191
 800a60c:	e008      	b.n	800a620 <rclc_executor_spin_some.part.0+0x1d0>
 800a60e:	f7ff fd3b 	bl	800a088 <_rclc_check_for_new_data>
 800a612:	4604      	mov	r4, r0
 800a614:	b108      	cbz	r0, 800a61a <rclc_executor_spin_some.part.0+0x1ca>
 800a616:	4548      	cmp	r0, r9
 800a618:	d1ef      	bne.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a61a:	68ab      	ldr	r3, [r5, #8]
 800a61c:	429e      	cmp	r6, r3
 800a61e:	d243      	bcs.n	800a6a8 <rclc_executor_spin_some.part.0+0x258>
 800a620:	686a      	ldr	r2, [r5, #4]
 800a622:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a626:	4641      	mov	r1, r8
 800a628:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800a62c:	3601      	adds	r6, #1
 800a62e:	f1bc 0f00 	cmp.w	ip, #0
 800a632:	d1ec      	bne.n	800a60e <rclc_executor_spin_some.part.0+0x1be>
 800a634:	4619      	mov	r1, r3
 800a636:	4610      	mov	r0, r2
 800a638:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800a63c:	4798      	blx	r3
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0db      	beq.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a642:	68ab      	ldr	r3, [r5, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0d8      	beq.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a648:	f04f 0a00 	mov.w	sl, #0
 800a64c:	f240 1691 	movw	r6, #401	; 0x191
 800a650:	f240 2959 	movw	r9, #601	; 0x259
 800a654:	e00b      	b.n	800a66e <rclc_executor_spin_some.part.0+0x21e>
 800a656:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a65a:	b113      	cbz	r3, 800a662 <rclc_executor_spin_some.part.0+0x212>
 800a65c:	f7ff fda4 	bl	800a1a8 <_rclc_execute.part.0>
 800a660:	bb30      	cbnz	r0, 800a6b0 <rclc_executor_spin_some.part.0+0x260>
 800a662:	68ab      	ldr	r3, [r5, #8]
 800a664:	f10a 0a01 	add.w	sl, sl, #1
 800a668:	459a      	cmp	sl, r3
 800a66a:	d2bc      	bcs.n	800a5e6 <rclc_executor_spin_some.part.0+0x196>
 800a66c:	2400      	movs	r4, #0
 800a66e:	6868      	ldr	r0, [r5, #4]
 800a670:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a674:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a678:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0bc      	beq.n	800a5fa <rclc_executor_spin_some.part.0+0x1aa>
 800a680:	4641      	mov	r1, r8
 800a682:	f7ff fd27 	bl	800a0d4 <_rclc_take_new_data>
 800a686:	b118      	cbz	r0, 800a690 <rclc_executor_spin_some.part.0+0x240>
 800a688:	42b0      	cmp	r0, r6
 800a68a:	d001      	beq.n	800a690 <rclc_executor_spin_some.part.0+0x240>
 800a68c:	4548      	cmp	r0, r9
 800a68e:	d10f      	bne.n	800a6b0 <rclc_executor_spin_some.part.0+0x260>
 800a690:	6868      	ldr	r0, [r5, #4]
 800a692:	eb10 000b 	adds.w	r0, r0, fp
 800a696:	d005      	beq.n	800a6a4 <rclc_executor_spin_some.part.0+0x254>
 800a698:	7843      	ldrb	r3, [r0, #1]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0db      	beq.n	800a656 <rclc_executor_spin_some.part.0+0x206>
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d1df      	bne.n	800a662 <rclc_executor_spin_some.part.0+0x212>
 800a6a2:	e7db      	b.n	800a65c <rclc_executor_spin_some.part.0+0x20c>
 800a6a4:	270b      	movs	r7, #11
 800a6a6:	e79e      	b.n	800a5e6 <rclc_executor_spin_some.part.0+0x196>
 800a6a8:	686a      	ldr	r2, [r5, #4]
 800a6aa:	e7c3      	b.n	800a634 <rclc_executor_spin_some.part.0+0x1e4>
 800a6ac:	686a      	ldr	r2, [r5, #4]
 800a6ae:	e72c      	b.n	800a50a <rclc_executor_spin_some.part.0+0xba>
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	e798      	b.n	800a5e6 <rclc_executor_spin_some.part.0+0x196>
 800a6b4:	686a      	ldr	r2, [r5, #4]
 800a6b6:	461c      	mov	r4, r3
 800a6b8:	e727      	b.n	800a50a <rclc_executor_spin_some.part.0+0xba>
 800a6ba:	686a      	ldr	r2, [r5, #4]
 800a6bc:	461c      	mov	r4, r3
 800a6be:	e7b9      	b.n	800a634 <rclc_executor_spin_some.part.0+0x1e4>

0800a6c0 <rclc_executor_spin>:
 800a6c0:	b1a8      	cbz	r0, 800a6ee <rclc_executor_spin+0x2e>
 800a6c2:	b5d0      	push	{r4, r6, r7, lr}
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	6820      	ldr	r0, [r4, #0]
 800a6c8:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800a6cc:	f003 fd70 	bl	800e1b0 <rcl_context_is_valid>
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	463b      	mov	r3, r7
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	b129      	cbz	r1, 800a6e6 <rclc_executor_spin+0x26>
 800a6da:	f7ff feb9 	bl	800a450 <rclc_executor_spin_some.part.0>
 800a6de:	f030 0302 	bics.w	r3, r0, #2
 800a6e2:	d0f0      	beq.n	800a6c6 <rclc_executor_spin+0x6>
 800a6e4:	bdd0      	pop	{r4, r6, r7, pc}
 800a6e6:	f000 f94b 	bl	800a980 <rcutils_reset_error>
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	bdd0      	pop	{r4, r6, r7, pc}
 800a6ee:	200b      	movs	r0, #11
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop

0800a6f4 <rclc_executor_handle_counters_zero_init>:
 800a6f4:	b140      	cbz	r0, 800a708 <rclc_executor_handle_counters_zero_init+0x14>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6003      	str	r3, [r0, #0]
 800a6fa:	6043      	str	r3, [r0, #4]
 800a6fc:	6083      	str	r3, [r0, #8]
 800a6fe:	60c3      	str	r3, [r0, #12]
 800a700:	6103      	str	r3, [r0, #16]
 800a702:	6143      	str	r3, [r0, #20]
 800a704:	4618      	mov	r0, r3
 800a706:	4770      	bx	lr
 800a708:	200b      	movs	r0, #11
 800a70a:	4770      	bx	lr

0800a70c <rclc_executor_handle_init>:
 800a70c:	b178      	cbz	r0, 800a72e <rclc_executor_handle_init+0x22>
 800a70e:	b430      	push	{r4, r5}
 800a710:	4603      	mov	r3, r0
 800a712:	2209      	movs	r2, #9
 800a714:	2000      	movs	r0, #0
 800a716:	2400      	movs	r4, #0
 800a718:	2500      	movs	r5, #0
 800a71a:	801a      	strh	r2, [r3, #0]
 800a71c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800a720:	bc30      	pop	{r4, r5}
 800a722:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800a726:	6359      	str	r1, [r3, #52]	; 0x34
 800a728:	6318      	str	r0, [r3, #48]	; 0x30
 800a72a:	8718      	strh	r0, [r3, #56]	; 0x38
 800a72c:	4770      	bx	lr
 800a72e:	200b      	movs	r0, #11
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop

0800a734 <rclc_support_init>:
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	b086      	sub	sp, #24
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d042      	beq.n	800a7c4 <rclc_support_init+0x90>
 800a73e:	461c      	mov	r4, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d03f      	beq.n	800a7c4 <rclc_support_init+0x90>
 800a744:	460f      	mov	r7, r1
 800a746:	4690      	mov	r8, r2
 800a748:	4606      	mov	r6, r0
 800a74a:	f004 f811 	bl	800e770 <rcl_get_zero_initialized_init_options>
 800a74e:	4603      	mov	r3, r0
 800a750:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800a754:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	a805      	add	r0, sp, #20
 800a75c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a760:	f004 f808 	bl	800e774 <rcl_init_options_init>
 800a764:	4605      	mov	r5, r0
 800a766:	bb38      	cbnz	r0, 800a7b8 <rclc_support_init+0x84>
 800a768:	f004 f802 	bl	800e770 <rcl_get_zero_initialized_init_options>
 800a76c:	4631      	mov	r1, r6
 800a76e:	6030      	str	r0, [r6, #0]
 800a770:	a805      	add	r0, sp, #20
 800a772:	f004 f875 	bl	800e860 <rcl_init_options_copy>
 800a776:	4605      	mov	r5, r0
 800a778:	b9c0      	cbnz	r0, 800a7ac <rclc_support_init+0x78>
 800a77a:	ad02      	add	r5, sp, #8
 800a77c:	4628      	mov	r0, r5
 800a77e:	f003 fd0d 	bl	800e19c <rcl_get_zero_initialized_context>
 800a782:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a786:	1d33      	adds	r3, r6, #4
 800a788:	e883 0003 	stmia.w	r3, {r0, r1}
 800a78c:	4632      	mov	r2, r6
 800a78e:	4641      	mov	r1, r8
 800a790:	4638      	mov	r0, r7
 800a792:	f003 fee3 	bl	800e55c <rcl_init>
 800a796:	4605      	mov	r5, r0
 800a798:	b940      	cbnz	r0, 800a7ac <rclc_support_init+0x78>
 800a79a:	60f4      	str	r4, [r6, #12]
 800a79c:	4622      	mov	r2, r4
 800a79e:	f106 0110 	add.w	r1, r6, #16
 800a7a2:	2003      	movs	r0, #3
 800a7a4:	f004 fc68 	bl	800f078 <rcl_clock_init>
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	b108      	cbz	r0, 800a7b0 <rclc_support_init+0x7c>
 800a7ac:	f000 f8e8 	bl	800a980 <rcutils_reset_error>
 800a7b0:	a805      	add	r0, sp, #20
 800a7b2:	f004 f831 	bl	800e818 <rcl_init_options_fini>
 800a7b6:	b108      	cbz	r0, 800a7bc <rclc_support_init+0x88>
 800a7b8:	f000 f8e2 	bl	800a980 <rcutils_reset_error>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	b006      	add	sp, #24
 800a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c4:	250b      	movs	r5, #11
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	b006      	add	sp, #24
 800a7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ce:	bf00      	nop

0800a7d0 <rclc_node_init_default>:
 800a7d0:	b3b8      	cbz	r0, 800a842 <rclc_node_init_default+0x72>
 800a7d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d6:	460d      	mov	r5, r1
 800a7d8:	b08f      	sub	sp, #60	; 0x3c
 800a7da:	b329      	cbz	r1, 800a828 <rclc_node_init_default+0x58>
 800a7dc:	4616      	mov	r6, r2
 800a7de:	b31a      	cbz	r2, 800a828 <rclc_node_init_default+0x58>
 800a7e0:	461f      	mov	r7, r3
 800a7e2:	b30b      	cbz	r3, 800a828 <rclc_node_init_default+0x58>
 800a7e4:	f10d 0810 	add.w	r8, sp, #16
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	f004 f900 	bl	800e9f0 <rcl_get_zero_initialized_node>
 800a7f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a7f4:	f10d 091c 	add.w	r9, sp, #28
 800a7f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800a7fc:	4648      	mov	r0, r9
 800a7fe:	f004 faa1 	bl	800ed44 <rcl_node_get_default_options>
 800a802:	4640      	mov	r0, r8
 800a804:	f004 f8f4 	bl	800e9f0 <rcl_get_zero_initialized_node>
 800a808:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a80c:	1d3b      	adds	r3, r7, #4
 800a80e:	f8cd 9000 	str.w	r9, [sp]
 800a812:	4632      	mov	r2, r6
 800a814:	e884 0003 	stmia.w	r4, {r0, r1}
 800a818:	4629      	mov	r1, r5
 800a81a:	4620      	mov	r0, r4
 800a81c:	f004 f8f2 	bl	800ea04 <rcl_node_init>
 800a820:	b930      	cbnz	r0, 800a830 <rclc_node_init_default+0x60>
 800a822:	b00f      	add	sp, #60	; 0x3c
 800a824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a828:	200b      	movs	r0, #11
 800a82a:	b00f      	add	sp, #60	; 0x3c
 800a82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a830:	9003      	str	r0, [sp, #12]
 800a832:	f000 f8a5 	bl	800a980 <rcutils_reset_error>
 800a836:	f000 f8a3 	bl	800a980 <rcutils_reset_error>
 800a83a:	9803      	ldr	r0, [sp, #12]
 800a83c:	b00f      	add	sp, #60	; 0x3c
 800a83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a842:	200b      	movs	r0, #11
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop

0800a848 <rclc_subscription_init_default>:
 800a848:	b368      	cbz	r0, 800a8a6 <rclc_subscription_init_default+0x5e>
 800a84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	460d      	mov	r5, r1
 800a850:	b0a0      	sub	sp, #128	; 0x80
 800a852:	b321      	cbz	r1, 800a89e <rclc_subscription_init_default+0x56>
 800a854:	4616      	mov	r6, r2
 800a856:	b312      	cbz	r2, 800a89e <rclc_subscription_init_default+0x56>
 800a858:	461f      	mov	r7, r3
 800a85a:	b303      	cbz	r3, 800a89e <rclc_subscription_init_default+0x56>
 800a85c:	4604      	mov	r4, r0
 800a85e:	f7ff fa6d 	bl	8009d3c <rcl_get_zero_initialized_subscription>
 800a862:	f10d 0810 	add.w	r8, sp, #16
 800a866:	6020      	str	r0, [r4, #0]
 800a868:	4640      	mov	r0, r8
 800a86a:	f7ff fb8f 	bl	8009f8c <rcl_subscription_get_default_options>
 800a86e:	490f      	ldr	r1, [pc, #60]	; (800a8ac <rclc_subscription_init_default+0x64>)
 800a870:	2250      	movs	r2, #80	; 0x50
 800a872:	4640      	mov	r0, r8
 800a874:	f008 fe22 	bl	80134bc <memcpy>
 800a878:	f8cd 8000 	str.w	r8, [sp]
 800a87c:	463b      	mov	r3, r7
 800a87e:	4632      	mov	r2, r6
 800a880:	4629      	mov	r1, r5
 800a882:	4620      	mov	r0, r4
 800a884:	f7ff fa60 	bl	8009d48 <rcl_subscription_init>
 800a888:	b910      	cbnz	r0, 800a890 <rclc_subscription_init_default+0x48>
 800a88a:	b020      	add	sp, #128	; 0x80
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	9003      	str	r0, [sp, #12]
 800a892:	f000 f875 	bl	800a980 <rcutils_reset_error>
 800a896:	9803      	ldr	r0, [sp, #12]
 800a898:	b020      	add	sp, #128	; 0x80
 800a89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89e:	200b      	movs	r0, #11
 800a8a0:	b020      	add	sp, #128	; 0x80
 800a8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a6:	200b      	movs	r0, #11
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	08014e78 	.word	0x08014e78

0800a8b0 <__default_zero_allocate>:
 800a8b0:	f008 bd7a 	b.w	80133a8 <calloc>

0800a8b4 <__default_reallocate>:
 800a8b4:	f008 bfac 	b.w	8013810 <realloc>

0800a8b8 <__default_deallocate>:
 800a8b8:	f008 bdf8 	b.w	80134ac <free>

0800a8bc <__default_allocate>:
 800a8bc:	f008 bdee 	b.w	801349c <malloc>

0800a8c0 <rcutils_get_zero_initialized_allocator>:
 800a8c0:	b470      	push	{r4, r5, r6}
 800a8c2:	4d05      	ldr	r5, [pc, #20]	; (800a8d8 <rcutils_get_zero_initialized_allocator+0x18>)
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8c8:	4634      	mov	r4, r6
 800a8ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	bc70      	pop	{r4, r5, r6}
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	08014ec8 	.word	0x08014ec8

0800a8dc <rcutils_set_default_allocator>:
 800a8dc:	b1a0      	cbz	r0, 800a908 <rcutils_set_default_allocator+0x2c>
 800a8de:	6801      	ldr	r1, [r0, #0]
 800a8e0:	b199      	cbz	r1, 800a90a <rcutils_set_default_allocator+0x2e>
 800a8e2:	b430      	push	{r4, r5}
 800a8e4:	6844      	ldr	r4, [r0, #4]
 800a8e6:	b194      	cbz	r4, 800a90e <rcutils_set_default_allocator+0x32>
 800a8e8:	68c5      	ldr	r5, [r0, #12]
 800a8ea:	b15d      	cbz	r5, 800a904 <rcutils_set_default_allocator+0x28>
 800a8ec:	6883      	ldr	r3, [r0, #8]
 800a8ee:	b18b      	cbz	r3, 800a914 <rcutils_set_default_allocator+0x38>
 800a8f0:	4a09      	ldr	r2, [pc, #36]	; (800a918 <rcutils_set_default_allocator+0x3c>)
 800a8f2:	e9c2 1400 	strd	r1, r4, [r2]
 800a8f6:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	6110      	str	r0, [r2, #16]
 800a8fe:	2001      	movs	r0, #1
 800a900:	bc30      	pop	{r4, r5}
 800a902:	4770      	bx	lr
 800a904:	4628      	mov	r0, r5
 800a906:	e7fb      	b.n	800a900 <rcutils_set_default_allocator+0x24>
 800a908:	4770      	bx	lr
 800a90a:	4608      	mov	r0, r1
 800a90c:	4770      	bx	lr
 800a90e:	4620      	mov	r0, r4
 800a910:	bc30      	pop	{r4, r5}
 800a912:	4770      	bx	lr
 800a914:	4618      	mov	r0, r3
 800a916:	e7f3      	b.n	800a900 <rcutils_set_default_allocator+0x24>
 800a918:	20000064 	.word	0x20000064

0800a91c <rcutils_get_default_allocator>:
 800a91c:	b470      	push	{r4, r5, r6}
 800a91e:	4d05      	ldr	r5, [pc, #20]	; (800a934 <rcutils_get_default_allocator+0x18>)
 800a920:	4606      	mov	r6, r0
 800a922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a924:	4634      	mov	r4, r6
 800a926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	4630      	mov	r0, r6
 800a92e:	bc70      	pop	{r4, r5, r6}
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	20000064 	.word	0x20000064

0800a938 <rcutils_allocator_is_valid>:
 800a938:	b158      	cbz	r0, 800a952 <rcutils_allocator_is_valid+0x1a>
 800a93a:	6803      	ldr	r3, [r0, #0]
 800a93c:	b143      	cbz	r3, 800a950 <rcutils_allocator_is_valid+0x18>
 800a93e:	6843      	ldr	r3, [r0, #4]
 800a940:	b133      	cbz	r3, 800a950 <rcutils_allocator_is_valid+0x18>
 800a942:	68c3      	ldr	r3, [r0, #12]
 800a944:	b123      	cbz	r3, 800a950 <rcutils_allocator_is_valid+0x18>
 800a946:	6880      	ldr	r0, [r0, #8]
 800a948:	3800      	subs	r0, #0
 800a94a:	bf18      	it	ne
 800a94c:	2001      	movne	r0, #1
 800a94e:	4770      	bx	lr
 800a950:	4618      	mov	r0, r3
 800a952:	4770      	bx	lr

0800a954 <rcutils_get_error_string>:
 800a954:	4b06      	ldr	r3, [pc, #24]	; (800a970 <rcutils_get_error_string+0x1c>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	b13b      	cbz	r3, 800a96a <rcutils_get_error_string+0x16>
 800a95a:	4b06      	ldr	r3, [pc, #24]	; (800a974 <rcutils_get_error_string+0x20>)
 800a95c:	781a      	ldrb	r2, [r3, #0]
 800a95e:	b90a      	cbnz	r2, 800a964 <rcutils_get_error_string+0x10>
 800a960:	2201      	movs	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	4b04      	ldr	r3, [pc, #16]	; (800a978 <rcutils_get_error_string+0x24>)
 800a966:	7818      	ldrb	r0, [r3, #0]
 800a968:	4770      	bx	lr
 800a96a:	4b04      	ldr	r3, [pc, #16]	; (800a97c <rcutils_get_error_string+0x28>)
 800a96c:	7818      	ldrb	r0, [r3, #0]
 800a96e:	4770      	bx	lr
 800a970:	200090f8 	.word	0x200090f8
 800a974:	200090f9 	.word	0x200090f9
 800a978:	20009220 	.word	0x20009220
 800a97c:	08014edc 	.word	0x08014edc

0800a980 <rcutils_reset_error>:
 800a980:	b4d0      	push	{r4, r6, r7}
 800a982:	4a07      	ldr	r2, [pc, #28]	; (800a9a0 <rcutils_reset_error+0x20>)
 800a984:	4807      	ldr	r0, [pc, #28]	; (800a9a4 <rcutils_reset_error+0x24>)
 800a986:	4c08      	ldr	r4, [pc, #32]	; (800a9a8 <rcutils_reset_error+0x28>)
 800a988:	4908      	ldr	r1, [pc, #32]	; (800a9ac <rcutils_reset_error+0x2c>)
 800a98a:	2300      	movs	r3, #0
 800a98c:	2600      	movs	r6, #0
 800a98e:	2700      	movs	r7, #0
 800a990:	8013      	strh	r3, [r2, #0]
 800a992:	7003      	strb	r3, [r0, #0]
 800a994:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800a998:	7023      	strb	r3, [r4, #0]
 800a99a:	700b      	strb	r3, [r1, #0]
 800a99c:	bcd0      	pop	{r4, r6, r7}
 800a99e:	4770      	bx	lr
 800a9a0:	20009228 	.word	0x20009228
 800a9a4:	20009220 	.word	0x20009220
 800a9a8:	200090f9 	.word	0x200090f9
 800a9ac:	200090f8 	.word	0x200090f8

0800a9b0 <rcutils_get_zero_initialized_string_map>:
 800a9b0:	4b01      	ldr	r3, [pc, #4]	; (800a9b8 <rcutils_get_zero_initialized_string_map+0x8>)
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	6018      	str	r0, [r3, #0]
 800a9b6:	4770      	bx	lr
 800a9b8:	200090fc 	.word	0x200090fc

0800a9bc <rcutils_string_map_reserve>:
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d061      	beq.n	800aa84 <rcutils_string_map_reserve+0xc8>
 800a9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	6805      	ldr	r5, [r0, #0]
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	b12d      	cbz	r5, 800a9da <rcutils_string_map_reserve+0x1e>
 800a9ce:	68eb      	ldr	r3, [r5, #12]
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d906      	bls.n	800a9e2 <rcutils_string_map_reserve+0x26>
 800a9d4:	461c      	mov	r4, r3
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	d1f9      	bne.n	800a9ce <rcutils_string_map_reserve+0x12>
 800a9da:	201f      	movs	r0, #31
 800a9dc:	b003      	add	sp, #12
 800a9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	68ab      	ldr	r3, [r5, #8]
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	d049      	beq.n	800aa7c <rcutils_string_map_reserve+0xc0>
 800a9e8:	6a2f      	ldr	r7, [r5, #32]
 800a9ea:	2c00      	cmp	r4, #0
 800a9ec:	d035      	beq.n	800aa5a <rcutils_string_map_reserve+0x9e>
 800a9ee:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a9f2:	d245      	bcs.n	800aa80 <rcutils_string_map_reserve+0xc4>
 800a9f4:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800a9f8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800a9fc:	6828      	ldr	r0, [r5, #0]
 800a9fe:	4641      	mov	r1, r8
 800aa00:	463a      	mov	r2, r7
 800aa02:	47c8      	blx	r9
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d03b      	beq.n	800aa80 <rcutils_string_map_reserve+0xc4>
 800aa08:	6833      	ldr	r3, [r6, #0]
 800aa0a:	463a      	mov	r2, r7
 800aa0c:	6018      	str	r0, [r3, #0]
 800aa0e:	4641      	mov	r1, r8
 800aa10:	6858      	ldr	r0, [r3, #4]
 800aa12:	47c8      	blx	r9
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d033      	beq.n	800aa80 <rcutils_string_map_reserve+0xc4>
 800aa18:	6835      	ldr	r5, [r6, #0]
 800aa1a:	68ab      	ldr	r3, [r5, #8]
 800aa1c:	6068      	str	r0, [r5, #4]
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	d227      	bcs.n	800aa72 <rcutils_string_map_reserve+0xb6>
 800aa22:	682a      	ldr	r2, [r5, #0]
 800aa24:	eb00 0108 	add.w	r1, r0, r8
 800aa28:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800aa2c:	428f      	cmp	r7, r1
 800aa2e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800aa32:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800aa36:	d203      	bcs.n	800aa40 <rcutils_string_map_reserve+0x84>
 800aa38:	eb02 0108 	add.w	r1, r2, r8
 800aa3c:	428e      	cmp	r6, r1
 800aa3e:	d323      	bcc.n	800aa88 <rcutils_string_map_reserve+0xcc>
 800aa40:	1ae3      	subs	r3, r4, r3
 800aa42:	009a      	lsls	r2, r3, #2
 800aa44:	4638      	mov	r0, r7
 800aa46:	2100      	movs	r1, #0
 800aa48:	9201      	str	r2, [sp, #4]
 800aa4a:	f008 fd5f 	bl	801350c <memset>
 800aa4e:	9a01      	ldr	r2, [sp, #4]
 800aa50:	4630      	mov	r0, r6
 800aa52:	2100      	movs	r1, #0
 800aa54:	f008 fd5a 	bl	801350c <memset>
 800aa58:	e00b      	b.n	800aa72 <rcutils_string_map_reserve+0xb6>
 800aa5a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800aa5e:	6828      	ldr	r0, [r5, #0]
 800aa60:	4639      	mov	r1, r7
 800aa62:	47c0      	blx	r8
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	4639      	mov	r1, r7
 800aa68:	6858      	ldr	r0, [r3, #4]
 800aa6a:	601c      	str	r4, [r3, #0]
 800aa6c:	47c0      	blx	r8
 800aa6e:	6835      	ldr	r5, [r6, #0]
 800aa70:	606c      	str	r4, [r5, #4]
 800aa72:	2000      	movs	r0, #0
 800aa74:	60ac      	str	r4, [r5, #8]
 800aa76:	b003      	add	sp, #12
 800aa78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e7ad      	b.n	800a9dc <rcutils_string_map_reserve+0x20>
 800aa80:	200a      	movs	r0, #10
 800aa82:	e7ab      	b.n	800a9dc <rcutils_string_map_reserve+0x20>
 800aa84:	200b      	movs	r0, #11
 800aa86:	4770      	bx	lr
 800aa88:	1f13      	subs	r3, r2, #4
 800aa8a:	f1ac 0c04 	sub.w	ip, ip, #4
 800aa8e:	4498      	add	r8, r3
 800aa90:	4460      	add	r0, ip
 800aa92:	4462      	add	r2, ip
 800aa94:	2300      	movs	r3, #0
 800aa96:	f842 3f04 	str.w	r3, [r2, #4]!
 800aa9a:	4542      	cmp	r2, r8
 800aa9c:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaa0:	d1f9      	bne.n	800aa96 <rcutils_string_map_reserve+0xda>
 800aaa2:	e7e6      	b.n	800aa72 <rcutils_string_map_reserve+0xb6>

0800aaa4 <rcutils_string_map_init>:
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	a906      	add	r1, sp, #24
 800aaac:	e881 000c 	stmia.w	r1, {r2, r3}
 800aab0:	b380      	cbz	r0, 800ab14 <rcutils_string_map_init+0x70>
 800aab2:	6807      	ldr	r7, [r0, #0]
 800aab4:	4604      	mov	r4, r0
 800aab6:	b12f      	cbz	r7, 800aac4 <rcutils_string_map_init+0x20>
 800aab8:	251e      	movs	r5, #30
 800aaba:	4628      	mov	r0, r5
 800aabc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aac0:	b002      	add	sp, #8
 800aac2:	4770      	bx	lr
 800aac4:	a806      	add	r0, sp, #24
 800aac6:	f7ff ff37 	bl	800a938 <rcutils_allocator_is_valid>
 800aaca:	b318      	cbz	r0, 800ab14 <rcutils_string_map_init+0x70>
 800aacc:	9b06      	ldr	r3, [sp, #24]
 800aace:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aad0:	2024      	movs	r0, #36	; 0x24
 800aad2:	4798      	blx	r3
 800aad4:	4605      	mov	r5, r0
 800aad6:	6020      	str	r0, [r4, #0]
 800aad8:	b310      	cbz	r0, 800ab20 <rcutils_string_map_init+0x7c>
 800aada:	f10d 0e18 	add.w	lr, sp, #24
 800aade:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aae2:	f105 0c10 	add.w	ip, r5, #16
 800aae6:	e9c5 7700 	strd	r7, r7, [r5]
 800aaea:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800aaee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aaf2:	f8de 3000 	ldr.w	r3, [lr]
 800aaf6:	f8cc 3000 	str.w	r3, [ip]
 800aafa:	4631      	mov	r1, r6
 800aafc:	4620      	mov	r0, r4
 800aafe:	f7ff ff5d 	bl	800a9bc <rcutils_string_map_reserve>
 800ab02:	4605      	mov	r5, r0
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d0d8      	beq.n	800aaba <rcutils_string_map_init+0x16>
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	4798      	blx	r3
 800ab10:	6027      	str	r7, [r4, #0]
 800ab12:	e7d2      	b.n	800aaba <rcutils_string_map_init+0x16>
 800ab14:	250b      	movs	r5, #11
 800ab16:	4628      	mov	r0, r5
 800ab18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab1c:	b002      	add	sp, #8
 800ab1e:	4770      	bx	lr
 800ab20:	250a      	movs	r5, #10
 800ab22:	e7ca      	b.n	800aaba <rcutils_string_map_init+0x16>

0800ab24 <rcutils_string_map_fini>:
 800ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d039      	beq.n	800aba2 <rcutils_string_map_fini+0x7e>
 800ab2e:	6804      	ldr	r4, [r0, #0]
 800ab30:	4606      	mov	r6, r0
 800ab32:	2c00      	cmp	r4, #0
 800ab34:	d031      	beq.n	800ab9a <rcutils_string_map_fini+0x76>
 800ab36:	68a3      	ldr	r3, [r4, #8]
 800ab38:	b323      	cbz	r3, 800ab84 <rcutils_string_map_fini+0x60>
 800ab3a:	2500      	movs	r5, #0
 800ab3c:	6822      	ldr	r2, [r4, #0]
 800ab3e:	46a8      	mov	r8, r5
 800ab40:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ab44:	b1d8      	cbz	r0, 800ab7e <rcutils_string_map_fini+0x5a>
 800ab46:	6a21      	ldr	r1, [r4, #32]
 800ab48:	6967      	ldr	r7, [r4, #20]
 800ab4a:	9101      	str	r1, [sp, #4]
 800ab4c:	47b8      	blx	r7
 800ab4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab52:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ab56:	9901      	ldr	r1, [sp, #4]
 800ab58:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab5c:	47b8      	blx	r7
 800ab5e:	68e3      	ldr	r3, [r4, #12]
 800ab60:	6862      	ldr	r2, [r4, #4]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ab68:	60e3      	str	r3, [r4, #12]
 800ab6a:	6834      	ldr	r4, [r6, #0]
 800ab6c:	68a3      	ldr	r3, [r4, #8]
 800ab6e:	3501      	adds	r5, #1
 800ab70:	429d      	cmp	r5, r3
 800ab72:	d207      	bcs.n	800ab84 <rcutils_string_map_fini+0x60>
 800ab74:	6822      	ldr	r2, [r4, #0]
 800ab76:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d1e3      	bne.n	800ab46 <rcutils_string_map_fini+0x22>
 800ab7e:	3501      	adds	r5, #1
 800ab80:	429d      	cmp	r5, r3
 800ab82:	d3dd      	bcc.n	800ab40 <rcutils_string_map_fini+0x1c>
 800ab84:	2100      	movs	r1, #0
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff ff18 	bl	800a9bc <rcutils_string_map_reserve>
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	b920      	cbnz	r0, 800ab9a <rcutils_string_map_fini+0x76>
 800ab90:	6830      	ldr	r0, [r6, #0]
 800ab92:	6943      	ldr	r3, [r0, #20]
 800ab94:	6a01      	ldr	r1, [r0, #32]
 800ab96:	4798      	blx	r3
 800ab98:	6034      	str	r4, [r6, #0]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	b002      	add	sp, #8
 800ab9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba2:	240b      	movs	r4, #11
 800aba4:	4620      	mov	r0, r4
 800aba6:	b002      	add	sp, #8
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abac <rcutils_string_map_getn>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	b082      	sub	sp, #8
 800abb2:	b308      	cbz	r0, 800abf8 <rcutils_string_map_getn+0x4c>
 800abb4:	6804      	ldr	r4, [r0, #0]
 800abb6:	b304      	cbz	r4, 800abfa <rcutils_string_map_getn+0x4e>
 800abb8:	460d      	mov	r5, r1
 800abba:	b1e9      	cbz	r1, 800abf8 <rcutils_string_map_getn+0x4c>
 800abbc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800abc0:	6827      	ldr	r7, [r4, #0]
 800abc2:	f1b9 0f00 	cmp.w	r9, #0
 800abc6:	d017      	beq.n	800abf8 <rcutils_string_map_getn+0x4c>
 800abc8:	4690      	mov	r8, r2
 800abca:	3f04      	subs	r7, #4
 800abcc:	2600      	movs	r6, #0
 800abce:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800abd2:	9101      	str	r1, [sp, #4]
 800abd4:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800abd8:	4608      	mov	r0, r1
 800abda:	3601      	adds	r6, #1
 800abdc:	b151      	cbz	r1, 800abf4 <rcutils_string_map_getn+0x48>
 800abde:	f7f5 fb21 	bl	8000224 <strlen>
 800abe2:	4540      	cmp	r0, r8
 800abe4:	4602      	mov	r2, r0
 800abe6:	9901      	ldr	r1, [sp, #4]
 800abe8:	bf38      	it	cc
 800abea:	4642      	movcc	r2, r8
 800abec:	4628      	mov	r0, r5
 800abee:	f008 fe70 	bl	80138d2 <strncmp>
 800abf2:	b130      	cbz	r0, 800ac02 <rcutils_string_map_getn+0x56>
 800abf4:	45b1      	cmp	r9, r6
 800abf6:	d1ea      	bne.n	800abce <rcutils_string_map_getn+0x22>
 800abf8:	2400      	movs	r4, #0
 800abfa:	4620      	mov	r0, r4
 800abfc:	b002      	add	sp, #8
 800abfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac02:	6863      	ldr	r3, [r4, #4]
 800ac04:	f853 400a 	ldr.w	r4, [r3, sl]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	b002      	add	sp, #8
 800ac0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ac10 <rcutils_system_time_now>:
 800ac10:	b310      	cbz	r0, 800ac58 <rcutils_system_time_now+0x48>
 800ac12:	b570      	push	{r4, r5, r6, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	4669      	mov	r1, sp
 800ac18:	4604      	mov	r4, r0
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	f7f6 fc6c 	bl	80014f8 <clock_gettime>
 800ac20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f171 0300 	sbcs.w	r3, r1, #0
 800ac2a:	db12      	blt.n	800ac52 <rcutils_system_time_now+0x42>
 800ac2c:	9d02      	ldr	r5, [sp, #8]
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	db0c      	blt.n	800ac4c <rcutils_system_time_now+0x3c>
 800ac32:	4e0a      	ldr	r6, [pc, #40]	; (800ac5c <rcutils_system_time_now+0x4c>)
 800ac34:	fba0 2306 	umull	r2, r3, r0, r6
 800ac38:	1952      	adds	r2, r2, r5
 800ac3a:	fb06 3301 	mla	r3, r6, r1, r3
 800ac3e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ac42:	2000      	movs	r0, #0
 800ac44:	e9c4 2300 	strd	r2, r3, [r4]
 800ac48:	b004      	add	sp, #16
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	ea50 0301 	orrs.w	r3, r0, r1
 800ac50:	d1ef      	bne.n	800ac32 <rcutils_system_time_now+0x22>
 800ac52:	2002      	movs	r0, #2
 800ac54:	b004      	add	sp, #16
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	200b      	movs	r0, #11
 800ac5a:	4770      	bx	lr
 800ac5c:	3b9aca00 	.word	0x3b9aca00

0800ac60 <rcutils_steady_time_now>:
 800ac60:	b310      	cbz	r0, 800aca8 <rcutils_steady_time_now+0x48>
 800ac62:	b570      	push	{r4, r5, r6, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	4669      	mov	r1, sp
 800ac68:	4604      	mov	r4, r0
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f7f6 fc44 	bl	80014f8 <clock_gettime>
 800ac70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f171 0300 	sbcs.w	r3, r1, #0
 800ac7a:	db12      	blt.n	800aca2 <rcutils_steady_time_now+0x42>
 800ac7c:	9d02      	ldr	r5, [sp, #8]
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	db0c      	blt.n	800ac9c <rcutils_steady_time_now+0x3c>
 800ac82:	4e0a      	ldr	r6, [pc, #40]	; (800acac <rcutils_steady_time_now+0x4c>)
 800ac84:	fba0 2306 	umull	r2, r3, r0, r6
 800ac88:	1952      	adds	r2, r2, r5
 800ac8a:	fb06 3301 	mla	r3, r6, r1, r3
 800ac8e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ac92:	2000      	movs	r0, #0
 800ac94:	e9c4 2300 	strd	r2, r3, [r4]
 800ac98:	b004      	add	sp, #16
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	ea50 0301 	orrs.w	r3, r0, r1
 800aca0:	d1ef      	bne.n	800ac82 <rcutils_steady_time_now+0x22>
 800aca2:	2002      	movs	r0, #2
 800aca4:	b004      	add	sp, #16
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	200b      	movs	r0, #11
 800acaa:	4770      	bx	lr
 800acac:	3b9aca00 	.word	0x3b9aca00

0800acb0 <rmw_get_default_subscription_options>:
 800acb0:	2200      	movs	r2, #0
 800acb2:	6002      	str	r2, [r0, #0]
 800acb4:	7102      	strb	r2, [r0, #4]
 800acb6:	4770      	bx	lr

0800acb8 <rmw_get_zero_initialized_message_info>:
 800acb8:	b470      	push	{r4, r5, r6}
 800acba:	4d07      	ldr	r5, [pc, #28]	; (800acd8 <rmw_get_zero_initialized_message_info+0x20>)
 800acbc:	4606      	mov	r6, r0
 800acbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acc0:	4634      	mov	r4, r6
 800acc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800accc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acd0:	4630      	mov	r0, r6
 800acd2:	bc70      	pop	{r4, r5, r6}
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	08014c90 	.word	0x08014c90

0800acdc <rmw_validate_full_topic_name>:
 800acdc:	2800      	cmp	r0, #0
 800acde:	d062      	beq.n	800ada6 <rmw_validate_full_topic_name+0xca>
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	460d      	mov	r5, r1
 800ace6:	2900      	cmp	r1, #0
 800ace8:	d05f      	beq.n	800adaa <rmw_validate_full_topic_name+0xce>
 800acea:	4616      	mov	r6, r2
 800acec:	4604      	mov	r4, r0
 800acee:	f7f5 fa99 	bl	8000224 <strlen>
 800acf2:	b148      	cbz	r0, 800ad08 <rmw_validate_full_topic_name+0x2c>
 800acf4:	7823      	ldrb	r3, [r4, #0]
 800acf6:	2b2f      	cmp	r3, #47	; 0x2f
 800acf8:	d00d      	beq.n	800ad16 <rmw_validate_full_topic_name+0x3a>
 800acfa:	2302      	movs	r3, #2
 800acfc:	602b      	str	r3, [r5, #0]
 800acfe:	b13e      	cbz	r6, 800ad10 <rmw_validate_full_topic_name+0x34>
 800ad00:	2000      	movs	r0, #0
 800ad02:	6030      	str	r0, [r6, #0]
 800ad04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad08:	2301      	movs	r3, #1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	2e00      	cmp	r6, #0
 800ad0e:	d1f7      	bne.n	800ad00 <rmw_validate_full_topic_name+0x24>
 800ad10:	2000      	movs	r0, #0
 800ad12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad16:	1e47      	subs	r7, r0, #1
 800ad18:	5de3      	ldrb	r3, [r4, r7]
 800ad1a:	2b2f      	cmp	r3, #47	; 0x2f
 800ad1c:	d047      	beq.n	800adae <rmw_validate_full_topic_name+0xd2>
 800ad1e:	1e63      	subs	r3, r4, #1
 800ad20:	eb03 0900 	add.w	r9, r3, r0
 800ad24:	f1c4 0e01 	rsb	lr, r4, #1
 800ad28:	eb0e 0803 	add.w	r8, lr, r3
 800ad2c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ad30:	f021 0220 	bic.w	r2, r1, #32
 800ad34:	3a41      	subs	r2, #65	; 0x41
 800ad36:	2a19      	cmp	r2, #25
 800ad38:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800ad3c:	d90c      	bls.n	800ad58 <rmw_validate_full_topic_name+0x7c>
 800ad3e:	295f      	cmp	r1, #95	; 0x5f
 800ad40:	d00a      	beq.n	800ad58 <rmw_validate_full_topic_name+0x7c>
 800ad42:	f1bc 0f0a 	cmp.w	ip, #10
 800ad46:	d907      	bls.n	800ad58 <rmw_validate_full_topic_name+0x7c>
 800ad48:	2304      	movs	r3, #4
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	2e00      	cmp	r6, #0
 800ad4e:	d0df      	beq.n	800ad10 <rmw_validate_full_topic_name+0x34>
 800ad50:	f8c6 8000 	str.w	r8, [r6]
 800ad54:	2000      	movs	r0, #0
 800ad56:	e7d5      	b.n	800ad04 <rmw_validate_full_topic_name+0x28>
 800ad58:	454b      	cmp	r3, r9
 800ad5a:	d1e5      	bne.n	800ad28 <rmw_validate_full_topic_name+0x4c>
 800ad5c:	f8df e084 	ldr.w	lr, [pc, #132]	; 800ade4 <rmw_validate_full_topic_name+0x108>
 800ad60:	2300      	movs	r3, #0
 800ad62:	f107 0801 	add.w	r8, r7, #1
 800ad66:	e005      	b.n	800ad74 <rmw_validate_full_topic_name+0x98>
 800ad68:	4611      	mov	r1, r2
 800ad6a:	4288      	cmp	r0, r1
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	f104 0401 	add.w	r4, r4, #1
 800ad72:	d925      	bls.n	800adc0 <rmw_validate_full_topic_name+0xe4>
 800ad74:	429f      	cmp	r7, r3
 800ad76:	f103 0201 	add.w	r2, r3, #1
 800ad7a:	d01e      	beq.n	800adba <rmw_validate_full_topic_name+0xde>
 800ad7c:	7821      	ldrb	r1, [r4, #0]
 800ad7e:	292f      	cmp	r1, #47	; 0x2f
 800ad80:	d1f2      	bne.n	800ad68 <rmw_validate_full_topic_name+0x8c>
 800ad82:	f894 c001 	ldrb.w	ip, [r4, #1]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	d024      	beq.n	800adda <rmw_validate_full_topic_name+0xfe>
 800ad90:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800ad94:	075b      	lsls	r3, r3, #29
 800ad96:	d5e8      	bpl.n	800ad6a <rmw_validate_full_topic_name+0x8e>
 800ad98:	2306      	movs	r3, #6
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	d0b7      	beq.n	800ad10 <rmw_validate_full_topic_name+0x34>
 800ada0:	6032      	str	r2, [r6, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	e7ae      	b.n	800ad04 <rmw_validate_full_topic_name+0x28>
 800ada6:	200b      	movs	r0, #11
 800ada8:	4770      	bx	lr
 800adaa:	200b      	movs	r0, #11
 800adac:	e7aa      	b.n	800ad04 <rmw_validate_full_topic_name+0x28>
 800adae:	2303      	movs	r3, #3
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	d0ac      	beq.n	800ad10 <rmw_validate_full_topic_name+0x34>
 800adb6:	6037      	str	r7, [r6, #0]
 800adb8:	e7aa      	b.n	800ad10 <rmw_validate_full_topic_name+0x34>
 800adba:	4641      	mov	r1, r8
 800adbc:	1c7a      	adds	r2, r7, #1
 800adbe:	e7d4      	b.n	800ad6a <rmw_validate_full_topic_name+0x8e>
 800adc0:	28f7      	cmp	r0, #247	; 0xf7
 800adc2:	d802      	bhi.n	800adca <rmw_validate_full_topic_name+0xee>
 800adc4:	2000      	movs	r0, #0
 800adc6:	6028      	str	r0, [r5, #0]
 800adc8:	e79c      	b.n	800ad04 <rmw_validate_full_topic_name+0x28>
 800adca:	2307      	movs	r3, #7
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	2e00      	cmp	r6, #0
 800add0:	d09e      	beq.n	800ad10 <rmw_validate_full_topic_name+0x34>
 800add2:	23f6      	movs	r3, #246	; 0xf6
 800add4:	6033      	str	r3, [r6, #0]
 800add6:	2000      	movs	r0, #0
 800add8:	e794      	b.n	800ad04 <rmw_validate_full_topic_name+0x28>
 800adda:	2305      	movs	r3, #5
 800addc:	602b      	str	r3, [r5, #0]
 800adde:	2e00      	cmp	r6, #0
 800ade0:	d1de      	bne.n	800ada0 <rmw_validate_full_topic_name+0xc4>
 800ade2:	e795      	b.n	800ad10 <rmw_validate_full_topic_name+0x34>
 800ade4:	080155fd 	.word	0x080155fd

0800ade8 <rmw_uros_set_custom_transport>:
 800ade8:	b470      	push	{r4, r5, r6}
 800adea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800adee:	b162      	cbz	r2, 800ae0a <rmw_uros_set_custom_transport+0x22>
 800adf0:	b15b      	cbz	r3, 800ae0a <rmw_uros_set_custom_transport+0x22>
 800adf2:	b155      	cbz	r5, 800ae0a <rmw_uros_set_custom_transport+0x22>
 800adf4:	b14e      	cbz	r6, 800ae0a <rmw_uros_set_custom_transport+0x22>
 800adf6:	4c06      	ldr	r4, [pc, #24]	; (800ae10 <rmw_uros_set_custom_transport+0x28>)
 800adf8:	7020      	strb	r0, [r4, #0]
 800adfa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800adfe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ae02:	6166      	str	r6, [r4, #20]
 800ae04:	2000      	movs	r0, #0
 800ae06:	bc70      	pop	{r4, r5, r6}
 800ae08:	4770      	bx	lr
 800ae0a:	200b      	movs	r0, #11
 800ae0c:	bc70      	pop	{r4, r5, r6}
 800ae0e:	4770      	bx	lr
 800ae10:	20009238 	.word	0x20009238

0800ae14 <rmw_create_subscription>:
 800ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	b08d      	sub	sp, #52	; 0x34
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f000 80cb 	beq.w	800afb6 <rmw_create_subscription+0x1a2>
 800ae20:	460e      	mov	r6, r1
 800ae22:	2900      	cmp	r1, #0
 800ae24:	f000 80c7 	beq.w	800afb6 <rmw_create_subscription+0x1a2>
 800ae28:	4604      	mov	r4, r0
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	4615      	mov	r5, r2
 800ae2e:	4698      	mov	r8, r3
 800ae30:	f000 fca6 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f000 80be 	beq.w	800afb6 <rmw_create_subscription+0x1a2>
 800ae3a:	2d00      	cmp	r5, #0
 800ae3c:	f000 80bb 	beq.w	800afb6 <rmw_create_subscription+0x1a2>
 800ae40:	782b      	ldrb	r3, [r5, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 80b7 	beq.w	800afb6 <rmw_create_subscription+0x1a2>
 800ae48:	f1b8 0f00 	cmp.w	r8, #0
 800ae4c:	f000 80b3 	beq.w	800afb6 <rmw_create_subscription+0x1a2>
 800ae50:	485b      	ldr	r0, [pc, #364]	; (800afc0 <rmw_create_subscription+0x1ac>)
 800ae52:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ae56:	f005 fceb 	bl	8010830 <get_memory>
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f000 80ab 	beq.w	800afb8 <rmw_create_subscription+0x1a4>
 800ae62:	68c7      	ldr	r7, [r0, #12]
 800ae64:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800ae68:	f005 fd4a 	bl	8010900 <rmw_get_implementation_identifier>
 800ae6c:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800ae70:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ae72:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ae76:	4628      	mov	r0, r5
 800ae78:	f7f5 f9d4 	bl	8000224 <strlen>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	283c      	cmp	r0, #60	; 0x3c
 800ae80:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800ae84:	f200 8090 	bhi.w	800afa8 <rmw_create_subscription+0x194>
 800ae88:	4a4e      	ldr	r2, [pc, #312]	; (800afc4 <rmw_create_subscription+0x1b0>)
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	213c      	movs	r1, #60	; 0x3c
 800ae8e:	4650      	mov	r0, sl
 800ae90:	f008 fcd6 	bl	8013840 <sniprintf>
 800ae94:	4641      	mov	r1, r8
 800ae96:	f8c7 9020 	str.w	r9, [r7, #32]
 800ae9a:	2250      	movs	r2, #80	; 0x50
 800ae9c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800aea0:	f008 fb0c 	bl	80134bc <memcpy>
 800aea4:	4948      	ldr	r1, [pc, #288]	; (800afc8 <rmw_create_subscription+0x1b4>)
 800aea6:	4630      	mov	r0, r6
 800aea8:	f000 fc78 	bl	800b79c <get_message_typesupport_handle>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d07b      	beq.n	800afa8 <rmw_create_subscription+0x194>
 800aeb0:	6842      	ldr	r2, [r0, #4]
 800aeb2:	61ba      	str	r2, [r7, #24]
 800aeb4:	2a00      	cmp	r2, #0
 800aeb6:	d077      	beq.n	800afa8 <rmw_create_subscription+0x194>
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4643      	mov	r3, r8
 800aebc:	4648      	mov	r0, r9
 800aebe:	f005 ff69 	bl	8010d94 <create_topic>
 800aec2:	61f8      	str	r0, [r7, #28]
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d073      	beq.n	800afb0 <rmw_create_subscription+0x19c>
 800aec8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800aecc:	f241 539c 	movw	r3, #5532	; 0x159c
 800aed0:	2104      	movs	r1, #4
 800aed2:	5ad0      	ldrh	r0, [r2, r3]
 800aed4:	1c45      	adds	r5, r0, #1
 800aed6:	52d5      	strh	r5, [r2, r3]
 800aed8:	f000 fdc8 	bl	800ba6c <uxr_object_id>
 800aedc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aee0:	6138      	str	r0, [r7, #16]
 800aee2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800aee6:	2606      	movs	r6, #6
 800aee8:	9600      	str	r6, [sp, #0]
 800aeea:	6811      	ldr	r1, [r2, #0]
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800aef2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aef6:	f000 fd0f 	bl	800b918 <uxr_buffer_create_subscriber_bin>
 800aefa:	4602      	mov	r2, r0
 800aefc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800af00:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800af04:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800af08:	f000 fbba 	bl	800b680 <run_xrce_session>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d04b      	beq.n	800afa8 <rmw_create_subscription+0x194>
 800af10:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800af14:	f241 539e 	movw	r3, #5534	; 0x159e
 800af18:	4631      	mov	r1, r6
 800af1a:	5ad0      	ldrh	r0, [r2, r3]
 800af1c:	1c45      	adds	r5, r0, #1
 800af1e:	52d5      	strh	r5, [r2, r3]
 800af20:	f000 fda4 	bl	800ba6c <uxr_object_id>
 800af24:	ad08      	add	r5, sp, #32
 800af26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	6178      	str	r0, [r7, #20]
 800af2e:	4641      	mov	r1, r8
 800af30:	4628      	mov	r0, r5
 800af32:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800af36:	9305      	str	r3, [sp, #20]
 800af38:	f000 fbbe 	bl	800b6b8 <convert_qos_profile>
 800af3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800af40:	9b05      	ldr	r3, [sp, #20]
 800af42:	9001      	str	r0, [sp, #4]
 800af44:	9603      	str	r6, [sp, #12]
 800af46:	f8ad 1008 	strh.w	r1, [sp, #8]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800af52:	f8db 1000 	ldr.w	r1, [fp]
 800af56:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800af5a:	f000 fd0d 	bl	800b978 <uxr_buffer_create_datareader_bin>
 800af5e:	4602      	mov	r2, r0
 800af60:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800af64:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800af68:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800af6c:	f000 fb88 	bl	800b680 <run_xrce_session>
 800af70:	b1d0      	cbz	r0, 800afa8 <rmw_create_subscription+0x194>
 800af72:	f898 3008 	ldrb.w	r3, [r8, #8]
 800af76:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800af7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af7e:	2200      	movs	r2, #0
 800af80:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800af84:	2b02      	cmp	r3, #2
 800af86:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800af8a:	bf0c      	ite	eq
 800af8c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800af90:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800af94:	9307      	str	r3, [sp, #28]
 800af96:	aa0a      	add	r2, sp, #40	; 0x28
 800af98:	9200      	str	r2, [sp, #0]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	6809      	ldr	r1, [r1, #0]
 800af9e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800afa2:	f000 fd91 	bl	800bac8 <uxr_buffer_request_data>
 800afa6:	e007      	b.n	800afb8 <rmw_create_subscription+0x1a4>
 800afa8:	69f8      	ldr	r0, [r7, #28]
 800afaa:	b108      	cbz	r0, 800afb0 <rmw_create_subscription+0x19c>
 800afac:	f000 fa6e 	bl	800b48c <rmw_uxrce_fini_topic_memory>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fa29 	bl	800b408 <rmw_uxrce_fini_subscription_memory>
 800afb6:	2400      	movs	r4, #0
 800afb8:	4620      	mov	r0, r4
 800afba:	b00d      	add	sp, #52	; 0x34
 800afbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc0:	2000c4c4 	.word	0x2000c4c4
 800afc4:	08014ef0 	.word	0x08014ef0
 800afc8:	08014d58 	.word	0x08014d58

0800afcc <rmw_subscription_get_actual_qos>:
 800afcc:	b150      	cbz	r0, 800afe4 <rmw_subscription_get_actual_qos+0x18>
 800afce:	b149      	cbz	r1, 800afe4 <rmw_subscription_get_actual_qos+0x18>
 800afd0:	b508      	push	{r3, lr}
 800afd2:	6843      	ldr	r3, [r0, #4]
 800afd4:	2250      	movs	r2, #80	; 0x50
 800afd6:	4608      	mov	r0, r1
 800afd8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800afdc:	f008 fa6e 	bl	80134bc <memcpy>
 800afe0:	2000      	movs	r0, #0
 800afe2:	bd08      	pop	{r3, pc}
 800afe4:	200b      	movs	r0, #11
 800afe6:	4770      	bx	lr

0800afe8 <rmw_destroy_subscription>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	b128      	cbz	r0, 800aff8 <rmw_destroy_subscription+0x10>
 800afec:	4604      	mov	r4, r0
 800afee:	6800      	ldr	r0, [r0, #0]
 800aff0:	460d      	mov	r5, r1
 800aff2:	f000 fbc5 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 800aff6:	b910      	cbnz	r0, 800affe <rmw_destroy_subscription+0x16>
 800aff8:	2401      	movs	r4, #1
 800affa:	4620      	mov	r0, r4
 800affc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800affe:	6863      	ldr	r3, [r4, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0f9      	beq.n	800aff8 <rmw_destroy_subscription+0x10>
 800b004:	2d00      	cmp	r5, #0
 800b006:	d0f7      	beq.n	800aff8 <rmw_destroy_subscription+0x10>
 800b008:	6828      	ldr	r0, [r5, #0]
 800b00a:	f000 fbb9 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d0f2      	beq.n	800aff8 <rmw_destroy_subscription+0x10>
 800b012:	686c      	ldr	r4, [r5, #4]
 800b014:	2c00      	cmp	r4, #0
 800b016:	d0ef      	beq.n	800aff8 <rmw_destroy_subscription+0x10>
 800b018:	6a26      	ldr	r6, [r4, #32]
 800b01a:	6962      	ldr	r2, [r4, #20]
 800b01c:	6930      	ldr	r0, [r6, #16]
 800b01e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b022:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b026:	6819      	ldr	r1, [r3, #0]
 800b028:	f000 fd88 	bl	800bb3c <uxr_buffer_cancel_data>
 800b02c:	4602      	mov	r2, r0
 800b02e:	6930      	ldr	r0, [r6, #16]
 800b030:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b034:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b038:	f000 fb22 	bl	800b680 <run_xrce_session>
 800b03c:	69e0      	ldr	r0, [r4, #28]
 800b03e:	f005 fef9 	bl	8010e34 <destroy_topic>
 800b042:	6a23      	ldr	r3, [r4, #32]
 800b044:	6962      	ldr	r2, [r4, #20]
 800b046:	6918      	ldr	r0, [r3, #16]
 800b048:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b04c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b050:	6819      	ldr	r1, [r3, #0]
 800b052:	f000 fbaf 	bl	800b7b4 <uxr_buffer_delete_entity>
 800b056:	6a21      	ldr	r1, [r4, #32]
 800b058:	6922      	ldr	r2, [r4, #16]
 800b05a:	4603      	mov	r3, r0
 800b05c:	6908      	ldr	r0, [r1, #16]
 800b05e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b062:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b066:	6809      	ldr	r1, [r1, #0]
 800b068:	461c      	mov	r4, r3
 800b06a:	f000 fba3 	bl	800b7b4 <uxr_buffer_delete_entity>
 800b06e:	4607      	mov	r7, r0
 800b070:	6930      	ldr	r0, [r6, #16]
 800b072:	4622      	mov	r2, r4
 800b074:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b078:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b07c:	f000 fb00 	bl	800b680 <run_xrce_session>
 800b080:	4604      	mov	r4, r0
 800b082:	6930      	ldr	r0, [r6, #16]
 800b084:	463a      	mov	r2, r7
 800b086:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b08a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b08e:	f000 faf7 	bl	800b680 <run_xrce_session>
 800b092:	b12c      	cbz	r4, 800b0a0 <rmw_destroy_subscription+0xb8>
 800b094:	b120      	cbz	r0, 800b0a0 <rmw_destroy_subscription+0xb8>
 800b096:	2400      	movs	r4, #0
 800b098:	4628      	mov	r0, r5
 800b09a:	f000 f9b5 	bl	800b408 <rmw_uxrce_fini_subscription_memory>
 800b09e:	e7ac      	b.n	800affa <rmw_destroy_subscription+0x12>
 800b0a0:	2402      	movs	r4, #2
 800b0a2:	e7f9      	b.n	800b098 <rmw_destroy_subscription+0xb0>

0800b0a4 <rmw_take_with_info>:
 800b0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	6800      	ldr	r0, [r0, #0]
 800b0aa:	b089      	sub	sp, #36	; 0x24
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	4615      	mov	r5, r2
 800b0b0:	b128      	cbz	r0, 800b0be <rmw_take_with_info+0x1a>
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <rmw_take_with_info+0xa0>)
 800b0b4:	6819      	ldr	r1, [r3, #0]
 800b0b6:	f7f5 f8ab 	bl	8000210 <strcmp>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d13e      	bne.n	800b13c <rmw_take_with_info+0x98>
 800b0be:	b305      	cbz	r5, 800b102 <rmw_take_with_info+0x5e>
 800b0c0:	6864      	ldr	r4, [r4, #4]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	702b      	strb	r3, [r5, #0]
 800b0c6:	f000 fa63 	bl	800b590 <rmw_uxrce_clean_expired_static_input_buffer>
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fa36 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	b1f0      	cbz	r0, 800b112 <rmw_take_with_info+0x6e>
 800b0d4:	68c1      	ldr	r1, [r0, #12]
 800b0d6:	4668      	mov	r0, sp
 800b0d8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800b0dc:	3110      	adds	r1, #16
 800b0de:	f7fe fdbd 	bl	8009c5c <ucdr_init_buffer>
 800b0e2:	69a3      	ldr	r3, [r4, #24]
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	4668      	mov	r0, sp
 800b0ea:	4798      	blx	r3
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4815      	ldr	r0, [pc, #84]	; (800b148 <rmw_take_with_info+0xa4>)
 800b0f2:	f005 fbad 	bl	8010850 <put_memory>
 800b0f6:	702c      	strb	r4, [r5, #0]
 800b0f8:	f084 0001 	eor.w	r0, r4, #1
 800b0fc:	b2c0      	uxtb	r0, r0
 800b0fe:	b009      	add	sp, #36	; 0x24
 800b100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b102:	6864      	ldr	r4, [r4, #4]
 800b104:	f000 fa44 	bl	800b590 <rmw_uxrce_clean_expired_static_input_buffer>
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fa17 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 800b10e:	4605      	mov	r5, r0
 800b110:	b910      	cbnz	r0, 800b118 <rmw_take_with_info+0x74>
 800b112:	2001      	movs	r0, #1
 800b114:	b009      	add	sp, #36	; 0x24
 800b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b118:	68e9      	ldr	r1, [r5, #12]
 800b11a:	4668      	mov	r0, sp
 800b11c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800b120:	3110      	adds	r1, #16
 800b122:	f7fe fd9b 	bl	8009c5c <ucdr_init_buffer>
 800b126:	69a3      	ldr	r3, [r4, #24]
 800b128:	4639      	mov	r1, r7
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4668      	mov	r0, sp
 800b12e:	4798      	blx	r3
 800b130:	4629      	mov	r1, r5
 800b132:	4604      	mov	r4, r0
 800b134:	4804      	ldr	r0, [pc, #16]	; (800b148 <rmw_take_with_info+0xa4>)
 800b136:	f005 fb8b 	bl	8010850 <put_memory>
 800b13a:	e7dd      	b.n	800b0f8 <rmw_take_with_info+0x54>
 800b13c:	200c      	movs	r0, #12
 800b13e:	b009      	add	sp, #36	; 0x24
 800b140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b142:	bf00      	nop
 800b144:	080153e0 	.word	0x080153e0
 800b148:	20009258 	.word	0x20009258

0800b14c <rmw_uxrce_init_service_memory>:
 800b14c:	b1b2      	cbz	r2, 800b17c <rmw_uxrce_init_service_memory+0x30>
 800b14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b150:	7a07      	ldrb	r7, [r0, #8]
 800b152:	4605      	mov	r5, r0
 800b154:	b98f      	cbnz	r7, 800b17a <rmw_uxrce_init_service_memory+0x2e>
 800b156:	e9c0 7700 	strd	r7, r7, [r0]
 800b15a:	460c      	mov	r4, r1
 800b15c:	23c8      	movs	r3, #200	; 0xc8
 800b15e:	2101      	movs	r1, #1
 800b160:	fb03 4602 	mla	r6, r3, r2, r4
 800b164:	60c3      	str	r3, [r0, #12]
 800b166:	7201      	strb	r1, [r0, #8]
 800b168:	4621      	mov	r1, r4
 800b16a:	4628      	mov	r0, r5
 800b16c:	f005 fb70 	bl	8010850 <put_memory>
 800b170:	60e4      	str	r4, [r4, #12]
 800b172:	f804 7bc8 	strb.w	r7, [r4], #200
 800b176:	42a6      	cmp	r6, r4
 800b178:	d1f6      	bne.n	800b168 <rmw_uxrce_init_service_memory+0x1c>
 800b17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop

0800b180 <rmw_uxrce_init_client_memory>:
 800b180:	b1b2      	cbz	r2, 800b1b0 <rmw_uxrce_init_client_memory+0x30>
 800b182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b184:	7a07      	ldrb	r7, [r0, #8]
 800b186:	4605      	mov	r5, r0
 800b188:	b98f      	cbnz	r7, 800b1ae <rmw_uxrce_init_client_memory+0x2e>
 800b18a:	e9c0 7700 	strd	r7, r7, [r0]
 800b18e:	460c      	mov	r4, r1
 800b190:	23c8      	movs	r3, #200	; 0xc8
 800b192:	2101      	movs	r1, #1
 800b194:	fb03 4602 	mla	r6, r3, r2, r4
 800b198:	60c3      	str	r3, [r0, #12]
 800b19a:	7201      	strb	r1, [r0, #8]
 800b19c:	4621      	mov	r1, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f005 fb56 	bl	8010850 <put_memory>
 800b1a4:	60e4      	str	r4, [r4, #12]
 800b1a6:	f804 7bc8 	strb.w	r7, [r4], #200
 800b1aa:	42a6      	cmp	r6, r4
 800b1ac:	d1f6      	bne.n	800b19c <rmw_uxrce_init_client_memory+0x1c>
 800b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop

0800b1b4 <rmw_uxrce_init_publisher_memory>:
 800b1b4:	b1b2      	cbz	r2, 800b1e4 <rmw_uxrce_init_publisher_memory+0x30>
 800b1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b8:	7a07      	ldrb	r7, [r0, #8]
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	b98f      	cbnz	r7, 800b1e2 <rmw_uxrce_init_publisher_memory+0x2e>
 800b1be:	e9c0 7700 	strd	r7, r7, [r0]
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	23d8      	movs	r3, #216	; 0xd8
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	fb03 4602 	mla	r6, r3, r2, r4
 800b1cc:	60c3      	str	r3, [r0, #12]
 800b1ce:	7201      	strb	r1, [r0, #8]
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f005 fb3c 	bl	8010850 <put_memory>
 800b1d8:	60e4      	str	r4, [r4, #12]
 800b1da:	f804 7bd8 	strb.w	r7, [r4], #216
 800b1de:	42a6      	cmp	r6, r4
 800b1e0:	d1f6      	bne.n	800b1d0 <rmw_uxrce_init_publisher_memory+0x1c>
 800b1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop

0800b1e8 <rmw_uxrce_init_subscription_memory>:
 800b1e8:	b1b2      	cbz	r2, 800b218 <rmw_uxrce_init_subscription_memory+0x30>
 800b1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ec:	7a07      	ldrb	r7, [r0, #8]
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	b98f      	cbnz	r7, 800b216 <rmw_uxrce_init_subscription_memory+0x2e>
 800b1f2:	e9c0 7700 	strd	r7, r7, [r0]
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	23d0      	movs	r3, #208	; 0xd0
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	fb03 4602 	mla	r6, r3, r2, r4
 800b200:	60c3      	str	r3, [r0, #12]
 800b202:	7201      	strb	r1, [r0, #8]
 800b204:	4621      	mov	r1, r4
 800b206:	4628      	mov	r0, r5
 800b208:	f005 fb22 	bl	8010850 <put_memory>
 800b20c:	60e4      	str	r4, [r4, #12]
 800b20e:	f804 7bd0 	strb.w	r7, [r4], #208
 800b212:	42a6      	cmp	r6, r4
 800b214:	d1f6      	bne.n	800b204 <rmw_uxrce_init_subscription_memory+0x1c>
 800b216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop

0800b21c <rmw_uxrce_init_node_memory>:
 800b21c:	b1b2      	cbz	r2, 800b24c <rmw_uxrce_init_node_memory+0x30>
 800b21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b220:	7a07      	ldrb	r7, [r0, #8]
 800b222:	4605      	mov	r5, r0
 800b224:	b98f      	cbnz	r7, 800b24a <rmw_uxrce_init_node_memory+0x2e>
 800b226:	e9c0 7700 	strd	r7, r7, [r0]
 800b22a:	460c      	mov	r4, r1
 800b22c:	23a4      	movs	r3, #164	; 0xa4
 800b22e:	2101      	movs	r1, #1
 800b230:	fb03 4602 	mla	r6, r3, r2, r4
 800b234:	60c3      	str	r3, [r0, #12]
 800b236:	7201      	strb	r1, [r0, #8]
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f005 fb08 	bl	8010850 <put_memory>
 800b240:	60e4      	str	r4, [r4, #12]
 800b242:	f804 7ba4 	strb.w	r7, [r4], #164
 800b246:	42a6      	cmp	r6, r4
 800b248:	d1f6      	bne.n	800b238 <rmw_uxrce_init_node_memory+0x1c>
 800b24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop

0800b250 <rmw_uxrce_init_session_memory>:
 800b250:	b1d2      	cbz	r2, 800b288 <rmw_uxrce_init_session_memory+0x38>
 800b252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b256:	7a07      	ldrb	r7, [r0, #8]
 800b258:	4605      	mov	r5, r0
 800b25a:	b99f      	cbnz	r7, 800b284 <rmw_uxrce_init_session_memory+0x34>
 800b25c:	e9c0 7700 	strd	r7, r7, [r0]
 800b260:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800b264:	460c      	mov	r4, r1
 800b266:	2101      	movs	r1, #1
 800b268:	fb03 4602 	mla	r6, r3, r2, r4
 800b26c:	60c3      	str	r3, [r0, #12]
 800b26e:	4698      	mov	r8, r3
 800b270:	7201      	strb	r1, [r0, #8]
 800b272:	4621      	mov	r1, r4
 800b274:	4628      	mov	r0, r5
 800b276:	f005 faeb 	bl	8010850 <put_memory>
 800b27a:	60e4      	str	r4, [r4, #12]
 800b27c:	7027      	strb	r7, [r4, #0]
 800b27e:	4444      	add	r4, r8
 800b280:	42a6      	cmp	r6, r4
 800b282:	d1f6      	bne.n	800b272 <rmw_uxrce_init_session_memory+0x22>
 800b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop

0800b28c <rmw_uxrce_init_topic_memory>:
 800b28c:	b1c2      	cbz	r2, 800b2c0 <rmw_uxrce_init_topic_memory+0x34>
 800b28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b290:	7a07      	ldrb	r7, [r0, #8]
 800b292:	4606      	mov	r6, r0
 800b294:	b99f      	cbnz	r7, 800b2be <rmw_uxrce_init_topic_memory+0x32>
 800b296:	e9c0 7700 	strd	r7, r7, [r0]
 800b29a:	460c      	mov	r4, r1
 800b29c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	231c      	movs	r3, #28
 800b2a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2a8:	7201      	strb	r1, [r0, #8]
 800b2aa:	60c3      	str	r3, [r0, #12]
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f005 face 	bl	8010850 <put_memory>
 800b2b4:	60e4      	str	r4, [r4, #12]
 800b2b6:	f804 7b1c 	strb.w	r7, [r4], #28
 800b2ba:	42a5      	cmp	r5, r4
 800b2bc:	d1f6      	bne.n	800b2ac <rmw_uxrce_init_topic_memory+0x20>
 800b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop

0800b2c4 <rmw_uxrce_init_static_input_buffer_memory>:
 800b2c4:	b1d2      	cbz	r2, 800b2fc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800b2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c8:	7a07      	ldrb	r7, [r0, #8]
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	b9af      	cbnz	r7, 800b2fa <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800b2ce:	e9c0 7700 	strd	r7, r7, [r0]
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800b2d8:	2101      	movs	r1, #1
 800b2da:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800b2de:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800b2e2:	7201      	strb	r1, [r0, #8]
 800b2e4:	60c3      	str	r3, [r0, #12]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f005 fab1 	bl	8010850 <put_memory>
 800b2ee:	60e4      	str	r4, [r4, #12]
 800b2f0:	7027      	strb	r7, [r4, #0]
 800b2f2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b2f6:	42a5      	cmp	r5, r4
 800b2f8:	d1f5      	bne.n	800b2e6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop

0800b300 <rmw_uxrce_init_init_options_impl_memory>:
 800b300:	b1b2      	cbz	r2, 800b330 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800b302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b304:	7a07      	ldrb	r7, [r0, #8]
 800b306:	4605      	mov	r5, r0
 800b308:	b98f      	cbnz	r7, 800b32e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800b30a:	e9c0 7700 	strd	r7, r7, [r0]
 800b30e:	460c      	mov	r4, r1
 800b310:	232c      	movs	r3, #44	; 0x2c
 800b312:	2101      	movs	r1, #1
 800b314:	fb03 4602 	mla	r6, r3, r2, r4
 800b318:	60c3      	str	r3, [r0, #12]
 800b31a:	7201      	strb	r1, [r0, #8]
 800b31c:	4621      	mov	r1, r4
 800b31e:	4628      	mov	r0, r5
 800b320:	f005 fa96 	bl	8010850 <put_memory>
 800b324:	60e4      	str	r4, [r4, #12]
 800b326:	f804 7b2c 	strb.w	r7, [r4], #44
 800b32a:	42a6      	cmp	r6, r4
 800b32c:	d1f6      	bne.n	800b31c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800b32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop

0800b334 <rmw_uxrce_init_wait_set_memory>:
 800b334:	b1c2      	cbz	r2, 800b368 <rmw_uxrce_init_wait_set_memory+0x34>
 800b336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b338:	7a07      	ldrb	r7, [r0, #8]
 800b33a:	4606      	mov	r6, r0
 800b33c:	b99f      	cbnz	r7, 800b366 <rmw_uxrce_init_wait_set_memory+0x32>
 800b33e:	e9c0 7700 	strd	r7, r7, [r0]
 800b342:	460c      	mov	r4, r1
 800b344:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b348:	2101      	movs	r1, #1
 800b34a:	231c      	movs	r3, #28
 800b34c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b350:	7201      	strb	r1, [r0, #8]
 800b352:	60c3      	str	r3, [r0, #12]
 800b354:	4621      	mov	r1, r4
 800b356:	4630      	mov	r0, r6
 800b358:	f005 fa7a 	bl	8010850 <put_memory>
 800b35c:	60e4      	str	r4, [r4, #12]
 800b35e:	f804 7b1c 	strb.w	r7, [r4], #28
 800b362:	42a5      	cmp	r5, r4
 800b364:	d1f6      	bne.n	800b354 <rmw_uxrce_init_wait_set_memory+0x20>
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop

0800b36c <rmw_uxrce_init_guard_condition_memory>:
 800b36c:	b1b2      	cbz	r2, 800b39c <rmw_uxrce_init_guard_condition_memory+0x30>
 800b36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b370:	7a07      	ldrb	r7, [r0, #8]
 800b372:	4605      	mov	r5, r0
 800b374:	b98f      	cbnz	r7, 800b39a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800b376:	e9c0 7700 	strd	r7, r7, [r0]
 800b37a:	460c      	mov	r4, r1
 800b37c:	2320      	movs	r3, #32
 800b37e:	2101      	movs	r1, #1
 800b380:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800b384:	7201      	strb	r1, [r0, #8]
 800b386:	60c3      	str	r3, [r0, #12]
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f005 fa60 	bl	8010850 <put_memory>
 800b390:	60e4      	str	r4, [r4, #12]
 800b392:	f804 7b20 	strb.w	r7, [r4], #32
 800b396:	42a6      	cmp	r6, r4
 800b398:	d1f6      	bne.n	800b388 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop

0800b3a0 <rmw_uxrce_fini_session_memory>:
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	4801      	ldr	r0, [pc, #4]	; (800b3a8 <rmw_uxrce_fini_session_memory+0x8>)
 800b3a4:	f005 ba54 	b.w	8010850 <put_memory>
 800b3a8:	2000c400 	.word	0x2000c400

0800b3ac <rmw_uxrce_fini_node_memory>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	6800      	ldr	r0, [r0, #0]
 800b3b2:	b128      	cbz	r0, 800b3c0 <rmw_uxrce_fini_node_memory+0x14>
 800b3b4:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <rmw_uxrce_fini_node_memory+0x28>)
 800b3b6:	6819      	ldr	r1, [r3, #0]
 800b3b8:	f7f4 ff2a 	bl	8000210 <strcmp>
 800b3bc:	b940      	cbnz	r0, 800b3d0 <rmw_uxrce_fini_node_memory+0x24>
 800b3be:	6020      	str	r0, [r4, #0]
 800b3c0:	6861      	ldr	r1, [r4, #4]
 800b3c2:	b129      	cbz	r1, 800b3d0 <rmw_uxrce_fini_node_memory+0x24>
 800b3c4:	2500      	movs	r5, #0
 800b3c6:	4804      	ldr	r0, [pc, #16]	; (800b3d8 <rmw_uxrce_fini_node_memory+0x2c>)
 800b3c8:	610d      	str	r5, [r1, #16]
 800b3ca:	f005 fa41 	bl	8010850 <put_memory>
 800b3ce:	6065      	str	r5, [r4, #4]
 800b3d0:	bd38      	pop	{r3, r4, r5, pc}
 800b3d2:	bf00      	nop
 800b3d4:	080153e0 	.word	0x080153e0
 800b3d8:	2000c22c 	.word	0x2000c22c

0800b3dc <rmw_uxrce_fini_publisher_memory>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	6800      	ldr	r0, [r0, #0]
 800b3e2:	b128      	cbz	r0, 800b3f0 <rmw_uxrce_fini_publisher_memory+0x14>
 800b3e4:	4b06      	ldr	r3, [pc, #24]	; (800b400 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b3e6:	6819      	ldr	r1, [r3, #0]
 800b3e8:	f7f4 ff12 	bl	8000210 <strcmp>
 800b3ec:	b938      	cbnz	r0, 800b3fe <rmw_uxrce_fini_publisher_memory+0x22>
 800b3ee:	6020      	str	r0, [r4, #0]
 800b3f0:	6861      	ldr	r1, [r4, #4]
 800b3f2:	b121      	cbz	r1, 800b3fe <rmw_uxrce_fini_publisher_memory+0x22>
 800b3f4:	4803      	ldr	r0, [pc, #12]	; (800b404 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b3f6:	f005 fa2b 	bl	8010850 <put_memory>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	bd10      	pop	{r4, pc}
 800b400:	080153e0 	.word	0x080153e0
 800b404:	20009268 	.word	0x20009268

0800b408 <rmw_uxrce_fini_subscription_memory>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	4604      	mov	r4, r0
 800b40c:	6800      	ldr	r0, [r0, #0]
 800b40e:	b128      	cbz	r0, 800b41c <rmw_uxrce_fini_subscription_memory+0x14>
 800b410:	4b06      	ldr	r3, [pc, #24]	; (800b42c <rmw_uxrce_fini_subscription_memory+0x24>)
 800b412:	6819      	ldr	r1, [r3, #0]
 800b414:	f7f4 fefc 	bl	8000210 <strcmp>
 800b418:	b938      	cbnz	r0, 800b42a <rmw_uxrce_fini_subscription_memory+0x22>
 800b41a:	6020      	str	r0, [r4, #0]
 800b41c:	6861      	ldr	r1, [r4, #4]
 800b41e:	b121      	cbz	r1, 800b42a <rmw_uxrce_fini_subscription_memory+0x22>
 800b420:	4803      	ldr	r0, [pc, #12]	; (800b430 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b422:	f005 fa15 	bl	8010850 <put_memory>
 800b426:	2300      	movs	r3, #0
 800b428:	6063      	str	r3, [r4, #4]
 800b42a:	bd10      	pop	{r4, pc}
 800b42c:	080153e0 	.word	0x080153e0
 800b430:	2000c4c4 	.word	0x2000c4c4

0800b434 <rmw_uxrce_fini_service_memory>:
 800b434:	b510      	push	{r4, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	6800      	ldr	r0, [r0, #0]
 800b43a:	b128      	cbz	r0, 800b448 <rmw_uxrce_fini_service_memory+0x14>
 800b43c:	4b06      	ldr	r3, [pc, #24]	; (800b458 <rmw_uxrce_fini_service_memory+0x24>)
 800b43e:	6819      	ldr	r1, [r3, #0]
 800b440:	f7f4 fee6 	bl	8000210 <strcmp>
 800b444:	b938      	cbnz	r0, 800b456 <rmw_uxrce_fini_service_memory+0x22>
 800b446:	6020      	str	r0, [r4, #0]
 800b448:	6861      	ldr	r1, [r4, #4]
 800b44a:	b121      	cbz	r1, 800b456 <rmw_uxrce_fini_service_memory+0x22>
 800b44c:	4803      	ldr	r0, [pc, #12]	; (800b45c <rmw_uxrce_fini_service_memory+0x28>)
 800b44e:	f005 f9ff 	bl	8010850 <put_memory>
 800b452:	2300      	movs	r3, #0
 800b454:	6063      	str	r3, [r4, #4]
 800b456:	bd10      	pop	{r4, pc}
 800b458:	080153e0 	.word	0x080153e0
 800b45c:	2000c4b4 	.word	0x2000c4b4

0800b460 <rmw_uxrce_fini_client_memory>:
 800b460:	b510      	push	{r4, lr}
 800b462:	4604      	mov	r4, r0
 800b464:	6800      	ldr	r0, [r0, #0]
 800b466:	b128      	cbz	r0, 800b474 <rmw_uxrce_fini_client_memory+0x14>
 800b468:	4b06      	ldr	r3, [pc, #24]	; (800b484 <rmw_uxrce_fini_client_memory+0x24>)
 800b46a:	6819      	ldr	r1, [r3, #0]
 800b46c:	f7f4 fed0 	bl	8000210 <strcmp>
 800b470:	b938      	cbnz	r0, 800b482 <rmw_uxrce_fini_client_memory+0x22>
 800b472:	6020      	str	r0, [r4, #0]
 800b474:	6861      	ldr	r1, [r4, #4]
 800b476:	b121      	cbz	r1, 800b482 <rmw_uxrce_fini_client_memory+0x22>
 800b478:	4803      	ldr	r0, [pc, #12]	; (800b488 <rmw_uxrce_fini_client_memory+0x28>)
 800b47a:	f005 f9e9 	bl	8010850 <put_memory>
 800b47e:	2300      	movs	r3, #0
 800b480:	6063      	str	r3, [r4, #4]
 800b482:	bd10      	pop	{r4, pc}
 800b484:	080153e0 	.word	0x080153e0
 800b488:	20009ae8 	.word	0x20009ae8

0800b48c <rmw_uxrce_fini_topic_memory>:
 800b48c:	b510      	push	{r4, lr}
 800b48e:	4601      	mov	r1, r0
 800b490:	4604      	mov	r4, r0
 800b492:	4803      	ldr	r0, [pc, #12]	; (800b4a0 <rmw_uxrce_fini_topic_memory+0x14>)
 800b494:	f005 f9dc 	bl	8010850 <put_memory>
 800b498:	2300      	movs	r3, #0
 800b49a:	61a3      	str	r3, [r4, #24]
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	bf00      	nop
 800b4a0:	2000c3f0 	.word	0x2000c3f0

0800b4a4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	b4f0      	push	{r4, r5, r6, r7}
 800b4a8:	4923      	ldr	r1, [pc, #140]	; (800b538 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800b4aa:	ac04      	add	r4, sp, #16
 800b4ac:	e884 000c 	stmia.w	r4, {r2, r3}
 800b4b0:	680d      	ldr	r5, [r1, #0]
 800b4b2:	9c05      	ldr	r4, [sp, #20]
 800b4b4:	2d00      	cmp	r5, #0
 800b4b6:	d03d      	beq.n	800b534 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b4c4:	4290      	cmp	r0, r2
 800b4c6:	bf08      	it	eq
 800b4c8:	3101      	addeq	r1, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1f6      	bne.n	800b4bc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b4ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d026      	beq.n	800b524 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800b4d6:	d906      	bls.n	800b4e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d004      	beq.n	800b4e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800b4dc:	2100      	movs	r1, #0
 800b4de:	bcf0      	pop	{r4, r5, r6, r7}
 800b4e0:	4608      	mov	r0, r1
 800b4e2:	b002      	add	sp, #8
 800b4e4:	4770      	bx	lr
 800b4e6:	b304      	cbz	r4, 800b52a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b4e8:	428c      	cmp	r4, r1
 800b4ea:	d81e      	bhi.n	800b52a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	d0f5      	beq.n	800b4dc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b4f6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800b4fa:	e002      	b.n	800b502 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800b4fc:	68ad      	ldr	r5, [r5, #8]
 800b4fe:	2d00      	cmp	r5, #0
 800b500:	d0ed      	beq.n	800b4de <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b502:	68eb      	ldr	r3, [r5, #12]
 800b504:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800b508:	4290      	cmp	r0, r2
 800b50a:	d1f7      	bne.n	800b4fc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b50c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	42b2      	cmp	r2, r6
 800b516:	eb73 0407 	sbcs.w	r4, r3, r7
 800b51a:	daef      	bge.n	800b4fc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b51c:	4616      	mov	r6, r2
 800b51e:	461f      	mov	r7, r3
 800b520:	4629      	mov	r1, r5
 800b522:	e7eb      	b.n	800b4fc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b524:	b10c      	cbz	r4, 800b52a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b526:	428c      	cmp	r4, r1
 800b528:	d9d8      	bls.n	800b4dc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b52a:	bcf0      	pop	{r4, r5, r6, r7}
 800b52c:	4802      	ldr	r0, [pc, #8]	; (800b538 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800b52e:	b002      	add	sp, #8
 800b530:	f005 b97e 	b.w	8010830 <get_memory>
 800b534:	4629      	mov	r1, r5
 800b536:	e7ca      	b.n	800b4ce <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b538:	20009258 	.word	0x20009258

0800b53c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b53c:	4b12      	ldr	r3, [pc, #72]	; (800b588 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	b1fb      	cbz	r3, 800b582 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800b542:	b4f0      	push	{r4, r5, r6, r7}
 800b544:	f04f 0c00 	mov.w	ip, #0
 800b548:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b54c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800b550:	e001      	b.n	800b556 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	b193      	cbz	r3, 800b57c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800b556:	68da      	ldr	r2, [r3, #12]
 800b558:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b55c:	4288      	cmp	r0, r1
 800b55e:	d1f8      	bne.n	800b552 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800b560:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800b564:	e9d2 6700 	ldrd	r6, r7, [r2]
 800b568:	42a6      	cmp	r6, r4
 800b56a:	eb77 0205 	sbcs.w	r2, r7, r5
 800b56e:	daf0      	bge.n	800b552 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800b570:	469c      	mov	ip, r3
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	4634      	mov	r4, r6
 800b576:	463d      	mov	r5, r7
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1ec      	bne.n	800b556 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800b57c:	4660      	mov	r0, ip
 800b57e:	bcf0      	pop	{r4, r5, r6, r7}
 800b580:	4770      	bx	lr
 800b582:	4618      	mov	r0, r3
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	20009258 	.word	0x20009258
 800b58c:	00000000 	.word	0x00000000

0800b590 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	4e38      	ldr	r6, [pc, #224]	; (800b678 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800b596:	f8d6 8000 	ldr.w	r8, [r6]
 800b59a:	b083      	sub	sp, #12
 800b59c:	f006 f8d2 	bl	8011744 <rmw_uros_epoch_nanos>
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	d05f      	beq.n	800b666 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800b5a6:	46b1      	mov	r9, r6
 800b5a8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b5ac:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	4682      	mov	sl, r0
 800b5b4:	468b      	mov	fp, r1
 800b5b6:	d02d      	beq.n	800b614 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800b5b8:	2b05      	cmp	r3, #5
 800b5ba:	d041      	beq.n	800b640 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d029      	beq.n	800b614 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e9cd 2300 	strd	r2, r3, [sp]
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	9b00      	ldr	r3, [sp, #0]
 800b5ce:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800b5d2:	e9d6 6700 	ldrd	r6, r7, [r6]
 800b5d6:	18c2      	adds	r2, r0, r3
 800b5d8:	9b01      	ldr	r3, [sp, #4]
 800b5da:	eb41 0303 	adc.w	r3, r1, r3
 800b5de:	1994      	adds	r4, r2, r6
 800b5e0:	eb43 0507 	adc.w	r5, r3, r7
 800b5e4:	4554      	cmp	r4, sl
 800b5e6:	eb75 020b 	sbcs.w	r2, r5, fp
 800b5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5ee:	db03      	blt.n	800b5f8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b5f0:	45b2      	cmp	sl, r6
 800b5f2:	eb7b 0207 	sbcs.w	r2, fp, r7
 800b5f6:	da05      	bge.n	800b604 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800b5f8:	4641      	mov	r1, r8
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	f005 f927 	bl	8010850 <put_memory>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	b37b      	cbz	r3, 800b666 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800b606:	4698      	mov	r8, r3
 800b608:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b60c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800b610:	2b04      	cmp	r3, #4
 800b612:	d1d1      	bne.n	800b5b8 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800b614:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800b618:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800b61c:	e9cd 2300 	strd	r2, r3, [sp]
 800b620:	4313      	orrs	r3, r2
 800b622:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800b626:	d015      	beq.n	800b654 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b628:	9a01      	ldr	r2, [sp, #4]
 800b62a:	4b14      	ldr	r3, [pc, #80]	; (800b67c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800b62c:	fb03 f702 	mul.w	r7, r3, r2
 800b630:	9a00      	ldr	r2, [sp, #0]
 800b632:	fba2 2303 	umull	r2, r3, r2, r3
 800b636:	e9cd 2300 	strd	r2, r3, [sp]
 800b63a:	443b      	add	r3, r7
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	e7c5      	b.n	800b5cc <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b640:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800b644:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800b648:	e9cd 2300 	strd	r2, r3, [sp]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800b652:	d1e9      	bne.n	800b628 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800b654:	ea50 0301 	orrs.w	r3, r0, r1
 800b658:	bf02      	ittt	eq
 800b65a:	a305      	addeq	r3, pc, #20	; (adr r3, 800b670 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800b65c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800b660:	e9cd 2300 	strdeq	r2, r3, [sp]
 800b664:	e7b2      	b.n	800b5cc <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b666:	b003      	add	sp, #12
 800b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66c:	f3af 8000 	nop.w
 800b670:	fc23ac00 	.word	0xfc23ac00
 800b674:	00000006 	.word	0x00000006
 800b678:	20009258 	.word	0x20009258
 800b67c:	3b9aca00 	.word	0x3b9aca00

0800b680 <run_xrce_session>:
 800b680:	b510      	push	{r4, lr}
 800b682:	788c      	ldrb	r4, [r1, #2]
 800b684:	b086      	sub	sp, #24
 800b686:	2c01      	cmp	r4, #1
 800b688:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b68c:	d00c      	beq.n	800b6a8 <run_xrce_session+0x28>
 800b68e:	4619      	mov	r1, r3
 800b690:	2301      	movs	r3, #1
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	f10d 020e 	add.w	r2, sp, #14
 800b698:	f10d 0317 	add.w	r3, sp, #23
 800b69c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b6a0:	f001 f838 	bl	800c714 <uxr_run_session_until_all_status>
 800b6a4:	b006      	add	sp, #24
 800b6a6:	bd10      	pop	{r4, pc}
 800b6a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b6ac:	f000 fc50 	bl	800bf50 <uxr_flash_output_streams>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	b006      	add	sp, #24
 800b6b4:	bd10      	pop	{r4, pc}
 800b6b6:	bf00      	nop

0800b6b8 <convert_qos_profile>:
 800b6b8:	b430      	push	{r4, r5}
 800b6ba:	7a0d      	ldrb	r5, [r1, #8]
 800b6bc:	780c      	ldrb	r4, [r1, #0]
 800b6be:	7a4a      	ldrb	r2, [r1, #9]
 800b6c0:	8889      	ldrh	r1, [r1, #4]
 800b6c2:	8081      	strh	r1, [r0, #4]
 800b6c4:	f1a5 0502 	sub.w	r5, r5, #2
 800b6c8:	f1a4 0402 	sub.w	r4, r4, #2
 800b6cc:	2a02      	cmp	r2, #2
 800b6ce:	fab5 f585 	clz	r5, r5
 800b6d2:	fab4 f484 	clz	r4, r4
 800b6d6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800b6da:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800b6de:	bf18      	it	ne
 800b6e0:	2200      	movne	r2, #0
 800b6e2:	7045      	strb	r5, [r0, #1]
 800b6e4:	7084      	strb	r4, [r0, #2]
 800b6e6:	7002      	strb	r2, [r0, #0]
 800b6e8:	bc30      	pop	{r4, r5}
 800b6ea:	4770      	bx	lr

0800b6ec <generate_type_name>:
 800b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	700b      	strb	r3, [r1, #0]
 800b6f2:	6803      	ldr	r3, [r0, #0]
 800b6f4:	b087      	sub	sp, #28
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	b1d3      	cbz	r3, 800b730 <generate_type_name+0x44>
 800b6fa:	4d0f      	ldr	r5, [pc, #60]	; (800b738 <generate_type_name+0x4c>)
 800b6fc:	462f      	mov	r7, r5
 800b6fe:	4a0f      	ldr	r2, [pc, #60]	; (800b73c <generate_type_name+0x50>)
 800b700:	4e0f      	ldr	r6, [pc, #60]	; (800b740 <generate_type_name+0x54>)
 800b702:	6840      	ldr	r0, [r0, #4]
 800b704:	9004      	str	r0, [sp, #16]
 800b706:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800b70a:	4608      	mov	r0, r1
 800b70c:	9205      	str	r2, [sp, #20]
 800b70e:	9503      	str	r5, [sp, #12]
 800b710:	4a0c      	ldr	r2, [pc, #48]	; (800b744 <generate_type_name+0x58>)
 800b712:	9700      	str	r7, [sp, #0]
 800b714:	4621      	mov	r1, r4
 800b716:	f008 f893 	bl	8013840 <sniprintf>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	db05      	blt.n	800b72a <generate_type_name+0x3e>
 800b71e:	4284      	cmp	r4, r0
 800b720:	bfd4      	ite	le
 800b722:	2000      	movle	r0, #0
 800b724:	2001      	movgt	r0, #1
 800b726:	b007      	add	sp, #28
 800b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b72a:	2000      	movs	r0, #0
 800b72c:	b007      	add	sp, #28
 800b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <generate_type_name+0x5c>)
 800b732:	4d01      	ldr	r5, [pc, #4]	; (800b738 <generate_type_name+0x4c>)
 800b734:	461f      	mov	r7, r3
 800b736:	e7e2      	b.n	800b6fe <generate_type_name+0x12>
 800b738:	08014ee0 	.word	0x08014ee0
 800b73c:	08014ef4 	.word	0x08014ef4
 800b740:	08014ef8 	.word	0x08014ef8
 800b744:	08014ee4 	.word	0x08014ee4
 800b748:	080151b8 	.word	0x080151b8

0800b74c <generate_topic_name>:
 800b74c:	b510      	push	{r4, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	4b09      	ldr	r3, [pc, #36]	; (800b778 <generate_topic_name+0x2c>)
 800b752:	9000      	str	r0, [sp, #0]
 800b754:	4614      	mov	r4, r2
 800b756:	4608      	mov	r0, r1
 800b758:	4611      	mov	r1, r2
 800b75a:	4a08      	ldr	r2, [pc, #32]	; (800b77c <generate_topic_name+0x30>)
 800b75c:	f008 f870 	bl	8013840 <sniprintf>
 800b760:	2800      	cmp	r0, #0
 800b762:	db05      	blt.n	800b770 <generate_topic_name+0x24>
 800b764:	4284      	cmp	r4, r0
 800b766:	bfd4      	ite	le
 800b768:	2000      	movle	r0, #0
 800b76a:	2001      	movgt	r0, #1
 800b76c:	b002      	add	sp, #8
 800b76e:	bd10      	pop	{r4, pc}
 800b770:	2000      	movs	r0, #0
 800b772:	b002      	add	sp, #8
 800b774:	bd10      	pop	{r4, pc}
 800b776:	bf00      	nop
 800b778:	08014f04 	.word	0x08014f04
 800b77c:	08014efc 	.word	0x08014efc

0800b780 <is_uxrce_rmw_identifier_valid>:
 800b780:	b510      	push	{r4, lr}
 800b782:	4604      	mov	r4, r0
 800b784:	b140      	cbz	r0, 800b798 <is_uxrce_rmw_identifier_valid+0x18>
 800b786:	f005 f8bb 	bl	8010900 <rmw_get_implementation_identifier>
 800b78a:	4601      	mov	r1, r0
 800b78c:	4620      	mov	r0, r4
 800b78e:	f7f4 fd3f 	bl	8000210 <strcmp>
 800b792:	fab0 f080 	clz	r0, r0
 800b796:	0940      	lsrs	r0, r0, #5
 800b798:	bd10      	pop	{r4, pc}
 800b79a:	bf00      	nop

0800b79c <get_message_typesupport_handle>:
 800b79c:	6883      	ldr	r3, [r0, #8]
 800b79e:	4718      	bx	r3

0800b7a0 <get_message_typesupport_handle_function>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	6800      	ldr	r0, [r0, #0]
 800b7a6:	f7f4 fd33 	bl	8000210 <strcmp>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	bf0c      	ite	eq
 800b7ae:	4620      	moveq	r0, r4
 800b7b0:	2000      	movne	r0, #0
 800b7b2:	bd10      	pop	{r4, pc}

0800b7b4 <uxr_buffer_delete_entity>:
 800b7b4:	b530      	push	{r4, r5, lr}
 800b7b6:	b08f      	sub	sp, #60	; 0x3c
 800b7b8:	2403      	movs	r4, #3
 800b7ba:	2500      	movs	r5, #0
 800b7bc:	e9cd 4500 	strd	r4, r5, [sp]
 800b7c0:	9202      	str	r2, [sp, #8]
 800b7c2:	ab06      	add	r3, sp, #24
 800b7c4:	2204      	movs	r2, #4
 800b7c6:	9103      	str	r1, [sp, #12]
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	f001 f9df 	bl	800cb8c <uxr_prepare_stream_to_write_submessage>
 800b7ce:	b918      	cbnz	r0, 800b7d8 <uxr_buffer_delete_entity+0x24>
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	b00f      	add	sp, #60	; 0x3c
 800b7d6:	bd30      	pop	{r4, r5, pc}
 800b7d8:	9902      	ldr	r1, [sp, #8]
 800b7da:	aa05      	add	r2, sp, #20
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f001 fb0f 	bl	800ce00 <uxr_init_base_object_request>
 800b7e2:	a905      	add	r1, sp, #20
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	a806      	add	r0, sp, #24
 800b7e8:	f002 fae8 	bl	800ddbc <uxr_serialize_DELETE_Payload>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	b00f      	add	sp, #60	; 0x3c
 800b7f0:	bd30      	pop	{r4, r5, pc}
 800b7f2:	bf00      	nop

0800b7f4 <uxr_common_create_entity>:
 800b7f4:	b530      	push	{r4, r5, lr}
 800b7f6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800b7fa:	b08d      	sub	sp, #52	; 0x34
 800b7fc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b800:	2d01      	cmp	r5, #1
 800b802:	bf0c      	ite	eq
 800b804:	f003 0201 	andeq.w	r2, r3, #1
 800b808:	2200      	movne	r2, #0
 800b80a:	330e      	adds	r3, #14
 800b80c:	4604      	mov	r4, r0
 800b80e:	441a      	add	r2, r3
 800b810:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800b814:	9001      	str	r0, [sp, #4]
 800b816:	2101      	movs	r1, #1
 800b818:	9100      	str	r1, [sp, #0]
 800b81a:	b292      	uxth	r2, r2
 800b81c:	9903      	ldr	r1, [sp, #12]
 800b81e:	ab04      	add	r3, sp, #16
 800b820:	4620      	mov	r0, r4
 800b822:	f001 f9b3 	bl	800cb8c <uxr_prepare_stream_to_write_submessage>
 800b826:	b918      	cbnz	r0, 800b830 <uxr_common_create_entity+0x3c>
 800b828:	4604      	mov	r4, r0
 800b82a:	4620      	mov	r0, r4
 800b82c:	b00d      	add	sp, #52	; 0x34
 800b82e:	bd30      	pop	{r4, r5, pc}
 800b830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b832:	9902      	ldr	r1, [sp, #8]
 800b834:	4620      	mov	r0, r4
 800b836:	f001 fae3 	bl	800ce00 <uxr_init_base_object_request>
 800b83a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b83c:	4604      	mov	r4, r0
 800b83e:	a804      	add	r0, sp, #16
 800b840:	f002 fa10 	bl	800dc64 <uxr_serialize_CREATE_Payload>
 800b844:	4620      	mov	r0, r4
 800b846:	b00d      	add	sp, #52	; 0x34
 800b848:	bd30      	pop	{r4, r5, pc}
 800b84a:	bf00      	nop

0800b84c <uxr_buffer_create_participant_bin>:
 800b84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800b852:	ac11      	add	r4, sp, #68	; 0x44
 800b854:	9103      	str	r1, [sp, #12]
 800b856:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800b858:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800b85c:	2103      	movs	r1, #3
 800b85e:	7221      	strb	r1, [r4, #8]
 800b860:	2301      	movs	r3, #1
 800b862:	2100      	movs	r1, #0
 800b864:	7123      	strb	r3, [r4, #4]
 800b866:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800b86a:	9202      	str	r2, [sp, #8]
 800b86c:	4605      	mov	r5, r0
 800b86e:	f88d 1014 	strb.w	r1, [sp, #20]
 800b872:	b1ce      	cbz	r6, 800b8a8 <uxr_buffer_create_participant_bin+0x5c>
 800b874:	f88d 301c 	strb.w	r3, [sp, #28]
 800b878:	9608      	str	r6, [sp, #32]
 800b87a:	a809      	add	r0, sp, #36	; 0x24
 800b87c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b880:	a915      	add	r1, sp, #84	; 0x54
 800b882:	f7fe f9eb 	bl	8009c5c <ucdr_init_buffer>
 800b886:	a905      	add	r1, sp, #20
 800b888:	a809      	add	r0, sp, #36	; 0x24
 800b88a:	f001 fe8f 	bl	800d5ac <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b88e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b890:	9401      	str	r4, [sp, #4]
 800b892:	b283      	uxth	r3, r0
 800b894:	9700      	str	r7, [sp, #0]
 800b896:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b89a:	60e0      	str	r0, [r4, #12]
 800b89c:	4628      	mov	r0, r5
 800b89e:	f7ff ffa9 	bl	800b7f4 <uxr_common_create_entity>
 800b8a2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a8:	f88d 601c 	strb.w	r6, [sp, #28]
 800b8ac:	e7e5      	b.n	800b87a <uxr_buffer_create_participant_bin+0x2e>
 800b8ae:	bf00      	nop

0800b8b0 <uxr_buffer_create_topic_bin>:
 800b8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8b2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b8b6:	ac13      	add	r4, sp, #76	; 0x4c
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	9105      	str	r1, [sp, #20]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	a997      	add	r1, sp, #604	; 0x25c
 800b8c0:	2602      	movs	r6, #2
 800b8c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b8c6:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800b8ca:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800b8ce:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800b8d0:	f000 f8ee 	bl	800bab0 <uxr_object_id_to_raw>
 800b8d4:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800b8d6:	9206      	str	r2, [sp, #24]
 800b8d8:	2303      	movs	r3, #3
 800b8da:	2101      	movs	r1, #1
 800b8dc:	7223      	strb	r3, [r4, #8]
 800b8de:	a80b      	add	r0, sp, #44	; 0x2c
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800b8ea:	a917      	add	r1, sp, #92	; 0x5c
 800b8ec:	f88d 301c 	strb.w	r3, [sp, #28]
 800b8f0:	960a      	str	r6, [sp, #40]	; 0x28
 800b8f2:	f7fe f9b3 	bl	8009c5c <ucdr_init_buffer>
 800b8f6:	a906      	add	r1, sp, #24
 800b8f8:	a80b      	add	r0, sp, #44	; 0x2c
 800b8fa:	f001 fe79 	bl	800d5f0 <uxr_serialize_OBJK_Topic_Binary>
 800b8fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800b900:	9401      	str	r4, [sp, #4]
 800b902:	9700      	str	r7, [sp, #0]
 800b904:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b908:	4628      	mov	r0, r5
 800b90a:	b2b3      	uxth	r3, r6
 800b90c:	60e6      	str	r6, [r4, #12]
 800b90e:	f7ff ff71 	bl	800b7f4 <uxr_common_create_entity>
 800b912:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b916:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b918 <uxr_buffer_create_subscriber_bin>:
 800b918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b91a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800b91e:	ac0e      	add	r4, sp, #56	; 0x38
 800b920:	4605      	mov	r5, r0
 800b922:	9105      	str	r1, [sp, #20]
 800b924:	4618      	mov	r0, r3
 800b926:	a992      	add	r1, sp, #584	; 0x248
 800b928:	2604      	movs	r6, #4
 800b92a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b92e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800b932:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800b936:	f000 f8bb 	bl	800bab0 <uxr_object_id_to_raw>
 800b93a:	2103      	movs	r1, #3
 800b93c:	2300      	movs	r3, #0
 800b93e:	a806      	add	r0, sp, #24
 800b940:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b944:	7221      	strb	r1, [r4, #8]
 800b946:	a912      	add	r1, sp, #72	; 0x48
 800b948:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b94c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b950:	f7fe f984 	bl	8009c5c <ucdr_init_buffer>
 800b954:	a993      	add	r1, sp, #588	; 0x24c
 800b956:	a806      	add	r0, sp, #24
 800b958:	f001 fefe 	bl	800d758 <uxr_serialize_OBJK_Subscriber_Binary>
 800b95c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b95e:	9700      	str	r7, [sp, #0]
 800b960:	9401      	str	r4, [sp, #4]
 800b962:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b966:	4628      	mov	r0, r5
 800b968:	b2b3      	uxth	r3, r6
 800b96a:	60e6      	str	r6, [r4, #12]
 800b96c:	f7ff ff42 	bl	800b7f4 <uxr_common_create_entity>
 800b970:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800b974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b976:	bf00      	nop

0800b978 <uxr_buffer_create_datareader_bin>:
 800b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b980:	ac1f      	add	r4, sp, #124	; 0x7c
 800b982:	2506      	movs	r5, #6
 800b984:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b988:	9105      	str	r1, [sp, #20]
 800b98a:	4606      	mov	r6, r0
 800b98c:	a9a3      	add	r1, sp, #652	; 0x28c
 800b98e:	4618      	mov	r0, r3
 800b990:	7125      	strb	r5, [r4, #4]
 800b992:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800b996:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800b99a:	2703      	movs	r7, #3
 800b99c:	f000 f888 	bl	800bab0 <uxr_object_id_to_raw>
 800b9a0:	a90e      	add	r1, sp, #56	; 0x38
 800b9a2:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800b9a4:	7227      	strb	r7, [r4, #8]
 800b9a6:	f000 f883 	bl	800bab0 <uxr_object_id_to_raw>
 800b9aa:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b9ae:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800b9b2:	3d00      	subs	r5, #0
 800b9b4:	f04f 0300 	mov.w	r3, #0
 800b9b8:	bf18      	it	ne
 800b9ba:	2501      	movne	r5, #1
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b9c2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800b9c6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800b9ca:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b9ce:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b9d2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b9d6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b9da:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b9de:	bb89      	cbnz	r1, 800ba44 <uxr_buffer_create_datareader_bin+0xcc>
 800b9e0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800b9e4:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b9e8:	f04f 0c13 	mov.w	ip, #19
 800b9ec:	250b      	movs	r5, #11
 800b9ee:	2221      	movs	r2, #33	; 0x21
 800b9f0:	2111      	movs	r1, #17
 800b9f2:	2009      	movs	r0, #9
 800b9f4:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800b9f8:	b923      	cbnz	r3, 800ba04 <uxr_buffer_create_datareader_bin+0x8c>
 800b9fa:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b9fe:	4672      	mov	r2, lr
 800ba00:	4661      	mov	r1, ip
 800ba02:	4628      	mov	r0, r5
 800ba04:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d025      	beq.n	800ba58 <uxr_buffer_create_datareader_bin+0xe0>
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d029      	beq.n	800ba64 <uxr_buffer_create_datareader_bin+0xec>
 800ba10:	b32b      	cbz	r3, 800ba5e <uxr_buffer_create_datareader_bin+0xe6>
 800ba12:	a806      	add	r0, sp, #24
 800ba14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba18:	a923      	add	r1, sp, #140	; 0x8c
 800ba1a:	f7fe f91f 	bl	8009c5c <ucdr_init_buffer>
 800ba1e:	a90e      	add	r1, sp, #56	; 0x38
 800ba20:	a806      	add	r0, sp, #24
 800ba22:	f001 ff0f 	bl	800d844 <uxr_serialize_OBJK_DataReader_Binary>
 800ba26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba28:	9401      	str	r4, [sp, #4]
 800ba2a:	b283      	uxth	r3, r0
 800ba2c:	f8cd 8000 	str.w	r8, [sp]
 800ba30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ba34:	60e0      	str	r0, [r4, #12]
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7ff fedc 	bl	800b7f4 <uxr_common_create_entity>
 800ba3c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800ba40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba44:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800ba48:	f04f 0c12 	mov.w	ip, #18
 800ba4c:	250a      	movs	r5, #10
 800ba4e:	2220      	movs	r2, #32
 800ba50:	2110      	movs	r1, #16
 800ba52:	2008      	movs	r0, #8
 800ba54:	2702      	movs	r7, #2
 800ba56:	e7cd      	b.n	800b9f4 <uxr_buffer_create_datareader_bin+0x7c>
 800ba58:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ba5c:	e7d9      	b.n	800ba12 <uxr_buffer_create_datareader_bin+0x9a>
 800ba5e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ba62:	e7d6      	b.n	800ba12 <uxr_buffer_create_datareader_bin+0x9a>
 800ba64:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ba68:	e7d3      	b.n	800ba12 <uxr_buffer_create_datareader_bin+0x9a>
 800ba6a:	bf00      	nop

0800ba6c <uxr_object_id>:
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f88d 1006 	strb.w	r1, [sp, #6]
 800ba74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba78:	f360 030f 	bfi	r3, r0, #0, #16
 800ba7c:	f362 431f 	bfi	r3, r2, #16, #16
 800ba80:	4618      	mov	r0, r3
 800ba82:	b002      	add	sp, #8
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop

0800ba88 <uxr_object_id_from_raw>:
 800ba88:	7843      	ldrb	r3, [r0, #1]
 800ba8a:	7801      	ldrb	r1, [r0, #0]
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	f003 000f 	and.w	r0, r3, #15
 800ba92:	f88d 0006 	strb.w	r0, [sp, #6]
 800ba96:	091b      	lsrs	r3, r3, #4
 800ba98:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800baa2:	f363 020f 	bfi	r2, r3, #0, #16
 800baa6:	f361 421f 	bfi	r2, r1, #16, #16
 800baaa:	4610      	mov	r0, r2
 800baac:	b002      	add	sp, #8
 800baae:	4770      	bx	lr

0800bab0 <uxr_object_id_to_raw>:
 800bab0:	4602      	mov	r2, r0
 800bab2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800bab6:	b082      	sub	sp, #8
 800bab8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800babc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800bac0:	700a      	strb	r2, [r1, #0]
 800bac2:	704b      	strb	r3, [r1, #1]
 800bac4:	b002      	add	sp, #8
 800bac6:	4770      	bx	lr

0800bac8 <uxr_buffer_request_data>:
 800bac8:	b530      	push	{r4, r5, lr}
 800baca:	b095      	sub	sp, #84	; 0x54
 800bacc:	4604      	mov	r4, r0
 800bace:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800bad0:	9105      	str	r1, [sp, #20]
 800bad2:	2d00      	cmp	r5, #0
 800bad4:	bf14      	ite	ne
 800bad6:	2101      	movne	r1, #1
 800bad8:	2100      	moveq	r1, #0
 800bada:	9204      	str	r2, [sp, #16]
 800badc:	f04f 0200 	mov.w	r2, #0
 800bae0:	9303      	str	r3, [sp, #12]
 800bae2:	f88d 301c 	strb.w	r3, [sp, #28]
 800bae6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800baea:	f88d 201d 	strb.w	r2, [sp, #29]
 800baee:	f88d 201e 	strb.w	r2, [sp, #30]
 800baf2:	d021      	beq.n	800bb38 <uxr_buffer_request_data+0x70>
 800baf4:	686a      	ldr	r2, [r5, #4]
 800baf6:	682b      	ldr	r3, [r5, #0]
 800baf8:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800bafc:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800bb00:	2210      	movs	r2, #16
 800bb02:	2000      	movs	r0, #0
 800bb04:	2108      	movs	r1, #8
 800bb06:	e9cd 1000 	strd	r1, r0, [sp]
 800bb0a:	ab0c      	add	r3, sp, #48	; 0x30
 800bb0c:	9905      	ldr	r1, [sp, #20]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f001 f83c 	bl	800cb8c <uxr_prepare_stream_to_write_submessage>
 800bb14:	b918      	cbnz	r0, 800bb1e <uxr_buffer_request_data+0x56>
 800bb16:	4604      	mov	r4, r0
 800bb18:	4620      	mov	r0, r4
 800bb1a:	b015      	add	sp, #84	; 0x54
 800bb1c:	bd30      	pop	{r4, r5, pc}
 800bb1e:	9904      	ldr	r1, [sp, #16]
 800bb20:	aa06      	add	r2, sp, #24
 800bb22:	4620      	mov	r0, r4
 800bb24:	f001 f96c 	bl	800ce00 <uxr_init_base_object_request>
 800bb28:	a906      	add	r1, sp, #24
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	a80c      	add	r0, sp, #48	; 0x30
 800bb2e:	f002 f9ef 	bl	800df10 <uxr_serialize_READ_DATA_Payload>
 800bb32:	4620      	mov	r0, r4
 800bb34:	b015      	add	sp, #84	; 0x54
 800bb36:	bd30      	pop	{r4, r5, pc}
 800bb38:	2208      	movs	r2, #8
 800bb3a:	e7e2      	b.n	800bb02 <uxr_buffer_request_data+0x3a>

0800bb3c <uxr_buffer_cancel_data>:
 800bb3c:	b530      	push	{r4, r5, lr}
 800bb3e:	b095      	sub	sp, #84	; 0x54
 800bb40:	2400      	movs	r4, #0
 800bb42:	2308      	movs	r3, #8
 800bb44:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	9205      	str	r2, [sp, #20]
 800bb4c:	2501      	movs	r5, #1
 800bb4e:	ab0c      	add	r3, sp, #48	; 0x30
 800bb50:	2210      	movs	r2, #16
 800bb52:	f8ad 401c 	strh.w	r4, [sp, #28]
 800bb56:	f88d 401e 	strb.w	r4, [sp, #30]
 800bb5a:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800bb5e:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800bb62:	9103      	str	r1, [sp, #12]
 800bb64:	4604      	mov	r4, r0
 800bb66:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800bb6a:	f001 f80f 	bl	800cb8c <uxr_prepare_stream_to_write_submessage>
 800bb6e:	b918      	cbnz	r0, 800bb78 <uxr_buffer_cancel_data+0x3c>
 800bb70:	4604      	mov	r4, r0
 800bb72:	4620      	mov	r0, r4
 800bb74:	b015      	add	sp, #84	; 0x54
 800bb76:	bd30      	pop	{r4, r5, pc}
 800bb78:	9905      	ldr	r1, [sp, #20]
 800bb7a:	aa06      	add	r2, sp, #24
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 f93f 	bl	800ce00 <uxr_init_base_object_request>
 800bb82:	a906      	add	r1, sp, #24
 800bb84:	4604      	mov	r4, r0
 800bb86:	a80c      	add	r0, sp, #48	; 0x30
 800bb88:	f002 f9c2 	bl	800df10 <uxr_serialize_READ_DATA_Payload>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	b015      	add	sp, #84	; 0x54
 800bb90:	bd30      	pop	{r4, r5, pc}
 800bb92:	bf00      	nop

0800bb94 <read_submessage_format>:
 800bb94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb98:	b095      	sub	sp, #84	; 0x54
 800bb9a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800bb9e:	b113      	cbz	r3, 800bba6 <read_submessage_format+0x12>
 800bba0:	b015      	add	sp, #84	; 0x54
 800bba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bba6:	460c      	mov	r4, r1
 800bba8:	4616      	mov	r6, r2
 800bbaa:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800bbae:	461d      	mov	r5, r3
 800bbb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	1a52      	subs	r2, r2, r1
 800bbb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	4607      	mov	r7, r0
 800bbbc:	a80c      	add	r0, sp, #48	; 0x30
 800bbbe:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800bbc2:	f7fe f84b 	bl	8009c5c <ucdr_init_buffer>
 800bbc6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bbca:	a80c      	add	r0, sp, #48	; 0x30
 800bbcc:	f7fe f81c 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 800bbd0:	69e3      	ldr	r3, [r4, #28]
 800bbd2:	b193      	cbz	r3, 800bbfa <read_submessage_format+0x66>
 800bbd4:	f1b8 0f07 	cmp.w	r8, #7
 800bbd8:	751d      	strb	r5, [r3, #20]
 800bbda:	d03e      	beq.n	800bc5a <read_submessage_format+0xc6>
 800bbdc:	f1b8 0f08 	cmp.w	r8, #8
 800bbe0:	d02c      	beq.n	800bc3c <read_submessage_format+0xa8>
 800bbe2:	f1b8 0f06 	cmp.w	r8, #6
 800bbe6:	d011      	beq.n	800bc0c <read_submessage_format+0x78>
 800bbe8:	2201      	movs	r2, #1
 800bbea:	751a      	strb	r2, [r3, #20]
 800bbec:	4631      	mov	r1, r6
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f7fe f884 	bl	8009cfc <ucdr_advance_buffer>
 800bbf4:	b015      	add	sp, #84	; 0x54
 800bbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbfa:	f1b8 0f07 	cmp.w	r8, #7
 800bbfe:	d02c      	beq.n	800bc5a <read_submessage_format+0xc6>
 800bc00:	f1b8 0f08 	cmp.w	r8, #8
 800bc04:	d01a      	beq.n	800bc3c <read_submessage_format+0xa8>
 800bc06:	f1b8 0f06 	cmp.w	r8, #6
 800bc0a:	d1ef      	bne.n	800bbec <read_submessage_format+0x58>
 800bc0c:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800bc10:	b18d      	cbz	r5, 800bc36 <read_submessage_format+0xa2>
 800bc12:	2306      	movs	r3, #6
 800bc14:	f88d 3016 	strb.w	r3, [sp, #22]
 800bc18:	aa0c      	add	r2, sp, #48	; 0x30
 800bc1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc1e:	9302      	str	r3, [sp, #8]
 800bc20:	9200      	str	r2, [sp, #0]
 800bc22:	9b04      	ldr	r3, [sp, #16]
 800bc24:	9905      	ldr	r1, [sp, #20]
 800bc26:	9601      	str	r6, [sp, #4]
 800bc28:	464a      	mov	r2, r9
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	47a8      	blx	r5
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800bc34:	69e3      	ldr	r3, [r4, #28]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1d6      	bne.n	800bbe8 <read_submessage_format+0x54>
 800bc3a:	e7d7      	b.n	800bbec <read_submessage_format+0x58>
 800bc3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bc40:	2a00      	cmp	r2, #0
 800bc42:	d0f8      	beq.n	800bc36 <read_submessage_format+0xa2>
 800bc44:	a906      	add	r1, sp, #24
 800bc46:	a80c      	add	r0, sp, #48	; 0x30
 800bc48:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bc4a:	f002 fa27 	bl	800e09c <uxr_deserialize_SampleIdentity>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d13c      	bne.n	800bccc <read_submessage_format+0x138>
 800bc52:	69e3      	ldr	r3, [r4, #28]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1c7      	bne.n	800bbe8 <read_submessage_format+0x54>
 800bc58:	e7c8      	b.n	800bbec <read_submessage_format+0x58>
 800bc5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bc5e:	b132      	cbz	r2, 800bc6e <read_submessage_format+0xda>
 800bc60:	a906      	add	r1, sp, #24
 800bc62:	a80c      	add	r0, sp, #48	; 0x30
 800bc64:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bc66:	f001 fed7 	bl	800da18 <uxr_deserialize_BaseObjectRequest>
 800bc6a:	b930      	cbnz	r0, 800bc7a <read_submessage_format+0xe6>
 800bc6c:	69e3      	ldr	r3, [r4, #28]
 800bc6e:	68a2      	ldr	r2, [r4, #8]
 800bc70:	4432      	add	r2, r6
 800bc72:	60a2      	str	r2, [r4, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1b7      	bne.n	800bbe8 <read_submessage_format+0x54>
 800bc78:	e7b8      	b.n	800bbec <read_submessage_format+0x58>
 800bc7a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bc7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc80:	1a52      	subs	r2, r2, r1
 800bc82:	a80c      	add	r0, sp, #48	; 0x30
 800bc84:	1aed      	subs	r5, r5, r3
 800bc86:	f7fd ffe9 	bl	8009c5c <ucdr_init_buffer>
 800bc8a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bc8e:	a80c      	add	r0, sp, #48	; 0x30
 800bc90:	f7fd ffba 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 800bc94:	4435      	add	r5, r6
 800bc96:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bc9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bc9e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800bca2:	9002      	str	r0, [sp, #8]
 800bca4:	2207      	movs	r2, #7
 800bca6:	f88d 2016 	strb.w	r2, [sp, #22]
 800bcaa:	b2ad      	uxth	r5, r5
 800bcac:	aa0c      	add	r2, sp, #48	; 0x30
 800bcae:	9200      	str	r2, [sp, #0]
 800bcb0:	9501      	str	r5, [sp, #4]
 800bcb2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	9905      	ldr	r1, [sp, #20]
 800bcba:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800bcbe:	464a      	mov	r2, r9
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	47a8      	blx	r5
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800bcca:	e7cf      	b.n	800bc6c <read_submessage_format+0xd8>
 800bccc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800bcd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcd2:	1a52      	subs	r2, r2, r1
 800bcd4:	a80c      	add	r0, sp, #48	; 0x30
 800bcd6:	1aed      	subs	r5, r5, r3
 800bcd8:	f7fd ffc0 	bl	8009c5c <ucdr_init_buffer>
 800bcdc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bce0:	a80c      	add	r0, sp, #48	; 0x30
 800bce2:	f7fd ff91 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 800bce6:	4435      	add	r5, r6
 800bce8:	2308      	movs	r3, #8
 800bcea:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bcee:	f88d 3016 	strb.w	r3, [sp, #22]
 800bcf2:	b2ad      	uxth	r5, r5
 800bcf4:	ab0c      	add	r3, sp, #48	; 0x30
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	9002      	str	r0, [sp, #8]
 800bcfa:	9501      	str	r5, [sp, #4]
 800bcfc:	ab06      	add	r3, sp, #24
 800bcfe:	9905      	ldr	r1, [sp, #20]
 800bd00:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800bd04:	464a      	mov	r2, r9
 800bd06:	4638      	mov	r0, r7
 800bd08:	47a8      	blx	r5
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800bd10:	e79f      	b.n	800bc52 <read_submessage_format+0xbe>
 800bd12:	bf00      	nop

0800bd14 <on_get_fragmentation_info>:
 800bd14:	b500      	push	{lr}
 800bd16:	b08b      	sub	sp, #44	; 0x2c
 800bd18:	4601      	mov	r1, r0
 800bd1a:	2204      	movs	r2, #4
 800bd1c:	a802      	add	r0, sp, #8
 800bd1e:	f7fd ff9d 	bl	8009c5c <ucdr_init_buffer>
 800bd22:	f10d 0305 	add.w	r3, sp, #5
 800bd26:	a802      	add	r0, sp, #8
 800bd28:	f10d 0206 	add.w	r2, sp, #6
 800bd2c:	a901      	add	r1, sp, #4
 800bd2e:	f001 f9eb 	bl	800d108 <uxr_read_submessage_header>
 800bd32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd36:	2b0d      	cmp	r3, #13
 800bd38:	d003      	beq.n	800bd42 <on_get_fragmentation_info+0x2e>
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	b00b      	add	sp, #44	; 0x2c
 800bd3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd46:	f013 0f02 	tst.w	r3, #2
 800bd4a:	bf14      	ite	ne
 800bd4c:	2002      	movne	r0, #2
 800bd4e:	2001      	moveq	r0, #1
 800bd50:	b00b      	add	sp, #44	; 0x2c
 800bd52:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd56:	bf00      	nop

0800bd58 <read_submessage_get_info>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	2500      	movs	r5, #0
 800bd5c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800bd60:	4604      	mov	r4, r0
 800bd62:	f44f 7224 	mov.w	r2, #656	; 0x290
 800bd66:	460e      	mov	r6, r1
 800bd68:	a810      	add	r0, sp, #64	; 0x40
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800bd70:	f007 fbcc 	bl	801350c <memset>
 800bd74:	a903      	add	r1, sp, #12
 800bd76:	4630      	mov	r0, r6
 800bd78:	f002 f80c 	bl	800dd94 <uxr_deserialize_GET_INFO_Payload>
 800bd7c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bd80:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800bd84:	4620      	mov	r0, r4
 800bd86:	f001 f833 	bl	800cdf0 <uxr_session_header_offset>
 800bd8a:	462b      	mov	r3, r5
 800bd8c:	9000      	str	r0, [sp, #0]
 800bd8e:	a905      	add	r1, sp, #20
 800bd90:	a808      	add	r0, sp, #32
 800bd92:	220c      	movs	r2, #12
 800bd94:	f7fd ff50 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 800bd98:	a910      	add	r1, sp, #64	; 0x40
 800bd9a:	a808      	add	r0, sp, #32
 800bd9c:	f002 f86c 	bl	800de78 <uxr_serialize_INFO_Payload>
 800bda0:	9b08      	ldr	r3, [sp, #32]
 800bda2:	462a      	mov	r2, r5
 800bda4:	4629      	mov	r1, r5
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 ffca 	bl	800cd40 <uxr_stamp_session_header>
 800bdac:	a808      	add	r0, sp, #32
 800bdae:	f7fd ff81 	bl	8009cb4 <ucdr_buffer_length>
 800bdb2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	a905      	add	r1, sp, #20
 800bdb8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bdbc:	47a0      	blx	r4
 800bdbe:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}

0800bdc4 <write_submessage_acknack.isra.0>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	b092      	sub	sp, #72	; 0x48
 800bdc8:	4605      	mov	r5, r0
 800bdca:	460e      	mov	r6, r1
 800bdcc:	4614      	mov	r4, r2
 800bdce:	f001 f80f 	bl	800cdf0 <uxr_session_header_offset>
 800bdd2:	a905      	add	r1, sp, #20
 800bdd4:	9000      	str	r0, [sp, #0]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	a80a      	add	r0, sp, #40	; 0x28
 800bdda:	2211      	movs	r2, #17
 800bddc:	f7fd ff2c 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 800bde0:	2218      	movs	r2, #24
 800bde2:	fb02 5404 	mla	r4, r2, r4, r5
 800bde6:	2300      	movs	r3, #0
 800bde8:	2205      	movs	r2, #5
 800bdea:	3450      	adds	r4, #80	; 0x50
 800bdec:	a80a      	add	r0, sp, #40	; 0x28
 800bdee:	210a      	movs	r1, #10
 800bdf0:	f001 f970 	bl	800d0d4 <uxr_buffer_submessage_header>
 800bdf4:	a903      	add	r1, sp, #12
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f006 f8a4 	bl	8011f44 <uxr_compute_acknack>
 800bdfc:	a903      	add	r1, sp, #12
 800bdfe:	ba43      	rev16	r3, r0
 800be00:	a80a      	add	r0, sp, #40	; 0x28
 800be02:	f8ad 300e 	strh.w	r3, [sp, #14]
 800be06:	f88d 6010 	strb.w	r6, [sp, #16]
 800be0a:	f002 f8a5 	bl	800df58 <uxr_serialize_ACKNACK_Payload>
 800be0e:	2200      	movs	r2, #0
 800be10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be12:	4611      	mov	r1, r2
 800be14:	4628      	mov	r0, r5
 800be16:	f000 ff93 	bl	800cd40 <uxr_stamp_session_header>
 800be1a:	a80a      	add	r0, sp, #40	; 0x28
 800be1c:	f7fd ff4a 	bl	8009cb4 <ucdr_buffer_length>
 800be20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800be22:	4602      	mov	r2, r0
 800be24:	a905      	add	r1, sp, #20
 800be26:	e9d3 0400 	ldrd	r0, r4, [r3]
 800be2a:	47a0      	blx	r4
 800be2c:	b012      	add	sp, #72	; 0x48
 800be2e:	bd70      	pop	{r4, r5, r6, pc}

0800be30 <uxr_init_session>:
 800be30:	b5d0      	push	{r4, r6, r7, lr}
 800be32:	2300      	movs	r3, #0
 800be34:	2600      	movs	r6, #0
 800be36:	2700      	movs	r7, #0
 800be38:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800be3c:	4604      	mov	r4, r0
 800be3e:	6701      	str	r1, [r0, #112]	; 0x70
 800be40:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800be44:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800be48:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800be4c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800be50:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800be54:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800be58:	2181      	movs	r1, #129	; 0x81
 800be5a:	f000 fedb 	bl	800cc14 <uxr_init_session_info>
 800be5e:	f104 0008 	add.w	r0, r4, #8
 800be62:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800be66:	f001 b851 	b.w	800cf0c <uxr_init_stream_storage>
 800be6a:	bf00      	nop

0800be6c <uxr_set_status_callback>:
 800be6c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop

0800be74 <uxr_set_topic_callback>:
 800be74:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop

0800be7c <uxr_set_request_callback>:
 800be7c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop

0800be84 <uxr_set_reply_callback>:
 800be84:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop

0800be8c <uxr_create_output_best_effort_stream>:
 800be8c:	b510      	push	{r4, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	e9cd 2100 	strd	r2, r1, [sp]
 800be94:	4604      	mov	r4, r0
 800be96:	f000 ffab 	bl	800cdf0 <uxr_session_header_offset>
 800be9a:	e9dd 2100 	ldrd	r2, r1, [sp]
 800be9e:	4603      	mov	r3, r0
 800bea0:	f104 0008 	add.w	r0, r4, #8
 800bea4:	b004      	add	sp, #16
 800bea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beaa:	f001 b879 	b.w	800cfa0 <uxr_add_output_best_effort_buffer>
 800beae:	bf00      	nop

0800beb0 <uxr_create_output_reliable_stream>:
 800beb0:	b530      	push	{r4, r5, lr}
 800beb2:	b089      	sub	sp, #36	; 0x24
 800beb4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800beb8:	9303      	str	r3, [sp, #12]
 800beba:	4604      	mov	r4, r0
 800bebc:	f000 ff98 	bl	800cdf0 <uxr_session_header_offset>
 800bec0:	4605      	mov	r5, r0
 800bec2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bec6:	9905      	ldr	r1, [sp, #20]
 800bec8:	9500      	str	r5, [sp, #0]
 800beca:	f104 0008 	add.w	r0, r4, #8
 800bece:	f001 f879 	bl	800cfc4 <uxr_add_output_reliable_buffer>
 800bed2:	2200      	movs	r2, #0
 800bed4:	b2c3      	uxtb	r3, r0
 800bed6:	f363 0207 	bfi	r2, r3, #0, #8
 800beda:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bede:	f363 220f 	bfi	r2, r3, #8, #8
 800bee2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bee6:	f363 4217 	bfi	r2, r3, #16, #8
 800beea:	0e03      	lsrs	r3, r0, #24
 800beec:	f363 621f 	bfi	r2, r3, #24, #8
 800bef0:	4610      	mov	r0, r2
 800bef2:	b009      	add	sp, #36	; 0x24
 800bef4:	bd30      	pop	{r4, r5, pc}
 800bef6:	bf00      	nop

0800bef8 <uxr_create_input_best_effort_stream>:
 800bef8:	b082      	sub	sp, #8
 800befa:	3008      	adds	r0, #8
 800befc:	b002      	add	sp, #8
 800befe:	f001 b87b 	b.w	800cff8 <uxr_add_input_best_effort_buffer>
 800bf02:	bf00      	nop

0800bf04 <uxr_create_input_reliable_stream>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	4c0b      	ldr	r4, [pc, #44]	; (800bf38 <uxr_create_input_reliable_stream+0x34>)
 800bf0a:	9400      	str	r4, [sp, #0]
 800bf0c:	3008      	adds	r0, #8
 800bf0e:	f001 f889 	bl	800d024 <uxr_add_input_reliable_buffer>
 800bf12:	2200      	movs	r2, #0
 800bf14:	b2c3      	uxtb	r3, r0
 800bf16:	f363 0207 	bfi	r2, r3, #0, #8
 800bf1a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bf1e:	f363 220f 	bfi	r2, r3, #8, #8
 800bf22:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bf26:	f363 4217 	bfi	r2, r3, #16, #8
 800bf2a:	0e03      	lsrs	r3, r0, #24
 800bf2c:	f363 621f 	bfi	r2, r3, #24, #8
 800bf30:	4610      	mov	r0, r2
 800bf32:	b004      	add	sp, #16
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	bf00      	nop
 800bf38:	0800bd15 	.word	0x0800bd15

0800bf3c <uxr_epoch_nanos>:
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	4604      	mov	r4, r0
 800bf40:	f001 f92a 	bl	800d198 <uxr_nanos>
 800bf44:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800bf48:	1ac0      	subs	r0, r0, r3
 800bf4a:	eb61 0102 	sbc.w	r1, r1, r2
 800bf4e:	bd10      	pop	{r4, pc}

0800bf50 <uxr_flash_output_streams>:
 800bf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf54:	7e03      	ldrb	r3, [r0, #24]
 800bf56:	b084      	sub	sp, #16
 800bf58:	4604      	mov	r4, r0
 800bf5a:	b1fb      	cbz	r3, 800bf9c <uxr_flash_output_streams+0x4c>
 800bf5c:	f04f 0900 	mov.w	r9, #0
 800bf60:	4648      	mov	r0, r9
 800bf62:	f10d 0802 	add.w	r8, sp, #2
 800bf66:	af03      	add	r7, sp, #12
 800bf68:	ae02      	add	r6, sp, #8
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800bf72:	f000 ff75 	bl	800ce60 <uxr_stream_id>
 800bf76:	3508      	adds	r5, #8
 800bf78:	4684      	mov	ip, r0
 800bf7a:	4643      	mov	r3, r8
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	463a      	mov	r2, r7
 800bf80:	4631      	mov	r1, r6
 800bf82:	f8cd c004 	str.w	ip, [sp, #4]
 800bf86:	f006 f865 	bl	8012054 <uxr_prepare_best_effort_buffer_to_send>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d13d      	bne.n	800c00a <uxr_flash_output_streams+0xba>
 800bf8e:	7e23      	ldrb	r3, [r4, #24]
 800bf90:	f109 0901 	add.w	r9, r9, #1
 800bf94:	fa5f f089 	uxtb.w	r0, r9
 800bf98:	4283      	cmp	r3, r0
 800bf9a:	d8e6      	bhi.n	800bf6a <uxr_flash_output_streams+0x1a>
 800bf9c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bfa0:	b383      	cbz	r3, 800c004 <uxr_flash_output_streams+0xb4>
 800bfa2:	f04f 0900 	mov.w	r9, #0
 800bfa6:	4648      	mov	r0, r9
 800bfa8:	f10d 0802 	add.w	r8, sp, #2
 800bfac:	af03      	add	r7, sp, #12
 800bfae:	ae02      	add	r6, sp, #8
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	2102      	movs	r1, #2
 800bfb4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800bfb8:	f000 ff52 	bl	800ce60 <uxr_stream_id>
 800bfbc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800bfc0:	3520      	adds	r5, #32
 800bfc2:	9001      	str	r0, [sp, #4]
 800bfc4:	e00c      	b.n	800bfe0 <uxr_flash_output_streams+0x90>
 800bfc6:	9b02      	ldr	r3, [sp, #8]
 800bfc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bfcc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800bfd0:	f000 feb6 	bl	800cd40 <uxr_stamp_session_header>
 800bfd4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bfd6:	9a03      	ldr	r2, [sp, #12]
 800bfd8:	9902      	ldr	r1, [sp, #8]
 800bfda:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800bfde:	47d0      	blx	sl
 800bfe0:	4643      	mov	r3, r8
 800bfe2:	463a      	mov	r2, r7
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f006 fa48 	bl	801247c <uxr_prepare_next_reliable_buffer_to_send>
 800bfec:	4603      	mov	r3, r0
 800bfee:	4620      	mov	r0, r4
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1e8      	bne.n	800bfc6 <uxr_flash_output_streams+0x76>
 800bff4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bff8:	f109 0901 	add.w	r9, r9, #1
 800bffc:	fa5f f089 	uxtb.w	r0, r9
 800c000:	4283      	cmp	r3, r0
 800c002:	d8d5      	bhi.n	800bfb0 <uxr_flash_output_streams+0x60>
 800c004:	b004      	add	sp, #16
 800c006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00a:	9b02      	ldr	r3, [sp, #8]
 800c00c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c010:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fe93 	bl	800cd40 <uxr_stamp_session_header>
 800c01a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c01c:	9a03      	ldr	r2, [sp, #12]
 800c01e:	9902      	ldr	r1, [sp, #8]
 800c020:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c024:	47a8      	blx	r5
 800c026:	f109 0901 	add.w	r9, r9, #1
 800c02a:	7e23      	ldrb	r3, [r4, #24]
 800c02c:	fa5f f089 	uxtb.w	r0, r9
 800c030:	4283      	cmp	r3, r0
 800c032:	d89a      	bhi.n	800bf6a <uxr_flash_output_streams+0x1a>
 800c034:	e7b2      	b.n	800bf9c <uxr_flash_output_streams+0x4c>
 800c036:	bf00      	nop

0800c038 <read_submessage_info>:
 800c038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03c:	460d      	mov	r5, r1
 800c03e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800c042:	4669      	mov	r1, sp
 800c044:	4607      	mov	r7, r0
 800c046:	4628      	mov	r0, r5
 800c048:	f001 fdaa 	bl	800dba0 <uxr_deserialize_BaseObjectReply>
 800c04c:	a902      	add	r1, sp, #8
 800c04e:	4604      	mov	r4, r0
 800c050:	4628      	mov	r0, r5
 800c052:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800c056:	f7fc fca7 	bl	80089a8 <ucdr_deserialize_bool>
 800c05a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c05e:	4004      	ands	r4, r0
 800c060:	b2e4      	uxtb	r4, r4
 800c062:	b95b      	cbnz	r3, 800c07c <read_submessage_info+0x44>
 800c064:	a987      	add	r1, sp, #540	; 0x21c
 800c066:	4628      	mov	r0, r5
 800c068:	f7fc fc9e 	bl	80089a8 <ucdr_deserialize_bool>
 800c06c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800c070:	4606      	mov	r6, r0
 800c072:	b94b      	cbnz	r3, 800c088 <read_submessage_info+0x50>
 800c074:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c07c:	a903      	add	r1, sp, #12
 800c07e:	4628      	mov	r0, r5
 800c080:	f001 fc1c 	bl	800d8bc <uxr_deserialize_ObjectVariant>
 800c084:	4004      	ands	r4, r0
 800c086:	e7ed      	b.n	800c064 <read_submessage_info+0x2c>
 800c088:	a988      	add	r1, sp, #544	; 0x220
 800c08a:	4628      	mov	r0, r5
 800c08c:	f7fc fcbc 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800c090:	4234      	tst	r4, r6
 800c092:	d0ef      	beq.n	800c074 <read_submessage_info+0x3c>
 800c094:	2800      	cmp	r0, #0
 800c096:	d0ed      	beq.n	800c074 <read_submessage_info+0x3c>
 800c098:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800c09c:	2b0d      	cmp	r3, #13
 800c09e:	d1e9      	bne.n	800c074 <read_submessage_info+0x3c>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	a98a      	add	r1, sp, #552	; 0x228
 800c0a4:	f7fd fa56 	bl	8009554 <ucdr_deserialize_int16_t>
 800c0a8:	b140      	cbz	r0, 800c0bc <read_submessage_info+0x84>
 800c0aa:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd07      	ble.n	800c0c2 <read_submessage_info+0x8a>
 800c0b2:	f1b8 0f00 	cmp.w	r8, #0
 800c0b6:	bf14      	ite	ne
 800c0b8:	2001      	movne	r0, #1
 800c0ba:	2002      	moveq	r0, #2
 800c0bc:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800c0c0:	e7d8      	b.n	800c074 <read_submessage_info+0x3c>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	e7fa      	b.n	800c0bc <read_submessage_info+0x84>
 800c0c6:	bf00      	nop

0800c0c8 <read_submessage_list>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	b098      	sub	sp, #96	; 0x60
 800c0ce:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800c3d4 <read_submessage_list+0x30c>
 800c0d2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	4688      	mov	r8, r1
 800c0d8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800c0dc:	aa0e      	add	r2, sp, #56	; 0x38
 800c0de:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	f001 f810 	bl	800d108 <uxr_read_submessage_header>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	f000 813d 	beq.w	800c368 <read_submessage_list+0x2a0>
 800c0ee:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800c0f2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800c0f6:	3b02      	subs	r3, #2
 800c0f8:	2b0d      	cmp	r3, #13
 800c0fa:	d8ed      	bhi.n	800c0d8 <read_submessage_list+0x10>
 800c0fc:	a101      	add	r1, pc, #4	; (adr r1, 800c104 <read_submessage_list+0x3c>)
 800c0fe:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c102:	bf00      	nop
 800c104:	0800c35f 	.word	0x0800c35f
 800c108:	0800c0d9 	.word	0x0800c0d9
 800c10c:	0800c34f 	.word	0x0800c34f
 800c110:	0800c2f3 	.word	0x0800c2f3
 800c114:	0800c2e9 	.word	0x0800c2e9
 800c118:	0800c0d9 	.word	0x0800c0d9
 800c11c:	0800c0d9 	.word	0x0800c0d9
 800c120:	0800c24b 	.word	0x0800c24b
 800c124:	0800c1dd 	.word	0x0800c1dd
 800c128:	0800c19b 	.word	0x0800c19b
 800c12c:	0800c0d9 	.word	0x0800c0d9
 800c130:	0800c0d9 	.word	0x0800c0d9
 800c134:	0800c0d9 	.word	0x0800c0d9
 800c138:	0800c13d 	.word	0x0800c13d
 800c13c:	a912      	add	r1, sp, #72	; 0x48
 800c13e:	4640      	mov	r0, r8
 800c140:	f001 ff5a 	bl	800dff8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800c144:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800c148:	2d00      	cmp	r5, #0
 800c14a:	f000 8115 	beq.w	800c378 <read_submessage_list+0x2b0>
 800c14e:	f001 f823 	bl	800d198 <uxr_nanos>
 800c152:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c154:	460b      	mov	r3, r1
 800c156:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c158:	2700      	movs	r7, #0
 800c15a:	fbc9 6701 	smlal	r6, r7, r9, r1
 800c15e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c162:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c164:	4602      	mov	r2, r0
 800c166:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c168:	460e      	mov	r6, r1
 800c16a:	2700      	movs	r7, #0
 800c16c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c170:	9106      	str	r1, [sp, #24]
 800c172:	fbc9 6700 	smlal	r6, r7, r9, r0
 800c176:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c178:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c17c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c17e:	2700      	movs	r7, #0
 800c180:	4608      	mov	r0, r1
 800c182:	4639      	mov	r1, r7
 800c184:	fbc9 0106 	smlal	r0, r1, r9, r6
 800c188:	e9cd 0100 	strd	r0, r1, [sp]
 800c18c:	4620      	mov	r0, r4
 800c18e:	47a8      	blx	r5
 800c190:	f04f 0301 	mov.w	r3, #1
 800c194:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800c198:	e79e      	b.n	800c0d8 <read_submessage_list+0x10>
 800c19a:	a912      	add	r1, sp, #72	; 0x48
 800c19c:	4640      	mov	r0, r8
 800c19e:	f001 ff19 	bl	800dfd4 <uxr_deserialize_HEARTBEAT_Payload>
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800c1a8:	f000 fe84 	bl	800ceb4 <uxr_stream_id_from_raw>
 800c1ac:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	f104 0008 	add.w	r0, r4, #8
 800c1b8:	9311      	str	r3, [sp, #68]	; 0x44
 800c1ba:	f000 ff69 	bl	800d090 <uxr_get_input_reliable_stream>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d08a      	beq.n	800c0d8 <read_submessage_list+0x10>
 800c1c2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800c1c6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800c1ca:	f005 feaf 	bl	8011f2c <uxr_process_heartbeat>
 800c1ce:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800c1d2:	462a      	mov	r2, r5
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff fdf5 	bl	800bdc4 <write_submessage_acknack.isra.0>
 800c1da:	e77d      	b.n	800c0d8 <read_submessage_list+0x10>
 800c1dc:	a912      	add	r1, sp, #72	; 0x48
 800c1de:	4640      	mov	r0, r8
 800c1e0:	f001 fed0 	bl	800df84 <uxr_deserialize_ACKNACK_Payload>
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800c1ea:	f000 fe63 	bl	800ceb4 <uxr_stream_id_from_raw>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c1f4:	f104 0008 	add.w	r0, r4, #8
 800c1f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1fa:	f000 ff33 	bl	800d064 <uxr_get_output_reliable_stream>
 800c1fe:	4605      	mov	r5, r0
 800c200:	2800      	cmp	r0, #0
 800c202:	f43f af69 	beq.w	800c0d8 <read_submessage_list+0x10>
 800c206:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800c20a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800c20e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800c212:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c216:	b289      	uxth	r1, r1
 800c218:	f006 f9d8 	bl	80125cc <uxr_process_acknack>
 800c21c:	4628      	mov	r0, r5
 800c21e:	f006 f99b 	bl	8012558 <uxr_begin_output_nack_buffer_it>
 800c222:	af10      	add	r7, sp, #64	; 0x40
 800c224:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800c228:	e005      	b.n	800c236 <read_submessage_list+0x16e>
 800c22a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c22c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c22e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c230:	e9d3 0600 	ldrd	r0, r6, [r3]
 800c234:	47b0      	blx	r6
 800c236:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800c23a:	aa11      	add	r2, sp, #68	; 0x44
 800c23c:	4639      	mov	r1, r7
 800c23e:	4628      	mov	r0, r5
 800c240:	f006 f98c 	bl	801255c <uxr_next_reliable_nack_buffer_to_send>
 800c244:	2800      	cmp	r0, #0
 800c246:	d1f0      	bne.n	800c22a <read_submessage_list+0x162>
 800c248:	e746      	b.n	800c0d8 <read_submessage_list+0x10>
 800c24a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800c24e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800c252:	af10      	add	r7, sp, #64	; 0x40
 800c254:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800c258:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800c25c:	4639      	mov	r1, r7
 800c25e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800c262:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800c266:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800c26a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800c26e:	4640      	mov	r0, r8
 800c270:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800c274:	f001 fbd0 	bl	800da18 <uxr_deserialize_BaseObjectRequest>
 800c278:	4638      	mov	r0, r7
 800c27a:	a911      	add	r1, sp, #68	; 0x44
 800c27c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800c280:	f000 fddc 	bl	800ce3c <uxr_parse_base_object_request>
 800c284:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800c288:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c28a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800c28e:	9112      	str	r1, [sp, #72]	; 0x48
 800c290:	3d04      	subs	r5, #4
 800c292:	f006 060e 	and.w	r6, r6, #14
 800c296:	b2ad      	uxth	r5, r5
 800c298:	f1ba 0f00 	cmp.w	sl, #0
 800c29c:	d006      	beq.n	800c2ac <read_submessage_list+0x1e4>
 800c29e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	463a      	mov	r2, r7
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	47d0      	blx	sl
 800c2ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c2ae:	b168      	cbz	r0, 800c2cc <read_submessage_list+0x204>
 800c2b0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	3902      	subs	r1, #2
 800c2b6:	e002      	b.n	800c2be <read_submessage_list+0x1f6>
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	4283      	cmp	r3, r0
 800c2bc:	d006      	beq.n	800c2cc <read_submessage_list+0x204>
 800c2be:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800c2c2:	42ba      	cmp	r2, r7
 800c2c4:	d1f8      	bne.n	800c2b8 <read_submessage_list+0x1f0>
 800c2c6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	54d1      	strb	r1, [r2, r3]
 800c2cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c2ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c2d0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	e9cd 1000 	strd	r1, r0, [sp]
 800c2da:	4633      	mov	r3, r6
 800c2dc:	462a      	mov	r2, r5
 800c2de:	4641      	mov	r1, r8
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f7ff fc57 	bl	800bb94 <read_submessage_format>
 800c2e6:	e6f7      	b.n	800c0d8 <read_submessage_list+0x10>
 800c2e8:	4641      	mov	r1, r8
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f7ff fea4 	bl	800c038 <read_submessage_info>
 800c2f0:	e6f2      	b.n	800c0d8 <read_submessage_list+0x10>
 800c2f2:	2a00      	cmp	r2, #0
 800c2f4:	d03b      	beq.n	800c36e <read_submessage_list+0x2a6>
 800c2f6:	a912      	add	r1, sp, #72	; 0x48
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	f001 fd9f 	bl	800de3c <uxr_deserialize_STATUS_Payload>
 800c2fe:	a910      	add	r1, sp, #64	; 0x40
 800c300:	aa0f      	add	r2, sp, #60	; 0x3c
 800c302:	a812      	add	r0, sp, #72	; 0x48
 800c304:	f000 fd9a 	bl	800ce3c <uxr_parse_base_object_request>
 800c308:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800c30c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c30e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800c312:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800c316:	9111      	str	r1, [sp, #68]	; 0x44
 800c318:	b135      	cbz	r5, 800c328 <read_submessage_list+0x260>
 800c31a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	4620      	mov	r0, r4
 800c326:	47a8      	blx	r5
 800c328:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f43f aed4 	beq.w	800c0d8 <read_submessage_list+0x10>
 800c330:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c332:	2100      	movs	r1, #0
 800c334:	3802      	subs	r0, #2
 800c336:	e003      	b.n	800c340 <read_submessage_list+0x278>
 800c338:	3101      	adds	r1, #1
 800c33a:	4299      	cmp	r1, r3
 800c33c:	f43f aecc 	beq.w	800c0d8 <read_submessage_list+0x10>
 800c340:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800c344:	42b2      	cmp	r2, r6
 800c346:	d1f7      	bne.n	800c338 <read_submessage_list+0x270>
 800c348:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c34a:	545f      	strb	r7, [r3, r1]
 800c34c:	e6c4      	b.n	800c0d8 <read_submessage_list+0x10>
 800c34e:	2a00      	cmp	r2, #0
 800c350:	f47f aec2 	bne.w	800c0d8 <read_submessage_list+0x10>
 800c354:	4641      	mov	r1, r8
 800c356:	4620      	mov	r0, r4
 800c358:	f000 fcb4 	bl	800ccc4 <uxr_read_create_session_status>
 800c35c:	e6bc      	b.n	800c0d8 <read_submessage_list+0x10>
 800c35e:	4641      	mov	r1, r8
 800c360:	4620      	mov	r0, r4
 800c362:	f7ff fcf9 	bl	800bd58 <read_submessage_get_info>
 800c366:	e6b7      	b.n	800c0d8 <read_submessage_list+0x10>
 800c368:	b018      	add	sp, #96	; 0x60
 800c36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36e:	4641      	mov	r1, r8
 800c370:	4620      	mov	r0, r4
 800c372:	f000 fcb3 	bl	800ccdc <uxr_read_delete_session_status>
 800c376:	e6af      	b.n	800c0d8 <read_submessage_list+0x10>
 800c378:	f000 ff0e 	bl	800d198 <uxr_nanos>
 800c37c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c37e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c382:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c384:	2700      	movs	r7, #0
 800c386:	fbc9 6703 	smlal	r6, r7, r9, r3
 800c38a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c38c:	eb16 0c00 	adds.w	ip, r6, r0
 800c390:	4618      	mov	r0, r3
 800c392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c394:	eb47 0e01 	adc.w	lr, r7, r1
 800c398:	461e      	mov	r6, r3
 800c39a:	2100      	movs	r1, #0
 800c39c:	2700      	movs	r7, #0
 800c39e:	fbc9 0105 	smlal	r0, r1, r9, r5
 800c3a2:	fbc9 6702 	smlal	r6, r7, r9, r2
 800c3a6:	1983      	adds	r3, r0, r6
 800c3a8:	eb41 0207 	adc.w	r2, r1, r7
 800c3ac:	ebbc 0303 	subs.w	r3, ip, r3
 800c3b0:	9308      	str	r3, [sp, #32]
 800c3b2:	eb6e 0302 	sbc.w	r3, lr, r2
 800c3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c3bc:	0fd3      	lsrs	r3, r2, #31
 800c3be:	18c9      	adds	r1, r1, r3
 800c3c0:	f142 0200 	adc.w	r2, r2, #0
 800c3c4:	084b      	lsrs	r3, r1, #1
 800c3c6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800c3ca:	1052      	asrs	r2, r2, #1
 800c3cc:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800c3d0:	e6de      	b.n	800c190 <read_submessage_list+0xc8>
 800c3d2:	bf00      	nop
 800c3d4:	3b9aca00 	.word	0x3b9aca00

0800c3d8 <listen_message_reliably>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	1e0b      	subs	r3, r1, #0
 800c3de:	b09d      	sub	sp, #116	; 0x74
 800c3e0:	bfb8      	it	lt
 800c3e2:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800c3e6:	9305      	str	r3, [sp, #20]
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	f000 feb9 	bl	800d160 <uxr_millis>
 800c3ee:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800c3f2:	4681      	mov	r9, r0
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	f000 8095 	beq.w	800c524 <listen_message_reliably+0x14c>
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c400:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c404:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c408:	4630      	mov	r0, r6
 800c40a:	4688      	mov	r8, r1
 800c40c:	46ca      	mov	sl, r9
 800c40e:	e00f      	b.n	800c430 <listen_message_reliably+0x58>
 800c410:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c414:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c418:	42a2      	cmp	r2, r4
 800c41a:	eb73 0105 	sbcs.w	r1, r3, r5
 800c41e:	bfb8      	it	lt
 800c420:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800c424:	3601      	adds	r6, #1
 800c426:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c42a:	b2f0      	uxtb	r0, r6
 800c42c:	4283      	cmp	r3, r0
 800c42e:	d951      	bls.n	800c4d4 <listen_message_reliably+0xfc>
 800c430:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c434:	2201      	movs	r2, #1
 800c436:	2102      	movs	r1, #2
 800c438:	f000 fd12 	bl	800ce60 <uxr_stream_id>
 800c43c:	00e4      	lsls	r4, r4, #3
 800c43e:	f104 0520 	add.w	r5, r4, #32
 800c442:	443d      	add	r5, r7
 800c444:	4601      	mov	r1, r0
 800c446:	4643      	mov	r3, r8
 800c448:	4652      	mov	r2, sl
 800c44a:	4628      	mov	r0, r5
 800c44c:	9109      	str	r1, [sp, #36]	; 0x24
 800c44e:	f006 f857 	bl	8012500 <uxr_update_output_stream_heartbeat_timestamp>
 800c452:	193b      	adds	r3, r7, r4
 800c454:	2800      	cmp	r0, #0
 800c456:	d0db      	beq.n	800c410 <listen_message_reliably+0x38>
 800c458:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800c45c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800c460:	4638      	mov	r0, r7
 800c462:	f000 fcc5 	bl	800cdf0 <uxr_session_header_offset>
 800c466:	3501      	adds	r5, #1
 800c468:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800c46c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c470:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800c474:	9000      	str	r0, [sp, #0]
 800c476:	2300      	movs	r3, #0
 800c478:	4658      	mov	r0, fp
 800c47a:	2211      	movs	r2, #17
 800c47c:	a90c      	add	r1, sp, #48	; 0x30
 800c47e:	f7fd fbdb 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 800c482:	2300      	movs	r3, #0
 800c484:	2205      	movs	r2, #5
 800c486:	210b      	movs	r1, #11
 800c488:	4658      	mov	r0, fp
 800c48a:	f000 fe23 	bl	800d0d4 <uxr_buffer_submessage_header>
 800c48e:	8968      	ldrh	r0, [r5, #10]
 800c490:	2101      	movs	r1, #1
 800c492:	f006 f8d3 	bl	801263c <uxr_seq_num_add>
 800c496:	892a      	ldrh	r2, [r5, #8]
 800c498:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800c49c:	4603      	mov	r3, r0
 800c49e:	a90a      	add	r1, sp, #40	; 0x28
 800c4a0:	4658      	mov	r0, fp
 800c4a2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800c4a6:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800c4aa:	f001 fd7f 	bl	800dfac <uxr_serialize_HEARTBEAT_Payload>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f000 fc43 	bl	800cd40 <uxr_stamp_session_header>
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f7fd fbfa 	bl	8009cb4 <ucdr_buffer_length>
 800c4c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	a90c      	add	r1, sp, #48	; 0x30
 800c4c6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c4ca:	443c      	add	r4, r7
 800c4cc:	47a8      	blx	r5
 800c4ce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800c4d2:	e79f      	b.n	800c414 <listen_message_reliably+0x3c>
 800c4d4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800c4d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c4dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c4e0:	4294      	cmp	r4, r2
 800c4e2:	bf08      	it	eq
 800c4e4:	428b      	cmpeq	r3, r1
 800c4e6:	d01d      	beq.n	800c524 <listen_message_reliably+0x14c>
 800c4e8:	eba3 030a 	sub.w	r3, r3, sl
 800c4ec:	9905      	ldr	r1, [sp, #20]
 800c4ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf08      	it	eq
 800c4f4:	2301      	moveq	r3, #1
 800c4f6:	4299      	cmp	r1, r3
 800c4f8:	bfa8      	it	ge
 800c4fa:	4619      	movge	r1, r3
 800c4fc:	6894      	ldr	r4, [r2, #8]
 800c4fe:	6810      	ldr	r0, [r2, #0]
 800c500:	4689      	mov	r9, r1
 800c502:	460b      	mov	r3, r1
 800c504:	aa08      	add	r2, sp, #32
 800c506:	a907      	add	r1, sp, #28
 800c508:	47a0      	blx	r4
 800c50a:	b968      	cbnz	r0, 800c528 <listen_message_reliably+0x150>
 800c50c:	9b05      	ldr	r3, [sp, #20]
 800c50e:	eba3 0309 	sub.w	r3, r3, r9
 800c512:	2b00      	cmp	r3, #0
 800c514:	9305      	str	r3, [sp, #20]
 800c516:	f73f af68 	bgt.w	800c3ea <listen_message_reliably+0x12>
 800c51a:	4604      	mov	r4, r0
 800c51c:	4620      	mov	r0, r4
 800c51e:	b01d      	add	sp, #116	; 0x74
 800c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c524:	9b05      	ldr	r3, [sp, #20]
 800c526:	e7e1      	b.n	800c4ec <listen_message_reliably+0x114>
 800c528:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c52c:	4604      	mov	r4, r0
 800c52e:	a80c      	add	r0, sp, #48	; 0x30
 800c530:	f7fd fb94 	bl	8009c5c <ucdr_init_buffer>
 800c534:	2500      	movs	r5, #0
 800c536:	a90c      	add	r1, sp, #48	; 0x30
 800c538:	f10d 031a 	add.w	r3, sp, #26
 800c53c:	aa06      	add	r2, sp, #24
 800c53e:	4638      	mov	r0, r7
 800c540:	f88d 5018 	strb.w	r5, [sp, #24]
 800c544:	f000 fc12 	bl	800cd6c <uxr_read_session_header>
 800c548:	b918      	cbnz	r0, 800c552 <listen_message_reliably+0x17a>
 800c54a:	4620      	mov	r0, r4
 800c54c:	b01d      	add	sp, #116	; 0x74
 800c54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c552:	4629      	mov	r1, r5
 800c554:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c558:	f000 fcac 	bl	800ceb4 <uxr_stream_id_from_raw>
 800c55c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c560:	2e01      	cmp	r6, #1
 800c562:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c566:	900a      	str	r0, [sp, #40]	; 0x28
 800c568:	fa5f fa80 	uxtb.w	sl, r0
 800c56c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c570:	d04b      	beq.n	800c60a <listen_message_reliably+0x232>
 800c572:	2e02      	cmp	r6, #2
 800c574:	d00f      	beq.n	800c596 <listen_message_reliably+0x1be>
 800c576:	2e00      	cmp	r6, #0
 800c578:	d1e7      	bne.n	800c54a <listen_message_reliably+0x172>
 800c57a:	4631      	mov	r1, r6
 800c57c:	4630      	mov	r0, r6
 800c57e:	f000 fc99 	bl	800ceb4 <uxr_stream_id_from_raw>
 800c582:	a90c      	add	r1, sp, #48	; 0x30
 800c584:	4602      	mov	r2, r0
 800c586:	4638      	mov	r0, r7
 800c588:	920a      	str	r2, [sp, #40]	; 0x28
 800c58a:	f7ff fd9d 	bl	800c0c8 <read_submessage_list>
 800c58e:	4620      	mov	r0, r4
 800c590:	b01d      	add	sp, #116	; 0x74
 800c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c596:	4629      	mov	r1, r5
 800c598:	f107 0008 	add.w	r0, r7, #8
 800c59c:	f000 fd78 	bl	800d090 <uxr_get_input_reliable_stream>
 800c5a0:	4680      	mov	r8, r0
 800c5a2:	b348      	cbz	r0, 800c5f8 <listen_message_reliably+0x220>
 800c5a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5a6:	9202      	str	r2, [sp, #8]
 800c5a8:	a80c      	add	r0, sp, #48	; 0x30
 800c5aa:	f7fd fb87 	bl	8009cbc <ucdr_buffer_remaining>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f10d 0019 	add.w	r0, sp, #25
 800c5b4:	9000      	str	r0, [sp, #0]
 800c5b6:	9a02      	ldr	r2, [sp, #8]
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	f005 fbb8 	bl	8011d30 <uxr_receive_reliable_message>
 800c5c0:	b1d0      	cbz	r0, 800c5f8 <listen_message_reliably+0x220>
 800c5c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d037      	beq.n	800c63a <listen_message_reliably+0x262>
 800c5ca:	ae14      	add	r6, sp, #80	; 0x50
 800c5cc:	f04f 0902 	mov.w	r9, #2
 800c5d0:	e008      	b.n	800c5e4 <listen_message_reliably+0x20c>
 800c5d2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800c5d6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c5da:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800c5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5e0:	f7ff fd72 	bl	800c0c8 <read_submessage_list>
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	2204      	movs	r2, #4
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	f005 fc21 	bl	8011e30 <uxr_next_input_reliable_buffer_available>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4638      	mov	r0, r7
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1ec      	bne.n	800c5d2 <listen_message_reliably+0x1fa>
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	462a      	mov	r2, r5
 800c5fc:	4651      	mov	r1, sl
 800c5fe:	f7ff fbe1 	bl	800bdc4 <write_submessage_acknack.isra.0>
 800c602:	4620      	mov	r0, r4
 800c604:	b01d      	add	sp, #116	; 0x74
 800c606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60a:	4629      	mov	r1, r5
 800c60c:	f107 0008 	add.w	r0, r7, #8
 800c610:	f000 fd34 	bl	800d07c <uxr_get_input_best_effort_stream>
 800c614:	2800      	cmp	r0, #0
 800c616:	d098      	beq.n	800c54a <listen_message_reliably+0x172>
 800c618:	4649      	mov	r1, r9
 800c61a:	f005 fb05 	bl	8011c28 <uxr_receive_best_effort_message>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d093      	beq.n	800c54a <listen_message_reliably+0x172>
 800c622:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800c626:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c62a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c630:	a90c      	add	r1, sp, #48	; 0x30
 800c632:	4638      	mov	r0, r7
 800c634:	f7ff fd48 	bl	800c0c8 <read_submessage_list>
 800c638:	e787      	b.n	800c54a <listen_message_reliably+0x172>
 800c63a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800c63e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c642:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c648:	a90c      	add	r1, sp, #48	; 0x30
 800c64a:	4638      	mov	r0, r7
 800c64c:	f7ff fd3c 	bl	800c0c8 <read_submessage_list>
 800c650:	e7bb      	b.n	800c5ca <listen_message_reliably+0x1f2>
 800c652:	bf00      	nop

0800c654 <uxr_run_session_timeout>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	4604      	mov	r4, r0
 800c658:	460d      	mov	r5, r1
 800c65a:	f000 fd81 	bl	800d160 <uxr_millis>
 800c65e:	4606      	mov	r6, r0
 800c660:	4620      	mov	r0, r4
 800c662:	f7ff fc75 	bl	800bf50 <uxr_flash_output_streams>
 800c666:	4629      	mov	r1, r5
 800c668:	4620      	mov	r0, r4
 800c66a:	f7ff feb5 	bl	800c3d8 <listen_message_reliably>
 800c66e:	f000 fd77 	bl	800d160 <uxr_millis>
 800c672:	1b83      	subs	r3, r0, r6
 800c674:	1ae9      	subs	r1, r5, r3
 800c676:	2900      	cmp	r1, #0
 800c678:	dcf6      	bgt.n	800c668 <uxr_run_session_timeout+0x14>
 800c67a:	f104 0008 	add.w	r0, r4, #8
 800c67e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c682:	f000 bd11 	b.w	800d0a8 <uxr_output_streams_confirmed>
 800c686:	bf00      	nop

0800c688 <uxr_run_session_until_data>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	4604      	mov	r4, r0
 800c68c:	460d      	mov	r5, r1
 800c68e:	f000 fd67 	bl	800d160 <uxr_millis>
 800c692:	4606      	mov	r6, r0
 800c694:	4620      	mov	r0, r4
 800c696:	f7ff fc5b 	bl	800bf50 <uxr_flash_output_streams>
 800c69a:	2300      	movs	r3, #0
 800c69c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	e005      	b.n	800c6b0 <uxr_run_session_until_data+0x28>
 800c6a4:	f000 fd5c 	bl	800d160 <uxr_millis>
 800c6a8:	1b83      	subs	r3, r0, r6
 800c6aa:	1ae9      	subs	r1, r5, r3
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	dd07      	ble.n	800c6c0 <uxr_run_session_until_data+0x38>
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f7ff fe91 	bl	800c3d8 <listen_message_reliably>
 800c6b6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d0f2      	beq.n	800c6a4 <uxr_run_session_until_data+0x1c>
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	bf00      	nop

0800c6c8 <uxr_run_session_until_confirm_delivery>:
 800c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	460d      	mov	r5, r1
 800c6d0:	f000 fd46 	bl	800d160 <uxr_millis>
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f7ff fc3a 	bl	800bf50 <uxr_flash_output_streams>
 800c6dc:	2d00      	cmp	r5, #0
 800c6de:	f106 0808 	add.w	r8, r6, #8
 800c6e2:	bfa8      	it	ge
 800c6e4:	462c      	movge	r4, r5
 800c6e6:	da07      	bge.n	800c6f8 <uxr_run_session_until_confirm_delivery+0x30>
 800c6e8:	e00e      	b.n	800c708 <uxr_run_session_until_confirm_delivery+0x40>
 800c6ea:	f7ff fe75 	bl	800c3d8 <listen_message_reliably>
 800c6ee:	f000 fd37 	bl	800d160 <uxr_millis>
 800c6f2:	1bc3      	subs	r3, r0, r7
 800c6f4:	1aec      	subs	r4, r5, r3
 800c6f6:	d407      	bmi.n	800c708 <uxr_run_session_until_confirm_delivery+0x40>
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	f000 fcd5 	bl	800d0a8 <uxr_output_streams_confirmed>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4621      	mov	r1, r4
 800c702:	4630      	mov	r0, r6
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0f0      	beq.n	800c6ea <uxr_run_session_until_confirm_delivery+0x22>
 800c708:	4640      	mov	r0, r8
 800c70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	f000 bccb 	b.w	800d0a8 <uxr_output_streams_confirmed>
 800c712:	bf00      	nop

0800c714 <uxr_run_session_until_all_status>:
 800c714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c718:	9d08      	ldr	r5, [sp, #32]
 800c71a:	460f      	mov	r7, r1
 800c71c:	4692      	mov	sl, r2
 800c71e:	461c      	mov	r4, r3
 800c720:	4606      	mov	r6, r0
 800c722:	f7ff fc15 	bl	800bf50 <uxr_flash_output_streams>
 800c726:	b125      	cbz	r5, 800c732 <uxr_run_session_until_all_status+0x1e>
 800c728:	462a      	mov	r2, r5
 800c72a:	21ff      	movs	r1, #255	; 0xff
 800c72c:	4620      	mov	r0, r4
 800c72e:	f006 feed 	bl	801350c <memset>
 800c732:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800c736:	67f5      	str	r5, [r6, #124]	; 0x7c
 800c738:	f000 fd12 	bl	800d160 <uxr_millis>
 800c73c:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800c740:	f1aa 0a02 	sub.w	sl, sl, #2
 800c744:	4680      	mov	r8, r0
 800c746:	4639      	mov	r1, r7
 800c748:	4630      	mov	r0, r6
 800c74a:	f7ff fe45 	bl	800c3d8 <listen_message_reliably>
 800c74e:	f000 fd07 	bl	800d160 <uxr_millis>
 800c752:	eba0 0008 	sub.w	r0, r0, r8
 800c756:	1a39      	subs	r1, r7, r0
 800c758:	b33d      	cbz	r5, 800c7aa <uxr_run_session_until_all_status+0x96>
 800c75a:	46cc      	mov	ip, r9
 800c75c:	464a      	mov	r2, r9
 800c75e:	2301      	movs	r3, #1
 800c760:	e002      	b.n	800c768 <uxr_run_session_until_all_status+0x54>
 800c762:	42ab      	cmp	r3, r5
 800c764:	d20c      	bcs.n	800c780 <uxr_run_session_until_all_status+0x6c>
 800c766:	3301      	adds	r3, #1
 800c768:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800c76c:	2cff      	cmp	r4, #255	; 0xff
 800c76e:	d1f8      	bne.n	800c762 <uxr_run_session_until_all_status+0x4e>
 800c770:	42ab      	cmp	r3, r5
 800c772:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800c776:	d213      	bcs.n	800c7a0 <uxr_run_session_until_all_status+0x8c>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d0f4      	beq.n	800c766 <uxr_run_session_until_all_status+0x52>
 800c77c:	2900      	cmp	r1, #0
 800c77e:	dce3      	bgt.n	800c748 <uxr_run_session_until_all_status+0x34>
 800c780:	2300      	movs	r3, #0
 800c782:	444d      	add	r5, r9
 800c784:	67f3      	str	r3, [r6, #124]	; 0x7c
 800c786:	e001      	b.n	800c78c <uxr_run_session_until_all_status+0x78>
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d812      	bhi.n	800c7b2 <uxr_run_session_until_all_status+0x9e>
 800c78c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800c790:	4565      	cmp	r5, ip
 800c792:	d1f9      	bne.n	800c788 <uxr_run_session_until_all_status+0x74>
 800c794:	2b01      	cmp	r3, #1
 800c796:	bf8c      	ite	hi
 800c798:	2000      	movhi	r0, #0
 800c79a:	2001      	movls	r0, #1
 800c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a0:	2900      	cmp	r1, #0
 800c7a2:	dded      	ble.n	800c780 <uxr_run_session_until_all_status+0x6c>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d1cf      	bne.n	800c748 <uxr_run_session_until_all_status+0x34>
 800c7a8:	e7ea      	b.n	800c780 <uxr_run_session_until_all_status+0x6c>
 800c7aa:	67f5      	str	r5, [r6, #124]	; 0x7c
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c7b8 <uxr_create_session>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	ed2d 8b02 	vpush	{d8}
 800c7c0:	f100 0808 	add.w	r8, r0, #8
 800c7c4:	b0a9      	sub	sp, #164	; 0xa4
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	f000 fba9 	bl	800cf20 <uxr_reset_stream_storage>
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 fb0e 	bl	800cdf0 <uxr_session_header_offset>
 800c7d4:	a909      	add	r1, sp, #36	; 0x24
 800c7d6:	9000      	str	r0, [sp, #0]
 800c7d8:	2300      	movs	r3, #0
 800c7da:	a810      	add	r0, sp, #64	; 0x40
 800c7dc:	221c      	movs	r2, #28
 800c7de:	f7fd fa2b 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 800c7e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c7e4:	8a1a      	ldrh	r2, [r3, #16]
 800c7e6:	3a04      	subs	r2, #4
 800c7e8:	b292      	uxth	r2, r2
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	a910      	add	r1, sp, #64	; 0x40
 800c7ee:	f000 fa23 	bl	800cc38 <uxr_buffer_create_session>
 800c7f2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f000 fa8f 	bl	800cd18 <uxr_stamp_create_session_header>
 800c7fa:	a810      	add	r0, sp, #64	; 0x40
 800c7fc:	f7fd fa5a 	bl	8009cb4 <ucdr_buffer_length>
 800c800:	23ff      	movs	r3, #255	; 0xff
 800c802:	ee08 0a10 	vmov	s16, r0
 800c806:	7163      	strb	r3, [r4, #5]
 800c808:	f04f 090a 	mov.w	r9, #10
 800c80c:	46c2      	mov	sl, r8
 800c80e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c810:	ee18 2a10 	vmov	r2, s16
 800c814:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c818:	a909      	add	r1, sp, #36	; 0x24
 800c81a:	47a8      	blx	r5
 800c81c:	f000 fca0 	bl	800d160 <uxr_millis>
 800c820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c824:	9002      	str	r0, [sp, #8]
 800c826:	e00c      	b.n	800c842 <uxr_create_session+0x8a>
 800c828:	f000 fc9a 	bl	800d160 <uxr_millis>
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	7962      	ldrb	r2, [r4, #5]
 800c830:	1ac0      	subs	r0, r0, r3
 800c832:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c836:	2b00      	cmp	r3, #0
 800c838:	f340 8094 	ble.w	800c964 <uxr_create_session+0x1ac>
 800c83c:	2aff      	cmp	r2, #255	; 0xff
 800c83e:	f040 8097 	bne.w	800c970 <uxr_create_session+0x1b8>
 800c842:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c844:	a905      	add	r1, sp, #20
 800c846:	6895      	ldr	r5, [r2, #8]
 800c848:	6810      	ldr	r0, [r2, #0]
 800c84a:	aa06      	add	r2, sp, #24
 800c84c:	47a8      	blx	r5
 800c84e:	2800      	cmp	r0, #0
 800c850:	d0ea      	beq.n	800c828 <uxr_create_session+0x70>
 800c852:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800c856:	a818      	add	r0, sp, #96	; 0x60
 800c858:	f7fd fa00 	bl	8009c5c <ucdr_init_buffer>
 800c85c:	2500      	movs	r5, #0
 800c85e:	f10d 0312 	add.w	r3, sp, #18
 800c862:	aa04      	add	r2, sp, #16
 800c864:	a918      	add	r1, sp, #96	; 0x60
 800c866:	4620      	mov	r0, r4
 800c868:	f88d 5010 	strb.w	r5, [sp, #16]
 800c86c:	f000 fa7e 	bl	800cd6c <uxr_read_session_header>
 800c870:	2800      	cmp	r0, #0
 800c872:	d0d9      	beq.n	800c828 <uxr_create_session+0x70>
 800c874:	4629      	mov	r1, r5
 800c876:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800c87a:	f000 fb1b 	bl	800ceb4 <uxr_stream_id_from_raw>
 800c87e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c882:	2f01      	cmp	r7, #1
 800c884:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800c888:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800c88c:	fa5f f880 	uxtb.w	r8, r0
 800c890:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c894:	d04d      	beq.n	800c932 <uxr_create_session+0x17a>
 800c896:	2f02      	cmp	r7, #2
 800c898:	d00c      	beq.n	800c8b4 <uxr_create_session+0xfc>
 800c89a:	2f00      	cmp	r7, #0
 800c89c:	d1c4      	bne.n	800c828 <uxr_create_session+0x70>
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	f000 fb07 	bl	800ceb4 <uxr_stream_id_from_raw>
 800c8a6:	a918      	add	r1, sp, #96	; 0x60
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	9208      	str	r2, [sp, #32]
 800c8ae:	f7ff fc0b 	bl	800c0c8 <read_submessage_list>
 800c8b2:	e7b9      	b.n	800c828 <uxr_create_session+0x70>
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f000 fbea 	bl	800d090 <uxr_get_input_reliable_stream>
 800c8bc:	4606      	mov	r6, r0
 800c8be:	b390      	cbz	r0, 800c926 <uxr_create_session+0x16e>
 800c8c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c8c2:	9203      	str	r2, [sp, #12]
 800c8c4:	a818      	add	r0, sp, #96	; 0x60
 800c8c6:	f7fd f9f9 	bl	8009cbc <ucdr_buffer_remaining>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f10d 0011 	add.w	r0, sp, #17
 800c8d0:	9000      	str	r0, [sp, #0]
 800c8d2:	9a03      	ldr	r2, [sp, #12]
 800c8d4:	4659      	mov	r1, fp
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f005 fa2a 	bl	8011d30 <uxr_receive_reliable_message>
 800c8dc:	b318      	cbz	r0, 800c926 <uxr_create_session+0x16e>
 800c8de:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800c8e2:	b9b3      	cbnz	r3, 800c912 <uxr_create_session+0x15a>
 800c8e4:	f88d 8020 	strb.w	r8, [sp, #32]
 800c8e8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800c8ec:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800c8f0:	9a08      	ldr	r2, [sp, #32]
 800c8f2:	a918      	add	r1, sp, #96	; 0x60
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f7ff fbe7 	bl	800c0c8 <read_submessage_list>
 800c8fa:	e00a      	b.n	800c912 <uxr_create_session+0x15a>
 800c8fc:	f04f 0302 	mov.w	r3, #2
 800c900:	f88d 8020 	strb.w	r8, [sp, #32]
 800c904:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800c908:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800c90c:	9a08      	ldr	r2, [sp, #32]
 800c90e:	f7ff fbdb 	bl	800c0c8 <read_submessage_list>
 800c912:	a920      	add	r1, sp, #128	; 0x80
 800c914:	2204      	movs	r2, #4
 800c916:	4630      	mov	r0, r6
 800c918:	f005 fa8a 	bl	8011e30 <uxr_next_input_reliable_buffer_available>
 800c91c:	4603      	mov	r3, r0
 800c91e:	a920      	add	r1, sp, #128	; 0x80
 800c920:	4620      	mov	r0, r4
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1ea      	bne.n	800c8fc <uxr_create_session+0x144>
 800c926:	462a      	mov	r2, r5
 800c928:	4641      	mov	r1, r8
 800c92a:	4620      	mov	r0, r4
 800c92c:	f7ff fa4a 	bl	800bdc4 <write_submessage_acknack.isra.0>
 800c930:	e77a      	b.n	800c828 <uxr_create_session+0x70>
 800c932:	4629      	mov	r1, r5
 800c934:	4650      	mov	r0, sl
 800c936:	f000 fba1 	bl	800d07c <uxr_get_input_best_effort_stream>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	f43f af74 	beq.w	800c828 <uxr_create_session+0x70>
 800c940:	4659      	mov	r1, fp
 800c942:	f005 f971 	bl	8011c28 <uxr_receive_best_effort_message>
 800c946:	2800      	cmp	r0, #0
 800c948:	f43f af6e 	beq.w	800c828 <uxr_create_session+0x70>
 800c94c:	f88d 8020 	strb.w	r8, [sp, #32]
 800c950:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800c954:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800c958:	9a08      	ldr	r2, [sp, #32]
 800c95a:	a918      	add	r1, sp, #96	; 0x60
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff fbb3 	bl	800c0c8 <read_submessage_list>
 800c962:	e761      	b.n	800c828 <uxr_create_session+0x70>
 800c964:	f1b9 0901 	subs.w	r9, r9, #1
 800c968:	d002      	beq.n	800c970 <uxr_create_session+0x1b8>
 800c96a:	2aff      	cmp	r2, #255	; 0xff
 800c96c:	f43f af4f 	beq.w	800c80e <uxr_create_session+0x56>
 800c970:	b12a      	cbz	r2, 800c97e <uxr_create_session+0x1c6>
 800c972:	2000      	movs	r0, #0
 800c974:	b029      	add	sp, #164	; 0xa4
 800c976:	ecbd 8b02 	vpop	{d8}
 800c97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97e:	4650      	mov	r0, sl
 800c980:	f000 face 	bl	800cf20 <uxr_reset_stream_storage>
 800c984:	2001      	movs	r0, #1
 800c986:	b029      	add	sp, #164	; 0xa4
 800c988:	ecbd 8b02 	vpop	{d8}
 800c98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c990 <wait_session_status>:
 800c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	4604      	mov	r4, r0
 800c996:	b09d      	sub	sp, #116	; 0x74
 800c998:	20ff      	movs	r0, #255	; 0xff
 800c99a:	7160      	strb	r0, [r4, #5]
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 80b8 	beq.w	800cb14 <wait_session_status+0x184>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	468b      	mov	fp, r1
 800c9a8:	4692      	mov	sl, r2
 800c9aa:	9303      	str	r3, [sp, #12]
 800c9ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c9b4:	4659      	mov	r1, fp
 800c9b6:	47a8      	blx	r5
 800c9b8:	f000 fbd2 	bl	800d160 <uxr_millis>
 800c9bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	e009      	b.n	800c9d8 <wait_session_status+0x48>
 800c9c4:	f000 fbcc 	bl	800d160 <uxr_millis>
 800c9c8:	1b40      	subs	r0, r0, r5
 800c9ca:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd42      	ble.n	800ca58 <wait_session_status+0xc8>
 800c9d2:	7960      	ldrb	r0, [r4, #5]
 800c9d4:	28ff      	cmp	r0, #255	; 0xff
 800c9d6:	d148      	bne.n	800ca6a <wait_session_status+0xda>
 800c9d8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c9da:	a908      	add	r1, sp, #32
 800c9dc:	6896      	ldr	r6, [r2, #8]
 800c9de:	6810      	ldr	r0, [r2, #0]
 800c9e0:	aa09      	add	r2, sp, #36	; 0x24
 800c9e2:	47b0      	blx	r6
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0ed      	beq.n	800c9c4 <wait_session_status+0x34>
 800c9e8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c9ec:	a80c      	add	r0, sp, #48	; 0x30
 800c9ee:	f7fd f935 	bl	8009c5c <ucdr_init_buffer>
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	f10d 031e 	add.w	r3, sp, #30
 800c9f8:	aa07      	add	r2, sp, #28
 800c9fa:	a90c      	add	r1, sp, #48	; 0x30
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f88d 601c 	strb.w	r6, [sp, #28]
 800ca02:	f000 f9b3 	bl	800cd6c <uxr_read_session_header>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0dc      	beq.n	800c9c4 <wait_session_status+0x34>
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ca10:	f000 fa50 	bl	800ceb4 <uxr_stream_id_from_raw>
 800ca14:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ca18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ca1c:	9302      	str	r3, [sp, #8]
 800ca1e:	2f01      	cmp	r7, #1
 800ca20:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800ca24:	fa5f f880 	uxtb.w	r8, r0
 800ca28:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ca2c:	d058      	beq.n	800cae0 <wait_session_status+0x150>
 800ca2e:	2f02      	cmp	r7, #2
 800ca30:	d021      	beq.n	800ca76 <wait_session_status+0xe6>
 800ca32:	2f00      	cmp	r7, #0
 800ca34:	d1c6      	bne.n	800c9c4 <wait_session_status+0x34>
 800ca36:	4639      	mov	r1, r7
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f000 fa3b 	bl	800ceb4 <uxr_stream_id_from_raw>
 800ca3e:	a90c      	add	r1, sp, #48	; 0x30
 800ca40:	4602      	mov	r2, r0
 800ca42:	4620      	mov	r0, r4
 800ca44:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca46:	f7ff fb3f 	bl	800c0c8 <read_submessage_list>
 800ca4a:	f000 fb89 	bl	800d160 <uxr_millis>
 800ca4e:	1b40      	subs	r0, r0, r5
 800ca50:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dcbc      	bgt.n	800c9d2 <wait_session_status+0x42>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	9a04      	ldr	r2, [sp, #16]
 800ca5c:	7960      	ldrb	r0, [r4, #5]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	429a      	cmp	r2, r3
 800ca62:	9303      	str	r3, [sp, #12]
 800ca64:	d001      	beq.n	800ca6a <wait_session_status+0xda>
 800ca66:	28ff      	cmp	r0, #255	; 0xff
 800ca68:	d0a0      	beq.n	800c9ac <wait_session_status+0x1c>
 800ca6a:	38ff      	subs	r0, #255	; 0xff
 800ca6c:	bf18      	it	ne
 800ca6e:	2001      	movne	r0, #1
 800ca70:	b01d      	add	sp, #116	; 0x74
 800ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca76:	4631      	mov	r1, r6
 800ca78:	f104 0008 	add.w	r0, r4, #8
 800ca7c:	f000 fb08 	bl	800d090 <uxr_get_input_reliable_stream>
 800ca80:	4681      	mov	r9, r0
 800ca82:	b338      	cbz	r0, 800cad4 <wait_session_status+0x144>
 800ca84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca86:	9205      	str	r2, [sp, #20]
 800ca88:	a80c      	add	r0, sp, #48	; 0x30
 800ca8a:	f7fd f917 	bl	8009cbc <ucdr_buffer_remaining>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	f10d 001d 	add.w	r0, sp, #29
 800ca94:	9000      	str	r0, [sp, #0]
 800ca96:	9a05      	ldr	r2, [sp, #20]
 800ca98:	9902      	ldr	r1, [sp, #8]
 800ca9a:	4648      	mov	r0, r9
 800ca9c:	f005 f948 	bl	8011d30 <uxr_receive_reliable_message>
 800caa0:	b1c0      	cbz	r0, 800cad4 <wait_session_status+0x144>
 800caa2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800caa6:	b95b      	cbnz	r3, 800cac0 <wait_session_status+0x130>
 800caa8:	e03c      	b.n	800cb24 <wait_session_status+0x194>
 800caaa:	f04f 0302 	mov.w	r3, #2
 800caae:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800cab2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cab6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800caba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cabc:	f7ff fb04 	bl	800c0c8 <read_submessage_list>
 800cac0:	a914      	add	r1, sp, #80	; 0x50
 800cac2:	2204      	movs	r2, #4
 800cac4:	4648      	mov	r0, r9
 800cac6:	f005 f9b3 	bl	8011e30 <uxr_next_input_reliable_buffer_available>
 800caca:	4603      	mov	r3, r0
 800cacc:	a914      	add	r1, sp, #80	; 0x50
 800cace:	4620      	mov	r0, r4
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1ea      	bne.n	800caaa <wait_session_status+0x11a>
 800cad4:	4632      	mov	r2, r6
 800cad6:	4641      	mov	r1, r8
 800cad8:	4620      	mov	r0, r4
 800cada:	f7ff f973 	bl	800bdc4 <write_submessage_acknack.isra.0>
 800cade:	e771      	b.n	800c9c4 <wait_session_status+0x34>
 800cae0:	4631      	mov	r1, r6
 800cae2:	f104 0008 	add.w	r0, r4, #8
 800cae6:	f000 fac9 	bl	800d07c <uxr_get_input_best_effort_stream>
 800caea:	2800      	cmp	r0, #0
 800caec:	f43f af6a 	beq.w	800c9c4 <wait_session_status+0x34>
 800caf0:	9902      	ldr	r1, [sp, #8]
 800caf2:	f005 f899 	bl	8011c28 <uxr_receive_best_effort_message>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f43f af64 	beq.w	800c9c4 <wait_session_status+0x34>
 800cafc:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800cb00:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cb04:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800cb08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb0a:	a90c      	add	r1, sp, #48	; 0x30
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f7ff fadb 	bl	800c0c8 <read_submessage_list>
 800cb12:	e757      	b.n	800c9c4 <wait_session_status+0x34>
 800cb14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cb16:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cb1a:	47a0      	blx	r4
 800cb1c:	2001      	movs	r0, #1
 800cb1e:	b01d      	add	sp, #116	; 0x74
 800cb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb24:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800cb28:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cb2c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800cb30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb32:	a90c      	add	r1, sp, #48	; 0x30
 800cb34:	4620      	mov	r0, r4
 800cb36:	f7ff fac7 	bl	800c0c8 <read_submessage_list>
 800cb3a:	e7c1      	b.n	800cac0 <wait_session_status+0x130>

0800cb3c <uxr_delete_session_retries>:
 800cb3c:	b530      	push	{r4, r5, lr}
 800cb3e:	b08f      	sub	sp, #60	; 0x3c
 800cb40:	4604      	mov	r4, r0
 800cb42:	460d      	mov	r5, r1
 800cb44:	f000 f954 	bl	800cdf0 <uxr_session_header_offset>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	2210      	movs	r2, #16
 800cb4c:	9000      	str	r0, [sp, #0]
 800cb4e:	a902      	add	r1, sp, #8
 800cb50:	a806      	add	r0, sp, #24
 800cb52:	f7fd f871 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 800cb56:	a906      	add	r1, sp, #24
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 f897 	bl	800cc8c <uxr_buffer_delete_session>
 800cb5e:	2200      	movs	r2, #0
 800cb60:	4611      	mov	r1, r2
 800cb62:	9b06      	ldr	r3, [sp, #24]
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 f8eb 	bl	800cd40 <uxr_stamp_session_header>
 800cb6a:	a806      	add	r0, sp, #24
 800cb6c:	f7fd f8a2 	bl	8009cb4 <ucdr_buffer_length>
 800cb70:	462b      	mov	r3, r5
 800cb72:	4602      	mov	r2, r0
 800cb74:	a902      	add	r1, sp, #8
 800cb76:	4620      	mov	r0, r4
 800cb78:	f7ff ff0a 	bl	800c990 <wait_session_status>
 800cb7c:	b118      	cbz	r0, 800cb86 <uxr_delete_session_retries+0x4a>
 800cb7e:	7960      	ldrb	r0, [r4, #5]
 800cb80:	fab0 f080 	clz	r0, r0
 800cb84:	0940      	lsrs	r0, r0, #5
 800cb86:	b00f      	add	sp, #60	; 0x3c
 800cb88:	bd30      	pop	{r4, r5, pc}
 800cb8a:	bf00      	nop

0800cb8c <uxr_prepare_stream_to_write_submessage>:
 800cb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb90:	b082      	sub	sp, #8
 800cb92:	4682      	mov	sl, r0
 800cb94:	4610      	mov	r0, r2
 800cb96:	4615      	mov	r5, r2
 800cb98:	461e      	mov	r6, r3
 800cb9a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800cb9e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800cba2:	9101      	str	r1, [sp, #4]
 800cba4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800cba8:	f000 fad4 	bl	800d154 <uxr_submessage_padding>
 800cbac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cbb0:	f105 0904 	add.w	r9, r5, #4
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	4481      	add	r9, r0
 800cbb8:	d01d      	beq.n	800cbf6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d116      	bne.n	800cbec <uxr_prepare_stream_to_write_submessage+0x60>
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	f10a 0008 	add.w	r0, sl, #8
 800cbc4:	f000 fa4e 	bl	800d064 <uxr_get_output_reliable_stream>
 800cbc8:	4604      	mov	r4, r0
 800cbca:	b158      	cbz	r0, 800cbe4 <uxr_prepare_stream_to_write_submessage+0x58>
 800cbcc:	4649      	mov	r1, r9
 800cbce:	4632      	mov	r2, r6
 800cbd0:	f005 fae4 	bl	801219c <uxr_prepare_reliable_buffer_to_write>
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	b12c      	cbz	r4, 800cbe4 <uxr_prepare_stream_to_write_submessage+0x58>
 800cbd8:	4643      	mov	r3, r8
 800cbda:	b2aa      	uxth	r2, r5
 800cbdc:	4639      	mov	r1, r7
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f000 fa78 	bl	800d0d4 <uxr_buffer_submessage_header>
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	b002      	add	sp, #8
 800cbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbec:	2400      	movs	r4, #0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	b002      	add	sp, #8
 800cbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	f10a 0008 	add.w	r0, sl, #8
 800cbfc:	f000 fa2a 	bl	800d054 <uxr_get_output_best_effort_stream>
 800cc00:	4604      	mov	r4, r0
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0ee      	beq.n	800cbe4 <uxr_prepare_stream_to_write_submessage+0x58>
 800cc06:	4649      	mov	r1, r9
 800cc08:	4632      	mov	r2, r6
 800cc0a:	f005 fa03 	bl	8012014 <uxr_prepare_best_effort_buffer_to_write>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	e7e1      	b.n	800cbd6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800cc12:	bf00      	nop

0800cc14 <uxr_init_session_info>:
 800cc14:	b470      	push	{r4, r5, r6}
 800cc16:	7102      	strb	r2, [r0, #4]
 800cc18:	0e16      	lsrs	r6, r2, #24
 800cc1a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800cc1e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800cc22:	23ff      	movs	r3, #255	; 0xff
 800cc24:	2209      	movs	r2, #9
 800cc26:	7046      	strb	r6, [r0, #1]
 800cc28:	7085      	strb	r5, [r0, #2]
 800cc2a:	70c4      	strb	r4, [r0, #3]
 800cc2c:	7001      	strb	r1, [r0, #0]
 800cc2e:	bc70      	pop	{r4, r5, r6}
 800cc30:	80c2      	strh	r2, [r0, #6]
 800cc32:	7143      	strb	r3, [r0, #5]
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop

0800cc38 <uxr_buffer_create_session>:
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	4d12      	ldr	r5, [pc, #72]	; (800cc88 <uxr_buffer_create_session+0x50>)
 800cc40:	9307      	str	r3, [sp, #28]
 800cc42:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cc46:	7802      	ldrb	r2, [r0, #0]
 800cc48:	9303      	str	r3, [sp, #12]
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	f88d 200c 	strb.w	r2, [sp, #12]
 800cc50:	2101      	movs	r1, #1
 800cc52:	682a      	ldr	r2, [r5, #0]
 800cc54:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800cc58:	88ad      	ldrh	r5, [r5, #4]
 800cc5a:	80c1      	strh	r1, [r0, #6]
 800cc5c:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cc60:	9200      	str	r2, [sp, #0]
 800cc62:	4619      	mov	r1, r3
 800cc64:	2210      	movs	r2, #16
 800cc66:	4620      	mov	r0, r4
 800cc68:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800cc6c:	9306      	str	r3, [sp, #24]
 800cc6e:	f88d 300d 	strb.w	r3, [sp, #13]
 800cc72:	9602      	str	r6, [sp, #8]
 800cc74:	f8ad 5006 	strh.w	r5, [sp, #6]
 800cc78:	f000 fa2c 	bl	800d0d4 <uxr_buffer_submessage_header>
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	4669      	mov	r1, sp
 800cc80:	f000 ffee 	bl	800dc60 <uxr_serialize_CREATE_CLIENT_Payload>
 800cc84:	b008      	add	sp, #32
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	08014cc0 	.word	0x08014cc0

0800cc8c <uxr_buffer_delete_session>:
 800cc8c:	b530      	push	{r4, r5, lr}
 800cc8e:	4b0c      	ldr	r3, [pc, #48]	; (800ccc0 <uxr_buffer_delete_session+0x34>)
 800cc90:	b083      	sub	sp, #12
 800cc92:	891b      	ldrh	r3, [r3, #8]
 800cc94:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cc98:	2202      	movs	r2, #2
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	80c2      	strh	r2, [r0, #6]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2204      	movs	r2, #4
 800cca2:	4608      	mov	r0, r1
 800cca4:	f44f 7500 	mov.w	r5, #512	; 0x200
 800cca8:	2103      	movs	r1, #3
 800ccaa:	f8ad 5004 	strh.w	r5, [sp, #4]
 800ccae:	f000 fa11 	bl	800d0d4 <uxr_buffer_submessage_header>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	a901      	add	r1, sp, #4
 800ccb6:	f001 f881 	bl	800ddbc <uxr_serialize_DELETE_Payload>
 800ccba:	b003      	add	sp, #12
 800ccbc:	bd30      	pop	{r4, r5, pc}
 800ccbe:	bf00      	nop
 800ccc0:	08014cc0 	.word	0x08014cc0

0800ccc4 <uxr_read_create_session_status>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	4604      	mov	r4, r0
 800ccca:	4608      	mov	r0, r1
 800cccc:	a901      	add	r1, sp, #4
 800ccce:	f001 f885 	bl	800dddc <uxr_deserialize_STATUS_AGENT_Payload>
 800ccd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ccd6:	7163      	strb	r3, [r4, #5]
 800ccd8:	b008      	add	sp, #32
 800ccda:	bd10      	pop	{r4, pc}

0800ccdc <uxr_read_delete_session_status>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	4604      	mov	r4, r0
 800cce0:	b084      	sub	sp, #16
 800cce2:	4608      	mov	r0, r1
 800cce4:	a902      	add	r1, sp, #8
 800cce6:	f001 f8a9 	bl	800de3c <uxr_deserialize_STATUS_Payload>
 800ccea:	88e3      	ldrh	r3, [r4, #6]
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d001      	beq.n	800ccf4 <uxr_read_delete_session_status+0x18>
 800ccf0:	b004      	add	sp, #16
 800ccf2:	bd10      	pop	{r4, pc}
 800ccf4:	f10d 000a 	add.w	r0, sp, #10
 800ccf8:	f7fe fec6 	bl	800ba88 <uxr_object_id_from_raw>
 800ccfc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800cd00:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cd04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	bf04      	itt	eq
 800cd0e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800cd12:	7163      	strbeq	r3, [r4, #5]
 800cd14:	b004      	add	sp, #16
 800cd16:	bd10      	pop	{r4, pc}

0800cd18 <uxr_stamp_create_session_header>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	b08a      	sub	sp, #40	; 0x28
 800cd1e:	a802      	add	r0, sp, #8
 800cd20:	2208      	movs	r2, #8
 800cd22:	f7fc ff9b 	bl	8009c5c <ucdr_init_buffer>
 800cd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2a:	9400      	str	r4, [sp, #0]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	a802      	add	r0, sp, #8
 800cd30:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800cd34:	461a      	mov	r2, r3
 800cd36:	f000 fa45 	bl	800d1c4 <uxr_serialize_message_header>
 800cd3a:	b00a      	add	sp, #40	; 0x28
 800cd3c:	bd10      	pop	{r4, pc}
 800cd3e:	bf00      	nop

0800cd40 <uxr_stamp_session_header>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	4604      	mov	r4, r0
 800cd44:	b08c      	sub	sp, #48	; 0x30
 800cd46:	460d      	mov	r5, r1
 800cd48:	4616      	mov	r6, r2
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	a804      	add	r0, sp, #16
 800cd4e:	2208      	movs	r2, #8
 800cd50:	9603      	str	r6, [sp, #12]
 800cd52:	f7fc ff83 	bl	8009c5c <ucdr_init_buffer>
 800cd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	9400      	str	r4, [sp, #0]
 800cd5e:	462a      	mov	r2, r5
 800cd60:	a804      	add	r0, sp, #16
 800cd62:	f000 fa2f 	bl	800d1c4 <uxr_serialize_message_header>
 800cd66:	b00c      	add	sp, #48	; 0x30
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	bf00      	nop

0800cd6c <uxr_read_session_header>:
 800cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd70:	4607      	mov	r7, r0
 800cd72:	b084      	sub	sp, #16
 800cd74:	4608      	mov	r0, r1
 800cd76:	460c      	mov	r4, r1
 800cd78:	4615      	mov	r5, r2
 800cd7a:	461e      	mov	r6, r3
 800cd7c:	f7fc ff9e 	bl	8009cbc <ucdr_buffer_remaining>
 800cd80:	2808      	cmp	r0, #8
 800cd82:	d803      	bhi.n	800cd8c <uxr_read_session_header+0x20>
 800cd84:	2000      	movs	r0, #0
 800cd86:	b004      	add	sp, #16
 800cd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8c:	f10d 080c 	add.w	r8, sp, #12
 800cd90:	4633      	mov	r3, r6
 800cd92:	462a      	mov	r2, r5
 800cd94:	4620      	mov	r0, r4
 800cd96:	f8cd 8000 	str.w	r8, [sp]
 800cd9a:	f10d 010b 	add.w	r1, sp, #11
 800cd9e:	f000 fa2f 	bl	800d200 <uxr_deserialize_message_header>
 800cda2:	783a      	ldrb	r2, [r7, #0]
 800cda4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d1eb      	bne.n	800cd84 <uxr_read_session_header+0x18>
 800cdac:	061b      	lsls	r3, r3, #24
 800cdae:	d41c      	bmi.n	800cdea <uxr_read_session_header+0x7e>
 800cdb0:	f898 2000 	ldrb.w	r2, [r8]
 800cdb4:	787b      	ldrb	r3, [r7, #1]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d003      	beq.n	800cdc2 <uxr_read_session_header+0x56>
 800cdba:	2001      	movs	r0, #1
 800cdbc:	f080 0001 	eor.w	r0, r0, #1
 800cdc0:	e7e1      	b.n	800cd86 <uxr_read_session_header+0x1a>
 800cdc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800cdc6:	78bb      	ldrb	r3, [r7, #2]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	f107 0102 	add.w	r1, r7, #2
 800cdce:	d1f4      	bne.n	800cdba <uxr_read_session_header+0x4e>
 800cdd0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800cdd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d1ee      	bne.n	800cdba <uxr_read_session_header+0x4e>
 800cddc:	784b      	ldrb	r3, [r1, #1]
 800cdde:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d1e9      	bne.n	800cdba <uxr_read_session_header+0x4e>
 800cde6:	2000      	movs	r0, #0
 800cde8:	e7e8      	b.n	800cdbc <uxr_read_session_header+0x50>
 800cdea:	2001      	movs	r0, #1
 800cdec:	e7cb      	b.n	800cd86 <uxr_read_session_header+0x1a>
 800cdee:	bf00      	nop

0800cdf0 <uxr_session_header_offset>:
 800cdf0:	f990 3000 	ldrsb.w	r3, [r0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfac      	ite	ge
 800cdf8:	2008      	movge	r0, #8
 800cdfa:	2004      	movlt	r0, #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop

0800ce00 <uxr_init_base_object_request>:
 800ce00:	b530      	push	{r4, r5, lr}
 800ce02:	88c3      	ldrh	r3, [r0, #6]
 800ce04:	b083      	sub	sp, #12
 800ce06:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800ce0a:	9101      	str	r1, [sp, #4]
 800ce0c:	f1a3 010a 	sub.w	r1, r3, #10
 800ce10:	b289      	uxth	r1, r1
 800ce12:	42a1      	cmp	r1, r4
 800ce14:	d80e      	bhi.n	800ce34 <uxr_init_base_object_request+0x34>
 800ce16:	3301      	adds	r3, #1
 800ce18:	b29c      	uxth	r4, r3
 800ce1a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	80c4      	strh	r4, [r0, #6]
 800ce22:	1c91      	adds	r1, r2, #2
 800ce24:	9801      	ldr	r0, [sp, #4]
 800ce26:	7015      	strb	r5, [r2, #0]
 800ce28:	7053      	strb	r3, [r2, #1]
 800ce2a:	f7fe fe41 	bl	800bab0 <uxr_object_id_to_raw>
 800ce2e:	4620      	mov	r0, r4
 800ce30:	b003      	add	sp, #12
 800ce32:	bd30      	pop	{r4, r5, pc}
 800ce34:	230a      	movs	r3, #10
 800ce36:	461c      	mov	r4, r3
 800ce38:	2500      	movs	r5, #0
 800ce3a:	e7f1      	b.n	800ce20 <uxr_init_base_object_request+0x20>

0800ce3c <uxr_parse_base_object_request>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	4604      	mov	r4, r0
 800ce40:	3002      	adds	r0, #2
 800ce42:	460d      	mov	r5, r1
 800ce44:	4616      	mov	r6, r2
 800ce46:	f7fe fe1f 	bl	800ba88 <uxr_object_id_from_raw>
 800ce4a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ce4e:	8028      	strh	r0, [r5, #0]
 800ce50:	806b      	strh	r3, [r5, #2]
 800ce52:	7822      	ldrb	r2, [r4, #0]
 800ce54:	7863      	ldrb	r3, [r4, #1]
 800ce56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ce5a:	8033      	strh	r3, [r6, #0]
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
 800ce5e:	bf00      	nop

0800ce60 <uxr_stream_id>:
 800ce60:	b410      	push	{r4}
 800ce62:	2901      	cmp	r1, #1
 800ce64:	b083      	sub	sp, #12
 800ce66:	d01f      	beq.n	800cea8 <uxr_stream_id+0x48>
 800ce68:	2902      	cmp	r1, #2
 800ce6a:	f04f 0400 	mov.w	r4, #0
 800ce6e:	d01e      	beq.n	800ceae <uxr_stream_id+0x4e>
 800ce70:	2300      	movs	r3, #0
 800ce72:	f364 0307 	bfi	r3, r4, #0, #8
 800ce76:	f360 230f 	bfi	r3, r0, #8, #8
 800ce7a:	f361 4317 	bfi	r3, r1, #16, #8
 800ce7e:	f362 631f 	bfi	r3, r2, #24, #8
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	2000      	movs	r0, #0
 800ce86:	f362 0007 	bfi	r0, r2, #0, #8
 800ce8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ce8e:	f362 200f 	bfi	r0, r2, #8, #8
 800ce92:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ce96:	f362 4017 	bfi	r0, r2, #16, #8
 800ce9a:	0e1b      	lsrs	r3, r3, #24
 800ce9c:	f363 601f 	bfi	r0, r3, #24, #8
 800cea0:	b003      	add	sp, #12
 800cea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	1c44      	adds	r4, r0, #1
 800ceaa:	b2e4      	uxtb	r4, r4
 800ceac:	e7e0      	b.n	800ce70 <uxr_stream_id+0x10>
 800ceae:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800ceb2:	e7dd      	b.n	800ce70 <uxr_stream_id+0x10>

0800ceb4 <uxr_stream_id_from_raw>:
 800ceb4:	b410      	push	{r4}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	b128      	cbz	r0, 800cec6 <uxr_stream_id_from_raw+0x12>
 800ceba:	0603      	lsls	r3, r0, #24
 800cebc:	d421      	bmi.n	800cf02 <uxr_stream_id_from_raw+0x4e>
 800cebe:	1e42      	subs	r2, r0, #1
 800cec0:	b2d2      	uxtb	r2, r2
 800cec2:	2401      	movs	r4, #1
 800cec4:	e001      	b.n	800ceca <uxr_stream_id_from_raw+0x16>
 800cec6:	4604      	mov	r4, r0
 800cec8:	4602      	mov	r2, r0
 800ceca:	2300      	movs	r3, #0
 800cecc:	f360 0307 	bfi	r3, r0, #0, #8
 800ced0:	f362 230f 	bfi	r3, r2, #8, #8
 800ced4:	f364 4317 	bfi	r3, r4, #16, #8
 800ced8:	f361 631f 	bfi	r3, r1, #24, #8
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	2000      	movs	r0, #0
 800cee0:	f362 0007 	bfi	r0, r2, #0, #8
 800cee4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cee8:	f362 200f 	bfi	r0, r2, #8, #8
 800ceec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cef0:	f362 4017 	bfi	r0, r2, #16, #8
 800cef4:	0e1b      	lsrs	r3, r3, #24
 800cef6:	f363 601f 	bfi	r0, r3, #24, #8
 800cefa:	b003      	add	sp, #12
 800cefc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800cf06:	2402      	movs	r4, #2
 800cf08:	e7df      	b.n	800ceca <uxr_stream_id_from_raw+0x16>
 800cf0a:	bf00      	nop

0800cf0c <uxr_init_stream_storage>:
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	7403      	strb	r3, [r0, #16]
 800cf10:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cf14:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800cf18:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop

0800cf20 <uxr_reset_stream_storage>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	7c03      	ldrb	r3, [r0, #16]
 800cf24:	4604      	mov	r4, r0
 800cf26:	b153      	cbz	r3, 800cf3e <uxr_reset_stream_storage+0x1e>
 800cf28:	4606      	mov	r6, r0
 800cf2a:	2500      	movs	r5, #0
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	f005 f86b 	bl	8012008 <uxr_reset_output_best_effort_stream>
 800cf32:	7c23      	ldrb	r3, [r4, #16]
 800cf34:	3501      	adds	r5, #1
 800cf36:	42ab      	cmp	r3, r5
 800cf38:	f106 0610 	add.w	r6, r6, #16
 800cf3c:	d8f6      	bhi.n	800cf2c <uxr_reset_stream_storage+0xc>
 800cf3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cf42:	b163      	cbz	r3, 800cf5e <uxr_reset_stream_storage+0x3e>
 800cf44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf48:	2500      	movs	r5, #0
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f004 fe68 	bl	8011c20 <uxr_reset_input_best_effort_stream>
 800cf50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cf54:	3501      	adds	r5, #1
 800cf56:	42ab      	cmp	r3, r5
 800cf58:	f106 0602 	add.w	r6, r6, #2
 800cf5c:	d8f5      	bhi.n	800cf4a <uxr_reset_stream_storage+0x2a>
 800cf5e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800cf62:	b163      	cbz	r3, 800cf7e <uxr_reset_stream_storage+0x5e>
 800cf64:	f104 0618 	add.w	r6, r4, #24
 800cf68:	2500      	movs	r5, #0
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f005 f8ec 	bl	8012148 <uxr_reset_output_reliable_stream>
 800cf70:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800cf74:	3501      	adds	r5, #1
 800cf76:	42ab      	cmp	r3, r5
 800cf78:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800cf7c:	d8f5      	bhi.n	800cf6a <uxr_reset_stream_storage+0x4a>
 800cf7e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800cf82:	b163      	cbz	r3, 800cf9e <uxr_reset_stream_storage+0x7e>
 800cf84:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800cf88:	2500      	movs	r5, #0
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f004 feb0 	bl	8011cf0 <uxr_reset_input_reliable_stream>
 800cf90:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800cf94:	3501      	adds	r5, #1
 800cf96:	42ab      	cmp	r3, r5
 800cf98:	f106 0618 	add.w	r6, r6, #24
 800cf9c:	d8f5      	bhi.n	800cf8a <uxr_reset_stream_storage+0x6a>
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}

0800cfa0 <uxr_add_output_best_effort_buffer>:
 800cfa0:	b530      	push	{r4, r5, lr}
 800cfa2:	7c04      	ldrb	r4, [r0, #16]
 800cfa4:	1c65      	adds	r5, r4, #1
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	7405      	strb	r5, [r0, #16]
 800cfaa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800cfae:	f005 f81f 	bl	8011ff0 <uxr_init_output_best_effort_stream>
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	b003      	add	sp, #12
 800cfba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfbe:	f7ff bf4f 	b.w	800ce60 <uxr_stream_id>
 800cfc2:	bf00      	nop

0800cfc4 <uxr_add_output_reliable_buffer>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800cfcc:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800cfd0:	9600      	str	r6, [sp, #0]
 800cfd2:	2528      	movs	r5, #40	; 0x28
 800cfd4:	1c66      	adds	r6, r4, #1
 800cfd6:	fb05 0504 	mla	r5, r5, r4, r0
 800cfda:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800cfde:	f105 0018 	add.w	r0, r5, #24
 800cfe2:	f005 f87f 	bl	80120e4 <uxr_init_output_reliable_stream>
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	2201      	movs	r2, #1
 800cfea:	2102      	movs	r1, #2
 800cfec:	b004      	add	sp, #16
 800cfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff2:	f7ff bf35 	b.w	800ce60 <uxr_stream_id>
 800cff6:	bf00      	nop

0800cff8 <uxr_add_input_best_effort_buffer>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800cffe:	1c62      	adds	r2, r4, #1
 800d000:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800d004:	b082      	sub	sp, #8
 800d006:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800d00a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800d00e:	f004 fe03 	bl	8011c18 <uxr_init_input_best_effort_stream>
 800d012:	4620      	mov	r0, r4
 800d014:	2200      	movs	r2, #0
 800d016:	2101      	movs	r1, #1
 800d018:	b002      	add	sp, #8
 800d01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d01e:	f7ff bf1f 	b.w	800ce60 <uxr_stream_id>
 800d022:	bf00      	nop

0800d024 <uxr_add_input_reliable_buffer>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800d02c:	9e08      	ldr	r6, [sp, #32]
 800d02e:	9600      	str	r6, [sp, #0]
 800d030:	2518      	movs	r5, #24
 800d032:	1c66      	adds	r6, r4, #1
 800d034:	fb05 0504 	mla	r5, r5, r4, r0
 800d038:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800d03c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d040:	f004 fe32 	bl	8011ca8 <uxr_init_input_reliable_stream>
 800d044:	4620      	mov	r0, r4
 800d046:	2200      	movs	r2, #0
 800d048:	2102      	movs	r1, #2
 800d04a:	b004      	add	sp, #16
 800d04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d050:	f7ff bf06 	b.w	800ce60 <uxr_stream_id>

0800d054 <uxr_get_output_best_effort_stream>:
 800d054:	7c03      	ldrb	r3, [r0, #16]
 800d056:	428b      	cmp	r3, r1
 800d058:	bf8c      	ite	hi
 800d05a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800d05e:	2000      	movls	r0, #0
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop

0800d064 <uxr_get_output_reliable_stream>:
 800d064:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d068:	428b      	cmp	r3, r1
 800d06a:	bf83      	ittte	hi
 800d06c:	2328      	movhi	r3, #40	; 0x28
 800d06e:	fb03 0101 	mlahi	r1, r3, r1, r0
 800d072:	f101 0018 	addhi.w	r0, r1, #24
 800d076:	2000      	movls	r0, #0
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop

0800d07c <uxr_get_input_best_effort_stream>:
 800d07c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d080:	428b      	cmp	r3, r1
 800d082:	bf86      	itte	hi
 800d084:	3121      	addhi	r1, #33	; 0x21
 800d086:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800d08a:	2000      	movls	r0, #0
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop

0800d090 <uxr_get_input_reliable_stream>:
 800d090:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800d094:	428b      	cmp	r3, r1
 800d096:	bf83      	ittte	hi
 800d098:	2318      	movhi	r3, #24
 800d09a:	fb03 0101 	mlahi	r1, r3, r1, r0
 800d09e:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800d0a2:	2000      	movls	r0, #0
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop

0800d0a8 <uxr_output_streams_confirmed>:
 800d0a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d0ac:	b183      	cbz	r3, 800d0d0 <uxr_output_streams_confirmed+0x28>
 800d0ae:	b570      	push	{r4, r5, r6, lr}
 800d0b0:	4606      	mov	r6, r0
 800d0b2:	f100 0518 	add.w	r5, r0, #24
 800d0b6:	2400      	movs	r4, #0
 800d0b8:	e001      	b.n	800d0be <uxr_output_streams_confirmed+0x16>
 800d0ba:	3528      	adds	r5, #40	; 0x28
 800d0bc:	b138      	cbz	r0, 800d0ce <uxr_output_streams_confirmed+0x26>
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f005 fab2 	bl	8012628 <uxr_is_output_up_to_date>
 800d0c4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800d0c8:	3401      	adds	r4, #1
 800d0ca:	42a3      	cmp	r3, r4
 800d0cc:	d8f5      	bhi.n	800d0ba <uxr_output_streams_confirmed+0x12>
 800d0ce:	bd70      	pop	{r4, r5, r6, pc}
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	4770      	bx	lr

0800d0d4 <uxr_buffer_submessage_header>:
 800d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	460e      	mov	r6, r1
 800d0da:	2104      	movs	r1, #4
 800d0dc:	4615      	mov	r5, r2
 800d0de:	461f      	mov	r7, r3
 800d0e0:	f7fc fdd6 	bl	8009c90 <ucdr_align_to>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	ea47 0203 	orr.w	r2, r7, r3
 800d0ea:	4631      	mov	r1, r6
 800d0ec:	7523      	strb	r3, [r4, #20]
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	f000 f8a5 	bl	800d240 <uxr_serialize_submessage_header>
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7fc fde0 	bl	8009cbc <ucdr_buffer_remaining>
 800d0fc:	42a8      	cmp	r0, r5
 800d0fe:	bf34      	ite	cc
 800d100:	2000      	movcc	r0, #0
 800d102:	2001      	movcs	r0, #1
 800d104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d106:	bf00      	nop

0800d108 <uxr_read_submessage_header>:
 800d108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10c:	4604      	mov	r4, r0
 800d10e:	460d      	mov	r5, r1
 800d110:	2104      	movs	r1, #4
 800d112:	4616      	mov	r6, r2
 800d114:	4698      	mov	r8, r3
 800d116:	f7fc fdbb 	bl	8009c90 <ucdr_align_to>
 800d11a:	4620      	mov	r0, r4
 800d11c:	f7fc fdce 	bl	8009cbc <ucdr_buffer_remaining>
 800d120:	2803      	cmp	r0, #3
 800d122:	bf8c      	ite	hi
 800d124:	2701      	movhi	r7, #1
 800d126:	2700      	movls	r7, #0
 800d128:	d802      	bhi.n	800d130 <uxr_read_submessage_header+0x28>
 800d12a:	4638      	mov	r0, r7
 800d12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d130:	4633      	mov	r3, r6
 800d132:	4642      	mov	r2, r8
 800d134:	4620      	mov	r0, r4
 800d136:	4629      	mov	r1, r5
 800d138:	f000 f896 	bl	800d268 <uxr_deserialize_submessage_header>
 800d13c:	f898 3000 	ldrb.w	r3, [r8]
 800d140:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800d144:	f003 0301 	and.w	r3, r3, #1
 800d148:	f888 2000 	strb.w	r2, [r8]
 800d14c:	7523      	strb	r3, [r4, #20]
 800d14e:	4638      	mov	r0, r7
 800d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d154 <uxr_submessage_padding>:
 800d154:	f010 0003 	ands.w	r0, r0, #3
 800d158:	bf18      	it	ne
 800d15a:	f1c0 0004 	rsbne	r0, r0, #4
 800d15e:	4770      	bx	lr

0800d160 <uxr_millis>:
 800d160:	b510      	push	{r4, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	4669      	mov	r1, sp
 800d166:	2001      	movs	r0, #1
 800d168:	f7f4 f9c6 	bl	80014f8 <clock_gettime>
 800d16c:	e9dd 2400 	ldrd	r2, r4, [sp]
 800d170:	4907      	ldr	r1, [pc, #28]	; (800d190 <uxr_millis+0x30>)
 800d172:	9802      	ldr	r0, [sp, #8]
 800d174:	fba2 2301 	umull	r2, r3, r2, r1
 800d178:	fb01 3304 	mla	r3, r1, r4, r3
 800d17c:	4604      	mov	r4, r0
 800d17e:	1810      	adds	r0, r2, r0
 800d180:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800d184:	4a03      	ldr	r2, [pc, #12]	; (800d194 <uxr_millis+0x34>)
 800d186:	2300      	movs	r3, #0
 800d188:	f7f3 f91a 	bl	80003c0 <__aeabi_ldivmod>
 800d18c:	b004      	add	sp, #16
 800d18e:	bd10      	pop	{r4, pc}
 800d190:	3b9aca00 	.word	0x3b9aca00
 800d194:	000f4240 	.word	0x000f4240

0800d198 <uxr_nanos>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	4669      	mov	r1, sp
 800d19e:	2001      	movs	r0, #1
 800d1a0:	f7f4 f9aa 	bl	80014f8 <clock_gettime>
 800d1a4:	e9dd 2400 	ldrd	r2, r4, [sp]
 800d1a8:	4905      	ldr	r1, [pc, #20]	; (800d1c0 <uxr_nanos+0x28>)
 800d1aa:	9802      	ldr	r0, [sp, #8]
 800d1ac:	fba2 2301 	umull	r2, r3, r2, r1
 800d1b0:	fb01 3304 	mla	r3, r1, r4, r3
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	1810      	adds	r0, r2, r0
 800d1b8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800d1bc:	b004      	add	sp, #16
 800d1be:	bd10      	pop	{r4, pc}
 800d1c0:	3b9aca00 	.word	0x3b9aca00

0800d1c4 <uxr_serialize_message_header>:
 800d1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	9f08      	ldr	r7, [sp, #32]
 800d1d2:	f7fb fc03 	bl	80089dc <ucdr_serialize_uint8_t>
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7fb fbff 	bl	80089dc <ucdr_serialize_uint8_t>
 800d1de:	9a01      	ldr	r2, [sp, #4]
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	f7fb fca6 	bl	8008b34 <ucdr_serialize_endian_uint16_t>
 800d1e8:	062b      	lsls	r3, r5, #24
 800d1ea:	d501      	bpl.n	800d1f0 <uxr_serialize_message_header+0x2c>
 800d1ec:	b003      	add	sp, #12
 800d1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	2204      	movs	r2, #4
 800d1f6:	b003      	add	sp, #12
 800d1f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d1fc:	f004 bb14 	b.w	8011828 <ucdr_serialize_array_uint8_t>

0800d200 <uxr_deserialize_message_header>:
 800d200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d202:	b083      	sub	sp, #12
 800d204:	4616      	mov	r6, r2
 800d206:	4604      	mov	r4, r0
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	460d      	mov	r5, r1
 800d20c:	9f08      	ldr	r7, [sp, #32]
 800d20e:	f7fb fbfb 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d212:	4631      	mov	r1, r6
 800d214:	4620      	mov	r0, r4
 800d216:	f7fb fbf7 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d21a:	9a01      	ldr	r2, [sp, #4]
 800d21c:	4620      	mov	r0, r4
 800d21e:	2101      	movs	r1, #1
 800d220:	f7fb fd7c 	bl	8008d1c <ucdr_deserialize_endian_uint16_t>
 800d224:	f995 3000 	ldrsb.w	r3, [r5]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	da01      	bge.n	800d230 <uxr_deserialize_message_header+0x30>
 800d22c:	b003      	add	sp, #12
 800d22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d230:	4639      	mov	r1, r7
 800d232:	4620      	mov	r0, r4
 800d234:	2204      	movs	r2, #4
 800d236:	b003      	add	sp, #12
 800d238:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d23c:	f004 bb58 	b.w	80118f0 <ucdr_deserialize_array_uint8_t>

0800d240 <uxr_serialize_submessage_header>:
 800d240:	b530      	push	{r4, r5, lr}
 800d242:	b083      	sub	sp, #12
 800d244:	4615      	mov	r5, r2
 800d246:	4604      	mov	r4, r0
 800d248:	9301      	str	r3, [sp, #4]
 800d24a:	f7fb fbc7 	bl	80089dc <ucdr_serialize_uint8_t>
 800d24e:	4629      	mov	r1, r5
 800d250:	4620      	mov	r0, r4
 800d252:	f7fb fbc3 	bl	80089dc <ucdr_serialize_uint8_t>
 800d256:	9a01      	ldr	r2, [sp, #4]
 800d258:	4620      	mov	r0, r4
 800d25a:	2101      	movs	r1, #1
 800d25c:	b003      	add	sp, #12
 800d25e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d262:	f7fb bc67 	b.w	8008b34 <ucdr_serialize_endian_uint16_t>
 800d266:	bf00      	nop

0800d268 <uxr_deserialize_submessage_header>:
 800d268:	b530      	push	{r4, r5, lr}
 800d26a:	b083      	sub	sp, #12
 800d26c:	4615      	mov	r5, r2
 800d26e:	4604      	mov	r4, r0
 800d270:	9301      	str	r3, [sp, #4]
 800d272:	f7fb fbc9 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d276:	4629      	mov	r1, r5
 800d278:	4620      	mov	r0, r4
 800d27a:	f7fb fbc5 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d27e:	9a01      	ldr	r2, [sp, #4]
 800d280:	4620      	mov	r0, r4
 800d282:	2101      	movs	r1, #1
 800d284:	b003      	add	sp, #12
 800d286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d28a:	f7fb bd47 	b.w	8008d1c <ucdr_deserialize_endian_uint16_t>
 800d28e:	bf00      	nop

0800d290 <uxr_serialize_CLIENT_Representation>:
 800d290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d294:	2204      	movs	r2, #4
 800d296:	460c      	mov	r4, r1
 800d298:	4605      	mov	r5, r0
 800d29a:	f004 fac5 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d29e:	1d21      	adds	r1, r4, #4
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f004 fabf 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d2aa:	1da1      	adds	r1, r4, #6
 800d2ac:	4007      	ands	r7, r0
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f004 fab9 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d2b6:	fa5f f887 	uxtb.w	r8, r7
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	4607      	mov	r7, r0
 800d2be:	f104 0108 	add.w	r1, r4, #8
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	f004 fab0 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d2c8:	ea08 0707 	and.w	r7, r8, r7
 800d2cc:	7b21      	ldrb	r1, [r4, #12]
 800d2ce:	4680      	mov	r8, r0
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f7fb fb83 	bl	80089dc <ucdr_serialize_uint8_t>
 800d2d6:	ea08 0807 	and.w	r8, r8, r7
 800d2da:	7b61      	ldrb	r1, [r4, #13]
 800d2dc:	4607      	mov	r7, r0
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f7fb fb4c 	bl	800897c <ucdr_serialize_bool>
 800d2e4:	7b63      	ldrb	r3, [r4, #13]
 800d2e6:	ea08 0707 	and.w	r7, r8, r7
 800d2ea:	ea07 0600 	and.w	r6, r7, r0
 800d2ee:	b933      	cbnz	r3, 800d2fe <uxr_serialize_CLIENT_Representation+0x6e>
 800d2f0:	8ba1      	ldrh	r1, [r4, #28]
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	f7fb fb9e 	bl	8008a34 <ucdr_serialize_uint16_t>
 800d2f8:	4030      	ands	r0, r6
 800d2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2fe:	6921      	ldr	r1, [r4, #16]
 800d300:	4628      	mov	r0, r5
 800d302:	f7fb fd81 	bl	8008e08 <ucdr_serialize_uint32_t>
 800d306:	6923      	ldr	r3, [r4, #16]
 800d308:	b1cb      	cbz	r3, 800d33e <uxr_serialize_CLIENT_Representation+0xae>
 800d30a:	b1d0      	cbz	r0, 800d342 <uxr_serialize_CLIENT_Representation+0xb2>
 800d30c:	46a0      	mov	r8, r4
 800d30e:	f04f 0900 	mov.w	r9, #0
 800d312:	e002      	b.n	800d31a <uxr_serialize_CLIENT_Representation+0x8a>
 800d314:	f108 0808 	add.w	r8, r8, #8
 800d318:	b198      	cbz	r0, 800d342 <uxr_serialize_CLIENT_Representation+0xb2>
 800d31a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d31e:	4628      	mov	r0, r5
 800d320:	f004 fba2 	bl	8011a68 <ucdr_serialize_string>
 800d324:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d328:	4607      	mov	r7, r0
 800d32a:	4628      	mov	r0, r5
 800d32c:	f004 fb9c 	bl	8011a68 <ucdr_serialize_string>
 800d330:	6923      	ldr	r3, [r4, #16]
 800d332:	f109 0901 	add.w	r9, r9, #1
 800d336:	4038      	ands	r0, r7
 800d338:	4599      	cmp	r9, r3
 800d33a:	b2c0      	uxtb	r0, r0
 800d33c:	d3ea      	bcc.n	800d314 <uxr_serialize_CLIENT_Representation+0x84>
 800d33e:	4006      	ands	r6, r0
 800d340:	e7d6      	b.n	800d2f0 <uxr_serialize_CLIENT_Representation+0x60>
 800d342:	2600      	movs	r6, #0
 800d344:	e7d4      	b.n	800d2f0 <uxr_serialize_CLIENT_Representation+0x60>
 800d346:	bf00      	nop

0800d348 <uxr_deserialize_CLIENT_Representation>:
 800d348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d34c:	2204      	movs	r2, #4
 800d34e:	460c      	mov	r4, r1
 800d350:	4605      	mov	r5, r0
 800d352:	f004 facd 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d356:	1d21      	adds	r1, r4, #4
 800d358:	4607      	mov	r7, r0
 800d35a:	2202      	movs	r2, #2
 800d35c:	4628      	mov	r0, r5
 800d35e:	f004 fac7 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d362:	1da1      	adds	r1, r4, #6
 800d364:	4007      	ands	r7, r0
 800d366:	2202      	movs	r2, #2
 800d368:	4628      	mov	r0, r5
 800d36a:	f004 fac1 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d36e:	fa5f f887 	uxtb.w	r8, r7
 800d372:	2204      	movs	r2, #4
 800d374:	4607      	mov	r7, r0
 800d376:	f104 0108 	add.w	r1, r4, #8
 800d37a:	4628      	mov	r0, r5
 800d37c:	f004 fab8 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d380:	ea08 0707 	and.w	r7, r8, r7
 800d384:	f104 010c 	add.w	r1, r4, #12
 800d388:	4680      	mov	r8, r0
 800d38a:	4628      	mov	r0, r5
 800d38c:	f7fb fb3c 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d390:	ea08 0807 	and.w	r8, r8, r7
 800d394:	f104 010d 	add.w	r1, r4, #13
 800d398:	4607      	mov	r7, r0
 800d39a:	4628      	mov	r0, r5
 800d39c:	f7fb fb04 	bl	80089a8 <ucdr_deserialize_bool>
 800d3a0:	7b63      	ldrb	r3, [r4, #13]
 800d3a2:	ea08 0707 	and.w	r7, r8, r7
 800d3a6:	ea07 0600 	and.w	r6, r7, r0
 800d3aa:	b93b      	cbnz	r3, 800d3bc <uxr_deserialize_CLIENT_Representation+0x74>
 800d3ac:	f104 011c 	add.w	r1, r4, #28
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f7fb fc3f 	bl	8008c34 <ucdr_deserialize_uint16_t>
 800d3b6:	4030      	ands	r0, r6
 800d3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3bc:	f104 0110 	add.w	r1, r4, #16
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7fb fe51 	bl	8009068 <ucdr_deserialize_uint32_t>
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d903      	bls.n	800d3d4 <uxr_deserialize_CLIENT_Representation+0x8c>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	75ab      	strb	r3, [r5, #22]
 800d3d0:	2600      	movs	r6, #0
 800d3d2:	e7eb      	b.n	800d3ac <uxr_deserialize_CLIENT_Representation+0x64>
 800d3d4:	b1fb      	cbz	r3, 800d416 <uxr_deserialize_CLIENT_Representation+0xce>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d0fa      	beq.n	800d3d0 <uxr_deserialize_CLIENT_Representation+0x88>
 800d3da:	46a0      	mov	r8, r4
 800d3dc:	f04f 0900 	mov.w	r9, #0
 800d3e0:	e003      	b.n	800d3ea <uxr_deserialize_CLIENT_Representation+0xa2>
 800d3e2:	f108 0808 	add.w	r8, r8, #8
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d0f2      	beq.n	800d3d0 <uxr_deserialize_CLIENT_Representation+0x88>
 800d3ea:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f004 fb48 	bl	8011a88 <ucdr_deserialize_string>
 800d3f8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d3fc:	4607      	mov	r7, r0
 800d3fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d402:	4628      	mov	r0, r5
 800d404:	f004 fb40 	bl	8011a88 <ucdr_deserialize_string>
 800d408:	6923      	ldr	r3, [r4, #16]
 800d40a:	f109 0901 	add.w	r9, r9, #1
 800d40e:	4038      	ands	r0, r7
 800d410:	4599      	cmp	r9, r3
 800d412:	b2c0      	uxtb	r0, r0
 800d414:	d3e5      	bcc.n	800d3e2 <uxr_deserialize_CLIENT_Representation+0x9a>
 800d416:	4006      	ands	r6, r0
 800d418:	e7c8      	b.n	800d3ac <uxr_deserialize_CLIENT_Representation+0x64>
 800d41a:	bf00      	nop

0800d41c <uxr_serialize_AGENT_Representation>:
 800d41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d420:	2204      	movs	r2, #4
 800d422:	460c      	mov	r4, r1
 800d424:	4605      	mov	r5, r0
 800d426:	f004 f9ff 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d42a:	1d21      	adds	r1, r4, #4
 800d42c:	4606      	mov	r6, r0
 800d42e:	2202      	movs	r2, #2
 800d430:	4628      	mov	r0, r5
 800d432:	f004 f9f9 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d436:	1da1      	adds	r1, r4, #6
 800d438:	4006      	ands	r6, r0
 800d43a:	2202      	movs	r2, #2
 800d43c:	4628      	mov	r0, r5
 800d43e:	f004 f9f3 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d442:	b2f6      	uxtb	r6, r6
 800d444:	4603      	mov	r3, r0
 800d446:	7a21      	ldrb	r1, [r4, #8]
 800d448:	4628      	mov	r0, r5
 800d44a:	401e      	ands	r6, r3
 800d44c:	f7fb fa96 	bl	800897c <ucdr_serialize_bool>
 800d450:	7a23      	ldrb	r3, [r4, #8]
 800d452:	ea00 0706 	and.w	r7, r0, r6
 800d456:	b913      	cbnz	r3, 800d45e <uxr_serialize_AGENT_Representation+0x42>
 800d458:	4638      	mov	r0, r7
 800d45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45e:	68e1      	ldr	r1, [r4, #12]
 800d460:	4628      	mov	r0, r5
 800d462:	f7fb fcd1 	bl	8008e08 <ucdr_serialize_uint32_t>
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	b313      	cbz	r3, 800d4b0 <uxr_serialize_AGENT_Representation+0x94>
 800d46a:	b1e8      	cbz	r0, 800d4a8 <uxr_serialize_AGENT_Representation+0x8c>
 800d46c:	46a0      	mov	r8, r4
 800d46e:	f04f 0900 	mov.w	r9, #0
 800d472:	e002      	b.n	800d47a <uxr_serialize_AGENT_Representation+0x5e>
 800d474:	f108 0808 	add.w	r8, r8, #8
 800d478:	b1b3      	cbz	r3, 800d4a8 <uxr_serialize_AGENT_Representation+0x8c>
 800d47a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d47e:	4628      	mov	r0, r5
 800d480:	f004 faf2 	bl	8011a68 <ucdr_serialize_string>
 800d484:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d488:	4606      	mov	r6, r0
 800d48a:	4628      	mov	r0, r5
 800d48c:	f004 faec 	bl	8011a68 <ucdr_serialize_string>
 800d490:	68e2      	ldr	r2, [r4, #12]
 800d492:	f109 0901 	add.w	r9, r9, #1
 800d496:	ea06 0300 	and.w	r3, r6, r0
 800d49a:	4591      	cmp	r9, r2
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	d3e9      	bcc.n	800d474 <uxr_serialize_AGENT_Representation+0x58>
 800d4a0:	401f      	ands	r7, r3
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4a8:	2700      	movs	r7, #0
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b0:	4007      	ands	r7, r0
 800d4b2:	e7d1      	b.n	800d458 <uxr_serialize_AGENT_Representation+0x3c>

0800d4b4 <uxr_serialize_ObjectVariant.part.0>:
 800d4b4:	b570      	push	{r4, r5, r6, lr}
 800d4b6:	780b      	ldrb	r3, [r1, #0]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	4605      	mov	r5, r0
 800d4be:	2b0d      	cmp	r3, #13
 800d4c0:	d869      	bhi.n	800d596 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800d4c2:	e8df f003 	tbb	[pc, r3]
 800d4c6:	074a      	.short	0x074a
 800d4c8:	07073030 	.word	0x07073030
 800d4cc:	21680707 	.word	0x21680707
 800d4d0:	45632121 	.word	0x45632121
 800d4d4:	7909      	ldrb	r1, [r1, #4]
 800d4d6:	f7fb fa81 	bl	80089dc <ucdr_serialize_uint8_t>
 800d4da:	4606      	mov	r6, r0
 800d4dc:	b158      	cbz	r0, 800d4f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d4de:	7923      	ldrb	r3, [r4, #4]
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d003      	beq.n	800d4ec <uxr_serialize_ObjectVariant.part.0+0x38>
 800d4e4:	2b03      	cmp	r3, #3
 800d4e6:	d029      	beq.n	800d53c <uxr_serialize_ObjectVariant.part.0+0x88>
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d104      	bne.n	800d4f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d4ec:	68a1      	ldr	r1, [r4, #8]
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f004 faba 	bl	8011a68 <ucdr_serialize_string>
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	2202      	movs	r2, #2
 800d4fe:	f004 f993 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d502:	4030      	ands	r0, r6
 800d504:	b2c0      	uxtb	r0, r0
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	7909      	ldrb	r1, [r1, #4]
 800d50a:	f7fb fa67 	bl	80089dc <ucdr_serialize_uint8_t>
 800d50e:	b1e8      	cbz	r0, 800d54c <uxr_serialize_ObjectVariant.part.0+0x98>
 800d510:	7923      	ldrb	r3, [r4, #4]
 800d512:	2b01      	cmp	r3, #1
 800d514:	d001      	beq.n	800d51a <uxr_serialize_ObjectVariant.part.0+0x66>
 800d516:	2b02      	cmp	r3, #2
 800d518:	d13d      	bne.n	800d596 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800d51a:	68a1      	ldr	r1, [r4, #8]
 800d51c:	4628      	mov	r0, r5
 800d51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d522:	f004 baa1 	b.w	8011a68 <ucdr_serialize_string>
 800d526:	7909      	ldrb	r1, [r1, #4]
 800d528:	f7fb fa58 	bl	80089dc <ucdr_serialize_uint8_t>
 800d52c:	4606      	mov	r6, r0
 800d52e:	2800      	cmp	r0, #0
 800d530:	d0e1      	beq.n	800d4f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d532:	7923      	ldrb	r3, [r4, #4]
 800d534:	2b02      	cmp	r3, #2
 800d536:	d0d9      	beq.n	800d4ec <uxr_serialize_ObjectVariant.part.0+0x38>
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d1dc      	bne.n	800d4f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d53c:	68a2      	ldr	r2, [r4, #8]
 800d53e:	f104 010c 	add.w	r1, r4, #12
 800d542:	4628      	mov	r0, r5
 800d544:	f004 fa64 	bl	8011a10 <ucdr_serialize_sequence_uint8_t>
 800d548:	4606      	mov	r6, r0
 800d54a:	e7d4      	b.n	800d4f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800d54c:	2000      	movs	r0, #0
 800d54e:	bd70      	pop	{r4, r5, r6, pc}
 800d550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d554:	3104      	adds	r1, #4
 800d556:	f7ff be9b 	b.w	800d290 <uxr_serialize_CLIENT_Representation>
 800d55a:	7909      	ldrb	r1, [r1, #4]
 800d55c:	f7fb fa3e 	bl	80089dc <ucdr_serialize_uint8_t>
 800d560:	4606      	mov	r6, r0
 800d562:	b158      	cbz	r0, 800d57c <uxr_serialize_ObjectVariant.part.0+0xc8>
 800d564:	7923      	ldrb	r3, [r4, #4]
 800d566:	2b02      	cmp	r3, #2
 800d568:	d003      	beq.n	800d572 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800d56a:	2b03      	cmp	r3, #3
 800d56c:	d015      	beq.n	800d59a <uxr_serialize_ObjectVariant.part.0+0xe6>
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d104      	bne.n	800d57c <uxr_serialize_ObjectVariant.part.0+0xc8>
 800d572:	68a1      	ldr	r1, [r4, #8]
 800d574:	4628      	mov	r0, r5
 800d576:	f004 fa77 	bl	8011a68 <ucdr_serialize_string>
 800d57a:	4606      	mov	r6, r0
 800d57c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800d580:	4628      	mov	r0, r5
 800d582:	f7fb ff67 	bl	8009454 <ucdr_serialize_int16_t>
 800d586:	4030      	ands	r0, r6
 800d588:	b2c0      	uxtb	r0, r0
 800d58a:	bd70      	pop	{r4, r5, r6, pc}
 800d58c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d590:	3104      	adds	r1, #4
 800d592:	f7ff bf43 	b.w	800d41c <uxr_serialize_AGENT_Representation>
 800d596:	2001      	movs	r0, #1
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	68a2      	ldr	r2, [r4, #8]
 800d59c:	f104 010c 	add.w	r1, r4, #12
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f004 fa35 	bl	8011a10 <ucdr_serialize_sequence_uint8_t>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	e7e8      	b.n	800d57c <uxr_serialize_ObjectVariant.part.0+0xc8>
 800d5aa:	bf00      	nop

0800d5ac <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d5ac:	b570      	push	{r4, r5, r6, lr}
 800d5ae:	460d      	mov	r5, r1
 800d5b0:	7809      	ldrb	r1, [r1, #0]
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	f7fb f9e2 	bl	800897c <ucdr_serialize_bool>
 800d5b8:	782b      	ldrb	r3, [r5, #0]
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	b94b      	cbnz	r3, 800d5d2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d5be:	7a29      	ldrb	r1, [r5, #8]
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	f7fb f9db 	bl	800897c <ucdr_serialize_bool>
 800d5c6:	7a2b      	ldrb	r3, [r5, #8]
 800d5c8:	4004      	ands	r4, r0
 800d5ca:	b2e4      	uxtb	r4, r4
 800d5cc:	b943      	cbnz	r3, 800d5e0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	6869      	ldr	r1, [r5, #4]
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f004 fa47 	bl	8011a68 <ucdr_serialize_string>
 800d5da:	4004      	ands	r4, r0
 800d5dc:	b2e4      	uxtb	r4, r4
 800d5de:	e7ee      	b.n	800d5be <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d5e0:	68e9      	ldr	r1, [r5, #12]
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f004 fa40 	bl	8011a68 <ucdr_serialize_string>
 800d5e8:	4004      	ands	r4, r0
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	bd70      	pop	{r4, r5, r6, pc}
 800d5ee:	bf00      	nop

0800d5f0 <uxr_serialize_OBJK_Topic_Binary>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	6809      	ldr	r1, [r1, #0]
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	f004 fa36 	bl	8011a68 <ucdr_serialize_string>
 800d5fc:	7929      	ldrb	r1, [r5, #4]
 800d5fe:	4604      	mov	r4, r0
 800d600:	4630      	mov	r0, r6
 800d602:	f7fb f9bb 	bl	800897c <ucdr_serialize_bool>
 800d606:	792b      	ldrb	r3, [r5, #4]
 800d608:	4004      	ands	r4, r0
 800d60a:	b2e4      	uxtb	r4, r4
 800d60c:	b943      	cbnz	r3, 800d620 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d60e:	7b29      	ldrb	r1, [r5, #12]
 800d610:	4630      	mov	r0, r6
 800d612:	f7fb f9b3 	bl	800897c <ucdr_serialize_bool>
 800d616:	7b2b      	ldrb	r3, [r5, #12]
 800d618:	4004      	ands	r4, r0
 800d61a:	b93b      	cbnz	r3, 800d62c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d61c:	4620      	mov	r0, r4
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
 800d620:	68a9      	ldr	r1, [r5, #8]
 800d622:	4630      	mov	r0, r6
 800d624:	f004 fa20 	bl	8011a68 <ucdr_serialize_string>
 800d628:	4004      	ands	r4, r0
 800d62a:	e7f0      	b.n	800d60e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d62c:	6929      	ldr	r1, [r5, #16]
 800d62e:	4630      	mov	r0, r6
 800d630:	f004 fa1a 	bl	8011a68 <ucdr_serialize_string>
 800d634:	4004      	ands	r4, r0
 800d636:	b2e4      	uxtb	r4, r4
 800d638:	4620      	mov	r0, r4
 800d63a:	bd70      	pop	{r4, r5, r6, pc}

0800d63c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	460c      	mov	r4, r1
 800d642:	7809      	ldrb	r1, [r1, #0]
 800d644:	4606      	mov	r6, r0
 800d646:	f7fb f999 	bl	800897c <ucdr_serialize_bool>
 800d64a:	7823      	ldrb	r3, [r4, #0]
 800d64c:	4605      	mov	r5, r0
 800d64e:	b96b      	cbnz	r3, 800d66c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800d650:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800d654:	4630      	mov	r0, r6
 800d656:	f7fb f991 	bl	800897c <ucdr_serialize_bool>
 800d65a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d65e:	4005      	ands	r5, r0
 800d660:	b2ed      	uxtb	r5, r5
 800d662:	2b00      	cmp	r3, #0
 800d664:	d169      	bne.n	800d73a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800d666:	4628      	mov	r0, r5
 800d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66c:	6861      	ldr	r1, [r4, #4]
 800d66e:	4630      	mov	r0, r6
 800d670:	f7fb fbca 	bl	8008e08 <ucdr_serialize_uint32_t>
 800d674:	6863      	ldr	r3, [r4, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d06b      	beq.n	800d752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d067      	beq.n	800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d67e:	68a1      	ldr	r1, [r4, #8]
 800d680:	4630      	mov	r0, r6
 800d682:	f004 f9f1 	bl	8011a68 <ucdr_serialize_string>
 800d686:	6863      	ldr	r3, [r4, #4]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d953      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d05e      	beq.n	800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d690:	68e1      	ldr	r1, [r4, #12]
 800d692:	4630      	mov	r0, r6
 800d694:	f004 f9e8 	bl	8011a68 <ucdr_serialize_string>
 800d698:	6863      	ldr	r3, [r4, #4]
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d94a      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d055      	beq.n	800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d6a2:	6921      	ldr	r1, [r4, #16]
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f004 f9df 	bl	8011a68 <ucdr_serialize_string>
 800d6aa:	6863      	ldr	r3, [r4, #4]
 800d6ac:	2b03      	cmp	r3, #3
 800d6ae:	d941      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d04c      	beq.n	800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d6b4:	6961      	ldr	r1, [r4, #20]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f004 f9d6 	bl	8011a68 <ucdr_serialize_string>
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d938      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d043      	beq.n	800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d6c6:	69a1      	ldr	r1, [r4, #24]
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f004 f9cd 	bl	8011a68 <ucdr_serialize_string>
 800d6ce:	6863      	ldr	r3, [r4, #4]
 800d6d0:	2b05      	cmp	r3, #5
 800d6d2:	d92f      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d03a      	beq.n	800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d6d8:	69e1      	ldr	r1, [r4, #28]
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f004 f9c4 	bl	8011a68 <ucdr_serialize_string>
 800d6e0:	6863      	ldr	r3, [r4, #4]
 800d6e2:	2b06      	cmp	r3, #6
 800d6e4:	d926      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d6e6:	b390      	cbz	r0, 800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d6e8:	6a21      	ldr	r1, [r4, #32]
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f004 f9bc 	bl	8011a68 <ucdr_serialize_string>
 800d6f0:	6863      	ldr	r3, [r4, #4]
 800d6f2:	2b07      	cmp	r3, #7
 800d6f4:	d91e      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d6f6:	b350      	cbz	r0, 800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d6f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f004 f9b4 	bl	8011a68 <ucdr_serialize_string>
 800d700:	6863      	ldr	r3, [r4, #4]
 800d702:	2b08      	cmp	r3, #8
 800d704:	d916      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d706:	b310      	cbz	r0, 800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d708:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d70a:	4630      	mov	r0, r6
 800d70c:	f004 f9ac 	bl	8011a68 <ucdr_serialize_string>
 800d710:	6863      	ldr	r3, [r4, #4]
 800d712:	2b09      	cmp	r3, #9
 800d714:	d90e      	bls.n	800d734 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d716:	b1d0      	cbz	r0, 800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d718:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800d71c:	2709      	movs	r7, #9
 800d71e:	e000      	b.n	800d722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800d720:	b1a8      	cbz	r0, 800d74e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d722:	f858 1b04 	ldr.w	r1, [r8], #4
 800d726:	4630      	mov	r0, r6
 800d728:	f004 f99e 	bl	8011a68 <ucdr_serialize_string>
 800d72c:	6862      	ldr	r2, [r4, #4]
 800d72e:	3701      	adds	r7, #1
 800d730:	4297      	cmp	r7, r2
 800d732:	d3f5      	bcc.n	800d720 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800d734:	4005      	ands	r5, r0
 800d736:	b2ed      	uxtb	r5, r5
 800d738:	e78a      	b.n	800d650 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d73a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d73c:	4630      	mov	r0, r6
 800d73e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d742:	f004 f965 	bl	8011a10 <ucdr_serialize_sequence_uint8_t>
 800d746:	4005      	ands	r5, r0
 800d748:	4628      	mov	r0, r5
 800d74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74e:	2500      	movs	r5, #0
 800d750:	e77e      	b.n	800d650 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d752:	4028      	ands	r0, r5
 800d754:	b2c5      	uxtb	r5, r0
 800d756:	e77b      	b.n	800d650 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800d758 <uxr_serialize_OBJK_Subscriber_Binary>:
 800d758:	b570      	push	{r4, r5, r6, lr}
 800d75a:	460d      	mov	r5, r1
 800d75c:	7809      	ldrb	r1, [r1, #0]
 800d75e:	4606      	mov	r6, r0
 800d760:	f7fb f90c 	bl	800897c <ucdr_serialize_bool>
 800d764:	782b      	ldrb	r3, [r5, #0]
 800d766:	4604      	mov	r4, r0
 800d768:	b94b      	cbnz	r3, 800d77e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800d76a:	7a29      	ldrb	r1, [r5, #8]
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7fb f905 	bl	800897c <ucdr_serialize_bool>
 800d772:	7a2b      	ldrb	r3, [r5, #8]
 800d774:	4004      	ands	r4, r0
 800d776:	b2e4      	uxtb	r4, r4
 800d778:	b943      	cbnz	r3, 800d78c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800d77a:	4620      	mov	r0, r4
 800d77c:	bd70      	pop	{r4, r5, r6, pc}
 800d77e:	6869      	ldr	r1, [r5, #4]
 800d780:	4630      	mov	r0, r6
 800d782:	f004 f971 	bl	8011a68 <ucdr_serialize_string>
 800d786:	4004      	ands	r4, r0
 800d788:	b2e4      	uxtb	r4, r4
 800d78a:	e7ee      	b.n	800d76a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800d78c:	f105 010c 	add.w	r1, r5, #12
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff ff53 	bl	800d63c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800d796:	4004      	ands	r4, r0
 800d798:	4620      	mov	r0, r4
 800d79a:	bd70      	pop	{r4, r5, r6, pc}

0800d79c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d79c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d7a0:	4688      	mov	r8, r1
 800d7a2:	8809      	ldrh	r1, [r1, #0]
 800d7a4:	4681      	mov	r9, r0
 800d7a6:	f7fb f945 	bl	8008a34 <ucdr_serialize_uint16_t>
 800d7aa:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	4648      	mov	r0, r9
 800d7b2:	f7fb f8e3 	bl	800897c <ucdr_serialize_bool>
 800d7b6:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d7ba:	4030      	ands	r0, r6
 800d7bc:	b2c5      	uxtb	r5, r0
 800d7be:	b9eb      	cbnz	r3, 800d7fc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d7c0:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d7c4:	4648      	mov	r0, r9
 800d7c6:	f7fb f8d9 	bl	800897c <ucdr_serialize_bool>
 800d7ca:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d7ce:	4005      	ands	r5, r0
 800d7d0:	bb7b      	cbnz	r3, 800d832 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d7d2:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d7d6:	4648      	mov	r0, r9
 800d7d8:	f7fb f8d0 	bl	800897c <ucdr_serialize_bool>
 800d7dc:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d7e0:	4005      	ands	r5, r0
 800d7e2:	b9f3      	cbnz	r3, 800d822 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d7e4:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d7e8:	4648      	mov	r0, r9
 800d7ea:	f7fb f8c7 	bl	800897c <ucdr_serialize_bool>
 800d7ee:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d7f2:	4005      	ands	r5, r0
 800d7f4:	b94b      	cbnz	r3, 800d80a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d7fc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d800:	4648      	mov	r0, r9
 800d802:	f7fb f917 	bl	8008a34 <ucdr_serialize_uint16_t>
 800d806:	4005      	ands	r5, r0
 800d808:	e7da      	b.n	800d7c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d80a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d80e:	4648      	mov	r0, r9
 800d810:	f108 011c 	add.w	r1, r8, #28
 800d814:	f004 f8fc 	bl	8011a10 <ucdr_serialize_sequence_uint8_t>
 800d818:	4028      	ands	r0, r5
 800d81a:	b2c5      	uxtb	r5, r0
 800d81c:	4628      	mov	r0, r5
 800d81e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d822:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d826:	4648      	mov	r0, r9
 800d828:	f7fb faee 	bl	8008e08 <ucdr_serialize_uint32_t>
 800d82c:	4028      	ands	r0, r5
 800d82e:	b2c5      	uxtb	r5, r0
 800d830:	e7d8      	b.n	800d7e4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d832:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d836:	4648      	mov	r0, r9
 800d838:	f7fb fae6 	bl	8008e08 <ucdr_serialize_uint32_t>
 800d83c:	4028      	ands	r0, r5
 800d83e:	b2c5      	uxtb	r5, r0
 800d840:	e7c7      	b.n	800d7d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d842:	bf00      	nop

0800d844 <uxr_serialize_OBJK_DataReader_Binary>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	2202      	movs	r2, #2
 800d848:	460c      	mov	r4, r1
 800d84a:	4606      	mov	r6, r0
 800d84c:	f003 ffec 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800d850:	78a1      	ldrb	r1, [r4, #2]
 800d852:	4605      	mov	r5, r0
 800d854:	4630      	mov	r0, r6
 800d856:	f7fb f891 	bl	800897c <ucdr_serialize_bool>
 800d85a:	78a3      	ldrb	r3, [r4, #2]
 800d85c:	4005      	ands	r5, r0
 800d85e:	b2ed      	uxtb	r5, r5
 800d860:	b90b      	cbnz	r3, 800d866 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800d862:	4628      	mov	r0, r5
 800d864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d866:	f104 0108 	add.w	r1, r4, #8
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7ff ff96 	bl	800d79c <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d870:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d874:	4607      	mov	r7, r0
 800d876:	4630      	mov	r0, r6
 800d878:	f7fb f880 	bl	800897c <ucdr_serialize_bool>
 800d87c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d880:	4038      	ands	r0, r7
 800d882:	b2c7      	uxtb	r7, r0
 800d884:	b95b      	cbnz	r3, 800d89e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800d886:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800d88a:	4630      	mov	r0, r6
 800d88c:	f7fb f876 	bl	800897c <ucdr_serialize_bool>
 800d890:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d894:	4007      	ands	r7, r0
 800d896:	b94b      	cbnz	r3, 800d8ac <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800d898:	403d      	ands	r5, r7
 800d89a:	4628      	mov	r0, r5
 800d89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d89e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7fb fd06 	bl	80092b4 <ucdr_serialize_uint64_t>
 800d8a8:	4007      	ands	r7, r0
 800d8aa:	e7ec      	b.n	800d886 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800d8ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f004 f8da 	bl	8011a68 <ucdr_serialize_string>
 800d8b4:	4007      	ands	r7, r0
 800d8b6:	b2ff      	uxtb	r7, r7
 800d8b8:	e7ee      	b.n	800d898 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800d8ba:	bf00      	nop

0800d8bc <uxr_deserialize_ObjectVariant>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	4605      	mov	r5, r0
 800d8c0:	460e      	mov	r6, r1
 800d8c2:	f7fb f8a1 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d8c6:	b320      	cbz	r0, 800d912 <uxr_deserialize_ObjectVariant+0x56>
 800d8c8:	7833      	ldrb	r3, [r6, #0]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	2b0d      	cmp	r3, #13
 800d8d0:	d81d      	bhi.n	800d90e <uxr_deserialize_ObjectVariant+0x52>
 800d8d2:	e8df f003 	tbb	[pc, r3]
 800d8d6:	2107      	.short	0x2107
 800d8d8:	21214b4b 	.word	0x21214b4b
 800d8dc:	381c2121 	.word	0x381c2121
 800d8e0:	876a3838 	.word	0x876a3838
 800d8e4:	1d31      	adds	r1, r6, #4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7fb f88e 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	b138      	cbz	r0, 800d900 <uxr_deserialize_ObjectVariant+0x44>
 800d8f0:	7933      	ldrb	r3, [r6, #4]
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d07c      	beq.n	800d9f0 <uxr_deserialize_ObjectVariant+0x134>
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	f000 8082 	beq.w	800da00 <uxr_deserialize_ObjectVariant+0x144>
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d077      	beq.n	800d9f0 <uxr_deserialize_ObjectVariant+0x134>
 800d900:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d904:	4628      	mov	r0, r5
 800d906:	f7fb fe25 	bl	8009554 <ucdr_deserialize_int16_t>
 800d90a:	4038      	ands	r0, r7
 800d90c:	b2c4      	uxtb	r4, r0
 800d90e:	4620      	mov	r0, r4
 800d910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d912:	2400      	movs	r4, #0
 800d914:	4620      	mov	r0, r4
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d918:	1d31      	adds	r1, r6, #4
 800d91a:	4628      	mov	r0, r5
 800d91c:	f7fb f874 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d920:	4607      	mov	r7, r0
 800d922:	b130      	cbz	r0, 800d932 <uxr_deserialize_ObjectVariant+0x76>
 800d924:	7933      	ldrb	r3, [r6, #4]
 800d926:	2b02      	cmp	r3, #2
 800d928:	d037      	beq.n	800d99a <uxr_deserialize_ObjectVariant+0xde>
 800d92a:	2b03      	cmp	r3, #3
 800d92c:	d02a      	beq.n	800d984 <uxr_deserialize_ObjectVariant+0xc8>
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d033      	beq.n	800d99a <uxr_deserialize_ObjectVariant+0xde>
 800d932:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d936:	4628      	mov	r0, r5
 800d938:	2202      	movs	r2, #2
 800d93a:	f003 ffd9 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d93e:	4038      	ands	r0, r7
 800d940:	b2c4      	uxtb	r4, r0
 800d942:	4620      	mov	r0, r4
 800d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d946:	1d31      	adds	r1, r6, #4
 800d948:	4628      	mov	r0, r5
 800d94a:	f7fb f85d 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d0df      	beq.n	800d912 <uxr_deserialize_ObjectVariant+0x56>
 800d952:	7933      	ldrb	r3, [r6, #4]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d001      	beq.n	800d95c <uxr_deserialize_ObjectVariant+0xa0>
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d1d8      	bne.n	800d90e <uxr_deserialize_ObjectVariant+0x52>
 800d95c:	68b1      	ldr	r1, [r6, #8]
 800d95e:	4628      	mov	r0, r5
 800d960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d968:	f004 b88e 	b.w	8011a88 <ucdr_deserialize_string>
 800d96c:	1d31      	adds	r1, r6, #4
 800d96e:	4628      	mov	r0, r5
 800d970:	f7fb f84a 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800d974:	4607      	mov	r7, r0
 800d976:	2800      	cmp	r0, #0
 800d978:	d0db      	beq.n	800d932 <uxr_deserialize_ObjectVariant+0x76>
 800d97a:	7933      	ldrb	r3, [r6, #4]
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d00c      	beq.n	800d99a <uxr_deserialize_ObjectVariant+0xde>
 800d980:	2b03      	cmp	r3, #3
 800d982:	d1d6      	bne.n	800d932 <uxr_deserialize_ObjectVariant+0x76>
 800d984:	f106 0308 	add.w	r3, r6, #8
 800d988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d98c:	f106 010c 	add.w	r1, r6, #12
 800d990:	4628      	mov	r0, r5
 800d992:	f004 f84f 	bl	8011a34 <ucdr_deserialize_sequence_uint8_t>
 800d996:	4607      	mov	r7, r0
 800d998:	e7cb      	b.n	800d932 <uxr_deserialize_ObjectVariant+0x76>
 800d99a:	68b1      	ldr	r1, [r6, #8]
 800d99c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f004 f871 	bl	8011a88 <ucdr_deserialize_string>
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	e7c3      	b.n	800d932 <uxr_deserialize_ObjectVariant+0x76>
 800d9aa:	2204      	movs	r2, #4
 800d9ac:	18b1      	adds	r1, r6, r2
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f003 ff9e 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	f106 0108 	add.w	r1, r6, #8
 800d9bc:	4628      	mov	r0, r5
 800d9be:	f003 ff97 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	4004      	ands	r4, r0
 800d9c6:	f106 010a 	add.w	r1, r6, #10
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f003 ff90 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800d9d0:	b2e4      	uxtb	r4, r4
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	f106 010c 	add.w	r1, r6, #12
 800d9d8:	4628      	mov	r0, r5
 800d9da:	401c      	ands	r4, r3
 800d9dc:	f7fa ffe4 	bl	80089a8 <ucdr_deserialize_bool>
 800d9e0:	4004      	ands	r4, r0
 800d9e2:	e794      	b.n	800d90e <uxr_deserialize_ObjectVariant+0x52>
 800d9e4:	1d31      	adds	r1, r6, #4
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9ec:	f7ff bcac 	b.w	800d348 <uxr_deserialize_CLIENT_Representation>
 800d9f0:	68b1      	ldr	r1, [r6, #8]
 800d9f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f004 f846 	bl	8011a88 <ucdr_deserialize_string>
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	e77f      	b.n	800d900 <uxr_deserialize_ObjectVariant+0x44>
 800da00:	f106 0308 	add.w	r3, r6, #8
 800da04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da08:	f106 010c 	add.w	r1, r6, #12
 800da0c:	4628      	mov	r0, r5
 800da0e:	f004 f811 	bl	8011a34 <ucdr_deserialize_sequence_uint8_t>
 800da12:	4607      	mov	r7, r0
 800da14:	e774      	b.n	800d900 <uxr_deserialize_ObjectVariant+0x44>
 800da16:	bf00      	nop

0800da18 <uxr_deserialize_BaseObjectRequest>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	2202      	movs	r2, #2
 800da1c:	4605      	mov	r5, r0
 800da1e:	460e      	mov	r6, r1
 800da20:	f003 ff66 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800da24:	1cb1      	adds	r1, r6, #2
 800da26:	4604      	mov	r4, r0
 800da28:	2202      	movs	r2, #2
 800da2a:	4628      	mov	r0, r5
 800da2c:	f003 ff60 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800da30:	4020      	ands	r0, r4
 800da32:	b2c0      	uxtb	r0, r0
 800da34:	bd70      	pop	{r4, r5, r6, pc}
 800da36:	bf00      	nop

0800da38 <uxr_serialize_AGENT_ActivityInfo>:
 800da38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da3c:	460e      	mov	r6, r1
 800da3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800da42:	4607      	mov	r7, r0
 800da44:	f7fb fd06 	bl	8009454 <ucdr_serialize_int16_t>
 800da48:	6871      	ldr	r1, [r6, #4]
 800da4a:	4680      	mov	r8, r0
 800da4c:	4638      	mov	r0, r7
 800da4e:	f7fb f9db 	bl	8008e08 <ucdr_serialize_uint32_t>
 800da52:	6873      	ldr	r3, [r6, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d06a      	beq.n	800db2e <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800da58:	b318      	cbz	r0, 800daa2 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800da5a:	f106 0904 	add.w	r9, r6, #4
 800da5e:	2500      	movs	r5, #0
 800da60:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800da64:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800da68:	7a21      	ldrb	r1, [r4, #8]
 800da6a:	4638      	mov	r0, r7
 800da6c:	f7fa ffb6 	bl	80089dc <ucdr_serialize_uint8_t>
 800da70:	2800      	cmp	r0, #0
 800da72:	d051      	beq.n	800db18 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800da74:	7a23      	ldrb	r3, [r4, #8]
 800da76:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800da7a:	00c9      	lsls	r1, r1, #3
 800da7c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800da80:	2b03      	cmp	r3, #3
 800da82:	d859      	bhi.n	800db38 <uxr_serialize_AGENT_ActivityInfo+0x100>
 800da84:	e8df f003 	tbb	[pc, r3]
 800da88:	02122436 	.word	0x02122436
 800da8c:	4449      	add	r1, r9
 800da8e:	4638      	mov	r0, r7
 800da90:	6889      	ldr	r1, [r1, #8]
 800da92:	f003 ffe9 	bl	8011a68 <ucdr_serialize_string>
 800da96:	6873      	ldr	r3, [r6, #4]
 800da98:	3501      	adds	r5, #1
 800da9a:	429d      	cmp	r5, r3
 800da9c:	d240      	bcs.n	800db20 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d1de      	bne.n	800da60 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800daa2:	f04f 0800 	mov.w	r8, #0
 800daa6:	4640      	mov	r0, r8
 800daa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daac:	3108      	adds	r1, #8
 800daae:	4449      	add	r1, r9
 800dab0:	2210      	movs	r2, #16
 800dab2:	4638      	mov	r0, r7
 800dab4:	f003 feb8 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800dab8:	44aa      	add	sl, r5
 800daba:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800dabe:	4604      	mov	r4, r0
 800dac0:	f8da 101c 	ldr.w	r1, [sl, #28]
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7fb f99f 	bl	8008e08 <ucdr_serialize_uint32_t>
 800daca:	4020      	ands	r0, r4
 800dacc:	b2c0      	uxtb	r0, r0
 800dace:	e7e2      	b.n	800da96 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800dad0:	3108      	adds	r1, #8
 800dad2:	4449      	add	r1, r9
 800dad4:	2204      	movs	r2, #4
 800dad6:	4638      	mov	r0, r7
 800dad8:	f003 fea6 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800dadc:	44aa      	add	sl, r5
 800dade:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800dae2:	4604      	mov	r4, r0
 800dae4:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800dae8:	4638      	mov	r0, r7
 800daea:	f7fa ffa3 	bl	8008a34 <ucdr_serialize_uint16_t>
 800daee:	4020      	ands	r0, r4
 800daf0:	b2c0      	uxtb	r0, r0
 800daf2:	e7d0      	b.n	800da96 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800daf4:	3108      	adds	r1, #8
 800daf6:	4449      	add	r1, r9
 800daf8:	2202      	movs	r2, #2
 800dafa:	4638      	mov	r0, r7
 800dafc:	f003 fe94 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800db00:	44aa      	add	sl, r5
 800db02:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800db06:	4604      	mov	r4, r0
 800db08:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800db0c:	4638      	mov	r0, r7
 800db0e:	f7fa ff65 	bl	80089dc <ucdr_serialize_uint8_t>
 800db12:	4020      	ands	r0, r4
 800db14:	b2c0      	uxtb	r0, r0
 800db16:	e7be      	b.n	800da96 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800db18:	6873      	ldr	r3, [r6, #4]
 800db1a:	3501      	adds	r5, #1
 800db1c:	429d      	cmp	r5, r3
 800db1e:	d3c0      	bcc.n	800daa2 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800db20:	ea08 0000 	and.w	r0, r8, r0
 800db24:	fa5f f880 	uxtb.w	r8, r0
 800db28:	4640      	mov	r0, r8
 800db2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2e:	ea08 0800 	and.w	r8, r8, r0
 800db32:	fa5f f888 	uxtb.w	r8, r8
 800db36:	e7b6      	b.n	800daa6 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800db38:	6873      	ldr	r3, [r6, #4]
 800db3a:	3501      	adds	r5, #1
 800db3c:	42ab      	cmp	r3, r5
 800db3e:	f104 0418 	add.w	r4, r4, #24
 800db42:	d891      	bhi.n	800da68 <uxr_serialize_AGENT_ActivityInfo+0x30>
 800db44:	e7af      	b.n	800daa6 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800db46:	bf00      	nop

0800db48 <uxr_serialize_ActivityInfoVariant>:
 800db48:	b570      	push	{r4, r5, r6, lr}
 800db4a:	460d      	mov	r5, r1
 800db4c:	7809      	ldrb	r1, [r1, #0]
 800db4e:	4606      	mov	r6, r0
 800db50:	f7fa ff44 	bl	80089dc <ucdr_serialize_uint8_t>
 800db54:	b130      	cbz	r0, 800db64 <uxr_serialize_ActivityInfoVariant+0x1c>
 800db56:	782b      	ldrb	r3, [r5, #0]
 800db58:	2b06      	cmp	r3, #6
 800db5a:	d019      	beq.n	800db90 <uxr_serialize_ActivityInfoVariant+0x48>
 800db5c:	2b0d      	cmp	r3, #13
 800db5e:	d010      	beq.n	800db82 <uxr_serialize_ActivityInfoVariant+0x3a>
 800db60:	2b05      	cmp	r3, #5
 800db62:	d000      	beq.n	800db66 <uxr_serialize_ActivityInfoVariant+0x1e>
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800db6a:	4630      	mov	r0, r6
 800db6c:	f7fb fc72 	bl	8009454 <ucdr_serialize_int16_t>
 800db70:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800db74:	4604      	mov	r4, r0
 800db76:	4630      	mov	r0, r6
 800db78:	f7fb fb9c 	bl	80092b4 <ucdr_serialize_uint64_t>
 800db7c:	4020      	ands	r0, r4
 800db7e:	b2c0      	uxtb	r0, r0
 800db80:	bd70      	pop	{r4, r5, r6, pc}
 800db82:	f105 0108 	add.w	r1, r5, #8
 800db86:	4630      	mov	r0, r6
 800db88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db8c:	f7ff bf54 	b.w	800da38 <uxr_serialize_AGENT_ActivityInfo>
 800db90:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800db94:	4630      	mov	r0, r6
 800db96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db9a:	f7fb bc5b 	b.w	8009454 <ucdr_serialize_int16_t>
 800db9e:	bf00      	nop

0800dba0 <uxr_deserialize_BaseObjectReply>:
 800dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba4:	2202      	movs	r2, #2
 800dba6:	4606      	mov	r6, r0
 800dba8:	460f      	mov	r7, r1
 800dbaa:	f003 fea1 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800dbae:	2202      	movs	r2, #2
 800dbb0:	1cb9      	adds	r1, r7, #2
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f003 fe9b 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800dbba:	1d39      	adds	r1, r7, #4
 800dbbc:	4680      	mov	r8, r0
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f7fa ff22 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800dbc4:	1d79      	adds	r1, r7, #5
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7fa ff1d 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800dbce:	ea05 0508 	and.w	r5, r5, r8
 800dbd2:	402c      	ands	r4, r5
 800dbd4:	4020      	ands	r0, r4
 800dbd6:	b2c0      	uxtb	r0, r0
 800dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbdc <uxr_serialize_ReadSpecification>:
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	460e      	mov	r6, r1
 800dbe2:	7809      	ldrb	r1, [r1, #0]
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	f7fa fef9 	bl	80089dc <ucdr_serialize_uint8_t>
 800dbea:	7871      	ldrb	r1, [r6, #1]
 800dbec:	4604      	mov	r4, r0
 800dbee:	4638      	mov	r0, r7
 800dbf0:	f7fa fef4 	bl	80089dc <ucdr_serialize_uint8_t>
 800dbf4:	78b1      	ldrb	r1, [r6, #2]
 800dbf6:	4004      	ands	r4, r0
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f7fa febf 	bl	800897c <ucdr_serialize_bool>
 800dbfe:	78b3      	ldrb	r3, [r6, #2]
 800dc00:	b2e4      	uxtb	r4, r4
 800dc02:	4004      	ands	r4, r0
 800dc04:	b94b      	cbnz	r3, 800dc1a <uxr_serialize_ReadSpecification+0x3e>
 800dc06:	7a31      	ldrb	r1, [r6, #8]
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f7fa feb7 	bl	800897c <ucdr_serialize_bool>
 800dc0e:	7a33      	ldrb	r3, [r6, #8]
 800dc10:	4004      	ands	r4, r0
 800dc12:	b943      	cbnz	r3, 800dc26 <uxr_serialize_ReadSpecification+0x4a>
 800dc14:	4620      	mov	r0, r4
 800dc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1a:	6871      	ldr	r1, [r6, #4]
 800dc1c:	4638      	mov	r0, r7
 800dc1e:	f003 ff23 	bl	8011a68 <ucdr_serialize_string>
 800dc22:	4004      	ands	r4, r0
 800dc24:	e7ef      	b.n	800dc06 <uxr_serialize_ReadSpecification+0x2a>
 800dc26:	8971      	ldrh	r1, [r6, #10]
 800dc28:	4638      	mov	r0, r7
 800dc2a:	f7fa ff03 	bl	8008a34 <ucdr_serialize_uint16_t>
 800dc2e:	89b1      	ldrh	r1, [r6, #12]
 800dc30:	4605      	mov	r5, r0
 800dc32:	4638      	mov	r0, r7
 800dc34:	f7fa fefe 	bl	8008a34 <ucdr_serialize_uint16_t>
 800dc38:	89f1      	ldrh	r1, [r6, #14]
 800dc3a:	4005      	ands	r5, r0
 800dc3c:	4638      	mov	r0, r7
 800dc3e:	f7fa fef9 	bl	8008a34 <ucdr_serialize_uint16_t>
 800dc42:	8a31      	ldrh	r1, [r6, #16]
 800dc44:	4680      	mov	r8, r0
 800dc46:	4638      	mov	r0, r7
 800dc48:	f7fa fef4 	bl	8008a34 <ucdr_serialize_uint16_t>
 800dc4c:	b2ed      	uxtb	r5, r5
 800dc4e:	4025      	ands	r5, r4
 800dc50:	ea08 0505 	and.w	r5, r8, r5
 800dc54:	ea00 0405 	and.w	r4, r0, r5
 800dc58:	4620      	mov	r0, r4
 800dc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc5e:	bf00      	nop

0800dc60 <uxr_serialize_CREATE_CLIENT_Payload>:
 800dc60:	f7ff bb16 	b.w	800d290 <uxr_serialize_CLIENT_Representation>

0800dc64 <uxr_serialize_CREATE_Payload>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	2202      	movs	r2, #2
 800dc68:	4606      	mov	r6, r0
 800dc6a:	460d      	mov	r5, r1
 800dc6c:	f003 fddc 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800dc70:	1ca9      	adds	r1, r5, #2
 800dc72:	4604      	mov	r4, r0
 800dc74:	2202      	movs	r2, #2
 800dc76:	4630      	mov	r0, r6
 800dc78:	f003 fdd6 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800dc7c:	7929      	ldrb	r1, [r5, #4]
 800dc7e:	4607      	mov	r7, r0
 800dc80:	4630      	mov	r0, r6
 800dc82:	f7fa feab 	bl	80089dc <ucdr_serialize_uint8_t>
 800dc86:	b328      	cbz	r0, 800dcd4 <uxr_serialize_CREATE_Payload+0x70>
 800dc88:	792b      	ldrb	r3, [r5, #4]
 800dc8a:	403c      	ands	r4, r7
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	b2e4      	uxtb	r4, r4
 800dc90:	2b0d      	cmp	r3, #13
 800dc92:	d81d      	bhi.n	800dcd0 <uxr_serialize_CREATE_Payload+0x6c>
 800dc94:	e8df f003 	tbb	[pc, r3]
 800dc98:	32320753 	.word	0x32320753
 800dc9c:	07070707 	.word	0x07070707
 800dca0:	2121211c 	.word	0x2121211c
 800dca4:	684c      	.short	0x684c
 800dca6:	7a29      	ldrb	r1, [r5, #8]
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7fa fe97 	bl	80089dc <ucdr_serialize_uint8_t>
 800dcae:	4607      	mov	r7, r0
 800dcb0:	b130      	cbz	r0, 800dcc0 <uxr_serialize_CREATE_Payload+0x5c>
 800dcb2:	7a2b      	ldrb	r3, [r5, #8]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d035      	beq.n	800dd24 <uxr_serialize_CREATE_Payload+0xc0>
 800dcb8:	2b03      	cmp	r3, #3
 800dcba:	d02b      	beq.n	800dd14 <uxr_serialize_CREATE_Payload+0xb0>
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d031      	beq.n	800dd24 <uxr_serialize_CREATE_Payload+0xc0>
 800dcc0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f003 fdae 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800dccc:	4038      	ands	r0, r7
 800dcce:	4004      	ands	r4, r0
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd4:	2400      	movs	r4, #0
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcda:	7a29      	ldrb	r1, [r5, #8]
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7fa fe7d 	bl	80089dc <ucdr_serialize_uint8_t>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d0f6      	beq.n	800dcd4 <uxr_serialize_CREATE_Payload+0x70>
 800dce6:	7a2b      	ldrb	r3, [r5, #8]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d001      	beq.n	800dcf0 <uxr_serialize_CREATE_Payload+0x8c>
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d1ef      	bne.n	800dcd0 <uxr_serialize_CREATE_Payload+0x6c>
 800dcf0:	68e9      	ldr	r1, [r5, #12]
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f003 feb8 	bl	8011a68 <ucdr_serialize_string>
 800dcf8:	4004      	ands	r4, r0
 800dcfa:	e7e9      	b.n	800dcd0 <uxr_serialize_CREATE_Payload+0x6c>
 800dcfc:	7a29      	ldrb	r1, [r5, #8]
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7fa fe6c 	bl	80089dc <ucdr_serialize_uint8_t>
 800dd04:	4607      	mov	r7, r0
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d0da      	beq.n	800dcc0 <uxr_serialize_CREATE_Payload+0x5c>
 800dd0a:	7a2b      	ldrb	r3, [r5, #8]
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d009      	beq.n	800dd24 <uxr_serialize_CREATE_Payload+0xc0>
 800dd10:	2b03      	cmp	r3, #3
 800dd12:	d1d5      	bne.n	800dcc0 <uxr_serialize_CREATE_Payload+0x5c>
 800dd14:	68ea      	ldr	r2, [r5, #12]
 800dd16:	f105 0110 	add.w	r1, r5, #16
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	f003 fe78 	bl	8011a10 <ucdr_serialize_sequence_uint8_t>
 800dd20:	4607      	mov	r7, r0
 800dd22:	e7cd      	b.n	800dcc0 <uxr_serialize_CREATE_Payload+0x5c>
 800dd24:	68e9      	ldr	r1, [r5, #12]
 800dd26:	4630      	mov	r0, r6
 800dd28:	f003 fe9e 	bl	8011a68 <ucdr_serialize_string>
 800dd2c:	4607      	mov	r7, r0
 800dd2e:	e7c7      	b.n	800dcc0 <uxr_serialize_CREATE_Payload+0x5c>
 800dd30:	f105 0108 	add.w	r1, r5, #8
 800dd34:	4630      	mov	r0, r6
 800dd36:	f7ff fb71 	bl	800d41c <uxr_serialize_AGENT_Representation>
 800dd3a:	4004      	ands	r4, r0
 800dd3c:	e7c8      	b.n	800dcd0 <uxr_serialize_CREATE_Payload+0x6c>
 800dd3e:	7a29      	ldrb	r1, [r5, #8]
 800dd40:	4630      	mov	r0, r6
 800dd42:	f7fa fe4b 	bl	80089dc <ucdr_serialize_uint8_t>
 800dd46:	4607      	mov	r7, r0
 800dd48:	b130      	cbz	r0, 800dd58 <uxr_serialize_CREATE_Payload+0xf4>
 800dd4a:	7a2b      	ldrb	r3, [r5, #8]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d012      	beq.n	800dd76 <uxr_serialize_CREATE_Payload+0x112>
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d016      	beq.n	800dd82 <uxr_serialize_CREATE_Payload+0x11e>
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d00e      	beq.n	800dd76 <uxr_serialize_CREATE_Payload+0x112>
 800dd58:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7fb fb79 	bl	8009454 <ucdr_serialize_int16_t>
 800dd62:	4038      	ands	r0, r7
 800dd64:	4004      	ands	r4, r0
 800dd66:	e7b3      	b.n	800dcd0 <uxr_serialize_CREATE_Payload+0x6c>
 800dd68:	f105 0108 	add.w	r1, r5, #8
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	f7ff fa8f 	bl	800d290 <uxr_serialize_CLIENT_Representation>
 800dd72:	4004      	ands	r4, r0
 800dd74:	e7ac      	b.n	800dcd0 <uxr_serialize_CREATE_Payload+0x6c>
 800dd76:	68e9      	ldr	r1, [r5, #12]
 800dd78:	4630      	mov	r0, r6
 800dd7a:	f003 fe75 	bl	8011a68 <ucdr_serialize_string>
 800dd7e:	4607      	mov	r7, r0
 800dd80:	e7ea      	b.n	800dd58 <uxr_serialize_CREATE_Payload+0xf4>
 800dd82:	68ea      	ldr	r2, [r5, #12]
 800dd84:	f105 0110 	add.w	r1, r5, #16
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f003 fe41 	bl	8011a10 <ucdr_serialize_sequence_uint8_t>
 800dd8e:	4607      	mov	r7, r0
 800dd90:	e7e2      	b.n	800dd58 <uxr_serialize_CREATE_Payload+0xf4>
 800dd92:	bf00      	nop

0800dd94 <uxr_deserialize_GET_INFO_Payload>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	2202      	movs	r2, #2
 800dd98:	4605      	mov	r5, r0
 800dd9a:	460e      	mov	r6, r1
 800dd9c:	f003 fda8 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800dda0:	1cb1      	adds	r1, r6, #2
 800dda2:	2202      	movs	r2, #2
 800dda4:	4604      	mov	r4, r0
 800dda6:	4628      	mov	r0, r5
 800dda8:	f003 fda2 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800ddac:	1d31      	adds	r1, r6, #4
 800ddae:	4004      	ands	r4, r0
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f7fb f959 	bl	8009068 <ucdr_deserialize_uint32_t>
 800ddb6:	b2e4      	uxtb	r4, r4
 800ddb8:	4020      	ands	r0, r4
 800ddba:	bd70      	pop	{r4, r5, r6, pc}

0800ddbc <uxr_serialize_DELETE_Payload>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	460e      	mov	r6, r1
 800ddc4:	f003 fd30 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800ddc8:	1cb1      	adds	r1, r6, #2
 800ddca:	4604      	mov	r4, r0
 800ddcc:	2202      	movs	r2, #2
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f003 fd2a 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800ddd4:	4020      	ands	r0, r4
 800ddd6:	b2c0      	uxtb	r0, r0
 800ddd8:	bd70      	pop	{r4, r5, r6, pc}
 800ddda:	bf00      	nop

0800dddc <uxr_deserialize_STATUS_AGENT_Payload>:
 800dddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	f7fa fe10 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800dde8:	1c79      	adds	r1, r7, #1
 800ddea:	4605      	mov	r5, r0
 800ddec:	4630      	mov	r0, r6
 800ddee:	f7fa fe0b 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800ddf2:	1d39      	adds	r1, r7, #4
 800ddf4:	4681      	mov	r9, r0
 800ddf6:	2204      	movs	r2, #4
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f003 fd79 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800ddfe:	f107 0108 	add.w	r1, r7, #8
 800de02:	4604      	mov	r4, r0
 800de04:	2202      	movs	r2, #2
 800de06:	4630      	mov	r0, r6
 800de08:	f003 fd72 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800de0c:	f107 010a 	add.w	r1, r7, #10
 800de10:	4680      	mov	r8, r0
 800de12:	2202      	movs	r2, #2
 800de14:	4630      	mov	r0, r6
 800de16:	f003 fd6b 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800de1a:	ea05 0509 	and.w	r5, r5, r9
 800de1e:	b2ed      	uxtb	r5, r5
 800de20:	402c      	ands	r4, r5
 800de22:	f107 010c 	add.w	r1, r7, #12
 800de26:	4605      	mov	r5, r0
 800de28:	4630      	mov	r0, r6
 800de2a:	f7fa fdbd 	bl	80089a8 <ucdr_deserialize_bool>
 800de2e:	ea08 0404 	and.w	r4, r8, r4
 800de32:	4025      	ands	r5, r4
 800de34:	4028      	ands	r0, r5
 800de36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3a:	bf00      	nop

0800de3c <uxr_deserialize_STATUS_Payload>:
 800de3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de40:	2202      	movs	r2, #2
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	f003 fd53 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800de4a:	2202      	movs	r2, #2
 800de4c:	1cb9      	adds	r1, r7, #2
 800de4e:	4605      	mov	r5, r0
 800de50:	4630      	mov	r0, r6
 800de52:	f003 fd4d 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800de56:	1d39      	adds	r1, r7, #4
 800de58:	4680      	mov	r8, r0
 800de5a:	4630      	mov	r0, r6
 800de5c:	f7fa fdd4 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800de60:	1d79      	adds	r1, r7, #5
 800de62:	4604      	mov	r4, r0
 800de64:	4630      	mov	r0, r6
 800de66:	f7fa fdcf 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800de6a:	ea05 0508 	and.w	r5, r5, r8
 800de6e:	402c      	ands	r4, r5
 800de70:	4020      	ands	r0, r4
 800de72:	b2c0      	uxtb	r0, r0
 800de74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de78 <uxr_serialize_INFO_Payload>:
 800de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7c:	2202      	movs	r2, #2
 800de7e:	460c      	mov	r4, r1
 800de80:	4605      	mov	r5, r0
 800de82:	f003 fcd1 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800de86:	2202      	movs	r2, #2
 800de88:	4680      	mov	r8, r0
 800de8a:	1ca1      	adds	r1, r4, #2
 800de8c:	4628      	mov	r0, r5
 800de8e:	f003 fccb 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800de92:	7921      	ldrb	r1, [r4, #4]
 800de94:	4607      	mov	r7, r0
 800de96:	4628      	mov	r0, r5
 800de98:	f7fa fda0 	bl	80089dc <ucdr_serialize_uint8_t>
 800de9c:	7961      	ldrb	r1, [r4, #5]
 800de9e:	4606      	mov	r6, r0
 800dea0:	4628      	mov	r0, r5
 800dea2:	f7fa fd9b 	bl	80089dc <ucdr_serialize_uint8_t>
 800dea6:	ea08 0807 	and.w	r8, r8, r7
 800deaa:	ea06 0608 	and.w	r6, r6, r8
 800deae:	4006      	ands	r6, r0
 800deb0:	7a21      	ldrb	r1, [r4, #8]
 800deb2:	4628      	mov	r0, r5
 800deb4:	f7fa fd62 	bl	800897c <ucdr_serialize_bool>
 800deb8:	7a23      	ldrb	r3, [r4, #8]
 800deba:	b2f7      	uxtb	r7, r6
 800debc:	4606      	mov	r6, r0
 800debe:	b96b      	cbnz	r3, 800dedc <uxr_serialize_INFO_Payload+0x64>
 800dec0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800dec4:	4628      	mov	r0, r5
 800dec6:	f7fa fd59 	bl	800897c <ucdr_serialize_bool>
 800deca:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800dece:	4030      	ands	r0, r6
 800ded0:	b2c6      	uxtb	r6, r0
 800ded2:	b983      	cbnz	r3, 800def6 <uxr_serialize_INFO_Payload+0x7e>
 800ded4:	ea06 0007 	and.w	r0, r6, r7
 800ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dedc:	7b21      	ldrb	r1, [r4, #12]
 800dede:	4628      	mov	r0, r5
 800dee0:	f7fa fd7c 	bl	80089dc <ucdr_serialize_uint8_t>
 800dee4:	b188      	cbz	r0, 800df0a <uxr_serialize_INFO_Payload+0x92>
 800dee6:	f104 010c 	add.w	r1, r4, #12
 800deea:	4628      	mov	r0, r5
 800deec:	f7ff fae2 	bl	800d4b4 <uxr_serialize_ObjectVariant.part.0>
 800def0:	4030      	ands	r0, r6
 800def2:	b2c6      	uxtb	r6, r0
 800def4:	e7e4      	b.n	800dec0 <uxr_serialize_INFO_Payload+0x48>
 800def6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800defa:	4628      	mov	r0, r5
 800defc:	f7ff fe24 	bl	800db48 <uxr_serialize_ActivityInfoVariant>
 800df00:	4006      	ands	r6, r0
 800df02:	ea06 0007 	and.w	r0, r6, r7
 800df06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0a:	4606      	mov	r6, r0
 800df0c:	e7d8      	b.n	800dec0 <uxr_serialize_INFO_Payload+0x48>
 800df0e:	bf00      	nop

0800df10 <uxr_serialize_READ_DATA_Payload>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	2202      	movs	r2, #2
 800df14:	4605      	mov	r5, r0
 800df16:	460e      	mov	r6, r1
 800df18:	f003 fc86 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800df1c:	1cb1      	adds	r1, r6, #2
 800df1e:	2202      	movs	r2, #2
 800df20:	4604      	mov	r4, r0
 800df22:	4628      	mov	r0, r5
 800df24:	f003 fc80 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800df28:	1d31      	adds	r1, r6, #4
 800df2a:	4004      	ands	r4, r0
 800df2c:	4628      	mov	r0, r5
 800df2e:	f7ff fe55 	bl	800dbdc <uxr_serialize_ReadSpecification>
 800df32:	b2e4      	uxtb	r4, r4
 800df34:	4020      	ands	r0, r4
 800df36:	bd70      	pop	{r4, r5, r6, pc}

0800df38 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	2202      	movs	r2, #2
 800df3c:	4605      	mov	r5, r0
 800df3e:	460e      	mov	r6, r1
 800df40:	f003 fc72 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800df44:	1cb1      	adds	r1, r6, #2
 800df46:	4604      	mov	r4, r0
 800df48:	2202      	movs	r2, #2
 800df4a:	4628      	mov	r0, r5
 800df4c:	f003 fc6c 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800df50:	4020      	ands	r0, r4
 800df52:	b2c0      	uxtb	r0, r0
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	bf00      	nop

0800df58 <uxr_serialize_ACKNACK_Payload>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	460f      	mov	r7, r1
 800df5c:	460e      	mov	r6, r1
 800df5e:	f837 1b02 	ldrh.w	r1, [r7], #2
 800df62:	4605      	mov	r5, r0
 800df64:	f7fa fd66 	bl	8008a34 <ucdr_serialize_uint16_t>
 800df68:	4639      	mov	r1, r7
 800df6a:	2202      	movs	r2, #2
 800df6c:	4604      	mov	r4, r0
 800df6e:	4628      	mov	r0, r5
 800df70:	f003 fc5a 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800df74:	7931      	ldrb	r1, [r6, #4]
 800df76:	4004      	ands	r4, r0
 800df78:	4628      	mov	r0, r5
 800df7a:	f7fa fd2f 	bl	80089dc <ucdr_serialize_uint8_t>
 800df7e:	b2e4      	uxtb	r4, r4
 800df80:	4020      	ands	r0, r4
 800df82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df84 <uxr_deserialize_ACKNACK_Payload>:
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	4605      	mov	r5, r0
 800df88:	460e      	mov	r6, r1
 800df8a:	f7fa fe53 	bl	8008c34 <ucdr_deserialize_uint16_t>
 800df8e:	1cb1      	adds	r1, r6, #2
 800df90:	2202      	movs	r2, #2
 800df92:	4604      	mov	r4, r0
 800df94:	4628      	mov	r0, r5
 800df96:	f003 fcab 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800df9a:	1d31      	adds	r1, r6, #4
 800df9c:	4004      	ands	r4, r0
 800df9e:	4628      	mov	r0, r5
 800dfa0:	f7fa fd32 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800dfa4:	b2e4      	uxtb	r4, r4
 800dfa6:	4020      	ands	r0, r4
 800dfa8:	bd70      	pop	{r4, r5, r6, pc}
 800dfaa:	bf00      	nop

0800dfac <uxr_serialize_HEARTBEAT_Payload>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	460d      	mov	r5, r1
 800dfb0:	8809      	ldrh	r1, [r1, #0]
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	f7fa fd3e 	bl	8008a34 <ucdr_serialize_uint16_t>
 800dfb8:	8869      	ldrh	r1, [r5, #2]
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f7fa fd39 	bl	8008a34 <ucdr_serialize_uint16_t>
 800dfc2:	7929      	ldrb	r1, [r5, #4]
 800dfc4:	4004      	ands	r4, r0
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f7fa fd08 	bl	80089dc <ucdr_serialize_uint8_t>
 800dfcc:	b2e4      	uxtb	r4, r4
 800dfce:	4020      	ands	r0, r4
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	bf00      	nop

0800dfd4 <uxr_deserialize_HEARTBEAT_Payload>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	4605      	mov	r5, r0
 800dfd8:	460e      	mov	r6, r1
 800dfda:	f7fa fe2b 	bl	8008c34 <ucdr_deserialize_uint16_t>
 800dfde:	1cb1      	adds	r1, r6, #2
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f7fa fe26 	bl	8008c34 <ucdr_deserialize_uint16_t>
 800dfe8:	1d31      	adds	r1, r6, #4
 800dfea:	4004      	ands	r4, r0
 800dfec:	4628      	mov	r0, r5
 800dfee:	f7fa fd0b 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800dff2:	b2e4      	uxtb	r4, r4
 800dff4:	4020      	ands	r0, r4
 800dff6:	bd70      	pop	{r4, r5, r6, pc}

0800dff8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dffc:	4605      	mov	r5, r0
 800dffe:	460e      	mov	r6, r1
 800e000:	f7fb fbb4 	bl	800976c <ucdr_deserialize_int32_t>
 800e004:	1d31      	adds	r1, r6, #4
 800e006:	4607      	mov	r7, r0
 800e008:	4628      	mov	r0, r5
 800e00a:	f7fb f82d 	bl	8009068 <ucdr_deserialize_uint32_t>
 800e00e:	f106 0108 	add.w	r1, r6, #8
 800e012:	4680      	mov	r8, r0
 800e014:	4628      	mov	r0, r5
 800e016:	f7fb fba9 	bl	800976c <ucdr_deserialize_int32_t>
 800e01a:	f106 010c 	add.w	r1, r6, #12
 800e01e:	4604      	mov	r4, r0
 800e020:	4628      	mov	r0, r5
 800e022:	f7fb f821 	bl	8009068 <ucdr_deserialize_uint32_t>
 800e026:	ea07 0708 	and.w	r7, r7, r8
 800e02a:	403c      	ands	r4, r7
 800e02c:	f106 0110 	add.w	r1, r6, #16
 800e030:	4004      	ands	r4, r0
 800e032:	4628      	mov	r0, r5
 800e034:	f7fb fb9a 	bl	800976c <ucdr_deserialize_int32_t>
 800e038:	f106 0114 	add.w	r1, r6, #20
 800e03c:	4603      	mov	r3, r0
 800e03e:	4628      	mov	r0, r5
 800e040:	461d      	mov	r5, r3
 800e042:	f7fb f811 	bl	8009068 <ucdr_deserialize_uint32_t>
 800e046:	b2e4      	uxtb	r4, r4
 800e048:	402c      	ands	r4, r5
 800e04a:	4020      	ands	r0, r4
 800e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e050 <uxr_serialize_SampleIdentity>:
 800e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	220c      	movs	r2, #12
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
 800e05a:	f003 fbe5 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800e05e:	2203      	movs	r2, #3
 800e060:	f105 010c 	add.w	r1, r5, #12
 800e064:	4607      	mov	r7, r0
 800e066:	4620      	mov	r0, r4
 800e068:	f003 fbde 	bl	8011828 <ucdr_serialize_array_uint8_t>
 800e06c:	7be9      	ldrb	r1, [r5, #15]
 800e06e:	4680      	mov	r8, r0
 800e070:	4620      	mov	r0, r4
 800e072:	f7fa fcb3 	bl	80089dc <ucdr_serialize_uint8_t>
 800e076:	6929      	ldr	r1, [r5, #16]
 800e078:	4606      	mov	r6, r0
 800e07a:	4620      	mov	r0, r4
 800e07c:	f7fb fade 	bl	800963c <ucdr_serialize_int32_t>
 800e080:	6969      	ldr	r1, [r5, #20]
 800e082:	4603      	mov	r3, r0
 800e084:	4620      	mov	r0, r4
 800e086:	ea07 0708 	and.w	r7, r7, r8
 800e08a:	461c      	mov	r4, r3
 800e08c:	f7fa febc 	bl	8008e08 <ucdr_serialize_uint32_t>
 800e090:	403e      	ands	r6, r7
 800e092:	4034      	ands	r4, r6
 800e094:	4020      	ands	r0, r4
 800e096:	b2c0      	uxtb	r0, r0
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e09c <uxr_deserialize_SampleIdentity>:
 800e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a0:	220c      	movs	r2, #12
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	460d      	mov	r5, r1
 800e0a6:	f003 fc23 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800e0aa:	2203      	movs	r2, #3
 800e0ac:	f105 010c 	add.w	r1, r5, #12
 800e0b0:	4607      	mov	r7, r0
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f003 fc1c 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 800e0b8:	f105 010f 	add.w	r1, r5, #15
 800e0bc:	4680      	mov	r8, r0
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f7fa fca2 	bl	8008a08 <ucdr_deserialize_uint8_t>
 800e0c4:	f105 0110 	add.w	r1, r5, #16
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f7fb fb4e 	bl	800976c <ucdr_deserialize_int32_t>
 800e0d0:	f105 0114 	add.w	r1, r5, #20
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	ea07 0708 	and.w	r7, r7, r8
 800e0dc:	461c      	mov	r4, r3
 800e0de:	f7fa ffc3 	bl	8009068 <ucdr_deserialize_uint32_t>
 800e0e2:	403e      	ands	r6, r7
 800e0e4:	4034      	ands	r4, r6
 800e0e6:	4020      	ands	r0, r4
 800e0e8:	b2c0      	uxtb	r0, r0
 800e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ee:	bf00      	nop

0800e0f0 <rcl_client_get_rmw_handle>:
 800e0f0:	b110      	cbz	r0, 800e0f8 <rcl_client_get_rmw_handle+0x8>
 800e0f2:	6800      	ldr	r0, [r0, #0]
 800e0f4:	b100      	cbz	r0, 800e0f8 <rcl_client_get_rmw_handle+0x8>
 800e0f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop

0800e0fc <rcl_take_response>:
 800e0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0fe:	460e      	mov	r6, r1
 800e100:	460c      	mov	r4, r1
 800e102:	4607      	mov	r7, r0
 800e104:	4694      	mov	ip, r2
 800e106:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e108:	b08d      	sub	sp, #52	; 0x34
 800e10a:	ad06      	add	r5, sp, #24
 800e10c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e10e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e112:	e885 0003 	stmia.w	r5, {r0, r1}
 800e116:	b337      	cbz	r7, 800e166 <rcl_take_response+0x6a>
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	b323      	cbz	r3, 800e166 <rcl_take_response+0x6a>
 800e11c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e11e:	b310      	cbz	r0, 800e166 <rcl_take_response+0x6a>
 800e120:	4662      	mov	r2, ip
 800e122:	b31a      	cbz	r2, 800e16c <rcl_take_response+0x70>
 800e124:	2300      	movs	r3, #0
 800e126:	2600      	movs	r6, #0
 800e128:	2700      	movs	r7, #0
 800e12a:	f88d 3007 	strb.w	r3, [sp, #7]
 800e12e:	a902      	add	r1, sp, #8
 800e130:	f10d 0307 	add.w	r3, sp, #7
 800e134:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e138:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e13c:	f003 f8bc 	bl	80112b8 <rmw_take_response>
 800e140:	4606      	mov	r6, r0
 800e142:	b9a8      	cbnz	r0, 800e170 <rcl_take_response+0x74>
 800e144:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e148:	f240 13f5 	movw	r3, #501	; 0x1f5
 800e14c:	2a00      	cmp	r2, #0
 800e14e:	bf08      	it	eq
 800e150:	461e      	moveq	r6, r3
 800e152:	ad06      	add	r5, sp, #24
 800e154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e158:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e15c:	e884 0003 	stmia.w	r4, {r0, r1}
 800e160:	4630      	mov	r0, r6
 800e162:	b00d      	add	sp, #52	; 0x34
 800e164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e166:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800e16a:	e7f2      	b.n	800e152 <rcl_take_response+0x56>
 800e16c:	260b      	movs	r6, #11
 800e16e:	e7f0      	b.n	800e152 <rcl_take_response+0x56>
 800e170:	2601      	movs	r6, #1
 800e172:	e7ee      	b.n	800e152 <rcl_take_response+0x56>

0800e174 <rcl_convert_rmw_ret_to_rcl_ret>:
 800e174:	280b      	cmp	r0, #11
 800e176:	dc0d      	bgt.n	800e194 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e178:	2800      	cmp	r0, #0
 800e17a:	db09      	blt.n	800e190 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e17c:	280b      	cmp	r0, #11
 800e17e:	d807      	bhi.n	800e190 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e180:	e8df f000 	tbb	[pc, r0]
 800e184:	07060607 	.word	0x07060607
 800e188:	06060606 	.word	0x06060606
 800e18c:	07070606 	.word	0x07070606
 800e190:	2001      	movs	r0, #1
 800e192:	4770      	bx	lr
 800e194:	28cb      	cmp	r0, #203	; 0xcb
 800e196:	bf18      	it	ne
 800e198:	2001      	movne	r0, #1
 800e19a:	4770      	bx	lr

0800e19c <rcl_get_zero_initialized_context>:
 800e19c:	4a03      	ldr	r2, [pc, #12]	; (800e1ac <rcl_get_zero_initialized_context+0x10>)
 800e19e:	4603      	mov	r3, r0
 800e1a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e1a4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	4770      	bx	lr
 800e1ac:	08014f08 	.word	0x08014f08

0800e1b0 <rcl_context_is_valid>:
 800e1b0:	b118      	cbz	r0, 800e1ba <rcl_context_is_valid+0xa>
 800e1b2:	6840      	ldr	r0, [r0, #4]
 800e1b4:	3800      	subs	r0, #0
 800e1b6:	bf18      	it	ne
 800e1b8:	2001      	movne	r0, #1
 800e1ba:	4770      	bx	lr

0800e1bc <__cleanup_context>:
 800e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	6800      	ldr	r0, [r0, #0]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	6073      	str	r3, [r6, #4]
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d04d      	beq.n	800e268 <__cleanup_context+0xac>
 800e1cc:	6947      	ldr	r7, [r0, #20]
 800e1ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e1d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e1d6:	b137      	cbz	r7, 800e1e6 <__cleanup_context+0x2a>
 800e1d8:	3014      	adds	r0, #20
 800e1da:	f000 fb1d 	bl	800e818 <rcl_init_options_fini>
 800e1de:	4607      	mov	r7, r0
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d148      	bne.n	800e276 <__cleanup_context+0xba>
 800e1e4:	6830      	ldr	r0, [r6, #0]
 800e1e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e1e8:	b143      	cbz	r3, 800e1fc <__cleanup_context+0x40>
 800e1ea:	3028      	adds	r0, #40	; 0x28
 800e1ec:	f002 fda0 	bl	8010d30 <rmw_context_fini>
 800e1f0:	b118      	cbz	r0, 800e1fa <__cleanup_context+0x3e>
 800e1f2:	2f00      	cmp	r7, #0
 800e1f4:	d042      	beq.n	800e27c <__cleanup_context+0xc0>
 800e1f6:	f7fc fbc3 	bl	800a980 <rcutils_reset_error>
 800e1fa:	6830      	ldr	r0, [r6, #0]
 800e1fc:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800e200:	f1bc 0f00 	cmp.w	ip, #0
 800e204:	d01c      	beq.n	800e240 <__cleanup_context+0x84>
 800e206:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e20a:	2a01      	cmp	r2, #1
 800e20c:	f173 0100 	sbcs.w	r1, r3, #0
 800e210:	db12      	blt.n	800e238 <__cleanup_context+0x7c>
 800e212:	2400      	movs	r4, #0
 800e214:	2500      	movs	r5, #0
 800e216:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800e21a:	4649      	mov	r1, r9
 800e21c:	b1c0      	cbz	r0, 800e250 <__cleanup_context+0x94>
 800e21e:	47c0      	blx	r8
 800e220:	6831      	ldr	r1, [r6, #0]
 800e222:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800e226:	3401      	adds	r4, #1
 800e228:	f145 0500 	adc.w	r5, r5, #0
 800e22c:	4294      	cmp	r4, r2
 800e22e:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800e232:	eb75 0103 	sbcs.w	r1, r5, r3
 800e236:	dbee      	blt.n	800e216 <__cleanup_context+0x5a>
 800e238:	4660      	mov	r0, ip
 800e23a:	4649      	mov	r1, r9
 800e23c:	47c0      	blx	r8
 800e23e:	6830      	ldr	r0, [r6, #0]
 800e240:	4649      	mov	r1, r9
 800e242:	47c0      	blx	r8
 800e244:	2300      	movs	r3, #0
 800e246:	e9c6 3300 	strd	r3, r3, [r6]
 800e24a:	4638      	mov	r0, r7
 800e24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e250:	3401      	adds	r4, #1
 800e252:	f145 0500 	adc.w	r5, r5, #0
 800e256:	4294      	cmp	r4, r2
 800e258:	eb75 0103 	sbcs.w	r1, r5, r3
 800e25c:	dbdb      	blt.n	800e216 <__cleanup_context+0x5a>
 800e25e:	4660      	mov	r0, ip
 800e260:	4649      	mov	r1, r9
 800e262:	47c0      	blx	r8
 800e264:	6830      	ldr	r0, [r6, #0]
 800e266:	e7eb      	b.n	800e240 <__cleanup_context+0x84>
 800e268:	4607      	mov	r7, r0
 800e26a:	2300      	movs	r3, #0
 800e26c:	e9c6 3300 	strd	r3, r3, [r6]
 800e270:	4638      	mov	r0, r7
 800e272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e276:	f7fc fb83 	bl	800a980 <rcutils_reset_error>
 800e27a:	e7b3      	b.n	800e1e4 <__cleanup_context+0x28>
 800e27c:	f7ff ff7a 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e280:	4607      	mov	r7, r0
 800e282:	e7b8      	b.n	800e1f6 <__cleanup_context+0x3a>

0800e284 <rcl_expand_topic_name>:
 800e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e288:	b08b      	sub	sp, #44	; 0x2c
 800e28a:	9306      	str	r3, [sp, #24]
 800e28c:	2800      	cmp	r0, #0
 800e28e:	f000 80d2 	beq.w	800e436 <rcl_expand_topic_name+0x1b2>
 800e292:	460e      	mov	r6, r1
 800e294:	2900      	cmp	r1, #0
 800e296:	f000 80ce 	beq.w	800e436 <rcl_expand_topic_name+0x1b2>
 800e29a:	4617      	mov	r7, r2
 800e29c:	2a00      	cmp	r2, #0
 800e29e:	f000 80ca 	beq.w	800e436 <rcl_expand_topic_name+0x1b2>
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 80c7 	beq.w	800e436 <rcl_expand_topic_name+0x1b2>
 800e2a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f000 80c3 	beq.w	800e436 <rcl_expand_topic_name+0x1b2>
 800e2b0:	a909      	add	r1, sp, #36	; 0x24
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	4680      	mov	r8, r0
 800e2b6:	f001 f8db 	bl	800f470 <rcl_validate_topic_name>
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f040 80b6 	bne.w	800e42e <rcl_expand_topic_name+0x1aa>
 800e2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f040 80bf 	bne.w	800e448 <rcl_expand_topic_name+0x1c4>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	a909      	add	r1, sp, #36	; 0x24
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f002 fa50 	bl	8010774 <rmw_validate_node_name>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	f040 80b3 	bne.w	800e440 <rcl_expand_topic_name+0x1bc>
 800e2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2dc:	2a00      	cmp	r2, #0
 800e2de:	f040 80b8 	bne.w	800e452 <rcl_expand_topic_name+0x1ce>
 800e2e2:	a909      	add	r1, sp, #36	; 0x24
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	f002 fa27 	bl	8010738 <rmw_validate_namespace>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f040 80a8 	bne.w	800e440 <rcl_expand_topic_name+0x1bc>
 800e2f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	f040 80f6 	bne.w	800e4e4 <rcl_expand_topic_name+0x260>
 800e2f8:	217b      	movs	r1, #123	; 0x7b
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	f005 fad4 	bl	80138a8 <strchr>
 800e300:	f898 3000 	ldrb.w	r3, [r8]
 800e304:	2b2f      	cmp	r3, #47	; 0x2f
 800e306:	4605      	mov	r5, r0
 800e308:	f000 80c4 	beq.w	800e494 <rcl_expand_topic_name+0x210>
 800e30c:	2b7e      	cmp	r3, #126	; 0x7e
 800e30e:	d16f      	bne.n	800e3f0 <rcl_expand_topic_name+0x16c>
 800e310:	4638      	mov	r0, r7
 800e312:	f7f1 ff87 	bl	8000224 <strlen>
 800e316:	4b87      	ldr	r3, [pc, #540]	; (800e534 <rcl_expand_topic_name+0x2b0>)
 800e318:	4987      	ldr	r1, [pc, #540]	; (800e538 <rcl_expand_topic_name+0x2b4>)
 800e31a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e31c:	9604      	str	r6, [sp, #16]
 800e31e:	2801      	cmp	r0, #1
 800e320:	bf0c      	ite	eq
 800e322:	4618      	moveq	r0, r3
 800e324:	4608      	movne	r0, r1
 800e326:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e32a:	e9cd 2300 	strd	r2, r3, [sp]
 800e32e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800e332:	f108 0101 	add.w	r1, r8, #1
 800e336:	9105      	str	r1, [sp, #20]
 800e338:	ab14      	add	r3, sp, #80	; 0x50
 800e33a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e33c:	f002 f82a 	bl	8010394 <rcutils_format_string_limit>
 800e340:	4682      	mov	sl, r0
 800e342:	2800      	cmp	r0, #0
 800e344:	f000 80d0 	beq.w	800e4e8 <rcl_expand_topic_name+0x264>
 800e348:	2d00      	cmp	r5, #0
 800e34a:	f000 80aa 	beq.w	800e4a2 <rcl_expand_topic_name+0x21e>
 800e34e:	217b      	movs	r1, #123	; 0x7b
 800e350:	f005 faaa 	bl	80138a8 <strchr>
 800e354:	46d1      	mov	r9, sl
 800e356:	4605      	mov	r5, r0
 800e358:	9407      	str	r4, [sp, #28]
 800e35a:	46d3      	mov	fp, sl
 800e35c:	464c      	mov	r4, r9
 800e35e:	2d00      	cmp	r5, #0
 800e360:	f000 80c7 	beq.w	800e4f2 <rcl_expand_topic_name+0x26e>
 800e364:	217d      	movs	r1, #125	; 0x7d
 800e366:	4620      	mov	r0, r4
 800e368:	f005 fa9e 	bl	80138a8 <strchr>
 800e36c:	eba0 0905 	sub.w	r9, r0, r5
 800e370:	f109 0a01 	add.w	sl, r9, #1
 800e374:	4871      	ldr	r0, [pc, #452]	; (800e53c <rcl_expand_topic_name+0x2b8>)
 800e376:	4652      	mov	r2, sl
 800e378:	4629      	mov	r1, r5
 800e37a:	f005 faaa 	bl	80138d2 <strncmp>
 800e37e:	2800      	cmp	r0, #0
 800e380:	f000 808d 	beq.w	800e49e <rcl_expand_topic_name+0x21a>
 800e384:	486e      	ldr	r0, [pc, #440]	; (800e540 <rcl_expand_topic_name+0x2bc>)
 800e386:	4652      	mov	r2, sl
 800e388:	4629      	mov	r1, r5
 800e38a:	f005 faa2 	bl	80138d2 <strncmp>
 800e38e:	b130      	cbz	r0, 800e39e <rcl_expand_topic_name+0x11a>
 800e390:	486c      	ldr	r0, [pc, #432]	; (800e544 <rcl_expand_topic_name+0x2c0>)
 800e392:	4652      	mov	r2, sl
 800e394:	4629      	mov	r1, r5
 800e396:	f005 fa9c 	bl	80138d2 <strncmp>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d15b      	bne.n	800e456 <rcl_expand_topic_name+0x1d2>
 800e39e:	46b9      	mov	r9, r7
 800e3a0:	ab16      	add	r3, sp, #88	; 0x58
 800e3a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e3aa:	ab14      	add	r3, sp, #80	; 0x50
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	cb0c      	ldmia	r3, {r2, r3}
 800e3b0:	4651      	mov	r1, sl
 800e3b2:	f002 f93b 	bl	801062c <rcutils_strndup>
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	f000 80a4 	beq.w	800e506 <rcl_expand_topic_name+0x282>
 800e3be:	464a      	mov	r2, r9
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	ab14      	add	r3, sp, #80	; 0x50
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	f002 f837 	bl	8010438 <rcutils_repl_str>
 800e3ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	4798      	blx	r3
 800e3d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e3d8:	4658      	mov	r0, fp
 800e3da:	4798      	blx	r3
 800e3dc:	2c00      	cmp	r4, #0
 800e3de:	f000 8083 	beq.w	800e4e8 <rcl_expand_topic_name+0x264>
 800e3e2:	217b      	movs	r1, #123	; 0x7b
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f005 fa5f 	bl	80138a8 <strchr>
 800e3ea:	46a3      	mov	fp, r4
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	e7b6      	b.n	800e35e <rcl_expand_topic_name+0xda>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d151      	bne.n	800e498 <rcl_expand_topic_name+0x214>
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	f7f1 ff15 	bl	8000224 <strlen>
 800e3fa:	4b53      	ldr	r3, [pc, #332]	; (800e548 <rcl_expand_topic_name+0x2c4>)
 800e3fc:	4a53      	ldr	r2, [pc, #332]	; (800e54c <rcl_expand_topic_name+0x2c8>)
 800e3fe:	f8cd 8010 	str.w	r8, [sp, #16]
 800e402:	2801      	cmp	r0, #1
 800e404:	bf0c      	ite	eq
 800e406:	4618      	moveq	r0, r3
 800e408:	4610      	movne	r0, r2
 800e40a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e40c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e410:	e9cd 3200 	strd	r3, r2, [sp]
 800e414:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800e418:	ab14      	add	r3, sp, #80	; 0x50
 800e41a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e41c:	f001 ffba 	bl	8010394 <rcutils_format_string_limit>
 800e420:	4682      	mov	sl, r0
 800e422:	4653      	mov	r3, sl
 800e424:	2b00      	cmp	r3, #0
 800e426:	d05f      	beq.n	800e4e8 <rcl_expand_topic_name+0x264>
 800e428:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e42a:	f8c3 a000 	str.w	sl, [r3]
 800e42e:	4620      	mov	r0, r4
 800e430:	b00b      	add	sp, #44	; 0x2c
 800e432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e436:	240b      	movs	r4, #11
 800e438:	4620      	mov	r0, r4
 800e43a:	b00b      	add	sp, #44	; 0x2c
 800e43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e440:	f7ff fe98 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e444:	4604      	mov	r4, r0
 800e446:	e7f2      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e448:	2467      	movs	r4, #103	; 0x67
 800e44a:	4620      	mov	r0, r4
 800e44c:	b00b      	add	sp, #44	; 0x2c
 800e44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e452:	24c9      	movs	r4, #201	; 0xc9
 800e454:	e7eb      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e456:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800e45a:	9806      	ldr	r0, [sp, #24]
 800e45c:	1c69      	adds	r1, r5, #1
 800e45e:	f7fc fba5 	bl	800abac <rcutils_string_map_getn>
 800e462:	4681      	mov	r9, r0
 800e464:	2800      	cmp	r0, #0
 800e466:	d19b      	bne.n	800e3a0 <rcl_expand_topic_name+0x11c>
 800e468:	aa16      	add	r2, sp, #88	; 0x58
 800e46a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e46c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e46e:	f8c3 9000 	str.w	r9, [r3]
 800e472:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e476:	ab14      	add	r3, sp, #80	; 0x50
 800e478:	cb0c      	ldmia	r3, {r2, r3}
 800e47a:	4651      	mov	r1, sl
 800e47c:	4628      	mov	r0, r5
 800e47e:	f002 f8d5 	bl	801062c <rcutils_strndup>
 800e482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e484:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e486:	4798      	blx	r3
 800e488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e48a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e48c:	4658      	mov	r0, fp
 800e48e:	4798      	blx	r3
 800e490:	2469      	movs	r4, #105	; 0x69
 800e492:	e7cc      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e494:	2800      	cmp	r0, #0
 800e496:	d03e      	beq.n	800e516 <rcl_expand_topic_name+0x292>
 800e498:	46c1      	mov	r9, r8
 800e49a:	46a2      	mov	sl, r4
 800e49c:	e75c      	b.n	800e358 <rcl_expand_topic_name+0xd4>
 800e49e:	46b1      	mov	r9, r6
 800e4a0:	e77e      	b.n	800e3a0 <rcl_expand_topic_name+0x11c>
 800e4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a6:	2b2f      	cmp	r3, #47	; 0x2f
 800e4a8:	d0be      	beq.n	800e428 <rcl_expand_topic_name+0x1a4>
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	f7f1 feba 	bl	8000224 <strlen>
 800e4b0:	4b25      	ldr	r3, [pc, #148]	; (800e548 <rcl_expand_topic_name+0x2c4>)
 800e4b2:	4926      	ldr	r1, [pc, #152]	; (800e54c <rcl_expand_topic_name+0x2c8>)
 800e4b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e4b6:	f8cd a010 	str.w	sl, [sp, #16]
 800e4ba:	2801      	cmp	r0, #1
 800e4bc:	bf0c      	ite	eq
 800e4be:	4618      	moveq	r0, r3
 800e4c0:	4608      	movne	r0, r1
 800e4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4c6:	e9cd 2300 	strd	r2, r3, [sp]
 800e4ca:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800e4ce:	ab14      	add	r3, sp, #80	; 0x50
 800e4d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4d2:	f001 ff5f 	bl	8010394 <rcutils_format_string_limit>
 800e4d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e4da:	4603      	mov	r3, r0
 800e4dc:	4650      	mov	r0, sl
 800e4de:	469a      	mov	sl, r3
 800e4e0:	4790      	blx	r2
 800e4e2:	e79e      	b.n	800e422 <rcl_expand_topic_name+0x19e>
 800e4e4:	24ca      	movs	r4, #202	; 0xca
 800e4e6:	e7a2      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e4e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	6013      	str	r3, [r2, #0]
 800e4ee:	240a      	movs	r4, #10
 800e4f0:	e79d      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e4f2:	465b      	mov	r3, fp
 800e4f4:	9c07      	ldr	r4, [sp, #28]
 800e4f6:	46da      	mov	sl, fp
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1d2      	bne.n	800e4a2 <rcl_expand_topic_name+0x21e>
 800e4fc:	f898 3000 	ldrb.w	r3, [r8]
 800e500:	2b2f      	cmp	r3, #47	; 0x2f
 800e502:	d091      	beq.n	800e428 <rcl_expand_topic_name+0x1a4>
 800e504:	e776      	b.n	800e3f4 <rcl_expand_topic_name+0x170>
 800e506:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e508:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e50a:	601d      	str	r5, [r3, #0]
 800e50c:	4658      	mov	r0, fp
 800e50e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e510:	4798      	blx	r3
 800e512:	240a      	movs	r4, #10
 800e514:	e78b      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e516:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 800e51a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e51e:	ab14      	add	r3, sp, #80	; 0x50
 800e520:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e522:	4640      	mov	r0, r8
 800e524:	f002 f860 	bl	80105e8 <rcutils_strdup>
 800e528:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e52a:	2800      	cmp	r0, #0
 800e52c:	bf08      	it	eq
 800e52e:	240a      	moveq	r4, #10
 800e530:	6018      	str	r0, [r3, #0]
 800e532:	e77c      	b.n	800e42e <rcl_expand_topic_name+0x1aa>
 800e534:	08014eec 	.word	0x08014eec
 800e538:	08014f10 	.word	0x08014f10
 800e53c:	08014f20 	.word	0x08014f20
 800e540:	08014f28 	.word	0x08014f28
 800e544:	08014f30 	.word	0x08014f30
 800e548:	08014efc 	.word	0x08014efc
 800e54c:	08014f18 	.word	0x08014f18

0800e550 <rcl_get_default_topic_name_substitutions>:
 800e550:	2800      	cmp	r0, #0
 800e552:	bf0c      	ite	eq
 800e554:	200b      	moveq	r0, #11
 800e556:	2000      	movne	r0, #0
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop

0800e55c <rcl_init>:
 800e55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e560:	1e07      	subs	r7, r0, #0
 800e562:	b09f      	sub	sp, #124	; 0x7c
 800e564:	4688      	mov	r8, r1
 800e566:	4692      	mov	sl, r2
 800e568:	4699      	mov	r9, r3
 800e56a:	f340 8097 	ble.w	800e69c <rcl_init+0x140>
 800e56e:	2900      	cmp	r1, #0
 800e570:	f000 8097 	beq.w	800e6a2 <rcl_init+0x146>
 800e574:	1f0d      	subs	r5, r1, #4
 800e576:	2400      	movs	r4, #0
 800e578:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800e57c:	3401      	adds	r4, #1
 800e57e:	2e00      	cmp	r6, #0
 800e580:	f000 808f 	beq.w	800e6a2 <rcl_init+0x146>
 800e584:	42a7      	cmp	r7, r4
 800e586:	d1f7      	bne.n	800e578 <rcl_init+0x1c>
 800e588:	f1ba 0f00 	cmp.w	sl, #0
 800e58c:	f000 8089 	beq.w	800e6a2 <rcl_init+0x146>
 800e590:	f8da 4000 	ldr.w	r4, [sl]
 800e594:	2c00      	cmp	r4, #0
 800e596:	f000 8084 	beq.w	800e6a2 <rcl_init+0x146>
 800e59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e59c:	ad19      	add	r5, sp, #100	; 0x64
 800e59e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	602b      	str	r3, [r5, #0]
 800e5a4:	a819      	add	r0, sp, #100	; 0x64
 800e5a6:	f7fc f9c7 	bl	800a938 <rcutils_allocator_is_valid>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d079      	beq.n	800e6a2 <rcl_init+0x146>
 800e5ae:	f1b9 0f00 	cmp.w	r9, #0
 800e5b2:	d076      	beq.n	800e6a2 <rcl_init+0x146>
 800e5b4:	f8d9 3000 	ldr.w	r3, [r9]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d177      	bne.n	800e6ac <rcl_init+0x150>
 800e5bc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e5c0:	2178      	movs	r1, #120	; 0x78
 800e5c2:	2001      	movs	r0, #1
 800e5c4:	4798      	blx	r3
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	f8c9 0000 	str.w	r0, [r9]
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f000 80ba 	beq.w	800e746 <rcl_init+0x1ea>
 800e5d2:	a802      	add	r0, sp, #8
 800e5d4:	f002 f846 	bl	8010664 <rmw_get_zero_initialized_context>
 800e5d8:	a902      	add	r1, sp, #8
 800e5da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e5de:	2250      	movs	r2, #80	; 0x50
 800e5e0:	ac19      	add	r4, sp, #100	; 0x64
 800e5e2:	f004 ff6b 	bl	80134bc <memcpy>
 800e5e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5e8:	f8d9 5000 	ldr.w	r5, [r9]
 800e5ec:	6826      	ldr	r6, [r4, #0]
 800e5ee:	462c      	mov	r4, r5
 800e5f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5f2:	f105 0114 	add.w	r1, r5, #20
 800e5f6:	6026      	str	r6, [r4, #0]
 800e5f8:	4650      	mov	r0, sl
 800e5fa:	f000 f931 	bl	800e860 <rcl_init_options_copy>
 800e5fe:	4606      	mov	r6, r0
 800e600:	2800      	cmp	r0, #0
 800e602:	d144      	bne.n	800e68e <rcl_init+0x132>
 800e604:	f8d9 a000 	ldr.w	sl, [r9]
 800e608:	463c      	mov	r4, r7
 800e60a:	17fd      	asrs	r5, r7, #31
 800e60c:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800e610:	f8ca 0020 	str.w	r0, [sl, #32]
 800e614:	2f00      	cmp	r7, #0
 800e616:	d050      	beq.n	800e6ba <rcl_init+0x15e>
 800e618:	f1b8 0f00 	cmp.w	r8, #0
 800e61c:	d04d      	beq.n	800e6ba <rcl_init+0x15e>
 800e61e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e622:	4638      	mov	r0, r7
 800e624:	2104      	movs	r1, #4
 800e626:	4798      	blx	r3
 800e628:	f8ca 0020 	str.w	r0, [sl, #32]
 800e62c:	f8d9 a000 	ldr.w	sl, [r9]
 800e630:	f8da 3020 	ldr.w	r3, [sl, #32]
 800e634:	46d3      	mov	fp, sl
 800e636:	b34b      	cbz	r3, 800e68c <rcl_init+0x130>
 800e638:	2f01      	cmp	r7, #1
 800e63a:	f175 0300 	sbcs.w	r3, r5, #0
 800e63e:	db3c      	blt.n	800e6ba <rcl_init+0x15e>
 800e640:	f1a8 0804 	sub.w	r8, r8, #4
 800e644:	2600      	movs	r6, #0
 800e646:	2700      	movs	r7, #0
 800e648:	e00c      	b.n	800e664 <rcl_init+0x108>
 800e64a:	f8d8 1000 	ldr.w	r1, [r8]
 800e64e:	f004 ff35 	bl	80134bc <memcpy>
 800e652:	3601      	adds	r6, #1
 800e654:	f147 0700 	adc.w	r7, r7, #0
 800e658:	42bd      	cmp	r5, r7
 800e65a:	bf08      	it	eq
 800e65c:	42b4      	cmpeq	r4, r6
 800e65e:	d02a      	beq.n	800e6b6 <rcl_init+0x15a>
 800e660:	f8d9 b000 	ldr.w	fp, [r9]
 800e664:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800e668:	f7f1 fddc 	bl	8000224 <strlen>
 800e66c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e66e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e670:	f8db a020 	ldr.w	sl, [fp, #32]
 800e674:	9001      	str	r0, [sp, #4]
 800e676:	4798      	blx	r3
 800e678:	f8d9 1000 	ldr.w	r1, [r9]
 800e67c:	9a01      	ldr	r2, [sp, #4]
 800e67e:	6a09      	ldr	r1, [r1, #32]
 800e680:	00b3      	lsls	r3, r6, #2
 800e682:	f84a 0003 	str.w	r0, [sl, r3]
 800e686:	58c8      	ldr	r0, [r1, r3]
 800e688:	2800      	cmp	r0, #0
 800e68a:	d1de      	bne.n	800e64a <rcl_init+0xee>
 800e68c:	260a      	movs	r6, #10
 800e68e:	4648      	mov	r0, r9
 800e690:	f7ff fd94 	bl	800e1bc <__cleanup_context>
 800e694:	4630      	mov	r0, r6
 800e696:	b01f      	add	sp, #124	; 0x7c
 800e698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69c:	2900      	cmp	r1, #0
 800e69e:	f43f af73 	beq.w	800e588 <rcl_init+0x2c>
 800e6a2:	260b      	movs	r6, #11
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	b01f      	add	sp, #124	; 0x7c
 800e6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ac:	2664      	movs	r6, #100	; 0x64
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	b01f      	add	sp, #124	; 0x7c
 800e6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b6:	f8d9 a000 	ldr.w	sl, [r9]
 800e6ba:	4a2c      	ldr	r2, [pc, #176]	; (800e76c <rcl_init+0x210>)
 800e6bc:	6813      	ldr	r3, [r2, #0]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	d03b      	beq.n	800e73a <rcl_init+0x1de>
 800e6c2:	6013      	str	r3, [r2, #0]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	f8da 4014 	ldr.w	r4, [sl, #20]
 800e6cc:	f8c9 3004 	str.w	r3, [r9, #4]
 800e6d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800e6d8:	d039      	beq.n	800e74e <rcl_init+0x1f2>
 800e6da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e6de:	b94b      	cbnz	r3, 800e6f4 <rcl_init+0x198>
 800e6e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e6e4:	f000 f962 	bl	800e9ac <rcl_get_localhost_only>
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d1cf      	bne.n	800e68e <rcl_init+0x132>
 800e6ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e6f2:	695c      	ldr	r4, [r3, #20]
 800e6f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e6f6:	aa18      	add	r2, sp, #96	; 0x60
 800e6f8:	a917      	add	r1, sp, #92	; 0x5c
 800e6fa:	f000 fea7 	bl	800f44c <rcl_validate_enclave_name>
 800e6fe:	4606      	mov	r6, r0
 800e700:	2800      	cmp	r0, #0
 800e702:	d1c4      	bne.n	800e68e <rcl_init+0x132>
 800e704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e706:	bb03      	cbnz	r3, 800e74a <rcl_init+0x1ee>
 800e708:	f8d9 1000 	ldr.w	r1, [r9]
 800e70c:	694b      	ldr	r3, [r1, #20]
 800e70e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e710:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e714:	f000 fbfa 	bl	800ef0c <rcl_get_security_options_from_environment>
 800e718:	4606      	mov	r6, r0
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d1b7      	bne.n	800e68e <rcl_init+0x132>
 800e71e:	f8d9 1000 	ldr.w	r1, [r9]
 800e722:	6948      	ldr	r0, [r1, #20]
 800e724:	3128      	adds	r1, #40	; 0x28
 800e726:	3018      	adds	r0, #24
 800e728:	f002 f9ca 	bl	8010ac0 <rmw_init>
 800e72c:	4606      	mov	r6, r0
 800e72e:	2800      	cmp	r0, #0
 800e730:	d0b8      	beq.n	800e6a4 <rcl_init+0x148>
 800e732:	f7ff fd1f 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e736:	4606      	mov	r6, r0
 800e738:	e7a9      	b.n	800e68e <rcl_init+0x132>
 800e73a:	2401      	movs	r4, #1
 800e73c:	4618      	mov	r0, r3
 800e73e:	4621      	mov	r1, r4
 800e740:	6014      	str	r4, [r2, #0]
 800e742:	4623      	mov	r3, r4
 800e744:	e7c0      	b.n	800e6c8 <rcl_init+0x16c>
 800e746:	260a      	movs	r6, #10
 800e748:	e7ac      	b.n	800e6a4 <rcl_init+0x148>
 800e74a:	2601      	movs	r6, #1
 800e74c:	e79f      	b.n	800e68e <rcl_init+0x132>
 800e74e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e752:	f004 fc41 	bl	8012fd8 <rcl_get_default_domain_id>
 800e756:	4606      	mov	r6, r0
 800e758:	2800      	cmp	r0, #0
 800e75a:	d198      	bne.n	800e68e <rcl_init+0x132>
 800e75c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e75e:	3301      	adds	r3, #1
 800e760:	f8d9 3000 	ldr.w	r3, [r9]
 800e764:	bf08      	it	eq
 800e766:	6260      	streq	r0, [r4, #36]	; 0x24
 800e768:	695c      	ldr	r4, [r3, #20]
 800e76a:	e7b6      	b.n	800e6da <rcl_init+0x17e>
 800e76c:	20009100 	.word	0x20009100

0800e770 <rcl_get_zero_initialized_init_options>:
 800e770:	2000      	movs	r0, #0
 800e772:	4770      	bx	lr

0800e774 <rcl_init_options_init>:
 800e774:	b084      	sub	sp, #16
 800e776:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e778:	b091      	sub	sp, #68	; 0x44
 800e77a:	af17      	add	r7, sp, #92	; 0x5c
 800e77c:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e780:	2800      	cmp	r0, #0
 800e782:	d044      	beq.n	800e80e <rcl_init_options_init+0x9a>
 800e784:	6803      	ldr	r3, [r0, #0]
 800e786:	4606      	mov	r6, r0
 800e788:	b133      	cbz	r3, 800e798 <rcl_init_options_init+0x24>
 800e78a:	2464      	movs	r4, #100	; 0x64
 800e78c:	4620      	mov	r0, r4
 800e78e:	b011      	add	sp, #68	; 0x44
 800e790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e794:	b004      	add	sp, #16
 800e796:	4770      	bx	lr
 800e798:	4638      	mov	r0, r7
 800e79a:	f7fc f8cd 	bl	800a938 <rcutils_allocator_is_valid>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d035      	beq.n	800e80e <rcl_init_options_init+0x9a>
 800e7a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7a4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e7a6:	2050      	movs	r0, #80	; 0x50
 800e7a8:	4798      	blx	r3
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	6030      	str	r0, [r6, #0]
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d02f      	beq.n	800e812 <rcl_init_options_init+0x9e>
 800e7b2:	46bc      	mov	ip, r7
 800e7b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e7b8:	4625      	mov	r5, r4
 800e7ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e7bc:	f8dc 3000 	ldr.w	r3, [ip]
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	a802      	add	r0, sp, #8
 800e7c4:	ad02      	add	r5, sp, #8
 800e7c6:	f001 ff55 	bl	8010674 <rmw_get_zero_initialized_init_options>
 800e7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7cc:	3418      	adds	r4, #24
 800e7ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e7dc:	6833      	ldr	r3, [r6, #0]
 800e7de:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e7e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e7ea:	f103 0018 	add.w	r0, r3, #24
 800e7ee:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e7f2:	f002 f88b 	bl	801090c <rmw_init_options_init>
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d0c7      	beq.n	800e78c <rcl_init_options_init+0x18>
 800e7fc:	6830      	ldr	r0, [r6, #0]
 800e7fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e800:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e802:	4798      	blx	r3
 800e804:	4620      	mov	r0, r4
 800e806:	f7ff fcb5 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e80a:	4604      	mov	r4, r0
 800e80c:	e7be      	b.n	800e78c <rcl_init_options_init+0x18>
 800e80e:	240b      	movs	r4, #11
 800e810:	e7bc      	b.n	800e78c <rcl_init_options_init+0x18>
 800e812:	240a      	movs	r4, #10
 800e814:	e7ba      	b.n	800e78c <rcl_init_options_init+0x18>
 800e816:	bf00      	nop

0800e818 <rcl_init_options_fini>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	b1c0      	cbz	r0, 800e850 <rcl_init_options_fini+0x38>
 800e81e:	6804      	ldr	r4, [r0, #0]
 800e820:	4606      	mov	r6, r0
 800e822:	b1ac      	cbz	r4, 800e850 <rcl_init_options_fini+0x38>
 800e824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e826:	ad01      	add	r5, sp, #4
 800e828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	602b      	str	r3, [r5, #0]
 800e82e:	a801      	add	r0, sp, #4
 800e830:	f7fc f882 	bl	800a938 <rcutils_allocator_is_valid>
 800e834:	b160      	cbz	r0, 800e850 <rcl_init_options_fini+0x38>
 800e836:	6830      	ldr	r0, [r6, #0]
 800e838:	3018      	adds	r0, #24
 800e83a:	f002 f901 	bl	8010a40 <rmw_init_options_fini>
 800e83e:	4604      	mov	r4, r0
 800e840:	b950      	cbnz	r0, 800e858 <rcl_init_options_fini+0x40>
 800e842:	6830      	ldr	r0, [r6, #0]
 800e844:	9b02      	ldr	r3, [sp, #8]
 800e846:	9905      	ldr	r1, [sp, #20]
 800e848:	4798      	blx	r3
 800e84a:	4620      	mov	r0, r4
 800e84c:	b006      	add	sp, #24
 800e84e:	bd70      	pop	{r4, r5, r6, pc}
 800e850:	240b      	movs	r4, #11
 800e852:	4620      	mov	r0, r4
 800e854:	b006      	add	sp, #24
 800e856:	bd70      	pop	{r4, r5, r6, pc}
 800e858:	f7ff fc8c 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e85c:	4604      	mov	r4, r0
 800e85e:	e7f8      	b.n	800e852 <rcl_init_options_fini+0x3a>

0800e860 <rcl_init_options_copy>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	b096      	sub	sp, #88	; 0x58
 800e866:	2800      	cmp	r0, #0
 800e868:	d063      	beq.n	800e932 <rcl_init_options_copy+0xd2>
 800e86a:	6806      	ldr	r6, [r0, #0]
 800e86c:	4605      	mov	r5, r0
 800e86e:	2e00      	cmp	r6, #0
 800e870:	d05f      	beq.n	800e932 <rcl_init_options_copy+0xd2>
 800e872:	460c      	mov	r4, r1
 800e874:	2900      	cmp	r1, #0
 800e876:	d05c      	beq.n	800e932 <rcl_init_options_copy+0xd2>
 800e878:	680b      	ldr	r3, [r1, #0]
 800e87a:	b123      	cbz	r3, 800e886 <rcl_init_options_copy+0x26>
 800e87c:	2664      	movs	r6, #100	; 0x64
 800e87e:	4630      	mov	r0, r6
 800e880:	b016      	add	sp, #88	; 0x58
 800e882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e886:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e888:	af11      	add	r7, sp, #68	; 0x44
 800e88a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e88c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800e890:	6833      	ldr	r3, [r6, #0]
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	4640      	mov	r0, r8
 800e896:	f7fc f84f 	bl	800a938 <rcutils_allocator_is_valid>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d049      	beq.n	800e932 <rcl_init_options_copy+0xd2>
 800e89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e8a2:	2050      	movs	r0, #80	; 0x50
 800e8a4:	4798      	blx	r3
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	6020      	str	r0, [r4, #0]
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d077      	beq.n	800e99e <rcl_init_options_copy+0x13e>
 800e8ae:	46c4      	mov	ip, r8
 800e8b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8b4:	4637      	mov	r7, r6
 800e8b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e8b8:	f8dc 3000 	ldr.w	r3, [ip]
 800e8bc:	603b      	str	r3, [r7, #0]
 800e8be:	a802      	add	r0, sp, #8
 800e8c0:	af02      	add	r7, sp, #8
 800e8c2:	f001 fed7 	bl	8010674 <rmw_get_zero_initialized_init_options>
 800e8c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e8c8:	3618      	adds	r6, #24
 800e8ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e8cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e8ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e8d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e8d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e8d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e8d8:	ab16      	add	r3, sp, #88	; 0x58
 800e8da:	e886 0003 	stmia.w	r6, {r0, r1}
 800e8de:	e913 0003 	ldmdb	r3, {r0, r1}
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e8e8:	f103 0018 	add.w	r0, r3, #24
 800e8ec:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800e8f0:	f002 f80c 	bl	801090c <rmw_init_options_init>
 800e8f4:	4606      	mov	r6, r0
 800e8f6:	bb08      	cbnz	r0, 800e93c <rcl_init_options_copy+0xdc>
 800e8f8:	682f      	ldr	r7, [r5, #0]
 800e8fa:	f8d4 c000 	ldr.w	ip, [r4]
 800e8fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e900:	4666      	mov	r6, ip
 800e902:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	6033      	str	r3, [r6, #0]
 800e908:	f10c 0018 	add.w	r0, ip, #24
 800e90c:	f002 f898 	bl	8010a40 <rmw_init_options_fini>
 800e910:	4607      	mov	r7, r0
 800e912:	b1f0      	cbz	r0, 800e952 <rcl_init_options_copy+0xf2>
 800e914:	f7fc f81e 	bl	800a954 <rcutils_get_error_string>
 800e918:	f7fc f832 	bl	800a980 <rcutils_reset_error>
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7ff ff7b 	bl	800e818 <rcl_init_options_fini>
 800e922:	4606      	mov	r6, r0
 800e924:	2800      	cmp	r0, #0
 800e926:	d1aa      	bne.n	800e87e <rcl_init_options_copy+0x1e>
 800e928:	4638      	mov	r0, r7
 800e92a:	f7ff fc23 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e92e:	4606      	mov	r6, r0
 800e930:	e7a5      	b.n	800e87e <rcl_init_options_copy+0x1e>
 800e932:	260b      	movs	r6, #11
 800e934:	4630      	mov	r0, r6
 800e936:	b016      	add	sp, #88	; 0x58
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e93e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e940:	6820      	ldr	r0, [r4, #0]
 800e942:	4798      	blx	r3
 800e944:	4630      	mov	r0, r6
 800e946:	f7ff fc15 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e94a:	4606      	mov	r6, r0
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d0d3      	beq.n	800e8f8 <rcl_init_options_copy+0x98>
 800e950:	e795      	b.n	800e87e <rcl_init_options_copy+0x1e>
 800e952:	a802      	add	r0, sp, #8
 800e954:	ae02      	add	r6, sp, #8
 800e956:	6827      	ldr	r7, [r4, #0]
 800e958:	f001 fe8c 	bl	8010674 <rmw_get_zero_initialized_init_options>
 800e95c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e95e:	3718      	adds	r7, #24
 800e960:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e962:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e964:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e968:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e96a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e96e:	682a      	ldr	r2, [r5, #0]
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	e887 0003 	stmia.w	r7, {r0, r1}
 800e976:	f102 0018 	add.w	r0, r2, #24
 800e97a:	f103 0118 	add.w	r1, r3, #24
 800e97e:	f002 f81d 	bl	80109bc <rmw_init_options_copy>
 800e982:	4606      	mov	r6, r0
 800e984:	2800      	cmp	r0, #0
 800e986:	f43f af7a 	beq.w	800e87e <rcl_init_options_copy+0x1e>
 800e98a:	f7fb ffe3 	bl	800a954 <rcutils_get_error_string>
 800e98e:	f7fb fff7 	bl	800a980 <rcutils_reset_error>
 800e992:	4620      	mov	r0, r4
 800e994:	f7ff ff40 	bl	800e818 <rcl_init_options_fini>
 800e998:	b118      	cbz	r0, 800e9a2 <rcl_init_options_copy+0x142>
 800e99a:	4606      	mov	r6, r0
 800e99c:	e76f      	b.n	800e87e <rcl_init_options_copy+0x1e>
 800e99e:	260a      	movs	r6, #10
 800e9a0:	e76d      	b.n	800e87e <rcl_init_options_copy+0x1e>
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff fbe6 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	e768      	b.n	800e87e <rcl_init_options_copy+0x1e>

0800e9ac <rcl_get_localhost_only>:
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	b1b8      	cbz	r0, 800e9e6 <rcl_get_localhost_only+0x3a>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	a901      	add	r1, sp, #4
 800e9ba:	480c      	ldr	r0, [pc, #48]	; (800e9ec <rcl_get_localhost_only+0x40>)
 800e9bc:	f001 fd24 	bl	8010408 <rcutils_get_env>
 800e9c0:	b110      	cbz	r0, 800e9c8 <rcl_get_localhost_only+0x1c>
 800e9c2:	2001      	movs	r0, #1
 800e9c4:	b002      	add	sp, #8
 800e9c6:	bd10      	pop	{r4, pc}
 800e9c8:	9b01      	ldr	r3, [sp, #4]
 800e9ca:	b113      	cbz	r3, 800e9d2 <rcl_get_localhost_only+0x26>
 800e9cc:	781a      	ldrb	r2, [r3, #0]
 800e9ce:	2a31      	cmp	r2, #49	; 0x31
 800e9d0:	d004      	beq.n	800e9dc <rcl_get_localhost_only+0x30>
 800e9d2:	2302      	movs	r3, #2
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	7023      	strb	r3, [r4, #0]
 800e9d8:	b002      	add	sp, #8
 800e9da:	bd10      	pop	{r4, pc}
 800e9dc:	785b      	ldrb	r3, [r3, #1]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1f7      	bne.n	800e9d2 <rcl_get_localhost_only+0x26>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e7f6      	b.n	800e9d4 <rcl_get_localhost_only+0x28>
 800e9e6:	200b      	movs	r0, #11
 800e9e8:	b002      	add	sp, #8
 800e9ea:	bd10      	pop	{r4, pc}
 800e9ec:	08014f3c 	.word	0x08014f3c

0800e9f0 <rcl_get_zero_initialized_node>:
 800e9f0:	4a03      	ldr	r2, [pc, #12]	; (800ea00 <rcl_get_zero_initialized_node+0x10>)
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	4770      	bx	lr
 800ea00:	08014f5c 	.word	0x08014f5c

0800ea04 <rcl_node_init>:
 800ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	b09b      	sub	sp, #108	; 0x6c
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800ea10:	f04f 0c00 	mov.w	ip, #0
 800ea14:	a815      	add	r0, sp, #84	; 0x54
 800ea16:	460e      	mov	r6, r1
 800ea18:	4615      	mov	r5, r2
 800ea1a:	461f      	mov	r7, r3
 800ea1c:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800ea20:	f004 fb96 	bl	8013150 <rcl_guard_condition_get_default_options>
 800ea24:	f1b8 0f00 	cmp.w	r8, #0
 800ea28:	f000 80fd 	beq.w	800ec26 <rcl_node_init+0x222>
 800ea2c:	f108 0b04 	add.w	fp, r8, #4
 800ea30:	4658      	mov	r0, fp
 800ea32:	f7fb ff81 	bl	800a938 <rcutils_allocator_is_valid>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	f000 80f5 	beq.w	800ec26 <rcl_node_init+0x222>
 800ea3c:	2e00      	cmp	r6, #0
 800ea3e:	f000 80f2 	beq.w	800ec26 <rcl_node_init+0x222>
 800ea42:	2d00      	cmp	r5, #0
 800ea44:	f000 80ef 	beq.w	800ec26 <rcl_node_init+0x222>
 800ea48:	2c00      	cmp	r4, #0
 800ea4a:	f000 80ec 	beq.w	800ec26 <rcl_node_init+0x222>
 800ea4e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ea52:	f1b9 0f00 	cmp.w	r9, #0
 800ea56:	f040 8112 	bne.w	800ec7e <rcl_node_init+0x27a>
 800ea5a:	2f00      	cmp	r7, #0
 800ea5c:	f000 80e3 	beq.w	800ec26 <rcl_node_init+0x222>
 800ea60:	4638      	mov	r0, r7
 800ea62:	f7ff fba5 	bl	800e1b0 <rcl_context_is_valid>
 800ea66:	4682      	mov	sl, r0
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	f000 80e2 	beq.w	800ec32 <rcl_node_init+0x22e>
 800ea6e:	464a      	mov	r2, r9
 800ea70:	a914      	add	r1, sp, #80	; 0x50
 800ea72:	4630      	mov	r0, r6
 800ea74:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800ea78:	f001 fe7c 	bl	8010774 <rmw_validate_node_name>
 800ea7c:	4681      	mov	r9, r0
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f040 80d3 	bne.w	800ec2a <rcl_node_init+0x226>
 800ea84:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f040 8105 	bne.w	800ec96 <rcl_node_init+0x292>
 800ea8c:	4628      	mov	r0, r5
 800ea8e:	f7f1 fbc9 	bl	8000224 <strlen>
 800ea92:	2800      	cmp	r0, #0
 800ea94:	f040 80d0 	bne.w	800ec38 <rcl_node_init+0x234>
 800ea98:	4d8e      	ldr	r5, [pc, #568]	; (800ecd4 <rcl_node_init+0x2d0>)
 800ea9a:	a914      	add	r1, sp, #80	; 0x50
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f001 fe4a 	bl	8010738 <rmw_validate_namespace>
 800eaa4:	4681      	mov	r9, r0
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	f040 80bf 	bne.w	800ec2a <rcl_node_init+0x226>
 800eaac:	4682      	mov	sl, r0
 800eaae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f040 80f5 	bne.w	800eca0 <rcl_node_init+0x29c>
 800eab6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800eaba:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800eabe:	9307      	str	r3, [sp, #28]
 800eac0:	2030      	movs	r0, #48	; 0x30
 800eac2:	4790      	blx	r2
 800eac4:	4681      	mov	r9, r0
 800eac6:	6060      	str	r0, [r4, #4]
 800eac8:	2800      	cmp	r0, #0
 800eaca:	f000 80de 	beq.w	800ec8a <rcl_node_init+0x286>
 800eace:	9b07      	ldr	r3, [sp, #28]
 800ead0:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800ead4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800ead8:	a80a      	add	r0, sp, #40	; 0x28
 800eada:	f000 f933 	bl	800ed44 <rcl_node_get_default_options>
 800eade:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800eae2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eae6:	46cc      	mov	ip, r9
 800eae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaec:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800eaf0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800eaf4:	6861      	ldr	r1, [r4, #4]
 800eaf6:	6027      	str	r7, [r4, #0]
 800eaf8:	4640      	mov	r0, r8
 800eafa:	f000 f93f 	bl	800ed7c <rcl_node_options_copy>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d167      	bne.n	800ebd2 <rcl_node_init+0x1ce>
 800eb02:	4628      	mov	r0, r5
 800eb04:	f7f1 fb8e 	bl	8000224 <strlen>
 800eb08:	4428      	add	r0, r5
 800eb0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb0e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800eb12:	2b2f      	cmp	r3, #47	; 0x2f
 800eb14:	bf08      	it	eq
 800eb16:	4970      	ldreq	r1, [pc, #448]	; (800ecd8 <rcl_node_init+0x2d4>)
 800eb18:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eb1c:	bf18      	it	ne
 800eb1e:	496f      	ldrne	r1, [pc, #444]	; (800ecdc <rcl_node_init+0x2d8>)
 800eb20:	9604      	str	r6, [sp, #16]
 800eb22:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800eb26:	e9cd 3200 	strd	r3, r2, [sp]
 800eb2a:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800eb2e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eb32:	f001 fc2f 	bl	8010394 <rcutils_format_string_limit>
 800eb36:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800eb3a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eb3e:	f8d9 3000 	ldr.w	r3, [r9]
 800eb42:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb44:	1c59      	adds	r1, r3, #1
 800eb46:	f000 80b7 	beq.w	800ecb8 <rcl_node_init+0x2b4>
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	f8c9 301c 	str.w	r3, [r9, #28]
 800eb50:	6952      	ldr	r2, [r2, #20]
 800eb52:	6821      	ldr	r1, [r4, #0]
 800eb54:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800eb58:	6808      	ldr	r0, [r1, #0]
 800eb5a:	f1a2 0201 	sub.w	r2, r2, #1
 800eb5e:	fab2 f282 	clz	r2, r2
 800eb62:	0952      	lsrs	r2, r2, #5
 800eb64:	9200      	str	r2, [sp, #0]
 800eb66:	4631      	mov	r1, r6
 800eb68:	3028      	adds	r0, #40	; 0x28
 800eb6a:	462a      	mov	r2, r5
 800eb6c:	f002 f9fe 	bl	8010f6c <rmw_create_node>
 800eb70:	6863      	ldr	r3, [r4, #4]
 800eb72:	f8c9 0020 	str.w	r0, [r9, #32]
 800eb76:	6a18      	ldr	r0, [r3, #32]
 800eb78:	b368      	cbz	r0, 800ebd6 <rcl_node_init+0x1d2>
 800eb7a:	f002 fa8b 	bl	8011094 <rmw_node_get_graph_guard_condition>
 800eb7e:	4681      	mov	r9, r0
 800eb80:	b338      	cbz	r0, 800ebd2 <rcl_node_init+0x1ce>
 800eb82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb86:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800eb8a:	6866      	ldr	r6, [r4, #4]
 800eb8c:	2008      	movs	r0, #8
 800eb8e:	4798      	blx	r3
 800eb90:	6863      	ldr	r3, [r4, #4]
 800eb92:	6270      	str	r0, [r6, #36]	; 0x24
 800eb94:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800eb96:	b1f6      	cbz	r6, 800ebd6 <rcl_node_init+0x1d2>
 800eb98:	a808      	add	r0, sp, #32
 800eb9a:	f004 fa51 	bl	8013040 <rcl_get_zero_initialized_guard_condition>
 800eb9e:	a808      	add	r0, sp, #32
 800eba0:	c803      	ldmia	r0, {r0, r1}
 800eba2:	e886 0003 	stmia.w	r6, {r0, r1}
 800eba6:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ebaa:	ae15      	add	r6, sp, #84	; 0x54
 800ebac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ebae:	f8db 3000 	ldr.w	r3, [fp]
 800ebb2:	6033      	str	r3, [r6, #0]
 800ebb4:	ab1a      	add	r3, sp, #104	; 0x68
 800ebb6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ebba:	6866      	ldr	r6, [r4, #4]
 800ebbc:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800ebbe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ebc2:	4649      	mov	r1, r9
 800ebc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	463a      	mov	r2, r7
 800ebca:	f004 fa43 	bl	8013054 <rcl_guard_condition_init_from_rmw>
 800ebce:	4681      	mov	r9, r0
 800ebd0:	b328      	cbz	r0, 800ec1e <rcl_node_init+0x21a>
 800ebd2:	6863      	ldr	r3, [r4, #4]
 800ebd4:	b1f3      	cbz	r3, 800ec14 <rcl_node_init+0x210>
 800ebd6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ebd8:	b128      	cbz	r0, 800ebe6 <rcl_node_init+0x1e2>
 800ebda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebde:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ebe2:	4798      	blx	r3
 800ebe4:	6863      	ldr	r3, [r4, #4]
 800ebe6:	6a18      	ldr	r0, [r3, #32]
 800ebe8:	b110      	cbz	r0, 800ebf0 <rcl_node_init+0x1ec>
 800ebea:	f002 f9d7 	bl	8010f9c <rmw_destroy_node>
 800ebee:	6863      	ldr	r3, [r4, #4]
 800ebf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ebf2:	b148      	cbz	r0, 800ec08 <rcl_node_init+0x204>
 800ebf4:	f004 fa86 	bl	8013104 <rcl_guard_condition_fini>
 800ebf8:	6862      	ldr	r2, [r4, #4]
 800ebfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebfe:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800ec00:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ec04:	4798      	blx	r3
 800ec06:	6863      	ldr	r3, [r4, #4]
 800ec08:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800ec0c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ec10:	4618      	mov	r0, r3
 800ec12:	4790      	blx	r2
 800ec14:	2300      	movs	r3, #0
 800ec16:	e9c4 3300 	strd	r3, r3, [r4]
 800ec1a:	f04f 0901 	mov.w	r9, #1
 800ec1e:	f1ba 0f00 	cmp.w	sl, #0
 800ec22:	d125      	bne.n	800ec70 <rcl_node_init+0x26c>
 800ec24:	e001      	b.n	800ec2a <rcl_node_init+0x226>
 800ec26:	f04f 090b 	mov.w	r9, #11
 800ec2a:	4648      	mov	r0, r9
 800ec2c:	b01b      	add	sp, #108	; 0x6c
 800ec2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec32:	f04f 0965 	mov.w	r9, #101	; 0x65
 800ec36:	e7f8      	b.n	800ec2a <rcl_node_init+0x226>
 800ec38:	782b      	ldrb	r3, [r5, #0]
 800ec3a:	2b2f      	cmp	r3, #47	; 0x2f
 800ec3c:	f43f af2d 	beq.w	800ea9a <rcl_node_init+0x96>
 800ec40:	4927      	ldr	r1, [pc, #156]	; (800ece0 <rcl_node_init+0x2dc>)
 800ec42:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec4c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ec50:	9503      	str	r5, [sp, #12]
 800ec52:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800ec56:	f001 fb9d 	bl	8010394 <rcutils_format_string_limit>
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	b348      	cbz	r0, 800ecb2 <rcl_node_init+0x2ae>
 800ec5e:	2200      	movs	r2, #0
 800ec60:	a914      	add	r1, sp, #80	; 0x50
 800ec62:	9214      	str	r2, [sp, #80]	; 0x50
 800ec64:	f001 fd68 	bl	8010738 <rmw_validate_namespace>
 800ec68:	4681      	mov	r9, r0
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	f43f af1f 	beq.w	800eaae <rcl_node_init+0xaa>
 800ec70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec74:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ec78:	4628      	mov	r0, r5
 800ec7a:	4798      	blx	r3
 800ec7c:	e7d5      	b.n	800ec2a <rcl_node_init+0x226>
 800ec7e:	f04f 0964 	mov.w	r9, #100	; 0x64
 800ec82:	4648      	mov	r0, r9
 800ec84:	b01b      	add	sp, #108	; 0x6c
 800ec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8a:	f04f 090a 	mov.w	r9, #10
 800ec8e:	f1ba 0f00 	cmp.w	sl, #0
 800ec92:	d1ed      	bne.n	800ec70 <rcl_node_init+0x26c>
 800ec94:	e7c9      	b.n	800ec2a <rcl_node_init+0x226>
 800ec96:	f001 fdbf 	bl	8010818 <rmw_node_name_validation_result_string>
 800ec9a:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800ec9e:	e7c4      	b.n	800ec2a <rcl_node_init+0x226>
 800eca0:	4618      	mov	r0, r3
 800eca2:	f001 fd5b 	bl	801075c <rmw_namespace_validation_result_string>
 800eca6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800ecaa:	f1ba 0f00 	cmp.w	sl, #0
 800ecae:	d1df      	bne.n	800ec70 <rcl_node_init+0x26c>
 800ecb0:	e7bb      	b.n	800ec2a <rcl_node_init+0x226>
 800ecb2:	f04f 090a 	mov.w	r9, #10
 800ecb6:	e7b8      	b.n	800ec2a <rcl_node_init+0x226>
 800ecb8:	a813      	add	r0, sp, #76	; 0x4c
 800ecba:	f004 f98d 	bl	8012fd8 <rcl_get_default_domain_id>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d187      	bne.n	800ebd2 <rcl_node_init+0x1ce>
 800ecc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecc4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	bf04      	itt	eq
 800eccc:	9013      	streq	r0, [sp, #76]	; 0x4c
 800ecce:	4603      	moveq	r3, r0
 800ecd0:	e73b      	b.n	800eb4a <rcl_node_init+0x146>
 800ecd2:	bf00      	nop
 800ecd4:	08014f54 	.word	0x08014f54
 800ecd8:	08014efc 	.word	0x08014efc
 800ecdc:	08014f18 	.word	0x08014f18
 800ece0:	08014f58 	.word	0x08014f58

0800ece4 <rcl_node_is_valid_except_context>:
 800ece4:	b128      	cbz	r0, 800ecf2 <rcl_node_is_valid_except_context+0xe>
 800ece6:	6840      	ldr	r0, [r0, #4]
 800ece8:	b118      	cbz	r0, 800ecf2 <rcl_node_is_valid_except_context+0xe>
 800ecea:	6a00      	ldr	r0, [r0, #32]
 800ecec:	3800      	subs	r0, #0
 800ecee:	bf18      	it	ne
 800ecf0:	2001      	movne	r0, #1
 800ecf2:	4770      	bx	lr

0800ecf4 <rcl_node_is_valid>:
 800ecf4:	b130      	cbz	r0, 800ed04 <rcl_node_is_valid+0x10>
 800ecf6:	6843      	ldr	r3, [r0, #4]
 800ecf8:	b123      	cbz	r3, 800ed04 <rcl_node_is_valid+0x10>
 800ecfa:	6a1b      	ldr	r3, [r3, #32]
 800ecfc:	b113      	cbz	r3, 800ed04 <rcl_node_is_valid+0x10>
 800ecfe:	6800      	ldr	r0, [r0, #0]
 800ed00:	f7ff ba56 	b.w	800e1b0 <rcl_context_is_valid>
 800ed04:	2000      	movs	r0, #0
 800ed06:	4770      	bx	lr

0800ed08 <rcl_node_get_name>:
 800ed08:	b120      	cbz	r0, 800ed14 <rcl_node_get_name+0xc>
 800ed0a:	6840      	ldr	r0, [r0, #4]
 800ed0c:	b110      	cbz	r0, 800ed14 <rcl_node_get_name+0xc>
 800ed0e:	6a00      	ldr	r0, [r0, #32]
 800ed10:	b100      	cbz	r0, 800ed14 <rcl_node_get_name+0xc>
 800ed12:	6880      	ldr	r0, [r0, #8]
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop

0800ed18 <rcl_node_get_namespace>:
 800ed18:	b120      	cbz	r0, 800ed24 <rcl_node_get_namespace+0xc>
 800ed1a:	6840      	ldr	r0, [r0, #4]
 800ed1c:	b110      	cbz	r0, 800ed24 <rcl_node_get_namespace+0xc>
 800ed1e:	6a00      	ldr	r0, [r0, #32]
 800ed20:	b100      	cbz	r0, 800ed24 <rcl_node_get_namespace+0xc>
 800ed22:	68c0      	ldr	r0, [r0, #12]
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop

0800ed28 <rcl_node_get_options>:
 800ed28:	b128      	cbz	r0, 800ed36 <rcl_node_get_options+0xe>
 800ed2a:	6840      	ldr	r0, [r0, #4]
 800ed2c:	b118      	cbz	r0, 800ed36 <rcl_node_get_options+0xe>
 800ed2e:	6a03      	ldr	r3, [r0, #32]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	bf08      	it	eq
 800ed34:	2000      	moveq	r0, #0
 800ed36:	4770      	bx	lr

0800ed38 <rcl_node_get_rmw_handle>:
 800ed38:	b110      	cbz	r0, 800ed40 <rcl_node_get_rmw_handle+0x8>
 800ed3a:	6840      	ldr	r0, [r0, #4]
 800ed3c:	b100      	cbz	r0, 800ed40 <rcl_node_get_rmw_handle+0x8>
 800ed3e:	6a00      	ldr	r0, [r0, #32]
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop

0800ed44 <rcl_node_get_default_options>:
 800ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed46:	b087      	sub	sp, #28
 800ed48:	4607      	mov	r7, r0
 800ed4a:	466d      	mov	r5, sp
 800ed4c:	4668      	mov	r0, sp
 800ed4e:	f7fb fde5 	bl	800a91c <rcutils_get_default_allocator>
 800ed52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed54:	4c08      	ldr	r4, [pc, #32]	; (800ed78 <rcl_node_get_default_options+0x34>)
 800ed56:	f8d5 c000 	ldr.w	ip, [r5]
 800ed5a:	1d26      	adds	r6, r4, #4
 800ed5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ed5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed60:	463d      	mov	r5, r7
 800ed62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed64:	f8c6 c000 	str.w	ip, [r6]
 800ed68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ed6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ed70:	4638      	mov	r0, r7
 800ed72:	b007      	add	sp, #28
 800ed74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000078 	.word	0x20000078

0800ed7c <rcl_node_options_copy>:
 800ed7c:	b1c8      	cbz	r0, 800edb2 <rcl_node_options_copy+0x36>
 800ed7e:	b4f0      	push	{r4, r5, r6, r7}
 800ed80:	460f      	mov	r7, r1
 800ed82:	b199      	cbz	r1, 800edac <rcl_node_options_copy+0x30>
 800ed84:	4288      	cmp	r0, r1
 800ed86:	4606      	mov	r6, r0
 800ed88:	d010      	beq.n	800edac <rcl_node_options_copy+0x30>
 800ed8a:	4605      	mov	r5, r0
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed92:	f844 3b04 	str.w	r3, [r4], #4
 800ed96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed9a:	7e32      	ldrb	r2, [r6, #24]
 800ed9c:	6829      	ldr	r1, [r5, #0]
 800ed9e:	7e73      	ldrb	r3, [r6, #25]
 800eda0:	6021      	str	r1, [r4, #0]
 800eda2:	2000      	movs	r0, #0
 800eda4:	763a      	strb	r2, [r7, #24]
 800eda6:	767b      	strb	r3, [r7, #25]
 800eda8:	bcf0      	pop	{r4, r5, r6, r7}
 800edaa:	4770      	bx	lr
 800edac:	200b      	movs	r0, #11
 800edae:	bcf0      	pop	{r4, r5, r6, r7}
 800edb0:	4770      	bx	lr
 800edb2:	200b      	movs	r0, #11
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop

0800edb8 <exact_match_lookup>:
 800edb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edba:	f102 0708 	add.w	r7, r2, #8
 800edbe:	460b      	mov	r3, r1
 800edc0:	4614      	mov	r4, r2
 800edc2:	4606      	mov	r6, r0
 800edc4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800edc8:	b085      	sub	sp, #20
 800edca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800edce:	4618      	mov	r0, r3
 800edd0:	4918      	ldr	r1, [pc, #96]	; (800ee34 <exact_match_lookup+0x7c>)
 800edd2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800edd6:	f001 facf 	bl	8010378 <rcutils_join_path>
 800edda:	7833      	ldrb	r3, [r6, #0]
 800eddc:	2b2f      	cmp	r3, #47	; 0x2f
 800edde:	4605      	mov	r5, r0
 800ede0:	d021      	beq.n	800ee26 <exact_match_lookup+0x6e>
 800ede2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800ede6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800edea:	1c70      	adds	r0, r6, #1
 800edec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800edf0:	f001 fac8 	bl	8010384 <rcutils_to_native_path>
 800edf4:	4606      	mov	r6, r0
 800edf6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800edfa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800edfe:	4631      	mov	r1, r6
 800ee00:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ee04:	4628      	mov	r0, r5
 800ee06:	f001 fab7 	bl	8010378 <rcutils_join_path>
 800ee0a:	6862      	ldr	r2, [r4, #4]
 800ee0c:	6921      	ldr	r1, [r4, #16]
 800ee0e:	4603      	mov	r3, r0
 800ee10:	4630      	mov	r0, r6
 800ee12:	461e      	mov	r6, r3
 800ee14:	4790      	blx	r2
 800ee16:	4628      	mov	r0, r5
 800ee18:	6863      	ldr	r3, [r4, #4]
 800ee1a:	6921      	ldr	r1, [r4, #16]
 800ee1c:	4798      	blx	r3
 800ee1e:	4635      	mov	r5, r6
 800ee20:	4628      	mov	r0, r5
 800ee22:	b005      	add	sp, #20
 800ee24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee26:	7873      	ldrb	r3, [r6, #1]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1da      	bne.n	800ede2 <exact_match_lookup+0x2a>
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	b005      	add	sp, #20
 800ee30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee32:	bf00      	nop
 800ee34:	08014fa0 	.word	0x08014fa0

0800ee38 <rcl_get_secure_root>:
 800ee38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee3c:	b085      	sub	sp, #20
 800ee3e:	b168      	cbz	r0, 800ee5c <rcl_get_secure_root+0x24>
 800ee40:	4607      	mov	r7, r0
 800ee42:	4608      	mov	r0, r1
 800ee44:	460c      	mov	r4, r1
 800ee46:	f7fb fd77 	bl	800a938 <rcutils_allocator_is_valid>
 800ee4a:	b138      	cbz	r0, 800ee5c <rcl_get_secure_root+0x24>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	482d      	ldr	r0, [pc, #180]	; (800ef04 <rcl_get_secure_root+0xcc>)
 800ee50:	9303      	str	r3, [sp, #12]
 800ee52:	a903      	add	r1, sp, #12
 800ee54:	f001 fad8 	bl	8010408 <rcutils_get_env>
 800ee58:	4605      	mov	r5, r0
 800ee5a:	b120      	cbz	r0, 800ee66 <rcl_get_secure_root+0x2e>
 800ee5c:	2500      	movs	r5, #0
 800ee5e:	4628      	mov	r0, r5
 800ee60:	b005      	add	sp, #20
 800ee62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee66:	9b03      	ldr	r3, [sp, #12]
 800ee68:	781a      	ldrb	r2, [r3, #0]
 800ee6a:	2a00      	cmp	r2, #0
 800ee6c:	d0f6      	beq.n	800ee5c <rcl_get_secure_root+0x24>
 800ee6e:	f104 090c 	add.w	r9, r4, #12
 800ee72:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ee76:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ee80:	f001 fbb2 	bl	80105e8 <rcutils_strdup>
 800ee84:	4680      	mov	r8, r0
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d0e8      	beq.n	800ee5c <rcl_get_secure_root+0x24>
 800ee8a:	481f      	ldr	r0, [pc, #124]	; (800ef08 <rcl_get_secure_root+0xd0>)
 800ee8c:	9503      	str	r5, [sp, #12]
 800ee8e:	a903      	add	r1, sp, #12
 800ee90:	f001 faba 	bl	8010408 <rcutils_get_env>
 800ee94:	b160      	cbz	r0, 800eeb0 <rcl_get_secure_root+0x78>
 800ee96:	2600      	movs	r6, #0
 800ee98:	6863      	ldr	r3, [r4, #4]
 800ee9a:	6921      	ldr	r1, [r4, #16]
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	4798      	blx	r3
 800eea0:	4640      	mov	r0, r8
 800eea2:	6863      	ldr	r3, [r4, #4]
 800eea4:	6921      	ldr	r1, [r4, #16]
 800eea6:	4798      	blx	r3
 800eea8:	4628      	mov	r0, r5
 800eeaa:	b005      	add	sp, #20
 800eeac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeb0:	9b03      	ldr	r3, [sp, #12]
 800eeb2:	781e      	ldrb	r6, [r3, #0]
 800eeb4:	b1f6      	cbz	r6, 800eef4 <rcl_get_secure_root+0xbc>
 800eeb6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eeba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eebe:	4618      	mov	r0, r3
 800eec0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eec4:	f001 fb90 	bl	80105e8 <rcutils_strdup>
 800eec8:	4606      	mov	r6, r0
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d0e3      	beq.n	800ee96 <rcl_get_secure_root+0x5e>
 800eece:	4622      	mov	r2, r4
 800eed0:	4641      	mov	r1, r8
 800eed2:	f7ff ff71 	bl	800edb8 <exact_match_lookup>
 800eed6:	4605      	mov	r5, r0
 800eed8:	2d00      	cmp	r5, #0
 800eeda:	d0dd      	beq.n	800ee98 <rcl_get_secure_root+0x60>
 800eedc:	4628      	mov	r0, r5
 800eede:	f001 fa49 	bl	8010374 <rcutils_is_directory>
 800eee2:	4607      	mov	r7, r0
 800eee4:	2800      	cmp	r0, #0
 800eee6:	d1d7      	bne.n	800ee98 <rcl_get_secure_root+0x60>
 800eee8:	4628      	mov	r0, r5
 800eeea:	6863      	ldr	r3, [r4, #4]
 800eeec:	6921      	ldr	r1, [r4, #16]
 800eeee:	4798      	blx	r3
 800eef0:	463d      	mov	r5, r7
 800eef2:	e7d1      	b.n	800ee98 <rcl_get_secure_root+0x60>
 800eef4:	4638      	mov	r0, r7
 800eef6:	4622      	mov	r2, r4
 800eef8:	4641      	mov	r1, r8
 800eefa:	f7ff ff5d 	bl	800edb8 <exact_match_lookup>
 800eefe:	4605      	mov	r5, r0
 800ef00:	e7ea      	b.n	800eed8 <rcl_get_secure_root+0xa0>
 800ef02:	bf00      	nop
 800ef04:	08014fac 	.word	0x08014fac
 800ef08:	08014fc4 	.word	0x08014fc4

0800ef0c <rcl_get_security_options_from_environment>:
 800ef0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	4607      	mov	r7, r0
 800ef14:	4688      	mov	r8, r1
 800ef16:	2400      	movs	r4, #0
 800ef18:	481d      	ldr	r0, [pc, #116]	; (800ef90 <rcl_get_security_options_from_environment+0x84>)
 800ef1a:	9401      	str	r4, [sp, #4]
 800ef1c:	a901      	add	r1, sp, #4
 800ef1e:	4616      	mov	r6, r2
 800ef20:	f001 fa72 	bl	8010408 <rcutils_get_env>
 800ef24:	b120      	cbz	r0, 800ef30 <rcl_get_security_options_from_environment+0x24>
 800ef26:	2501      	movs	r5, #1
 800ef28:	4628      	mov	r0, r5
 800ef2a:	b002      	add	sp, #8
 800ef2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef30:	4918      	ldr	r1, [pc, #96]	; (800ef94 <rcl_get_security_options_from_environment+0x88>)
 800ef32:	4604      	mov	r4, r0
 800ef34:	9801      	ldr	r0, [sp, #4]
 800ef36:	f7f1 f96b 	bl	8000210 <strcmp>
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	b9c8      	cbnz	r0, 800ef72 <rcl_get_security_options_from_environment+0x66>
 800ef3e:	9001      	str	r0, [sp, #4]
 800ef40:	b1ee      	cbz	r6, 800ef7e <rcl_get_security_options_from_environment+0x72>
 800ef42:	4815      	ldr	r0, [pc, #84]	; (800ef98 <rcl_get_security_options_from_environment+0x8c>)
 800ef44:	a901      	add	r1, sp, #4
 800ef46:	f001 fa5f 	bl	8010408 <rcutils_get_env>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	d1eb      	bne.n	800ef26 <rcl_get_security_options_from_environment+0x1a>
 800ef4e:	4913      	ldr	r1, [pc, #76]	; (800ef9c <rcl_get_security_options_from_environment+0x90>)
 800ef50:	9801      	ldr	r0, [sp, #4]
 800ef52:	f7f1 f95d 	bl	8000210 <strcmp>
 800ef56:	fab0 f080 	clz	r0, r0
 800ef5a:	0940      	lsrs	r0, r0, #5
 800ef5c:	7030      	strb	r0, [r6, #0]
 800ef5e:	4641      	mov	r1, r8
 800ef60:	4638      	mov	r0, r7
 800ef62:	f7ff ff69 	bl	800ee38 <rcl_get_secure_root>
 800ef66:	b160      	cbz	r0, 800ef82 <rcl_get_security_options_from_environment+0x76>
 800ef68:	6070      	str	r0, [r6, #4]
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	b002      	add	sp, #8
 800ef6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef72:	4625      	mov	r5, r4
 800ef74:	4628      	mov	r0, r5
 800ef76:	7034      	strb	r4, [r6, #0]
 800ef78:	b002      	add	sp, #8
 800ef7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7e:	250b      	movs	r5, #11
 800ef80:	e7d2      	b.n	800ef28 <rcl_get_security_options_from_environment+0x1c>
 800ef82:	7835      	ldrb	r5, [r6, #0]
 800ef84:	f1a5 0501 	sub.w	r5, r5, #1
 800ef88:	fab5 f585 	clz	r5, r5
 800ef8c:	096d      	lsrs	r5, r5, #5
 800ef8e:	e7cb      	b.n	800ef28 <rcl_get_security_options_from_environment+0x1c>
 800ef90:	08014f64 	.word	0x08014f64
 800ef94:	08014f78 	.word	0x08014f78
 800ef98:	08014f80 	.word	0x08014f80
 800ef9c:	08014f98 	.word	0x08014f98

0800efa0 <rcl_service_get_rmw_handle>:
 800efa0:	b110      	cbz	r0, 800efa8 <rcl_service_get_rmw_handle+0x8>
 800efa2:	6800      	ldr	r0, [r0, #0]
 800efa4:	b100      	cbz	r0, 800efa8 <rcl_service_get_rmw_handle+0x8>
 800efa6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop

0800efac <rcl_take_request>:
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	460e      	mov	r6, r1
 800efb0:	460c      	mov	r4, r1
 800efb2:	4607      	mov	r7, r0
 800efb4:	4694      	mov	ip, r2
 800efb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800efb8:	b08d      	sub	sp, #52	; 0x34
 800efba:	ad06      	add	r5, sp, #24
 800efbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efbe:	e896 0003 	ldmia.w	r6, {r0, r1}
 800efc2:	e885 0003 	stmia.w	r5, {r0, r1}
 800efc6:	b1e7      	cbz	r7, 800f002 <rcl_take_request+0x56>
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	b1d3      	cbz	r3, 800f002 <rcl_take_request+0x56>
 800efcc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800efce:	b1c0      	cbz	r0, 800f002 <rcl_take_request+0x56>
 800efd0:	4662      	mov	r2, ip
 800efd2:	b30a      	cbz	r2, 800f018 <rcl_take_request+0x6c>
 800efd4:	2500      	movs	r5, #0
 800efd6:	f10d 0307 	add.w	r3, sp, #7
 800efda:	a902      	add	r1, sp, #8
 800efdc:	f88d 5007 	strb.w	r5, [sp, #7]
 800efe0:	f002 f8ae 	bl	8011140 <rmw_take_request>
 800efe4:	4606      	mov	r6, r0
 800efe6:	b178      	cbz	r0, 800f008 <rcl_take_request+0x5c>
 800efe8:	280a      	cmp	r0, #10
 800efea:	bf18      	it	ne
 800efec:	2601      	movne	r6, #1
 800efee:	ad06      	add	r5, sp, #24
 800eff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eff4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eff8:	e884 0003 	stmia.w	r4, {r0, r1}
 800effc:	4630      	mov	r0, r6
 800effe:	b00d      	add	sp, #52	; 0x34
 800f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f002:	f44f 7616 	mov.w	r6, #600	; 0x258
 800f006:	e7f2      	b.n	800efee <rcl_take_request+0x42>
 800f008:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f00c:	f240 2359 	movw	r3, #601	; 0x259
 800f010:	2a00      	cmp	r2, #0
 800f012:	bf08      	it	eq
 800f014:	461e      	moveq	r6, r3
 800f016:	e7ea      	b.n	800efee <rcl_take_request+0x42>
 800f018:	260b      	movs	r6, #11
 800f01a:	e7e8      	b.n	800efee <rcl_take_request+0x42>

0800f01c <rcl_send_response>:
 800f01c:	b160      	cbz	r0, 800f038 <rcl_send_response+0x1c>
 800f01e:	6800      	ldr	r0, [r0, #0]
 800f020:	b150      	cbz	r0, 800f038 <rcl_send_response+0x1c>
 800f022:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f024:	b140      	cbz	r0, 800f038 <rcl_send_response+0x1c>
 800f026:	b151      	cbz	r1, 800f03e <rcl_send_response+0x22>
 800f028:	b510      	push	{r4, lr}
 800f02a:	b152      	cbz	r2, 800f042 <rcl_send_response+0x26>
 800f02c:	f002 f8e6 	bl	80111fc <rmw_send_response>
 800f030:	3800      	subs	r0, #0
 800f032:	bf18      	it	ne
 800f034:	2001      	movne	r0, #1
 800f036:	bd10      	pop	{r4, pc}
 800f038:	f44f 7016 	mov.w	r0, #600	; 0x258
 800f03c:	4770      	bx	lr
 800f03e:	200b      	movs	r0, #11
 800f040:	4770      	bx	lr
 800f042:	200b      	movs	r0, #11
 800f044:	bd10      	pop	{r4, pc}
 800f046:	bf00      	nop

0800f048 <rcl_get_system_time>:
 800f048:	4608      	mov	r0, r1
 800f04a:	f7fb bde1 	b.w	800ac10 <rcutils_system_time_now>
 800f04e:	bf00      	nop

0800f050 <rcl_get_steady_time>:
 800f050:	4608      	mov	r0, r1
 800f052:	f7fb be05 	b.w	800ac60 <rcutils_steady_time_now>
 800f056:	bf00      	nop

0800f058 <rcl_get_ros_time>:
 800f058:	7a03      	ldrb	r3, [r0, #8]
 800f05a:	b510      	push	{r4, lr}
 800f05c:	460c      	mov	r4, r1
 800f05e:	b133      	cbz	r3, 800f06e <rcl_get_ros_time+0x16>
 800f060:	2105      	movs	r1, #5
 800f062:	f001 f8e5 	bl	8010230 <__atomic_load_8>
 800f066:	e9c4 0100 	strd	r0, r1, [r4]
 800f06a:	2000      	movs	r0, #0
 800f06c:	bd10      	pop	{r4, pc}
 800f06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f072:	4608      	mov	r0, r1
 800f074:	f7fb bdcc 	b.w	800ac10 <rcutils_system_time_now>

0800f078 <rcl_clock_init>:
 800f078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f07c:	4606      	mov	r6, r0
 800f07e:	4610      	mov	r0, r2
 800f080:	4614      	mov	r4, r2
 800f082:	460d      	mov	r5, r1
 800f084:	f7fb fc58 	bl	800a938 <rcutils_allocator_is_valid>
 800f088:	b128      	cbz	r0, 800f096 <rcl_clock_init+0x1e>
 800f08a:	2e03      	cmp	r6, #3
 800f08c:	d803      	bhi.n	800f096 <rcl_clock_init+0x1e>
 800f08e:	e8df f006 	tbb	[pc, r6]
 800f092:	2c1b      	.short	0x2c1b
 800f094:	0554      	.short	0x0554
 800f096:	200b      	movs	r0, #11
 800f098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f09c:	2d00      	cmp	r5, #0
 800f09e:	d0fa      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f0a0:	2c00      	cmp	r4, #0
 800f0a2:	d0f8      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f0a4:	2600      	movs	r6, #0
 800f0a6:	702e      	strb	r6, [r5, #0]
 800f0a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0aa:	f105 0714 	add.w	r7, r5, #20
 800f0ae:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800f0b2:	612e      	str	r6, [r5, #16]
 800f0b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	603b      	str	r3, [r7, #0]
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	4a2b      	ldr	r2, [pc, #172]	; (800f16c <rcl_clock_init+0xf4>)
 800f0be:	702b      	strb	r3, [r5, #0]
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	60ea      	str	r2, [r5, #12]
 800f0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0c8:	2d00      	cmp	r5, #0
 800f0ca:	d0e4      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f0cc:	2600      	movs	r6, #0
 800f0ce:	702e      	strb	r6, [r5, #0]
 800f0d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0d2:	f105 0714 	add.w	r7, r5, #20
 800f0d6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800f0da:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800f0de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ea:	2d00      	cmp	r5, #0
 800f0ec:	d0d3      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	d0d1      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f0f2:	2600      	movs	r6, #0
 800f0f4:	702e      	strb	r6, [r5, #0]
 800f0f6:	46a4      	mov	ip, r4
 800f0f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0fc:	f105 0714 	add.w	r7, r5, #20
 800f100:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800f104:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800f108:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f10a:	f8dc 3000 	ldr.w	r3, [ip]
 800f10e:	603b      	str	r3, [r7, #0]
 800f110:	6921      	ldr	r1, [r4, #16]
 800f112:	6823      	ldr	r3, [r4, #0]
 800f114:	2010      	movs	r0, #16
 800f116:	4798      	blx	r3
 800f118:	4603      	mov	r3, r0
 800f11a:	6128      	str	r0, [r5, #16]
 800f11c:	b318      	cbz	r0, 800f166 <rcl_clock_init+0xee>
 800f11e:	f04f 0800 	mov.w	r8, #0
 800f122:	f04f 0900 	mov.w	r9, #0
 800f126:	7206      	strb	r6, [r0, #8]
 800f128:	e9c3 8900 	strd	r8, r9, [r3]
 800f12c:	2301      	movs	r3, #1
 800f12e:	4a10      	ldr	r2, [pc, #64]	; (800f170 <rcl_clock_init+0xf8>)
 800f130:	702b      	strb	r3, [r5, #0]
 800f132:	4630      	mov	r0, r6
 800f134:	60ea      	str	r2, [r5, #12]
 800f136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13a:	2d00      	cmp	r5, #0
 800f13c:	d0ab      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f13e:	2c00      	cmp	r4, #0
 800f140:	d0a9      	beq.n	800f096 <rcl_clock_init+0x1e>
 800f142:	2600      	movs	r6, #0
 800f144:	702e      	strb	r6, [r5, #0]
 800f146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f148:	f105 0714 	add.w	r7, r5, #20
 800f14c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800f150:	612e      	str	r6, [r5, #16]
 800f152:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f154:	6823      	ldr	r3, [r4, #0]
 800f156:	603b      	str	r3, [r7, #0]
 800f158:	2302      	movs	r3, #2
 800f15a:	4a06      	ldr	r2, [pc, #24]	; (800f174 <rcl_clock_init+0xfc>)
 800f15c:	702b      	strb	r3, [r5, #0]
 800f15e:	4630      	mov	r0, r6
 800f160:	60ea      	str	r2, [r5, #12]
 800f162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f166:	200a      	movs	r0, #10
 800f168:	e796      	b.n	800f098 <rcl_clock_init+0x20>
 800f16a:	bf00      	nop
 800f16c:	0800f051 	.word	0x0800f051
 800f170:	0800f059 	.word	0x0800f059
 800f174:	0800f049 	.word	0x0800f049

0800f178 <rcl_clock_get_now>:
 800f178:	b140      	cbz	r0, 800f18c <rcl_clock_get_now+0x14>
 800f17a:	b139      	cbz	r1, 800f18c <rcl_clock_get_now+0x14>
 800f17c:	7803      	ldrb	r3, [r0, #0]
 800f17e:	b11b      	cbz	r3, 800f188 <rcl_clock_get_now+0x10>
 800f180:	68c3      	ldr	r3, [r0, #12]
 800f182:	b10b      	cbz	r3, 800f188 <rcl_clock_get_now+0x10>
 800f184:	6900      	ldr	r0, [r0, #16]
 800f186:	4718      	bx	r3
 800f188:	2001      	movs	r0, #1
 800f18a:	4770      	bx	lr
 800f18c:	200b      	movs	r0, #11
 800f18e:	4770      	bx	lr

0800f190 <rcl_timer_call>:
 800f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f194:	b08b      	sub	sp, #44	; 0x2c
 800f196:	2800      	cmp	r0, #0
 800f198:	d06e      	beq.n	800f278 <rcl_timer_call+0xe8>
 800f19a:	6803      	ldr	r3, [r0, #0]
 800f19c:	f3bf 8f5b 	dmb	ish
 800f1a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f1a4:	f3bf 8f5b 	dmb	ish
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d159      	bne.n	800f262 <rcl_timer_call+0xd2>
 800f1ae:	6803      	ldr	r3, [r0, #0]
 800f1b0:	a908      	add	r1, sp, #32
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	f7ff ffe0 	bl	800f178 <rcl_clock_get_now>
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d14d      	bne.n	800f25a <rcl_timer_call+0xca>
 800f1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1c2:	2a00      	cmp	r2, #0
 800f1c4:	f173 0100 	sbcs.w	r1, r3, #0
 800f1c8:	db51      	blt.n	800f26e <rcl_timer_call+0xde>
 800f1ca:	6820      	ldr	r0, [r4, #0]
 800f1cc:	2605      	movs	r6, #5
 800f1ce:	9600      	str	r6, [sp, #0]
 800f1d0:	3020      	adds	r0, #32
 800f1d2:	f001 f895 	bl	8010300 <__atomic_exchange_8>
 800f1d6:	6822      	ldr	r2, [r4, #0]
 800f1d8:	f3bf 8f5b 	dmb	ish
 800f1dc:	4682      	mov	sl, r0
 800f1de:	f8d2 b010 	ldr.w	fp, [r2, #16]
 800f1e2:	f3bf 8f5b 	dmb	ish
 800f1e6:	6820      	ldr	r0, [r4, #0]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	3028      	adds	r0, #40	; 0x28
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	9305      	str	r3, [sp, #20]
 800f1f0:	f001 f81e 	bl	8010230 <__atomic_load_8>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	6820      	ldr	r0, [r4, #0]
 800f1f8:	460a      	mov	r2, r1
 800f1fa:	3018      	adds	r0, #24
 800f1fc:	4631      	mov	r1, r6
 800f1fe:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800f202:	f001 f815 	bl	8010230 <__atomic_load_8>
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	9a03      	ldr	r2, [sp, #12]
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f212:	eb13 0806 	adds.w	r8, r3, r6
 800f216:	eb42 0907 	adc.w	r9, r2, r7
 800f21a:	4580      	cmp	r8, r0
 800f21c:	eb79 0301 	sbcs.w	r3, r9, r1
 800f220:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f224:	460a      	mov	r2, r1
 800f226:	da04      	bge.n	800f232 <rcl_timer_call+0xa2>
 800f228:	ea56 0307 	orrs.w	r3, r6, r7
 800f22c:	d129      	bne.n	800f282 <rcl_timer_call+0xf2>
 800f22e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800f232:	6820      	ldr	r0, [r4, #0]
 800f234:	2105      	movs	r1, #5
 800f236:	4642      	mov	r2, r8
 800f238:	464b      	mov	r3, r9
 800f23a:	3028      	adds	r0, #40	; 0x28
 800f23c:	9100      	str	r1, [sp, #0]
 800f23e:	f001 f82b 	bl	8010298 <__atomic_store_8>
 800f242:	f1bb 0f00 	cmp.w	fp, #0
 800f246:	d008      	beq.n	800f25a <rcl_timer_call+0xca>
 800f248:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f24c:	9905      	ldr	r1, [sp, #20]
 800f24e:	ebb2 020a 	subs.w	r2, r2, sl
 800f252:	4620      	mov	r0, r4
 800f254:	eb63 0301 	sbc.w	r3, r3, r1
 800f258:	47d8      	blx	fp
 800f25a:	4628      	mov	r0, r5
 800f25c:	b00b      	add	sp, #44	; 0x2c
 800f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f262:	f240 3521 	movw	r5, #801	; 0x321
 800f266:	4628      	mov	r0, r5
 800f268:	b00b      	add	sp, #44	; 0x2c
 800f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26e:	2501      	movs	r5, #1
 800f270:	4628      	mov	r0, r5
 800f272:	b00b      	add	sp, #44	; 0x2c
 800f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f278:	250b      	movs	r5, #11
 800f27a:	4628      	mov	r0, r5
 800f27c:	b00b      	add	sp, #44	; 0x2c
 800f27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f282:	ebb0 0008 	subs.w	r0, r0, r8
 800f286:	eb62 0109 	sbc.w	r1, r2, r9
 800f28a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 800f28e:	463b      	mov	r3, r7
 800f290:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 800f294:	4632      	mov	r2, r6
 800f296:	f7f1 f893 	bl	80003c0 <__aeabi_ldivmod>
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	f141 0100 	adc.w	r1, r1, #0
 800f2a0:	fb00 7007 	mla	r0, r0, r7, r7
 800f2a4:	fb06 0001 	mla	r0, r6, r1, r0
 800f2a8:	fba3 6706 	umull	r6, r7, r3, r6
 800f2ac:	4407      	add	r7, r0
 800f2ae:	eb18 0806 	adds.w	r8, r8, r6
 800f2b2:	eb49 0907 	adc.w	r9, r9, r7
 800f2b6:	e7bc      	b.n	800f232 <rcl_timer_call+0xa2>

0800f2b8 <rcl_timer_is_ready>:
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	b082      	sub	sp, #8
 800f2be:	b310      	cbz	r0, 800f306 <rcl_timer_is_ready+0x4e>
 800f2c0:	4688      	mov	r8, r1
 800f2c2:	b301      	cbz	r1, 800f306 <rcl_timer_is_ready+0x4e>
 800f2c4:	6803      	ldr	r3, [r0, #0]
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4669      	mov	r1, sp
 800f2ca:	6818      	ldr	r0, [r3, #0]
 800f2cc:	f7ff ff54 	bl	800f178 <rcl_clock_get_now>
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	b118      	cbz	r0, 800f2dc <rcl_timer_is_ready+0x24>
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	b002      	add	sp, #8
 800f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2dc:	6820      	ldr	r0, [r4, #0]
 800f2de:	2105      	movs	r1, #5
 800f2e0:	3028      	adds	r0, #40	; 0x28
 800f2e2:	f000 ffa5 	bl	8010230 <__atomic_load_8>
 800f2e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f2ea:	1ac6      	subs	r6, r0, r3
 800f2ec:	eb61 0702 	sbc.w	r7, r1, r2
 800f2f0:	2e01      	cmp	r6, #1
 800f2f2:	f177 0300 	sbcs.w	r3, r7, #0
 800f2f6:	db0b      	blt.n	800f310 <rcl_timer_is_ready+0x58>
 800f2f8:	462b      	mov	r3, r5
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f888 3000 	strb.w	r3, [r8]
 800f300:	b002      	add	sp, #8
 800f302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f306:	250b      	movs	r5, #11
 800f308:	4628      	mov	r0, r5
 800f30a:	b002      	add	sp, #8
 800f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	f3bf 8f5b 	dmb	ish
 800f316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f31a:	f3bf 8f5b 	dmb	ish
 800f31e:	fab3 f383 	clz	r3, r3
 800f322:	095b      	lsrs	r3, r3, #5
 800f324:	e7e9      	b.n	800f2fa <rcl_timer_is_ready+0x42>
 800f326:	bf00      	nop

0800f328 <rcl_timer_get_time_until_next_call>:
 800f328:	b570      	push	{r4, r5, r6, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	b1d8      	cbz	r0, 800f366 <rcl_timer_get_time_until_next_call+0x3e>
 800f32e:	460d      	mov	r5, r1
 800f330:	b1c9      	cbz	r1, 800f366 <rcl_timer_get_time_until_next_call+0x3e>
 800f332:	6803      	ldr	r3, [r0, #0]
 800f334:	4604      	mov	r4, r0
 800f336:	4669      	mov	r1, sp
 800f338:	6818      	ldr	r0, [r3, #0]
 800f33a:	f7ff ff1d 	bl	800f178 <rcl_clock_get_now>
 800f33e:	4606      	mov	r6, r0
 800f340:	b110      	cbz	r0, 800f348 <rcl_timer_get_time_until_next_call+0x20>
 800f342:	4630      	mov	r0, r6
 800f344:	b002      	add	sp, #8
 800f346:	bd70      	pop	{r4, r5, r6, pc}
 800f348:	6820      	ldr	r0, [r4, #0]
 800f34a:	2105      	movs	r1, #5
 800f34c:	3028      	adds	r0, #40	; 0x28
 800f34e:	f000 ff6f 	bl	8010230 <__atomic_load_8>
 800f352:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f356:	1ac0      	subs	r0, r0, r3
 800f358:	eb61 0102 	sbc.w	r1, r1, r2
 800f35c:	e9c5 0100 	strd	r0, r1, [r5]
 800f360:	4630      	mov	r0, r6
 800f362:	b002      	add	sp, #8
 800f364:	bd70      	pop	{r4, r5, r6, pc}
 800f366:	260b      	movs	r6, #11
 800f368:	4630      	mov	r0, r6
 800f36a:	b002      	add	sp, #8
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	bf00      	nop

0800f370 <rcl_timer_is_canceled>:
 800f370:	b168      	cbz	r0, 800f38e <rcl_timer_is_canceled+0x1e>
 800f372:	b161      	cbz	r1, 800f38e <rcl_timer_is_canceled+0x1e>
 800f374:	6803      	ldr	r3, [r0, #0]
 800f376:	f3bf 8f5b 	dmb	ish
 800f37a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f37e:	f3bf 8f5b 	dmb	ish
 800f382:	3b00      	subs	r3, #0
 800f384:	bf18      	it	ne
 800f386:	2301      	movne	r3, #1
 800f388:	700b      	strb	r3, [r1, #0]
 800f38a:	2000      	movs	r0, #0
 800f38c:	4770      	bx	lr
 800f38e:	200b      	movs	r0, #11
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop

0800f394 <rcl_timer_get_guard_condition>:
 800f394:	b130      	cbz	r0, 800f3a4 <rcl_timer_get_guard_condition+0x10>
 800f396:	6800      	ldr	r0, [r0, #0]
 800f398:	b120      	cbz	r0, 800f3a4 <rcl_timer_get_guard_condition+0x10>
 800f39a:	68c3      	ldr	r3, [r0, #12]
 800f39c:	b10b      	cbz	r3, 800f3a2 <rcl_timer_get_guard_condition+0xe>
 800f39e:	3008      	adds	r0, #8
 800f3a0:	4770      	bx	lr
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop

0800f3a8 <rcl_validate_enclave_name_with_size>:
 800f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3aa:	b0c3      	sub	sp, #268	; 0x10c
 800f3ac:	b1d0      	cbz	r0, 800f3e4 <rcl_validate_enclave_name_with_size+0x3c>
 800f3ae:	4615      	mov	r5, r2
 800f3b0:	b1c2      	cbz	r2, 800f3e4 <rcl_validate_enclave_name_with_size+0x3c>
 800f3b2:	461f      	mov	r7, r3
 800f3b4:	466a      	mov	r2, sp
 800f3b6:	ab01      	add	r3, sp, #4
 800f3b8:	460e      	mov	r6, r1
 800f3ba:	f001 f96f 	bl	801069c <rmw_validate_namespace_with_size>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b9e0      	cbnz	r0, 800f3fc <rcl_validate_enclave_name_with_size+0x54>
 800f3c2:	9b00      	ldr	r3, [sp, #0]
 800f3c4:	b923      	cbnz	r3, 800f3d0 <rcl_validate_enclave_name_with_size+0x28>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	602b      	str	r3, [r5, #0]
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	b043      	add	sp, #268	; 0x10c
 800f3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d0:	2b07      	cmp	r3, #7
 800f3d2:	d00b      	beq.n	800f3ec <rcl_validate_enclave_name_with_size+0x44>
 800f3d4:	1e5a      	subs	r2, r3, #1
 800f3d6:	2a05      	cmp	r2, #5
 800f3d8:	d82e      	bhi.n	800f438 <rcl_validate_enclave_name_with_size+0x90>
 800f3da:	e8df f002 	tbb	[pc, r2]
 800f3de:	211e      	.short	0x211e
 800f3e0:	152a2724 	.word	0x152a2724
 800f3e4:	240b      	movs	r4, #11
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	b043      	add	sp, #268	; 0x10c
 800f3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3ec:	2eff      	cmp	r6, #255	; 0xff
 800f3ee:	d9ea      	bls.n	800f3c6 <rcl_validate_enclave_name_with_size+0x1e>
 800f3f0:	602b      	str	r3, [r5, #0]
 800f3f2:	2f00      	cmp	r7, #0
 800f3f4:	d0e9      	beq.n	800f3ca <rcl_validate_enclave_name_with_size+0x22>
 800f3f6:	23fe      	movs	r3, #254	; 0xfe
 800f3f8:	603b      	str	r3, [r7, #0]
 800f3fa:	e7e6      	b.n	800f3ca <rcl_validate_enclave_name_with_size+0x22>
 800f3fc:	f7fe feba 	bl	800e174 <rcl_convert_rmw_ret_to_rcl_ret>
 800f400:	4604      	mov	r4, r0
 800f402:	4620      	mov	r0, r4
 800f404:	b043      	add	sp, #268	; 0x10c
 800f406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f408:	2306      	movs	r3, #6
 800f40a:	602b      	str	r3, [r5, #0]
 800f40c:	2f00      	cmp	r7, #0
 800f40e:	d0dc      	beq.n	800f3ca <rcl_validate_enclave_name_with_size+0x22>
 800f410:	9b01      	ldr	r3, [sp, #4]
 800f412:	603b      	str	r3, [r7, #0]
 800f414:	4620      	mov	r0, r4
 800f416:	b043      	add	sp, #268	; 0x10c
 800f418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f41a:	2301      	movs	r3, #1
 800f41c:	602b      	str	r3, [r5, #0]
 800f41e:	e7f5      	b.n	800f40c <rcl_validate_enclave_name_with_size+0x64>
 800f420:	2302      	movs	r3, #2
 800f422:	602b      	str	r3, [r5, #0]
 800f424:	e7f2      	b.n	800f40c <rcl_validate_enclave_name_with_size+0x64>
 800f426:	2303      	movs	r3, #3
 800f428:	602b      	str	r3, [r5, #0]
 800f42a:	e7ef      	b.n	800f40c <rcl_validate_enclave_name_with_size+0x64>
 800f42c:	2304      	movs	r3, #4
 800f42e:	602b      	str	r3, [r5, #0]
 800f430:	e7ec      	b.n	800f40c <rcl_validate_enclave_name_with_size+0x64>
 800f432:	2305      	movs	r3, #5
 800f434:	602b      	str	r3, [r5, #0]
 800f436:	e7e9      	b.n	800f40c <rcl_validate_enclave_name_with_size+0x64>
 800f438:	4a03      	ldr	r2, [pc, #12]	; (800f448 <rcl_validate_enclave_name_with_size+0xa0>)
 800f43a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f43e:	a802      	add	r0, sp, #8
 800f440:	f001 f8a6 	bl	8010590 <rcutils_snprintf>
 800f444:	2401      	movs	r4, #1
 800f446:	e7c0      	b.n	800f3ca <rcl_validate_enclave_name_with_size+0x22>
 800f448:	08014fe4 	.word	0x08014fe4

0800f44c <rcl_validate_enclave_name>:
 800f44c:	b168      	cbz	r0, 800f46a <rcl_validate_enclave_name+0x1e>
 800f44e:	b570      	push	{r4, r5, r6, lr}
 800f450:	460d      	mov	r5, r1
 800f452:	4616      	mov	r6, r2
 800f454:	4604      	mov	r4, r0
 800f456:	f7f0 fee5 	bl	8000224 <strlen>
 800f45a:	4633      	mov	r3, r6
 800f45c:	4601      	mov	r1, r0
 800f45e:	462a      	mov	r2, r5
 800f460:	4620      	mov	r0, r4
 800f462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f466:	f7ff bf9f 	b.w	800f3a8 <rcl_validate_enclave_name_with_size>
 800f46a:	200b      	movs	r0, #11
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop

0800f470 <rcl_validate_topic_name>:
 800f470:	2800      	cmp	r0, #0
 800f472:	f000 808b 	beq.w	800f58c <rcl_validate_topic_name+0x11c>
 800f476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f47a:	460e      	mov	r6, r1
 800f47c:	2900      	cmp	r1, #0
 800f47e:	f000 808c 	beq.w	800f59a <rcl_validate_topic_name+0x12a>
 800f482:	4617      	mov	r7, r2
 800f484:	4605      	mov	r5, r0
 800f486:	f7f0 fecd 	bl	8000224 <strlen>
 800f48a:	b1b0      	cbz	r0, 800f4ba <rcl_validate_topic_name+0x4a>
 800f48c:	f895 9000 	ldrb.w	r9, [r5]
 800f490:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800f640 <rcl_validate_topic_name+0x1d0>
 800f494:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800f498:	f013 0304 	ands.w	r3, r3, #4
 800f49c:	d178      	bne.n	800f590 <rcl_validate_topic_name+0x120>
 800f49e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800f4a2:	f815 2008 	ldrb.w	r2, [r5, r8]
 800f4a6:	2a2f      	cmp	r2, #47	; 0x2f
 800f4a8:	d10e      	bne.n	800f4c8 <rcl_validate_topic_name+0x58>
 800f4aa:	2202      	movs	r2, #2
 800f4ac:	6032      	str	r2, [r6, #0]
 800f4ae:	b36f      	cbz	r7, 800f50c <rcl_validate_topic_name+0x9c>
 800f4b0:	f8c7 8000 	str.w	r8, [r7]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	6033      	str	r3, [r6, #0]
 800f4be:	b32f      	cbz	r7, 800f50c <rcl_validate_topic_name+0x9c>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	6038      	str	r0, [r7, #0]
 800f4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c8:	461c      	mov	r4, r3
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800f4d0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800f4d4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f4d8:	f1be 0f09 	cmp.w	lr, #9
 800f4dc:	d946      	bls.n	800f56c <rcl_validate_topic_name+0xfc>
 800f4de:	f022 0e20 	bic.w	lr, r2, #32
 800f4e2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800f4e6:	f1be 0f19 	cmp.w	lr, #25
 800f4ea:	d93f      	bls.n	800f56c <rcl_validate_topic_name+0xfc>
 800f4ec:	2a5f      	cmp	r2, #95	; 0x5f
 800f4ee:	d014      	beq.n	800f51a <rcl_validate_topic_name+0xaa>
 800f4f0:	2a2f      	cmp	r2, #47	; 0x2f
 800f4f2:	d05b      	beq.n	800f5ac <rcl_validate_topic_name+0x13c>
 800f4f4:	2a7e      	cmp	r2, #126	; 0x7e
 800f4f6:	d052      	beq.n	800f59e <rcl_validate_topic_name+0x12e>
 800f4f8:	2a7b      	cmp	r2, #123	; 0x7b
 800f4fa:	d00a      	beq.n	800f512 <rcl_validate_topic_name+0xa2>
 800f4fc:	2a7d      	cmp	r2, #125	; 0x7d
 800f4fe:	d16f      	bne.n	800f5e0 <rcl_validate_topic_name+0x170>
 800f500:	2c00      	cmp	r4, #0
 800f502:	d15e      	bne.n	800f5c2 <rcl_validate_topic_name+0x152>
 800f504:	2305      	movs	r3, #5
 800f506:	6033      	str	r3, [r6, #0]
 800f508:	b107      	cbz	r7, 800f50c <rcl_validate_topic_name+0x9c>
 800f50a:	6039      	str	r1, [r7, #0]
 800f50c:	2000      	movs	r0, #0
 800f50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f512:	2c00      	cmp	r4, #0
 800f514:	d14c      	bne.n	800f5b0 <rcl_validate_topic_name+0x140>
 800f516:	460b      	mov	r3, r1
 800f518:	2401      	movs	r4, #1
 800f51a:	3101      	adds	r1, #1
 800f51c:	4288      	cmp	r0, r1
 800f51e:	d1d7      	bne.n	800f4d0 <rcl_validate_topic_name+0x60>
 800f520:	2c00      	cmp	r4, #0
 800f522:	d156      	bne.n	800f5d2 <rcl_validate_topic_name+0x162>
 800f524:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 800f528:	4620      	mov	r0, r4
 800f52a:	d061      	beq.n	800f5f0 <rcl_validate_topic_name+0x180>
 800f52c:	f108 0e01 	add.w	lr, r8, #1
 800f530:	e007      	b.n	800f542 <rcl_validate_topic_name+0xd2>
 800f532:	2801      	cmp	r0, #1
 800f534:	d047      	beq.n	800f5c6 <rcl_validate_topic_name+0x156>
 800f536:	461a      	mov	r2, r3
 800f538:	4291      	cmp	r1, r2
 800f53a:	4618      	mov	r0, r3
 800f53c:	f105 0501 	add.w	r5, r5, #1
 800f540:	d944      	bls.n	800f5cc <rcl_validate_topic_name+0x15c>
 800f542:	4580      	cmp	r8, r0
 800f544:	f100 0301 	add.w	r3, r0, #1
 800f548:	d037      	beq.n	800f5ba <rcl_validate_topic_name+0x14a>
 800f54a:	782a      	ldrb	r2, [r5, #0]
 800f54c:	2a2f      	cmp	r2, #47	; 0x2f
 800f54e:	d1f0      	bne.n	800f532 <rcl_validate_topic_name+0xc2>
 800f550:	786b      	ldrb	r3, [r5, #1]
 800f552:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	0760      	lsls	r0, r4, #29
 800f55a:	461a      	mov	r2, r3
 800f55c:	d5ec      	bpl.n	800f538 <rcl_validate_topic_name+0xc8>
 800f55e:	2304      	movs	r3, #4
 800f560:	6033      	str	r3, [r6, #0]
 800f562:	2f00      	cmp	r7, #0
 800f564:	d0d2      	beq.n	800f50c <rcl_validate_topic_name+0x9c>
 800f566:	603a      	str	r2, [r7, #0]
 800f568:	2000      	movs	r0, #0
 800f56a:	e7ab      	b.n	800f4c4 <rcl_validate_topic_name+0x54>
 800f56c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800f570:	0752      	lsls	r2, r2, #29
 800f572:	d5d2      	bpl.n	800f51a <rcl_validate_topic_name+0xaa>
 800f574:	2c00      	cmp	r4, #0
 800f576:	d0d0      	beq.n	800f51a <rcl_validate_topic_name+0xaa>
 800f578:	2900      	cmp	r1, #0
 800f57a:	d0ce      	beq.n	800f51a <rcl_validate_topic_name+0xaa>
 800f57c:	1e4a      	subs	r2, r1, #1
 800f57e:	429a      	cmp	r2, r3
 800f580:	d1cb      	bne.n	800f51a <rcl_validate_topic_name+0xaa>
 800f582:	2309      	movs	r3, #9
 800f584:	6033      	str	r3, [r6, #0]
 800f586:	2f00      	cmp	r7, #0
 800f588:	d1bf      	bne.n	800f50a <rcl_validate_topic_name+0x9a>
 800f58a:	e7bf      	b.n	800f50c <rcl_validate_topic_name+0x9c>
 800f58c:	200b      	movs	r0, #11
 800f58e:	4770      	bx	lr
 800f590:	2304      	movs	r3, #4
 800f592:	6033      	str	r3, [r6, #0]
 800f594:	2f00      	cmp	r7, #0
 800f596:	d193      	bne.n	800f4c0 <rcl_validate_topic_name+0x50>
 800f598:	e7b8      	b.n	800f50c <rcl_validate_topic_name+0x9c>
 800f59a:	200b      	movs	r0, #11
 800f59c:	e792      	b.n	800f4c4 <rcl_validate_topic_name+0x54>
 800f59e:	2900      	cmp	r1, #0
 800f5a0:	d0bb      	beq.n	800f51a <rcl_validate_topic_name+0xaa>
 800f5a2:	2306      	movs	r3, #6
 800f5a4:	6033      	str	r3, [r6, #0]
 800f5a6:	2f00      	cmp	r7, #0
 800f5a8:	d1af      	bne.n	800f50a <rcl_validate_topic_name+0x9a>
 800f5aa:	e7af      	b.n	800f50c <rcl_validate_topic_name+0x9c>
 800f5ac:	2c00      	cmp	r4, #0
 800f5ae:	d0b4      	beq.n	800f51a <rcl_validate_topic_name+0xaa>
 800f5b0:	2308      	movs	r3, #8
 800f5b2:	6033      	str	r3, [r6, #0]
 800f5b4:	2f00      	cmp	r7, #0
 800f5b6:	d1a8      	bne.n	800f50a <rcl_validate_topic_name+0x9a>
 800f5b8:	e7a8      	b.n	800f50c <rcl_validate_topic_name+0x9c>
 800f5ba:	4672      	mov	r2, lr
 800f5bc:	f108 0301 	add.w	r3, r8, #1
 800f5c0:	e7ba      	b.n	800f538 <rcl_validate_topic_name+0xc8>
 800f5c2:	2400      	movs	r4, #0
 800f5c4:	e7a9      	b.n	800f51a <rcl_validate_topic_name+0xaa>
 800f5c6:	2202      	movs	r2, #2
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	e7b5      	b.n	800f538 <rcl_validate_topic_name+0xc8>
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	6030      	str	r0, [r6, #0]
 800f5d0:	e778      	b.n	800f4c4 <rcl_validate_topic_name+0x54>
 800f5d2:	2205      	movs	r2, #5
 800f5d4:	6032      	str	r2, [r6, #0]
 800f5d6:	2f00      	cmp	r7, #0
 800f5d8:	d098      	beq.n	800f50c <rcl_validate_topic_name+0x9c>
 800f5da:	603b      	str	r3, [r7, #0]
 800f5dc:	2000      	movs	r0, #0
 800f5de:	e771      	b.n	800f4c4 <rcl_validate_topic_name+0x54>
 800f5e0:	2c00      	cmp	r4, #0
 800f5e2:	bf14      	ite	ne
 800f5e4:	2308      	movne	r3, #8
 800f5e6:	2303      	moveq	r3, #3
 800f5e8:	6033      	str	r3, [r6, #0]
 800f5ea:	2f00      	cmp	r7, #0
 800f5ec:	d18d      	bne.n	800f50a <rcl_validate_topic_name+0x9a>
 800f5ee:	e78d      	b.n	800f50c <rcl_validate_topic_name+0x9c>
 800f5f0:	f108 0401 	add.w	r4, r8, #1
 800f5f4:	e007      	b.n	800f606 <rcl_validate_topic_name+0x196>
 800f5f6:	2801      	cmp	r0, #1
 800f5f8:	d019      	beq.n	800f62e <rcl_validate_topic_name+0x1be>
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4291      	cmp	r1, r2
 800f5fe:	4618      	mov	r0, r3
 800f600:	f105 0501 	add.w	r5, r5, #1
 800f604:	d9e2      	bls.n	800f5cc <rcl_validate_topic_name+0x15c>
 800f606:	4580      	cmp	r8, r0
 800f608:	f100 0301 	add.w	r3, r0, #1
 800f60c:	d00b      	beq.n	800f626 <rcl_validate_topic_name+0x1b6>
 800f60e:	782a      	ldrb	r2, [r5, #0]
 800f610:	2a2f      	cmp	r2, #47	; 0x2f
 800f612:	d1f0      	bne.n	800f5f6 <rcl_validate_topic_name+0x186>
 800f614:	786b      	ldrb	r3, [r5, #1]
 800f616:	f81c e003 	ldrb.w	lr, [ip, r3]
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	f01e 0f04 	tst.w	lr, #4
 800f620:	461a      	mov	r2, r3
 800f622:	d0eb      	beq.n	800f5fc <rcl_validate_topic_name+0x18c>
 800f624:	e79b      	b.n	800f55e <rcl_validate_topic_name+0xee>
 800f626:	4622      	mov	r2, r4
 800f628:	f108 0301 	add.w	r3, r8, #1
 800f62c:	e7e6      	b.n	800f5fc <rcl_validate_topic_name+0x18c>
 800f62e:	2307      	movs	r3, #7
 800f630:	6033      	str	r3, [r6, #0]
 800f632:	2f00      	cmp	r7, #0
 800f634:	f43f af6a 	beq.w	800f50c <rcl_validate_topic_name+0x9c>
 800f638:	6038      	str	r0, [r7, #0]
 800f63a:	2000      	movs	r0, #0
 800f63c:	e742      	b.n	800f4c4 <rcl_validate_topic_name+0x54>
 800f63e:	bf00      	nop
 800f640:	080155fd 	.word	0x080155fd

0800f644 <rcl_get_zero_initialized_wait_set>:
 800f644:	b470      	push	{r4, r5, r6}
 800f646:	4d07      	ldr	r5, [pc, #28]	; (800f664 <rcl_get_zero_initialized_wait_set+0x20>)
 800f648:	4606      	mov	r6, r0
 800f64a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f64c:	4634      	mov	r4, r6
 800f64e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	4630      	mov	r0, r6
 800f65e:	bc70      	pop	{r4, r5, r6}
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	08015044 	.word	0x08015044

0800f668 <rcl_wait_set_is_valid>:
 800f668:	b118      	cbz	r0, 800f672 <rcl_wait_set_is_valid+0xa>
 800f66a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f66c:	3800      	subs	r0, #0
 800f66e:	bf18      	it	ne
 800f670:	2001      	movne	r0, #1
 800f672:	4770      	bx	lr

0800f674 <rcl_wait_set_fini>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	2800      	cmp	r0, #0
 800f67c:	f000 8095 	beq.w	800f7aa <rcl_wait_set_fini+0x136>
 800f680:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800f682:	4604      	mov	r4, r0
 800f684:	2e00      	cmp	r6, #0
 800f686:	f000 808c 	beq.w	800f7a2 <rcl_wait_set_fini+0x12e>
 800f68a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800f68c:	f002 f846 	bl	801171c <rmw_destroy_wait_set>
 800f690:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f692:	1e06      	subs	r6, r0, #0
 800f694:	bf18      	it	ne
 800f696:	f44f 7661 	movne.w	r6, #900	; 0x384
 800f69a:	2d00      	cmp	r5, #0
 800f69c:	f000 8081 	beq.w	800f7a2 <rcl_wait_set_fini+0x12e>
 800f6a0:	6820      	ldr	r0, [r4, #0]
 800f6a2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f6a6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f6a8:	2700      	movs	r7, #0
 800f6aa:	6067      	str	r7, [r4, #4]
 800f6ac:	602f      	str	r7, [r5, #0]
 800f6ae:	b120      	cbz	r0, 800f6ba <rcl_wait_set_fini+0x46>
 800f6b0:	9101      	str	r1, [sp, #4]
 800f6b2:	47c0      	blx	r8
 800f6b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6b6:	9901      	ldr	r1, [sp, #4]
 800f6b8:	6027      	str	r7, [r4, #0]
 800f6ba:	68a8      	ldr	r0, [r5, #8]
 800f6bc:	b120      	cbz	r0, 800f6c8 <rcl_wait_set_fini+0x54>
 800f6be:	47c0      	blx	r8
 800f6c0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f6c8:	68a0      	ldr	r0, [r4, #8]
 800f6ca:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f6cc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f6ce:	f04f 0800 	mov.w	r8, #0
 800f6d2:	f8c4 800c 	str.w	r8, [r4, #12]
 800f6d6:	f8c5 800c 	str.w	r8, [r5, #12]
 800f6da:	b128      	cbz	r0, 800f6e8 <rcl_wait_set_fini+0x74>
 800f6dc:	47b8      	blx	r7
 800f6de:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6e0:	f8c4 8008 	str.w	r8, [r4, #8]
 800f6e4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f6e6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f6e8:	6968      	ldr	r0, [r5, #20]
 800f6ea:	f04f 0800 	mov.w	r8, #0
 800f6ee:	f8c5 8010 	str.w	r8, [r5, #16]
 800f6f2:	b128      	cbz	r0, 800f700 <rcl_wait_set_fini+0x8c>
 800f6f4:	47b8      	blx	r7
 800f6f6:	f8c5 8014 	str.w	r8, [r5, #20]
 800f6fa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f6fc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f6fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f700:	6920      	ldr	r0, [r4, #16]
 800f702:	f04f 0800 	mov.w	r8, #0
 800f706:	f8c4 8014 	str.w	r8, [r4, #20]
 800f70a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800f70e:	b128      	cbz	r0, 800f71c <rcl_wait_set_fini+0xa8>
 800f710:	47b8      	blx	r7
 800f712:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f714:	f8c4 8010 	str.w	r8, [r4, #16]
 800f718:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f71a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f71c:	69a0      	ldr	r0, [r4, #24]
 800f71e:	f04f 0800 	mov.w	r8, #0
 800f722:	f8c4 801c 	str.w	r8, [r4, #28]
 800f726:	f8c5 8018 	str.w	r8, [r5, #24]
 800f72a:	b128      	cbz	r0, 800f738 <rcl_wait_set_fini+0xc4>
 800f72c:	9101      	str	r1, [sp, #4]
 800f72e:	47b8      	blx	r7
 800f730:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f732:	9901      	ldr	r1, [sp, #4]
 800f734:	f8c4 8018 	str.w	r8, [r4, #24]
 800f738:	6a28      	ldr	r0, [r5, #32]
 800f73a:	b120      	cbz	r0, 800f746 <rcl_wait_set_fini+0xd2>
 800f73c:	47b8      	blx	r7
 800f73e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f740:	2300      	movs	r3, #0
 800f742:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f746:	6a20      	ldr	r0, [r4, #32]
 800f748:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f74c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f74e:	2700      	movs	r7, #0
 800f750:	6267      	str	r7, [r4, #36]	; 0x24
 800f752:	626f      	str	r7, [r5, #36]	; 0x24
 800f754:	b120      	cbz	r0, 800f760 <rcl_wait_set_fini+0xec>
 800f756:	9101      	str	r1, [sp, #4]
 800f758:	47c0      	blx	r8
 800f75a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f75c:	9901      	ldr	r1, [sp, #4]
 800f75e:	6227      	str	r7, [r4, #32]
 800f760:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800f762:	b120      	cbz	r0, 800f76e <rcl_wait_set_fini+0xfa>
 800f764:	47c0      	blx	r8
 800f766:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f768:	2300      	movs	r3, #0
 800f76a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f76e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f770:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f774:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f776:	2700      	movs	r7, #0
 800f778:	62e7      	str	r7, [r4, #44]	; 0x2c
 800f77a:	632f      	str	r7, [r5, #48]	; 0x30
 800f77c:	b120      	cbz	r0, 800f788 <rcl_wait_set_fini+0x114>
 800f77e:	9101      	str	r1, [sp, #4]
 800f780:	47c0      	blx	r8
 800f782:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f784:	9901      	ldr	r1, [sp, #4]
 800f786:	62a7      	str	r7, [r4, #40]	; 0x28
 800f788:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800f78a:	b120      	cbz	r0, 800f796 <rcl_wait_set_fini+0x122>
 800f78c:	47c0      	blx	r8
 800f78e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f790:	2300      	movs	r3, #0
 800f792:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f796:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f798:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f79a:	4628      	mov	r0, r5
 800f79c:	4798      	blx	r3
 800f79e:	2300      	movs	r3, #0
 800f7a0:	6323      	str	r3, [r4, #48]	; 0x30
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	b002      	add	sp, #8
 800f7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7aa:	260b      	movs	r6, #11
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	b002      	add	sp, #8
 800f7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7b4 <rcl_wait_set_add_subscription>:
 800f7b4:	b320      	cbz	r0, 800f800 <rcl_wait_set_add_subscription+0x4c>
 800f7b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	b1d3      	cbz	r3, 800f7f4 <rcl_wait_set_add_subscription+0x40>
 800f7be:	b319      	cbz	r1, 800f808 <rcl_wait_set_add_subscription+0x54>
 800f7c0:	681d      	ldr	r5, [r3, #0]
 800f7c2:	6860      	ldr	r0, [r4, #4]
 800f7c4:	4285      	cmp	r5, r0
 800f7c6:	d218      	bcs.n	800f7fa <rcl_wait_set_add_subscription+0x46>
 800f7c8:	6820      	ldr	r0, [r4, #0]
 800f7ca:	1c6e      	adds	r6, r5, #1
 800f7cc:	601e      	str	r6, [r3, #0]
 800f7ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f7d2:	b102      	cbz	r2, 800f7d6 <rcl_wait_set_add_subscription+0x22>
 800f7d4:	6015      	str	r5, [r2, #0]
 800f7d6:	4608      	mov	r0, r1
 800f7d8:	f7fa fc50 	bl	800a07c <rcl_subscription_get_rmw_handle>
 800f7dc:	b190      	cbz	r0, 800f804 <rcl_wait_set_add_subscription+0x50>
 800f7de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f7e0:	6842      	ldr	r2, [r0, #4]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f7ea:	6853      	ldr	r3, [r2, #4]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	6053      	str	r3, [r2, #4]
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f7f8:	bd70      	pop	{r4, r5, r6, pc}
 800f7fa:	f240 3086 	movw	r0, #902	; 0x386
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	200b      	movs	r0, #11
 800f802:	4770      	bx	lr
 800f804:	2001      	movs	r0, #1
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	200b      	movs	r0, #11
 800f80a:	bd70      	pop	{r4, r5, r6, pc}

0800f80c <rcl_wait_set_clear>:
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d073      	beq.n	800f8f8 <rcl_wait_set_clear+0xec>
 800f810:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f812:	b510      	push	{r4, lr}
 800f814:	4604      	mov	r4, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d070      	beq.n	800f8fc <rcl_wait_set_clear+0xf0>
 800f81a:	6800      	ldr	r0, [r0, #0]
 800f81c:	b138      	cbz	r0, 800f82e <rcl_wait_set_clear+0x22>
 800f81e:	6862      	ldr	r2, [r4, #4]
 800f820:	2100      	movs	r1, #0
 800f822:	0092      	lsls	r2, r2, #2
 800f824:	f003 fe72 	bl	801350c <memset>
 800f828:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f82a:	2200      	movs	r2, #0
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	68a0      	ldr	r0, [r4, #8]
 800f830:	b138      	cbz	r0, 800f842 <rcl_wait_set_clear+0x36>
 800f832:	68e2      	ldr	r2, [r4, #12]
 800f834:	2100      	movs	r1, #0
 800f836:	0092      	lsls	r2, r2, #2
 800f838:	f003 fe68 	bl	801350c <memset>
 800f83c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f83e:	2200      	movs	r2, #0
 800f840:	60da      	str	r2, [r3, #12]
 800f842:	69a0      	ldr	r0, [r4, #24]
 800f844:	b138      	cbz	r0, 800f856 <rcl_wait_set_clear+0x4a>
 800f846:	69e2      	ldr	r2, [r4, #28]
 800f848:	2100      	movs	r1, #0
 800f84a:	0092      	lsls	r2, r2, #2
 800f84c:	f003 fe5e 	bl	801350c <memset>
 800f850:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f852:	2200      	movs	r2, #0
 800f854:	619a      	str	r2, [r3, #24]
 800f856:	6a20      	ldr	r0, [r4, #32]
 800f858:	b138      	cbz	r0, 800f86a <rcl_wait_set_clear+0x5e>
 800f85a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f85c:	2100      	movs	r1, #0
 800f85e:	0092      	lsls	r2, r2, #2
 800f860:	f003 fe54 	bl	801350c <memset>
 800f864:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f866:	2200      	movs	r2, #0
 800f868:	625a      	str	r2, [r3, #36]	; 0x24
 800f86a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f86c:	b138      	cbz	r0, 800f87e <rcl_wait_set_clear+0x72>
 800f86e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f870:	2100      	movs	r1, #0
 800f872:	0092      	lsls	r2, r2, #2
 800f874:	f003 fe4a 	bl	801350c <memset>
 800f878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f87a:	2200      	movs	r2, #0
 800f87c:	631a      	str	r2, [r3, #48]	; 0x30
 800f87e:	6920      	ldr	r0, [r4, #16]
 800f880:	b138      	cbz	r0, 800f892 <rcl_wait_set_clear+0x86>
 800f882:	6962      	ldr	r2, [r4, #20]
 800f884:	2100      	movs	r1, #0
 800f886:	0092      	lsls	r2, r2, #2
 800f888:	f003 fe40 	bl	801350c <memset>
 800f88c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f88e:	2200      	movs	r2, #0
 800f890:	641a      	str	r2, [r3, #64]	; 0x40
 800f892:	6898      	ldr	r0, [r3, #8]
 800f894:	b138      	cbz	r0, 800f8a6 <rcl_wait_set_clear+0x9a>
 800f896:	685a      	ldr	r2, [r3, #4]
 800f898:	2100      	movs	r1, #0
 800f89a:	0092      	lsls	r2, r2, #2
 800f89c:	f003 fe36 	bl	801350c <memset>
 800f8a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	605a      	str	r2, [r3, #4]
 800f8a6:	6958      	ldr	r0, [r3, #20]
 800f8a8:	b138      	cbz	r0, 800f8ba <rcl_wait_set_clear+0xae>
 800f8aa:	691a      	ldr	r2, [r3, #16]
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	0092      	lsls	r2, r2, #2
 800f8b0:	f003 fe2c 	bl	801350c <memset>
 800f8b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	611a      	str	r2, [r3, #16]
 800f8ba:	6a18      	ldr	r0, [r3, #32]
 800f8bc:	b138      	cbz	r0, 800f8ce <rcl_wait_set_clear+0xc2>
 800f8be:	69da      	ldr	r2, [r3, #28]
 800f8c0:	2100      	movs	r1, #0
 800f8c2:	0092      	lsls	r2, r2, #2
 800f8c4:	f003 fe22 	bl	801350c <memset>
 800f8c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	61da      	str	r2, [r3, #28]
 800f8ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f8d0:	b138      	cbz	r0, 800f8e2 <rcl_wait_set_clear+0xd6>
 800f8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	0092      	lsls	r2, r2, #2
 800f8d8:	f003 fe18 	bl	801350c <memset>
 800f8dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8de:	2200      	movs	r2, #0
 800f8e0:	629a      	str	r2, [r3, #40]	; 0x28
 800f8e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f8e4:	b138      	cbz	r0, 800f8f6 <rcl_wait_set_clear+0xea>
 800f8e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	0092      	lsls	r2, r2, #2
 800f8ec:	f003 fe0e 	bl	801350c <memset>
 800f8f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	6358      	str	r0, [r3, #52]	; 0x34
 800f8f6:	bd10      	pop	{r4, pc}
 800f8f8:	200b      	movs	r0, #11
 800f8fa:	4770      	bx	lr
 800f8fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f900:	bd10      	pop	{r4, pc}
 800f902:	bf00      	nop

0800f904 <rcl_wait_set_resize>:
 800f904:	2800      	cmp	r0, #0
 800f906:	f000 81a6 	beq.w	800fc56 <rcl_wait_set_resize+0x352>
 800f90a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90e:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 800f912:	b083      	sub	sp, #12
 800f914:	4604      	mov	r4, r0
 800f916:	f1ba 0f00 	cmp.w	sl, #0
 800f91a:	f000 819e 	beq.w	800fc5a <rcl_wait_set_resize+0x356>
 800f91e:	461e      	mov	r6, r3
 800f920:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 800f924:	f04f 0800 	mov.w	r8, #0
 800f928:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	f8c0 8004 	str.w	r8, [r0, #4]
 800f932:	460f      	mov	r7, r1
 800f934:	4615      	mov	r5, r2
 800f936:	f8ca 8000 	str.w	r8, [sl]
 800f93a:	2900      	cmp	r1, #0
 800f93c:	f000 80c9 	beq.w	800fad2 <rcl_wait_set_resize+0x1ce>
 800f940:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800f944:	6800      	ldr	r0, [r0, #0]
 800f946:	4651      	mov	r1, sl
 800f948:	464a      	mov	r2, r9
 800f94a:	4798      	blx	r3
 800f94c:	6020      	str	r0, [r4, #0]
 800f94e:	2800      	cmp	r0, #0
 800f950:	f000 80d8 	beq.w	800fb04 <rcl_wait_set_resize+0x200>
 800f954:	4652      	mov	r2, sl
 800f956:	4641      	mov	r1, r8
 800f958:	f003 fdd8 	bl	801350c <memset>
 800f95c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f95e:	6067      	str	r7, [r4, #4]
 800f960:	6898      	ldr	r0, [r3, #8]
 800f962:	f8c3 8004 	str.w	r8, [r3, #4]
 800f966:	9301      	str	r3, [sp, #4]
 800f968:	464a      	mov	r2, r9
 800f96a:	9b00      	ldr	r3, [sp, #0]
 800f96c:	4651      	mov	r1, sl
 800f96e:	4798      	blx	r3
 800f970:	9b01      	ldr	r3, [sp, #4]
 800f972:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f974:	6098      	str	r0, [r3, #8]
 800f976:	6897      	ldr	r7, [r2, #8]
 800f978:	2f00      	cmp	r7, #0
 800f97a:	f000 80be 	beq.w	800fafa <rcl_wait_set_resize+0x1f6>
 800f97e:	4652      	mov	r2, sl
 800f980:	4641      	mov	r1, r8
 800f982:	4638      	mov	r0, r7
 800f984:	f003 fdc2 	bl	801350c <memset>
 800f988:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f98c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f990:	2700      	movs	r7, #0
 800f992:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 800f996:	60e7      	str	r7, [r4, #12]
 800f998:	f8ca 700c 	str.w	r7, [sl, #12]
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	f040 80b5 	bne.w	800fb0c <rcl_wait_set_resize+0x208>
 800f9a2:	68a0      	ldr	r0, [r4, #8]
 800f9a4:	b130      	cbz	r0, 800f9b4 <rcl_wait_set_resize+0xb0>
 800f9a6:	4641      	mov	r1, r8
 800f9a8:	4790      	blx	r2
 800f9aa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f9ae:	60a5      	str	r5, [r4, #8]
 800f9b0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f9b4:	2700      	movs	r7, #0
 800f9b6:	19ad      	adds	r5, r5, r6
 800f9b8:	f8ca 7010 	str.w	r7, [sl, #16]
 800f9bc:	f040 80be 	bne.w	800fb3c <rcl_wait_set_resize+0x238>
 800f9c0:	f8da 0014 	ldr.w	r0, [sl, #20]
 800f9c4:	b148      	cbz	r0, 800f9da <rcl_wait_set_resize+0xd6>
 800f9c6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800f9ca:	4641      	mov	r1, r8
 800f9cc:	4798      	blx	r3
 800f9ce:	f8ca 5014 	str.w	r5, [sl, #20]
 800f9d2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f9d6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800f9da:	2500      	movs	r5, #0
 800f9dc:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800f9e0:	6165      	str	r5, [r4, #20]
 800f9e2:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 800f9e6:	2e00      	cmp	r6, #0
 800f9e8:	f040 80bf 	bne.w	800fb6a <rcl_wait_set_resize+0x266>
 800f9ec:	6920      	ldr	r0, [r4, #16]
 800f9ee:	b140      	cbz	r0, 800fa02 <rcl_wait_set_resize+0xfe>
 800f9f0:	4641      	mov	r1, r8
 800f9f2:	47c8      	blx	r9
 800f9f4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f9f8:	6126      	str	r6, [r4, #16]
 800f9fa:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800f9fe:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800fa02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa04:	2500      	movs	r5, #0
 800fa06:	61e5      	str	r5, [r4, #28]
 800fa08:	f8ca 5018 	str.w	r5, [sl, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f040 80c1 	bne.w	800fb94 <rcl_wait_set_resize+0x290>
 800fa12:	69a0      	ldr	r0, [r4, #24]
 800fa14:	b128      	cbz	r0, 800fa22 <rcl_wait_set_resize+0x11e>
 800fa16:	4641      	mov	r1, r8
 800fa18:	47c8      	blx	r9
 800fa1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa1c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa20:	61a3      	str	r3, [r4, #24]
 800fa22:	f8da 0020 	ldr.w	r0, [sl, #32]
 800fa26:	b130      	cbz	r0, 800fa36 <rcl_wait_set_resize+0x132>
 800fa28:	4641      	mov	r1, r8
 800fa2a:	47c8      	blx	r9
 800fa2c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa30:	2300      	movs	r3, #0
 800fa32:	e9ca 3307 	strd	r3, r3, [sl, #28]
 800fa36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa38:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 800fa42:	6266      	str	r6, [r4, #36]	; 0x24
 800fa44:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80c8 	beq.w	800fbde <rcl_wait_set_resize+0x2da>
 800fa4e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800fa52:	6a20      	ldr	r0, [r4, #32]
 800fa54:	4651      	mov	r1, sl
 800fa56:	463a      	mov	r2, r7
 800fa58:	47c8      	blx	r9
 800fa5a:	6220      	str	r0, [r4, #32]
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d051      	beq.n	800fb04 <rcl_wait_set_resize+0x200>
 800fa60:	4652      	mov	r2, sl
 800fa62:	4631      	mov	r1, r6
 800fa64:	f003 fd52 	bl	801350c <memset>
 800fa68:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fa6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa6c:	6263      	str	r3, [r4, #36]	; 0x24
 800fa6e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800fa70:	62ae      	str	r6, [r5, #40]	; 0x28
 800fa72:	463a      	mov	r2, r7
 800fa74:	4651      	mov	r1, sl
 800fa76:	47c8      	blx	r9
 800fa78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fa7a:	62e8      	str	r0, [r5, #44]	; 0x2c
 800fa7c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800fa7e:	2d00      	cmp	r5, #0
 800fa80:	f000 8105 	beq.w	800fc8e <rcl_wait_set_resize+0x38a>
 800fa84:	4652      	mov	r2, sl
 800fa86:	4631      	mov	r1, r6
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f003 fd3f 	bl	801350c <memset>
 800fa8e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fa92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa94:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 800fa98:	2500      	movs	r5, #0
 800fa9a:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 800fa9e:	62e5      	str	r5, [r4, #44]	; 0x2c
 800faa0:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f040 80af 	bne.w	800fc08 <rcl_wait_set_resize+0x304>
 800faaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800faac:	b128      	cbz	r0, 800faba <rcl_wait_set_resize+0x1b6>
 800faae:	4631      	mov	r1, r6
 800fab0:	47b8      	blx	r7
 800fab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fab4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fab8:	62a3      	str	r3, [r4, #40]	; 0x28
 800faba:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800fabe:	b310      	cbz	r0, 800fb06 <rcl_wait_set_resize+0x202>
 800fac0:	4631      	mov	r1, r6
 800fac2:	47b8      	blx	r7
 800fac4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fac6:	2000      	movs	r0, #0
 800fac8:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 800facc:	b003      	add	sp, #12
 800face:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad2:	6800      	ldr	r0, [r0, #0]
 800fad4:	b120      	cbz	r0, 800fae0 <rcl_wait_set_resize+0x1dc>
 800fad6:	4649      	mov	r1, r9
 800fad8:	47d8      	blx	fp
 800fada:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fade:	6027      	str	r7, [r4, #0]
 800fae0:	f8da 0008 	ldr.w	r0, [sl, #8]
 800fae4:	2800      	cmp	r0, #0
 800fae6:	f43f af51 	beq.w	800f98c <rcl_wait_set_resize+0x88>
 800faea:	4649      	mov	r1, r9
 800faec:	47d8      	blx	fp
 800faee:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800faf2:	2300      	movs	r3, #0
 800faf4:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800faf8:	e748      	b.n	800f98c <rcl_wait_set_resize+0x88>
 800fafa:	6820      	ldr	r0, [r4, #0]
 800fafc:	4649      	mov	r1, r9
 800fafe:	47d8      	blx	fp
 800fb00:	e9c4 7700 	strd	r7, r7, [r4]
 800fb04:	200a      	movs	r0, #10
 800fb06:	b003      	add	sp, #12
 800fb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800fb10:	68a0      	ldr	r0, [r4, #8]
 800fb12:	4642      	mov	r2, r8
 800fb14:	4649      	mov	r1, r9
 800fb16:	4798      	blx	r3
 800fb18:	60a0      	str	r0, [r4, #8]
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d0f2      	beq.n	800fb04 <rcl_wait_set_resize+0x200>
 800fb1e:	4639      	mov	r1, r7
 800fb20:	464a      	mov	r2, r9
 800fb22:	f003 fcf3 	bl	801350c <memset>
 800fb26:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fb2a:	60e5      	str	r5, [r4, #12]
 800fb2c:	2700      	movs	r7, #0
 800fb2e:	19ad      	adds	r5, r5, r6
 800fb30:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800fb34:	f8ca 7010 	str.w	r7, [sl, #16]
 800fb38:	f43f af42 	beq.w	800f9c0 <rcl_wait_set_resize+0xbc>
 800fb3c:	00ad      	lsls	r5, r5, #2
 800fb3e:	4642      	mov	r2, r8
 800fb40:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 800fb44:	f8da 0014 	ldr.w	r0, [sl, #20]
 800fb48:	4629      	mov	r1, r5
 800fb4a:	4798      	blx	r3
 800fb4c:	4680      	mov	r8, r0
 800fb4e:	f8ca 0014 	str.w	r0, [sl, #20]
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f000 8084 	beq.w	800fc60 <rcl_wait_set_resize+0x35c>
 800fb58:	462a      	mov	r2, r5
 800fb5a:	4639      	mov	r1, r7
 800fb5c:	f003 fcd6 	bl	801350c <memset>
 800fb60:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fb64:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800fb68:	e737      	b.n	800f9da <rcl_wait_set_resize+0xd6>
 800fb6a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800fb6e:	6920      	ldr	r0, [r4, #16]
 800fb70:	4642      	mov	r2, r8
 800fb72:	4649      	mov	r1, r9
 800fb74:	47b8      	blx	r7
 800fb76:	6120      	str	r0, [r4, #16]
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d0c3      	beq.n	800fb04 <rcl_wait_set_resize+0x200>
 800fb7c:	464a      	mov	r2, r9
 800fb7e:	4629      	mov	r1, r5
 800fb80:	f003 fcc4 	bl	801350c <memset>
 800fb84:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fb88:	6166      	str	r6, [r4, #20]
 800fb8a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 800fb8e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 800fb92:	e736      	b.n	800fa02 <rcl_wait_set_resize+0xfe>
 800fb94:	009e      	lsls	r6, r3, #2
 800fb96:	69a0      	ldr	r0, [r4, #24]
 800fb98:	4631      	mov	r1, r6
 800fb9a:	4642      	mov	r2, r8
 800fb9c:	47b8      	blx	r7
 800fb9e:	61a0      	str	r0, [r4, #24]
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0af      	beq.n	800fb04 <rcl_wait_set_resize+0x200>
 800fba4:	4632      	mov	r2, r6
 800fba6:	4629      	mov	r1, r5
 800fba8:	f003 fcb0 	bl	801350c <memset>
 800fbac:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbb2:	61e3      	str	r3, [r4, #28]
 800fbb4:	f8da 0020 	ldr.w	r0, [sl, #32]
 800fbb8:	f8ca 501c 	str.w	r5, [sl, #28]
 800fbbc:	4642      	mov	r2, r8
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	47b8      	blx	r7
 800fbc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbc4:	f8ca 0020 	str.w	r0, [sl, #32]
 800fbc8:	6a1f      	ldr	r7, [r3, #32]
 800fbca:	2f00      	cmp	r7, #0
 800fbcc:	d058      	beq.n	800fc80 <rcl_wait_set_resize+0x37c>
 800fbce:	4632      	mov	r2, r6
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	f003 fc9a 	bl	801350c <memset>
 800fbd8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fbdc:	e72b      	b.n	800fa36 <rcl_wait_set_resize+0x132>
 800fbde:	6a20      	ldr	r0, [r4, #32]
 800fbe0:	b128      	cbz	r0, 800fbee <rcl_wait_set_resize+0x2ea>
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	47c0      	blx	r8
 800fbe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbe8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fbec:	6223      	str	r3, [r4, #32]
 800fbee:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	f43f af4d 	beq.w	800fa92 <rcl_wait_set_resize+0x18e>
 800fbf8:	4639      	mov	r1, r7
 800fbfa:	47c0      	blx	r8
 800fbfc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fc00:	2300      	movs	r3, #0
 800fc02:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 800fc06:	e744      	b.n	800fa92 <rcl_wait_set_resize+0x18e>
 800fc08:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800fc0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fc0e:	4641      	mov	r1, r8
 800fc10:	4632      	mov	r2, r6
 800fc12:	47c8      	blx	r9
 800fc14:	62a0      	str	r0, [r4, #40]	; 0x28
 800fc16:	2800      	cmp	r0, #0
 800fc18:	f43f af74 	beq.w	800fb04 <rcl_wait_set_resize+0x200>
 800fc1c:	4642      	mov	r2, r8
 800fc1e:	4629      	mov	r1, r5
 800fc20:	f003 fc74 	bl	801350c <memset>
 800fc24:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800fc28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc2c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800fc30:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800fc34:	4632      	mov	r2, r6
 800fc36:	4641      	mov	r1, r8
 800fc38:	47c8      	blx	r9
 800fc3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc3c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800fc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc42:	b35b      	cbz	r3, 800fc9c <rcl_wait_set_resize+0x398>
 800fc44:	4642      	mov	r2, r8
 800fc46:	4618      	mov	r0, r3
 800fc48:	4629      	mov	r1, r5
 800fc4a:	f003 fc5f 	bl	801350c <memset>
 800fc4e:	4628      	mov	r0, r5
 800fc50:	b003      	add	sp, #12
 800fc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc56:	200b      	movs	r0, #11
 800fc58:	4770      	bx	lr
 800fc5a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fc5e:	e752      	b.n	800fb06 <rcl_wait_set_resize+0x202>
 800fc60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc62:	68a0      	ldr	r0, [r4, #8]
 800fc64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc66:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fc68:	4790      	blx	r2
 800fc6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc6c:	6920      	ldr	r0, [r4, #16]
 800fc6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc70:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fc72:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800fc76:	4790      	blx	r2
 800fc78:	e9c4 8804 	strd	r8, r8, [r4, #16]
 800fc7c:	200a      	movs	r0, #10
 800fc7e:	e742      	b.n	800fb06 <rcl_wait_set_resize+0x202>
 800fc80:	69a0      	ldr	r0, [r4, #24]
 800fc82:	4641      	mov	r1, r8
 800fc84:	47c8      	blx	r9
 800fc86:	e9c4 7706 	strd	r7, r7, [r4, #24]
 800fc8a:	200a      	movs	r0, #10
 800fc8c:	e73b      	b.n	800fb06 <rcl_wait_set_resize+0x202>
 800fc8e:	6a20      	ldr	r0, [r4, #32]
 800fc90:	4639      	mov	r1, r7
 800fc92:	47c0      	blx	r8
 800fc94:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800fc98:	200a      	movs	r0, #10
 800fc9a:	e734      	b.n	800fb06 <rcl_wait_set_resize+0x202>
 800fc9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	4631      	mov	r1, r6
 800fca2:	47b8      	blx	r7
 800fca4:	9b00      	ldr	r3, [sp, #0]
 800fca6:	200a      	movs	r0, #10
 800fca8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fcac:	e72b      	b.n	800fb06 <rcl_wait_set_resize+0x202>
 800fcae:	bf00      	nop

0800fcb0 <rcl_wait_set_init>:
 800fcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb4:	b084      	sub	sp, #16
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	a810      	add	r0, sp, #64	; 0x40
 800fcba:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800fcbe:	460f      	mov	r7, r1
 800fcc0:	4690      	mov	r8, r2
 800fcc2:	4699      	mov	r9, r3
 800fcc4:	f7fa fe38 	bl	800a938 <rcutils_allocator_is_valid>
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d06b      	beq.n	800fda4 <rcl_wait_set_init+0xf4>
 800fccc:	2c00      	cmp	r4, #0
 800fcce:	d069      	beq.n	800fda4 <rcl_wait_set_init+0xf4>
 800fcd0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fcd2:	b125      	cbz	r5, 800fcde <rcl_wait_set_init+0x2e>
 800fcd4:	2564      	movs	r5, #100	; 0x64
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	b004      	add	sp, #16
 800fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcde:	f1ba 0f00 	cmp.w	sl, #0
 800fce2:	d05f      	beq.n	800fda4 <rcl_wait_set_init+0xf4>
 800fce4:	4650      	mov	r0, sl
 800fce6:	f7fe fa63 	bl	800e1b0 <rcl_context_is_valid>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	d067      	beq.n	800fdbe <rcl_wait_set_init+0x10e>
 800fcee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcf0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fcf2:	205c      	movs	r0, #92	; 0x5c
 800fcf4:	4798      	blx	r3
 800fcf6:	6320      	str	r0, [r4, #48]	; 0x30
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d062      	beq.n	800fdc2 <rcl_wait_set_init+0x112>
 800fcfc:	225c      	movs	r2, #92	; 0x5c
 800fcfe:	4629      	mov	r1, r5
 800fd00:	f003 fc04 	bl	801350c <memset>
 800fd04:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800fd08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd0c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800fd0e:	f8dc e000 	ldr.w	lr, [ip]
 800fd12:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 800fd16:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 800fd1a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800fd1e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800fd22:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 800fd26:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 800fd2a:	60b5      	str	r5, [r6, #8]
 800fd2c:	6075      	str	r5, [r6, #4]
 800fd2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd32:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800fd36:	1899      	adds	r1, r3, r2
 800fd38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd3a:	f8da 0000 	ldr.w	r0, [sl]
 800fd3e:	f8cc e000 	str.w	lr, [ip]
 800fd42:	4419      	add	r1, r3
 800fd44:	4441      	add	r1, r8
 800fd46:	3028      	adds	r0, #40	; 0x28
 800fd48:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800fd4c:	f001 fcdc 	bl	8011708 <rmw_create_wait_set>
 800fd50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd52:	63f0      	str	r0, [r6, #60]	; 0x3c
 800fd54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fd56:	b350      	cbz	r0, 800fdae <rcl_wait_set_init+0xfe>
 800fd58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd5a:	9302      	str	r3, [sp, #8]
 800fd5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	4642      	mov	r2, r8
 800fd66:	464b      	mov	r3, r9
 800fd68:	4639      	mov	r1, r7
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f7ff fdca 	bl	800f904 <rcl_wait_set_resize>
 800fd70:	4605      	mov	r5, r0
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d0af      	beq.n	800fcd6 <rcl_wait_set_init+0x26>
 800fd76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd78:	bb2b      	cbnz	r3, 800fdc6 <rcl_wait_set_init+0x116>
 800fd7a:	2600      	movs	r6, #0
 800fd7c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800fd80:	9600      	str	r6, [sp, #0]
 800fd82:	4633      	mov	r3, r6
 800fd84:	4632      	mov	r2, r6
 800fd86:	4631      	mov	r1, r6
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f7ff fdbb 	bl	800f904 <rcl_wait_set_resize>
 800fd8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d0a0      	beq.n	800fcd6 <rcl_wait_set_init+0x26>
 800fd94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fd96:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800fd98:	4798      	blx	r3
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	6326      	str	r6, [r4, #48]	; 0x30
 800fd9e:	b004      	add	sp, #16
 800fda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda4:	250b      	movs	r5, #11
 800fda6:	4628      	mov	r0, r5
 800fda8:	b004      	add	sp, #16
 800fdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdae:	2501      	movs	r5, #1
 800fdb0:	f001 fcb4 	bl	801171c <rmw_destroy_wait_set>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	bf18      	it	ne
 800fdb8:	f44f 7561 	movne.w	r5, #900	; 0x384
 800fdbc:	e7dd      	b.n	800fd7a <rcl_wait_set_init+0xca>
 800fdbe:	2565      	movs	r5, #101	; 0x65
 800fdc0:	e789      	b.n	800fcd6 <rcl_wait_set_init+0x26>
 800fdc2:	250a      	movs	r5, #10
 800fdc4:	e787      	b.n	800fcd6 <rcl_wait_set_init+0x26>
 800fdc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fdc8:	e7f2      	b.n	800fdb0 <rcl_wait_set_init+0x100>
 800fdca:	bf00      	nop

0800fdcc <rcl_wait_set_add_guard_condition>:
 800fdcc:	b320      	cbz	r0, 800fe18 <rcl_wait_set_add_guard_condition+0x4c>
 800fdce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fdd0:	b570      	push	{r4, r5, r6, lr}
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	b1d3      	cbz	r3, 800fe0c <rcl_wait_set_add_guard_condition+0x40>
 800fdd6:	b319      	cbz	r1, 800fe20 <rcl_wait_set_add_guard_condition+0x54>
 800fdd8:	68dd      	ldr	r5, [r3, #12]
 800fdda:	68e0      	ldr	r0, [r4, #12]
 800fddc:	4285      	cmp	r5, r0
 800fdde:	d218      	bcs.n	800fe12 <rcl_wait_set_add_guard_condition+0x46>
 800fde0:	68a0      	ldr	r0, [r4, #8]
 800fde2:	1c6e      	adds	r6, r5, #1
 800fde4:	60de      	str	r6, [r3, #12]
 800fde6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fdea:	b102      	cbz	r2, 800fdee <rcl_wait_set_add_guard_condition+0x22>
 800fdec:	6015      	str	r5, [r2, #0]
 800fdee:	4608      	mov	r0, r1
 800fdf0:	f003 f9c8 	bl	8013184 <rcl_guard_condition_get_rmw_handle>
 800fdf4:	b190      	cbz	r0, 800fe1c <rcl_wait_set_add_guard_condition+0x50>
 800fdf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fdf8:	6842      	ldr	r2, [r0, #4]
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe02:	6913      	ldr	r3, [r2, #16]
 800fe04:	3301      	adds	r3, #1
 800fe06:	6113      	str	r3, [r2, #16]
 800fe08:	2000      	movs	r0, #0
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fe10:	bd70      	pop	{r4, r5, r6, pc}
 800fe12:	f240 3086 	movw	r0, #902	; 0x386
 800fe16:	bd70      	pop	{r4, r5, r6, pc}
 800fe18:	200b      	movs	r0, #11
 800fe1a:	4770      	bx	lr
 800fe1c:	2001      	movs	r0, #1
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	200b      	movs	r0, #11
 800fe22:	bd70      	pop	{r4, r5, r6, pc}

0800fe24 <rcl_wait_set_add_timer>:
 800fe24:	b340      	cbz	r0, 800fe78 <rcl_wait_set_add_timer+0x54>
 800fe26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	b1f3      	cbz	r3, 800fe6c <rcl_wait_set_add_timer+0x48>
 800fe2e:	b329      	cbz	r1, 800fe7c <rcl_wait_set_add_timer+0x58>
 800fe30:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fe32:	6965      	ldr	r5, [r4, #20]
 800fe34:	42a8      	cmp	r0, r5
 800fe36:	d21c      	bcs.n	800fe72 <rcl_wait_set_add_timer+0x4e>
 800fe38:	6925      	ldr	r5, [r4, #16]
 800fe3a:	1c46      	adds	r6, r0, #1
 800fe3c:	641e      	str	r6, [r3, #64]	; 0x40
 800fe3e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800fe42:	b102      	cbz	r2, 800fe46 <rcl_wait_set_add_timer+0x22>
 800fe44:	6010      	str	r0, [r2, #0]
 800fe46:	4608      	mov	r0, r1
 800fe48:	f7ff faa4 	bl	800f394 <rcl_timer_get_guard_condition>
 800fe4c:	b168      	cbz	r0, 800fe6a <rcl_wait_set_add_timer+0x46>
 800fe4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe50:	68e3      	ldr	r3, [r4, #12]
 800fe52:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800fe54:	3b01      	subs	r3, #1
 800fe56:	441d      	add	r5, r3
 800fe58:	f003 f994 	bl	8013184 <rcl_guard_condition_get_rmw_handle>
 800fe5c:	b180      	cbz	r0, 800fe80 <rcl_wait_set_add_timer+0x5c>
 800fe5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fe60:	6842      	ldr	r2, [r0, #4]
 800fe62:	695b      	ldr	r3, [r3, #20]
 800fe64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe68:	2000      	movs	r0, #0
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
 800fe6c:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fe70:	bd70      	pop	{r4, r5, r6, pc}
 800fe72:	f240 3086 	movw	r0, #902	; 0x386
 800fe76:	bd70      	pop	{r4, r5, r6, pc}
 800fe78:	200b      	movs	r0, #11
 800fe7a:	4770      	bx	lr
 800fe7c:	200b      	movs	r0, #11
 800fe7e:	bd70      	pop	{r4, r5, r6, pc}
 800fe80:	2001      	movs	r0, #1
 800fe82:	bd70      	pop	{r4, r5, r6, pc}

0800fe84 <rcl_wait_set_add_client>:
 800fe84:	b320      	cbz	r0, 800fed0 <rcl_wait_set_add_client+0x4c>
 800fe86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	b1d3      	cbz	r3, 800fec4 <rcl_wait_set_add_client+0x40>
 800fe8e:	b319      	cbz	r1, 800fed8 <rcl_wait_set_add_client+0x54>
 800fe90:	699d      	ldr	r5, [r3, #24]
 800fe92:	69e0      	ldr	r0, [r4, #28]
 800fe94:	4285      	cmp	r5, r0
 800fe96:	d218      	bcs.n	800feca <rcl_wait_set_add_client+0x46>
 800fe98:	69a0      	ldr	r0, [r4, #24]
 800fe9a:	1c6e      	adds	r6, r5, #1
 800fe9c:	619e      	str	r6, [r3, #24]
 800fe9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fea2:	b102      	cbz	r2, 800fea6 <rcl_wait_set_add_client+0x22>
 800fea4:	6015      	str	r5, [r2, #0]
 800fea6:	4608      	mov	r0, r1
 800fea8:	f7fe f922 	bl	800e0f0 <rcl_client_get_rmw_handle>
 800feac:	b190      	cbz	r0, 800fed4 <rcl_wait_set_add_client+0x50>
 800feae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800feb0:	6842      	ldr	r2, [r0, #4]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800feba:	69d3      	ldr	r3, [r2, #28]
 800febc:	3301      	adds	r3, #1
 800febe:	61d3      	str	r3, [r2, #28]
 800fec0:	2000      	movs	r0, #0
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
 800fec4:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fec8:	bd70      	pop	{r4, r5, r6, pc}
 800feca:	f240 3086 	movw	r0, #902	; 0x386
 800fece:	bd70      	pop	{r4, r5, r6, pc}
 800fed0:	200b      	movs	r0, #11
 800fed2:	4770      	bx	lr
 800fed4:	2001      	movs	r0, #1
 800fed6:	bd70      	pop	{r4, r5, r6, pc}
 800fed8:	200b      	movs	r0, #11
 800feda:	bd70      	pop	{r4, r5, r6, pc}

0800fedc <rcl_wait_set_add_service>:
 800fedc:	b320      	cbz	r0, 800ff28 <rcl_wait_set_add_service+0x4c>
 800fede:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	4604      	mov	r4, r0
 800fee4:	b1d3      	cbz	r3, 800ff1c <rcl_wait_set_add_service+0x40>
 800fee6:	b319      	cbz	r1, 800ff30 <rcl_wait_set_add_service+0x54>
 800fee8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800feea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800feec:	4285      	cmp	r5, r0
 800feee:	d218      	bcs.n	800ff22 <rcl_wait_set_add_service+0x46>
 800fef0:	6a20      	ldr	r0, [r4, #32]
 800fef2:	1c6e      	adds	r6, r5, #1
 800fef4:	625e      	str	r6, [r3, #36]	; 0x24
 800fef6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fefa:	b102      	cbz	r2, 800fefe <rcl_wait_set_add_service+0x22>
 800fefc:	6015      	str	r5, [r2, #0]
 800fefe:	4608      	mov	r0, r1
 800ff00:	f7ff f84e 	bl	800efa0 <rcl_service_get_rmw_handle>
 800ff04:	b190      	cbz	r0, 800ff2c <rcl_wait_set_add_service+0x50>
 800ff06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff08:	6842      	ldr	r2, [r0, #4]
 800ff0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff0c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ff12:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800ff14:	3301      	adds	r3, #1
 800ff16:	6293      	str	r3, [r2, #40]	; 0x28
 800ff18:	2000      	movs	r0, #0
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
 800ff1c:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ff20:	bd70      	pop	{r4, r5, r6, pc}
 800ff22:	f240 3086 	movw	r0, #902	; 0x386
 800ff26:	bd70      	pop	{r4, r5, r6, pc}
 800ff28:	200b      	movs	r0, #11
 800ff2a:	4770      	bx	lr
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	200b      	movs	r0, #11
 800ff32:	bd70      	pop	{r4, r5, r6, pc}
 800ff34:	0000      	movs	r0, r0
	...

0800ff38 <rcl_wait>:
 800ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3c:	b08f      	sub	sp, #60	; 0x3c
 800ff3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff42:	2800      	cmp	r0, #0
 800ff44:	f000 814c 	beq.w	80101e0 <rcl_wait+0x2a8>
 800ff48:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	2d00      	cmp	r5, #0
 800ff4e:	f000 80bc 	beq.w	80100ca <rcl_wait+0x192>
 800ff52:	6843      	ldr	r3, [r0, #4]
 800ff54:	b973      	cbnz	r3, 800ff74 <rcl_wait+0x3c>
 800ff56:	68e3      	ldr	r3, [r4, #12]
 800ff58:	b963      	cbnz	r3, 800ff74 <rcl_wait+0x3c>
 800ff5a:	6963      	ldr	r3, [r4, #20]
 800ff5c:	b953      	cbnz	r3, 800ff74 <rcl_wait+0x3c>
 800ff5e:	69e3      	ldr	r3, [r4, #28]
 800ff60:	b943      	cbnz	r3, 800ff74 <rcl_wait+0x3c>
 800ff62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff64:	b933      	cbnz	r3, 800ff74 <rcl_wait+0x3c>
 800ff66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff68:	b923      	cbnz	r3, 800ff74 <rcl_wait+0x3c>
 800ff6a:	f240 3085 	movw	r0, #901	; 0x385
 800ff6e:	b00f      	add	sp, #60	; 0x3c
 800ff70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff78:	2a01      	cmp	r2, #1
 800ff7a:	f173 0300 	sbcs.w	r3, r3, #0
 800ff7e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ff80:	db56      	blt.n	8010030 <rcl_wait+0xf8>
 800ff82:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800ff86:	2900      	cmp	r1, #0
 800ff88:	f000 8149 	beq.w	801021e <rcl_wait+0x2e6>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	9307      	str	r3, [sp, #28]
 800ff90:	469b      	mov	fp, r3
 800ff92:	f04f 0800 	mov.w	r8, #0
 800ff96:	f04f 0900 	mov.w	r9, #0
 800ff9a:	e00d      	b.n	800ffb8 <rcl_wait+0x80>
 800ff9c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ff9e:	6922      	ldr	r2, [r4, #16]
 800ffa0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ffa2:	f842 000a 	str.w	r0, [r2, sl]
 800ffa6:	f118 0801 	adds.w	r8, r8, #1
 800ffaa:	f149 0900 	adc.w	r9, r9, #0
 800ffae:	2300      	movs	r3, #0
 800ffb0:	4599      	cmp	r9, r3
 800ffb2:	bf08      	it	eq
 800ffb4:	4588      	cmpeq	r8, r1
 800ffb6:	d243      	bcs.n	8010040 <rcl_wait+0x108>
 800ffb8:	6922      	ldr	r2, [r4, #16]
 800ffba:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800ffbe:	f852 000a 	ldr.w	r0, [r2, sl]
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d0ef      	beq.n	800ffa6 <rcl_wait+0x6e>
 800ffc6:	68e2      	ldr	r2, [r4, #12]
 800ffc8:	6969      	ldr	r1, [r5, #20]
 800ffca:	4442      	add	r2, r8
 800ffcc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800ffd0:	b13b      	cbz	r3, 800ffe2 <rcl_wait+0xaa>
 800ffd2:	692a      	ldr	r2, [r5, #16]
 800ffd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ffd8:	6921      	ldr	r1, [r4, #16]
 800ffda:	3201      	adds	r2, #1
 800ffdc:	f851 000a 	ldr.w	r0, [r1, sl]
 800ffe0:	612a      	str	r2, [r5, #16]
 800ffe2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800ffe6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 800ffea:	f7ff f9c1 	bl	800f370 <rcl_timer_is_canceled>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d1bd      	bne.n	800ff6e <rcl_wait+0x36>
 800fff2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800fff6:	2a00      	cmp	r2, #0
 800fff8:	d1d0      	bne.n	800ff9c <rcl_wait+0x64>
 800fffa:	6922      	ldr	r2, [r4, #16]
 800fffc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010000:	f852 000a 	ldr.w	r0, [r2, sl]
 8010004:	a90a      	add	r1, sp, #40	; 0x28
 8010006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801000a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801000e:	f7ff f98b 	bl	800f328 <rcl_timer_get_time_until_next_call>
 8010012:	2800      	cmp	r0, #0
 8010014:	d1ab      	bne.n	800ff6e <rcl_wait+0x36>
 8010016:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801001a:	42b2      	cmp	r2, r6
 801001c:	eb73 0107 	sbcs.w	r1, r3, r7
 8010020:	da03      	bge.n	801002a <rcl_wait+0xf2>
 8010022:	461f      	mov	r7, r3
 8010024:	2301      	movs	r3, #1
 8010026:	4616      	mov	r6, r2
 8010028:	9307      	str	r3, [sp, #28]
 801002a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801002c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801002e:	e7ba      	b.n	800ffa6 <rcl_wait+0x6e>
 8010030:	2900      	cmp	r1, #0
 8010032:	f000 80de 	beq.w	80101f2 <rcl_wait+0x2ba>
 8010036:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801003a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801003e:	e7a5      	b.n	800ff8c <rcl_wait+0x54>
 8010040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010044:	4313      	orrs	r3, r2
 8010046:	d145      	bne.n	80100d4 <rcl_wait+0x19c>
 8010048:	2300      	movs	r3, #0
 801004a:	2200      	movs	r2, #0
 801004c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010050:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010054:	ab0a      	add	r3, sp, #40	; 0x28
 8010056:	9302      	str	r3, [sp, #8]
 8010058:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801005a:	9301      	str	r3, [sp, #4]
 801005c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8010066:	f105 031c 	add.w	r3, r5, #28
 801006a:	f105 0110 	add.w	r1, r5, #16
 801006e:	1d28      	adds	r0, r5, #4
 8010070:	f001 f9ca 	bl	8011408 <rmw_wait>
 8010074:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010078:	4680      	mov	r8, r0
 801007a:	b30a      	cbz	r2, 80100c0 <rcl_wait+0x188>
 801007c:	2500      	movs	r5, #0
 801007e:	462f      	mov	r7, r5
 8010080:	e004      	b.n	801008c <rcl_wait+0x154>
 8010082:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010086:	3501      	adds	r5, #1
 8010088:	42aa      	cmp	r2, r5
 801008a:	d919      	bls.n	80100c0 <rcl_wait+0x188>
 801008c:	6922      	ldr	r2, [r4, #16]
 801008e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8010092:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8010096:	00ae      	lsls	r6, r5, #2
 8010098:	2800      	cmp	r0, #0
 801009a:	d0f3      	beq.n	8010084 <rcl_wait+0x14c>
 801009c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 80100a0:	f7ff f90a 	bl	800f2b8 <rcl_timer_is_ready>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	f47f af62 	bne.w	800ff6e <rcl_wait+0x36>
 80100aa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80100ae:	2a00      	cmp	r2, #0
 80100b0:	d1e7      	bne.n	8010082 <rcl_wait+0x14a>
 80100b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80100b4:	6921      	ldr	r1, [r4, #16]
 80100b6:	518a      	str	r2, [r1, r6]
 80100b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100ba:	3501      	adds	r5, #1
 80100bc:	42aa      	cmp	r2, r5
 80100be:	d8e5      	bhi.n	801008c <rcl_wait+0x154>
 80100c0:	f038 0002 	bics.w	r0, r8, #2
 80100c4:	d029      	beq.n	801011a <rcl_wait+0x1e2>
 80100c6:	2001      	movs	r0, #1
 80100c8:	e751      	b.n	800ff6e <rcl_wait+0x36>
 80100ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 80100ce:	b00f      	add	sp, #60	; 0x3c
 80100d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100d8:	2a01      	cmp	r2, #1
 80100da:	f173 0300 	sbcs.w	r3, r3, #0
 80100de:	f2c0 8083 	blt.w	80101e8 <rcl_wait+0x2b0>
 80100e2:	2e00      	cmp	r6, #0
 80100e4:	f177 0300 	sbcs.w	r3, r7, #0
 80100e8:	bfbc      	itt	lt
 80100ea:	2600      	movlt	r6, #0
 80100ec:	2700      	movlt	r7, #0
 80100ee:	a34e      	add	r3, pc, #312	; (adr r3, 8010228 <rcl_wait+0x2f0>)
 80100f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f4:	4630      	mov	r0, r6
 80100f6:	4639      	mov	r1, r7
 80100f8:	f7f0 f962 	bl	80003c0 <__aeabi_ldivmod>
 80100fc:	a34a      	add	r3, pc, #296	; (adr r3, 8010228 <rcl_wait+0x2f0>)
 80100fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010102:	4680      	mov	r8, r0
 8010104:	4689      	mov	r9, r1
 8010106:	4630      	mov	r0, r6
 8010108:	4639      	mov	r1, r7
 801010a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801010e:	f7f0 f957 	bl	80003c0 <__aeabi_ldivmod>
 8010112:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010116:	ab0a      	add	r3, sp, #40	; 0x28
 8010118:	e79d      	b.n	8010056 <rcl_wait+0x11e>
 801011a:	6866      	ldr	r6, [r4, #4]
 801011c:	4602      	mov	r2, r0
 801011e:	b91e      	cbnz	r6, 8010128 <rcl_wait+0x1f0>
 8010120:	e00d      	b.n	801013e <rcl_wait+0x206>
 8010122:	3201      	adds	r2, #1
 8010124:	42b2      	cmp	r2, r6
 8010126:	d00a      	beq.n	801013e <rcl_wait+0x206>
 8010128:	6899      	ldr	r1, [r3, #8]
 801012a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801012e:	2900      	cmp	r1, #0
 8010130:	d1f7      	bne.n	8010122 <rcl_wait+0x1ea>
 8010132:	6825      	ldr	r5, [r4, #0]
 8010134:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8010138:	3201      	adds	r2, #1
 801013a:	42b2      	cmp	r2, r6
 801013c:	d1f4      	bne.n	8010128 <rcl_wait+0x1f0>
 801013e:	68e6      	ldr	r6, [r4, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	b91e      	cbnz	r6, 801014c <rcl_wait+0x214>
 8010144:	e00d      	b.n	8010162 <rcl_wait+0x22a>
 8010146:	3201      	adds	r2, #1
 8010148:	42b2      	cmp	r2, r6
 801014a:	d00a      	beq.n	8010162 <rcl_wait+0x22a>
 801014c:	6959      	ldr	r1, [r3, #20]
 801014e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010152:	2900      	cmp	r1, #0
 8010154:	d1f7      	bne.n	8010146 <rcl_wait+0x20e>
 8010156:	68a5      	ldr	r5, [r4, #8]
 8010158:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801015c:	3201      	adds	r2, #1
 801015e:	42b2      	cmp	r2, r6
 8010160:	d1f4      	bne.n	801014c <rcl_wait+0x214>
 8010162:	69e6      	ldr	r6, [r4, #28]
 8010164:	2200      	movs	r2, #0
 8010166:	b91e      	cbnz	r6, 8010170 <rcl_wait+0x238>
 8010168:	e00d      	b.n	8010186 <rcl_wait+0x24e>
 801016a:	3201      	adds	r2, #1
 801016c:	42b2      	cmp	r2, r6
 801016e:	d00a      	beq.n	8010186 <rcl_wait+0x24e>
 8010170:	6a19      	ldr	r1, [r3, #32]
 8010172:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010176:	2900      	cmp	r1, #0
 8010178:	d1f7      	bne.n	801016a <rcl_wait+0x232>
 801017a:	69a5      	ldr	r5, [r4, #24]
 801017c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8010180:	3201      	adds	r2, #1
 8010182:	42b2      	cmp	r2, r6
 8010184:	d1f4      	bne.n	8010170 <rcl_wait+0x238>
 8010186:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010188:	2200      	movs	r2, #0
 801018a:	b91e      	cbnz	r6, 8010194 <rcl_wait+0x25c>
 801018c:	e00d      	b.n	80101aa <rcl_wait+0x272>
 801018e:	3201      	adds	r2, #1
 8010190:	4296      	cmp	r6, r2
 8010192:	d00a      	beq.n	80101aa <rcl_wait+0x272>
 8010194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010196:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801019a:	2900      	cmp	r1, #0
 801019c:	d1f7      	bne.n	801018e <rcl_wait+0x256>
 801019e:	6a25      	ldr	r5, [r4, #32]
 80101a0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80101a4:	3201      	adds	r2, #1
 80101a6:	4296      	cmp	r6, r2
 80101a8:	d1f4      	bne.n	8010194 <rcl_wait+0x25c>
 80101aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101ac:	2200      	movs	r2, #0
 80101ae:	b91e      	cbnz	r6, 80101b8 <rcl_wait+0x280>
 80101b0:	e00d      	b.n	80101ce <rcl_wait+0x296>
 80101b2:	3201      	adds	r2, #1
 80101b4:	42b2      	cmp	r2, r6
 80101b6:	d00a      	beq.n	80101ce <rcl_wait+0x296>
 80101b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80101ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80101be:	2900      	cmp	r1, #0
 80101c0:	d1f7      	bne.n	80101b2 <rcl_wait+0x27a>
 80101c2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80101c4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80101c8:	3201      	adds	r2, #1
 80101ca:	42b2      	cmp	r2, r6
 80101cc:	d1f4      	bne.n	80101b8 <rcl_wait+0x280>
 80101ce:	f1b8 0f02 	cmp.w	r8, #2
 80101d2:	f47f aecc 	bne.w	800ff6e <rcl_wait+0x36>
 80101d6:	9b07      	ldr	r3, [sp, #28]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	bf08      	it	eq
 80101dc:	2002      	moveq	r0, #2
 80101de:	e6c6      	b.n	800ff6e <rcl_wait+0x36>
 80101e0:	200b      	movs	r0, #11
 80101e2:	b00f      	add	sp, #60	; 0x3c
 80101e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e8:	9b07      	ldr	r3, [sp, #28]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f47f af79 	bne.w	80100e2 <rcl_wait+0x1aa>
 80101f0:	e731      	b.n	8010056 <rcl_wait+0x11e>
 80101f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101f6:	4313      	orrs	r3, r2
 80101f8:	bf08      	it	eq
 80101fa:	9107      	streq	r1, [sp, #28]
 80101fc:	f43f af24 	beq.w	8010048 <rcl_wait+0x110>
 8010200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010204:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010208:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801020c:	2a01      	cmp	r2, #1
 801020e:	f173 0300 	sbcs.w	r3, r3, #0
 8010212:	f04f 0300 	mov.w	r3, #0
 8010216:	9307      	str	r3, [sp, #28]
 8010218:	f6bf af63 	bge.w	80100e2 <rcl_wait+0x1aa>
 801021c:	e71b      	b.n	8010056 <rcl_wait+0x11e>
 801021e:	4632      	mov	r2, r6
 8010220:	463b      	mov	r3, r7
 8010222:	e7f3      	b.n	801020c <rcl_wait+0x2d4>
 8010224:	f3af 8000 	nop.w
 8010228:	3b9aca00 	.word	0x3b9aca00
 801022c:	00000000 	.word	0x00000000

08010230 <__atomic_load_8>:
 8010230:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010234:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8010238:	4b14      	ldr	r3, [pc, #80]	; (801028c <__atomic_load_8+0x5c>)
 801023a:	4a15      	ldr	r2, [pc, #84]	; (8010290 <__atomic_load_8+0x60>)
 801023c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010240:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010244:	fb03 f301 	mul.w	r3, r3, r1
 8010248:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 801024c:	fba2 1203 	umull	r1, r2, r2, r3
 8010250:	0912      	lsrs	r2, r2, #4
 8010252:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8010256:	b430      	push	{r4, r5}
 8010258:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 801025c:	4c0d      	ldr	r4, [pc, #52]	; (8010294 <__atomic_load_8+0x64>)
 801025e:	1a9b      	subs	r3, r3, r2
 8010260:	18e1      	adds	r1, r4, r3
 8010262:	f04f 0501 	mov.w	r5, #1
 8010266:	e8d1 2f4f 	ldrexb	r2, [r1]
 801026a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 801026e:	f1bc 0f00 	cmp.w	ip, #0
 8010272:	d1f8      	bne.n	8010266 <__atomic_load_8+0x36>
 8010274:	f3bf 8f5b 	dmb	ish
 8010278:	b2d2      	uxtb	r2, r2
 801027a:	2a00      	cmp	r2, #0
 801027c:	d1f3      	bne.n	8010266 <__atomic_load_8+0x36>
 801027e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010282:	f3bf 8f5b 	dmb	ish
 8010286:	54e2      	strb	r2, [r4, r3]
 8010288:	bc30      	pop	{r4, r5}
 801028a:	4770      	bx	lr
 801028c:	27d4eb2d 	.word	0x27d4eb2d
 8010290:	b21642c9 	.word	0xb21642c9
 8010294:	20009104 	.word	0x20009104

08010298 <__atomic_store_8>:
 8010298:	b4f0      	push	{r4, r5, r6, r7}
 801029a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 801029e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80102a2:	4914      	ldr	r1, [pc, #80]	; (80102f4 <__atomic_store_8+0x5c>)
 80102a4:	4c14      	ldr	r4, [pc, #80]	; (80102f8 <__atomic_store_8+0x60>)
 80102a6:	4e15      	ldr	r6, [pc, #84]	; (80102fc <__atomic_store_8+0x64>)
 80102a8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80102ac:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80102b0:	fb01 f105 	mul.w	r1, r1, r5
 80102b4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80102b8:	fba4 5401 	umull	r5, r4, r4, r1
 80102bc:	0924      	lsrs	r4, r4, #4
 80102be:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80102c2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80102c6:	1b09      	subs	r1, r1, r4
 80102c8:	1875      	adds	r5, r6, r1
 80102ca:	f04f 0701 	mov.w	r7, #1
 80102ce:	e8d5 4f4f 	ldrexb	r4, [r5]
 80102d2:	e8c5 7f4c 	strexb	ip, r7, [r5]
 80102d6:	f1bc 0f00 	cmp.w	ip, #0
 80102da:	d1f8      	bne.n	80102ce <__atomic_store_8+0x36>
 80102dc:	f3bf 8f5b 	dmb	ish
 80102e0:	b2e4      	uxtb	r4, r4
 80102e2:	2c00      	cmp	r4, #0
 80102e4:	d1f3      	bne.n	80102ce <__atomic_store_8+0x36>
 80102e6:	e9c0 2300 	strd	r2, r3, [r0]
 80102ea:	f3bf 8f5b 	dmb	ish
 80102ee:	5474      	strb	r4, [r6, r1]
 80102f0:	bcf0      	pop	{r4, r5, r6, r7}
 80102f2:	4770      	bx	lr
 80102f4:	27d4eb2d 	.word	0x27d4eb2d
 80102f8:	b21642c9 	.word	0xb21642c9
 80102fc:	20009104 	.word	0x20009104

08010300 <__atomic_exchange_8>:
 8010300:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8010304:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8010308:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801030c:	4c16      	ldr	r4, [pc, #88]	; (8010368 <__atomic_exchange_8+0x68>)
 801030e:	4917      	ldr	r1, [pc, #92]	; (801036c <__atomic_exchange_8+0x6c>)
 8010310:	4e17      	ldr	r6, [pc, #92]	; (8010370 <__atomic_exchange_8+0x70>)
 8010312:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8010316:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 801031a:	fb04 f505 	mul.w	r5, r4, r5
 801031e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8010322:	fba1 4105 	umull	r4, r1, r1, r5
 8010326:	0909      	lsrs	r1, r1, #4
 8010328:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801032c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8010330:	1a6c      	subs	r4, r5, r1
 8010332:	1931      	adds	r1, r6, r4
 8010334:	f04f 0701 	mov.w	r7, #1
 8010338:	e8d1 5f4f 	ldrexb	r5, [r1]
 801033c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8010340:	f1bc 0f00 	cmp.w	ip, #0
 8010344:	d1f8      	bne.n	8010338 <__atomic_exchange_8+0x38>
 8010346:	f3bf 8f5b 	dmb	ish
 801034a:	b2ed      	uxtb	r5, r5
 801034c:	2d00      	cmp	r5, #0
 801034e:	d1f3      	bne.n	8010338 <__atomic_exchange_8+0x38>
 8010350:	e9d0 8900 	ldrd	r8, r9, [r0]
 8010354:	e9c0 2300 	strd	r2, r3, [r0]
 8010358:	f3bf 8f5b 	dmb	ish
 801035c:	5535      	strb	r5, [r6, r4]
 801035e:	4640      	mov	r0, r8
 8010360:	4649      	mov	r1, r9
 8010362:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8010366:	4770      	bx	lr
 8010368:	27d4eb2d 	.word	0x27d4eb2d
 801036c:	b21642c9 	.word	0xb21642c9
 8010370:	20009104 	.word	0x20009104

08010374 <rcutils_is_directory>:
 8010374:	2000      	movs	r0, #0
 8010376:	4770      	bx	lr

08010378 <rcutils_join_path>:
 8010378:	b082      	sub	sp, #8
 801037a:	e88d 000c 	stmia.w	sp, {r2, r3}
 801037e:	2000      	movs	r0, #0
 8010380:	b002      	add	sp, #8
 8010382:	4770      	bx	lr

08010384 <rcutils_to_native_path>:
 8010384:	b084      	sub	sp, #16
 8010386:	a801      	add	r0, sp, #4
 8010388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801038c:	b004      	add	sp, #16
 801038e:	2000      	movs	r0, #0
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop

08010394 <rcutils_format_string_limit>:
 8010394:	b40f      	push	{r0, r1, r2, r3}
 8010396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010398:	b083      	sub	sp, #12
 801039a:	ac08      	add	r4, sp, #32
 801039c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801039e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80103a2:	b34e      	cbz	r6, 80103f8 <rcutils_format_string_limit+0x64>
 80103a4:	a808      	add	r0, sp, #32
 80103a6:	f7fa fac7 	bl	800a938 <rcutils_allocator_is_valid>
 80103aa:	b328      	cbz	r0, 80103f8 <rcutils_format_string_limit+0x64>
 80103ac:	2100      	movs	r1, #0
 80103ae:	ab0f      	add	r3, sp, #60	; 0x3c
 80103b0:	4608      	mov	r0, r1
 80103b2:	4632      	mov	r2, r6
 80103b4:	e9cd 3300 	strd	r3, r3, [sp]
 80103b8:	f000 f904 	bl	80105c4 <rcutils_vsnprintf>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	4605      	mov	r5, r0
 80103c0:	d01a      	beq.n	80103f8 <rcutils_format_string_limit+0x64>
 80103c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80103c6:	1c47      	adds	r7, r0, #1
 80103c8:	429f      	cmp	r7, r3
 80103ca:	bf84      	itt	hi
 80103cc:	461f      	movhi	r7, r3
 80103ce:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80103d2:	4638      	mov	r0, r7
 80103d4:	9b08      	ldr	r3, [sp, #32]
 80103d6:	4798      	blx	r3
 80103d8:	4604      	mov	r4, r0
 80103da:	b168      	cbz	r0, 80103f8 <rcutils_format_string_limit+0x64>
 80103dc:	9b01      	ldr	r3, [sp, #4]
 80103de:	4632      	mov	r2, r6
 80103e0:	4639      	mov	r1, r7
 80103e2:	f000 f8ef 	bl	80105c4 <rcutils_vsnprintf>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	db02      	blt.n	80103f0 <rcutils_format_string_limit+0x5c>
 80103ea:	2300      	movs	r3, #0
 80103ec:	5563      	strb	r3, [r4, r5]
 80103ee:	e004      	b.n	80103fa <rcutils_format_string_limit+0x66>
 80103f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80103f4:	4620      	mov	r0, r4
 80103f6:	4798      	blx	r3
 80103f8:	2400      	movs	r4, #0
 80103fa:	4620      	mov	r0, r4
 80103fc:	b003      	add	sp, #12
 80103fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010402:	b004      	add	sp, #16
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop

08010408 <rcutils_get_env>:
 8010408:	b168      	cbz	r0, 8010426 <rcutils_get_env+0x1e>
 801040a:	b510      	push	{r4, lr}
 801040c:	460c      	mov	r4, r1
 801040e:	b129      	cbz	r1, 801041c <rcutils_get_env+0x14>
 8010410:	f002 ffd8 	bl	80133c4 <getenv>
 8010414:	b120      	cbz	r0, 8010420 <rcutils_get_env+0x18>
 8010416:	6020      	str	r0, [r4, #0]
 8010418:	2000      	movs	r0, #0
 801041a:	bd10      	pop	{r4, pc}
 801041c:	4803      	ldr	r0, [pc, #12]	; (801042c <rcutils_get_env+0x24>)
 801041e:	bd10      	pop	{r4, pc}
 8010420:	4b03      	ldr	r3, [pc, #12]	; (8010430 <rcutils_get_env+0x28>)
 8010422:	6023      	str	r3, [r4, #0]
 8010424:	bd10      	pop	{r4, pc}
 8010426:	4803      	ldr	r0, [pc, #12]	; (8010434 <rcutils_get_env+0x2c>)
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop
 801042c:	08015094 	.word	0x08015094
 8010430:	080151b8 	.word	0x080151b8
 8010434:	08015078 	.word	0x08015078

08010438 <rcutils_repl_str>:
 8010438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043c:	ed2d 8b02 	vpush	{d8}
 8010440:	b087      	sub	sp, #28
 8010442:	4680      	mov	r8, r0
 8010444:	4608      	mov	r0, r1
 8010446:	f8cd 8000 	str.w	r8, [sp]
 801044a:	ee08 2a10 	vmov	s16, r2
 801044e:	468a      	mov	sl, r1
 8010450:	4699      	mov	r9, r3
 8010452:	f7ef fee7 	bl	8000224 <strlen>
 8010456:	2600      	movs	r6, #0
 8010458:	4647      	mov	r7, r8
 801045a:	9001      	str	r0, [sp, #4]
 801045c:	46b3      	mov	fp, r6
 801045e:	2510      	movs	r5, #16
 8010460:	46b0      	mov	r8, r6
 8010462:	e01d      	b.n	80104a0 <rcutils_repl_str+0x68>
 8010464:	f10b 0b01 	add.w	fp, fp, #1
 8010468:	455e      	cmp	r6, fp
 801046a:	d211      	bcs.n	8010490 <rcutils_repl_str+0x58>
 801046c:	442e      	add	r6, r5
 801046e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010472:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010476:	00b1      	lsls	r1, r6, #2
 8010478:	4798      	blx	r3
 801047a:	2800      	cmp	r0, #0
 801047c:	f000 8084 	beq.w	8010588 <rcutils_repl_str+0x150>
 8010480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010484:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8010488:	bf28      	it	cs
 801048a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801048e:	4680      	mov	r8, r0
 8010490:	9a00      	ldr	r2, [sp, #0]
 8010492:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010496:	1aa2      	subs	r2, r4, r2
 8010498:	f843 2c04 	str.w	r2, [r3, #-4]
 801049c:	9b01      	ldr	r3, [sp, #4]
 801049e:	18e7      	adds	r7, r4, r3
 80104a0:	4651      	mov	r1, sl
 80104a2:	4638      	mov	r0, r7
 80104a4:	f003 fa29 	bl	80138fa <strstr>
 80104a8:	4604      	mov	r4, r0
 80104aa:	4640      	mov	r0, r8
 80104ac:	2c00      	cmp	r4, #0
 80104ae:	d1d9      	bne.n	8010464 <rcutils_repl_str+0x2c>
 80104b0:	46b8      	mov	r8, r7
 80104b2:	4607      	mov	r7, r0
 80104b4:	4640      	mov	r0, r8
 80104b6:	f7ef feb5 	bl	8000224 <strlen>
 80104ba:	9b00      	ldr	r3, [sp, #0]
 80104bc:	eba8 0303 	sub.w	r3, r8, r3
 80104c0:	181d      	adds	r5, r3, r0
 80104c2:	9504      	str	r5, [sp, #16]
 80104c4:	f1bb 0f00 	cmp.w	fp, #0
 80104c8:	d03d      	beq.n	8010546 <rcutils_repl_str+0x10e>
 80104ca:	ee18 0a10 	vmov	r0, s16
 80104ce:	f7ef fea9 	bl	8000224 <strlen>
 80104d2:	9b01      	ldr	r3, [sp, #4]
 80104d4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80104d8:	1ac3      	subs	r3, r0, r3
 80104da:	fb0b 5303 	mla	r3, fp, r3, r5
 80104de:	9305      	str	r3, [sp, #20]
 80104e0:	4606      	mov	r6, r0
 80104e2:	1c58      	adds	r0, r3, #1
 80104e4:	f8d9 3000 	ldr.w	r3, [r9]
 80104e8:	4798      	blx	r3
 80104ea:	9003      	str	r0, [sp, #12]
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d04c      	beq.n	801058a <rcutils_repl_str+0x152>
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	9900      	ldr	r1, [sp, #0]
 80104f4:	f002 ffe2 	bl	80134bc <memcpy>
 80104f8:	9b03      	ldr	r3, [sp, #12]
 80104fa:	683d      	ldr	r5, [r7, #0]
 80104fc:	ee18 8a10 	vmov	r8, s16
 8010500:	441d      	add	r5, r3
 8010502:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8010506:	9302      	str	r3, [sp, #8]
 8010508:	46ba      	mov	sl, r7
 801050a:	4632      	mov	r2, r6
 801050c:	4641      	mov	r1, r8
 801050e:	4628      	mov	r0, r5
 8010510:	f002 ffd4 	bl	80134bc <memcpy>
 8010514:	9b01      	ldr	r3, [sp, #4]
 8010516:	f85a 2b04 	ldr.w	r2, [sl], #4
 801051a:	441a      	add	r2, r3
 801051c:	9b00      	ldr	r3, [sp, #0]
 801051e:	1899      	adds	r1, r3, r2
 8010520:	9b02      	ldr	r3, [sp, #8]
 8010522:	4435      	add	r5, r6
 8010524:	429c      	cmp	r4, r3
 8010526:	4628      	mov	r0, r5
 8010528:	d025      	beq.n	8010576 <rcutils_repl_str+0x13e>
 801052a:	f8da 3000 	ldr.w	r3, [sl]
 801052e:	3401      	adds	r4, #1
 8010530:	1a9a      	subs	r2, r3, r2
 8010532:	4415      	add	r5, r2
 8010534:	f002 ffc2 	bl	80134bc <memcpy>
 8010538:	455c      	cmp	r4, fp
 801053a:	d3e6      	bcc.n	801050a <rcutils_repl_str+0xd2>
 801053c:	9a03      	ldr	r2, [sp, #12]
 801053e:	9905      	ldr	r1, [sp, #20]
 8010540:	2300      	movs	r3, #0
 8010542:	5453      	strb	r3, [r2, r1]
 8010544:	e00b      	b.n	801055e <rcutils_repl_str+0x126>
 8010546:	4628      	mov	r0, r5
 8010548:	f8d9 3000 	ldr.w	r3, [r9]
 801054c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010550:	3001      	adds	r0, #1
 8010552:	4798      	blx	r3
 8010554:	9003      	str	r0, [sp, #12]
 8010556:	b110      	cbz	r0, 801055e <rcutils_repl_str+0x126>
 8010558:	9900      	ldr	r1, [sp, #0]
 801055a:	f003 f9b2 	bl	80138c2 <strcpy>
 801055e:	4638      	mov	r0, r7
 8010560:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010564:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010568:	4798      	blx	r3
 801056a:	9803      	ldr	r0, [sp, #12]
 801056c:	b007      	add	sp, #28
 801056e:	ecbd 8b02 	vpop	{d8}
 8010572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010576:	9b04      	ldr	r3, [sp, #16]
 8010578:	3401      	adds	r4, #1
 801057a:	1a9a      	subs	r2, r3, r2
 801057c:	4415      	add	r5, r2
 801057e:	f002 ff9d 	bl	80134bc <memcpy>
 8010582:	455c      	cmp	r4, fp
 8010584:	d3c1      	bcc.n	801050a <rcutils_repl_str+0xd2>
 8010586:	e7d9      	b.n	801053c <rcutils_repl_str+0x104>
 8010588:	4647      	mov	r7, r8
 801058a:	2300      	movs	r3, #0
 801058c:	9303      	str	r3, [sp, #12]
 801058e:	e7e6      	b.n	801055e <rcutils_repl_str+0x126>

08010590 <rcutils_snprintf>:
 8010590:	b40c      	push	{r2, r3}
 8010592:	b530      	push	{r4, r5, lr}
 8010594:	b083      	sub	sp, #12
 8010596:	ab06      	add	r3, sp, #24
 8010598:	f853 2b04 	ldr.w	r2, [r3], #4
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	b152      	cbz	r2, 80105b6 <rcutils_snprintf+0x26>
 80105a0:	b138      	cbz	r0, 80105b2 <rcutils_snprintf+0x22>
 80105a2:	b141      	cbz	r1, 80105b6 <rcutils_snprintf+0x26>
 80105a4:	f003 fa68 	bl	8013a78 <vsniprintf>
 80105a8:	b003      	add	sp, #12
 80105aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105ae:	b002      	add	sp, #8
 80105b0:	4770      	bx	lr
 80105b2:	2900      	cmp	r1, #0
 80105b4:	d0f6      	beq.n	80105a4 <rcutils_snprintf+0x14>
 80105b6:	f002 feff 	bl	80133b8 <__errno>
 80105ba:	2316      	movs	r3, #22
 80105bc:	6003      	str	r3, [r0, #0]
 80105be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105c2:	e7f1      	b.n	80105a8 <rcutils_snprintf+0x18>

080105c4 <rcutils_vsnprintf>:
 80105c4:	b570      	push	{r4, r5, r6, lr}
 80105c6:	b13a      	cbz	r2, 80105d8 <rcutils_vsnprintf+0x14>
 80105c8:	b120      	cbz	r0, 80105d4 <rcutils_vsnprintf+0x10>
 80105ca:	b129      	cbz	r1, 80105d8 <rcutils_vsnprintf+0x14>
 80105cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105d0:	f003 ba52 	b.w	8013a78 <vsniprintf>
 80105d4:	2900      	cmp	r1, #0
 80105d6:	d0f9      	beq.n	80105cc <rcutils_vsnprintf+0x8>
 80105d8:	f002 feee 	bl	80133b8 <__errno>
 80105dc:	2316      	movs	r3, #22
 80105de:	6003      	str	r3, [r0, #0]
 80105e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105e4:	bd70      	pop	{r4, r5, r6, pc}
 80105e6:	bf00      	nop

080105e8 <rcutils_strdup>:
 80105e8:	b084      	sub	sp, #16
 80105ea:	b570      	push	{r4, r5, r6, lr}
 80105ec:	b082      	sub	sp, #8
 80105ee:	ac07      	add	r4, sp, #28
 80105f0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80105f4:	4605      	mov	r5, r0
 80105f6:	b1b0      	cbz	r0, 8010626 <rcutils_strdup+0x3e>
 80105f8:	f7ef fe14 	bl	8000224 <strlen>
 80105fc:	1c42      	adds	r2, r0, #1
 80105fe:	9b07      	ldr	r3, [sp, #28]
 8010600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010602:	9201      	str	r2, [sp, #4]
 8010604:	4606      	mov	r6, r0
 8010606:	4610      	mov	r0, r2
 8010608:	4798      	blx	r3
 801060a:	4604      	mov	r4, r0
 801060c:	b128      	cbz	r0, 801061a <rcutils_strdup+0x32>
 801060e:	9a01      	ldr	r2, [sp, #4]
 8010610:	4629      	mov	r1, r5
 8010612:	f002 ff53 	bl	80134bc <memcpy>
 8010616:	2300      	movs	r3, #0
 8010618:	55a3      	strb	r3, [r4, r6]
 801061a:	4620      	mov	r0, r4
 801061c:	b002      	add	sp, #8
 801061e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010622:	b004      	add	sp, #16
 8010624:	4770      	bx	lr
 8010626:	4604      	mov	r4, r0
 8010628:	e7f7      	b.n	801061a <rcutils_strdup+0x32>
 801062a:	bf00      	nop

0801062c <rcutils_strndup>:
 801062c:	b082      	sub	sp, #8
 801062e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010630:	460e      	mov	r6, r1
 8010632:	a906      	add	r1, sp, #24
 8010634:	e881 000c 	stmia.w	r1, {r2, r3}
 8010638:	4605      	mov	r5, r0
 801063a:	b180      	cbz	r0, 801065e <rcutils_strndup+0x32>
 801063c:	1c77      	adds	r7, r6, #1
 801063e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010640:	4638      	mov	r0, r7
 8010642:	4790      	blx	r2
 8010644:	4604      	mov	r4, r0
 8010646:	b128      	cbz	r0, 8010654 <rcutils_strndup+0x28>
 8010648:	463a      	mov	r2, r7
 801064a:	4629      	mov	r1, r5
 801064c:	f002 ff36 	bl	80134bc <memcpy>
 8010650:	2300      	movs	r3, #0
 8010652:	55a3      	strb	r3, [r4, r6]
 8010654:	4620      	mov	r0, r4
 8010656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801065a:	b002      	add	sp, #8
 801065c:	4770      	bx	lr
 801065e:	4604      	mov	r4, r0
 8010660:	e7f8      	b.n	8010654 <rcutils_strndup+0x28>
 8010662:	bf00      	nop

08010664 <rmw_get_zero_initialized_context>:
 8010664:	b510      	push	{r4, lr}
 8010666:	2250      	movs	r2, #80	; 0x50
 8010668:	4604      	mov	r4, r0
 801066a:	2100      	movs	r1, #0
 801066c:	f002 ff4e 	bl	801350c <memset>
 8010670:	4620      	mov	r0, r4
 8010672:	bd10      	pop	{r4, pc}

08010674 <rmw_get_zero_initialized_init_options>:
 8010674:	b510      	push	{r4, lr}
 8010676:	2238      	movs	r2, #56	; 0x38
 8010678:	4604      	mov	r4, r0
 801067a:	2100      	movs	r1, #0
 801067c:	f002 ff46 	bl	801350c <memset>
 8010680:	f104 0010 	add.w	r0, r4, #16
 8010684:	f000 f806 	bl	8010694 <rmw_get_default_security_options>
 8010688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801068c:	60e3      	str	r3, [r4, #12]
 801068e:	4620      	mov	r0, r4
 8010690:	bd10      	pop	{r4, pc}
 8010692:	bf00      	nop

08010694 <rmw_get_default_security_options>:
 8010694:	2200      	movs	r2, #0
 8010696:	7002      	strb	r2, [r0, #0]
 8010698:	6042      	str	r2, [r0, #4]
 801069a:	4770      	bx	lr

0801069c <rmw_validate_namespace_with_size>:
 801069c:	b340      	cbz	r0, 80106f0 <rmw_validate_namespace_with_size+0x54>
 801069e:	b5d0      	push	{r4, r6, r7, lr}
 80106a0:	4614      	mov	r4, r2
 80106a2:	b0c2      	sub	sp, #264	; 0x108
 80106a4:	b332      	cbz	r2, 80106f4 <rmw_validate_namespace_with_size+0x58>
 80106a6:	2901      	cmp	r1, #1
 80106a8:	460f      	mov	r7, r1
 80106aa:	461e      	mov	r6, r3
 80106ac:	d102      	bne.n	80106b4 <rmw_validate_namespace_with_size+0x18>
 80106ae:	7803      	ldrb	r3, [r0, #0]
 80106b0:	2b2f      	cmp	r3, #47	; 0x2f
 80106b2:	d019      	beq.n	80106e8 <rmw_validate_namespace_with_size+0x4c>
 80106b4:	aa01      	add	r2, sp, #4
 80106b6:	4669      	mov	r1, sp
 80106b8:	f7fa fb10 	bl	800acdc <rmw_validate_full_topic_name>
 80106bc:	b990      	cbnz	r0, 80106e4 <rmw_validate_namespace_with_size+0x48>
 80106be:	9b00      	ldr	r3, [sp, #0]
 80106c0:	b14b      	cbz	r3, 80106d6 <rmw_validate_namespace_with_size+0x3a>
 80106c2:	2b07      	cmp	r3, #7
 80106c4:	d007      	beq.n	80106d6 <rmw_validate_namespace_with_size+0x3a>
 80106c6:	1e5a      	subs	r2, r3, #1
 80106c8:	2a05      	cmp	r2, #5
 80106ca:	d82b      	bhi.n	8010724 <rmw_validate_namespace_with_size+0x88>
 80106cc:	e8df f002 	tbb	[pc, r2]
 80106d0:	24211e1b 	.word	0x24211e1b
 80106d4:	1427      	.short	0x1427
 80106d6:	2ff5      	cmp	r7, #245	; 0xf5
 80106d8:	d906      	bls.n	80106e8 <rmw_validate_namespace_with_size+0x4c>
 80106da:	2307      	movs	r3, #7
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	b10e      	cbz	r6, 80106e4 <rmw_validate_namespace_with_size+0x48>
 80106e0:	23f4      	movs	r3, #244	; 0xf4
 80106e2:	6033      	str	r3, [r6, #0]
 80106e4:	b042      	add	sp, #264	; 0x108
 80106e6:	bdd0      	pop	{r4, r6, r7, pc}
 80106e8:	2000      	movs	r0, #0
 80106ea:	6020      	str	r0, [r4, #0]
 80106ec:	b042      	add	sp, #264	; 0x108
 80106ee:	bdd0      	pop	{r4, r6, r7, pc}
 80106f0:	200b      	movs	r0, #11
 80106f2:	4770      	bx	lr
 80106f4:	200b      	movs	r0, #11
 80106f6:	e7f5      	b.n	80106e4 <rmw_validate_namespace_with_size+0x48>
 80106f8:	2306      	movs	r3, #6
 80106fa:	6023      	str	r3, [r4, #0]
 80106fc:	2e00      	cmp	r6, #0
 80106fe:	d0f1      	beq.n	80106e4 <rmw_validate_namespace_with_size+0x48>
 8010700:	9b01      	ldr	r3, [sp, #4]
 8010702:	6033      	str	r3, [r6, #0]
 8010704:	e7ee      	b.n	80106e4 <rmw_validate_namespace_with_size+0x48>
 8010706:	2301      	movs	r3, #1
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	e7f7      	b.n	80106fc <rmw_validate_namespace_with_size+0x60>
 801070c:	2302      	movs	r3, #2
 801070e:	6023      	str	r3, [r4, #0]
 8010710:	e7f4      	b.n	80106fc <rmw_validate_namespace_with_size+0x60>
 8010712:	2303      	movs	r3, #3
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	e7f1      	b.n	80106fc <rmw_validate_namespace_with_size+0x60>
 8010718:	2304      	movs	r3, #4
 801071a:	6023      	str	r3, [r4, #0]
 801071c:	e7ee      	b.n	80106fc <rmw_validate_namespace_with_size+0x60>
 801071e:	2305      	movs	r3, #5
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	e7eb      	b.n	80106fc <rmw_validate_namespace_with_size+0x60>
 8010724:	4a03      	ldr	r2, [pc, #12]	; (8010734 <rmw_validate_namespace_with_size+0x98>)
 8010726:	f44f 7180 	mov.w	r1, #256	; 0x100
 801072a:	a802      	add	r0, sp, #8
 801072c:	f7ff ff30 	bl	8010590 <rcutils_snprintf>
 8010730:	2001      	movs	r0, #1
 8010732:	e7d7      	b.n	80106e4 <rmw_validate_namespace_with_size+0x48>
 8010734:	080150b0 	.word	0x080150b0

08010738 <rmw_validate_namespace>:
 8010738:	b168      	cbz	r0, 8010756 <rmw_validate_namespace+0x1e>
 801073a:	b570      	push	{r4, r5, r6, lr}
 801073c:	460d      	mov	r5, r1
 801073e:	4616      	mov	r6, r2
 8010740:	4604      	mov	r4, r0
 8010742:	f7ef fd6f 	bl	8000224 <strlen>
 8010746:	4633      	mov	r3, r6
 8010748:	4601      	mov	r1, r0
 801074a:	462a      	mov	r2, r5
 801074c:	4620      	mov	r0, r4
 801074e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010752:	f7ff bfa3 	b.w	801069c <rmw_validate_namespace_with_size>
 8010756:	200b      	movs	r0, #11
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop

0801075c <rmw_namespace_validation_result_string>:
 801075c:	2807      	cmp	r0, #7
 801075e:	bf9a      	itte	ls
 8010760:	4b02      	ldrls	r3, [pc, #8]	; (801076c <rmw_namespace_validation_result_string+0x10>)
 8010762:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010766:	4802      	ldrhi	r0, [pc, #8]	; (8010770 <rmw_namespace_validation_result_string+0x14>)
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	080152a8 	.word	0x080152a8
 8010770:	08015100 	.word	0x08015100

08010774 <rmw_validate_node_name>:
 8010774:	2800      	cmp	r0, #0
 8010776:	d03b      	beq.n	80107f0 <rmw_validate_node_name+0x7c>
 8010778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077c:	460f      	mov	r7, r1
 801077e:	2900      	cmp	r1, #0
 8010780:	d038      	beq.n	80107f4 <rmw_validate_node_name+0x80>
 8010782:	4615      	mov	r5, r2
 8010784:	4604      	mov	r4, r0
 8010786:	f7ef fd4d 	bl	8000224 <strlen>
 801078a:	b1e0      	cbz	r0, 80107c6 <rmw_validate_node_name+0x52>
 801078c:	1e63      	subs	r3, r4, #1
 801078e:	eb03 0e00 	add.w	lr, r3, r0
 8010792:	f1c4 0c01 	rsb	ip, r4, #1
 8010796:	eb0c 0803 	add.w	r8, ip, r3
 801079a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801079e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80107a2:	f026 0220 	bic.w	r2, r6, #32
 80107a6:	2909      	cmp	r1, #9
 80107a8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 80107ac:	d913      	bls.n	80107d6 <rmw_validate_node_name+0x62>
 80107ae:	2a19      	cmp	r2, #25
 80107b0:	d911      	bls.n	80107d6 <rmw_validate_node_name+0x62>
 80107b2:	2e5f      	cmp	r6, #95	; 0x5f
 80107b4:	d00f      	beq.n	80107d6 <rmw_validate_node_name+0x62>
 80107b6:	2302      	movs	r3, #2
 80107b8:	603b      	str	r3, [r7, #0]
 80107ba:	b10d      	cbz	r5, 80107c0 <rmw_validate_node_name+0x4c>
 80107bc:	f8c5 8000 	str.w	r8, [r5]
 80107c0:	2000      	movs	r0, #0
 80107c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c6:	2301      	movs	r3, #1
 80107c8:	603b      	str	r3, [r7, #0]
 80107ca:	2d00      	cmp	r5, #0
 80107cc:	d0f8      	beq.n	80107c0 <rmw_validate_node_name+0x4c>
 80107ce:	2000      	movs	r0, #0
 80107d0:	6028      	str	r0, [r5, #0]
 80107d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d6:	4573      	cmp	r3, lr
 80107d8:	d1dd      	bne.n	8010796 <rmw_validate_node_name+0x22>
 80107da:	7822      	ldrb	r2, [r4, #0]
 80107dc:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <rmw_validate_node_name+0xa0>)
 80107de:	5cd3      	ldrb	r3, [r2, r3]
 80107e0:	f013 0304 	ands.w	r3, r3, #4
 80107e4:	d110      	bne.n	8010808 <rmw_validate_node_name+0x94>
 80107e6:	28ff      	cmp	r0, #255	; 0xff
 80107e8:	d806      	bhi.n	80107f8 <rmw_validate_node_name+0x84>
 80107ea:	603b      	str	r3, [r7, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	e7e8      	b.n	80107c2 <rmw_validate_node_name+0x4e>
 80107f0:	200b      	movs	r0, #11
 80107f2:	4770      	bx	lr
 80107f4:	200b      	movs	r0, #11
 80107f6:	e7e4      	b.n	80107c2 <rmw_validate_node_name+0x4e>
 80107f8:	2204      	movs	r2, #4
 80107fa:	603a      	str	r2, [r7, #0]
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	d0df      	beq.n	80107c0 <rmw_validate_node_name+0x4c>
 8010800:	22fe      	movs	r2, #254	; 0xfe
 8010802:	4618      	mov	r0, r3
 8010804:	602a      	str	r2, [r5, #0]
 8010806:	e7dc      	b.n	80107c2 <rmw_validate_node_name+0x4e>
 8010808:	2303      	movs	r3, #3
 801080a:	603b      	str	r3, [r7, #0]
 801080c:	2d00      	cmp	r5, #0
 801080e:	d1de      	bne.n	80107ce <rmw_validate_node_name+0x5a>
 8010810:	e7d6      	b.n	80107c0 <rmw_validate_node_name+0x4c>
 8010812:	bf00      	nop
 8010814:	080155fd 	.word	0x080155fd

08010818 <rmw_node_name_validation_result_string>:
 8010818:	2804      	cmp	r0, #4
 801081a:	bf9a      	itte	ls
 801081c:	4b02      	ldrls	r3, [pc, #8]	; (8010828 <rmw_node_name_validation_result_string+0x10>)
 801081e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010822:	4802      	ldrhi	r0, [pc, #8]	; (801082c <rmw_node_name_validation_result_string+0x14>)
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	080153b4 	.word	0x080153b4
 801082c:	080152c8 	.word	0x080152c8

08010830 <get_memory>:
 8010830:	4603      	mov	r3, r0
 8010832:	6840      	ldr	r0, [r0, #4]
 8010834:	b158      	cbz	r0, 801084e <get_memory+0x1e>
 8010836:	6882      	ldr	r2, [r0, #8]
 8010838:	605a      	str	r2, [r3, #4]
 801083a:	b10a      	cbz	r2, 8010840 <get_memory+0x10>
 801083c:	2100      	movs	r1, #0
 801083e:	6051      	str	r1, [r2, #4]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	6082      	str	r2, [r0, #8]
 8010844:	b102      	cbz	r2, 8010848 <get_memory+0x18>
 8010846:	6050      	str	r0, [r2, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	6042      	str	r2, [r0, #4]
 801084c:	6018      	str	r0, [r3, #0]
 801084e:	4770      	bx	lr

08010850 <put_memory>:
 8010850:	684b      	ldr	r3, [r1, #4]
 8010852:	b10b      	cbz	r3, 8010858 <put_memory+0x8>
 8010854:	688a      	ldr	r2, [r1, #8]
 8010856:	609a      	str	r2, [r3, #8]
 8010858:	688a      	ldr	r2, [r1, #8]
 801085a:	b102      	cbz	r2, 801085e <put_memory+0xe>
 801085c:	6053      	str	r3, [r2, #4]
 801085e:	6803      	ldr	r3, [r0, #0]
 8010860:	428b      	cmp	r3, r1
 8010862:	6843      	ldr	r3, [r0, #4]
 8010864:	bf08      	it	eq
 8010866:	6002      	streq	r2, [r0, #0]
 8010868:	608b      	str	r3, [r1, #8]
 801086a:	b103      	cbz	r3, 801086e <put_memory+0x1e>
 801086c:	6059      	str	r1, [r3, #4]
 801086e:	2300      	movs	r3, #0
 8010870:	604b      	str	r3, [r1, #4]
 8010872:	6041      	str	r1, [r0, #4]
 8010874:	4770      	bx	lr
 8010876:	bf00      	nop

08010878 <rmw_destroy_client>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	b128      	cbz	r0, 8010888 <rmw_destroy_client+0x10>
 801087c:	4604      	mov	r4, r0
 801087e:	6800      	ldr	r0, [r0, #0]
 8010880:	460d      	mov	r5, r1
 8010882:	f7fa ff7d 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 8010886:	b910      	cbnz	r0, 801088e <rmw_destroy_client+0x16>
 8010888:	2401      	movs	r4, #1
 801088a:	4620      	mov	r0, r4
 801088c:	bd70      	pop	{r4, r5, r6, pc}
 801088e:	6863      	ldr	r3, [r4, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0f9      	beq.n	8010888 <rmw_destroy_client+0x10>
 8010894:	2d00      	cmp	r5, #0
 8010896:	d0f7      	beq.n	8010888 <rmw_destroy_client+0x10>
 8010898:	6828      	ldr	r0, [r5, #0]
 801089a:	f7fa ff71 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d0f2      	beq.n	8010888 <rmw_destroy_client+0x10>
 80108a2:	686e      	ldr	r6, [r5, #4]
 80108a4:	2e00      	cmp	r6, #0
 80108a6:	d0ef      	beq.n	8010888 <rmw_destroy_client+0x10>
 80108a8:	6864      	ldr	r4, [r4, #4]
 80108aa:	6932      	ldr	r2, [r6, #16]
 80108ac:	6920      	ldr	r0, [r4, #16]
 80108ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80108b2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80108b6:	6819      	ldr	r1, [r3, #0]
 80108b8:	f7fb f940 	bl	800bb3c <uxr_buffer_cancel_data>
 80108bc:	4602      	mov	r2, r0
 80108be:	6920      	ldr	r0, [r4, #16]
 80108c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80108c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80108c8:	f7fa feda 	bl	800b680 <run_xrce_session>
 80108cc:	6920      	ldr	r0, [r4, #16]
 80108ce:	6932      	ldr	r2, [r6, #16]
 80108d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80108d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80108d8:	6819      	ldr	r1, [r3, #0]
 80108da:	f7fa ff6b 	bl	800b7b4 <uxr_buffer_delete_entity>
 80108de:	4602      	mov	r2, r0
 80108e0:	6920      	ldr	r0, [r4, #16]
 80108e2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80108e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80108ea:	f7fa fec9 	bl	800b680 <run_xrce_session>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	4628      	mov	r0, r5
 80108f2:	bf14      	ite	ne
 80108f4:	2400      	movne	r4, #0
 80108f6:	2402      	moveq	r4, #2
 80108f8:	f7fa fdb2 	bl	800b460 <rmw_uxrce_fini_client_memory>
 80108fc:	e7c5      	b.n	801088a <rmw_destroy_client+0x12>
 80108fe:	bf00      	nop

08010900 <rmw_get_implementation_identifier>:
 8010900:	4b01      	ldr	r3, [pc, #4]	; (8010908 <rmw_get_implementation_identifier+0x8>)
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	080153e0 	.word	0x080153e0

0801090c <rmw_init_options_init>:
 801090c:	b084      	sub	sp, #16
 801090e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010912:	ad09      	add	r5, sp, #36	; 0x24
 8010914:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010918:	b130      	cbz	r0, 8010928 <rmw_init_options_init+0x1c>
 801091a:	4604      	mov	r4, r0
 801091c:	4628      	mov	r0, r5
 801091e:	f7fa f80b 	bl	800a938 <rcutils_allocator_is_valid>
 8010922:	b108      	cbz	r0, 8010928 <rmw_init_options_init+0x1c>
 8010924:	68a3      	ldr	r3, [r4, #8]
 8010926:	b123      	cbz	r3, 8010932 <rmw_init_options_init+0x26>
 8010928:	200b      	movs	r0, #11
 801092a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801092e:	b004      	add	sp, #16
 8010930:	4770      	bx	lr
 8010932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010934:	4f1c      	ldr	r7, [pc, #112]	; (80109a8 <rmw_init_options_init+0x9c>)
 8010936:	682e      	ldr	r6, [r5, #0]
 8010938:	683d      	ldr	r5, [r7, #0]
 801093a:	60a5      	str	r5, [r4, #8]
 801093c:	f04f 0800 	mov.w	r8, #0
 8010940:	f04f 0900 	mov.w	r9, #0
 8010944:	f104 0520 	add.w	r5, r4, #32
 8010948:	e9c4 8900 	strd	r8, r9, [r4]
 801094c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801094e:	4b17      	ldr	r3, [pc, #92]	; (80109ac <rmw_init_options_init+0xa0>)
 8010950:	4817      	ldr	r0, [pc, #92]	; (80109b0 <rmw_init_options_init+0xa4>)
 8010952:	602e      	str	r6, [r5, #0]
 8010954:	4917      	ldr	r1, [pc, #92]	; (80109b4 <rmw_init_options_init+0xa8>)
 8010956:	61e3      	str	r3, [r4, #28]
 8010958:	2203      	movs	r2, #3
 801095a:	f7fa fcd1 	bl	800b300 <rmw_uxrce_init_init_options_impl_memory>
 801095e:	4814      	ldr	r0, [pc, #80]	; (80109b0 <rmw_init_options_init+0xa4>)
 8010960:	f7ff ff66 	bl	8010830 <get_memory>
 8010964:	b1e8      	cbz	r0, 80109a2 <rmw_init_options_init+0x96>
 8010966:	4a14      	ldr	r2, [pc, #80]	; (80109b8 <rmw_init_options_init+0xac>)
 8010968:	68c3      	ldr	r3, [r0, #12]
 801096a:	6851      	ldr	r1, [r2, #4]
 801096c:	7810      	ldrb	r0, [r2, #0]
 801096e:	6363      	str	r3, [r4, #52]	; 0x34
 8010970:	7418      	strb	r0, [r3, #16]
 8010972:	6159      	str	r1, [r3, #20]
 8010974:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8010978:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 801097c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8010980:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8010984:	f7fc fc08 	bl	800d198 <uxr_nanos>
 8010988:	f002 fed6 	bl	8013738 <srand>
 801098c:	f002 ff02 	bl	8013794 <rand>
 8010990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010992:	6298      	str	r0, [r3, #40]	; 0x28
 8010994:	2800      	cmp	r0, #0
 8010996:	d0f9      	beq.n	801098c <rmw_init_options_init+0x80>
 8010998:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	2000      	movs	r0, #0
 801099e:	b004      	add	sp, #16
 80109a0:	4770      	bx	lr
 80109a2:	2001      	movs	r0, #1
 80109a4:	e7c1      	b.n	801092a <rmw_init_options_init+0x1e>
 80109a6:	bf00      	nop
 80109a8:	080153e0 	.word	0x080153e0
 80109ac:	08014f54 	.word	0x08014f54
 80109b0:	2000c554 	.word	0x2000c554
 80109b4:	2000c1a8 	.word	0x2000c1a8
 80109b8:	20009238 	.word	0x20009238

080109bc <rmw_init_options_copy>:
 80109bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109be:	b158      	cbz	r0, 80109d8 <rmw_init_options_copy+0x1c>
 80109c0:	460e      	mov	r6, r1
 80109c2:	b149      	cbz	r1, 80109d8 <rmw_init_options_copy+0x1c>
 80109c4:	4604      	mov	r4, r0
 80109c6:	6880      	ldr	r0, [r0, #8]
 80109c8:	b120      	cbz	r0, 80109d4 <rmw_init_options_copy+0x18>
 80109ca:	4b1b      	ldr	r3, [pc, #108]	; (8010a38 <rmw_init_options_copy+0x7c>)
 80109cc:	6819      	ldr	r1, [r3, #0]
 80109ce:	f7ef fc1f 	bl	8000210 <strcmp>
 80109d2:	bb60      	cbnz	r0, 8010a2e <rmw_init_options_copy+0x72>
 80109d4:	68b3      	ldr	r3, [r6, #8]
 80109d6:	b113      	cbz	r3, 80109de <rmw_init_options_copy+0x22>
 80109d8:	230b      	movs	r3, #11
 80109da:	4618      	mov	r0, r3
 80109dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109de:	4623      	mov	r3, r4
 80109e0:	4632      	mov	r2, r6
 80109e2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80109e6:	681d      	ldr	r5, [r3, #0]
 80109e8:	6858      	ldr	r0, [r3, #4]
 80109ea:	6899      	ldr	r1, [r3, #8]
 80109ec:	68df      	ldr	r7, [r3, #12]
 80109ee:	60d7      	str	r7, [r2, #12]
 80109f0:	3310      	adds	r3, #16
 80109f2:	4563      	cmp	r3, ip
 80109f4:	6015      	str	r5, [r2, #0]
 80109f6:	6050      	str	r0, [r2, #4]
 80109f8:	6091      	str	r1, [r2, #8]
 80109fa:	f102 0210 	add.w	r2, r2, #16
 80109fe:	d1f2      	bne.n	80109e6 <rmw_init_options_copy+0x2a>
 8010a00:	6819      	ldr	r1, [r3, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	480d      	ldr	r0, [pc, #52]	; (8010a3c <rmw_init_options_copy+0x80>)
 8010a06:	6053      	str	r3, [r2, #4]
 8010a08:	6011      	str	r1, [r2, #0]
 8010a0a:	f7ff ff11 	bl	8010830 <get_memory>
 8010a0e:	b188      	cbz	r0, 8010a34 <rmw_init_options_copy+0x78>
 8010a10:	68c5      	ldr	r5, [r0, #12]
 8010a12:	6375      	str	r5, [r6, #52]	; 0x34
 8010a14:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8010a16:	3610      	adds	r6, #16
 8010a18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010a1a:	f105 0410 	add.w	r4, r5, #16
 8010a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a20:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010a24:	2300      	movs	r3, #0
 8010a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a2e:	230c      	movs	r3, #12
 8010a30:	4618      	mov	r0, r3
 8010a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a34:	2301      	movs	r3, #1
 8010a36:	e7d0      	b.n	80109da <rmw_init_options_copy+0x1e>
 8010a38:	080153e0 	.word	0x080153e0
 8010a3c:	2000c554 	.word	0x2000c554

08010a40 <rmw_init_options_fini>:
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d036      	beq.n	8010ab2 <rmw_init_options_fini+0x72>
 8010a44:	b530      	push	{r4, r5, lr}
 8010a46:	4604      	mov	r4, r0
 8010a48:	b08f      	sub	sp, #60	; 0x3c
 8010a4a:	3020      	adds	r0, #32
 8010a4c:	f7f9 ff74 	bl	800a938 <rcutils_allocator_is_valid>
 8010a50:	b328      	cbz	r0, 8010a9e <rmw_init_options_fini+0x5e>
 8010a52:	68a0      	ldr	r0, [r4, #8]
 8010a54:	b120      	cbz	r0, 8010a60 <rmw_init_options_fini+0x20>
 8010a56:	4b18      	ldr	r3, [pc, #96]	; (8010ab8 <rmw_init_options_fini+0x78>)
 8010a58:	6819      	ldr	r1, [r3, #0]
 8010a5a:	f7ef fbd9 	bl	8000210 <strcmp>
 8010a5e:	bb30      	cbnz	r0, 8010aae <rmw_init_options_fini+0x6e>
 8010a60:	4b16      	ldr	r3, [pc, #88]	; (8010abc <rmw_init_options_fini+0x7c>)
 8010a62:	6819      	ldr	r1, [r3, #0]
 8010a64:	b1f9      	cbz	r1, 8010aa6 <rmw_init_options_fini+0x66>
 8010a66:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010a68:	e001      	b.n	8010a6e <rmw_init_options_fini+0x2e>
 8010a6a:	6889      	ldr	r1, [r1, #8]
 8010a6c:	b1d9      	cbz	r1, 8010aa6 <rmw_init_options_fini+0x66>
 8010a6e:	68cb      	ldr	r3, [r1, #12]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d1fa      	bne.n	8010a6a <rmw_init_options_fini+0x2a>
 8010a74:	4811      	ldr	r0, [pc, #68]	; (8010abc <rmw_init_options_fini+0x7c>)
 8010a76:	f7ff feeb 	bl	8010850 <put_memory>
 8010a7a:	466d      	mov	r5, sp
 8010a7c:	4668      	mov	r0, sp
 8010a7e:	f7ff fdf9 	bl	8010674 <rmw_get_zero_initialized_init_options>
 8010a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a92:	e884 0003 	stmia.w	r4, {r0, r1}
 8010a96:	2300      	movs	r3, #0
 8010a98:	4618      	mov	r0, r3
 8010a9a:	b00f      	add	sp, #60	; 0x3c
 8010a9c:	bd30      	pop	{r4, r5, pc}
 8010a9e:	230b      	movs	r3, #11
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	b00f      	add	sp, #60	; 0x3c
 8010aa4:	bd30      	pop	{r4, r5, pc}
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	b00f      	add	sp, #60	; 0x3c
 8010aac:	bd30      	pop	{r4, r5, pc}
 8010aae:	230c      	movs	r3, #12
 8010ab0:	e7f2      	b.n	8010a98 <rmw_init_options_fini+0x58>
 8010ab2:	230b      	movs	r3, #11
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	4770      	bx	lr
 8010ab8:	080153e0 	.word	0x080153e0
 8010abc:	2000c554 	.word	0x2000c554

08010ac0 <rmw_init>:
 8010ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac4:	b082      	sub	sp, #8
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	f000 80d6 	beq.w	8010c78 <rmw_init+0x1b8>
 8010acc:	460e      	mov	r6, r1
 8010ace:	2900      	cmp	r1, #0
 8010ad0:	f000 80d2 	beq.w	8010c78 <rmw_init+0x1b8>
 8010ad4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f000 80cd 	beq.w	8010c78 <rmw_init+0x1b8>
 8010ade:	4b79      	ldr	r3, [pc, #484]	; (8010cc4 <rmw_init+0x204>)
 8010ae0:	6880      	ldr	r0, [r0, #8]
 8010ae2:	f8d3 9000 	ldr.w	r9, [r3]
 8010ae6:	b128      	cbz	r0, 8010af4 <rmw_init+0x34>
 8010ae8:	4649      	mov	r1, r9
 8010aea:	f7ef fb91 	bl	8000210 <strcmp>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	f040 80cc 	bne.w	8010c8c <rmw_init+0x1cc>
 8010af4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010af8:	68eb      	ldr	r3, [r5, #12]
 8010afa:	61f3      	str	r3, [r6, #28]
 8010afc:	e9c6 0100 	strd	r0, r1, [r6]
 8010b00:	2201      	movs	r2, #1
 8010b02:	4971      	ldr	r1, [pc, #452]	; (8010cc8 <rmw_init+0x208>)
 8010b04:	4871      	ldr	r0, [pc, #452]	; (8010ccc <rmw_init+0x20c>)
 8010b06:	f8c6 9008 	str.w	r9, [r6, #8]
 8010b0a:	f7fa fba1 	bl	800b250 <rmw_uxrce_init_session_memory>
 8010b0e:	4870      	ldr	r0, [pc, #448]	; (8010cd0 <rmw_init+0x210>)
 8010b10:	4970      	ldr	r1, [pc, #448]	; (8010cd4 <rmw_init+0x214>)
 8010b12:	2204      	movs	r2, #4
 8010b14:	f7fa fbd6 	bl	800b2c4 <rmw_uxrce_init_static_input_buffer_memory>
 8010b18:	486c      	ldr	r0, [pc, #432]	; (8010ccc <rmw_init+0x20c>)
 8010b1a:	f7ff fe89 	bl	8010830 <get_memory>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	f000 80af 	beq.w	8010c82 <rmw_init+0x1c2>
 8010b24:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8010b26:	68c4      	ldr	r4, [r0, #12]
 8010b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b2a:	7c39      	ldrb	r1, [r7, #16]
 8010b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010b30:	9001      	str	r0, [sp, #4]
 8010b32:	6a38      	ldr	r0, [r7, #32]
 8010b34:	9000      	str	r0, [sp, #0]
 8010b36:	f104 0a10 	add.w	sl, r4, #16
 8010b3a:	4650      	mov	r0, sl
 8010b3c:	f001 f828 	bl	8011b90 <uxr_set_custom_transport_callbacks>
 8010b40:	f241 5294 	movw	r2, #5524	; 0x1594
 8010b44:	f241 5398 	movw	r3, #5528	; 0x1598
 8010b48:	f04f 0800 	mov.w	r8, #0
 8010b4c:	f241 509c 	movw	r0, #5532	; 0x159c
 8010b50:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8010b54:	f844 8002 	str.w	r8, [r4, r2]
 8010b58:	f844 8003 	str.w	r8, [r4, r3]
 8010b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010b60:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8010b64:	f844 8000 	str.w	r8, [r4, r0]
 8010b68:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8010b6c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8010b70:	4859      	ldr	r0, [pc, #356]	; (8010cd8 <rmw_init+0x218>)
 8010b72:	f8c1 8000 	str.w	r8, [r1]
 8010b76:	2201      	movs	r2, #1
 8010b78:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8010b7c:	4957      	ldr	r1, [pc, #348]	; (8010cdc <rmw_init+0x21c>)
 8010b7e:	64b4      	str	r4, [r6, #72]	; 0x48
 8010b80:	f7fa fb4c 	bl	800b21c <rmw_uxrce_init_node_memory>
 8010b84:	4956      	ldr	r1, [pc, #344]	; (8010ce0 <rmw_init+0x220>)
 8010b86:	4857      	ldr	r0, [pc, #348]	; (8010ce4 <rmw_init+0x224>)
 8010b88:	2205      	movs	r2, #5
 8010b8a:	f7fa fb2d 	bl	800b1e8 <rmw_uxrce_init_subscription_memory>
 8010b8e:	4956      	ldr	r1, [pc, #344]	; (8010ce8 <rmw_init+0x228>)
 8010b90:	4856      	ldr	r0, [pc, #344]	; (8010cec <rmw_init+0x22c>)
 8010b92:	220a      	movs	r2, #10
 8010b94:	f7fa fb0e 	bl	800b1b4 <rmw_uxrce_init_publisher_memory>
 8010b98:	4955      	ldr	r1, [pc, #340]	; (8010cf0 <rmw_init+0x230>)
 8010b9a:	4856      	ldr	r0, [pc, #344]	; (8010cf4 <rmw_init+0x234>)
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	f7fa fad5 	bl	800b14c <rmw_uxrce_init_service_memory>
 8010ba2:	4955      	ldr	r1, [pc, #340]	; (8010cf8 <rmw_init+0x238>)
 8010ba4:	4855      	ldr	r0, [pc, #340]	; (8010cfc <rmw_init+0x23c>)
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f7fa faea 	bl	800b180 <rmw_uxrce_init_client_memory>
 8010bac:	4954      	ldr	r1, [pc, #336]	; (8010d00 <rmw_init+0x240>)
 8010bae:	4855      	ldr	r0, [pc, #340]	; (8010d04 <rmw_init+0x244>)
 8010bb0:	220f      	movs	r2, #15
 8010bb2:	f7fa fb6b 	bl	800b28c <rmw_uxrce_init_topic_memory>
 8010bb6:	4954      	ldr	r1, [pc, #336]	; (8010d08 <rmw_init+0x248>)
 8010bb8:	4854      	ldr	r0, [pc, #336]	; (8010d0c <rmw_init+0x24c>)
 8010bba:	2203      	movs	r2, #3
 8010bbc:	f7fa fba0 	bl	800b300 <rmw_uxrce_init_init_options_impl_memory>
 8010bc0:	4953      	ldr	r1, [pc, #332]	; (8010d10 <rmw_init+0x250>)
 8010bc2:	4854      	ldr	r0, [pc, #336]	; (8010d14 <rmw_init+0x254>)
 8010bc4:	2204      	movs	r2, #4
 8010bc6:	f7fa fbb5 	bl	800b334 <rmw_uxrce_init_wait_set_memory>
 8010bca:	4953      	ldr	r1, [pc, #332]	; (8010d18 <rmw_init+0x258>)
 8010bcc:	4853      	ldr	r0, [pc, #332]	; (8010d1c <rmw_init+0x25c>)
 8010bce:	2204      	movs	r2, #4
 8010bd0:	f7fa fbcc 	bl	800b36c <rmw_uxrce_init_guard_condition_memory>
 8010bd4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8010bd6:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8010bd8:	4642      	mov	r2, r8
 8010bda:	f000 fbfd 	bl	80113d8 <rmw_uxrce_transport_init>
 8010bde:	4607      	mov	r7, r0
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d158      	bne.n	8010c96 <rmw_init+0x1d6>
 8010be4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010be6:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8010bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010bec:	4628      	mov	r0, r5
 8010bee:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8010bf2:	f7fb f91d 	bl	800be30 <uxr_init_session>
 8010bf6:	494a      	ldr	r1, [pc, #296]	; (8010d20 <rmw_init+0x260>)
 8010bf8:	4622      	mov	r2, r4
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	f7fb f93a 	bl	800be74 <uxr_set_topic_callback>
 8010c00:	4948      	ldr	r1, [pc, #288]	; (8010d24 <rmw_init+0x264>)
 8010c02:	463a      	mov	r2, r7
 8010c04:	4628      	mov	r0, r5
 8010c06:	f7fb f931 	bl	800be6c <uxr_set_status_callback>
 8010c0a:	4947      	ldr	r1, [pc, #284]	; (8010d28 <rmw_init+0x268>)
 8010c0c:	463a      	mov	r2, r7
 8010c0e:	4628      	mov	r0, r5
 8010c10:	f7fb f934 	bl	800be7c <uxr_set_request_callback>
 8010c14:	4945      	ldr	r1, [pc, #276]	; (8010d2c <rmw_init+0x26c>)
 8010c16:	463a      	mov	r2, r7
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f7fb f933 	bl	800be84 <uxr_set_reply_callback>
 8010c1e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010c22:	2304      	movs	r3, #4
 8010c24:	0092      	lsls	r2, r2, #2
 8010c26:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f7fb f96a 	bl	800bf04 <uxr_create_input_reliable_stream>
 8010c30:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010c34:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8010c38:	0092      	lsls	r2, r2, #2
 8010c3a:	2304      	movs	r3, #4
 8010c3c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7fb f935 	bl	800beb0 <uxr_create_output_reliable_stream>
 8010c46:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f7fb f954 	bl	800bef8 <uxr_create_input_best_effort_stream>
 8010c50:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8010c54:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8010c58:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	3114      	adds	r1, #20
 8010c60:	f7fb f914 	bl	800be8c <uxr_create_output_best_effort_stream>
 8010c64:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f7fb fda5 	bl	800c7b8 <uxr_create_session>
 8010c6e:	b1f8      	cbz	r0, 8010cb0 <rmw_init+0x1f0>
 8010c70:	4638      	mov	r0, r7
 8010c72:	b002      	add	sp, #8
 8010c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c78:	270b      	movs	r7, #11
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	b002      	add	sp, #8
 8010c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c82:	2701      	movs	r7, #1
 8010c84:	4638      	mov	r0, r7
 8010c86:	b002      	add	sp, #8
 8010c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c8c:	270c      	movs	r7, #12
 8010c8e:	4638      	mov	r0, r7
 8010c90:	b002      	add	sp, #8
 8010c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c96:	4650      	mov	r0, sl
 8010c98:	f000 ffba 	bl	8011c10 <uxr_close_custom_transport>
 8010c9c:	480b      	ldr	r0, [pc, #44]	; (8010ccc <rmw_init+0x20c>)
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	f7ff fdd6 	bl	8010850 <put_memory>
 8010ca4:	4638      	mov	r0, r7
 8010ca6:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8010caa:	b002      	add	sp, #8
 8010cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cb0:	4650      	mov	r0, sl
 8010cb2:	f000 ffad 	bl	8011c10 <uxr_close_custom_transport>
 8010cb6:	4805      	ldr	r0, [pc, #20]	; (8010ccc <rmw_init+0x20c>)
 8010cb8:	4621      	mov	r1, r4
 8010cba:	f7ff fdc9 	bl	8010850 <put_memory>
 8010cbe:	64b7      	str	r7, [r6, #72]	; 0x48
 8010cc0:	2701      	movs	r7, #1
 8010cc2:	e7d5      	b.n	8010c70 <rmw_init+0x1b0>
 8010cc4:	080153e0 	.word	0x080153e0
 8010cc8:	2000c630 	.word	0x2000c630
 8010ccc:	2000c400 	.word	0x2000c400
 8010cd0:	20009258 	.word	0x20009258
 8010cd4:	2000a038 	.word	0x2000a038
 8010cd8:	2000c22c 	.word	0x2000c22c
 8010cdc:	2000c410 	.word	0x2000c410
 8010ce0:	20009b60 	.word	0x20009b60
 8010ce4:	2000c4c4 	.word	0x2000c4c4
 8010ce8:	20009278 	.word	0x20009278
 8010cec:	20009268 	.word	0x20009268
 8010cf0:	2000c568 	.word	0x2000c568
 8010cf4:	2000c4b4 	.word	0x2000c4b4
 8010cf8:	20009f70 	.word	0x20009f70
 8010cfc:	20009ae8 	.word	0x20009ae8
 8010d00:	2000c23c 	.word	0x2000c23c
 8010d04:	2000c3f0 	.word	0x2000c3f0
 8010d08:	2000c1a8 	.word	0x2000c1a8
 8010d0c:	2000c554 	.word	0x2000c554
 8010d10:	2000c138 	.word	0x2000c138
 8010d14:	2000dbd8 	.word	0x2000dbd8
 8010d18:	2000c4d4 	.word	0x2000c4d4
 8010d1c:	2000c3e0 	.word	0x2000c3e0
 8010d20:	08013199 	.word	0x08013199
 8010d24:	08013191 	.word	0x08013191
 8010d28:	0801322d 	.word	0x0801322d
 8010d2c:	080132c5 	.word	0x080132c5

08010d30 <rmw_context_fini>:
 8010d30:	4b17      	ldr	r3, [pc, #92]	; (8010d90 <rmw_context_fini+0x60>)
 8010d32:	b570      	push	{r4, r5, r6, lr}
 8010d34:	681c      	ldr	r4, [r3, #0]
 8010d36:	4605      	mov	r5, r0
 8010d38:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8010d3a:	b33c      	cbz	r4, 8010d8c <rmw_context_fini+0x5c>
 8010d3c:	2600      	movs	r6, #0
 8010d3e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8010d42:	691a      	ldr	r2, [r3, #16]
 8010d44:	4282      	cmp	r2, r0
 8010d46:	d018      	beq.n	8010d7a <rmw_context_fini+0x4a>
 8010d48:	2c00      	cmp	r4, #0
 8010d4a:	d1f8      	bne.n	8010d3e <rmw_context_fini+0xe>
 8010d4c:	b188      	cbz	r0, 8010d72 <rmw_context_fini+0x42>
 8010d4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010d52:	789b      	ldrb	r3, [r3, #2]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	bf14      	ite	ne
 8010d58:	210a      	movne	r1, #10
 8010d5a:	2100      	moveq	r1, #0
 8010d5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d60:	f7fb feec 	bl	800cb3c <uxr_delete_session_retries>
 8010d64:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010d66:	f7fa fb1b 	bl	800b3a0 <rmw_uxrce_fini_session_memory>
 8010d6a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010d6c:	3010      	adds	r0, #16
 8010d6e:	f000 ff4f 	bl	8011c10 <uxr_close_custom_transport>
 8010d72:	2300      	movs	r3, #0
 8010d74:	4630      	mov	r0, r6
 8010d76:	64ab      	str	r3, [r5, #72]	; 0x48
 8010d78:	bd70      	pop	{r4, r5, r6, pc}
 8010d7a:	f103 0018 	add.w	r0, r3, #24
 8010d7e:	f000 f90d 	bl	8010f9c <rmw_destroy_node>
 8010d82:	4606      	mov	r6, r0
 8010d84:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010d86:	2c00      	cmp	r4, #0
 8010d88:	d1d9      	bne.n	8010d3e <rmw_context_fini+0xe>
 8010d8a:	e7df      	b.n	8010d4c <rmw_context_fini+0x1c>
 8010d8c:	4626      	mov	r6, r4
 8010d8e:	e7dd      	b.n	8010d4c <rmw_context_fini+0x1c>
 8010d90:	2000c22c 	.word	0x2000c22c

08010d94 <create_topic>:
 8010d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d98:	4607      	mov	r7, r0
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	4822      	ldr	r0, [pc, #136]	; (8010e28 <create_topic+0x94>)
 8010d9e:	4689      	mov	r9, r1
 8010da0:	4690      	mov	r8, r2
 8010da2:	f7ff fd45 	bl	8010830 <get_memory>
 8010da6:	4604      	mov	r4, r0
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d038      	beq.n	8010e1e <create_topic+0x8a>
 8010dac:	693e      	ldr	r6, [r7, #16]
 8010dae:	68c4      	ldr	r4, [r0, #12]
 8010db0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8010e30 <create_topic+0x9c>
 8010db4:	61a7      	str	r7, [r4, #24]
 8010db6:	f241 5596 	movw	r5, #5526	; 0x1596
 8010dba:	f8c4 8014 	str.w	r8, [r4, #20]
 8010dbe:	5b70      	ldrh	r0, [r6, r5]
 8010dc0:	1c42      	adds	r2, r0, #1
 8010dc2:	5372      	strh	r2, [r6, r5]
 8010dc4:	2102      	movs	r1, #2
 8010dc6:	f7fa fe51 	bl	800ba6c <uxr_object_id>
 8010dca:	4651      	mov	r1, sl
 8010dcc:	6120      	str	r0, [r4, #16]
 8010dce:	223c      	movs	r2, #60	; 0x3c
 8010dd0:	4648      	mov	r0, r9
 8010dd2:	f7fa fcbb 	bl	800b74c <generate_topic_name>
 8010dd6:	b1f0      	cbz	r0, 8010e16 <create_topic+0x82>
 8010dd8:	4d14      	ldr	r5, [pc, #80]	; (8010e2c <create_topic+0x98>)
 8010dda:	4640      	mov	r0, r8
 8010ddc:	4629      	mov	r1, r5
 8010dde:	2264      	movs	r2, #100	; 0x64
 8010de0:	f7fa fc84 	bl	800b6ec <generate_type_name>
 8010de4:	b1b8      	cbz	r0, 8010e16 <create_topic+0x82>
 8010de6:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 8010dea:	2106      	movs	r1, #6
 8010dec:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8010df0:	9501      	str	r5, [sp, #4]
 8010df2:	f8cd a000 	str.w	sl, [sp]
 8010df6:	9102      	str	r1, [sp, #8]
 8010df8:	6811      	ldr	r1, [r2, #0]
 8010dfa:	6922      	ldr	r2, [r4, #16]
 8010dfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010e00:	f7fa fd56 	bl	800b8b0 <uxr_buffer_create_topic_bin>
 8010e04:	4602      	mov	r2, r0
 8010e06:	6938      	ldr	r0, [r7, #16]
 8010e08:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010e0c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010e10:	f7fa fc36 	bl	800b680 <run_xrce_session>
 8010e14:	b918      	cbnz	r0, 8010e1e <create_topic+0x8a>
 8010e16:	4620      	mov	r0, r4
 8010e18:	f7fa fb38 	bl	800b48c <rmw_uxrce_fini_topic_memory>
 8010e1c:	2400      	movs	r4, #0
 8010e1e:	4620      	mov	r0, r4
 8010e20:	b004      	add	sp, #16
 8010e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e26:	bf00      	nop
 8010e28:	2000c3f0 	.word	0x2000c3f0
 8010e2c:	20009158 	.word	0x20009158
 8010e30:	2000911c 	.word	0x2000911c

08010e34 <destroy_topic>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	6985      	ldr	r5, [r0, #24]
 8010e38:	b1d5      	cbz	r5, 8010e70 <destroy_topic+0x3c>
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	6928      	ldr	r0, [r5, #16]
 8010e3e:	6922      	ldr	r2, [r4, #16]
 8010e40:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010e44:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010e48:	6819      	ldr	r1, [r3, #0]
 8010e4a:	f7fa fcb3 	bl	800b7b4 <uxr_buffer_delete_entity>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	6928      	ldr	r0, [r5, #16]
 8010e52:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010e56:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010e5a:	f7fa fc11 	bl	800b680 <run_xrce_session>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	4620      	mov	r0, r4
 8010e62:	bf14      	ite	ne
 8010e64:	2400      	movne	r4, #0
 8010e66:	2402      	moveq	r4, #2
 8010e68:	f7fa fb10 	bl	800b48c <rmw_uxrce_fini_topic_memory>
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	2401      	movs	r4, #1
 8010e72:	4620      	mov	r0, r4
 8010e74:	bd38      	pop	{r3, r4, r5, pc}
 8010e76:	bf00      	nop

08010e78 <create_node>:
 8010e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e7c:	b083      	sub	sp, #12
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d05f      	beq.n	8010f42 <create_node+0xca>
 8010e82:	4606      	mov	r6, r0
 8010e84:	4835      	ldr	r0, [pc, #212]	; (8010f5c <create_node+0xe4>)
 8010e86:	460f      	mov	r7, r1
 8010e88:	4690      	mov	r8, r2
 8010e8a:	461d      	mov	r5, r3
 8010e8c:	f7ff fcd0 	bl	8010830 <get_memory>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	d056      	beq.n	8010f42 <create_node+0xca>
 8010e94:	68c4      	ldr	r4, [r0, #12]
 8010e96:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8010e98:	6123      	str	r3, [r4, #16]
 8010e9a:	f7ff fd31 	bl	8010900 <rmw_get_implementation_identifier>
 8010e9e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8010ea2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8010ea6:	f8c4 9020 	str.w	r9, [r4, #32]
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f7ef f9ba 	bl	8000224 <strlen>
 8010eb0:	1c42      	adds	r2, r0, #1
 8010eb2:	2a3c      	cmp	r2, #60	; 0x3c
 8010eb4:	f104 0518 	add.w	r5, r4, #24
 8010eb8:	d840      	bhi.n	8010f3c <create_node+0xc4>
 8010eba:	4648      	mov	r0, r9
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8010ec2:	f002 fafb 	bl	80134bc <memcpy>
 8010ec6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8010eca:	4638      	mov	r0, r7
 8010ecc:	f7ef f9aa 	bl	8000224 <strlen>
 8010ed0:	1c42      	adds	r2, r0, #1
 8010ed2:	2a3c      	cmp	r2, #60	; 0x3c
 8010ed4:	d832      	bhi.n	8010f3c <create_node+0xc4>
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	4648      	mov	r0, r9
 8010eda:	f002 faef 	bl	80134bc <memcpy>
 8010ede:	f241 5394 	movw	r3, #5524	; 0x1594
 8010ee2:	6922      	ldr	r2, [r4, #16]
 8010ee4:	5ad0      	ldrh	r0, [r2, r3]
 8010ee6:	2101      	movs	r1, #1
 8010ee8:	eb00 0c01 	add.w	ip, r0, r1
 8010eec:	f822 c003 	strh.w	ip, [r2, r3]
 8010ef0:	f7fa fdbc 	bl	800ba6c <uxr_object_id>
 8010ef4:	6160      	str	r0, [r4, #20]
 8010ef6:	783b      	ldrb	r3, [r7, #0]
 8010ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8010efa:	d127      	bne.n	8010f4c <create_node+0xd4>
 8010efc:	787b      	ldrb	r3, [r7, #1]
 8010efe:	bb2b      	cbnz	r3, 8010f4c <create_node+0xd4>
 8010f00:	4a17      	ldr	r2, [pc, #92]	; (8010f60 <create_node+0xe8>)
 8010f02:	4818      	ldr	r0, [pc, #96]	; (8010f64 <create_node+0xec>)
 8010f04:	4633      	mov	r3, r6
 8010f06:	213c      	movs	r1, #60	; 0x3c
 8010f08:	f002 fc9a 	bl	8013840 <sniprintf>
 8010f0c:	6920      	ldr	r0, [r4, #16]
 8010f0e:	4b15      	ldr	r3, [pc, #84]	; (8010f64 <create_node+0xec>)
 8010f10:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8010f14:	9300      	str	r3, [sp, #0]
 8010f16:	2306      	movs	r3, #6
 8010f18:	9301      	str	r3, [sp, #4]
 8010f1a:	6811      	ldr	r1, [r2, #0]
 8010f1c:	6962      	ldr	r2, [r4, #20]
 8010f1e:	fa1f f388 	uxth.w	r3, r8
 8010f22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010f26:	f7fa fc91 	bl	800b84c <uxr_buffer_create_participant_bin>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	6920      	ldr	r0, [r4, #16]
 8010f2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010f32:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010f36:	f7fa fba3 	bl	800b680 <run_xrce_session>
 8010f3a:	b918      	cbnz	r0, 8010f44 <create_node+0xcc>
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f7fa fa35 	bl	800b3ac <rmw_uxrce_fini_node_memory>
 8010f42:	2500      	movs	r5, #0
 8010f44:	4628      	mov	r0, r5
 8010f46:	b003      	add	sp, #12
 8010f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f4c:	4a06      	ldr	r2, [pc, #24]	; (8010f68 <create_node+0xf0>)
 8010f4e:	9600      	str	r6, [sp, #0]
 8010f50:	463b      	mov	r3, r7
 8010f52:	213c      	movs	r1, #60	; 0x3c
 8010f54:	4803      	ldr	r0, [pc, #12]	; (8010f64 <create_node+0xec>)
 8010f56:	f002 fc73 	bl	8013840 <sniprintf>
 8010f5a:	e7d7      	b.n	8010f0c <create_node+0x94>
 8010f5c:	2000c22c 	.word	0x2000c22c
 8010f60:	08014ef0 	.word	0x08014ef0
 8010f64:	200091bc 	.word	0x200091bc
 8010f68:	08014f18 	.word	0x08014f18

08010f6c <rmw_create_node>:
 8010f6c:	b199      	cbz	r1, 8010f96 <rmw_create_node+0x2a>
 8010f6e:	b430      	push	{r4, r5}
 8010f70:	4615      	mov	r5, r2
 8010f72:	461a      	mov	r2, r3
 8010f74:	780b      	ldrb	r3, [r1, #0]
 8010f76:	460c      	mov	r4, r1
 8010f78:	b153      	cbz	r3, 8010f90 <rmw_create_node+0x24>
 8010f7a:	b14d      	cbz	r5, 8010f90 <rmw_create_node+0x24>
 8010f7c:	782b      	ldrb	r3, [r5, #0]
 8010f7e:	b13b      	cbz	r3, 8010f90 <rmw_create_node+0x24>
 8010f80:	b902      	cbnz	r2, 8010f84 <rmw_create_node+0x18>
 8010f82:	69c2      	ldr	r2, [r0, #28]
 8010f84:	4603      	mov	r3, r0
 8010f86:	4629      	mov	r1, r5
 8010f88:	4620      	mov	r0, r4
 8010f8a:	bc30      	pop	{r4, r5}
 8010f8c:	f7ff bf74 	b.w	8010e78 <create_node>
 8010f90:	2000      	movs	r0, #0
 8010f92:	bc30      	pop	{r4, r5}
 8010f94:	4770      	bx	lr
 8010f96:	2000      	movs	r0, #0
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop

08010f9c <rmw_destroy_node>:
 8010f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f9e:	b328      	cbz	r0, 8010fec <rmw_destroy_node+0x50>
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	6800      	ldr	r0, [r0, #0]
 8010fa4:	b120      	cbz	r0, 8010fb0 <rmw_destroy_node+0x14>
 8010fa6:	4b36      	ldr	r3, [pc, #216]	; (8011080 <rmw_destroy_node+0xe4>)
 8010fa8:	6819      	ldr	r1, [r3, #0]
 8010faa:	f7ef f931 	bl	8000210 <strcmp>
 8010fae:	b9e8      	cbnz	r0, 8010fec <rmw_destroy_node+0x50>
 8010fb0:	687d      	ldr	r5, [r7, #4]
 8010fb2:	b1dd      	cbz	r5, 8010fec <rmw_destroy_node+0x50>
 8010fb4:	4b33      	ldr	r3, [pc, #204]	; (8011084 <rmw_destroy_node+0xe8>)
 8010fb6:	681c      	ldr	r4, [r3, #0]
 8010fb8:	2c00      	cmp	r4, #0
 8010fba:	d05f      	beq.n	801107c <rmw_destroy_node+0xe0>
 8010fbc:	2600      	movs	r6, #0
 8010fbe:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8010fc2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8010fc6:	429d      	cmp	r5, r3
 8010fc8:	d013      	beq.n	8010ff2 <rmw_destroy_node+0x56>
 8010fca:	2c00      	cmp	r4, #0
 8010fcc:	d1f7      	bne.n	8010fbe <rmw_destroy_node+0x22>
 8010fce:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <rmw_destroy_node+0xec>)
 8010fd0:	681c      	ldr	r4, [r3, #0]
 8010fd2:	b1c4      	cbz	r4, 8011006 <rmw_destroy_node+0x6a>
 8010fd4:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8010fd8:	6a0b      	ldr	r3, [r1, #32]
 8010fda:	429d      	cmp	r5, r3
 8010fdc:	d1f9      	bne.n	8010fd2 <rmw_destroy_node+0x36>
 8010fde:	317c      	adds	r1, #124	; 0x7c
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	f7fa f801 	bl	800afe8 <rmw_destroy_subscription>
 8010fe6:	2801      	cmp	r0, #1
 8010fe8:	4606      	mov	r6, r0
 8010fea:	d1f2      	bne.n	8010fd2 <rmw_destroy_node+0x36>
 8010fec:	2601      	movs	r6, #1
 8010fee:	4630      	mov	r0, r6
 8010ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff2:	3184      	adds	r1, #132	; 0x84
 8010ff4:	4638      	mov	r0, r7
 8010ff6:	f000 f853 	bl	80110a0 <rmw_destroy_publisher>
 8010ffa:	2801      	cmp	r0, #1
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	d0f5      	beq.n	8010fec <rmw_destroy_node+0x50>
 8011000:	2c00      	cmp	r4, #0
 8011002:	d1dc      	bne.n	8010fbe <rmw_destroy_node+0x22>
 8011004:	e7e3      	b.n	8010fce <rmw_destroy_node+0x32>
 8011006:	4b21      	ldr	r3, [pc, #132]	; (801108c <rmw_destroy_node+0xf0>)
 8011008:	681c      	ldr	r4, [r3, #0]
 801100a:	b16c      	cbz	r4, 8011028 <rmw_destroy_node+0x8c>
 801100c:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8011010:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011012:	429d      	cmp	r5, r3
 8011014:	d1f9      	bne.n	801100a <rmw_destroy_node+0x6e>
 8011016:	317c      	adds	r1, #124	; 0x7c
 8011018:	4638      	mov	r0, r7
 801101a:	f000 f999 	bl	8011350 <rmw_destroy_service>
 801101e:	2801      	cmp	r0, #1
 8011020:	4606      	mov	r6, r0
 8011022:	d0e3      	beq.n	8010fec <rmw_destroy_node+0x50>
 8011024:	2c00      	cmp	r4, #0
 8011026:	d1f1      	bne.n	801100c <rmw_destroy_node+0x70>
 8011028:	4b19      	ldr	r3, [pc, #100]	; (8011090 <rmw_destroy_node+0xf4>)
 801102a:	681c      	ldr	r4, [r3, #0]
 801102c:	b16c      	cbz	r4, 801104a <rmw_destroy_node+0xae>
 801102e:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 8011032:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011034:	429d      	cmp	r5, r3
 8011036:	d1f9      	bne.n	801102c <rmw_destroy_node+0x90>
 8011038:	317c      	adds	r1, #124	; 0x7c
 801103a:	4638      	mov	r0, r7
 801103c:	f7ff fc1c 	bl	8010878 <rmw_destroy_client>
 8011040:	2801      	cmp	r0, #1
 8011042:	4606      	mov	r6, r0
 8011044:	d0d2      	beq.n	8010fec <rmw_destroy_node+0x50>
 8011046:	2c00      	cmp	r4, #0
 8011048:	d1f1      	bne.n	801102e <rmw_destroy_node+0x92>
 801104a:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 801104e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011052:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011056:	6819      	ldr	r1, [r3, #0]
 8011058:	f7fa fbac 	bl	800b7b4 <uxr_buffer_delete_entity>
 801105c:	4602      	mov	r2, r0
 801105e:	6928      	ldr	r0, [r5, #16]
 8011060:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011064:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011068:	f7fa fb0a 	bl	800b680 <run_xrce_session>
 801106c:	2800      	cmp	r0, #0
 801106e:	bf08      	it	eq
 8011070:	2602      	moveq	r6, #2
 8011072:	4638      	mov	r0, r7
 8011074:	f7fa f99a 	bl	800b3ac <rmw_uxrce_fini_node_memory>
 8011078:	4630      	mov	r0, r6
 801107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801107c:	4626      	mov	r6, r4
 801107e:	e7a6      	b.n	8010fce <rmw_destroy_node+0x32>
 8011080:	080153e0 	.word	0x080153e0
 8011084:	20009268 	.word	0x20009268
 8011088:	2000c4c4 	.word	0x2000c4c4
 801108c:	2000c4b4 	.word	0x2000c4b4
 8011090:	20009ae8 	.word	0x20009ae8

08011094 <rmw_node_get_graph_guard_condition>:
 8011094:	6843      	ldr	r3, [r0, #4]
 8011096:	6918      	ldr	r0, [r3, #16]
 8011098:	f500 705a 	add.w	r0, r0, #872	; 0x368
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop

080110a0 <rmw_destroy_publisher>:
 80110a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a2:	b128      	cbz	r0, 80110b0 <rmw_destroy_publisher+0x10>
 80110a4:	4604      	mov	r4, r0
 80110a6:	6800      	ldr	r0, [r0, #0]
 80110a8:	460d      	mov	r5, r1
 80110aa:	f7fa fb69 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 80110ae:	b910      	cbnz	r0, 80110b6 <rmw_destroy_publisher+0x16>
 80110b0:	2401      	movs	r4, #1
 80110b2:	4620      	mov	r0, r4
 80110b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b6:	6863      	ldr	r3, [r4, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d0f9      	beq.n	80110b0 <rmw_destroy_publisher+0x10>
 80110bc:	2d00      	cmp	r5, #0
 80110be:	d0f7      	beq.n	80110b0 <rmw_destroy_publisher+0x10>
 80110c0:	6828      	ldr	r0, [r5, #0]
 80110c2:	f7fa fb5d 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	d0f2      	beq.n	80110b0 <rmw_destroy_publisher+0x10>
 80110ca:	686c      	ldr	r4, [r5, #4]
 80110cc:	2c00      	cmp	r4, #0
 80110ce:	d0ef      	beq.n	80110b0 <rmw_destroy_publisher+0x10>
 80110d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80110d2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80110d6:	f7ff fead 	bl	8010e34 <destroy_topic>
 80110da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80110de:	6962      	ldr	r2, [r4, #20]
 80110e0:	6918      	ldr	r0, [r3, #16]
 80110e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80110e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80110ea:	6819      	ldr	r1, [r3, #0]
 80110ec:	f7fa fb62 	bl	800b7b4 <uxr_buffer_delete_entity>
 80110f0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80110f4:	6922      	ldr	r2, [r4, #16]
 80110f6:	4603      	mov	r3, r0
 80110f8:	6908      	ldr	r0, [r1, #16]
 80110fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80110fe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011102:	6809      	ldr	r1, [r1, #0]
 8011104:	461c      	mov	r4, r3
 8011106:	f7fa fb55 	bl	800b7b4 <uxr_buffer_delete_entity>
 801110a:	4606      	mov	r6, r0
 801110c:	6938      	ldr	r0, [r7, #16]
 801110e:	4622      	mov	r2, r4
 8011110:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011114:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011118:	f7fa fab2 	bl	800b680 <run_xrce_session>
 801111c:	4604      	mov	r4, r0
 801111e:	6938      	ldr	r0, [r7, #16]
 8011120:	4632      	mov	r2, r6
 8011122:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011126:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801112a:	f7fa faa9 	bl	800b680 <run_xrce_session>
 801112e:	b12c      	cbz	r4, 801113c <rmw_destroy_publisher+0x9c>
 8011130:	b120      	cbz	r0, 801113c <rmw_destroy_publisher+0x9c>
 8011132:	2400      	movs	r4, #0
 8011134:	4628      	mov	r0, r5
 8011136:	f7fa f951 	bl	800b3dc <rmw_uxrce_fini_publisher_memory>
 801113a:	e7ba      	b.n	80110b2 <rmw_destroy_publisher+0x12>
 801113c:	2402      	movs	r4, #2
 801113e:	e7f9      	b.n	8011134 <rmw_destroy_publisher+0x94>

08011140 <rmw_take_request>:
 8011140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011144:	4605      	mov	r5, r0
 8011146:	6800      	ldr	r0, [r0, #0]
 8011148:	b089      	sub	sp, #36	; 0x24
 801114a:	460c      	mov	r4, r1
 801114c:	4690      	mov	r8, r2
 801114e:	461e      	mov	r6, r3
 8011150:	b128      	cbz	r0, 801115e <rmw_take_request+0x1e>
 8011152:	4b28      	ldr	r3, [pc, #160]	; (80111f4 <rmw_take_request+0xb4>)
 8011154:	6819      	ldr	r1, [r3, #0]
 8011156:	f7ef f85b 	bl	8000210 <strcmp>
 801115a:	2800      	cmp	r0, #0
 801115c:	d146      	bne.n	80111ec <rmw_take_request+0xac>
 801115e:	b10e      	cbz	r6, 8011164 <rmw_take_request+0x24>
 8011160:	2300      	movs	r3, #0
 8011162:	7033      	strb	r3, [r6, #0]
 8011164:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011168:	f7fa fa12 	bl	800b590 <rmw_uxrce_clean_expired_static_input_buffer>
 801116c:	4648      	mov	r0, r9
 801116e:	f7fa f9e5 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 8011172:	4607      	mov	r7, r0
 8011174:	b3b0      	cbz	r0, 80111e4 <rmw_take_request+0xa4>
 8011176:	68c5      	ldr	r5, [r0, #12]
 8011178:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801117c:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8011180:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8011184:	7423      	strb	r3, [r4, #16]
 8011186:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801118a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801118e:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8011192:	74e2      	strb	r2, [r4, #19]
 8011194:	f8a4 3011 	strh.w	r3, [r4, #17]
 8011198:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801119c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80111a0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80111a4:	61e1      	str	r1, [r4, #28]
 80111a6:	6162      	str	r2, [r4, #20]
 80111a8:	61a3      	str	r3, [r4, #24]
 80111aa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	4798      	blx	r3
 80111b2:	6844      	ldr	r4, [r0, #4]
 80111b4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80111b8:	f105 0110 	add.w	r1, r5, #16
 80111bc:	4668      	mov	r0, sp
 80111be:	f7f8 fd4d 	bl	8009c5c <ucdr_init_buffer>
 80111c2:	68e3      	ldr	r3, [r4, #12]
 80111c4:	4641      	mov	r1, r8
 80111c6:	4668      	mov	r0, sp
 80111c8:	4798      	blx	r3
 80111ca:	4639      	mov	r1, r7
 80111cc:	4604      	mov	r4, r0
 80111ce:	480a      	ldr	r0, [pc, #40]	; (80111f8 <rmw_take_request+0xb8>)
 80111d0:	f7ff fb3e 	bl	8010850 <put_memory>
 80111d4:	b106      	cbz	r6, 80111d8 <rmw_take_request+0x98>
 80111d6:	7034      	strb	r4, [r6, #0]
 80111d8:	f084 0001 	eor.w	r0, r4, #1
 80111dc:	b2c0      	uxtb	r0, r0
 80111de:	b009      	add	sp, #36	; 0x24
 80111e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111e4:	2001      	movs	r0, #1
 80111e6:	b009      	add	sp, #36	; 0x24
 80111e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ec:	200c      	movs	r0, #12
 80111ee:	b009      	add	sp, #36	; 0x24
 80111f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111f4:	080153e0 	.word	0x080153e0
 80111f8:	20009258 	.word	0x20009258

080111fc <rmw_send_response>:
 80111fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111fe:	4605      	mov	r5, r0
 8011200:	6800      	ldr	r0, [r0, #0]
 8011202:	b091      	sub	sp, #68	; 0x44
 8011204:	460c      	mov	r4, r1
 8011206:	4617      	mov	r7, r2
 8011208:	b128      	cbz	r0, 8011216 <rmw_send_response+0x1a>
 801120a:	4b2a      	ldr	r3, [pc, #168]	; (80112b4 <rmw_send_response+0xb8>)
 801120c:	6819      	ldr	r1, [r3, #0]
 801120e:	f7ee ffff 	bl	8000210 <strcmp>
 8011212:	2800      	cmp	r0, #0
 8011214:	d143      	bne.n	801129e <rmw_send_response+0xa2>
 8011216:	4623      	mov	r3, r4
 8011218:	4626      	mov	r6, r4
 801121a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 801121e:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8011222:	6859      	ldr	r1, [r3, #4]
 8011224:	686d      	ldr	r5, [r5, #4]
 8011226:	689a      	ldr	r2, [r3, #8]
 8011228:	78b3      	ldrb	r3, [r6, #2]
 801122a:	f894 c000 	ldrb.w	ip, [r4]
 801122e:	6966      	ldr	r6, [r4, #20]
 8011230:	f88d 3016 	strb.w	r3, [sp, #22]
 8011234:	ab02      	add	r3, sp, #8
 8011236:	f8ad e014 	strh.w	lr, [sp, #20]
 801123a:	f88d c017 	strb.w	ip, [sp, #23]
 801123e:	9606      	str	r6, [sp, #24]
 8011240:	c307      	stmia	r3!, {r0, r1, r2}
 8011242:	696b      	ldr	r3, [r5, #20]
 8011244:	6922      	ldr	r2, [r4, #16]
 8011246:	9207      	str	r2, [sp, #28]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	6fae      	ldr	r6, [r5, #120]	; 0x78
 801124c:	4798      	blx	r3
 801124e:	4603      	mov	r3, r0
 8011250:	4638      	mov	r0, r7
 8011252:	685c      	ldr	r4, [r3, #4]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	4798      	blx	r3
 8011258:	6933      	ldr	r3, [r6, #16]
 801125a:	3018      	adds	r0, #24
 801125c:	9000      	str	r0, [sp, #0]
 801125e:	692a      	ldr	r2, [r5, #16]
 8011260:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011262:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8011266:	ab08      	add	r3, sp, #32
 8011268:	f001 fe86 	bl	8012f78 <uxr_prepare_output_stream>
 801126c:	b910      	cbnz	r0, 8011274 <rmw_send_response+0x78>
 801126e:	2001      	movs	r0, #1
 8011270:	b011      	add	sp, #68	; 0x44
 8011272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011274:	a902      	add	r1, sp, #8
 8011276:	a808      	add	r0, sp, #32
 8011278:	f7fc feea 	bl	800e050 <uxr_serialize_SampleIdentity>
 801127c:	68a3      	ldr	r3, [r4, #8]
 801127e:	a908      	add	r1, sp, #32
 8011280:	4638      	mov	r0, r7
 8011282:	4798      	blx	r3
 8011284:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8011288:	6930      	ldr	r0, [r6, #16]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d00a      	beq.n	80112a4 <rmw_send_response+0xa8>
 801128e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8011290:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011294:	f7fb fa18 	bl	800c6c8 <uxr_run_session_until_confirm_delivery>
 8011298:	2000      	movs	r0, #0
 801129a:	b011      	add	sp, #68	; 0x44
 801129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801129e:	200c      	movs	r0, #12
 80112a0:	b011      	add	sp, #68	; 0x44
 80112a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80112a8:	f7fa fe52 	bl	800bf50 <uxr_flash_output_streams>
 80112ac:	2000      	movs	r0, #0
 80112ae:	b011      	add	sp, #68	; 0x44
 80112b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112b2:	bf00      	nop
 80112b4:	080153e0 	.word	0x080153e0

080112b8 <rmw_take_response>:
 80112b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112bc:	4604      	mov	r4, r0
 80112be:	6800      	ldr	r0, [r0, #0]
 80112c0:	b089      	sub	sp, #36	; 0x24
 80112c2:	4688      	mov	r8, r1
 80112c4:	4617      	mov	r7, r2
 80112c6:	461d      	mov	r5, r3
 80112c8:	b120      	cbz	r0, 80112d4 <rmw_take_response+0x1c>
 80112ca:	4b1f      	ldr	r3, [pc, #124]	; (8011348 <rmw_take_response+0x90>)
 80112cc:	6819      	ldr	r1, [r3, #0]
 80112ce:	f7ee ff9f 	bl	8000210 <strcmp>
 80112d2:	bb88      	cbnz	r0, 8011338 <rmw_take_response+0x80>
 80112d4:	b10d      	cbz	r5, 80112da <rmw_take_response+0x22>
 80112d6:	2300      	movs	r3, #0
 80112d8:	702b      	strb	r3, [r5, #0]
 80112da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80112de:	f7fa f957 	bl	800b590 <rmw_uxrce_clean_expired_static_input_buffer>
 80112e2:	4648      	mov	r0, r9
 80112e4:	f7fa f92a 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 80112e8:	4606      	mov	r6, r0
 80112ea:	b348      	cbz	r0, 8011340 <rmw_take_response+0x88>
 80112ec:	68c4      	ldr	r4, [r0, #12]
 80112ee:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80112f2:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80112f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fa:	68c9      	ldr	r1, [r1, #12]
 80112fc:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8011300:	4788      	blx	r1
 8011302:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011306:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801130a:	f104 0110 	add.w	r1, r4, #16
 801130e:	4668      	mov	r0, sp
 8011310:	f7f8 fca4 	bl	8009c5c <ucdr_init_buffer>
 8011314:	4639      	mov	r1, r7
 8011316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801131a:	4668      	mov	r0, sp
 801131c:	4798      	blx	r3
 801131e:	4631      	mov	r1, r6
 8011320:	4604      	mov	r4, r0
 8011322:	480a      	ldr	r0, [pc, #40]	; (801134c <rmw_take_response+0x94>)
 8011324:	f7ff fa94 	bl	8010850 <put_memory>
 8011328:	b105      	cbz	r5, 801132c <rmw_take_response+0x74>
 801132a:	702c      	strb	r4, [r5, #0]
 801132c:	f084 0001 	eor.w	r0, r4, #1
 8011330:	b2c0      	uxtb	r0, r0
 8011332:	b009      	add	sp, #36	; 0x24
 8011334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011338:	200c      	movs	r0, #12
 801133a:	b009      	add	sp, #36	; 0x24
 801133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011340:	2001      	movs	r0, #1
 8011342:	b009      	add	sp, #36	; 0x24
 8011344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011348:	080153e0 	.word	0x080153e0
 801134c:	20009258 	.word	0x20009258

08011350 <rmw_destroy_service>:
 8011350:	b570      	push	{r4, r5, r6, lr}
 8011352:	b128      	cbz	r0, 8011360 <rmw_destroy_service+0x10>
 8011354:	4604      	mov	r4, r0
 8011356:	6800      	ldr	r0, [r0, #0]
 8011358:	460d      	mov	r5, r1
 801135a:	f7fa fa11 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 801135e:	b910      	cbnz	r0, 8011366 <rmw_destroy_service+0x16>
 8011360:	2401      	movs	r4, #1
 8011362:	4620      	mov	r0, r4
 8011364:	bd70      	pop	{r4, r5, r6, pc}
 8011366:	6863      	ldr	r3, [r4, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d0f9      	beq.n	8011360 <rmw_destroy_service+0x10>
 801136c:	2d00      	cmp	r5, #0
 801136e:	d0f7      	beq.n	8011360 <rmw_destroy_service+0x10>
 8011370:	6828      	ldr	r0, [r5, #0]
 8011372:	f7fa fa05 	bl	800b780 <is_uxrce_rmw_identifier_valid>
 8011376:	2800      	cmp	r0, #0
 8011378:	d0f2      	beq.n	8011360 <rmw_destroy_service+0x10>
 801137a:	686e      	ldr	r6, [r5, #4]
 801137c:	2e00      	cmp	r6, #0
 801137e:	d0ef      	beq.n	8011360 <rmw_destroy_service+0x10>
 8011380:	6864      	ldr	r4, [r4, #4]
 8011382:	6932      	ldr	r2, [r6, #16]
 8011384:	6920      	ldr	r0, [r4, #16]
 8011386:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801138a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801138e:	6819      	ldr	r1, [r3, #0]
 8011390:	f7fa fbd4 	bl	800bb3c <uxr_buffer_cancel_data>
 8011394:	4602      	mov	r2, r0
 8011396:	6920      	ldr	r0, [r4, #16]
 8011398:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801139c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80113a0:	f7fa f96e 	bl	800b680 <run_xrce_session>
 80113a4:	6920      	ldr	r0, [r4, #16]
 80113a6:	6932      	ldr	r2, [r6, #16]
 80113a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80113ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80113b0:	6819      	ldr	r1, [r3, #0]
 80113b2:	f7fa f9ff 	bl	800b7b4 <uxr_buffer_delete_entity>
 80113b6:	4602      	mov	r2, r0
 80113b8:	6920      	ldr	r0, [r4, #16]
 80113ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80113be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80113c2:	f7fa f95d 	bl	800b680 <run_xrce_session>
 80113c6:	2800      	cmp	r0, #0
 80113c8:	4628      	mov	r0, r5
 80113ca:	bf14      	ite	ne
 80113cc:	2400      	movne	r4, #0
 80113ce:	2402      	moveq	r4, #2
 80113d0:	f7fa f830 	bl	800b434 <rmw_uxrce_fini_service_memory>
 80113d4:	e7c5      	b.n	8011362 <rmw_destroy_service+0x12>
 80113d6:	bf00      	nop

080113d8 <rmw_uxrce_transport_init>:
 80113d8:	b508      	push	{r3, lr}
 80113da:	b108      	cbz	r0, 80113e0 <rmw_uxrce_transport_init+0x8>
 80113dc:	f100 0210 	add.w	r2, r0, #16
 80113e0:	b139      	cbz	r1, 80113f2 <rmw_uxrce_transport_init+0x1a>
 80113e2:	6949      	ldr	r1, [r1, #20]
 80113e4:	4610      	mov	r0, r2
 80113e6:	f000 fbdf 	bl	8011ba8 <uxr_init_custom_transport>
 80113ea:	f080 0001 	eor.w	r0, r0, #1
 80113ee:	b2c0      	uxtb	r0, r0
 80113f0:	bd08      	pop	{r3, pc}
 80113f2:	4b04      	ldr	r3, [pc, #16]	; (8011404 <rmw_uxrce_transport_init+0x2c>)
 80113f4:	4610      	mov	r0, r2
 80113f6:	6859      	ldr	r1, [r3, #4]
 80113f8:	f000 fbd6 	bl	8011ba8 <uxr_init_custom_transport>
 80113fc:	f080 0001 	eor.w	r0, r0, #1
 8011400:	b2c0      	uxtb	r0, r0
 8011402:	bd08      	pop	{r3, pc}
 8011404:	20009238 	.word	0x20009238

08011408 <rmw_wait>:
 8011408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	460f      	mov	r7, r1
 801140e:	4606      	mov	r6, r0
 8011410:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011412:	469a      	mov	sl, r3
 8011414:	4615      	mov	r5, r2
 8011416:	2a00      	cmp	r2, #0
 8011418:	f000 8122 	beq.w	8011660 <rmw_wait+0x258>
 801141c:	2900      	cmp	r1, #0
 801141e:	f000 812a 	beq.w	8011676 <rmw_wait+0x26e>
 8011422:	e9d1 2300 	ldrd	r2, r3, [r1]
 8011426:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 801142a:	015c      	lsls	r4, r3, #5
 801142c:	ebbb 0b02 	subs.w	fp, fp, r2
 8011430:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8011434:	eb64 0403 	sbc.w	r4, r4, r3
 8011438:	ea4f 008b 	mov.w	r0, fp, lsl #2
 801143c:	00a4      	lsls	r4, r4, #2
 801143e:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8011442:	eb10 0b02 	adds.w	fp, r0, r2
 8011446:	eb43 0404 	adc.w	r4, r3, r4
 801144a:	4aad      	ldr	r2, [pc, #692]	; (8011700 <rmw_wait+0x2f8>)
 801144c:	2300      	movs	r3, #0
 801144e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8011452:	f7ef f805 	bl	8000460 <__aeabi_uldivmod>
 8011456:	00e4      	lsls	r4, r4, #3
 8011458:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 801145c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011460:	eb1b 0800 	adds.w	r8, fp, r0
 8011464:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011468:	eb44 0901 	adc.w	r9, r4, r1
 801146c:	2300      	movs	r3, #0
 801146e:	4542      	cmp	r2, r8
 8011470:	eb73 0109 	sbcs.w	r1, r3, r9
 8011474:	f2c0 80f2 	blt.w	801165c <rmw_wait+0x254>
 8011478:	f7fa f88a 	bl	800b590 <rmw_uxrce_clean_expired_static_input_buffer>
 801147c:	4ba1      	ldr	r3, [pc, #644]	; (8011704 <rmw_wait+0x2fc>)
 801147e:	681c      	ldr	r4, [r3, #0]
 8011480:	b144      	cbz	r4, 8011494 <rmw_wait+0x8c>
 8011482:	4623      	mov	r3, r4
 8011484:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8011488:	2100      	movs	r1, #0
 801148a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801148e:	5411      	strb	r1, [r2, r0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1fa      	bne.n	801148a <rmw_wait+0x82>
 8011494:	b185      	cbz	r5, 80114b8 <rmw_wait+0xb0>
 8011496:	6829      	ldr	r1, [r5, #0]
 8011498:	b171      	cbz	r1, 80114b8 <rmw_wait+0xb0>
 801149a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 801149e:	2300      	movs	r3, #0
 80114a0:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80114a4:	2001      	movs	r0, #1
 80114a6:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80114aa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80114ac:	3301      	adds	r3, #1
 80114ae:	6912      	ldr	r2, [r2, #16]
 80114b0:	4299      	cmp	r1, r3
 80114b2:	f802 000c 	strb.w	r0, [r2, ip]
 80114b6:	d1f6      	bne.n	80114a6 <rmw_wait+0x9e>
 80114b8:	f1ba 0f00 	cmp.w	sl, #0
 80114bc:	d011      	beq.n	80114e2 <rmw_wait+0xda>
 80114be:	f8da 1000 	ldr.w	r1, [sl]
 80114c2:	b171      	cbz	r1, 80114e2 <rmw_wait+0xda>
 80114c4:	f8da e004 	ldr.w	lr, [sl, #4]
 80114c8:	2300      	movs	r3, #0
 80114ca:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80114ce:	2001      	movs	r0, #1
 80114d0:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80114d4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80114d6:	3301      	adds	r3, #1
 80114d8:	6912      	ldr	r2, [r2, #16]
 80114da:	4299      	cmp	r1, r3
 80114dc:	f802 000c 	strb.w	r0, [r2, ip]
 80114e0:	d1f6      	bne.n	80114d0 <rmw_wait+0xc8>
 80114e2:	b186      	cbz	r6, 8011506 <rmw_wait+0xfe>
 80114e4:	6831      	ldr	r1, [r6, #0]
 80114e6:	b171      	cbz	r1, 8011506 <rmw_wait+0xfe>
 80114e8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80114ec:	2300      	movs	r3, #0
 80114ee:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80114f2:	2001      	movs	r0, #1
 80114f4:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80114f8:	6a12      	ldr	r2, [r2, #32]
 80114fa:	3301      	adds	r3, #1
 80114fc:	6912      	ldr	r2, [r2, #16]
 80114fe:	4299      	cmp	r1, r3
 8011500:	f802 000c 	strb.w	r0, [r2, ip]
 8011504:	d1f6      	bne.n	80114f4 <rmw_wait+0xec>
 8011506:	b34c      	cbz	r4, 801155c <rmw_wait+0x154>
 8011508:	4622      	mov	r2, r4
 801150a:	2300      	movs	r3, #0
 801150c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8011510:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8011514:	5c09      	ldrb	r1, [r1, r0]
 8011516:	440b      	add	r3, r1
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2a00      	cmp	r2, #0
 801151c:	d1f8      	bne.n	8011510 <rmw_wait+0x108>
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 8082 	beq.w	8011628 <rmw_wait+0x220>
 8011524:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8011528:	d00d      	beq.n	8011546 <rmw_wait+0x13e>
 801152a:	ee07 8a90 	vmov	s15, r8
 801152e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011532:	ee07 3a90 	vmov	s15, r3
 8011536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801153a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801153e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8011542:	ee17 8a90 	vmov	r8, s15
 8011546:	f241 59a4 	movw	r9, #5540	; 0x15a4
 801154a:	68e0      	ldr	r0, [r4, #12]
 801154c:	f810 3009 	ldrb.w	r3, [r0, r9]
 8011550:	2b00      	cmp	r3, #0
 8011552:	f040 8093 	bne.w	801167c <rmw_wait+0x274>
 8011556:	68a4      	ldr	r4, [r4, #8]
 8011558:	2c00      	cmp	r4, #0
 801155a:	d1f6      	bne.n	801154a <rmw_wait+0x142>
 801155c:	2d00      	cmp	r5, #0
 801155e:	f000 80ac 	beq.w	80116ba <rmw_wait+0x2b2>
 8011562:	682b      	ldr	r3, [r5, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	f000 8093 	beq.w	8011690 <rmw_wait+0x288>
 801156a:	2400      	movs	r4, #0
 801156c:	46a0      	mov	r8, r4
 801156e:	686b      	ldr	r3, [r5, #4]
 8011570:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011574:	f7f9 ffe2 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 8011578:	2800      	cmp	r0, #0
 801157a:	d05f      	beq.n	801163c <rmw_wait+0x234>
 801157c:	682b      	ldr	r3, [r5, #0]
 801157e:	3401      	adds	r4, #1
 8011580:	42a3      	cmp	r3, r4
 8011582:	f04f 0801 	mov.w	r8, #1
 8011586:	d8f2      	bhi.n	801156e <rmw_wait+0x166>
 8011588:	f1ba 0f00 	cmp.w	sl, #0
 801158c:	d012      	beq.n	80115b4 <rmw_wait+0x1ac>
 801158e:	f8da 3000 	ldr.w	r3, [sl]
 8011592:	b17b      	cbz	r3, 80115b4 <rmw_wait+0x1ac>
 8011594:	2400      	movs	r4, #0
 8011596:	f8da 3004 	ldr.w	r3, [sl, #4]
 801159a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801159e:	f7f9 ffcd 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 80115a2:	2800      	cmp	r0, #0
 80115a4:	d052      	beq.n	801164c <rmw_wait+0x244>
 80115a6:	f8da 3000 	ldr.w	r3, [sl]
 80115aa:	3401      	adds	r4, #1
 80115ac:	42a3      	cmp	r3, r4
 80115ae:	f04f 0801 	mov.w	r8, #1
 80115b2:	d8f0      	bhi.n	8011596 <rmw_wait+0x18e>
 80115b4:	b1e6      	cbz	r6, 80115f0 <rmw_wait+0x1e8>
 80115b6:	6833      	ldr	r3, [r6, #0]
 80115b8:	b1d3      	cbz	r3, 80115f0 <rmw_wait+0x1e8>
 80115ba:	2400      	movs	r4, #0
 80115bc:	6873      	ldr	r3, [r6, #4]
 80115be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80115c2:	f7f9 ffbb 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 80115c6:	b160      	cbz	r0, 80115e2 <rmw_wait+0x1da>
 80115c8:	6833      	ldr	r3, [r6, #0]
 80115ca:	3401      	adds	r4, #1
 80115cc:	42a3      	cmp	r3, r4
 80115ce:	d96c      	bls.n	80116aa <rmw_wait+0x2a2>
 80115d0:	6873      	ldr	r3, [r6, #4]
 80115d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80115d6:	f04f 0801 	mov.w	r8, #1
 80115da:	f7f9 ffaf 	bl	800b53c <rmw_uxrce_find_static_input_buffer_by_owner>
 80115de:	2800      	cmp	r0, #0
 80115e0:	d1f2      	bne.n	80115c8 <rmw_wait+0x1c0>
 80115e2:	e9d6 3200 	ldrd	r3, r2, [r6]
 80115e6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80115ea:	3401      	adds	r4, #1
 80115ec:	42a3      	cmp	r3, r4
 80115ee:	d8e5      	bhi.n	80115bc <rmw_wait+0x1b4>
 80115f0:	b1a7      	cbz	r7, 801161c <rmw_wait+0x214>
 80115f2:	683c      	ldr	r4, [r7, #0]
 80115f4:	b194      	cbz	r4, 801161c <rmw_wait+0x214>
 80115f6:	2300      	movs	r3, #0
 80115f8:	461d      	mov	r5, r3
 80115fa:	e004      	b.n	8011606 <rmw_wait+0x1fe>
 80115fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8011600:	3301      	adds	r3, #1
 8011602:	42a3      	cmp	r3, r4
 8011604:	d00a      	beq.n	801161c <rmw_wait+0x214>
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801160c:	7c0a      	ldrb	r2, [r1, #16]
 801160e:	2a00      	cmp	r2, #0
 8011610:	d0f4      	beq.n	80115fc <rmw_wait+0x1f4>
 8011612:	3301      	adds	r3, #1
 8011614:	42a3      	cmp	r3, r4
 8011616:	740d      	strb	r5, [r1, #16]
 8011618:	4690      	mov	r8, r2
 801161a:	d1f4      	bne.n	8011606 <rmw_wait+0x1fe>
 801161c:	f1b8 0f00 	cmp.w	r8, #0
 8011620:	d040      	beq.n	80116a4 <rmw_wait+0x29c>
 8011622:	2000      	movs	r0, #0
 8011624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011628:	68e0      	ldr	r0, [r4, #12]
 801162a:	2100      	movs	r1, #0
 801162c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011630:	f7fb f810 	bl	800c654 <uxr_run_session_timeout>
 8011634:	68a4      	ldr	r4, [r4, #8]
 8011636:	2c00      	cmp	r4, #0
 8011638:	d1f6      	bne.n	8011628 <rmw_wait+0x220>
 801163a:	e78f      	b.n	801155c <rmw_wait+0x154>
 801163c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8011640:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011644:	3401      	adds	r4, #1
 8011646:	42a3      	cmp	r3, r4
 8011648:	d891      	bhi.n	801156e <rmw_wait+0x166>
 801164a:	e79d      	b.n	8011588 <rmw_wait+0x180>
 801164c:	e9da 3200 	ldrd	r3, r2, [sl]
 8011650:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011654:	3401      	adds	r4, #1
 8011656:	429c      	cmp	r4, r3
 8011658:	d39d      	bcc.n	8011596 <rmw_wait+0x18e>
 801165a:	e7ab      	b.n	80115b4 <rmw_wait+0x1ac>
 801165c:	4690      	mov	r8, r2
 801165e:	e70b      	b.n	8011478 <rmw_wait+0x70>
 8011660:	2b00      	cmp	r3, #0
 8011662:	f47f aedb 	bne.w	801141c <rmw_wait+0x14>
 8011666:	2800      	cmp	r0, #0
 8011668:	f47f aed8 	bne.w	801141c <rmw_wait+0x14>
 801166c:	2f00      	cmp	r7, #0
 801166e:	d0d8      	beq.n	8011622 <rmw_wait+0x21a>
 8011670:	2900      	cmp	r1, #0
 8011672:	f47f aed6 	bne.w	8011422 <rmw_wait+0x1a>
 8011676:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801167a:	e6fd      	b.n	8011478 <rmw_wait+0x70>
 801167c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011680:	4641      	mov	r1, r8
 8011682:	f7fb f801 	bl	800c688 <uxr_run_session_until_data>
 8011686:	68a4      	ldr	r4, [r4, #8]
 8011688:	2c00      	cmp	r4, #0
 801168a:	f47f af5e 	bne.w	801154a <rmw_wait+0x142>
 801168e:	e765      	b.n	801155c <rmw_wait+0x154>
 8011690:	f1ba 0f00 	cmp.w	sl, #0
 8011694:	d11e      	bne.n	80116d4 <rmw_wait+0x2cc>
 8011696:	b35e      	cbz	r6, 80116f0 <rmw_wait+0x2e8>
 8011698:	6833      	ldr	r3, [r6, #0]
 801169a:	46d0      	mov	r8, sl
 801169c:	2b00      	cmp	r3, #0
 801169e:	d18c      	bne.n	80115ba <rmw_wait+0x1b2>
 80116a0:	2f00      	cmp	r7, #0
 80116a2:	d1a6      	bne.n	80115f2 <rmw_wait+0x1ea>
 80116a4:	2002      	movs	r0, #2
 80116a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116aa:	2f00      	cmp	r7, #0
 80116ac:	d0b9      	beq.n	8011622 <rmw_wait+0x21a>
 80116ae:	683c      	ldr	r4, [r7, #0]
 80116b0:	f04f 0801 	mov.w	r8, #1
 80116b4:	2c00      	cmp	r4, #0
 80116b6:	d19e      	bne.n	80115f6 <rmw_wait+0x1ee>
 80116b8:	e7b3      	b.n	8011622 <rmw_wait+0x21a>
 80116ba:	f1ba 0f00 	cmp.w	sl, #0
 80116be:	d0ea      	beq.n	8011696 <rmw_wait+0x28e>
 80116c0:	f8da 3000 	ldr.w	r3, [sl]
 80116c4:	46a8      	mov	r8, r5
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f47f af64 	bne.w	8011594 <rmw_wait+0x18c>
 80116cc:	2e00      	cmp	r6, #0
 80116ce:	f47f af72 	bne.w	80115b6 <rmw_wait+0x1ae>
 80116d2:	e009      	b.n	80116e8 <rmw_wait+0x2e0>
 80116d4:	f8da 2000 	ldr.w	r2, [sl]
 80116d8:	4698      	mov	r8, r3
 80116da:	2a00      	cmp	r2, #0
 80116dc:	f47f af5a 	bne.w	8011594 <rmw_wait+0x18c>
 80116e0:	4690      	mov	r8, r2
 80116e2:	2e00      	cmp	r6, #0
 80116e4:	f47f af67 	bne.w	80115b6 <rmw_wait+0x1ae>
 80116e8:	46b0      	mov	r8, r6
 80116ea:	2f00      	cmp	r7, #0
 80116ec:	d181      	bne.n	80115f2 <rmw_wait+0x1ea>
 80116ee:	e7d9      	b.n	80116a4 <rmw_wait+0x29c>
 80116f0:	2f00      	cmp	r7, #0
 80116f2:	d0d7      	beq.n	80116a4 <rmw_wait+0x29c>
 80116f4:	683c      	ldr	r4, [r7, #0]
 80116f6:	46b0      	mov	r8, r6
 80116f8:	2c00      	cmp	r4, #0
 80116fa:	f47f af7c 	bne.w	80115f6 <rmw_wait+0x1ee>
 80116fe:	e7d1      	b.n	80116a4 <rmw_wait+0x29c>
 8011700:	000f4240 	.word	0x000f4240
 8011704:	2000c400 	.word	0x2000c400

08011708 <rmw_create_wait_set>:
 8011708:	b508      	push	{r3, lr}
 801170a:	4803      	ldr	r0, [pc, #12]	; (8011718 <rmw_create_wait_set+0x10>)
 801170c:	f7ff f890 	bl	8010830 <get_memory>
 8011710:	b108      	cbz	r0, 8011716 <rmw_create_wait_set+0xe>
 8011712:	68c0      	ldr	r0, [r0, #12]
 8011714:	3010      	adds	r0, #16
 8011716:	bd08      	pop	{r3, pc}
 8011718:	2000dbd8 	.word	0x2000dbd8

0801171c <rmw_destroy_wait_set>:
 801171c:	b508      	push	{r3, lr}
 801171e:	4b08      	ldr	r3, [pc, #32]	; (8011740 <rmw_destroy_wait_set+0x24>)
 8011720:	6819      	ldr	r1, [r3, #0]
 8011722:	b911      	cbnz	r1, 801172a <rmw_destroy_wait_set+0xe>
 8011724:	e00a      	b.n	801173c <rmw_destroy_wait_set+0x20>
 8011726:	6889      	ldr	r1, [r1, #8]
 8011728:	b141      	cbz	r1, 801173c <rmw_destroy_wait_set+0x20>
 801172a:	68cb      	ldr	r3, [r1, #12]
 801172c:	3310      	adds	r3, #16
 801172e:	4298      	cmp	r0, r3
 8011730:	d1f9      	bne.n	8011726 <rmw_destroy_wait_set+0xa>
 8011732:	4803      	ldr	r0, [pc, #12]	; (8011740 <rmw_destroy_wait_set+0x24>)
 8011734:	f7ff f88c 	bl	8010850 <put_memory>
 8011738:	2000      	movs	r0, #0
 801173a:	bd08      	pop	{r3, pc}
 801173c:	2001      	movs	r0, #1
 801173e:	bd08      	pop	{r3, pc}
 8011740:	2000dbd8 	.word	0x2000dbd8

08011744 <rmw_uros_epoch_nanos>:
 8011744:	4b05      	ldr	r3, [pc, #20]	; (801175c <rmw_uros_epoch_nanos+0x18>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	b123      	cbz	r3, 8011754 <rmw_uros_epoch_nanos+0x10>
 801174a:	68d8      	ldr	r0, [r3, #12]
 801174c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011750:	f7fa bbf4 	b.w	800bf3c <uxr_epoch_nanos>
 8011754:	2000      	movs	r0, #0
 8011756:	2100      	movs	r1, #0
 8011758:	4770      	bx	lr
 801175a:	bf00      	nop
 801175c:	2000c400 	.word	0x2000c400

08011760 <ucdr_serialize_endian_array_char>:
 8011760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011764:	4619      	mov	r1, r3
 8011766:	461e      	mov	r6, r3
 8011768:	4690      	mov	r8, r2
 801176a:	4604      	mov	r4, r0
 801176c:	f7f8 fa24 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8011770:	b9e0      	cbnz	r0, 80117ac <ucdr_serialize_endian_array_char+0x4c>
 8011772:	4637      	mov	r7, r6
 8011774:	e009      	b.n	801178a <ucdr_serialize_endian_array_char+0x2a>
 8011776:	68a0      	ldr	r0, [r4, #8]
 8011778:	f001 fea0 	bl	80134bc <memcpy>
 801177c:	68a2      	ldr	r2, [r4, #8]
 801177e:	6923      	ldr	r3, [r4, #16]
 8011780:	442a      	add	r2, r5
 8011782:	442b      	add	r3, r5
 8011784:	1b7f      	subs	r7, r7, r5
 8011786:	60a2      	str	r2, [r4, #8]
 8011788:	6123      	str	r3, [r4, #16]
 801178a:	2201      	movs	r2, #1
 801178c:	4639      	mov	r1, r7
 801178e:	4620      	mov	r0, r4
 8011790:	f7f8 fa98 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 8011794:	1bf1      	subs	r1, r6, r7
 8011796:	4441      	add	r1, r8
 8011798:	4605      	mov	r5, r0
 801179a:	4602      	mov	r2, r0
 801179c:	2800      	cmp	r0, #0
 801179e:	d1ea      	bne.n	8011776 <ucdr_serialize_endian_array_char+0x16>
 80117a0:	2301      	movs	r3, #1
 80117a2:	7da0      	ldrb	r0, [r4, #22]
 80117a4:	7563      	strb	r3, [r4, #21]
 80117a6:	4058      	eors	r0, r3
 80117a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ac:	4632      	mov	r2, r6
 80117ae:	68a0      	ldr	r0, [r4, #8]
 80117b0:	4641      	mov	r1, r8
 80117b2:	f001 fe83 	bl	80134bc <memcpy>
 80117b6:	68a2      	ldr	r2, [r4, #8]
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	4432      	add	r2, r6
 80117bc:	4433      	add	r3, r6
 80117be:	60a2      	str	r2, [r4, #8]
 80117c0:	6123      	str	r3, [r4, #16]
 80117c2:	e7ed      	b.n	80117a0 <ucdr_serialize_endian_array_char+0x40>

080117c4 <ucdr_deserialize_endian_array_char>:
 80117c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c8:	4619      	mov	r1, r3
 80117ca:	461e      	mov	r6, r3
 80117cc:	4690      	mov	r8, r2
 80117ce:	4604      	mov	r4, r0
 80117d0:	f7f8 f9f2 	bl	8009bb8 <ucdr_check_buffer_available_for>
 80117d4:	b9e0      	cbnz	r0, 8011810 <ucdr_deserialize_endian_array_char+0x4c>
 80117d6:	4637      	mov	r7, r6
 80117d8:	e009      	b.n	80117ee <ucdr_deserialize_endian_array_char+0x2a>
 80117da:	68a1      	ldr	r1, [r4, #8]
 80117dc:	f001 fe6e 	bl	80134bc <memcpy>
 80117e0:	68a2      	ldr	r2, [r4, #8]
 80117e2:	6923      	ldr	r3, [r4, #16]
 80117e4:	442a      	add	r2, r5
 80117e6:	442b      	add	r3, r5
 80117e8:	1b7f      	subs	r7, r7, r5
 80117ea:	60a2      	str	r2, [r4, #8]
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	2201      	movs	r2, #1
 80117f0:	4639      	mov	r1, r7
 80117f2:	4620      	mov	r0, r4
 80117f4:	f7f8 fa66 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 80117f8:	4605      	mov	r5, r0
 80117fa:	1bf0      	subs	r0, r6, r7
 80117fc:	4440      	add	r0, r8
 80117fe:	462a      	mov	r2, r5
 8011800:	2d00      	cmp	r5, #0
 8011802:	d1ea      	bne.n	80117da <ucdr_deserialize_endian_array_char+0x16>
 8011804:	2301      	movs	r3, #1
 8011806:	7da0      	ldrb	r0, [r4, #22]
 8011808:	7563      	strb	r3, [r4, #21]
 801180a:	4058      	eors	r0, r3
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	4632      	mov	r2, r6
 8011812:	68a1      	ldr	r1, [r4, #8]
 8011814:	4640      	mov	r0, r8
 8011816:	f001 fe51 	bl	80134bc <memcpy>
 801181a:	68a2      	ldr	r2, [r4, #8]
 801181c:	6923      	ldr	r3, [r4, #16]
 801181e:	4432      	add	r2, r6
 8011820:	4433      	add	r3, r6
 8011822:	60a2      	str	r2, [r4, #8]
 8011824:	6123      	str	r3, [r4, #16]
 8011826:	e7ed      	b.n	8011804 <ucdr_deserialize_endian_array_char+0x40>

08011828 <ucdr_serialize_array_uint8_t>:
 8011828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801182c:	4688      	mov	r8, r1
 801182e:	4611      	mov	r1, r2
 8011830:	4616      	mov	r6, r2
 8011832:	4604      	mov	r4, r0
 8011834:	f7f8 f9c0 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8011838:	b9e0      	cbnz	r0, 8011874 <ucdr_serialize_array_uint8_t+0x4c>
 801183a:	4637      	mov	r7, r6
 801183c:	e009      	b.n	8011852 <ucdr_serialize_array_uint8_t+0x2a>
 801183e:	68a0      	ldr	r0, [r4, #8]
 8011840:	f001 fe3c 	bl	80134bc <memcpy>
 8011844:	68a2      	ldr	r2, [r4, #8]
 8011846:	6923      	ldr	r3, [r4, #16]
 8011848:	442a      	add	r2, r5
 801184a:	442b      	add	r3, r5
 801184c:	1b7f      	subs	r7, r7, r5
 801184e:	60a2      	str	r2, [r4, #8]
 8011850:	6123      	str	r3, [r4, #16]
 8011852:	2201      	movs	r2, #1
 8011854:	4639      	mov	r1, r7
 8011856:	4620      	mov	r0, r4
 8011858:	f7f8 fa34 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 801185c:	1bf1      	subs	r1, r6, r7
 801185e:	4441      	add	r1, r8
 8011860:	4605      	mov	r5, r0
 8011862:	4602      	mov	r2, r0
 8011864:	2800      	cmp	r0, #0
 8011866:	d1ea      	bne.n	801183e <ucdr_serialize_array_uint8_t+0x16>
 8011868:	2301      	movs	r3, #1
 801186a:	7da0      	ldrb	r0, [r4, #22]
 801186c:	7563      	strb	r3, [r4, #21]
 801186e:	4058      	eors	r0, r3
 8011870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011874:	4632      	mov	r2, r6
 8011876:	68a0      	ldr	r0, [r4, #8]
 8011878:	4641      	mov	r1, r8
 801187a:	f001 fe1f 	bl	80134bc <memcpy>
 801187e:	68a3      	ldr	r3, [r4, #8]
 8011880:	6922      	ldr	r2, [r4, #16]
 8011882:	4433      	add	r3, r6
 8011884:	4432      	add	r2, r6
 8011886:	60a3      	str	r3, [r4, #8]
 8011888:	6122      	str	r2, [r4, #16]
 801188a:	e7ed      	b.n	8011868 <ucdr_serialize_array_uint8_t+0x40>

0801188c <ucdr_serialize_endian_array_uint8_t>:
 801188c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011890:	4619      	mov	r1, r3
 8011892:	461e      	mov	r6, r3
 8011894:	4690      	mov	r8, r2
 8011896:	4604      	mov	r4, r0
 8011898:	f7f8 f98e 	bl	8009bb8 <ucdr_check_buffer_available_for>
 801189c:	b9e0      	cbnz	r0, 80118d8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801189e:	4637      	mov	r7, r6
 80118a0:	e009      	b.n	80118b6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80118a2:	68a0      	ldr	r0, [r4, #8]
 80118a4:	f001 fe0a 	bl	80134bc <memcpy>
 80118a8:	68a2      	ldr	r2, [r4, #8]
 80118aa:	6923      	ldr	r3, [r4, #16]
 80118ac:	442a      	add	r2, r5
 80118ae:	442b      	add	r3, r5
 80118b0:	1b7f      	subs	r7, r7, r5
 80118b2:	60a2      	str	r2, [r4, #8]
 80118b4:	6123      	str	r3, [r4, #16]
 80118b6:	2201      	movs	r2, #1
 80118b8:	4639      	mov	r1, r7
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7f8 fa02 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 80118c0:	1bf1      	subs	r1, r6, r7
 80118c2:	4441      	add	r1, r8
 80118c4:	4605      	mov	r5, r0
 80118c6:	4602      	mov	r2, r0
 80118c8:	2800      	cmp	r0, #0
 80118ca:	d1ea      	bne.n	80118a2 <ucdr_serialize_endian_array_uint8_t+0x16>
 80118cc:	2301      	movs	r3, #1
 80118ce:	7da0      	ldrb	r0, [r4, #22]
 80118d0:	7563      	strb	r3, [r4, #21]
 80118d2:	4058      	eors	r0, r3
 80118d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d8:	4632      	mov	r2, r6
 80118da:	68a0      	ldr	r0, [r4, #8]
 80118dc:	4641      	mov	r1, r8
 80118de:	f001 fded 	bl	80134bc <memcpy>
 80118e2:	68a2      	ldr	r2, [r4, #8]
 80118e4:	6923      	ldr	r3, [r4, #16]
 80118e6:	4432      	add	r2, r6
 80118e8:	4433      	add	r3, r6
 80118ea:	60a2      	str	r2, [r4, #8]
 80118ec:	6123      	str	r3, [r4, #16]
 80118ee:	e7ed      	b.n	80118cc <ucdr_serialize_endian_array_uint8_t+0x40>

080118f0 <ucdr_deserialize_array_uint8_t>:
 80118f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f4:	4688      	mov	r8, r1
 80118f6:	4611      	mov	r1, r2
 80118f8:	4616      	mov	r6, r2
 80118fa:	4604      	mov	r4, r0
 80118fc:	f7f8 f95c 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8011900:	b9e0      	cbnz	r0, 801193c <ucdr_deserialize_array_uint8_t+0x4c>
 8011902:	4637      	mov	r7, r6
 8011904:	e009      	b.n	801191a <ucdr_deserialize_array_uint8_t+0x2a>
 8011906:	68a1      	ldr	r1, [r4, #8]
 8011908:	f001 fdd8 	bl	80134bc <memcpy>
 801190c:	68a2      	ldr	r2, [r4, #8]
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	442a      	add	r2, r5
 8011912:	442b      	add	r3, r5
 8011914:	1b7f      	subs	r7, r7, r5
 8011916:	60a2      	str	r2, [r4, #8]
 8011918:	6123      	str	r3, [r4, #16]
 801191a:	2201      	movs	r2, #1
 801191c:	4639      	mov	r1, r7
 801191e:	4620      	mov	r0, r4
 8011920:	f7f8 f9d0 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 8011924:	4605      	mov	r5, r0
 8011926:	1bf0      	subs	r0, r6, r7
 8011928:	4440      	add	r0, r8
 801192a:	462a      	mov	r2, r5
 801192c:	2d00      	cmp	r5, #0
 801192e:	d1ea      	bne.n	8011906 <ucdr_deserialize_array_uint8_t+0x16>
 8011930:	2301      	movs	r3, #1
 8011932:	7da0      	ldrb	r0, [r4, #22]
 8011934:	7563      	strb	r3, [r4, #21]
 8011936:	4058      	eors	r0, r3
 8011938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193c:	4632      	mov	r2, r6
 801193e:	68a1      	ldr	r1, [r4, #8]
 8011940:	4640      	mov	r0, r8
 8011942:	f001 fdbb 	bl	80134bc <memcpy>
 8011946:	68a3      	ldr	r3, [r4, #8]
 8011948:	6922      	ldr	r2, [r4, #16]
 801194a:	4433      	add	r3, r6
 801194c:	4432      	add	r2, r6
 801194e:	60a3      	str	r3, [r4, #8]
 8011950:	6122      	str	r2, [r4, #16]
 8011952:	e7ed      	b.n	8011930 <ucdr_deserialize_array_uint8_t+0x40>

08011954 <ucdr_deserialize_endian_array_uint8_t>:
 8011954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011958:	4619      	mov	r1, r3
 801195a:	461e      	mov	r6, r3
 801195c:	4690      	mov	r8, r2
 801195e:	4604      	mov	r4, r0
 8011960:	f7f8 f92a 	bl	8009bb8 <ucdr_check_buffer_available_for>
 8011964:	b9e0      	cbnz	r0, 80119a0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011966:	4637      	mov	r7, r6
 8011968:	e009      	b.n	801197e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801196a:	68a1      	ldr	r1, [r4, #8]
 801196c:	f001 fda6 	bl	80134bc <memcpy>
 8011970:	68a2      	ldr	r2, [r4, #8]
 8011972:	6923      	ldr	r3, [r4, #16]
 8011974:	442a      	add	r2, r5
 8011976:	442b      	add	r3, r5
 8011978:	1b7f      	subs	r7, r7, r5
 801197a:	60a2      	str	r2, [r4, #8]
 801197c:	6123      	str	r3, [r4, #16]
 801197e:	2201      	movs	r2, #1
 8011980:	4639      	mov	r1, r7
 8011982:	4620      	mov	r0, r4
 8011984:	f7f8 f99e 	bl	8009cc4 <ucdr_check_final_buffer_behavior_array>
 8011988:	4605      	mov	r5, r0
 801198a:	1bf0      	subs	r0, r6, r7
 801198c:	4440      	add	r0, r8
 801198e:	462a      	mov	r2, r5
 8011990:	2d00      	cmp	r5, #0
 8011992:	d1ea      	bne.n	801196a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011994:	2301      	movs	r3, #1
 8011996:	7da0      	ldrb	r0, [r4, #22]
 8011998:	7563      	strb	r3, [r4, #21]
 801199a:	4058      	eors	r0, r3
 801199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119a0:	4632      	mov	r2, r6
 80119a2:	68a1      	ldr	r1, [r4, #8]
 80119a4:	4640      	mov	r0, r8
 80119a6:	f001 fd89 	bl	80134bc <memcpy>
 80119aa:	68a2      	ldr	r2, [r4, #8]
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	4432      	add	r2, r6
 80119b0:	4433      	add	r3, r6
 80119b2:	60a2      	str	r2, [r4, #8]
 80119b4:	6123      	str	r3, [r4, #16]
 80119b6:	e7ed      	b.n	8011994 <ucdr_deserialize_endian_array_uint8_t+0x40>

080119b8 <ucdr_serialize_sequence_char>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	460e      	mov	r6, r1
 80119bc:	4615      	mov	r5, r2
 80119be:	7d01      	ldrb	r1, [r0, #20]
 80119c0:	4604      	mov	r4, r0
 80119c2:	f7f7 fab9 	bl	8008f38 <ucdr_serialize_endian_uint32_t>
 80119c6:	b90d      	cbnz	r5, 80119cc <ucdr_serialize_sequence_char+0x14>
 80119c8:	2001      	movs	r0, #1
 80119ca:	bd70      	pop	{r4, r5, r6, pc}
 80119cc:	7d21      	ldrb	r1, [r4, #20]
 80119ce:	462b      	mov	r3, r5
 80119d0:	4632      	mov	r2, r6
 80119d2:	4620      	mov	r0, r4
 80119d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119d8:	f7ff bec2 	b.w	8011760 <ucdr_serialize_endian_array_char>

080119dc <ucdr_deserialize_sequence_char>:
 80119dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e0:	461d      	mov	r5, r3
 80119e2:	4616      	mov	r6, r2
 80119e4:	460f      	mov	r7, r1
 80119e6:	461a      	mov	r2, r3
 80119e8:	7d01      	ldrb	r1, [r0, #20]
 80119ea:	4604      	mov	r4, r0
 80119ec:	f7f7 fbcc 	bl	8009188 <ucdr_deserialize_endian_uint32_t>
 80119f0:	682b      	ldr	r3, [r5, #0]
 80119f2:	429e      	cmp	r6, r3
 80119f4:	bf3c      	itt	cc
 80119f6:	2201      	movcc	r2, #1
 80119f8:	75a2      	strbcc	r2, [r4, #22]
 80119fa:	b913      	cbnz	r3, 8011a02 <ucdr_deserialize_sequence_char+0x26>
 80119fc:	2001      	movs	r0, #1
 80119fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a02:	7d21      	ldrb	r1, [r4, #20]
 8011a04:	463a      	mov	r2, r7
 8011a06:	4620      	mov	r0, r4
 8011a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a0c:	f7ff beda 	b.w	80117c4 <ucdr_deserialize_endian_array_char>

08011a10 <ucdr_serialize_sequence_uint8_t>:
 8011a10:	b570      	push	{r4, r5, r6, lr}
 8011a12:	460e      	mov	r6, r1
 8011a14:	4615      	mov	r5, r2
 8011a16:	7d01      	ldrb	r1, [r0, #20]
 8011a18:	4604      	mov	r4, r0
 8011a1a:	f7f7 fa8d 	bl	8008f38 <ucdr_serialize_endian_uint32_t>
 8011a1e:	b90d      	cbnz	r5, 8011a24 <ucdr_serialize_sequence_uint8_t+0x14>
 8011a20:	2001      	movs	r0, #1
 8011a22:	bd70      	pop	{r4, r5, r6, pc}
 8011a24:	7d21      	ldrb	r1, [r4, #20]
 8011a26:	462b      	mov	r3, r5
 8011a28:	4632      	mov	r2, r6
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a30:	f7ff bf2c 	b.w	801188c <ucdr_serialize_endian_array_uint8_t>

08011a34 <ucdr_deserialize_sequence_uint8_t>:
 8011a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a38:	461d      	mov	r5, r3
 8011a3a:	4616      	mov	r6, r2
 8011a3c:	460f      	mov	r7, r1
 8011a3e:	461a      	mov	r2, r3
 8011a40:	7d01      	ldrb	r1, [r0, #20]
 8011a42:	4604      	mov	r4, r0
 8011a44:	f7f7 fba0 	bl	8009188 <ucdr_deserialize_endian_uint32_t>
 8011a48:	682b      	ldr	r3, [r5, #0]
 8011a4a:	429e      	cmp	r6, r3
 8011a4c:	bf3c      	itt	cc
 8011a4e:	2201      	movcc	r2, #1
 8011a50:	75a2      	strbcc	r2, [r4, #22]
 8011a52:	b913      	cbnz	r3, 8011a5a <ucdr_deserialize_sequence_uint8_t+0x26>
 8011a54:	2001      	movs	r0, #1
 8011a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a5a:	7d21      	ldrb	r1, [r4, #20]
 8011a5c:	463a      	mov	r2, r7
 8011a5e:	4620      	mov	r0, r4
 8011a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a64:	f7ff bf76 	b.w	8011954 <ucdr_deserialize_endian_array_uint8_t>

08011a68 <ucdr_serialize_string>:
 8011a68:	b510      	push	{r4, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	4608      	mov	r0, r1
 8011a70:	9101      	str	r1, [sp, #4]
 8011a72:	f7ee fbd7 	bl	8000224 <strlen>
 8011a76:	9901      	ldr	r1, [sp, #4]
 8011a78:	4602      	mov	r2, r0
 8011a7a:	3201      	adds	r2, #1
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	b002      	add	sp, #8
 8011a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a84:	f7ff bf98 	b.w	80119b8 <ucdr_serialize_sequence_char>

08011a88 <ucdr_deserialize_string>:
 8011a88:	b500      	push	{lr}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	ab01      	add	r3, sp, #4
 8011a8e:	f7ff ffa5 	bl	80119dc <ucdr_deserialize_sequence_char>
 8011a92:	b003      	add	sp, #12
 8011a94:	f85d fb04 	ldr.w	pc, [sp], #4

08011a98 <get_custom_error>:
 8011a98:	4b01      	ldr	r3, [pc, #4]	; (8011aa0 <get_custom_error+0x8>)
 8011a9a:	7818      	ldrb	r0, [r3, #0]
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	200091f8 	.word	0x200091f8

08011aa4 <recv_custom_msg>:
 8011aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa8:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011aac:	b089      	sub	sp, #36	; 0x24
 8011aae:	2600      	movs	r6, #0
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	9305      	str	r3, [sp, #20]
 8011ab4:	468a      	mov	sl, r1
 8011ab6:	4693      	mov	fp, r2
 8011ab8:	f88d 601e 	strb.w	r6, [sp, #30]
 8011abc:	b325      	cbz	r5, 8011b08 <recv_custom_msg+0x64>
 8011abe:	f200 2902 	addw	r9, r0, #514	; 0x202
 8011ac2:	f10d 081f 	add.w	r8, sp, #31
 8011ac6:	af05      	add	r7, sp, #20
 8011ac8:	f10d 061e 	add.w	r6, sp, #30
 8011acc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011ad0:	e002      	b.n	8011ad8 <recv_custom_msg+0x34>
 8011ad2:	9b05      	ldr	r3, [sp, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	dd0f      	ble.n	8011af8 <recv_custom_msg+0x54>
 8011ad8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011adc:	e9cd 5600 	strd	r5, r6, [sp]
 8011ae0:	4623      	mov	r3, r4
 8011ae2:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8011ae6:	4622      	mov	r2, r4
 8011ae8:	4648      	mov	r0, r9
 8011aea:	f000 ffb5 	bl	8012a58 <uxr_read_framed_msg>
 8011aee:	2800      	cmp	r0, #0
 8011af0:	d0ef      	beq.n	8011ad2 <recv_custom_msg+0x2e>
 8011af2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011af6:	b1b3      	cbz	r3, 8011b26 <recv_custom_msg+0x82>
 8011af8:	4b0f      	ldr	r3, [pc, #60]	; (8011b38 <recv_custom_msg+0x94>)
 8011afa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011afe:	701a      	strb	r2, [r3, #0]
 8011b00:	2000      	movs	r0, #0
 8011b02:	b009      	add	sp, #36	; 0x24
 8011b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b08:	f10d 021f 	add.w	r2, sp, #31
 8011b0c:	9200      	str	r2, [sp, #0]
 8011b0e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8011b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b16:	4601      	mov	r1, r0
 8011b18:	47a8      	blx	r5
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d0ec      	beq.n	8011af8 <recv_custom_msg+0x54>
 8011b1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d1e8      	bne.n	8011af8 <recv_custom_msg+0x54>
 8011b26:	f8cb 0000 	str.w	r0, [fp]
 8011b2a:	2001      	movs	r0, #1
 8011b2c:	f8ca 4000 	str.w	r4, [sl]
 8011b30:	b009      	add	sp, #36	; 0x24
 8011b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b36:	bf00      	nop
 8011b38:	200091f8 	.word	0x200091f8

08011b3c <send_custom_msg>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011b42:	b086      	sub	sp, #24
 8011b44:	4616      	mov	r6, r2
 8011b46:	b975      	cbnz	r5, 8011b66 <send_custom_msg+0x2a>
 8011b48:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8011b4c:	f10d 0317 	add.w	r3, sp, #23
 8011b50:	47a0      	blx	r4
 8011b52:	b108      	cbz	r0, 8011b58 <send_custom_msg+0x1c>
 8011b54:	42b0      	cmp	r0, r6
 8011b56:	d015      	beq.n	8011b84 <send_custom_msg+0x48>
 8011b58:	4b0c      	ldr	r3, [pc, #48]	; (8011b8c <send_custom_msg+0x50>)
 8011b5a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	2000      	movs	r0, #0
 8011b62:	b006      	add	sp, #24
 8011b64:	bd70      	pop	{r4, r5, r6, pc}
 8011b66:	460b      	mov	r3, r1
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f10d 0117 	add.w	r1, sp, #23
 8011b6e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011b72:	9600      	str	r6, [sp, #0]
 8011b74:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8011b78:	4602      	mov	r2, r0
 8011b7a:	f200 2002 	addw	r0, r0, #514	; 0x202
 8011b7e:	f000 fd83 	bl	8012688 <uxr_write_framed_msg>
 8011b82:	e7e6      	b.n	8011b52 <send_custom_msg+0x16>
 8011b84:	2001      	movs	r0, #1
 8011b86:	b006      	add	sp, #24
 8011b88:	bd70      	pop	{r4, r5, r6, pc}
 8011b8a:	bf00      	nop
 8011b8c:	200091f8 	.word	0x200091f8

08011b90 <uxr_set_custom_transport_callbacks>:
 8011b90:	b430      	push	{r4, r5}
 8011b92:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8011b96:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8011b9a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 8011b9e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8011ba2:	bc30      	pop	{r4, r5}
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop

08011ba8 <uxr_init_custom_transport>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8011bae:	b303      	cbz	r3, 8011bf2 <uxr_init_custom_transport+0x4a>
 8011bb0:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	b1e2      	cbz	r2, 8011bf2 <uxr_init_custom_transport+0x4a>
 8011bb8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8011bbc:	b1ca      	cbz	r2, 8011bf2 <uxr_init_custom_transport+0x4a>
 8011bbe:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8011bc2:	b1b2      	cbz	r2, 8011bf2 <uxr_init_custom_transport+0x4a>
 8011bc4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8011bc8:	4798      	blx	r3
 8011bca:	4605      	mov	r5, r0
 8011bcc:	b188      	cbz	r0, 8011bf2 <uxr_init_custom_transport+0x4a>
 8011bce:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8011bd2:	b98b      	cbnz	r3, 8011bf8 <uxr_init_custom_transport+0x50>
 8011bd4:	480b      	ldr	r0, [pc, #44]	; (8011c04 <uxr_init_custom_transport+0x5c>)
 8011bd6:	490c      	ldr	r1, [pc, #48]	; (8011c08 <uxr_init_custom_transport+0x60>)
 8011bd8:	4a0c      	ldr	r2, [pc, #48]	; (8011c0c <uxr_init_custom_transport+0x64>)
 8011bda:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8011bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011be2:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8011be6:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8011bea:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8011bee:	4628      	mov	r0, r5
 8011bf0:	bd38      	pop	{r3, r4, r5, pc}
 8011bf2:	2500      	movs	r5, #0
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	bd38      	pop	{r3, r4, r5, pc}
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	f204 2002 	addw	r0, r4, #514	; 0x202
 8011bfe:	f000 fd3d 	bl	801267c <uxr_init_framing_io>
 8011c02:	e7e7      	b.n	8011bd4 <uxr_init_custom_transport+0x2c>
 8011c04:	08011b3d 	.word	0x08011b3d
 8011c08:	08011aa5 	.word	0x08011aa5
 8011c0c:	08011a99 	.word	0x08011a99

08011c10 <uxr_close_custom_transport>:
 8011c10:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8011c14:	4718      	bx	r3
 8011c16:	bf00      	nop

08011c18 <uxr_init_input_best_effort_stream>:
 8011c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c1c:	8003      	strh	r3, [r0, #0]
 8011c1e:	4770      	bx	lr

08011c20 <uxr_reset_input_best_effort_stream>:
 8011c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c24:	8003      	strh	r3, [r0, #0]
 8011c26:	4770      	bx	lr

08011c28 <uxr_receive_best_effort_message>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	8800      	ldrh	r0, [r0, #0]
 8011c2e:	460d      	mov	r5, r1
 8011c30:	f000 fd0c 	bl	801264c <uxr_seq_num_cmp>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8011c3c:	bfb8      	it	lt
 8011c3e:	8025      	strhlt	r5, [r4, #0]
 8011c40:	bd38      	pop	{r3, r4, r5, pc}
 8011c42:	bf00      	nop

08011c44 <on_full_input_buffer>:
 8011c44:	b570      	push	{r4, r5, r6, lr}
 8011c46:	6802      	ldr	r2, [r0, #0]
 8011c48:	460d      	mov	r5, r1
 8011c4a:	6809      	ldr	r1, [r1, #0]
 8011c4c:	686c      	ldr	r4, [r5, #4]
 8011c4e:	1a53      	subs	r3, r2, r1
 8011c50:	4606      	mov	r6, r0
 8011c52:	8928      	ldrh	r0, [r5, #8]
 8011c54:	fbb4 f4f0 	udiv	r4, r4, r0
 8011c58:	fbb3 f3f4 	udiv	r3, r3, r4
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	fbb3 f2f0 	udiv	r2, r3, r0
 8011c64:	fb00 3312 	mls	r3, r0, r2, r3
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	fb04 f403 	mul.w	r4, r4, r3
 8011c6e:	1d23      	adds	r3, r4, #4
 8011c70:	440b      	add	r3, r1
 8011c72:	7d28      	ldrb	r0, [r5, #20]
 8011c74:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8011c78:	b110      	cbz	r0, 8011c80 <on_full_input_buffer+0x3c>
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	f843 0c04 	str.w	r0, [r3, #-4]
 8011c80:	2a03      	cmp	r2, #3
 8011c82:	d801      	bhi.n	8011c88 <on_full_input_buffer+0x44>
 8011c84:	2001      	movs	r0, #1
 8011c86:	bd70      	pop	{r4, r5, r6, pc}
 8011c88:	3408      	adds	r4, #8
 8011c8a:	6933      	ldr	r3, [r6, #16]
 8011c8c:	4421      	add	r1, r4
 8011c8e:	4630      	mov	r0, r6
 8011c90:	3a04      	subs	r2, #4
 8011c92:	f7f7 ffdb 	bl	8009c4c <ucdr_init_buffer_origin>
 8011c96:	4630      	mov	r0, r6
 8011c98:	4902      	ldr	r1, [pc, #8]	; (8011ca4 <on_full_input_buffer+0x60>)
 8011c9a:	462a      	mov	r2, r5
 8011c9c:	f7f7 ffb4 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 8011ca0:	2000      	movs	r0, #0
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	08011c45 	.word	0x08011c45

08011ca8 <uxr_init_input_reliable_stream>:
 8011ca8:	b470      	push	{r4, r5, r6}
 8011caa:	9c03      	ldr	r4, [sp, #12]
 8011cac:	6001      	str	r1, [r0, #0]
 8011cae:	2600      	movs	r6, #0
 8011cb0:	8103      	strh	r3, [r0, #8]
 8011cb2:	6042      	str	r2, [r0, #4]
 8011cb4:	6104      	str	r4, [r0, #16]
 8011cb6:	7506      	strb	r6, [r0, #20]
 8011cb8:	b1ab      	cbz	r3, 8011ce6 <uxr_init_input_reliable_stream+0x3e>
 8011cba:	600e      	str	r6, [r1, #0]
 8011cbc:	8901      	ldrh	r1, [r0, #8]
 8011cbe:	2901      	cmp	r1, #1
 8011cc0:	d911      	bls.n	8011ce6 <uxr_init_input_reliable_stream+0x3e>
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	e9d0 5400 	ldrd	r5, r4, [r0]
 8011cc8:	fbb2 f3f1 	udiv	r3, r2, r1
 8011ccc:	fb01 2313 	mls	r3, r1, r3, r2
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	fbb4 f1f1 	udiv	r1, r4, r1
 8011cd6:	fb03 f301 	mul.w	r3, r3, r1
 8011cda:	3201      	adds	r2, #1
 8011cdc:	50ee      	str	r6, [r5, r3]
 8011cde:	8901      	ldrh	r1, [r0, #8]
 8011ce0:	b292      	uxth	r2, r2
 8011ce2:	4291      	cmp	r1, r2
 8011ce4:	d8ee      	bhi.n	8011cc4 <uxr_init_input_reliable_stream+0x1c>
 8011ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cea:	bc70      	pop	{r4, r5, r6}
 8011cec:	60c3      	str	r3, [r0, #12]
 8011cee:	4770      	bx	lr

08011cf0 <uxr_reset_input_reliable_stream>:
 8011cf0:	8902      	ldrh	r2, [r0, #8]
 8011cf2:	b1ca      	cbz	r2, 8011d28 <uxr_reset_input_reliable_stream+0x38>
 8011cf4:	b470      	push	{r4, r5, r6}
 8011cf6:	2400      	movs	r4, #0
 8011cf8:	4621      	mov	r1, r4
 8011cfa:	4626      	mov	r6, r4
 8011cfc:	fbb1 f3f2 	udiv	r3, r1, r2
 8011d00:	fb02 1313 	mls	r3, r2, r3, r1
 8011d04:	e9d0 5100 	ldrd	r5, r1, [r0]
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	fbb1 f2f2 	udiv	r2, r1, r2
 8011d0e:	fb03 f302 	mul.w	r3, r3, r2
 8011d12:	3401      	adds	r4, #1
 8011d14:	50ee      	str	r6, [r5, r3]
 8011d16:	8902      	ldrh	r2, [r0, #8]
 8011d18:	b2a1      	uxth	r1, r4
 8011d1a:	428a      	cmp	r2, r1
 8011d1c:	d8ee      	bhi.n	8011cfc <uxr_reset_input_reliable_stream+0xc>
 8011d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d22:	bc70      	pop	{r4, r5, r6}
 8011d24:	60c3      	str	r3, [r0, #12]
 8011d26:	4770      	bx	lr
 8011d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d2c:	60c3      	str	r3, [r0, #12]
 8011d2e:	4770      	bx	lr

08011d30 <uxr_receive_reliable_message>:
 8011d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	460d      	mov	r5, r1
 8011d38:	8901      	ldrh	r1, [r0, #8]
 8011d3a:	8980      	ldrh	r0, [r0, #12]
 8011d3c:	4690      	mov	r8, r2
 8011d3e:	461f      	mov	r7, r3
 8011d40:	f000 fc7c 	bl	801263c <uxr_seq_num_add>
 8011d44:	4629      	mov	r1, r5
 8011d46:	4606      	mov	r6, r0
 8011d48:	89a0      	ldrh	r0, [r4, #12]
 8011d4a:	f000 fc7f 	bl	801264c <uxr_seq_num_cmp>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	db0a      	blt.n	8011d68 <uxr_receive_reliable_message+0x38>
 8011d52:	2600      	movs	r6, #0
 8011d54:	89e0      	ldrh	r0, [r4, #14]
 8011d56:	4629      	mov	r1, r5
 8011d58:	f000 fc78 	bl	801264c <uxr_seq_num_cmp>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	bfb8      	it	lt
 8011d60:	81e5      	strhlt	r5, [r4, #14]
 8011d62:	4630      	mov	r0, r6
 8011d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d68:	4630      	mov	r0, r6
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	f000 fc6e 	bl	801264c <uxr_seq_num_cmp>
 8011d70:	2800      	cmp	r0, #0
 8011d72:	dbee      	blt.n	8011d52 <uxr_receive_reliable_message+0x22>
 8011d74:	6923      	ldr	r3, [r4, #16]
 8011d76:	4640      	mov	r0, r8
 8011d78:	4798      	blx	r3
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	4681      	mov	r9, r0
 8011d7e:	89a0      	ldrh	r0, [r4, #12]
 8011d80:	f000 fc5c 	bl	801263c <uxr_seq_num_add>
 8011d84:	f1b9 0f00 	cmp.w	r9, #0
 8011d88:	d101      	bne.n	8011d8e <uxr_receive_reliable_message+0x5e>
 8011d8a:	4285      	cmp	r5, r0
 8011d8c:	d049      	beq.n	8011e22 <uxr_receive_reliable_message+0xf2>
 8011d8e:	8921      	ldrh	r1, [r4, #8]
 8011d90:	fbb5 f3f1 	udiv	r3, r5, r1
 8011d94:	fb01 5313 	mls	r3, r1, r3, r5
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	6862      	ldr	r2, [r4, #4]
 8011d9c:	6820      	ldr	r0, [r4, #0]
 8011d9e:	fbb2 f2f1 	udiv	r2, r2, r1
 8011da2:	fb03 f302 	mul.w	r3, r3, r2
 8011da6:	3304      	adds	r3, #4
 8011da8:	4418      	add	r0, r3
 8011daa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d1cf      	bne.n	8011d52 <uxr_receive_reliable_message+0x22>
 8011db2:	4641      	mov	r1, r8
 8011db4:	463a      	mov	r2, r7
 8011db6:	f001 fb81 	bl	80134bc <memcpy>
 8011dba:	8921      	ldrh	r1, [r4, #8]
 8011dbc:	fbb5 f3f1 	udiv	r3, r5, r1
 8011dc0:	fb01 5313 	mls	r3, r1, r3, r5
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	6862      	ldr	r2, [r4, #4]
 8011dc8:	fbb2 f2f1 	udiv	r2, r2, r1
 8011dcc:	6821      	ldr	r1, [r4, #0]
 8011dce:	fb03 f302 	mul.w	r3, r3, r2
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	50cf      	str	r7, [r1, r3]
 8011dd6:	9b08      	ldr	r3, [sp, #32]
 8011dd8:	701a      	strb	r2, [r3, #0]
 8011dda:	f1b9 0f00 	cmp.w	r9, #0
 8011dde:	d0b8      	beq.n	8011d52 <uxr_receive_reliable_message+0x22>
 8011de0:	89a6      	ldrh	r6, [r4, #12]
 8011de2:	e001      	b.n	8011de8 <uxr_receive_reliable_message+0xb8>
 8011de4:	2801      	cmp	r0, #1
 8011de6:	d1b4      	bne.n	8011d52 <uxr_receive_reliable_message+0x22>
 8011de8:	4630      	mov	r0, r6
 8011dea:	2101      	movs	r1, #1
 8011dec:	f000 fc26 	bl	801263c <uxr_seq_num_add>
 8011df0:	8921      	ldrh	r1, [r4, #8]
 8011df2:	fbb0 f3f1 	udiv	r3, r0, r1
 8011df6:	fb01 0313 	mls	r3, r1, r3, r0
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	6862      	ldr	r2, [r4, #4]
 8011dfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8011e02:	4606      	mov	r6, r0
 8011e04:	fb03 f302 	mul.w	r3, r3, r2
 8011e08:	6820      	ldr	r0, [r4, #0]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	4418      	add	r0, r3
 8011e0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d09d      	beq.n	8011d52 <uxr_receive_reliable_message+0x22>
 8011e16:	6923      	ldr	r3, [r4, #16]
 8011e18:	4798      	blx	r3
 8011e1a:	2802      	cmp	r0, #2
 8011e1c:	d1e2      	bne.n	8011de4 <uxr_receive_reliable_message+0xb4>
 8011e1e:	2601      	movs	r6, #1
 8011e20:	e798      	b.n	8011d54 <uxr_receive_reliable_message+0x24>
 8011e22:	9b08      	ldr	r3, [sp, #32]
 8011e24:	81a5      	strh	r5, [r4, #12]
 8011e26:	2601      	movs	r6, #1
 8011e28:	f883 9000 	strb.w	r9, [r3]
 8011e2c:	e792      	b.n	8011d54 <uxr_receive_reliable_message+0x24>
 8011e2e:	bf00      	nop

08011e30 <uxr_next_input_reliable_buffer_available>:
 8011e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e34:	4604      	mov	r4, r0
 8011e36:	460e      	mov	r6, r1
 8011e38:	8980      	ldrh	r0, [r0, #12]
 8011e3a:	2101      	movs	r1, #1
 8011e3c:	4617      	mov	r7, r2
 8011e3e:	f000 fbfd 	bl	801263c <uxr_seq_num_add>
 8011e42:	8921      	ldrh	r1, [r4, #8]
 8011e44:	fbb0 f3f1 	udiv	r3, r0, r1
 8011e48:	fb01 0313 	mls	r3, r1, r3, r0
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	6862      	ldr	r2, [r4, #4]
 8011e50:	fbb2 f2f1 	udiv	r2, r2, r1
 8011e54:	fb03 f302 	mul.w	r3, r3, r2
 8011e58:	6822      	ldr	r2, [r4, #0]
 8011e5a:	3304      	adds	r3, #4
 8011e5c:	eb02 0803 	add.w	r8, r2, r3
 8011e60:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8011e64:	f1b9 0f00 	cmp.w	r9, #0
 8011e68:	d025      	beq.n	8011eb6 <uxr_next_input_reliable_buffer_available+0x86>
 8011e6a:	6923      	ldr	r3, [r4, #16]
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	4640      	mov	r0, r8
 8011e70:	4798      	blx	r3
 8011e72:	4682      	mov	sl, r0
 8011e74:	b310      	cbz	r0, 8011ebc <uxr_next_input_reliable_buffer_available+0x8c>
 8011e76:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011e7a:	e005      	b.n	8011e88 <uxr_next_input_reliable_buffer_available+0x58>
 8011e7c:	6923      	ldr	r3, [r4, #16]
 8011e7e:	4798      	blx	r3
 8011e80:	2802      	cmp	r0, #2
 8011e82:	d032      	beq.n	8011eea <uxr_next_input_reliable_buffer_available+0xba>
 8011e84:	2801      	cmp	r0, #1
 8011e86:	d116      	bne.n	8011eb6 <uxr_next_input_reliable_buffer_available+0x86>
 8011e88:	4650      	mov	r0, sl
 8011e8a:	2101      	movs	r1, #1
 8011e8c:	f000 fbd6 	bl	801263c <uxr_seq_num_add>
 8011e90:	8921      	ldrh	r1, [r4, #8]
 8011e92:	fbb0 f3f1 	udiv	r3, r0, r1
 8011e96:	fb01 0313 	mls	r3, r1, r3, r0
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	6862      	ldr	r2, [r4, #4]
 8011e9e:	fbb2 f2f1 	udiv	r2, r2, r1
 8011ea2:	4682      	mov	sl, r0
 8011ea4:	fb03 f302 	mul.w	r3, r3, r2
 8011ea8:	6820      	ldr	r0, [r4, #0]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	4418      	add	r0, r3
 8011eae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1e2      	bne.n	8011e7c <uxr_next_input_reliable_buffer_available+0x4c>
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ebc:	464a      	mov	r2, r9
 8011ebe:	4641      	mov	r1, r8
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	f7f7 fecb 	bl	8009c5c <ucdr_init_buffer>
 8011ec6:	8921      	ldrh	r1, [r4, #8]
 8011ec8:	fbb5 f3f1 	udiv	r3, r5, r1
 8011ecc:	fb01 5313 	mls	r3, r1, r3, r5
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	6862      	ldr	r2, [r4, #4]
 8011ed4:	fbb2 f2f1 	udiv	r2, r2, r1
 8011ed8:	6821      	ldr	r1, [r4, #0]
 8011eda:	fb03 f302 	mul.w	r3, r3, r2
 8011ede:	2001      	movs	r0, #1
 8011ee0:	f841 a003 	str.w	sl, [r1, r3]
 8011ee4:	81a5      	strh	r5, [r4, #12]
 8011ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eea:	8922      	ldrh	r2, [r4, #8]
 8011eec:	fbb5 f0f2 	udiv	r0, r5, r2
 8011ef0:	fb02 5510 	mls	r5, r2, r0, r5
 8011ef4:	b2ad      	uxth	r5, r5
 8011ef6:	6863      	ldr	r3, [r4, #4]
 8011ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011efc:	fb05 f503 	mul.w	r5, r5, r3
 8011f00:	6823      	ldr	r3, [r4, #0]
 8011f02:	2000      	movs	r0, #0
 8011f04:	5158      	str	r0, [r3, r5]
 8011f06:	eba9 0207 	sub.w	r2, r9, r7
 8011f0a:	eb08 0107 	add.w	r1, r8, r7
 8011f0e:	4630      	mov	r0, r6
 8011f10:	f7f7 fea4 	bl	8009c5c <ucdr_init_buffer>
 8011f14:	4630      	mov	r0, r6
 8011f16:	4904      	ldr	r1, [pc, #16]	; (8011f28 <uxr_next_input_reliable_buffer_available+0xf8>)
 8011f18:	4622      	mov	r2, r4
 8011f1a:	f7f7 fe75 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 8011f1e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8011f22:	2001      	movs	r0, #1
 8011f24:	e7c8      	b.n	8011eb8 <uxr_next_input_reliable_buffer_available+0x88>
 8011f26:	bf00      	nop
 8011f28:	08011c45 	.word	0x08011c45

08011f2c <uxr_process_heartbeat>:
 8011f2c:	b538      	push	{r3, r4, r5, lr}
 8011f2e:	4611      	mov	r1, r2
 8011f30:	4604      	mov	r4, r0
 8011f32:	89c0      	ldrh	r0, [r0, #14]
 8011f34:	4615      	mov	r5, r2
 8011f36:	f000 fb89 	bl	801264c <uxr_seq_num_cmp>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	bfb8      	it	lt
 8011f3e:	81e5      	strhlt	r5, [r4, #14]
 8011f40:	bd38      	pop	{r3, r4, r5, pc}
 8011f42:	bf00      	nop

08011f44 <uxr_compute_acknack>:
 8011f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f48:	8903      	ldrh	r3, [r0, #8]
 8011f4a:	8986      	ldrh	r6, [r0, #12]
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	460d      	mov	r5, r1
 8011f50:	b1d3      	cbz	r3, 8011f88 <uxr_compute_acknack+0x44>
 8011f52:	4630      	mov	r0, r6
 8011f54:	2701      	movs	r7, #1
 8011f56:	e003      	b.n	8011f60 <uxr_compute_acknack+0x1c>
 8011f58:	4567      	cmp	r7, ip
 8011f5a:	d215      	bcs.n	8011f88 <uxr_compute_acknack+0x44>
 8011f5c:	89a0      	ldrh	r0, [r4, #12]
 8011f5e:	3701      	adds	r7, #1
 8011f60:	b2b9      	uxth	r1, r7
 8011f62:	f000 fb6b 	bl	801263c <uxr_seq_num_add>
 8011f66:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011f6a:	fbb0 f2fc 	udiv	r2, r0, ip
 8011f6e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011f72:	fb0c 0212 	mls	r2, ip, r2, r0
 8011f76:	b292      	uxth	r2, r2
 8011f78:	fbb3 f3fc 	udiv	r3, r3, ip
 8011f7c:	fb02 1303 	mla	r3, r2, r3, r1
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1e8      	bne.n	8011f58 <uxr_compute_acknack+0x14>
 8011f86:	4606      	mov	r6, r0
 8011f88:	802e      	strh	r6, [r5, #0]
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	2101      	movs	r1, #1
 8011f8e:	89e6      	ldrh	r6, [r4, #14]
 8011f90:	f000 fb58 	bl	8012644 <uxr_seq_num_sub>
 8011f94:	4601      	mov	r1, r0
 8011f96:	4630      	mov	r0, r6
 8011f98:	f000 fb54 	bl	8012644 <uxr_seq_num_sub>
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	b318      	cbz	r0, 8011fe8 <uxr_compute_acknack+0xa4>
 8011fa0:	f04f 0900 	mov.w	r9, #0
 8011fa4:	464f      	mov	r7, r9
 8011fa6:	f04f 0801 	mov.w	r8, #1
 8011faa:	fa1f f189 	uxth.w	r1, r9
 8011fae:	8828      	ldrh	r0, [r5, #0]
 8011fb0:	f000 fb44 	bl	801263c <uxr_seq_num_add>
 8011fb4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011fb8:	6822      	ldr	r2, [r4, #0]
 8011fba:	fbb0 f1fc 	udiv	r1, r0, ip
 8011fbe:	fb01 011c 	mls	r1, r1, ip, r0
 8011fc2:	b289      	uxth	r1, r1
 8011fc4:	6863      	ldr	r3, [r4, #4]
 8011fc6:	fbb3 f3fc 	udiv	r3, r3, ip
 8011fca:	fb01 2303 	mla	r3, r1, r3, r2
 8011fce:	fa08 f209 	lsl.w	r2, r8, r9
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f109 0901 	add.w	r9, r9, #1
 8011fd8:	b90b      	cbnz	r3, 8011fde <uxr_compute_acknack+0x9a>
 8011fda:	4317      	orrs	r7, r2
 8011fdc:	b2bf      	uxth	r7, r7
 8011fde:	454e      	cmp	r6, r9
 8011fe0:	d1e3      	bne.n	8011faa <uxr_compute_acknack+0x66>
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fe8:	4607      	mov	r7, r0
 8011fea:	4638      	mov	r0, r7
 8011fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011ff0 <uxr_init_output_best_effort_stream>:
 8011ff0:	b410      	push	{r4}
 8011ff2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8011ff6:	81c4      	strh	r4, [r0, #14]
 8011ff8:	e9c0 1300 	strd	r1, r3, [r0]
 8011ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012000:	7303      	strb	r3, [r0, #12]
 8012002:	6082      	str	r2, [r0, #8]
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop

08012008 <uxr_reset_output_best_effort_stream>:
 8012008:	7b02      	ldrb	r2, [r0, #12]
 801200a:	6042      	str	r2, [r0, #4]
 801200c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012010:	81c3      	strh	r3, [r0, #14]
 8012012:	4770      	bx	lr

08012014 <uxr_prepare_best_effort_buffer_to_write>:
 8012014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012016:	4604      	mov	r4, r0
 8012018:	b083      	sub	sp, #12
 801201a:	6840      	ldr	r0, [r0, #4]
 801201c:	460d      	mov	r5, r1
 801201e:	4616      	mov	r6, r2
 8012020:	f7fb f898 	bl	800d154 <uxr_submessage_padding>
 8012024:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8012028:	4410      	add	r0, r2
 801202a:	1942      	adds	r2, r0, r5
 801202c:	4293      	cmp	r3, r2
 801202e:	bf2c      	ite	cs
 8012030:	2701      	movcs	r7, #1
 8012032:	2700      	movcc	r7, #0
 8012034:	d202      	bcs.n	801203c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8012036:	4638      	mov	r0, r7
 8012038:	b003      	add	sp, #12
 801203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801203c:	9000      	str	r0, [sp, #0]
 801203e:	6821      	ldr	r1, [r4, #0]
 8012040:	4630      	mov	r0, r6
 8012042:	2300      	movs	r3, #0
 8012044:	f7f7 fdf8 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 8012048:	6861      	ldr	r1, [r4, #4]
 801204a:	4638      	mov	r0, r7
 801204c:	4429      	add	r1, r5
 801204e:	6061      	str	r1, [r4, #4]
 8012050:	b003      	add	sp, #12
 8012052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012054 <uxr_prepare_best_effort_buffer_to_send>:
 8012054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012058:	6845      	ldr	r5, [r0, #4]
 801205a:	4604      	mov	r4, r0
 801205c:	7b00      	ldrb	r0, [r0, #12]
 801205e:	4285      	cmp	r5, r0
 8012060:	bf8c      	ite	hi
 8012062:	2701      	movhi	r7, #1
 8012064:	2700      	movls	r7, #0
 8012066:	d802      	bhi.n	801206e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8012068:	4638      	mov	r0, r7
 801206a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206e:	4688      	mov	r8, r1
 8012070:	89e0      	ldrh	r0, [r4, #14]
 8012072:	2101      	movs	r1, #1
 8012074:	4615      	mov	r5, r2
 8012076:	461e      	mov	r6, r3
 8012078:	f000 fae0 	bl	801263c <uxr_seq_num_add>
 801207c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012080:	81e0      	strh	r0, [r4, #14]
 8012082:	8030      	strh	r0, [r6, #0]
 8012084:	f8c8 2000 	str.w	r2, [r8]
 8012088:	602b      	str	r3, [r5, #0]
 801208a:	7b23      	ldrb	r3, [r4, #12]
 801208c:	6063      	str	r3, [r4, #4]
 801208e:	4638      	mov	r0, r7
 8012090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012094 <on_full_output_buffer>:
 8012094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012096:	6802      	ldr	r2, [r0, #0]
 8012098:	460d      	mov	r5, r1
 801209a:	6809      	ldr	r1, [r1, #0]
 801209c:	892f      	ldrh	r7, [r5, #8]
 801209e:	686c      	ldr	r4, [r5, #4]
 80120a0:	fbb4 f4f7 	udiv	r4, r4, r7
 80120a4:	1a53      	subs	r3, r2, r1
 80120a6:	fbb3 f3f4 	udiv	r3, r3, r4
 80120aa:	3301      	adds	r3, #1
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	fbb3 f2f7 	udiv	r2, r3, r7
 80120b2:	fb07 3312 	mls	r3, r7, r2, r3
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	fb04 f403 	mul.w	r4, r4, r3
 80120bc:	7b2f      	ldrb	r7, [r5, #12]
 80120be:	590a      	ldr	r2, [r1, r4]
 80120c0:	6903      	ldr	r3, [r0, #16]
 80120c2:	443c      	add	r4, r7
 80120c4:	3408      	adds	r4, #8
 80120c6:	1bd2      	subs	r2, r2, r7
 80120c8:	4606      	mov	r6, r0
 80120ca:	4421      	add	r1, r4
 80120cc:	3a04      	subs	r2, #4
 80120ce:	f7f7 fdbd 	bl	8009c4c <ucdr_init_buffer_origin>
 80120d2:	4630      	mov	r0, r6
 80120d4:	4902      	ldr	r1, [pc, #8]	; (80120e0 <on_full_output_buffer+0x4c>)
 80120d6:	462a      	mov	r2, r5
 80120d8:	f7f7 fd96 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 80120dc:	2000      	movs	r0, #0
 80120de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120e0:	08012095 	.word	0x08012095

080120e4 <uxr_init_output_reliable_stream>:
 80120e4:	b430      	push	{r4, r5}
 80120e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80120ea:	6001      	str	r1, [r0, #0]
 80120ec:	8103      	strh	r3, [r0, #8]
 80120ee:	6042      	str	r2, [r0, #4]
 80120f0:	7304      	strb	r4, [r0, #12]
 80120f2:	b1b3      	cbz	r3, 8012122 <uxr_init_output_reliable_stream+0x3e>
 80120f4:	600c      	str	r4, [r1, #0]
 80120f6:	8901      	ldrh	r1, [r0, #8]
 80120f8:	2901      	cmp	r1, #1
 80120fa:	d912      	bls.n	8012122 <uxr_init_output_reliable_stream+0x3e>
 80120fc:	2201      	movs	r2, #1
 80120fe:	e9d0 5400 	ldrd	r5, r4, [r0]
 8012102:	fbb2 f3f1 	udiv	r3, r2, r1
 8012106:	fb01 2313 	mls	r3, r1, r3, r2
 801210a:	b29b      	uxth	r3, r3
 801210c:	fbb4 f1f1 	udiv	r1, r4, r1
 8012110:	fb03 f301 	mul.w	r3, r3, r1
 8012114:	7b01      	ldrb	r1, [r0, #12]
 8012116:	50e9      	str	r1, [r5, r3]
 8012118:	3201      	adds	r2, #1
 801211a:	8901      	ldrh	r1, [r0, #8]
 801211c:	b292      	uxth	r2, r2
 801211e:	4291      	cmp	r1, r2
 8012120:	d8ed      	bhi.n	80120fe <uxr_init_output_reliable_stream+0x1a>
 8012122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012126:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801212a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801212e:	4b05      	ldr	r3, [pc, #20]	; (8012144 <uxr_init_output_reliable_stream+0x60>)
 8012130:	f8c0 300e 	str.w	r3, [r0, #14]
 8012134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012138:	2300      	movs	r3, #0
 801213a:	bc30      	pop	{r4, r5}
 801213c:	8242      	strh	r2, [r0, #18]
 801213e:	8403      	strh	r3, [r0, #32]
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	ffff0000 	.word	0xffff0000

08012148 <uxr_reset_output_reliable_stream>:
 8012148:	8902      	ldrh	r2, [r0, #8]
 801214a:	b430      	push	{r4, r5}
 801214c:	b19a      	cbz	r2, 8012176 <uxr_reset_output_reliable_stream+0x2e>
 801214e:	2400      	movs	r4, #0
 8012150:	4621      	mov	r1, r4
 8012152:	fbb1 f3f2 	udiv	r3, r1, r2
 8012156:	fb02 1313 	mls	r3, r2, r3, r1
 801215a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801215e:	b29b      	uxth	r3, r3
 8012160:	fbb1 f2f2 	udiv	r2, r1, r2
 8012164:	fb03 f302 	mul.w	r3, r3, r2
 8012168:	7b02      	ldrb	r2, [r0, #12]
 801216a:	50ea      	str	r2, [r5, r3]
 801216c:	3401      	adds	r4, #1
 801216e:	8902      	ldrh	r2, [r0, #8]
 8012170:	b2a1      	uxth	r1, r4
 8012172:	428a      	cmp	r2, r1
 8012174:	d8ed      	bhi.n	8012152 <uxr_reset_output_reliable_stream+0xa>
 8012176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801217a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801217e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8012182:	4b05      	ldr	r3, [pc, #20]	; (8012198 <uxr_reset_output_reliable_stream+0x50>)
 8012184:	f8c0 300e 	str.w	r3, [r0, #14]
 8012188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801218c:	2300      	movs	r3, #0
 801218e:	bc30      	pop	{r4, r5}
 8012190:	8242      	strh	r2, [r0, #18]
 8012192:	8403      	strh	r3, [r0, #32]
 8012194:	4770      	bx	lr
 8012196:	bf00      	nop
 8012198:	ffff0000 	.word	0xffff0000

0801219c <uxr_prepare_reliable_buffer_to_write>:
 801219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a0:	4604      	mov	r4, r0
 80121a2:	89c6      	ldrh	r6, [r0, #14]
 80121a4:	8900      	ldrh	r0, [r0, #8]
 80121a6:	f8d4 c000 	ldr.w	ip, [r4]
 80121aa:	fbb6 f3f0 	udiv	r3, r6, r0
 80121ae:	fb00 6313 	mls	r3, r0, r3, r6
 80121b2:	b091      	sub	sp, #68	; 0x44
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	6865      	ldr	r5, [r4, #4]
 80121b8:	fbb5 f5f0 	udiv	r5, r5, r0
 80121bc:	fb05 c303 	mla	r3, r5, r3, ip
 80121c0:	9204      	str	r2, [sp, #16]
 80121c2:	1d1a      	adds	r2, r3, #4
 80121c4:	f8d3 8000 	ldr.w	r8, [r3]
 80121c8:	f894 900c 	ldrb.w	r9, [r4, #12]
 80121cc:	9203      	str	r2, [sp, #12]
 80121ce:	468b      	mov	fp, r1
 80121d0:	1f2f      	subs	r7, r5, #4
 80121d2:	2800      	cmp	r0, #0
 80121d4:	f000 814e 	beq.w	8012474 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 80121d8:	f04f 0e00 	mov.w	lr, #0
 80121dc:	46f2      	mov	sl, lr
 80121de:	4672      	mov	r2, lr
 80121e0:	fbb2 f3f0 	udiv	r3, r2, r0
 80121e4:	fb00 2313 	mls	r3, r0, r3, r2
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	fb05 c303 	mla	r3, r5, r3, ip
 80121ee:	f10e 0e01 	add.w	lr, lr, #1
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	454b      	cmp	r3, r9
 80121f6:	bf08      	it	eq
 80121f8:	f10a 0a01 	addeq.w	sl, sl, #1
 80121fc:	fa1f f28e 	uxth.w	r2, lr
 8012200:	bf08      	it	eq
 8012202:	fa1f fa8a 	uxtheq.w	sl, sl
 8012206:	4282      	cmp	r2, r0
 8012208:	d3ea      	bcc.n	80121e0 <uxr_prepare_reliable_buffer_to_write+0x44>
 801220a:	4640      	mov	r0, r8
 801220c:	2104      	movs	r1, #4
 801220e:	f8cd a014 	str.w	sl, [sp, #20]
 8012212:	f7f7 fd27 	bl	8009c64 <ucdr_alignment>
 8012216:	4480      	add	r8, r0
 8012218:	eb08 020b 	add.w	r2, r8, fp
 801221c:	42ba      	cmp	r2, r7
 801221e:	f240 80cf 	bls.w	80123c0 <uxr_prepare_reliable_buffer_to_write+0x224>
 8012222:	7b22      	ldrb	r2, [r4, #12]
 8012224:	445a      	add	r2, fp
 8012226:	42ba      	cmp	r2, r7
 8012228:	f240 80b7 	bls.w	801239a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801222c:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8012230:	33fc      	adds	r3, #252	; 0xfc
 8012232:	b2ba      	uxth	r2, r7
 8012234:	4413      	add	r3, r2
 8012236:	b29b      	uxth	r3, r3
 8012238:	fb0a f903 	mul.w	r9, sl, r3
 801223c:	45d9      	cmp	r9, fp
 801223e:	9305      	str	r3, [sp, #20]
 8012240:	9306      	str	r3, [sp, #24]
 8012242:	f0c0 80b9 	bcc.w	80123b8 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8012246:	f108 0304 	add.w	r3, r8, #4
 801224a:	42bb      	cmp	r3, r7
 801224c:	f080 80dd 	bcs.w	801240a <uxr_prepare_reliable_buffer_to_write+0x26e>
 8012250:	f1a2 0904 	sub.w	r9, r2, #4
 8012254:	eba9 0908 	sub.w	r9, r9, r8
 8012258:	9b05      	ldr	r3, [sp, #20]
 801225a:	fa1f f989 	uxth.w	r9, r9
 801225e:	ebab 0b09 	sub.w	fp, fp, r9
 8012262:	fbbb f2f3 	udiv	r2, fp, r3
 8012266:	fb03 b312 	mls	r3, r3, r2, fp
 801226a:	2b00      	cmp	r3, #0
 801226c:	f000 80ca 	beq.w	8012404 <uxr_prepare_reliable_buffer_to_write+0x268>
 8012270:	3201      	adds	r2, #1
 8012272:	b292      	uxth	r2, r2
 8012274:	4611      	mov	r1, r2
 8012276:	9306      	str	r3, [sp, #24]
 8012278:	4551      	cmp	r1, sl
 801227a:	f200 809d 	bhi.w	80123b8 <uxr_prepare_reliable_buffer_to_write+0x21c>
 801227e:	f10d 0b20 	add.w	fp, sp, #32
 8012282:	2900      	cmp	r1, #0
 8012284:	d042      	beq.n	801230c <uxr_prepare_reliable_buffer_to_write+0x170>
 8012286:	f8cd 801c 	str.w	r8, [sp, #28]
 801228a:	f04f 0a00 	mov.w	sl, #0
 801228e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012292:	9505      	str	r5, [sp, #20]
 8012294:	f10d 0b20 	add.w	fp, sp, #32
 8012298:	460d      	mov	r5, r1
 801229a:	e000      	b.n	801229e <uxr_prepare_reliable_buffer_to_write+0x102>
 801229c:	46c1      	mov	r9, r8
 801229e:	8920      	ldrh	r0, [r4, #8]
 80122a0:	fbb6 f1f0 	udiv	r1, r6, r0
 80122a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80122a8:	fb00 6111 	mls	r1, r0, r1, r6
 80122ac:	b289      	uxth	r1, r1
 80122ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80122b2:	fb01 f102 	mul.w	r1, r1, r2
 80122b6:	3104      	adds	r1, #4
 80122b8:	4419      	add	r1, r3
 80122ba:	463a      	mov	r2, r7
 80122bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	4658      	mov	r0, fp
 80122c4:	2300      	movs	r3, #0
 80122c6:	f7f7 fcb7 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 80122ca:	464a      	mov	r2, r9
 80122cc:	2300      	movs	r3, #0
 80122ce:	210d      	movs	r1, #13
 80122d0:	4658      	mov	r0, fp
 80122d2:	f7fa feff 	bl	800d0d4 <uxr_buffer_submessage_header>
 80122d6:	8920      	ldrh	r0, [r4, #8]
 80122d8:	fbb6 f3f0 	udiv	r3, r6, r0
 80122dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80122e0:	fb00 6313 	mls	r3, r0, r3, r6
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	fbb1 f1f0 	udiv	r1, r1, r0
 80122ea:	fb03 f301 	mul.w	r3, r3, r1
 80122ee:	4630      	mov	r0, r6
 80122f0:	50d7      	str	r7, [r2, r3]
 80122f2:	2101      	movs	r1, #1
 80122f4:	f000 f9a2 	bl	801263c <uxr_seq_num_add>
 80122f8:	f10a 0a01 	add.w	sl, sl, #1
 80122fc:	fa1f f38a 	uxth.w	r3, sl
 8012300:	429d      	cmp	r5, r3
 8012302:	4606      	mov	r6, r0
 8012304:	d8ca      	bhi.n	801229c <uxr_prepare_reliable_buffer_to_write+0x100>
 8012306:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801230a:	9d05      	ldr	r5, [sp, #20]
 801230c:	8921      	ldrh	r1, [r4, #8]
 801230e:	fbb6 f3f1 	udiv	r3, r6, r1
 8012312:	fb01 6313 	mls	r3, r1, r3, r6
 8012316:	b29b      	uxth	r3, r3
 8012318:	6862      	ldr	r2, [r4, #4]
 801231a:	fbb2 f2f1 	udiv	r2, r2, r1
 801231e:	6821      	ldr	r1, [r4, #0]
 8012320:	fb03 f302 	mul.w	r3, r3, r2
 8012324:	3304      	adds	r3, #4
 8012326:	4419      	add	r1, r3
 8012328:	463a      	mov	r2, r7
 801232a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801232e:	9300      	str	r3, [sp, #0]
 8012330:	4658      	mov	r0, fp
 8012332:	2300      	movs	r3, #0
 8012334:	f7f7 fc80 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 8012338:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801233c:	4658      	mov	r0, fp
 801233e:	fa1f f289 	uxth.w	r2, r9
 8012342:	2302      	movs	r3, #2
 8012344:	210d      	movs	r1, #13
 8012346:	f7fa fec5 	bl	800d0d4 <uxr_buffer_submessage_header>
 801234a:	8921      	ldrh	r1, [r4, #8]
 801234c:	7b27      	ldrb	r7, [r4, #12]
 801234e:	fbb6 f0f1 	udiv	r0, r6, r1
 8012352:	e9d4 3200 	ldrd	r3, r2, [r4]
 8012356:	fb01 6010 	mls	r0, r1, r0, r6
 801235a:	b280      	uxth	r0, r0
 801235c:	fbb2 f2f1 	udiv	r2, r2, r1
 8012360:	3704      	adds	r7, #4
 8012362:	fb00 f002 	mul.w	r0, r0, r2
 8012366:	f1a5 0208 	sub.w	r2, r5, #8
 801236a:	464d      	mov	r5, r9
 801236c:	443d      	add	r5, r7
 801236e:	9f03      	ldr	r7, [sp, #12]
 8012370:	501d      	str	r5, [r3, r0]
 8012372:	f108 0104 	add.w	r1, r8, #4
 8012376:	9d04      	ldr	r5, [sp, #16]
 8012378:	440f      	add	r7, r1
 801237a:	eba2 0208 	sub.w	r2, r2, r8
 801237e:	4639      	mov	r1, r7
 8012380:	4628      	mov	r0, r5
 8012382:	f7f7 fc6b 	bl	8009c5c <ucdr_init_buffer>
 8012386:	4628      	mov	r0, r5
 8012388:	493b      	ldr	r1, [pc, #236]	; (8012478 <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 801238a:	4622      	mov	r2, r4
 801238c:	f7f7 fc3c 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 8012390:	2001      	movs	r0, #1
 8012392:	81e6      	strh	r6, [r4, #14]
 8012394:	b011      	add	sp, #68	; 0x44
 8012396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239a:	2101      	movs	r1, #1
 801239c:	89e0      	ldrh	r0, [r4, #14]
 801239e:	f000 f94d 	bl	801263c <uxr_seq_num_add>
 80123a2:	8921      	ldrh	r1, [r4, #8]
 80123a4:	4605      	mov	r5, r0
 80123a6:	8a60      	ldrh	r0, [r4, #18]
 80123a8:	f000 f948 	bl	801263c <uxr_seq_num_add>
 80123ac:	4601      	mov	r1, r0
 80123ae:	4628      	mov	r0, r5
 80123b0:	f000 f94c 	bl	801264c <uxr_seq_num_cmp>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	dd42      	ble.n	801243e <uxr_prepare_reliable_buffer_to_write+0x2a2>
 80123b8:	2000      	movs	r0, #0
 80123ba:	b011      	add	sp, #68	; 0x44
 80123bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c0:	8921      	ldrh	r1, [r4, #8]
 80123c2:	8a60      	ldrh	r0, [r4, #18]
 80123c4:	9205      	str	r2, [sp, #20]
 80123c6:	f000 f939 	bl	801263c <uxr_seq_num_add>
 80123ca:	4601      	mov	r1, r0
 80123cc:	4630      	mov	r0, r6
 80123ce:	f000 f93d 	bl	801264c <uxr_seq_num_cmp>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	9a05      	ldr	r2, [sp, #20]
 80123d6:	dcef      	bgt.n	80123b8 <uxr_prepare_reliable_buffer_to_write+0x21c>
 80123d8:	8920      	ldrh	r0, [r4, #8]
 80123da:	fbb6 f3f0 	udiv	r3, r6, r0
 80123de:	e9d4 4100 	ldrd	r4, r1, [r4]
 80123e2:	fb00 6313 	mls	r3, r0, r3, r6
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	fbb1 f1f0 	udiv	r1, r1, r0
 80123ec:	fb03 f301 	mul.w	r3, r3, r1
 80123f0:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80123f4:	50e2      	str	r2, [r4, r3]
 80123f6:	f8cd 8000 	str.w	r8, [sp]
 80123fa:	2300      	movs	r3, #0
 80123fc:	f7f7 fc1c 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 8012400:	2001      	movs	r0, #1
 8012402:	e7da      	b.n	80123ba <uxr_prepare_reliable_buffer_to_write+0x21e>
 8012404:	b293      	uxth	r3, r2
 8012406:	4619      	mov	r1, r3
 8012408:	e736      	b.n	8012278 <uxr_prepare_reliable_buffer_to_write+0xdc>
 801240a:	4630      	mov	r0, r6
 801240c:	2101      	movs	r1, #1
 801240e:	9207      	str	r2, [sp, #28]
 8012410:	f000 f914 	bl	801263c <uxr_seq_num_add>
 8012414:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012418:	fbb0 f1fc 	udiv	r1, r0, ip
 801241c:	fb0c 0111 	mls	r1, ip, r1, r0
 8012420:	b289      	uxth	r1, r1
 8012422:	6863      	ldr	r3, [r4, #4]
 8012424:	fbb3 f3fc 	udiv	r3, r3, ip
 8012428:	fb01 f103 	mul.w	r1, r1, r3
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	9a07      	ldr	r2, [sp, #28]
 8012430:	3104      	adds	r1, #4
 8012432:	440b      	add	r3, r1
 8012434:	4606      	mov	r6, r0
 8012436:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801243a:	9303      	str	r3, [sp, #12]
 801243c:	e708      	b.n	8012250 <uxr_prepare_reliable_buffer_to_write+0xb4>
 801243e:	8920      	ldrh	r0, [r4, #8]
 8012440:	fbb5 f3f0 	udiv	r3, r5, r0
 8012444:	fb00 5313 	mls	r3, r0, r3, r5
 8012448:	b29b      	uxth	r3, r3
 801244a:	6862      	ldr	r2, [r4, #4]
 801244c:	6821      	ldr	r1, [r4, #0]
 801244e:	fbb2 f0f0 	udiv	r0, r2, r0
 8012452:	fb03 f300 	mul.w	r3, r3, r0
 8012456:	7b22      	ldrb	r2, [r4, #12]
 8012458:	9804      	ldr	r0, [sp, #16]
 801245a:	3304      	adds	r3, #4
 801245c:	4419      	add	r1, r3
 801245e:	445a      	add	r2, fp
 8012460:	f841 2c04 	str.w	r2, [r1, #-4]
 8012464:	7b23      	ldrb	r3, [r4, #12]
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	2300      	movs	r3, #0
 801246a:	f7f7 fbe5 	bl	8009c38 <ucdr_init_buffer_origin_offset>
 801246e:	81e5      	strh	r5, [r4, #14]
 8012470:	2001      	movs	r0, #1
 8012472:	e7a2      	b.n	80123ba <uxr_prepare_reliable_buffer_to_write+0x21e>
 8012474:	4682      	mov	sl, r0
 8012476:	e6c8      	b.n	801220a <uxr_prepare_reliable_buffer_to_write+0x6e>
 8012478:	08012095 	.word	0x08012095

0801247c <uxr_prepare_next_reliable_buffer_to_send>:
 801247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012480:	4605      	mov	r5, r0
 8012482:	4688      	mov	r8, r1
 8012484:	8a00      	ldrh	r0, [r0, #16]
 8012486:	2101      	movs	r1, #1
 8012488:	4617      	mov	r7, r2
 801248a:	461e      	mov	r6, r3
 801248c:	f000 f8d6 	bl	801263c <uxr_seq_num_add>
 8012490:	8030      	strh	r0, [r6, #0]
 8012492:	892a      	ldrh	r2, [r5, #8]
 8012494:	fbb0 f3f2 	udiv	r3, r0, r2
 8012498:	fb02 0413 	mls	r4, r2, r3, r0
 801249c:	b2a4      	uxth	r4, r4
 801249e:	686b      	ldr	r3, [r5, #4]
 80124a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80124a4:	682b      	ldr	r3, [r5, #0]
 80124a6:	89e9      	ldrh	r1, [r5, #14]
 80124a8:	fb04 f402 	mul.w	r4, r4, r2
 80124ac:	3404      	adds	r4, #4
 80124ae:	4423      	add	r3, r4
 80124b0:	f8c8 3000 	str.w	r3, [r8]
 80124b4:	682b      	ldr	r3, [r5, #0]
 80124b6:	441c      	add	r4, r3
 80124b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80124bc:	603b      	str	r3, [r7, #0]
 80124be:	f000 f8c5 	bl	801264c <uxr_seq_num_cmp>
 80124c2:	2800      	cmp	r0, #0
 80124c4:	dd02      	ble.n	80124cc <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80124c6:	2000      	movs	r0, #0
 80124c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	7b2b      	ldrb	r3, [r5, #12]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d9f8      	bls.n	80124c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80124d4:	8a69      	ldrh	r1, [r5, #18]
 80124d6:	8a28      	ldrh	r0, [r5, #16]
 80124d8:	f000 f8b4 	bl	8012644 <uxr_seq_num_sub>
 80124dc:	892b      	ldrh	r3, [r5, #8]
 80124de:	4283      	cmp	r3, r0
 80124e0:	d0f1      	beq.n	80124c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80124e2:	8830      	ldrh	r0, [r6, #0]
 80124e4:	89eb      	ldrh	r3, [r5, #14]
 80124e6:	8228      	strh	r0, [r5, #16]
 80124e8:	4298      	cmp	r0, r3
 80124ea:	d002      	beq.n	80124f2 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80124ec:	2001      	movs	r0, #1
 80124ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f2:	2101      	movs	r1, #1
 80124f4:	f000 f8a2 	bl	801263c <uxr_seq_num_add>
 80124f8:	81e8      	strh	r0, [r5, #14]
 80124fa:	2001      	movs	r0, #1
 80124fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012500 <uxr_update_output_stream_heartbeat_timestamp>:
 8012500:	b5d0      	push	{r4, r6, r7, lr}
 8012502:	8a01      	ldrh	r1, [r0, #16]
 8012504:	4604      	mov	r4, r0
 8012506:	8a40      	ldrh	r0, [r0, #18]
 8012508:	4616      	mov	r6, r2
 801250a:	461f      	mov	r7, r3
 801250c:	f000 f89e 	bl	801264c <uxr_seq_num_cmp>
 8012510:	2800      	cmp	r0, #0
 8012512:	db07      	blt.n	8012524 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8012514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012518:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801251c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8012520:	2000      	movs	r0, #0
 8012522:	bdd0      	pop	{r4, r6, r7, pc}
 8012524:	f894 0020 	ldrb.w	r0, [r4, #32]
 8012528:	b948      	cbnz	r0, 801253e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801252a:	2301      	movs	r3, #1
 801252c:	f884 3020 	strb.w	r3, [r4, #32]
 8012530:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8012534:	f147 0200 	adc.w	r2, r7, #0
 8012538:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801253c:	bdd0      	pop	{r4, r6, r7, pc}
 801253e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8012542:	4296      	cmp	r6, r2
 8012544:	eb77 0303 	sbcs.w	r3, r7, r3
 8012548:	bfa5      	ittet	ge
 801254a:	3001      	addge	r0, #1
 801254c:	f884 0020 	strbge.w	r0, [r4, #32]
 8012550:	2000      	movlt	r0, #0
 8012552:	2001      	movge	r0, #1
 8012554:	e7ec      	b.n	8012530 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8012556:	bf00      	nop

08012558 <uxr_begin_output_nack_buffer_it>:
 8012558:	8a40      	ldrh	r0, [r0, #18]
 801255a:	4770      	bx	lr

0801255c <uxr_next_reliable_nack_buffer_to_send>:
 801255c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012560:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8012564:	f1b9 0f00 	cmp.w	r9, #0
 8012568:	d011      	beq.n	801258e <uxr_next_reliable_nack_buffer_to_send+0x32>
 801256a:	4605      	mov	r5, r0
 801256c:	8818      	ldrh	r0, [r3, #0]
 801256e:	460f      	mov	r7, r1
 8012570:	4690      	mov	r8, r2
 8012572:	461e      	mov	r6, r3
 8012574:	2101      	movs	r1, #1
 8012576:	f000 f861 	bl	801263c <uxr_seq_num_add>
 801257a:	8030      	strh	r0, [r6, #0]
 801257c:	8a29      	ldrh	r1, [r5, #16]
 801257e:	f000 f865 	bl	801264c <uxr_seq_num_cmp>
 8012582:	2800      	cmp	r0, #0
 8012584:	dd06      	ble.n	8012594 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8012586:	f04f 0900 	mov.w	r9, #0
 801258a:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 801258e:	4648      	mov	r0, r9
 8012590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012594:	892a      	ldrh	r2, [r5, #8]
 8012596:	8830      	ldrh	r0, [r6, #0]
 8012598:	fbb0 f4f2 	udiv	r4, r0, r2
 801259c:	fb02 0414 	mls	r4, r2, r4, r0
 80125a0:	b2a4      	uxth	r4, r4
 80125a2:	686b      	ldr	r3, [r5, #4]
 80125a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80125a8:	682b      	ldr	r3, [r5, #0]
 80125aa:	fb04 f402 	mul.w	r4, r4, r2
 80125ae:	3404      	adds	r4, #4
 80125b0:	4423      	add	r3, r4
 80125b2:	603b      	str	r3, [r7, #0]
 80125b4:	682b      	ldr	r3, [r5, #0]
 80125b6:	441c      	add	r4, r3
 80125b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80125bc:	f8c8 3000 	str.w	r3, [r8]
 80125c0:	7b2a      	ldrb	r2, [r5, #12]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d0d6      	beq.n	8012574 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80125c6:	4648      	mov	r0, r9
 80125c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080125cc <uxr_process_acknack>:
 80125cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ce:	4604      	mov	r4, r0
 80125d0:	460e      	mov	r6, r1
 80125d2:	4610      	mov	r0, r2
 80125d4:	2101      	movs	r1, #1
 80125d6:	f000 f835 	bl	8012644 <uxr_seq_num_sub>
 80125da:	8a61      	ldrh	r1, [r4, #18]
 80125dc:	f000 f832 	bl	8012644 <uxr_seq_num_sub>
 80125e0:	b1c0      	cbz	r0, 8012614 <uxr_process_acknack+0x48>
 80125e2:	4605      	mov	r5, r0
 80125e4:	2700      	movs	r7, #0
 80125e6:	2101      	movs	r1, #1
 80125e8:	8a60      	ldrh	r0, [r4, #18]
 80125ea:	f000 f827 	bl	801263c <uxr_seq_num_add>
 80125ee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80125f2:	fbb0 f3fc 	udiv	r3, r0, ip
 80125f6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80125fa:	fb0c 0313 	mls	r3, ip, r3, r0
 80125fe:	b29b      	uxth	r3, r3
 8012600:	fbb1 f1fc 	udiv	r1, r1, ip
 8012604:	3701      	adds	r7, #1
 8012606:	fb03 f301 	mul.w	r3, r3, r1
 801260a:	42bd      	cmp	r5, r7
 801260c:	7b21      	ldrb	r1, [r4, #12]
 801260e:	8260      	strh	r0, [r4, #18]
 8012610:	50d1      	str	r1, [r2, r3]
 8012612:	d1e8      	bne.n	80125e6 <uxr_process_acknack+0x1a>
 8012614:	3e00      	subs	r6, #0
 8012616:	f04f 0300 	mov.w	r3, #0
 801261a:	bf18      	it	ne
 801261c:	2601      	movne	r6, #1
 801261e:	f884 3020 	strb.w	r3, [r4, #32]
 8012622:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8012626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012628 <uxr_is_output_up_to_date>:
 8012628:	8a01      	ldrh	r1, [r0, #16]
 801262a:	8a40      	ldrh	r0, [r0, #18]
 801262c:	b508      	push	{r3, lr}
 801262e:	f000 f80d 	bl	801264c <uxr_seq_num_cmp>
 8012632:	fab0 f080 	clz	r0, r0
 8012636:	0940      	lsrs	r0, r0, #5
 8012638:	bd08      	pop	{r3, pc}
 801263a:	bf00      	nop

0801263c <uxr_seq_num_add>:
 801263c:	4408      	add	r0, r1
 801263e:	b280      	uxth	r0, r0
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop

08012644 <uxr_seq_num_sub>:
 8012644:	1a40      	subs	r0, r0, r1
 8012646:	b280      	uxth	r0, r0
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop

0801264c <uxr_seq_num_cmp>:
 801264c:	4288      	cmp	r0, r1
 801264e:	d011      	beq.n	8012674 <uxr_seq_num_cmp+0x28>
 8012650:	d309      	bcc.n	8012666 <uxr_seq_num_cmp+0x1a>
 8012652:	4288      	cmp	r0, r1
 8012654:	d910      	bls.n	8012678 <uxr_seq_num_cmp+0x2c>
 8012656:	1a40      	subs	r0, r0, r1
 8012658:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801265c:	bfd4      	ite	le
 801265e:	2001      	movle	r0, #1
 8012660:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8012664:	4770      	bx	lr
 8012666:	1a0b      	subs	r3, r1, r0
 8012668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801266c:	daf1      	bge.n	8012652 <uxr_seq_num_cmp+0x6>
 801266e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012672:	4770      	bx	lr
 8012674:	2000      	movs	r0, #0
 8012676:	4770      	bx	lr
 8012678:	2001      	movs	r0, #1
 801267a:	4770      	bx	lr

0801267c <uxr_init_framing_io>:
 801267c:	2300      	movs	r3, #0
 801267e:	7041      	strb	r1, [r0, #1]
 8012680:	7003      	strb	r3, [r0, #0]
 8012682:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop

08012688 <uxr_write_framed_msg>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	7845      	ldrb	r5, [r0, #1]
 801268e:	b085      	sub	sp, #20
 8012690:	4604      	mov	r4, r0
 8012692:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8012696:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 801269a:	f1bc 0f01 	cmp.w	ip, #1
 801269e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80126a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80126a6:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 80126aa:	460e      	mov	r6, r1
 80126ac:	4617      	mov	r7, r2
 80126ae:	469b      	mov	fp, r3
 80126b0:	f240 8116 	bls.w	80128e0 <uxr_write_framed_msg+0x258>
 80126b4:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80126b8:	2302      	movs	r3, #2
 80126ba:	2a01      	cmp	r2, #1
 80126bc:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80126c0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80126c4:	f240 8091 	bls.w	80127ea <uxr_write_framed_msg+0x162>
 80126c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126ca:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80126ce:	b2d9      	uxtb	r1, r3
 80126d0:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80126d4:	2203      	movs	r2, #3
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80126dc:	f240 809a 	bls.w	8012814 <uxr_write_framed_msg+0x18c>
 80126e0:	18a3      	adds	r3, r4, r2
 80126e2:	3201      	adds	r2, #1
 80126e4:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80126e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80126ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80126f2:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80126f6:	2901      	cmp	r1, #1
 80126f8:	eb04 0102 	add.w	r1, r4, r2
 80126fc:	f240 8101 	bls.w	8012902 <uxr_write_framed_msg+0x27a>
 8012700:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012704:	3201      	adds	r2, #1
 8012706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012708:	b2d2      	uxtb	r2, r2
 801270a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801270e:	2b00      	cmp	r3, #0
 8012710:	f000 8106 	beq.w	8012920 <uxr_write_framed_msg+0x298>
 8012714:	f04f 0a00 	mov.w	sl, #0
 8012718:	46d1      	mov	r9, sl
 801271a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801271e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012722:	2901      	cmp	r1, #1
 8012724:	f240 80a3 	bls.w	801286e <uxr_write_framed_msg+0x1e6>
 8012728:	2a29      	cmp	r2, #41	; 0x29
 801272a:	d87f      	bhi.n	801282c <uxr_write_framed_msg+0x1a4>
 801272c:	18a1      	adds	r1, r4, r2
 801272e:	3201      	adds	r2, #1
 8012730:	b2d2      	uxtb	r2, r2
 8012732:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012736:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801273a:	ea8a 0303 	eor.w	r3, sl, r3
 801273e:	4984      	ldr	r1, [pc, #528]	; (8012950 <uxr_write_framed_msg+0x2c8>)
 8012740:	b2db      	uxtb	r3, r3
 8012742:	f109 0901 	add.w	r9, r9, #1
 8012746:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801274a:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 801274e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012750:	454b      	cmp	r3, r9
 8012752:	d8e2      	bhi.n	801271a <uxr_write_framed_msg+0x92>
 8012754:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012758:	fa5f f98a 	uxtb.w	r9, sl
 801275c:	9301      	str	r3, [sp, #4]
 801275e:	f04f 0b00 	mov.w	fp, #0
 8012762:	f88d 900c 	strb.w	r9, [sp, #12]
 8012766:	f88d 300d 	strb.w	r3, [sp, #13]
 801276a:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 801276e:	fa5f f18a 	uxtb.w	r1, sl
 8012772:	2901      	cmp	r1, #1
 8012774:	d920      	bls.n	80127b8 <uxr_write_framed_msg+0x130>
 8012776:	2a29      	cmp	r2, #41	; 0x29
 8012778:	f240 808b 	bls.w	8012892 <uxr_write_framed_msg+0x20a>
 801277c:	2500      	movs	r5, #0
 801277e:	e000      	b.n	8012782 <uxr_write_framed_msg+0xfa>
 8012780:	b160      	cbz	r0, 801279c <uxr_write_framed_msg+0x114>
 8012782:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012786:	1b52      	subs	r2, r2, r5
 8012788:	4421      	add	r1, r4
 801278a:	4643      	mov	r3, r8
 801278c:	4638      	mov	r0, r7
 801278e:	47b0      	blx	r6
 8012790:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012794:	4405      	add	r5, r0
 8012796:	4295      	cmp	r5, r2
 8012798:	d3f2      	bcc.n	8012780 <uxr_write_framed_msg+0xf8>
 801279a:	d003      	beq.n	80127a4 <uxr_write_framed_msg+0x11c>
 801279c:	2000      	movs	r0, #0
 801279e:	b005      	add	sp, #20
 80127a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a4:	fa5f f18a 	uxtb.w	r1, sl
 80127a8:	f04f 0300 	mov.w	r3, #0
 80127ac:	2901      	cmp	r1, #1
 80127ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80127b2:	f04f 0200 	mov.w	r2, #0
 80127b6:	d86c      	bhi.n	8012892 <uxr_write_framed_msg+0x20a>
 80127b8:	1c51      	adds	r1, r2, #1
 80127ba:	b2c9      	uxtb	r1, r1
 80127bc:	2929      	cmp	r1, #41	; 0x29
 80127be:	d8dd      	bhi.n	801277c <uxr_write_framed_msg+0xf4>
 80127c0:	18a0      	adds	r0, r4, r2
 80127c2:	3202      	adds	r2, #2
 80127c4:	f089 0920 	eor.w	r9, r9, #32
 80127c8:	b2d2      	uxtb	r2, r2
 80127ca:	4659      	mov	r1, fp
 80127cc:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80127d0:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 80127d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80127d8:	f04f 0b01 	mov.w	fp, #1
 80127dc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80127e0:	2900      	cmp	r1, #0
 80127e2:	d162      	bne.n	80128aa <uxr_write_framed_msg+0x222>
 80127e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80127e8:	e7bf      	b.n	801276a <uxr_write_framed_msg+0xe2>
 80127ea:	2204      	movs	r2, #4
 80127ec:	2503      	movs	r5, #3
 80127ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80127f0:	4423      	add	r3, r4
 80127f2:	b2c9      	uxtb	r1, r1
 80127f4:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80127f8:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 80127fc:	4425      	add	r5, r4
 80127fe:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012802:	f080 0020 	eor.w	r0, r0, #32
 8012806:	2b01      	cmp	r3, #1
 8012808:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801280c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012810:	f63f af66 	bhi.w	80126e0 <uxr_write_framed_msg+0x58>
 8012814:	18a3      	adds	r3, r4, r2
 8012816:	f081 0120 	eor.w	r1, r1, #32
 801281a:	3202      	adds	r2, #2
 801281c:	207d      	movs	r0, #125	; 0x7d
 801281e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8012822:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8012826:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801282a:	e75f      	b.n	80126ec <uxr_write_framed_msg+0x64>
 801282c:	2500      	movs	r5, #0
 801282e:	e001      	b.n	8012834 <uxr_write_framed_msg+0x1ac>
 8012830:	2800      	cmp	r0, #0
 8012832:	d0b3      	beq.n	801279c <uxr_write_framed_msg+0x114>
 8012834:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012838:	1b52      	subs	r2, r2, r5
 801283a:	4421      	add	r1, r4
 801283c:	4643      	mov	r3, r8
 801283e:	4638      	mov	r0, r7
 8012840:	47b0      	blx	r6
 8012842:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012846:	4405      	add	r5, r0
 8012848:	4295      	cmp	r5, r2
 801284a:	d3f1      	bcc.n	8012830 <uxr_write_framed_msg+0x1a8>
 801284c:	d1a6      	bne.n	801279c <uxr_write_framed_msg+0x114>
 801284e:	f04f 0300 	mov.w	r3, #0
 8012852:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012858:	454b      	cmp	r3, r9
 801285a:	d971      	bls.n	8012940 <uxr_write_framed_msg+0x2b8>
 801285c:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012860:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012864:	2901      	cmp	r1, #1
 8012866:	f04f 0200 	mov.w	r2, #0
 801286a:	f63f af5d 	bhi.w	8012728 <uxr_write_framed_msg+0xa0>
 801286e:	1c51      	adds	r1, r2, #1
 8012870:	b2c9      	uxtb	r1, r1
 8012872:	2929      	cmp	r1, #41	; 0x29
 8012874:	d8da      	bhi.n	801282c <uxr_write_framed_msg+0x1a4>
 8012876:	18a0      	adds	r0, r4, r2
 8012878:	3202      	adds	r2, #2
 801287a:	b2d2      	uxtb	r2, r2
 801287c:	f083 0120 	eor.w	r1, r3, #32
 8012880:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8012884:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8012888:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 801288c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012890:	e753      	b.n	801273a <uxr_write_framed_msg+0xb2>
 8012892:	18a0      	adds	r0, r4, r2
 8012894:	3201      	adds	r2, #1
 8012896:	b2d2      	uxtb	r2, r2
 8012898:	4659      	mov	r1, fp
 801289a:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801289e:	f04f 0b01 	mov.w	fp, #1
 80128a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80128a6:	2900      	cmp	r1, #0
 80128a8:	d09c      	beq.n	80127e4 <uxr_write_framed_msg+0x15c>
 80128aa:	2500      	movs	r5, #0
 80128ac:	e002      	b.n	80128b4 <uxr_write_framed_msg+0x22c>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	f43f af74 	beq.w	801279c <uxr_write_framed_msg+0x114>
 80128b4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80128b8:	1b52      	subs	r2, r2, r5
 80128ba:	4421      	add	r1, r4
 80128bc:	4643      	mov	r3, r8
 80128be:	4638      	mov	r0, r7
 80128c0:	47b0      	blx	r6
 80128c2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80128c6:	4405      	add	r5, r0
 80128c8:	4295      	cmp	r5, r2
 80128ca:	d3f0      	bcc.n	80128ae <uxr_write_framed_msg+0x226>
 80128cc:	f47f af66 	bne.w	801279c <uxr_write_framed_msg+0x114>
 80128d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128d2:	2300      	movs	r3, #0
 80128d4:	b290      	uxth	r0, r2
 80128d6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80128da:	b005      	add	sp, #20
 80128dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e0:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80128e4:	f085 0520 	eor.w	r5, r5, #32
 80128e8:	2303      	movs	r3, #3
 80128ea:	217d      	movs	r1, #125	; 0x7d
 80128ec:	2a01      	cmp	r2, #1
 80128ee:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 80128f2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80128f6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80128fa:	d814      	bhi.n	8012926 <uxr_write_framed_msg+0x29e>
 80128fc:	2205      	movs	r2, #5
 80128fe:	2504      	movs	r5, #4
 8012900:	e775      	b.n	80127ee <uxr_write_framed_msg+0x166>
 8012902:	f083 0320 	eor.w	r3, r3, #32
 8012906:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 801290a:	3202      	adds	r2, #2
 801290c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801290e:	b2d2      	uxtb	r2, r2
 8012910:	207d      	movs	r0, #125	; 0x7d
 8012912:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8012916:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801291a:	2b00      	cmp	r3, #0
 801291c:	f47f aefa 	bne.w	8012714 <uxr_write_framed_msg+0x8c>
 8012920:	9301      	str	r3, [sp, #4]
 8012922:	4699      	mov	r9, r3
 8012924:	e71b      	b.n	801275e <uxr_write_framed_msg+0xd6>
 8012926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012928:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801292c:	b2d9      	uxtb	r1, r3
 801292e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012932:	2204      	movs	r2, #4
 8012934:	2b01      	cmp	r3, #1
 8012936:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801293a:	f63f aed1 	bhi.w	80126e0 <uxr_write_framed_msg+0x58>
 801293e:	e769      	b.n	8012814 <uxr_write_framed_msg+0x18c>
 8012940:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012944:	fa5f f98a 	uxtb.w	r9, sl
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	e707      	b.n	801275e <uxr_write_framed_msg+0xd6>
 801294e:	bf00      	nop
 8012950:	080153e4 	.word	0x080153e4

08012954 <uxr_framing_read_transport>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	4604      	mov	r4, r0
 801295a:	b083      	sub	sp, #12
 801295c:	461f      	mov	r7, r3
 801295e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8012962:	4689      	mov	r9, r1
 8012964:	4692      	mov	sl, r2
 8012966:	f7fa fbfb 	bl	800d160 <uxr_millis>
 801296a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801296e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8012972:	42b3      	cmp	r3, r6
 8012974:	4680      	mov	r8, r0
 8012976:	d05f      	beq.n	8012a38 <uxr_framing_read_transport+0xe4>
 8012978:	d81b      	bhi.n	80129b2 <uxr_framing_read_transport+0x5e>
 801297a:	1e75      	subs	r5, r6, #1
 801297c:	1aed      	subs	r5, r5, r3
 801297e:	b2ed      	uxtb	r5, r5
 8012980:	2600      	movs	r6, #0
 8012982:	455d      	cmp	r5, fp
 8012984:	d81e      	bhi.n	80129c4 <uxr_framing_read_transport+0x70>
 8012986:	19ab      	adds	r3, r5, r6
 8012988:	455b      	cmp	r3, fp
 801298a:	bf84      	itt	hi
 801298c:	ebab 0605 	subhi.w	r6, fp, r5
 8012990:	b2f6      	uxtbhi	r6, r6
 8012992:	b9e5      	cbnz	r5, 80129ce <uxr_framing_read_transport+0x7a>
 8012994:	f04f 0b00 	mov.w	fp, #0
 8012998:	f7fa fbe2 	bl	800d160 <uxr_millis>
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	eba0 0008 	sub.w	r0, r0, r8
 80129a2:	1a1b      	subs	r3, r3, r0
 80129a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80129a8:	4658      	mov	r0, fp
 80129aa:	603b      	str	r3, [r7, #0]
 80129ac:	b003      	add	sp, #12
 80129ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b2:	2e00      	cmp	r6, #0
 80129b4:	d048      	beq.n	8012a48 <uxr_framing_read_transport+0xf4>
 80129b6:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80129ba:	b2ed      	uxtb	r5, r5
 80129bc:	3e01      	subs	r6, #1
 80129be:	455d      	cmp	r5, fp
 80129c0:	b2f6      	uxtb	r6, r6
 80129c2:	d9e0      	bls.n	8012986 <uxr_framing_read_transport+0x32>
 80129c4:	fa5f f58b 	uxtb.w	r5, fp
 80129c8:	2600      	movs	r6, #0
 80129ca:	2d00      	cmp	r5, #0
 80129cc:	d0e2      	beq.n	8012994 <uxr_framing_read_transport+0x40>
 80129ce:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80129d2:	3102      	adds	r1, #2
 80129d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	4421      	add	r1, r4
 80129dc:	462a      	mov	r2, r5
 80129de:	4650      	mov	r0, sl
 80129e0:	47c8      	blx	r9
 80129e2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80129e6:	4a1b      	ldr	r2, [pc, #108]	; (8012a54 <uxr_framing_read_transport+0x100>)
 80129e8:	4403      	add	r3, r0
 80129ea:	0859      	lsrs	r1, r3, #1
 80129ec:	fba2 2101 	umull	r2, r1, r2, r1
 80129f0:	0889      	lsrs	r1, r1, #2
 80129f2:	222a      	movs	r2, #42	; 0x2a
 80129f4:	fb02 3111 	mls	r1, r2, r1, r3
 80129f8:	4683      	mov	fp, r0
 80129fa:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d0c8      	beq.n	8012994 <uxr_framing_read_transport+0x40>
 8012a02:	42a8      	cmp	r0, r5
 8012a04:	d1c8      	bne.n	8012998 <uxr_framing_read_transport+0x44>
 8012a06:	b31e      	cbz	r6, 8012a50 <uxr_framing_read_transport+0xfc>
 8012a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	3102      	adds	r1, #2
 8012a0e:	4421      	add	r1, r4
 8012a10:	4632      	mov	r2, r6
 8012a12:	2300      	movs	r3, #0
 8012a14:	4650      	mov	r0, sl
 8012a16:	47c8      	blx	r9
 8012a18:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012a1c:	490d      	ldr	r1, [pc, #52]	; (8012a54 <uxr_framing_read_transport+0x100>)
 8012a1e:	181a      	adds	r2, r3, r0
 8012a20:	0853      	lsrs	r3, r2, #1
 8012a22:	fba1 1303 	umull	r1, r3, r1, r3
 8012a26:	089b      	lsrs	r3, r3, #2
 8012a28:	212a      	movs	r1, #42	; 0x2a
 8012a2a:	fb01 2313 	mls	r3, r1, r3, r2
 8012a2e:	eb00 0b05 	add.w	fp, r0, r5
 8012a32:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8012a36:	e7af      	b.n	8012998 <uxr_framing_read_transport+0x44>
 8012a38:	2600      	movs	r6, #0
 8012a3a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8012a3e:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8012a40:	d9c0      	bls.n	80129c4 <uxr_framing_read_transport+0x70>
 8012a42:	2102      	movs	r1, #2
 8012a44:	2529      	movs	r5, #41	; 0x29
 8012a46:	e7c5      	b.n	80129d4 <uxr_framing_read_transport+0x80>
 8012a48:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8012a4c:	b2ed      	uxtb	r5, r5
 8012a4e:	e798      	b.n	8012982 <uxr_framing_read_transport+0x2e>
 8012a50:	46ab      	mov	fp, r5
 8012a52:	e7a1      	b.n	8012998 <uxr_framing_read_transport+0x44>
 8012a54:	30c30c31 	.word	0x30c30c31

08012a58 <uxr_read_framed_msg>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8012a60:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8012a64:	42ae      	cmp	r6, r5
 8012a66:	b083      	sub	sp, #12
 8012a68:	4604      	mov	r4, r0
 8012a6a:	461f      	mov	r7, r3
 8012a6c:	4689      	mov	r9, r1
 8012a6e:	4692      	mov	sl, r2
 8012a70:	f000 817d 	beq.w	8012d6e <uxr_read_framed_msg+0x316>
 8012a74:	7823      	ldrb	r3, [r4, #0]
 8012a76:	4ecc      	ldr	r6, [pc, #816]	; (8012da8 <uxr_read_framed_msg+0x350>)
 8012a78:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8012dac <uxr_read_framed_msg+0x354>
 8012a7c:	2b07      	cmp	r3, #7
 8012a7e:	d8fd      	bhi.n	8012a7c <uxr_read_framed_msg+0x24>
 8012a80:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012a84:	00f40113 	.word	0x00f40113
 8012a88:	00b700d4 	.word	0x00b700d4
 8012a8c:	004d008e 	.word	0x004d008e
 8012a90:	00080030 	.word	0x00080030
 8012a94:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012a98:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012a9c:	4298      	cmp	r0, r3
 8012a9e:	f000 8141 	beq.w	8012d24 <uxr_read_framed_msg+0x2cc>
 8012aa2:	18e2      	adds	r2, r4, r3
 8012aa4:	7891      	ldrb	r1, [r2, #2]
 8012aa6:	297d      	cmp	r1, #125	; 0x7d
 8012aa8:	f000 81a2 	beq.w	8012df0 <uxr_read_framed_msg+0x398>
 8012aac:	3301      	adds	r3, #1
 8012aae:	085a      	lsrs	r2, r3, #1
 8012ab0:	fba6 0202 	umull	r0, r2, r6, r2
 8012ab4:	0892      	lsrs	r2, r2, #2
 8012ab6:	202a      	movs	r0, #42	; 0x2a
 8012ab8:	fb00 3312 	mls	r3, r0, r2, r3
 8012abc:	297e      	cmp	r1, #126	; 0x7e
 8012abe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012ac2:	f000 8251 	beq.w	8012f68 <uxr_read_framed_msg+0x510>
 8012ac6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012ac8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012aca:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012ad6:	7021      	strb	r1, [r4, #0]
 8012ad8:	f000 8182 	beq.w	8012de0 <uxr_read_framed_msg+0x388>
 8012adc:	2000      	movs	r0, #0
 8012ade:	b003      	add	sp, #12
 8012ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012ae8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012aec:	4298      	cmp	r0, r3
 8012aee:	f000 8128 	beq.w	8012d42 <uxr_read_framed_msg+0x2ea>
 8012af2:	18e2      	adds	r2, r4, r3
 8012af4:	7891      	ldrb	r1, [r2, #2]
 8012af6:	297d      	cmp	r1, #125	; 0x7d
 8012af8:	f000 8196 	beq.w	8012e28 <uxr_read_framed_msg+0x3d0>
 8012afc:	3301      	adds	r3, #1
 8012afe:	085a      	lsrs	r2, r3, #1
 8012b00:	fba6 0202 	umull	r0, r2, r6, r2
 8012b04:	0892      	lsrs	r2, r2, #2
 8012b06:	202a      	movs	r0, #42	; 0x2a
 8012b08:	fb00 3312 	mls	r3, r0, r2, r3
 8012b0c:	297e      	cmp	r1, #126	; 0x7e
 8012b0e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012b12:	f000 8219 	beq.w	8012f48 <uxr_read_framed_msg+0x4f0>
 8012b16:	2307      	movs	r3, #7
 8012b18:	86a1      	strh	r1, [r4, #52]	; 0x34
 8012b1a:	7023      	strb	r3, [r4, #0]
 8012b1c:	e7ae      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012b1e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012b20:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012b22:	429d      	cmp	r5, r3
 8012b24:	d937      	bls.n	8012b96 <uxr_read_framed_msg+0x13e>
 8012b26:	ee07 9a90 	vmov	s15, r9
 8012b2a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012b2e:	e01e      	b.n	8012b6e <uxr_read_framed_msg+0x116>
 8012b30:	f89e e002 	ldrb.w	lr, [lr, #2]
 8012b34:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8012b38:	f000 80d2 	beq.w	8012ce0 <uxr_read_framed_msg+0x288>
 8012b3c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012b40:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012b44:	f000 8214 	beq.w	8012f70 <uxr_read_framed_msg+0x518>
 8012b48:	f807 e003 	strb.w	lr, [r7, r3]
 8012b4c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8012b4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012b50:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012b52:	ea80 010e 	eor.w	r1, r0, lr
 8012b56:	b2c9      	uxtb	r1, r1
 8012b58:	3301      	adds	r3, #1
 8012b5a:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8012b64:	42ab      	cmp	r3, r5
 8012b66:	86e2      	strh	r2, [r4, #54]	; 0x36
 8012b68:	8663      	strh	r3, [r4, #50]	; 0x32
 8012b6a:	f080 8121 	bcs.w	8012db0 <uxr_read_framed_msg+0x358>
 8012b6e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8012b72:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012b76:	f101 0b01 	add.w	fp, r1, #1
 8012b7a:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012b7e:	fba6 9202 	umull	r9, r2, r6, r2
 8012b82:	0892      	lsrs	r2, r2, #2
 8012b84:	4288      	cmp	r0, r1
 8012b86:	eb04 0e01 	add.w	lr, r4, r1
 8012b8a:	fb0c b212 	mls	r2, ip, r2, fp
 8012b8e:	d1cf      	bne.n	8012b30 <uxr_read_framed_msg+0xd8>
 8012b90:	ee17 9a90 	vmov	r9, s15
 8012b94:	429d      	cmp	r5, r3
 8012b96:	f040 8112 	bne.w	8012dbe <uxr_read_framed_msg+0x366>
 8012b9a:	2306      	movs	r3, #6
 8012b9c:	7023      	strb	r3, [r4, #0]
 8012b9e:	e76d      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012ba0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012ba4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012ba8:	4298      	cmp	r0, r3
 8012baa:	f000 80bb 	beq.w	8012d24 <uxr_read_framed_msg+0x2cc>
 8012bae:	18e2      	adds	r2, r4, r3
 8012bb0:	7891      	ldrb	r1, [r2, #2]
 8012bb2:	297d      	cmp	r1, #125	; 0x7d
 8012bb4:	f000 8153 	beq.w	8012e5e <uxr_read_framed_msg+0x406>
 8012bb8:	3301      	adds	r3, #1
 8012bba:	085a      	lsrs	r2, r3, #1
 8012bbc:	fba6 0202 	umull	r0, r2, r6, r2
 8012bc0:	0892      	lsrs	r2, r2, #2
 8012bc2:	202a      	movs	r0, #42	; 0x2a
 8012bc4:	fb00 3212 	mls	r2, r0, r2, r3
 8012bc8:	297e      	cmp	r1, #126	; 0x7e
 8012bca:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012bce:	f000 81cb 	beq.w	8012f68 <uxr_read_framed_msg+0x510>
 8012bd2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012bd4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012bd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	2000      	movs	r0, #0
 8012bde:	428b      	cmp	r3, r1
 8012be0:	8623      	strh	r3, [r4, #48]	; 0x30
 8012be2:	8660      	strh	r0, [r4, #50]	; 0x32
 8012be4:	86e0      	strh	r0, [r4, #54]	; 0x36
 8012be6:	f240 80db 	bls.w	8012da0 <uxr_read_framed_msg+0x348>
 8012bea:	7020      	strb	r0, [r4, #0]
 8012bec:	b003      	add	sp, #12
 8012bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012bf6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012bfa:	4298      	cmp	r0, r3
 8012bfc:	f000 80a1 	beq.w	8012d42 <uxr_read_framed_msg+0x2ea>
 8012c00:	18e2      	adds	r2, r4, r3
 8012c02:	7891      	ldrb	r1, [r2, #2]
 8012c04:	297d      	cmp	r1, #125	; 0x7d
 8012c06:	f000 8167 	beq.w	8012ed8 <uxr_read_framed_msg+0x480>
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	085a      	lsrs	r2, r3, #1
 8012c0e:	fba6 0202 	umull	r0, r2, r6, r2
 8012c12:	0892      	lsrs	r2, r2, #2
 8012c14:	202a      	movs	r0, #42	; 0x2a
 8012c16:	fb00 3312 	mls	r3, r0, r2, r3
 8012c1a:	297e      	cmp	r1, #126	; 0x7e
 8012c1c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012c20:	f000 8192 	beq.w	8012f48 <uxr_read_framed_msg+0x4f0>
 8012c24:	2304      	movs	r3, #4
 8012c26:	8621      	strh	r1, [r4, #48]	; 0x30
 8012c28:	7023      	strb	r3, [r4, #0]
 8012c2a:	e727      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012c2c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012c30:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012c34:	4290      	cmp	r0, r2
 8012c36:	f000 80b1 	beq.w	8012d9c <uxr_read_framed_msg+0x344>
 8012c3a:	18a3      	adds	r3, r4, r2
 8012c3c:	7899      	ldrb	r1, [r3, #2]
 8012c3e:	297d      	cmp	r1, #125	; 0x7d
 8012c40:	f000 8166 	beq.w	8012f10 <uxr_read_framed_msg+0x4b8>
 8012c44:	3201      	adds	r2, #1
 8012c46:	0850      	lsrs	r0, r2, #1
 8012c48:	fba6 3000 	umull	r3, r0, r6, r0
 8012c4c:	0880      	lsrs	r0, r0, #2
 8012c4e:	232a      	movs	r3, #42	; 0x2a
 8012c50:	fb03 2210 	mls	r2, r3, r0, r2
 8012c54:	297e      	cmp	r1, #126	; 0x7e
 8012c56:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012c5a:	f000 8187 	beq.w	8012f6c <uxr_read_framed_msg+0x514>
 8012c5e:	7863      	ldrb	r3, [r4, #1]
 8012c60:	428b      	cmp	r3, r1
 8012c62:	bf0c      	ite	eq
 8012c64:	2303      	moveq	r3, #3
 8012c66:	2300      	movne	r3, #0
 8012c68:	7023      	strb	r3, [r4, #0]
 8012c6a:	e707      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012c6c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012c70:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012c74:	2200      	movs	r2, #0
 8012c76:	4299      	cmp	r1, r3
 8012c78:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012c7c:	d063      	beq.n	8012d46 <uxr_read_framed_msg+0x2ee>
 8012c7e:	18e2      	adds	r2, r4, r3
 8012c80:	7892      	ldrb	r2, [r2, #2]
 8012c82:	2a7d      	cmp	r2, #125	; 0x7d
 8012c84:	f000 8107 	beq.w	8012e96 <uxr_read_framed_msg+0x43e>
 8012c88:	1c59      	adds	r1, r3, #1
 8012c8a:	084b      	lsrs	r3, r1, #1
 8012c8c:	fba6 0303 	umull	r0, r3, r6, r3
 8012c90:	089b      	lsrs	r3, r3, #2
 8012c92:	202a      	movs	r0, #42	; 0x2a
 8012c94:	fb00 1313 	mls	r3, r0, r3, r1
 8012c98:	2a7e      	cmp	r2, #126	; 0x7e
 8012c9a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8012c9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012ca2:	d050      	beq.n	8012d46 <uxr_read_framed_msg+0x2ee>
 8012ca4:	2302      	movs	r3, #2
 8012ca6:	7023      	strb	r3, [r4, #0]
 8012ca8:	e6e8      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012caa:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8012cae:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012cb2:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012cb6:	1c51      	adds	r1, r2, #1
 8012cb8:	084b      	lsrs	r3, r1, #1
 8012cba:	fba6 5303 	umull	r5, r3, r6, r3
 8012cbe:	089b      	lsrs	r3, r3, #2
 8012cc0:	fb0c 1313 	mls	r3, ip, r3, r1
 8012cc4:	4596      	cmp	lr, r2
 8012cc6:	eb04 0002 	add.w	r0, r4, r2
 8012cca:	b2da      	uxtb	r2, r3
 8012ccc:	f43f af06 	beq.w	8012adc <uxr_read_framed_msg+0x84>
 8012cd0:	7883      	ldrb	r3, [r0, #2]
 8012cd2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012cd6:	2b7e      	cmp	r3, #126	; 0x7e
 8012cd8:	d1ed      	bne.n	8012cb6 <uxr_read_framed_msg+0x25e>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	7023      	strb	r3, [r4, #0]
 8012cde:	e6cd      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012ce0:	f101 0b01 	add.w	fp, r1, #1
 8012ce4:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012ce8:	fba6 e202 	umull	lr, r2, r6, r2
 8012cec:	3102      	adds	r1, #2
 8012cee:	0892      	lsrs	r2, r2, #2
 8012cf0:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8012cf4:	fb0c b212 	mls	r2, ip, r2, fp
 8012cf8:	fba6 9e0e 	umull	r9, lr, r6, lr
 8012cfc:	eb04 0b02 	add.w	fp, r4, r2
 8012d00:	b2d2      	uxtb	r2, r2
 8012d02:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8012d06:	4290      	cmp	r0, r2
 8012d08:	fb0c 111e 	mls	r1, ip, lr, r1
 8012d0c:	f43f af40 	beq.w	8012b90 <uxr_read_framed_msg+0x138>
 8012d10:	f89b e002 	ldrb.w	lr, [fp, #2]
 8012d14:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8012d18:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012d1c:	d036      	beq.n	8012d8c <uxr_read_framed_msg+0x334>
 8012d1e:	f08e 0e20 	eor.w	lr, lr, #32
 8012d22:	e711      	b.n	8012b48 <uxr_read_framed_msg+0xf0>
 8012d24:	2301      	movs	r3, #1
 8012d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d28:	4649      	mov	r1, r9
 8012d2a:	e9cd 2300 	strd	r2, r3, [sp]
 8012d2e:	4620      	mov	r0, r4
 8012d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d32:	4652      	mov	r2, sl
 8012d34:	f7ff fe0e 	bl	8012954 <uxr_framing_read_transport>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	f43f aecf 	beq.w	8012adc <uxr_read_framed_msg+0x84>
 8012d3e:	7823      	ldrb	r3, [r4, #0]
 8012d40:	e69c      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012d42:	2302      	movs	r3, #2
 8012d44:	e7ef      	b.n	8012d26 <uxr_read_framed_msg+0x2ce>
 8012d46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d48:	2304      	movs	r3, #4
 8012d4a:	e9cd 2300 	strd	r2, r3, [sp]
 8012d4e:	4649      	mov	r1, r9
 8012d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d52:	4652      	mov	r2, sl
 8012d54:	4620      	mov	r0, r4
 8012d56:	f7ff fdfd 	bl	8012954 <uxr_framing_read_transport>
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d1ef      	bne.n	8012d3e <uxr_read_framed_msg+0x2e6>
 8012d5e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8012d62:	387e      	subs	r0, #126	; 0x7e
 8012d64:	bf18      	it	ne
 8012d66:	2001      	movne	r0, #1
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d0e8      	beq.n	8012d3e <uxr_read_framed_msg+0x2e6>
 8012d6c:	e6b6      	b.n	8012adc <uxr_read_framed_msg+0x84>
 8012d6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012d70:	2305      	movs	r3, #5
 8012d72:	e9cd 5300 	strd	r5, r3, [sp]
 8012d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d78:	f7ff fdec 	bl	8012954 <uxr_framing_read_transport>
 8012d7c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012d80:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012d84:	429a      	cmp	r2, r3
 8012d86:	f43f aea9 	beq.w	8012adc <uxr_read_framed_msg+0x84>
 8012d8a:	e673      	b.n	8012a74 <uxr_read_framed_msg+0x1c>
 8012d8c:	429d      	cmp	r5, r3
 8012d8e:	ee17 9a90 	vmov	r9, s15
 8012d92:	f43f af02 	beq.w	8012b9a <uxr_read_framed_msg+0x142>
 8012d96:	2301      	movs	r3, #1
 8012d98:	7023      	strb	r3, [r4, #0]
 8012d9a:	e66f      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	e7c2      	b.n	8012d26 <uxr_read_framed_msg+0x2ce>
 8012da0:	2305      	movs	r3, #5
 8012da2:	7023      	strb	r3, [r4, #0]
 8012da4:	e66a      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012da6:	bf00      	nop
 8012da8:	30c30c31 	.word	0x30c30c31
 8012dac:	080153e4 	.word	0x080153e4
 8012db0:	ee17 9a90 	vmov	r9, s15
 8012db4:	f43f aef1 	beq.w	8012b9a <uxr_read_framed_msg+0x142>
 8012db8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012dbc:	d08d      	beq.n	8012cda <uxr_read_framed_msg+0x282>
 8012dbe:	1aeb      	subs	r3, r5, r3
 8012dc0:	3302      	adds	r3, #2
 8012dc2:	9301      	str	r3, [sp, #4]
 8012dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	4652      	mov	r2, sl
 8012dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dcc:	4649      	mov	r1, r9
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f7ff fdc0 	bl	8012954 <uxr_framing_read_transport>
 8012dd4:	fab0 f080 	clz	r0, r0
 8012dd8:	0940      	lsrs	r0, r0, #5
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d0af      	beq.n	8012d3e <uxr_read_framed_msg+0x2e6>
 8012dde:	e67d      	b.n	8012adc <uxr_read_framed_msg+0x84>
 8012de0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012de2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012de6:	7013      	strb	r3, [r2, #0]
 8012de8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012dea:	b003      	add	sp, #12
 8012dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df0:	1c59      	adds	r1, r3, #1
 8012df2:	084a      	lsrs	r2, r1, #1
 8012df4:	fba6 5202 	umull	r5, r2, r6, r2
 8012df8:	0892      	lsrs	r2, r2, #2
 8012dfa:	252a      	movs	r5, #42	; 0x2a
 8012dfc:	fb05 1212 	mls	r2, r5, r2, r1
 8012e00:	b2d1      	uxtb	r1, r2
 8012e02:	4288      	cmp	r0, r1
 8012e04:	d08e      	beq.n	8012d24 <uxr_read_framed_msg+0x2cc>
 8012e06:	3302      	adds	r3, #2
 8012e08:	4422      	add	r2, r4
 8012e0a:	0858      	lsrs	r0, r3, #1
 8012e0c:	fba6 1000 	umull	r1, r0, r6, r0
 8012e10:	7891      	ldrb	r1, [r2, #2]
 8012e12:	0882      	lsrs	r2, r0, #2
 8012e14:	fb05 3312 	mls	r3, r5, r2, r3
 8012e18:	297e      	cmp	r1, #126	; 0x7e
 8012e1a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012e1e:	f000 80a3 	beq.w	8012f68 <uxr_read_framed_msg+0x510>
 8012e22:	f081 0120 	eor.w	r1, r1, #32
 8012e26:	e64e      	b.n	8012ac6 <uxr_read_framed_msg+0x6e>
 8012e28:	1c59      	adds	r1, r3, #1
 8012e2a:	084a      	lsrs	r2, r1, #1
 8012e2c:	fba6 5202 	umull	r5, r2, r6, r2
 8012e30:	0892      	lsrs	r2, r2, #2
 8012e32:	252a      	movs	r5, #42	; 0x2a
 8012e34:	fb05 1212 	mls	r2, r5, r2, r1
 8012e38:	b2d1      	uxtb	r1, r2
 8012e3a:	4288      	cmp	r0, r1
 8012e3c:	d081      	beq.n	8012d42 <uxr_read_framed_msg+0x2ea>
 8012e3e:	3302      	adds	r3, #2
 8012e40:	4422      	add	r2, r4
 8012e42:	0858      	lsrs	r0, r3, #1
 8012e44:	fba6 1000 	umull	r1, r0, r6, r0
 8012e48:	7891      	ldrb	r1, [r2, #2]
 8012e4a:	0882      	lsrs	r2, r0, #2
 8012e4c:	fb05 3312 	mls	r3, r5, r2, r3
 8012e50:	297e      	cmp	r1, #126	; 0x7e
 8012e52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012e56:	d077      	beq.n	8012f48 <uxr_read_framed_msg+0x4f0>
 8012e58:	f081 0120 	eor.w	r1, r1, #32
 8012e5c:	e65b      	b.n	8012b16 <uxr_read_framed_msg+0xbe>
 8012e5e:	1c59      	adds	r1, r3, #1
 8012e60:	084a      	lsrs	r2, r1, #1
 8012e62:	fba6 5202 	umull	r5, r2, r6, r2
 8012e66:	0892      	lsrs	r2, r2, #2
 8012e68:	252a      	movs	r5, #42	; 0x2a
 8012e6a:	fb05 1212 	mls	r2, r5, r2, r1
 8012e6e:	b2d1      	uxtb	r1, r2
 8012e70:	4288      	cmp	r0, r1
 8012e72:	f43f af57 	beq.w	8012d24 <uxr_read_framed_msg+0x2cc>
 8012e76:	3302      	adds	r3, #2
 8012e78:	4422      	add	r2, r4
 8012e7a:	0858      	lsrs	r0, r3, #1
 8012e7c:	fba6 1000 	umull	r1, r0, r6, r0
 8012e80:	7891      	ldrb	r1, [r2, #2]
 8012e82:	0882      	lsrs	r2, r0, #2
 8012e84:	fb05 3312 	mls	r3, r5, r2, r3
 8012e88:	297e      	cmp	r1, #126	; 0x7e
 8012e8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012e8e:	d06b      	beq.n	8012f68 <uxr_read_framed_msg+0x510>
 8012e90:	f081 0120 	eor.w	r1, r1, #32
 8012e94:	e69d      	b.n	8012bd2 <uxr_read_framed_msg+0x17a>
 8012e96:	1c5d      	adds	r5, r3, #1
 8012e98:	086a      	lsrs	r2, r5, #1
 8012e9a:	fba6 0202 	umull	r0, r2, r6, r2
 8012e9e:	0892      	lsrs	r2, r2, #2
 8012ea0:	202a      	movs	r0, #42	; 0x2a
 8012ea2:	fb00 5212 	mls	r2, r0, r2, r5
 8012ea6:	b2d5      	uxtb	r5, r2
 8012ea8:	42a9      	cmp	r1, r5
 8012eaa:	f43f af4c 	beq.w	8012d46 <uxr_read_framed_msg+0x2ee>
 8012eae:	3302      	adds	r3, #2
 8012eb0:	4422      	add	r2, r4
 8012eb2:	0859      	lsrs	r1, r3, #1
 8012eb4:	fba6 5101 	umull	r5, r1, r6, r1
 8012eb8:	7895      	ldrb	r5, [r2, #2]
 8012eba:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012ebe:	088a      	lsrs	r2, r1, #2
 8012ec0:	fb00 3312 	mls	r3, r0, r2, r3
 8012ec4:	2d7e      	cmp	r5, #126	; 0x7e
 8012ec6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012eca:	f43f af3c 	beq.w	8012d46 <uxr_read_framed_msg+0x2ee>
 8012ece:	f085 0520 	eor.w	r5, r5, #32
 8012ed2:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012ed6:	e6e5      	b.n	8012ca4 <uxr_read_framed_msg+0x24c>
 8012ed8:	1c59      	adds	r1, r3, #1
 8012eda:	084a      	lsrs	r2, r1, #1
 8012edc:	fba6 5202 	umull	r5, r2, r6, r2
 8012ee0:	0892      	lsrs	r2, r2, #2
 8012ee2:	252a      	movs	r5, #42	; 0x2a
 8012ee4:	fb05 1212 	mls	r2, r5, r2, r1
 8012ee8:	b2d1      	uxtb	r1, r2
 8012eea:	4288      	cmp	r0, r1
 8012eec:	f43f af29 	beq.w	8012d42 <uxr_read_framed_msg+0x2ea>
 8012ef0:	3302      	adds	r3, #2
 8012ef2:	4422      	add	r2, r4
 8012ef4:	0858      	lsrs	r0, r3, #1
 8012ef6:	fba6 1000 	umull	r1, r0, r6, r0
 8012efa:	7891      	ldrb	r1, [r2, #2]
 8012efc:	0882      	lsrs	r2, r0, #2
 8012efe:	fb05 3312 	mls	r3, r5, r2, r3
 8012f02:	297e      	cmp	r1, #126	; 0x7e
 8012f04:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012f08:	d01e      	beq.n	8012f48 <uxr_read_framed_msg+0x4f0>
 8012f0a:	f081 0120 	eor.w	r1, r1, #32
 8012f0e:	e689      	b.n	8012c24 <uxr_read_framed_msg+0x1cc>
 8012f10:	1c51      	adds	r1, r2, #1
 8012f12:	084b      	lsrs	r3, r1, #1
 8012f14:	fba6 5303 	umull	r5, r3, r6, r3
 8012f18:	089b      	lsrs	r3, r3, #2
 8012f1a:	252a      	movs	r5, #42	; 0x2a
 8012f1c:	fb05 1313 	mls	r3, r5, r3, r1
 8012f20:	b2d9      	uxtb	r1, r3
 8012f22:	4288      	cmp	r0, r1
 8012f24:	f43f af3a 	beq.w	8012d9c <uxr_read_framed_msg+0x344>
 8012f28:	3202      	adds	r2, #2
 8012f2a:	4423      	add	r3, r4
 8012f2c:	0850      	lsrs	r0, r2, #1
 8012f2e:	789b      	ldrb	r3, [r3, #2]
 8012f30:	fba6 1000 	umull	r1, r0, r6, r0
 8012f34:	0880      	lsrs	r0, r0, #2
 8012f36:	fb05 2210 	mls	r2, r5, r0, r2
 8012f3a:	2b7e      	cmp	r3, #126	; 0x7e
 8012f3c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012f40:	d014      	beq.n	8012f6c <uxr_read_framed_msg+0x514>
 8012f42:	f083 0120 	eor.w	r1, r3, #32
 8012f46:	e68a      	b.n	8012c5e <uxr_read_framed_msg+0x206>
 8012f48:	2302      	movs	r3, #2
 8012f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012f4c:	4649      	mov	r1, r9
 8012f4e:	e9cd 2300 	strd	r2, r3, [sp]
 8012f52:	4620      	mov	r0, r4
 8012f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f56:	4652      	mov	r2, sl
 8012f58:	f7ff fcfc 	bl	8012954 <uxr_framing_read_transport>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	f47f aeee 	bne.w	8012d3e <uxr_read_framed_msg+0x2e6>
 8012f62:	2301      	movs	r3, #1
 8012f64:	7023      	strb	r3, [r4, #0]
 8012f66:	e589      	b.n	8012a7c <uxr_read_framed_msg+0x24>
 8012f68:	2301      	movs	r3, #1
 8012f6a:	e7ee      	b.n	8012f4a <uxr_read_framed_msg+0x4f2>
 8012f6c:	2303      	movs	r3, #3
 8012f6e:	e7ec      	b.n	8012f4a <uxr_read_framed_msg+0x4f2>
 8012f70:	ee17 9a90 	vmov	r9, s15
 8012f74:	e6b1      	b.n	8012cda <uxr_read_framed_msg+0x282>
 8012f76:	bf00      	nop

08012f78 <uxr_prepare_output_stream>:
 8012f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f7a:	b087      	sub	sp, #28
 8012f7c:	2407      	movs	r4, #7
 8012f7e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012f80:	9202      	str	r2, [sp, #8]
 8012f82:	2500      	movs	r5, #0
 8012f84:	1d32      	adds	r2, r6, #4
 8012f86:	e9cd 4500 	strd	r4, r5, [sp]
 8012f8a:	9103      	str	r1, [sp, #12]
 8012f8c:	461c      	mov	r4, r3
 8012f8e:	4606      	mov	r6, r0
 8012f90:	f7f9 fdfc 	bl	800cb8c <uxr_prepare_stream_to_write_submessage>
 8012f94:	f080 0201 	eor.w	r2, r0, #1
 8012f98:	b2d2      	uxtb	r2, r2
 8012f9a:	75a2      	strb	r2, [r4, #22]
 8012f9c:	b112      	cbz	r2, 8012fa4 <uxr_prepare_output_stream+0x2c>
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	b007      	add	sp, #28
 8012fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fa4:	aa05      	add	r2, sp, #20
 8012fa6:	9902      	ldr	r1, [sp, #8]
 8012fa8:	4630      	mov	r0, r6
 8012faa:	f7f9 ff29 	bl	800ce00 <uxr_init_base_object_request>
 8012fae:	a905      	add	r1, sp, #20
 8012fb0:	4605      	mov	r5, r0
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f7fa ffc0 	bl	800df38 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012fb8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012fbc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012fc0:	1a52      	subs	r2, r2, r1
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	f7f6 fe4a 	bl	8009c5c <ucdr_init_buffer>
 8012fc8:	4620      	mov	r0, r4
 8012fca:	463a      	mov	r2, r7
 8012fcc:	4631      	mov	r1, r6
 8012fce:	f7f6 fe1b 	bl	8009c08 <ucdr_set_on_full_buffer_callback>
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	b007      	add	sp, #28
 8012fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fd8 <rcl_get_default_domain_id>:
 8012fd8:	b530      	push	{r4, r5, lr}
 8012fda:	b083      	sub	sp, #12
 8012fdc:	2300      	movs	r3, #0
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	b1d0      	cbz	r0, 8013018 <rcl_get_default_domain_id+0x40>
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	4669      	mov	r1, sp
 8012fe6:	4815      	ldr	r0, [pc, #84]	; (801303c <rcl_get_default_domain_id+0x64>)
 8012fe8:	f7fd fa0e 	bl	8010408 <rcutils_get_env>
 8012fec:	4602      	mov	r2, r0
 8012fee:	b110      	cbz	r0, 8012ff6 <rcl_get_default_domain_id+0x1e>
 8012ff0:	2001      	movs	r0, #1
 8012ff2:	b003      	add	sp, #12
 8012ff4:	bd30      	pop	{r4, r5, pc}
 8012ff6:	9b00      	ldr	r3, [sp, #0]
 8012ff8:	b18b      	cbz	r3, 801301e <rcl_get_default_domain_id+0x46>
 8012ffa:	7818      	ldrb	r0, [r3, #0]
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d0f8      	beq.n	8012ff2 <rcl_get_default_domain_id+0x1a>
 8013000:	4618      	mov	r0, r3
 8013002:	a901      	add	r1, sp, #4
 8013004:	9201      	str	r2, [sp, #4]
 8013006:	f000 fd01 	bl	8013a0c <strtoul>
 801300a:	4605      	mov	r5, r0
 801300c:	b150      	cbz	r0, 8013024 <rcl_get_default_domain_id+0x4c>
 801300e:	1c43      	adds	r3, r0, #1
 8013010:	d00d      	beq.n	801302e <rcl_get_default_domain_id+0x56>
 8013012:	6025      	str	r5, [r4, #0]
 8013014:	2000      	movs	r0, #0
 8013016:	e7ec      	b.n	8012ff2 <rcl_get_default_domain_id+0x1a>
 8013018:	200b      	movs	r0, #11
 801301a:	b003      	add	sp, #12
 801301c:	bd30      	pop	{r4, r5, pc}
 801301e:	4618      	mov	r0, r3
 8013020:	b003      	add	sp, #12
 8013022:	bd30      	pop	{r4, r5, pc}
 8013024:	9b01      	ldr	r3, [sp, #4]
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d0f2      	beq.n	8013012 <rcl_get_default_domain_id+0x3a>
 801302c:	e7e0      	b.n	8012ff0 <rcl_get_default_domain_id+0x18>
 801302e:	f000 f9c3 	bl	80133b8 <__errno>
 8013032:	6803      	ldr	r3, [r0, #0]
 8013034:	2b22      	cmp	r3, #34	; 0x22
 8013036:	d1ec      	bne.n	8013012 <rcl_get_default_domain_id+0x3a>
 8013038:	e7da      	b.n	8012ff0 <rcl_get_default_domain_id+0x18>
 801303a:	bf00      	nop
 801303c:	080155e4 	.word	0x080155e4

08013040 <rcl_get_zero_initialized_guard_condition>:
 8013040:	4a03      	ldr	r2, [pc, #12]	; (8013050 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013042:	4603      	mov	r3, r0
 8013044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013048:	e883 0003 	stmia.w	r3, {r0, r1}
 801304c:	4618      	mov	r0, r3
 801304e:	4770      	bx	lr
 8013050:	080155f4 	.word	0x080155f4

08013054 <rcl_guard_condition_init_from_rmw>:
 8013054:	b082      	sub	sp, #8
 8013056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801305a:	b086      	sub	sp, #24
 801305c:	ac0c      	add	r4, sp, #48	; 0x30
 801305e:	4684      	mov	ip, r0
 8013060:	f844 3f04 	str.w	r3, [r4, #4]!
 8013064:	460f      	mov	r7, r1
 8013066:	4690      	mov	r8, r2
 8013068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801306a:	ad01      	add	r5, sp, #4
 801306c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	602b      	str	r3, [r5, #0]
 8013072:	a801      	add	r0, sp, #4
 8013074:	4664      	mov	r4, ip
 8013076:	f7f7 fc5f 	bl	800a938 <rcutils_allocator_is_valid>
 801307a:	b328      	cbz	r0, 80130c8 <rcl_guard_condition_init_from_rmw+0x74>
 801307c:	b324      	cbz	r4, 80130c8 <rcl_guard_condition_init_from_rmw+0x74>
 801307e:	6866      	ldr	r6, [r4, #4]
 8013080:	b9e6      	cbnz	r6, 80130bc <rcl_guard_condition_init_from_rmw+0x68>
 8013082:	f1b8 0f00 	cmp.w	r8, #0
 8013086:	d01f      	beq.n	80130c8 <rcl_guard_condition_init_from_rmw+0x74>
 8013088:	4640      	mov	r0, r8
 801308a:	f7fb f891 	bl	800e1b0 <rcl_context_is_valid>
 801308e:	b308      	cbz	r0, 80130d4 <rcl_guard_condition_init_from_rmw+0x80>
 8013090:	9b01      	ldr	r3, [sp, #4]
 8013092:	9905      	ldr	r1, [sp, #20]
 8013094:	201c      	movs	r0, #28
 8013096:	4798      	blx	r3
 8013098:	4605      	mov	r5, r0
 801309a:	6060      	str	r0, [r4, #4]
 801309c:	b340      	cbz	r0, 80130f0 <rcl_guard_condition_init_from_rmw+0x9c>
 801309e:	b1df      	cbz	r7, 80130d8 <rcl_guard_condition_init_from_rmw+0x84>
 80130a0:	6007      	str	r7, [r0, #0]
 80130a2:	7106      	strb	r6, [r0, #4]
 80130a4:	ac01      	add	r4, sp, #4
 80130a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130a8:	3508      	adds	r5, #8
 80130aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80130ac:	6823      	ldr	r3, [r4, #0]
 80130ae:	602b      	str	r3, [r5, #0]
 80130b0:	2000      	movs	r0, #0
 80130b2:	b006      	add	sp, #24
 80130b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130b8:	b002      	add	sp, #8
 80130ba:	4770      	bx	lr
 80130bc:	2064      	movs	r0, #100	; 0x64
 80130be:	b006      	add	sp, #24
 80130c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130c4:	b002      	add	sp, #8
 80130c6:	4770      	bx	lr
 80130c8:	200b      	movs	r0, #11
 80130ca:	b006      	add	sp, #24
 80130cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	b002      	add	sp, #8
 80130d2:	4770      	bx	lr
 80130d4:	2065      	movs	r0, #101	; 0x65
 80130d6:	e7f2      	b.n	80130be <rcl_guard_condition_init_from_rmw+0x6a>
 80130d8:	f8d8 0000 	ldr.w	r0, [r8]
 80130dc:	3028      	adds	r0, #40	; 0x28
 80130de:	f000 f93b 	bl	8013358 <rmw_create_guard_condition>
 80130e2:	6028      	str	r0, [r5, #0]
 80130e4:	6865      	ldr	r5, [r4, #4]
 80130e6:	682e      	ldr	r6, [r5, #0]
 80130e8:	b126      	cbz	r6, 80130f4 <rcl_guard_condition_init_from_rmw+0xa0>
 80130ea:	2301      	movs	r3, #1
 80130ec:	712b      	strb	r3, [r5, #4]
 80130ee:	e7d9      	b.n	80130a4 <rcl_guard_condition_init_from_rmw+0x50>
 80130f0:	200a      	movs	r0, #10
 80130f2:	e7e4      	b.n	80130be <rcl_guard_condition_init_from_rmw+0x6a>
 80130f4:	4628      	mov	r0, r5
 80130f6:	9b02      	ldr	r3, [sp, #8]
 80130f8:	9905      	ldr	r1, [sp, #20]
 80130fa:	4798      	blx	r3
 80130fc:	6066      	str	r6, [r4, #4]
 80130fe:	2001      	movs	r0, #1
 8013100:	e7dd      	b.n	80130be <rcl_guard_condition_init_from_rmw+0x6a>
 8013102:	bf00      	nop

08013104 <rcl_guard_condition_fini>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	b1f0      	cbz	r0, 8013148 <rcl_guard_condition_fini+0x44>
 801310a:	4604      	mov	r4, r0
 801310c:	6840      	ldr	r0, [r0, #4]
 801310e:	b158      	cbz	r0, 8013128 <rcl_guard_condition_fini+0x24>
 8013110:	6803      	ldr	r3, [r0, #0]
 8013112:	68c6      	ldr	r6, [r0, #12]
 8013114:	6981      	ldr	r1, [r0, #24]
 8013116:	b15b      	cbz	r3, 8013130 <rcl_guard_condition_fini+0x2c>
 8013118:	7905      	ldrb	r5, [r0, #4]
 801311a:	b95d      	cbnz	r5, 8013134 <rcl_guard_condition_fini+0x30>
 801311c:	47b0      	blx	r6
 801311e:	2300      	movs	r3, #0
 8013120:	4628      	mov	r0, r5
 8013122:	6063      	str	r3, [r4, #4]
 8013124:	b002      	add	sp, #8
 8013126:	bd70      	pop	{r4, r5, r6, pc}
 8013128:	4605      	mov	r5, r0
 801312a:	4628      	mov	r0, r5
 801312c:	b002      	add	sp, #8
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	461d      	mov	r5, r3
 8013132:	e7f3      	b.n	801311c <rcl_guard_condition_fini+0x18>
 8013134:	4618      	mov	r0, r3
 8013136:	9101      	str	r1, [sp, #4]
 8013138:	f000 f922 	bl	8013380 <rmw_destroy_guard_condition>
 801313c:	1e05      	subs	r5, r0, #0
 801313e:	9901      	ldr	r1, [sp, #4]
 8013140:	6860      	ldr	r0, [r4, #4]
 8013142:	bf18      	it	ne
 8013144:	2501      	movne	r5, #1
 8013146:	e7e9      	b.n	801311c <rcl_guard_condition_fini+0x18>
 8013148:	250b      	movs	r5, #11
 801314a:	4628      	mov	r0, r5
 801314c:	b002      	add	sp, #8
 801314e:	bd70      	pop	{r4, r5, r6, pc}

08013150 <rcl_guard_condition_get_default_options>:
 8013150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013152:	b087      	sub	sp, #28
 8013154:	4607      	mov	r7, r0
 8013156:	466c      	mov	r4, sp
 8013158:	4668      	mov	r0, sp
 801315a:	f7f7 fbdf 	bl	800a91c <rcutils_get_default_allocator>
 801315e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013160:	4d07      	ldr	r5, [pc, #28]	; (8013180 <rcl_guard_condition_get_default_options+0x30>)
 8013162:	f8d4 c000 	ldr.w	ip, [r4]
 8013166:	462e      	mov	r6, r5
 8013168:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801316a:	462c      	mov	r4, r5
 801316c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801316e:	463c      	mov	r4, r7
 8013170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013172:	4638      	mov	r0, r7
 8013174:	f8c6 c000 	str.w	ip, [r6]
 8013178:	f8c4 c000 	str.w	ip, [r4]
 801317c:	b007      	add	sp, #28
 801317e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013180:	200091fc 	.word	0x200091fc

08013184 <rcl_guard_condition_get_rmw_handle>:
 8013184:	b110      	cbz	r0, 801318c <rcl_guard_condition_get_rmw_handle+0x8>
 8013186:	6840      	ldr	r0, [r0, #4]
 8013188:	b100      	cbz	r0, 801318c <rcl_guard_condition_get_rmw_handle+0x8>
 801318a:	6800      	ldr	r0, [r0, #0]
 801318c:	4770      	bx	lr
 801318e:	bf00      	nop

08013190 <on_status>:
 8013190:	b082      	sub	sp, #8
 8013192:	b002      	add	sp, #8
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop

08013198 <on_topic>:
 8013198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801319c:	4a21      	ldr	r2, [pc, #132]	; (8013224 <on_topic+0x8c>)
 801319e:	b094      	sub	sp, #80	; 0x50
 80131a0:	6812      	ldr	r2, [r2, #0]
 80131a2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80131a4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80131a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80131aa:	9312      	str	r3, [sp, #72]	; 0x48
 80131ac:	b3ba      	cbz	r2, 801321e <on_topic+0x86>
 80131ae:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80131b2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80131b6:	e001      	b.n	80131bc <on_topic+0x24>
 80131b8:	6892      	ldr	r2, [r2, #8]
 80131ba:	b382      	cbz	r2, 801321e <on_topic+0x86>
 80131bc:	68d4      	ldr	r4, [r2, #12]
 80131be:	8aa3      	ldrh	r3, [r4, #20]
 80131c0:	428b      	cmp	r3, r1
 80131c2:	d1f9      	bne.n	80131b8 <on_topic+0x20>
 80131c4:	7da3      	ldrb	r3, [r4, #22]
 80131c6:	4283      	cmp	r3, r0
 80131c8:	d1f6      	bne.n	80131b8 <on_topic+0x20>
 80131ca:	2248      	movs	r2, #72	; 0x48
 80131cc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80131d0:	4668      	mov	r0, sp
 80131d2:	f000 f973 	bl	80134bc <memcpy>
 80131d6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80131da:	4620      	mov	r0, r4
 80131dc:	f7f8 f962 	bl	800b4a4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80131e0:	4607      	mov	r7, r0
 80131e2:	b1e0      	cbz	r0, 801321e <on_topic+0x86>
 80131e4:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80131e8:	462a      	mov	r2, r5
 80131ea:	4630      	mov	r0, r6
 80131ec:	f108 0110 	add.w	r1, r8, #16
 80131f0:	f7fe fb7e 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 80131f4:	b930      	cbnz	r0, 8013204 <on_topic+0x6c>
 80131f6:	480c      	ldr	r0, [pc, #48]	; (8013228 <on_topic+0x90>)
 80131f8:	4639      	mov	r1, r7
 80131fa:	b014      	add	sp, #80	; 0x50
 80131fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013200:	f7fd bb26 	b.w	8010850 <put_memory>
 8013204:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8013208:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801320c:	f7fe fa9a 	bl	8011744 <rmw_uros_epoch_nanos>
 8013210:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8013214:	2305      	movs	r3, #5
 8013216:	e9c2 0100 	strd	r0, r1, [r2]
 801321a:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801321e:	b014      	add	sp, #80	; 0x50
 8013220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013224:	2000c4c4 	.word	0x2000c4c4
 8013228:	20009258 	.word	0x20009258

0801322c <on_request>:
 801322c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013230:	4822      	ldr	r0, [pc, #136]	; (80132bc <on_request+0x90>)
 8013232:	b095      	sub	sp, #84	; 0x54
 8013234:	9113      	str	r1, [sp, #76]	; 0x4c
 8013236:	6801      	ldr	r1, [r0, #0]
 8013238:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801323a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801323e:	2900      	cmp	r1, #0
 8013240:	d039      	beq.n	80132b6 <on_request+0x8a>
 8013242:	461d      	mov	r5, r3
 8013244:	e001      	b.n	801324a <on_request+0x1e>
 8013246:	6889      	ldr	r1, [r1, #8]
 8013248:	b3a9      	cbz	r1, 80132b6 <on_request+0x8a>
 801324a:	68cc      	ldr	r4, [r1, #12]
 801324c:	8b20      	ldrh	r0, [r4, #24]
 801324e:	4290      	cmp	r0, r2
 8013250:	d1f9      	bne.n	8013246 <on_request+0x1a>
 8013252:	2248      	movs	r2, #72	; 0x48
 8013254:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8013258:	4668      	mov	r0, sp
 801325a:	f000 f92f 	bl	80134bc <memcpy>
 801325e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8013262:	4620      	mov	r0, r4
 8013264:	f7f8 f91e 	bl	800b4a4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013268:	4680      	mov	r8, r0
 801326a:	b320      	cbz	r0, 80132b6 <on_request+0x8a>
 801326c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8013270:	4632      	mov	r2, r6
 8013272:	4638      	mov	r0, r7
 8013274:	f109 0110 	add.w	r1, r9, #16
 8013278:	f7fe fb3a 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 801327c:	b930      	cbnz	r0, 801328c <on_request+0x60>
 801327e:	4810      	ldr	r0, [pc, #64]	; (80132c0 <on_request+0x94>)
 8013280:	4641      	mov	r1, r8
 8013282:	b015      	add	sp, #84	; 0x54
 8013284:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013288:	f7fd bae2 	b.w	8010850 <put_memory>
 801328c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801328e:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8013292:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8013296:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801329a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801329c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80132a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80132a4:	f7fe fa4e 	bl	8011744 <rmw_uros_epoch_nanos>
 80132a8:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80132ac:	2303      	movs	r3, #3
 80132ae:	e9c2 0100 	strd	r0, r1, [r2]
 80132b2:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80132b6:	b015      	add	sp, #84	; 0x54
 80132b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132bc:	2000c4b4 	.word	0x2000c4b4
 80132c0:	20009258 	.word	0x20009258

080132c4 <on_reply>:
 80132c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132c8:	4821      	ldr	r0, [pc, #132]	; (8013350 <on_reply+0x8c>)
 80132ca:	b095      	sub	sp, #84	; 0x54
 80132cc:	9113      	str	r1, [sp, #76]	; 0x4c
 80132ce:	6801      	ldr	r1, [r0, #0]
 80132d0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80132d2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80132d6:	b3b9      	cbz	r1, 8013348 <on_reply+0x84>
 80132d8:	461d      	mov	r5, r3
 80132da:	e001      	b.n	80132e0 <on_reply+0x1c>
 80132dc:	6889      	ldr	r1, [r1, #8]
 80132de:	b399      	cbz	r1, 8013348 <on_reply+0x84>
 80132e0:	68cc      	ldr	r4, [r1, #12]
 80132e2:	8b20      	ldrh	r0, [r4, #24]
 80132e4:	4290      	cmp	r0, r2
 80132e6:	d1f9      	bne.n	80132dc <on_reply+0x18>
 80132e8:	2248      	movs	r2, #72	; 0x48
 80132ea:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80132ee:	4668      	mov	r0, sp
 80132f0:	f000 f8e4 	bl	80134bc <memcpy>
 80132f4:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80132f8:	4620      	mov	r0, r4
 80132fa:	f7f8 f8d3 	bl	800b4a4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80132fe:	4680      	mov	r8, r0
 8013300:	b310      	cbz	r0, 8013348 <on_reply+0x84>
 8013302:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8013306:	4632      	mov	r2, r6
 8013308:	4638      	mov	r0, r7
 801330a:	f109 0110 	add.w	r1, r9, #16
 801330e:	f7fe faef 	bl	80118f0 <ucdr_deserialize_array_uint8_t>
 8013312:	b930      	cbnz	r0, 8013322 <on_reply+0x5e>
 8013314:	480f      	ldr	r0, [pc, #60]	; (8013354 <on_reply+0x90>)
 8013316:	4641      	mov	r1, r8
 8013318:	b015      	add	sp, #84	; 0x54
 801331a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801331e:	f7fd ba97 	b.w	8010850 <put_memory>
 8013322:	b2aa      	uxth	r2, r5
 8013324:	2300      	movs	r3, #0
 8013326:	f609 0128 	addw	r1, r9, #2088	; 0x828
 801332a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801332e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8013332:	e9c1 2300 	strd	r2, r3, [r1]
 8013336:	f7fe fa05 	bl	8011744 <rmw_uros_epoch_nanos>
 801333a:	f609 0218 	addw	r2, r9, #2072	; 0x818
 801333e:	2304      	movs	r3, #4
 8013340:	e9c2 0100 	strd	r0, r1, [r2]
 8013344:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8013348:	b015      	add	sp, #84	; 0x54
 801334a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801334e:	bf00      	nop
 8013350:	20009ae8 	.word	0x20009ae8
 8013354:	20009258 	.word	0x20009258

08013358 <rmw_create_guard_condition>:
 8013358:	b538      	push	{r3, r4, r5, lr}
 801335a:	4605      	mov	r5, r0
 801335c:	4807      	ldr	r0, [pc, #28]	; (801337c <rmw_create_guard_condition+0x24>)
 801335e:	f7fd fa67 	bl	8010830 <get_memory>
 8013362:	b148      	cbz	r0, 8013378 <rmw_create_guard_condition+0x20>
 8013364:	68c4      	ldr	r4, [r0, #12]
 8013366:	2300      	movs	r3, #0
 8013368:	61e5      	str	r5, [r4, #28]
 801336a:	7423      	strb	r3, [r4, #16]
 801336c:	f7fd fac8 	bl	8010900 <rmw_get_implementation_identifier>
 8013370:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013374:	f104 0014 	add.w	r0, r4, #20
 8013378:	bd38      	pop	{r3, r4, r5, pc}
 801337a:	bf00      	nop
 801337c:	2000c3e0 	.word	0x2000c3e0

08013380 <rmw_destroy_guard_condition>:
 8013380:	b508      	push	{r3, lr}
 8013382:	4b08      	ldr	r3, [pc, #32]	; (80133a4 <rmw_destroy_guard_condition+0x24>)
 8013384:	6819      	ldr	r1, [r3, #0]
 8013386:	b911      	cbnz	r1, 801338e <rmw_destroy_guard_condition+0xe>
 8013388:	e00a      	b.n	80133a0 <rmw_destroy_guard_condition+0x20>
 801338a:	6889      	ldr	r1, [r1, #8]
 801338c:	b141      	cbz	r1, 80133a0 <rmw_destroy_guard_condition+0x20>
 801338e:	68cb      	ldr	r3, [r1, #12]
 8013390:	3314      	adds	r3, #20
 8013392:	4298      	cmp	r0, r3
 8013394:	d1f9      	bne.n	801338a <rmw_destroy_guard_condition+0xa>
 8013396:	4803      	ldr	r0, [pc, #12]	; (80133a4 <rmw_destroy_guard_condition+0x24>)
 8013398:	f7fd fa5a 	bl	8010850 <put_memory>
 801339c:	2000      	movs	r0, #0
 801339e:	bd08      	pop	{r3, pc}
 80133a0:	2001      	movs	r0, #1
 80133a2:	bd08      	pop	{r3, pc}
 80133a4:	2000c3e0 	.word	0x2000c3e0

080133a8 <calloc>:
 80133a8:	4b02      	ldr	r3, [pc, #8]	; (80133b4 <calloc+0xc>)
 80133aa:	460a      	mov	r2, r1
 80133ac:	4601      	mov	r1, r0
 80133ae:	6818      	ldr	r0, [r3, #0]
 80133b0:	f000 b8b4 	b.w	801351c <_calloc_r>
 80133b4:	20000094 	.word	0x20000094

080133b8 <__errno>:
 80133b8:	4b01      	ldr	r3, [pc, #4]	; (80133c0 <__errno+0x8>)
 80133ba:	6818      	ldr	r0, [r3, #0]
 80133bc:	4770      	bx	lr
 80133be:	bf00      	nop
 80133c0:	20000094 	.word	0x20000094

080133c4 <getenv>:
 80133c4:	b507      	push	{r0, r1, r2, lr}
 80133c6:	4b04      	ldr	r3, [pc, #16]	; (80133d8 <getenv+0x14>)
 80133c8:	4601      	mov	r1, r0
 80133ca:	aa01      	add	r2, sp, #4
 80133cc:	6818      	ldr	r0, [r3, #0]
 80133ce:	f000 f805 	bl	80133dc <_findenv_r>
 80133d2:	b003      	add	sp, #12
 80133d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80133d8:	20000094 	.word	0x20000094

080133dc <_findenv_r>:
 80133dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8013450 <_findenv_r+0x74>
 80133e4:	4607      	mov	r7, r0
 80133e6:	4689      	mov	r9, r1
 80133e8:	4616      	mov	r6, r2
 80133ea:	f000 fb71 	bl	8013ad0 <__env_lock>
 80133ee:	f8da 4000 	ldr.w	r4, [sl]
 80133f2:	b134      	cbz	r4, 8013402 <_findenv_r+0x26>
 80133f4:	464b      	mov	r3, r9
 80133f6:	4698      	mov	r8, r3
 80133f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133fc:	b13a      	cbz	r2, 801340e <_findenv_r+0x32>
 80133fe:	2a3d      	cmp	r2, #61	; 0x3d
 8013400:	d1f9      	bne.n	80133f6 <_findenv_r+0x1a>
 8013402:	4638      	mov	r0, r7
 8013404:	f000 fb6a 	bl	8013adc <__env_unlock>
 8013408:	2000      	movs	r0, #0
 801340a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801340e:	eba8 0809 	sub.w	r8, r8, r9
 8013412:	46a3      	mov	fp, r4
 8013414:	f854 0b04 	ldr.w	r0, [r4], #4
 8013418:	2800      	cmp	r0, #0
 801341a:	d0f2      	beq.n	8013402 <_findenv_r+0x26>
 801341c:	4642      	mov	r2, r8
 801341e:	4649      	mov	r1, r9
 8013420:	f000 fa57 	bl	80138d2 <strncmp>
 8013424:	2800      	cmp	r0, #0
 8013426:	d1f4      	bne.n	8013412 <_findenv_r+0x36>
 8013428:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801342c:	eb03 0508 	add.w	r5, r3, r8
 8013430:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013434:	2b3d      	cmp	r3, #61	; 0x3d
 8013436:	d1ec      	bne.n	8013412 <_findenv_r+0x36>
 8013438:	f8da 3000 	ldr.w	r3, [sl]
 801343c:	ebab 0303 	sub.w	r3, fp, r3
 8013440:	109b      	asrs	r3, r3, #2
 8013442:	4638      	mov	r0, r7
 8013444:	6033      	str	r3, [r6, #0]
 8013446:	f000 fb49 	bl	8013adc <__env_unlock>
 801344a:	1c68      	adds	r0, r5, #1
 801344c:	e7dd      	b.n	801340a <_findenv_r+0x2e>
 801344e:	bf00      	nop
 8013450:	20000000 	.word	0x20000000

08013454 <__libc_init_array>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	4d0d      	ldr	r5, [pc, #52]	; (801348c <__libc_init_array+0x38>)
 8013458:	4c0d      	ldr	r4, [pc, #52]	; (8013490 <__libc_init_array+0x3c>)
 801345a:	1b64      	subs	r4, r4, r5
 801345c:	10a4      	asrs	r4, r4, #2
 801345e:	2600      	movs	r6, #0
 8013460:	42a6      	cmp	r6, r4
 8013462:	d109      	bne.n	8013478 <__libc_init_array+0x24>
 8013464:	4d0b      	ldr	r5, [pc, #44]	; (8013494 <__libc_init_array+0x40>)
 8013466:	4c0c      	ldr	r4, [pc, #48]	; (8013498 <__libc_init_array+0x44>)
 8013468:	f001 fbb4 	bl	8014bd4 <_init>
 801346c:	1b64      	subs	r4, r4, r5
 801346e:	10a4      	asrs	r4, r4, #2
 8013470:	2600      	movs	r6, #0
 8013472:	42a6      	cmp	r6, r4
 8013474:	d105      	bne.n	8013482 <__libc_init_array+0x2e>
 8013476:	bd70      	pop	{r4, r5, r6, pc}
 8013478:	f855 3b04 	ldr.w	r3, [r5], #4
 801347c:	4798      	blx	r3
 801347e:	3601      	adds	r6, #1
 8013480:	e7ee      	b.n	8013460 <__libc_init_array+0xc>
 8013482:	f855 3b04 	ldr.w	r3, [r5], #4
 8013486:	4798      	blx	r3
 8013488:	3601      	adds	r6, #1
 801348a:	e7f2      	b.n	8013472 <__libc_init_array+0x1e>
 801348c:	08015850 	.word	0x08015850
 8013490:	08015850 	.word	0x08015850
 8013494:	08015850 	.word	0x08015850
 8013498:	08015854 	.word	0x08015854

0801349c <malloc>:
 801349c:	4b02      	ldr	r3, [pc, #8]	; (80134a8 <malloc+0xc>)
 801349e:	4601      	mov	r1, r0
 80134a0:	6818      	ldr	r0, [r3, #0]
 80134a2:	f000 b8bd 	b.w	8013620 <_malloc_r>
 80134a6:	bf00      	nop
 80134a8:	20000094 	.word	0x20000094

080134ac <free>:
 80134ac:	4b02      	ldr	r3, [pc, #8]	; (80134b8 <free+0xc>)
 80134ae:	4601      	mov	r1, r0
 80134b0:	6818      	ldr	r0, [r3, #0]
 80134b2:	f000 b849 	b.w	8013548 <_free_r>
 80134b6:	bf00      	nop
 80134b8:	20000094 	.word	0x20000094

080134bc <memcpy>:
 80134bc:	440a      	add	r2, r1
 80134be:	4291      	cmp	r1, r2
 80134c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80134c4:	d100      	bne.n	80134c8 <memcpy+0xc>
 80134c6:	4770      	bx	lr
 80134c8:	b510      	push	{r4, lr}
 80134ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134d2:	4291      	cmp	r1, r2
 80134d4:	d1f9      	bne.n	80134ca <memcpy+0xe>
 80134d6:	bd10      	pop	{r4, pc}

080134d8 <memmove>:
 80134d8:	4288      	cmp	r0, r1
 80134da:	b510      	push	{r4, lr}
 80134dc:	eb01 0402 	add.w	r4, r1, r2
 80134e0:	d902      	bls.n	80134e8 <memmove+0x10>
 80134e2:	4284      	cmp	r4, r0
 80134e4:	4623      	mov	r3, r4
 80134e6:	d807      	bhi.n	80134f8 <memmove+0x20>
 80134e8:	1e43      	subs	r3, r0, #1
 80134ea:	42a1      	cmp	r1, r4
 80134ec:	d008      	beq.n	8013500 <memmove+0x28>
 80134ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134f6:	e7f8      	b.n	80134ea <memmove+0x12>
 80134f8:	4402      	add	r2, r0
 80134fa:	4601      	mov	r1, r0
 80134fc:	428a      	cmp	r2, r1
 80134fe:	d100      	bne.n	8013502 <memmove+0x2a>
 8013500:	bd10      	pop	{r4, pc}
 8013502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801350a:	e7f7      	b.n	80134fc <memmove+0x24>

0801350c <memset>:
 801350c:	4402      	add	r2, r0
 801350e:	4603      	mov	r3, r0
 8013510:	4293      	cmp	r3, r2
 8013512:	d100      	bne.n	8013516 <memset+0xa>
 8013514:	4770      	bx	lr
 8013516:	f803 1b01 	strb.w	r1, [r3], #1
 801351a:	e7f9      	b.n	8013510 <memset+0x4>

0801351c <_calloc_r>:
 801351c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801351e:	fba1 2402 	umull	r2, r4, r1, r2
 8013522:	b94c      	cbnz	r4, 8013538 <_calloc_r+0x1c>
 8013524:	4611      	mov	r1, r2
 8013526:	9201      	str	r2, [sp, #4]
 8013528:	f000 f87a 	bl	8013620 <_malloc_r>
 801352c:	9a01      	ldr	r2, [sp, #4]
 801352e:	4605      	mov	r5, r0
 8013530:	b930      	cbnz	r0, 8013540 <_calloc_r+0x24>
 8013532:	4628      	mov	r0, r5
 8013534:	b003      	add	sp, #12
 8013536:	bd30      	pop	{r4, r5, pc}
 8013538:	220c      	movs	r2, #12
 801353a:	6002      	str	r2, [r0, #0]
 801353c:	2500      	movs	r5, #0
 801353e:	e7f8      	b.n	8013532 <_calloc_r+0x16>
 8013540:	4621      	mov	r1, r4
 8013542:	f7ff ffe3 	bl	801350c <memset>
 8013546:	e7f4      	b.n	8013532 <_calloc_r+0x16>

08013548 <_free_r>:
 8013548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801354a:	2900      	cmp	r1, #0
 801354c:	d044      	beq.n	80135d8 <_free_r+0x90>
 801354e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013552:	9001      	str	r0, [sp, #4]
 8013554:	2b00      	cmp	r3, #0
 8013556:	f1a1 0404 	sub.w	r4, r1, #4
 801355a:	bfb8      	it	lt
 801355c:	18e4      	addlt	r4, r4, r3
 801355e:	f000 fbcd 	bl	8013cfc <__malloc_lock>
 8013562:	4a1e      	ldr	r2, [pc, #120]	; (80135dc <_free_r+0x94>)
 8013564:	9801      	ldr	r0, [sp, #4]
 8013566:	6813      	ldr	r3, [r2, #0]
 8013568:	b933      	cbnz	r3, 8013578 <_free_r+0x30>
 801356a:	6063      	str	r3, [r4, #4]
 801356c:	6014      	str	r4, [r2, #0]
 801356e:	b003      	add	sp, #12
 8013570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013574:	f000 bbc8 	b.w	8013d08 <__malloc_unlock>
 8013578:	42a3      	cmp	r3, r4
 801357a:	d908      	bls.n	801358e <_free_r+0x46>
 801357c:	6825      	ldr	r5, [r4, #0]
 801357e:	1961      	adds	r1, r4, r5
 8013580:	428b      	cmp	r3, r1
 8013582:	bf01      	itttt	eq
 8013584:	6819      	ldreq	r1, [r3, #0]
 8013586:	685b      	ldreq	r3, [r3, #4]
 8013588:	1949      	addeq	r1, r1, r5
 801358a:	6021      	streq	r1, [r4, #0]
 801358c:	e7ed      	b.n	801356a <_free_r+0x22>
 801358e:	461a      	mov	r2, r3
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	b10b      	cbz	r3, 8013598 <_free_r+0x50>
 8013594:	42a3      	cmp	r3, r4
 8013596:	d9fa      	bls.n	801358e <_free_r+0x46>
 8013598:	6811      	ldr	r1, [r2, #0]
 801359a:	1855      	adds	r5, r2, r1
 801359c:	42a5      	cmp	r5, r4
 801359e:	d10b      	bne.n	80135b8 <_free_r+0x70>
 80135a0:	6824      	ldr	r4, [r4, #0]
 80135a2:	4421      	add	r1, r4
 80135a4:	1854      	adds	r4, r2, r1
 80135a6:	42a3      	cmp	r3, r4
 80135a8:	6011      	str	r1, [r2, #0]
 80135aa:	d1e0      	bne.n	801356e <_free_r+0x26>
 80135ac:	681c      	ldr	r4, [r3, #0]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	6053      	str	r3, [r2, #4]
 80135b2:	4421      	add	r1, r4
 80135b4:	6011      	str	r1, [r2, #0]
 80135b6:	e7da      	b.n	801356e <_free_r+0x26>
 80135b8:	d902      	bls.n	80135c0 <_free_r+0x78>
 80135ba:	230c      	movs	r3, #12
 80135bc:	6003      	str	r3, [r0, #0]
 80135be:	e7d6      	b.n	801356e <_free_r+0x26>
 80135c0:	6825      	ldr	r5, [r4, #0]
 80135c2:	1961      	adds	r1, r4, r5
 80135c4:	428b      	cmp	r3, r1
 80135c6:	bf04      	itt	eq
 80135c8:	6819      	ldreq	r1, [r3, #0]
 80135ca:	685b      	ldreq	r3, [r3, #4]
 80135cc:	6063      	str	r3, [r4, #4]
 80135ce:	bf04      	itt	eq
 80135d0:	1949      	addeq	r1, r1, r5
 80135d2:	6021      	streq	r1, [r4, #0]
 80135d4:	6054      	str	r4, [r2, #4]
 80135d6:	e7ca      	b.n	801356e <_free_r+0x26>
 80135d8:	b003      	add	sp, #12
 80135da:	bd30      	pop	{r4, r5, pc}
 80135dc:	20009210 	.word	0x20009210

080135e0 <sbrk_aligned>:
 80135e0:	b570      	push	{r4, r5, r6, lr}
 80135e2:	4e0e      	ldr	r6, [pc, #56]	; (801361c <sbrk_aligned+0x3c>)
 80135e4:	460c      	mov	r4, r1
 80135e6:	6831      	ldr	r1, [r6, #0]
 80135e8:	4605      	mov	r5, r0
 80135ea:	b911      	cbnz	r1, 80135f2 <sbrk_aligned+0x12>
 80135ec:	f000 f918 	bl	8013820 <_sbrk_r>
 80135f0:	6030      	str	r0, [r6, #0]
 80135f2:	4621      	mov	r1, r4
 80135f4:	4628      	mov	r0, r5
 80135f6:	f000 f913 	bl	8013820 <_sbrk_r>
 80135fa:	1c43      	adds	r3, r0, #1
 80135fc:	d00a      	beq.n	8013614 <sbrk_aligned+0x34>
 80135fe:	1cc4      	adds	r4, r0, #3
 8013600:	f024 0403 	bic.w	r4, r4, #3
 8013604:	42a0      	cmp	r0, r4
 8013606:	d007      	beq.n	8013618 <sbrk_aligned+0x38>
 8013608:	1a21      	subs	r1, r4, r0
 801360a:	4628      	mov	r0, r5
 801360c:	f000 f908 	bl	8013820 <_sbrk_r>
 8013610:	3001      	adds	r0, #1
 8013612:	d101      	bne.n	8013618 <sbrk_aligned+0x38>
 8013614:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013618:	4620      	mov	r0, r4
 801361a:	bd70      	pop	{r4, r5, r6, pc}
 801361c:	20009214 	.word	0x20009214

08013620 <_malloc_r>:
 8013620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013624:	1ccd      	adds	r5, r1, #3
 8013626:	f025 0503 	bic.w	r5, r5, #3
 801362a:	3508      	adds	r5, #8
 801362c:	2d0c      	cmp	r5, #12
 801362e:	bf38      	it	cc
 8013630:	250c      	movcc	r5, #12
 8013632:	2d00      	cmp	r5, #0
 8013634:	4607      	mov	r7, r0
 8013636:	db01      	blt.n	801363c <_malloc_r+0x1c>
 8013638:	42a9      	cmp	r1, r5
 801363a:	d905      	bls.n	8013648 <_malloc_r+0x28>
 801363c:	230c      	movs	r3, #12
 801363e:	603b      	str	r3, [r7, #0]
 8013640:	2600      	movs	r6, #0
 8013642:	4630      	mov	r0, r6
 8013644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013648:	4e2e      	ldr	r6, [pc, #184]	; (8013704 <_malloc_r+0xe4>)
 801364a:	f000 fb57 	bl	8013cfc <__malloc_lock>
 801364e:	6833      	ldr	r3, [r6, #0]
 8013650:	461c      	mov	r4, r3
 8013652:	bb34      	cbnz	r4, 80136a2 <_malloc_r+0x82>
 8013654:	4629      	mov	r1, r5
 8013656:	4638      	mov	r0, r7
 8013658:	f7ff ffc2 	bl	80135e0 <sbrk_aligned>
 801365c:	1c43      	adds	r3, r0, #1
 801365e:	4604      	mov	r4, r0
 8013660:	d14d      	bne.n	80136fe <_malloc_r+0xde>
 8013662:	6834      	ldr	r4, [r6, #0]
 8013664:	4626      	mov	r6, r4
 8013666:	2e00      	cmp	r6, #0
 8013668:	d140      	bne.n	80136ec <_malloc_r+0xcc>
 801366a:	6823      	ldr	r3, [r4, #0]
 801366c:	4631      	mov	r1, r6
 801366e:	4638      	mov	r0, r7
 8013670:	eb04 0803 	add.w	r8, r4, r3
 8013674:	f000 f8d4 	bl	8013820 <_sbrk_r>
 8013678:	4580      	cmp	r8, r0
 801367a:	d13a      	bne.n	80136f2 <_malloc_r+0xd2>
 801367c:	6821      	ldr	r1, [r4, #0]
 801367e:	3503      	adds	r5, #3
 8013680:	1a6d      	subs	r5, r5, r1
 8013682:	f025 0503 	bic.w	r5, r5, #3
 8013686:	3508      	adds	r5, #8
 8013688:	2d0c      	cmp	r5, #12
 801368a:	bf38      	it	cc
 801368c:	250c      	movcc	r5, #12
 801368e:	4629      	mov	r1, r5
 8013690:	4638      	mov	r0, r7
 8013692:	f7ff ffa5 	bl	80135e0 <sbrk_aligned>
 8013696:	3001      	adds	r0, #1
 8013698:	d02b      	beq.n	80136f2 <_malloc_r+0xd2>
 801369a:	6823      	ldr	r3, [r4, #0]
 801369c:	442b      	add	r3, r5
 801369e:	6023      	str	r3, [r4, #0]
 80136a0:	e00e      	b.n	80136c0 <_malloc_r+0xa0>
 80136a2:	6822      	ldr	r2, [r4, #0]
 80136a4:	1b52      	subs	r2, r2, r5
 80136a6:	d41e      	bmi.n	80136e6 <_malloc_r+0xc6>
 80136a8:	2a0b      	cmp	r2, #11
 80136aa:	d916      	bls.n	80136da <_malloc_r+0xba>
 80136ac:	1961      	adds	r1, r4, r5
 80136ae:	42a3      	cmp	r3, r4
 80136b0:	6025      	str	r5, [r4, #0]
 80136b2:	bf18      	it	ne
 80136b4:	6059      	strne	r1, [r3, #4]
 80136b6:	6863      	ldr	r3, [r4, #4]
 80136b8:	bf08      	it	eq
 80136ba:	6031      	streq	r1, [r6, #0]
 80136bc:	5162      	str	r2, [r4, r5]
 80136be:	604b      	str	r3, [r1, #4]
 80136c0:	4638      	mov	r0, r7
 80136c2:	f104 060b 	add.w	r6, r4, #11
 80136c6:	f000 fb1f 	bl	8013d08 <__malloc_unlock>
 80136ca:	f026 0607 	bic.w	r6, r6, #7
 80136ce:	1d23      	adds	r3, r4, #4
 80136d0:	1af2      	subs	r2, r6, r3
 80136d2:	d0b6      	beq.n	8013642 <_malloc_r+0x22>
 80136d4:	1b9b      	subs	r3, r3, r6
 80136d6:	50a3      	str	r3, [r4, r2]
 80136d8:	e7b3      	b.n	8013642 <_malloc_r+0x22>
 80136da:	6862      	ldr	r2, [r4, #4]
 80136dc:	42a3      	cmp	r3, r4
 80136de:	bf0c      	ite	eq
 80136e0:	6032      	streq	r2, [r6, #0]
 80136e2:	605a      	strne	r2, [r3, #4]
 80136e4:	e7ec      	b.n	80136c0 <_malloc_r+0xa0>
 80136e6:	4623      	mov	r3, r4
 80136e8:	6864      	ldr	r4, [r4, #4]
 80136ea:	e7b2      	b.n	8013652 <_malloc_r+0x32>
 80136ec:	4634      	mov	r4, r6
 80136ee:	6876      	ldr	r6, [r6, #4]
 80136f0:	e7b9      	b.n	8013666 <_malloc_r+0x46>
 80136f2:	230c      	movs	r3, #12
 80136f4:	603b      	str	r3, [r7, #0]
 80136f6:	4638      	mov	r0, r7
 80136f8:	f000 fb06 	bl	8013d08 <__malloc_unlock>
 80136fc:	e7a1      	b.n	8013642 <_malloc_r+0x22>
 80136fe:	6025      	str	r5, [r4, #0]
 8013700:	e7de      	b.n	80136c0 <_malloc_r+0xa0>
 8013702:	bf00      	nop
 8013704:	20009210 	.word	0x20009210

08013708 <iprintf>:
 8013708:	b40f      	push	{r0, r1, r2, r3}
 801370a:	4b0a      	ldr	r3, [pc, #40]	; (8013734 <iprintf+0x2c>)
 801370c:	b513      	push	{r0, r1, r4, lr}
 801370e:	681c      	ldr	r4, [r3, #0]
 8013710:	b124      	cbz	r4, 801371c <iprintf+0x14>
 8013712:	69a3      	ldr	r3, [r4, #24]
 8013714:	b913      	cbnz	r3, 801371c <iprintf+0x14>
 8013716:	4620      	mov	r0, r4
 8013718:	f000 fa3e 	bl	8013b98 <__sinit>
 801371c:	ab05      	add	r3, sp, #20
 801371e:	9a04      	ldr	r2, [sp, #16]
 8013720:	68a1      	ldr	r1, [r4, #8]
 8013722:	9301      	str	r3, [sp, #4]
 8013724:	4620      	mov	r0, r4
 8013726:	f000 fca9 	bl	801407c <_vfiprintf_r>
 801372a:	b002      	add	sp, #8
 801372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013730:	b004      	add	sp, #16
 8013732:	4770      	bx	lr
 8013734:	20000094 	.word	0x20000094

08013738 <srand>:
 8013738:	b538      	push	{r3, r4, r5, lr}
 801373a:	4b10      	ldr	r3, [pc, #64]	; (801377c <srand+0x44>)
 801373c:	681d      	ldr	r5, [r3, #0]
 801373e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013740:	4604      	mov	r4, r0
 8013742:	b9b3      	cbnz	r3, 8013772 <srand+0x3a>
 8013744:	2018      	movs	r0, #24
 8013746:	f7ff fea9 	bl	801349c <malloc>
 801374a:	4602      	mov	r2, r0
 801374c:	63a8      	str	r0, [r5, #56]	; 0x38
 801374e:	b920      	cbnz	r0, 801375a <srand+0x22>
 8013750:	4b0b      	ldr	r3, [pc, #44]	; (8013780 <srand+0x48>)
 8013752:	480c      	ldr	r0, [pc, #48]	; (8013784 <srand+0x4c>)
 8013754:	2142      	movs	r1, #66	; 0x42
 8013756:	f000 f99d 	bl	8013a94 <__assert_func>
 801375a:	490b      	ldr	r1, [pc, #44]	; (8013788 <srand+0x50>)
 801375c:	4b0b      	ldr	r3, [pc, #44]	; (801378c <srand+0x54>)
 801375e:	e9c0 1300 	strd	r1, r3, [r0]
 8013762:	4b0b      	ldr	r3, [pc, #44]	; (8013790 <srand+0x58>)
 8013764:	6083      	str	r3, [r0, #8]
 8013766:	230b      	movs	r3, #11
 8013768:	8183      	strh	r3, [r0, #12]
 801376a:	2100      	movs	r1, #0
 801376c:	2001      	movs	r0, #1
 801376e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013772:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013774:	2200      	movs	r2, #0
 8013776:	611c      	str	r4, [r3, #16]
 8013778:	615a      	str	r2, [r3, #20]
 801377a:	bd38      	pop	{r3, r4, r5, pc}
 801377c:	20000094 	.word	0x20000094
 8013780:	08015704 	.word	0x08015704
 8013784:	0801571b 	.word	0x0801571b
 8013788:	abcd330e 	.word	0xabcd330e
 801378c:	e66d1234 	.word	0xe66d1234
 8013790:	0005deec 	.word	0x0005deec

08013794 <rand>:
 8013794:	4b16      	ldr	r3, [pc, #88]	; (80137f0 <rand+0x5c>)
 8013796:	b510      	push	{r4, lr}
 8013798:	681c      	ldr	r4, [r3, #0]
 801379a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801379c:	b9b3      	cbnz	r3, 80137cc <rand+0x38>
 801379e:	2018      	movs	r0, #24
 80137a0:	f7ff fe7c 	bl	801349c <malloc>
 80137a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80137a6:	b928      	cbnz	r0, 80137b4 <rand+0x20>
 80137a8:	4602      	mov	r2, r0
 80137aa:	4b12      	ldr	r3, [pc, #72]	; (80137f4 <rand+0x60>)
 80137ac:	4812      	ldr	r0, [pc, #72]	; (80137f8 <rand+0x64>)
 80137ae:	214e      	movs	r1, #78	; 0x4e
 80137b0:	f000 f970 	bl	8013a94 <__assert_func>
 80137b4:	4a11      	ldr	r2, [pc, #68]	; (80137fc <rand+0x68>)
 80137b6:	4b12      	ldr	r3, [pc, #72]	; (8013800 <rand+0x6c>)
 80137b8:	e9c0 2300 	strd	r2, r3, [r0]
 80137bc:	4b11      	ldr	r3, [pc, #68]	; (8013804 <rand+0x70>)
 80137be:	6083      	str	r3, [r0, #8]
 80137c0:	230b      	movs	r3, #11
 80137c2:	8183      	strh	r3, [r0, #12]
 80137c4:	2201      	movs	r2, #1
 80137c6:	2300      	movs	r3, #0
 80137c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80137cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80137ce:	4a0e      	ldr	r2, [pc, #56]	; (8013808 <rand+0x74>)
 80137d0:	6920      	ldr	r0, [r4, #16]
 80137d2:	6963      	ldr	r3, [r4, #20]
 80137d4:	490d      	ldr	r1, [pc, #52]	; (801380c <rand+0x78>)
 80137d6:	4342      	muls	r2, r0
 80137d8:	fb01 2203 	mla	r2, r1, r3, r2
 80137dc:	fba0 0101 	umull	r0, r1, r0, r1
 80137e0:	1c43      	adds	r3, r0, #1
 80137e2:	eb42 0001 	adc.w	r0, r2, r1
 80137e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80137ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80137ee:	bd10      	pop	{r4, pc}
 80137f0:	20000094 	.word	0x20000094
 80137f4:	08015704 	.word	0x08015704
 80137f8:	0801571b 	.word	0x0801571b
 80137fc:	abcd330e 	.word	0xabcd330e
 8013800:	e66d1234 	.word	0xe66d1234
 8013804:	0005deec 	.word	0x0005deec
 8013808:	5851f42d 	.word	0x5851f42d
 801380c:	4c957f2d 	.word	0x4c957f2d

08013810 <realloc>:
 8013810:	4b02      	ldr	r3, [pc, #8]	; (801381c <realloc+0xc>)
 8013812:	460a      	mov	r2, r1
 8013814:	4601      	mov	r1, r0
 8013816:	6818      	ldr	r0, [r3, #0]
 8013818:	f000 ba7c 	b.w	8013d14 <_realloc_r>
 801381c:	20000094 	.word	0x20000094

08013820 <_sbrk_r>:
 8013820:	b538      	push	{r3, r4, r5, lr}
 8013822:	4d06      	ldr	r5, [pc, #24]	; (801383c <_sbrk_r+0x1c>)
 8013824:	2300      	movs	r3, #0
 8013826:	4604      	mov	r4, r0
 8013828:	4608      	mov	r0, r1
 801382a:	602b      	str	r3, [r5, #0]
 801382c:	f7ee f84a 	bl	80018c4 <_sbrk>
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	d102      	bne.n	801383a <_sbrk_r+0x1a>
 8013834:	682b      	ldr	r3, [r5, #0]
 8013836:	b103      	cbz	r3, 801383a <_sbrk_r+0x1a>
 8013838:	6023      	str	r3, [r4, #0]
 801383a:	bd38      	pop	{r3, r4, r5, pc}
 801383c:	2000921c 	.word	0x2000921c

08013840 <sniprintf>:
 8013840:	b40c      	push	{r2, r3}
 8013842:	b530      	push	{r4, r5, lr}
 8013844:	4b17      	ldr	r3, [pc, #92]	; (80138a4 <sniprintf+0x64>)
 8013846:	1e0c      	subs	r4, r1, #0
 8013848:	681d      	ldr	r5, [r3, #0]
 801384a:	b09d      	sub	sp, #116	; 0x74
 801384c:	da08      	bge.n	8013860 <sniprintf+0x20>
 801384e:	238b      	movs	r3, #139	; 0x8b
 8013850:	602b      	str	r3, [r5, #0]
 8013852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013856:	b01d      	add	sp, #116	; 0x74
 8013858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801385c:	b002      	add	sp, #8
 801385e:	4770      	bx	lr
 8013860:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013864:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013868:	bf14      	ite	ne
 801386a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801386e:	4623      	moveq	r3, r4
 8013870:	9304      	str	r3, [sp, #16]
 8013872:	9307      	str	r3, [sp, #28]
 8013874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013878:	9002      	str	r0, [sp, #8]
 801387a:	9006      	str	r0, [sp, #24]
 801387c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013880:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013882:	ab21      	add	r3, sp, #132	; 0x84
 8013884:	a902      	add	r1, sp, #8
 8013886:	4628      	mov	r0, r5
 8013888:	9301      	str	r3, [sp, #4]
 801388a:	f000 facd 	bl	8013e28 <_svfiprintf_r>
 801388e:	1c43      	adds	r3, r0, #1
 8013890:	bfbc      	itt	lt
 8013892:	238b      	movlt	r3, #139	; 0x8b
 8013894:	602b      	strlt	r3, [r5, #0]
 8013896:	2c00      	cmp	r4, #0
 8013898:	d0dd      	beq.n	8013856 <sniprintf+0x16>
 801389a:	9b02      	ldr	r3, [sp, #8]
 801389c:	2200      	movs	r2, #0
 801389e:	701a      	strb	r2, [r3, #0]
 80138a0:	e7d9      	b.n	8013856 <sniprintf+0x16>
 80138a2:	bf00      	nop
 80138a4:	20000094 	.word	0x20000094

080138a8 <strchr>:
 80138a8:	b2c9      	uxtb	r1, r1
 80138aa:	4603      	mov	r3, r0
 80138ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138b0:	b11a      	cbz	r2, 80138ba <strchr+0x12>
 80138b2:	428a      	cmp	r2, r1
 80138b4:	d1f9      	bne.n	80138aa <strchr+0x2>
 80138b6:	4618      	mov	r0, r3
 80138b8:	4770      	bx	lr
 80138ba:	2900      	cmp	r1, #0
 80138bc:	bf18      	it	ne
 80138be:	2300      	movne	r3, #0
 80138c0:	e7f9      	b.n	80138b6 <strchr+0xe>

080138c2 <strcpy>:
 80138c2:	4603      	mov	r3, r0
 80138c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138c8:	f803 2b01 	strb.w	r2, [r3], #1
 80138cc:	2a00      	cmp	r2, #0
 80138ce:	d1f9      	bne.n	80138c4 <strcpy+0x2>
 80138d0:	4770      	bx	lr

080138d2 <strncmp>:
 80138d2:	b510      	push	{r4, lr}
 80138d4:	b17a      	cbz	r2, 80138f6 <strncmp+0x24>
 80138d6:	4603      	mov	r3, r0
 80138d8:	3901      	subs	r1, #1
 80138da:	1884      	adds	r4, r0, r2
 80138dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80138e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80138e4:	4290      	cmp	r0, r2
 80138e6:	d101      	bne.n	80138ec <strncmp+0x1a>
 80138e8:	42a3      	cmp	r3, r4
 80138ea:	d101      	bne.n	80138f0 <strncmp+0x1e>
 80138ec:	1a80      	subs	r0, r0, r2
 80138ee:	bd10      	pop	{r4, pc}
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d1f3      	bne.n	80138dc <strncmp+0xa>
 80138f4:	e7fa      	b.n	80138ec <strncmp+0x1a>
 80138f6:	4610      	mov	r0, r2
 80138f8:	e7f9      	b.n	80138ee <strncmp+0x1c>

080138fa <strstr>:
 80138fa:	780a      	ldrb	r2, [r1, #0]
 80138fc:	b570      	push	{r4, r5, r6, lr}
 80138fe:	b96a      	cbnz	r2, 801391c <strstr+0x22>
 8013900:	bd70      	pop	{r4, r5, r6, pc}
 8013902:	429a      	cmp	r2, r3
 8013904:	d109      	bne.n	801391a <strstr+0x20>
 8013906:	460c      	mov	r4, r1
 8013908:	4605      	mov	r5, r0
 801390a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801390e:	2b00      	cmp	r3, #0
 8013910:	d0f6      	beq.n	8013900 <strstr+0x6>
 8013912:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013916:	429e      	cmp	r6, r3
 8013918:	d0f7      	beq.n	801390a <strstr+0x10>
 801391a:	3001      	adds	r0, #1
 801391c:	7803      	ldrb	r3, [r0, #0]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d1ef      	bne.n	8013902 <strstr+0x8>
 8013922:	4618      	mov	r0, r3
 8013924:	e7ec      	b.n	8013900 <strstr+0x6>
	...

08013928 <_strtoul_l.constprop.0>:
 8013928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801392c:	4f36      	ldr	r7, [pc, #216]	; (8013a08 <_strtoul_l.constprop.0+0xe0>)
 801392e:	4686      	mov	lr, r0
 8013930:	460d      	mov	r5, r1
 8013932:	4628      	mov	r0, r5
 8013934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013938:	5de6      	ldrb	r6, [r4, r7]
 801393a:	f016 0608 	ands.w	r6, r6, #8
 801393e:	d1f8      	bne.n	8013932 <_strtoul_l.constprop.0+0xa>
 8013940:	2c2d      	cmp	r4, #45	; 0x2d
 8013942:	d12f      	bne.n	80139a4 <_strtoul_l.constprop.0+0x7c>
 8013944:	782c      	ldrb	r4, [r5, #0]
 8013946:	2601      	movs	r6, #1
 8013948:	1c85      	adds	r5, r0, #2
 801394a:	2b00      	cmp	r3, #0
 801394c:	d057      	beq.n	80139fe <_strtoul_l.constprop.0+0xd6>
 801394e:	2b10      	cmp	r3, #16
 8013950:	d109      	bne.n	8013966 <_strtoul_l.constprop.0+0x3e>
 8013952:	2c30      	cmp	r4, #48	; 0x30
 8013954:	d107      	bne.n	8013966 <_strtoul_l.constprop.0+0x3e>
 8013956:	7828      	ldrb	r0, [r5, #0]
 8013958:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801395c:	2858      	cmp	r0, #88	; 0x58
 801395e:	d149      	bne.n	80139f4 <_strtoul_l.constprop.0+0xcc>
 8013960:	786c      	ldrb	r4, [r5, #1]
 8013962:	2310      	movs	r3, #16
 8013964:	3502      	adds	r5, #2
 8013966:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801396a:	2700      	movs	r7, #0
 801396c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013970:	fb03 f908 	mul.w	r9, r3, r8
 8013974:	ea6f 0909 	mvn.w	r9, r9
 8013978:	4638      	mov	r0, r7
 801397a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801397e:	f1bc 0f09 	cmp.w	ip, #9
 8013982:	d814      	bhi.n	80139ae <_strtoul_l.constprop.0+0x86>
 8013984:	4664      	mov	r4, ip
 8013986:	42a3      	cmp	r3, r4
 8013988:	dd22      	ble.n	80139d0 <_strtoul_l.constprop.0+0xa8>
 801398a:	2f00      	cmp	r7, #0
 801398c:	db1d      	blt.n	80139ca <_strtoul_l.constprop.0+0xa2>
 801398e:	4580      	cmp	r8, r0
 8013990:	d31b      	bcc.n	80139ca <_strtoul_l.constprop.0+0xa2>
 8013992:	d101      	bne.n	8013998 <_strtoul_l.constprop.0+0x70>
 8013994:	45a1      	cmp	r9, r4
 8013996:	db18      	blt.n	80139ca <_strtoul_l.constprop.0+0xa2>
 8013998:	fb00 4003 	mla	r0, r0, r3, r4
 801399c:	2701      	movs	r7, #1
 801399e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139a2:	e7ea      	b.n	801397a <_strtoul_l.constprop.0+0x52>
 80139a4:	2c2b      	cmp	r4, #43	; 0x2b
 80139a6:	bf04      	itt	eq
 80139a8:	782c      	ldrbeq	r4, [r5, #0]
 80139aa:	1c85      	addeq	r5, r0, #2
 80139ac:	e7cd      	b.n	801394a <_strtoul_l.constprop.0+0x22>
 80139ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80139b2:	f1bc 0f19 	cmp.w	ip, #25
 80139b6:	d801      	bhi.n	80139bc <_strtoul_l.constprop.0+0x94>
 80139b8:	3c37      	subs	r4, #55	; 0x37
 80139ba:	e7e4      	b.n	8013986 <_strtoul_l.constprop.0+0x5e>
 80139bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80139c0:	f1bc 0f19 	cmp.w	ip, #25
 80139c4:	d804      	bhi.n	80139d0 <_strtoul_l.constprop.0+0xa8>
 80139c6:	3c57      	subs	r4, #87	; 0x57
 80139c8:	e7dd      	b.n	8013986 <_strtoul_l.constprop.0+0x5e>
 80139ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80139ce:	e7e6      	b.n	801399e <_strtoul_l.constprop.0+0x76>
 80139d0:	2f00      	cmp	r7, #0
 80139d2:	da07      	bge.n	80139e4 <_strtoul_l.constprop.0+0xbc>
 80139d4:	2322      	movs	r3, #34	; 0x22
 80139d6:	f8ce 3000 	str.w	r3, [lr]
 80139da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139de:	b932      	cbnz	r2, 80139ee <_strtoul_l.constprop.0+0xc6>
 80139e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139e4:	b106      	cbz	r6, 80139e8 <_strtoul_l.constprop.0+0xc0>
 80139e6:	4240      	negs	r0, r0
 80139e8:	2a00      	cmp	r2, #0
 80139ea:	d0f9      	beq.n	80139e0 <_strtoul_l.constprop.0+0xb8>
 80139ec:	b107      	cbz	r7, 80139f0 <_strtoul_l.constprop.0+0xc8>
 80139ee:	1e69      	subs	r1, r5, #1
 80139f0:	6011      	str	r1, [r2, #0]
 80139f2:	e7f5      	b.n	80139e0 <_strtoul_l.constprop.0+0xb8>
 80139f4:	2430      	movs	r4, #48	; 0x30
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1b5      	bne.n	8013966 <_strtoul_l.constprop.0+0x3e>
 80139fa:	2308      	movs	r3, #8
 80139fc:	e7b3      	b.n	8013966 <_strtoul_l.constprop.0+0x3e>
 80139fe:	2c30      	cmp	r4, #48	; 0x30
 8013a00:	d0a9      	beq.n	8013956 <_strtoul_l.constprop.0+0x2e>
 8013a02:	230a      	movs	r3, #10
 8013a04:	e7af      	b.n	8013966 <_strtoul_l.constprop.0+0x3e>
 8013a06:	bf00      	nop
 8013a08:	080155fd 	.word	0x080155fd

08013a0c <strtoul>:
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	460a      	mov	r2, r1
 8013a10:	4601      	mov	r1, r0
 8013a12:	4802      	ldr	r0, [pc, #8]	; (8013a1c <strtoul+0x10>)
 8013a14:	6800      	ldr	r0, [r0, #0]
 8013a16:	f7ff bf87 	b.w	8013928 <_strtoul_l.constprop.0>
 8013a1a:	bf00      	nop
 8013a1c:	20000094 	.word	0x20000094

08013a20 <_vsniprintf_r>:
 8013a20:	b530      	push	{r4, r5, lr}
 8013a22:	4614      	mov	r4, r2
 8013a24:	2c00      	cmp	r4, #0
 8013a26:	b09b      	sub	sp, #108	; 0x6c
 8013a28:	4605      	mov	r5, r0
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	da05      	bge.n	8013a3a <_vsniprintf_r+0x1a>
 8013a2e:	238b      	movs	r3, #139	; 0x8b
 8013a30:	6003      	str	r3, [r0, #0]
 8013a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a36:	b01b      	add	sp, #108	; 0x6c
 8013a38:	bd30      	pop	{r4, r5, pc}
 8013a3a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013a3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013a42:	bf14      	ite	ne
 8013a44:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013a48:	4623      	moveq	r3, r4
 8013a4a:	9302      	str	r3, [sp, #8]
 8013a4c:	9305      	str	r3, [sp, #20]
 8013a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a52:	9100      	str	r1, [sp, #0]
 8013a54:	9104      	str	r1, [sp, #16]
 8013a56:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013a5a:	4669      	mov	r1, sp
 8013a5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013a5e:	f000 f9e3 	bl	8013e28 <_svfiprintf_r>
 8013a62:	1c43      	adds	r3, r0, #1
 8013a64:	bfbc      	itt	lt
 8013a66:	238b      	movlt	r3, #139	; 0x8b
 8013a68:	602b      	strlt	r3, [r5, #0]
 8013a6a:	2c00      	cmp	r4, #0
 8013a6c:	d0e3      	beq.n	8013a36 <_vsniprintf_r+0x16>
 8013a6e:	9b00      	ldr	r3, [sp, #0]
 8013a70:	2200      	movs	r2, #0
 8013a72:	701a      	strb	r2, [r3, #0]
 8013a74:	e7df      	b.n	8013a36 <_vsniprintf_r+0x16>
	...

08013a78 <vsniprintf>:
 8013a78:	b507      	push	{r0, r1, r2, lr}
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	460a      	mov	r2, r1
 8013a80:	4601      	mov	r1, r0
 8013a82:	4803      	ldr	r0, [pc, #12]	; (8013a90 <vsniprintf+0x18>)
 8013a84:	6800      	ldr	r0, [r0, #0]
 8013a86:	f7ff ffcb 	bl	8013a20 <_vsniprintf_r>
 8013a8a:	b003      	add	sp, #12
 8013a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a90:	20000094 	.word	0x20000094

08013a94 <__assert_func>:
 8013a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a96:	4614      	mov	r4, r2
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4b09      	ldr	r3, [pc, #36]	; (8013ac0 <__assert_func+0x2c>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	68d8      	ldr	r0, [r3, #12]
 8013aa2:	b14c      	cbz	r4, 8013ab8 <__assert_func+0x24>
 8013aa4:	4b07      	ldr	r3, [pc, #28]	; (8013ac4 <__assert_func+0x30>)
 8013aa6:	9100      	str	r1, [sp, #0]
 8013aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013aac:	4906      	ldr	r1, [pc, #24]	; (8013ac8 <__assert_func+0x34>)
 8013aae:	462b      	mov	r3, r5
 8013ab0:	f000 f8f0 	bl	8013c94 <fiprintf>
 8013ab4:	f000 febc 	bl	8014830 <abort>
 8013ab8:	4b04      	ldr	r3, [pc, #16]	; (8013acc <__assert_func+0x38>)
 8013aba:	461c      	mov	r4, r3
 8013abc:	e7f3      	b.n	8013aa6 <__assert_func+0x12>
 8013abe:	bf00      	nop
 8013ac0:	20000094 	.word	0x20000094
 8013ac4:	08015776 	.word	0x08015776
 8013ac8:	08015783 	.word	0x08015783
 8013acc:	080157b1 	.word	0x080157b1

08013ad0 <__env_lock>:
 8013ad0:	4801      	ldr	r0, [pc, #4]	; (8013ad8 <__env_lock+0x8>)
 8013ad2:	f000 b911 	b.w	8013cf8 <__retarget_lock_acquire_recursive>
 8013ad6:	bf00      	nop
 8013ad8:	20009218 	.word	0x20009218

08013adc <__env_unlock>:
 8013adc:	4801      	ldr	r0, [pc, #4]	; (8013ae4 <__env_unlock+0x8>)
 8013ade:	f000 b90c 	b.w	8013cfa <__retarget_lock_release_recursive>
 8013ae2:	bf00      	nop
 8013ae4:	20009218 	.word	0x20009218

08013ae8 <std>:
 8013ae8:	2300      	movs	r3, #0
 8013aea:	b510      	push	{r4, lr}
 8013aec:	4604      	mov	r4, r0
 8013aee:	e9c0 3300 	strd	r3, r3, [r0]
 8013af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013af6:	6083      	str	r3, [r0, #8]
 8013af8:	8181      	strh	r1, [r0, #12]
 8013afa:	6643      	str	r3, [r0, #100]	; 0x64
 8013afc:	81c2      	strh	r2, [r0, #14]
 8013afe:	6183      	str	r3, [r0, #24]
 8013b00:	4619      	mov	r1, r3
 8013b02:	2208      	movs	r2, #8
 8013b04:	305c      	adds	r0, #92	; 0x5c
 8013b06:	f7ff fd01 	bl	801350c <memset>
 8013b0a:	4b05      	ldr	r3, [pc, #20]	; (8013b20 <std+0x38>)
 8013b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8013b0e:	4b05      	ldr	r3, [pc, #20]	; (8013b24 <std+0x3c>)
 8013b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b12:	4b05      	ldr	r3, [pc, #20]	; (8013b28 <std+0x40>)
 8013b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b16:	4b05      	ldr	r3, [pc, #20]	; (8013b2c <std+0x44>)
 8013b18:	6224      	str	r4, [r4, #32]
 8013b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8013b1c:	bd10      	pop	{r4, pc}
 8013b1e:	bf00      	nop
 8013b20:	08014605 	.word	0x08014605
 8013b24:	08014627 	.word	0x08014627
 8013b28:	0801465f 	.word	0x0801465f
 8013b2c:	08014683 	.word	0x08014683

08013b30 <_cleanup_r>:
 8013b30:	4901      	ldr	r1, [pc, #4]	; (8013b38 <_cleanup_r+0x8>)
 8013b32:	f000 b8c1 	b.w	8013cb8 <_fwalk_reent>
 8013b36:	bf00      	nop
 8013b38:	0801496d 	.word	0x0801496d

08013b3c <__sfmoreglue>:
 8013b3c:	b570      	push	{r4, r5, r6, lr}
 8013b3e:	2268      	movs	r2, #104	; 0x68
 8013b40:	1e4d      	subs	r5, r1, #1
 8013b42:	4355      	muls	r5, r2
 8013b44:	460e      	mov	r6, r1
 8013b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b4a:	f7ff fd69 	bl	8013620 <_malloc_r>
 8013b4e:	4604      	mov	r4, r0
 8013b50:	b140      	cbz	r0, 8013b64 <__sfmoreglue+0x28>
 8013b52:	2100      	movs	r1, #0
 8013b54:	e9c0 1600 	strd	r1, r6, [r0]
 8013b58:	300c      	adds	r0, #12
 8013b5a:	60a0      	str	r0, [r4, #8]
 8013b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b60:	f7ff fcd4 	bl	801350c <memset>
 8013b64:	4620      	mov	r0, r4
 8013b66:	bd70      	pop	{r4, r5, r6, pc}

08013b68 <__sfp_lock_acquire>:
 8013b68:	4801      	ldr	r0, [pc, #4]	; (8013b70 <__sfp_lock_acquire+0x8>)
 8013b6a:	f000 b8c5 	b.w	8013cf8 <__retarget_lock_acquire_recursive>
 8013b6e:	bf00      	nop
 8013b70:	2000921a 	.word	0x2000921a

08013b74 <__sfp_lock_release>:
 8013b74:	4801      	ldr	r0, [pc, #4]	; (8013b7c <__sfp_lock_release+0x8>)
 8013b76:	f000 b8c0 	b.w	8013cfa <__retarget_lock_release_recursive>
 8013b7a:	bf00      	nop
 8013b7c:	2000921a 	.word	0x2000921a

08013b80 <__sinit_lock_acquire>:
 8013b80:	4801      	ldr	r0, [pc, #4]	; (8013b88 <__sinit_lock_acquire+0x8>)
 8013b82:	f000 b8b9 	b.w	8013cf8 <__retarget_lock_acquire_recursive>
 8013b86:	bf00      	nop
 8013b88:	2000921b 	.word	0x2000921b

08013b8c <__sinit_lock_release>:
 8013b8c:	4801      	ldr	r0, [pc, #4]	; (8013b94 <__sinit_lock_release+0x8>)
 8013b8e:	f000 b8b4 	b.w	8013cfa <__retarget_lock_release_recursive>
 8013b92:	bf00      	nop
 8013b94:	2000921b 	.word	0x2000921b

08013b98 <__sinit>:
 8013b98:	b510      	push	{r4, lr}
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	f7ff fff0 	bl	8013b80 <__sinit_lock_acquire>
 8013ba0:	69a3      	ldr	r3, [r4, #24]
 8013ba2:	b11b      	cbz	r3, 8013bac <__sinit+0x14>
 8013ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ba8:	f7ff bff0 	b.w	8013b8c <__sinit_lock_release>
 8013bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8013bb2:	4b13      	ldr	r3, [pc, #76]	; (8013c00 <__sinit+0x68>)
 8013bb4:	4a13      	ldr	r2, [pc, #76]	; (8013c04 <__sinit+0x6c>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8013bba:	42a3      	cmp	r3, r4
 8013bbc:	bf04      	itt	eq
 8013bbe:	2301      	moveq	r3, #1
 8013bc0:	61a3      	streq	r3, [r4, #24]
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f000 f820 	bl	8013c08 <__sfp>
 8013bc8:	6060      	str	r0, [r4, #4]
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f000 f81c 	bl	8013c08 <__sfp>
 8013bd0:	60a0      	str	r0, [r4, #8]
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 f818 	bl	8013c08 <__sfp>
 8013bd8:	2200      	movs	r2, #0
 8013bda:	60e0      	str	r0, [r4, #12]
 8013bdc:	2104      	movs	r1, #4
 8013bde:	6860      	ldr	r0, [r4, #4]
 8013be0:	f7ff ff82 	bl	8013ae8 <std>
 8013be4:	68a0      	ldr	r0, [r4, #8]
 8013be6:	2201      	movs	r2, #1
 8013be8:	2109      	movs	r1, #9
 8013bea:	f7ff ff7d 	bl	8013ae8 <std>
 8013bee:	68e0      	ldr	r0, [r4, #12]
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	2112      	movs	r1, #18
 8013bf4:	f7ff ff78 	bl	8013ae8 <std>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	61a3      	str	r3, [r4, #24]
 8013bfc:	e7d2      	b.n	8013ba4 <__sinit+0xc>
 8013bfe:	bf00      	nop
 8013c00:	08015700 	.word	0x08015700
 8013c04:	08013b31 	.word	0x08013b31

08013c08 <__sfp>:
 8013c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0a:	4607      	mov	r7, r0
 8013c0c:	f7ff ffac 	bl	8013b68 <__sfp_lock_acquire>
 8013c10:	4b1e      	ldr	r3, [pc, #120]	; (8013c8c <__sfp+0x84>)
 8013c12:	681e      	ldr	r6, [r3, #0]
 8013c14:	69b3      	ldr	r3, [r6, #24]
 8013c16:	b913      	cbnz	r3, 8013c1e <__sfp+0x16>
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f7ff ffbd 	bl	8013b98 <__sinit>
 8013c1e:	3648      	adds	r6, #72	; 0x48
 8013c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c24:	3b01      	subs	r3, #1
 8013c26:	d503      	bpl.n	8013c30 <__sfp+0x28>
 8013c28:	6833      	ldr	r3, [r6, #0]
 8013c2a:	b30b      	cbz	r3, 8013c70 <__sfp+0x68>
 8013c2c:	6836      	ldr	r6, [r6, #0]
 8013c2e:	e7f7      	b.n	8013c20 <__sfp+0x18>
 8013c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c34:	b9d5      	cbnz	r5, 8013c6c <__sfp+0x64>
 8013c36:	4b16      	ldr	r3, [pc, #88]	; (8013c90 <__sfp+0x88>)
 8013c38:	60e3      	str	r3, [r4, #12]
 8013c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8013c40:	f000 f859 	bl	8013cf6 <__retarget_lock_init_recursive>
 8013c44:	f7ff ff96 	bl	8013b74 <__sfp_lock_release>
 8013c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c50:	6025      	str	r5, [r4, #0]
 8013c52:	61a5      	str	r5, [r4, #24]
 8013c54:	2208      	movs	r2, #8
 8013c56:	4629      	mov	r1, r5
 8013c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c5c:	f7ff fc56 	bl	801350c <memset>
 8013c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c68:	4620      	mov	r0, r4
 8013c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c6c:	3468      	adds	r4, #104	; 0x68
 8013c6e:	e7d9      	b.n	8013c24 <__sfp+0x1c>
 8013c70:	2104      	movs	r1, #4
 8013c72:	4638      	mov	r0, r7
 8013c74:	f7ff ff62 	bl	8013b3c <__sfmoreglue>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	6030      	str	r0, [r6, #0]
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d1d5      	bne.n	8013c2c <__sfp+0x24>
 8013c80:	f7ff ff78 	bl	8013b74 <__sfp_lock_release>
 8013c84:	230c      	movs	r3, #12
 8013c86:	603b      	str	r3, [r7, #0]
 8013c88:	e7ee      	b.n	8013c68 <__sfp+0x60>
 8013c8a:	bf00      	nop
 8013c8c:	08015700 	.word	0x08015700
 8013c90:	ffff0001 	.word	0xffff0001

08013c94 <fiprintf>:
 8013c94:	b40e      	push	{r1, r2, r3}
 8013c96:	b503      	push	{r0, r1, lr}
 8013c98:	4601      	mov	r1, r0
 8013c9a:	ab03      	add	r3, sp, #12
 8013c9c:	4805      	ldr	r0, [pc, #20]	; (8013cb4 <fiprintf+0x20>)
 8013c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ca2:	6800      	ldr	r0, [r0, #0]
 8013ca4:	9301      	str	r3, [sp, #4]
 8013ca6:	f000 f9e9 	bl	801407c <_vfiprintf_r>
 8013caa:	b002      	add	sp, #8
 8013cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cb0:	b003      	add	sp, #12
 8013cb2:	4770      	bx	lr
 8013cb4:	20000094 	.word	0x20000094

08013cb8 <_fwalk_reent>:
 8013cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	4688      	mov	r8, r1
 8013cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013cc4:	2700      	movs	r7, #0
 8013cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cca:	f1b9 0901 	subs.w	r9, r9, #1
 8013cce:	d505      	bpl.n	8013cdc <_fwalk_reent+0x24>
 8013cd0:	6824      	ldr	r4, [r4, #0]
 8013cd2:	2c00      	cmp	r4, #0
 8013cd4:	d1f7      	bne.n	8013cc6 <_fwalk_reent+0xe>
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cdc:	89ab      	ldrh	r3, [r5, #12]
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d907      	bls.n	8013cf2 <_fwalk_reent+0x3a>
 8013ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	d003      	beq.n	8013cf2 <_fwalk_reent+0x3a>
 8013cea:	4629      	mov	r1, r5
 8013cec:	4630      	mov	r0, r6
 8013cee:	47c0      	blx	r8
 8013cf0:	4307      	orrs	r7, r0
 8013cf2:	3568      	adds	r5, #104	; 0x68
 8013cf4:	e7e9      	b.n	8013cca <_fwalk_reent+0x12>

08013cf6 <__retarget_lock_init_recursive>:
 8013cf6:	4770      	bx	lr

08013cf8 <__retarget_lock_acquire_recursive>:
 8013cf8:	4770      	bx	lr

08013cfa <__retarget_lock_release_recursive>:
 8013cfa:	4770      	bx	lr

08013cfc <__malloc_lock>:
 8013cfc:	4801      	ldr	r0, [pc, #4]	; (8013d04 <__malloc_lock+0x8>)
 8013cfe:	f7ff bffb 	b.w	8013cf8 <__retarget_lock_acquire_recursive>
 8013d02:	bf00      	nop
 8013d04:	20009219 	.word	0x20009219

08013d08 <__malloc_unlock>:
 8013d08:	4801      	ldr	r0, [pc, #4]	; (8013d10 <__malloc_unlock+0x8>)
 8013d0a:	f7ff bff6 	b.w	8013cfa <__retarget_lock_release_recursive>
 8013d0e:	bf00      	nop
 8013d10:	20009219 	.word	0x20009219

08013d14 <_realloc_r>:
 8013d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d18:	4680      	mov	r8, r0
 8013d1a:	4614      	mov	r4, r2
 8013d1c:	460e      	mov	r6, r1
 8013d1e:	b921      	cbnz	r1, 8013d2a <_realloc_r+0x16>
 8013d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d24:	4611      	mov	r1, r2
 8013d26:	f7ff bc7b 	b.w	8013620 <_malloc_r>
 8013d2a:	b92a      	cbnz	r2, 8013d38 <_realloc_r+0x24>
 8013d2c:	f7ff fc0c 	bl	8013548 <_free_r>
 8013d30:	4625      	mov	r5, r4
 8013d32:	4628      	mov	r0, r5
 8013d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d38:	f000 fecc 	bl	8014ad4 <_malloc_usable_size_r>
 8013d3c:	4284      	cmp	r4, r0
 8013d3e:	4607      	mov	r7, r0
 8013d40:	d802      	bhi.n	8013d48 <_realloc_r+0x34>
 8013d42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013d46:	d812      	bhi.n	8013d6e <_realloc_r+0x5a>
 8013d48:	4621      	mov	r1, r4
 8013d4a:	4640      	mov	r0, r8
 8013d4c:	f7ff fc68 	bl	8013620 <_malloc_r>
 8013d50:	4605      	mov	r5, r0
 8013d52:	2800      	cmp	r0, #0
 8013d54:	d0ed      	beq.n	8013d32 <_realloc_r+0x1e>
 8013d56:	42bc      	cmp	r4, r7
 8013d58:	4622      	mov	r2, r4
 8013d5a:	4631      	mov	r1, r6
 8013d5c:	bf28      	it	cs
 8013d5e:	463a      	movcs	r2, r7
 8013d60:	f7ff fbac 	bl	80134bc <memcpy>
 8013d64:	4631      	mov	r1, r6
 8013d66:	4640      	mov	r0, r8
 8013d68:	f7ff fbee 	bl	8013548 <_free_r>
 8013d6c:	e7e1      	b.n	8013d32 <_realloc_r+0x1e>
 8013d6e:	4635      	mov	r5, r6
 8013d70:	e7df      	b.n	8013d32 <_realloc_r+0x1e>

08013d72 <__ssputs_r>:
 8013d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d76:	688e      	ldr	r6, [r1, #8]
 8013d78:	429e      	cmp	r6, r3
 8013d7a:	4682      	mov	sl, r0
 8013d7c:	460c      	mov	r4, r1
 8013d7e:	4690      	mov	r8, r2
 8013d80:	461f      	mov	r7, r3
 8013d82:	d838      	bhi.n	8013df6 <__ssputs_r+0x84>
 8013d84:	898a      	ldrh	r2, [r1, #12]
 8013d86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013d8a:	d032      	beq.n	8013df2 <__ssputs_r+0x80>
 8013d8c:	6825      	ldr	r5, [r4, #0]
 8013d8e:	6909      	ldr	r1, [r1, #16]
 8013d90:	eba5 0901 	sub.w	r9, r5, r1
 8013d94:	6965      	ldr	r5, [r4, #20]
 8013d96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d9e:	3301      	adds	r3, #1
 8013da0:	444b      	add	r3, r9
 8013da2:	106d      	asrs	r5, r5, #1
 8013da4:	429d      	cmp	r5, r3
 8013da6:	bf38      	it	cc
 8013da8:	461d      	movcc	r5, r3
 8013daa:	0553      	lsls	r3, r2, #21
 8013dac:	d531      	bpl.n	8013e12 <__ssputs_r+0xa0>
 8013dae:	4629      	mov	r1, r5
 8013db0:	f7ff fc36 	bl	8013620 <_malloc_r>
 8013db4:	4606      	mov	r6, r0
 8013db6:	b950      	cbnz	r0, 8013dce <__ssputs_r+0x5c>
 8013db8:	230c      	movs	r3, #12
 8013dba:	f8ca 3000 	str.w	r3, [sl]
 8013dbe:	89a3      	ldrh	r3, [r4, #12]
 8013dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dc4:	81a3      	strh	r3, [r4, #12]
 8013dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dce:	6921      	ldr	r1, [r4, #16]
 8013dd0:	464a      	mov	r2, r9
 8013dd2:	f7ff fb73 	bl	80134bc <memcpy>
 8013dd6:	89a3      	ldrh	r3, [r4, #12]
 8013dd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013de0:	81a3      	strh	r3, [r4, #12]
 8013de2:	6126      	str	r6, [r4, #16]
 8013de4:	6165      	str	r5, [r4, #20]
 8013de6:	444e      	add	r6, r9
 8013de8:	eba5 0509 	sub.w	r5, r5, r9
 8013dec:	6026      	str	r6, [r4, #0]
 8013dee:	60a5      	str	r5, [r4, #8]
 8013df0:	463e      	mov	r6, r7
 8013df2:	42be      	cmp	r6, r7
 8013df4:	d900      	bls.n	8013df8 <__ssputs_r+0x86>
 8013df6:	463e      	mov	r6, r7
 8013df8:	6820      	ldr	r0, [r4, #0]
 8013dfa:	4632      	mov	r2, r6
 8013dfc:	4641      	mov	r1, r8
 8013dfe:	f7ff fb6b 	bl	80134d8 <memmove>
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	1b9b      	subs	r3, r3, r6
 8013e06:	60a3      	str	r3, [r4, #8]
 8013e08:	6823      	ldr	r3, [r4, #0]
 8013e0a:	4433      	add	r3, r6
 8013e0c:	6023      	str	r3, [r4, #0]
 8013e0e:	2000      	movs	r0, #0
 8013e10:	e7db      	b.n	8013dca <__ssputs_r+0x58>
 8013e12:	462a      	mov	r2, r5
 8013e14:	f7ff ff7e 	bl	8013d14 <_realloc_r>
 8013e18:	4606      	mov	r6, r0
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	d1e1      	bne.n	8013de2 <__ssputs_r+0x70>
 8013e1e:	6921      	ldr	r1, [r4, #16]
 8013e20:	4650      	mov	r0, sl
 8013e22:	f7ff fb91 	bl	8013548 <_free_r>
 8013e26:	e7c7      	b.n	8013db8 <__ssputs_r+0x46>

08013e28 <_svfiprintf_r>:
 8013e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2c:	4698      	mov	r8, r3
 8013e2e:	898b      	ldrh	r3, [r1, #12]
 8013e30:	061b      	lsls	r3, r3, #24
 8013e32:	b09d      	sub	sp, #116	; 0x74
 8013e34:	4607      	mov	r7, r0
 8013e36:	460d      	mov	r5, r1
 8013e38:	4614      	mov	r4, r2
 8013e3a:	d50e      	bpl.n	8013e5a <_svfiprintf_r+0x32>
 8013e3c:	690b      	ldr	r3, [r1, #16]
 8013e3e:	b963      	cbnz	r3, 8013e5a <_svfiprintf_r+0x32>
 8013e40:	2140      	movs	r1, #64	; 0x40
 8013e42:	f7ff fbed 	bl	8013620 <_malloc_r>
 8013e46:	6028      	str	r0, [r5, #0]
 8013e48:	6128      	str	r0, [r5, #16]
 8013e4a:	b920      	cbnz	r0, 8013e56 <_svfiprintf_r+0x2e>
 8013e4c:	230c      	movs	r3, #12
 8013e4e:	603b      	str	r3, [r7, #0]
 8013e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e54:	e0d1      	b.n	8013ffa <_svfiprintf_r+0x1d2>
 8013e56:	2340      	movs	r3, #64	; 0x40
 8013e58:	616b      	str	r3, [r5, #20]
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e5e:	2320      	movs	r3, #32
 8013e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e68:	2330      	movs	r3, #48	; 0x30
 8013e6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014014 <_svfiprintf_r+0x1ec>
 8013e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e72:	f04f 0901 	mov.w	r9, #1
 8013e76:	4623      	mov	r3, r4
 8013e78:	469a      	mov	sl, r3
 8013e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e7e:	b10a      	cbz	r2, 8013e84 <_svfiprintf_r+0x5c>
 8013e80:	2a25      	cmp	r2, #37	; 0x25
 8013e82:	d1f9      	bne.n	8013e78 <_svfiprintf_r+0x50>
 8013e84:	ebba 0b04 	subs.w	fp, sl, r4
 8013e88:	d00b      	beq.n	8013ea2 <_svfiprintf_r+0x7a>
 8013e8a:	465b      	mov	r3, fp
 8013e8c:	4622      	mov	r2, r4
 8013e8e:	4629      	mov	r1, r5
 8013e90:	4638      	mov	r0, r7
 8013e92:	f7ff ff6e 	bl	8013d72 <__ssputs_r>
 8013e96:	3001      	adds	r0, #1
 8013e98:	f000 80aa 	beq.w	8013ff0 <_svfiprintf_r+0x1c8>
 8013e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e9e:	445a      	add	r2, fp
 8013ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8013ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	f000 80a2 	beq.w	8013ff0 <_svfiprintf_r+0x1c8>
 8013eac:	2300      	movs	r3, #0
 8013eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013eb6:	f10a 0a01 	add.w	sl, sl, #1
 8013eba:	9304      	str	r3, [sp, #16]
 8013ebc:	9307      	str	r3, [sp, #28]
 8013ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8013ec4:	4654      	mov	r4, sl
 8013ec6:	2205      	movs	r2, #5
 8013ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ecc:	4851      	ldr	r0, [pc, #324]	; (8014014 <_svfiprintf_r+0x1ec>)
 8013ece:	f7ec f9b7 	bl	8000240 <memchr>
 8013ed2:	9a04      	ldr	r2, [sp, #16]
 8013ed4:	b9d8      	cbnz	r0, 8013f0e <_svfiprintf_r+0xe6>
 8013ed6:	06d0      	lsls	r0, r2, #27
 8013ed8:	bf44      	itt	mi
 8013eda:	2320      	movmi	r3, #32
 8013edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ee0:	0711      	lsls	r1, r2, #28
 8013ee2:	bf44      	itt	mi
 8013ee4:	232b      	movmi	r3, #43	; 0x2b
 8013ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eea:	f89a 3000 	ldrb.w	r3, [sl]
 8013eee:	2b2a      	cmp	r3, #42	; 0x2a
 8013ef0:	d015      	beq.n	8013f1e <_svfiprintf_r+0xf6>
 8013ef2:	9a07      	ldr	r2, [sp, #28]
 8013ef4:	4654      	mov	r4, sl
 8013ef6:	2000      	movs	r0, #0
 8013ef8:	f04f 0c0a 	mov.w	ip, #10
 8013efc:	4621      	mov	r1, r4
 8013efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f02:	3b30      	subs	r3, #48	; 0x30
 8013f04:	2b09      	cmp	r3, #9
 8013f06:	d94e      	bls.n	8013fa6 <_svfiprintf_r+0x17e>
 8013f08:	b1b0      	cbz	r0, 8013f38 <_svfiprintf_r+0x110>
 8013f0a:	9207      	str	r2, [sp, #28]
 8013f0c:	e014      	b.n	8013f38 <_svfiprintf_r+0x110>
 8013f0e:	eba0 0308 	sub.w	r3, r0, r8
 8013f12:	fa09 f303 	lsl.w	r3, r9, r3
 8013f16:	4313      	orrs	r3, r2
 8013f18:	9304      	str	r3, [sp, #16]
 8013f1a:	46a2      	mov	sl, r4
 8013f1c:	e7d2      	b.n	8013ec4 <_svfiprintf_r+0x9c>
 8013f1e:	9b03      	ldr	r3, [sp, #12]
 8013f20:	1d19      	adds	r1, r3, #4
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	9103      	str	r1, [sp, #12]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	bfbb      	ittet	lt
 8013f2a:	425b      	neglt	r3, r3
 8013f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8013f30:	9307      	strge	r3, [sp, #28]
 8013f32:	9307      	strlt	r3, [sp, #28]
 8013f34:	bfb8      	it	lt
 8013f36:	9204      	strlt	r2, [sp, #16]
 8013f38:	7823      	ldrb	r3, [r4, #0]
 8013f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8013f3c:	d10c      	bne.n	8013f58 <_svfiprintf_r+0x130>
 8013f3e:	7863      	ldrb	r3, [r4, #1]
 8013f40:	2b2a      	cmp	r3, #42	; 0x2a
 8013f42:	d135      	bne.n	8013fb0 <_svfiprintf_r+0x188>
 8013f44:	9b03      	ldr	r3, [sp, #12]
 8013f46:	1d1a      	adds	r2, r3, #4
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	9203      	str	r2, [sp, #12]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	bfb8      	it	lt
 8013f50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f54:	3402      	adds	r4, #2
 8013f56:	9305      	str	r3, [sp, #20]
 8013f58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014024 <_svfiprintf_r+0x1fc>
 8013f5c:	7821      	ldrb	r1, [r4, #0]
 8013f5e:	2203      	movs	r2, #3
 8013f60:	4650      	mov	r0, sl
 8013f62:	f7ec f96d 	bl	8000240 <memchr>
 8013f66:	b140      	cbz	r0, 8013f7a <_svfiprintf_r+0x152>
 8013f68:	2340      	movs	r3, #64	; 0x40
 8013f6a:	eba0 000a 	sub.w	r0, r0, sl
 8013f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8013f72:	9b04      	ldr	r3, [sp, #16]
 8013f74:	4303      	orrs	r3, r0
 8013f76:	3401      	adds	r4, #1
 8013f78:	9304      	str	r3, [sp, #16]
 8013f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f7e:	4826      	ldr	r0, [pc, #152]	; (8014018 <_svfiprintf_r+0x1f0>)
 8013f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f84:	2206      	movs	r2, #6
 8013f86:	f7ec f95b 	bl	8000240 <memchr>
 8013f8a:	2800      	cmp	r0, #0
 8013f8c:	d038      	beq.n	8014000 <_svfiprintf_r+0x1d8>
 8013f8e:	4b23      	ldr	r3, [pc, #140]	; (801401c <_svfiprintf_r+0x1f4>)
 8013f90:	bb1b      	cbnz	r3, 8013fda <_svfiprintf_r+0x1b2>
 8013f92:	9b03      	ldr	r3, [sp, #12]
 8013f94:	3307      	adds	r3, #7
 8013f96:	f023 0307 	bic.w	r3, r3, #7
 8013f9a:	3308      	adds	r3, #8
 8013f9c:	9303      	str	r3, [sp, #12]
 8013f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa0:	4433      	add	r3, r6
 8013fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8013fa4:	e767      	b.n	8013e76 <_svfiprintf_r+0x4e>
 8013fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013faa:	460c      	mov	r4, r1
 8013fac:	2001      	movs	r0, #1
 8013fae:	e7a5      	b.n	8013efc <_svfiprintf_r+0xd4>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	3401      	adds	r4, #1
 8013fb4:	9305      	str	r3, [sp, #20]
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	f04f 0c0a 	mov.w	ip, #10
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fc2:	3a30      	subs	r2, #48	; 0x30
 8013fc4:	2a09      	cmp	r2, #9
 8013fc6:	d903      	bls.n	8013fd0 <_svfiprintf_r+0x1a8>
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d0c5      	beq.n	8013f58 <_svfiprintf_r+0x130>
 8013fcc:	9105      	str	r1, [sp, #20]
 8013fce:	e7c3      	b.n	8013f58 <_svfiprintf_r+0x130>
 8013fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	e7f0      	b.n	8013fbc <_svfiprintf_r+0x194>
 8013fda:	ab03      	add	r3, sp, #12
 8013fdc:	9300      	str	r3, [sp, #0]
 8013fde:	462a      	mov	r2, r5
 8013fe0:	4b0f      	ldr	r3, [pc, #60]	; (8014020 <_svfiprintf_r+0x1f8>)
 8013fe2:	a904      	add	r1, sp, #16
 8013fe4:	4638      	mov	r0, r7
 8013fe6:	f3af 8000 	nop.w
 8013fea:	1c42      	adds	r2, r0, #1
 8013fec:	4606      	mov	r6, r0
 8013fee:	d1d6      	bne.n	8013f9e <_svfiprintf_r+0x176>
 8013ff0:	89ab      	ldrh	r3, [r5, #12]
 8013ff2:	065b      	lsls	r3, r3, #25
 8013ff4:	f53f af2c 	bmi.w	8013e50 <_svfiprintf_r+0x28>
 8013ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ffa:	b01d      	add	sp, #116	; 0x74
 8013ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014000:	ab03      	add	r3, sp, #12
 8014002:	9300      	str	r3, [sp, #0]
 8014004:	462a      	mov	r2, r5
 8014006:	4b06      	ldr	r3, [pc, #24]	; (8014020 <_svfiprintf_r+0x1f8>)
 8014008:	a904      	add	r1, sp, #16
 801400a:	4638      	mov	r0, r7
 801400c:	f000 f9d4 	bl	80143b8 <_printf_i>
 8014010:	e7eb      	b.n	8013fea <_svfiprintf_r+0x1c2>
 8014012:	bf00      	nop
 8014014:	08015814 	.word	0x08015814
 8014018:	0801581e 	.word	0x0801581e
 801401c:	00000000 	.word	0x00000000
 8014020:	08013d73 	.word	0x08013d73
 8014024:	0801581a 	.word	0x0801581a

08014028 <__sfputc_r>:
 8014028:	6893      	ldr	r3, [r2, #8]
 801402a:	3b01      	subs	r3, #1
 801402c:	2b00      	cmp	r3, #0
 801402e:	b410      	push	{r4}
 8014030:	6093      	str	r3, [r2, #8]
 8014032:	da08      	bge.n	8014046 <__sfputc_r+0x1e>
 8014034:	6994      	ldr	r4, [r2, #24]
 8014036:	42a3      	cmp	r3, r4
 8014038:	db01      	blt.n	801403e <__sfputc_r+0x16>
 801403a:	290a      	cmp	r1, #10
 801403c:	d103      	bne.n	8014046 <__sfputc_r+0x1e>
 801403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014042:	f000 bb23 	b.w	801468c <__swbuf_r>
 8014046:	6813      	ldr	r3, [r2, #0]
 8014048:	1c58      	adds	r0, r3, #1
 801404a:	6010      	str	r0, [r2, #0]
 801404c:	7019      	strb	r1, [r3, #0]
 801404e:	4608      	mov	r0, r1
 8014050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014054:	4770      	bx	lr

08014056 <__sfputs_r>:
 8014056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014058:	4606      	mov	r6, r0
 801405a:	460f      	mov	r7, r1
 801405c:	4614      	mov	r4, r2
 801405e:	18d5      	adds	r5, r2, r3
 8014060:	42ac      	cmp	r4, r5
 8014062:	d101      	bne.n	8014068 <__sfputs_r+0x12>
 8014064:	2000      	movs	r0, #0
 8014066:	e007      	b.n	8014078 <__sfputs_r+0x22>
 8014068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801406c:	463a      	mov	r2, r7
 801406e:	4630      	mov	r0, r6
 8014070:	f7ff ffda 	bl	8014028 <__sfputc_r>
 8014074:	1c43      	adds	r3, r0, #1
 8014076:	d1f3      	bne.n	8014060 <__sfputs_r+0xa>
 8014078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801407c <_vfiprintf_r>:
 801407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014080:	460d      	mov	r5, r1
 8014082:	b09d      	sub	sp, #116	; 0x74
 8014084:	4614      	mov	r4, r2
 8014086:	4698      	mov	r8, r3
 8014088:	4606      	mov	r6, r0
 801408a:	b118      	cbz	r0, 8014094 <_vfiprintf_r+0x18>
 801408c:	6983      	ldr	r3, [r0, #24]
 801408e:	b90b      	cbnz	r3, 8014094 <_vfiprintf_r+0x18>
 8014090:	f7ff fd82 	bl	8013b98 <__sinit>
 8014094:	4b89      	ldr	r3, [pc, #548]	; (80142bc <_vfiprintf_r+0x240>)
 8014096:	429d      	cmp	r5, r3
 8014098:	d11b      	bne.n	80140d2 <_vfiprintf_r+0x56>
 801409a:	6875      	ldr	r5, [r6, #4]
 801409c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801409e:	07d9      	lsls	r1, r3, #31
 80140a0:	d405      	bmi.n	80140ae <_vfiprintf_r+0x32>
 80140a2:	89ab      	ldrh	r3, [r5, #12]
 80140a4:	059a      	lsls	r2, r3, #22
 80140a6:	d402      	bmi.n	80140ae <_vfiprintf_r+0x32>
 80140a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140aa:	f7ff fe25 	bl	8013cf8 <__retarget_lock_acquire_recursive>
 80140ae:	89ab      	ldrh	r3, [r5, #12]
 80140b0:	071b      	lsls	r3, r3, #28
 80140b2:	d501      	bpl.n	80140b8 <_vfiprintf_r+0x3c>
 80140b4:	692b      	ldr	r3, [r5, #16]
 80140b6:	b9eb      	cbnz	r3, 80140f4 <_vfiprintf_r+0x78>
 80140b8:	4629      	mov	r1, r5
 80140ba:	4630      	mov	r0, r6
 80140bc:	f000 fb4a 	bl	8014754 <__swsetup_r>
 80140c0:	b1c0      	cbz	r0, 80140f4 <_vfiprintf_r+0x78>
 80140c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140c4:	07dc      	lsls	r4, r3, #31
 80140c6:	d50e      	bpl.n	80140e6 <_vfiprintf_r+0x6a>
 80140c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140cc:	b01d      	add	sp, #116	; 0x74
 80140ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d2:	4b7b      	ldr	r3, [pc, #492]	; (80142c0 <_vfiprintf_r+0x244>)
 80140d4:	429d      	cmp	r5, r3
 80140d6:	d101      	bne.n	80140dc <_vfiprintf_r+0x60>
 80140d8:	68b5      	ldr	r5, [r6, #8]
 80140da:	e7df      	b.n	801409c <_vfiprintf_r+0x20>
 80140dc:	4b79      	ldr	r3, [pc, #484]	; (80142c4 <_vfiprintf_r+0x248>)
 80140de:	429d      	cmp	r5, r3
 80140e0:	bf08      	it	eq
 80140e2:	68f5      	ldreq	r5, [r6, #12]
 80140e4:	e7da      	b.n	801409c <_vfiprintf_r+0x20>
 80140e6:	89ab      	ldrh	r3, [r5, #12]
 80140e8:	0598      	lsls	r0, r3, #22
 80140ea:	d4ed      	bmi.n	80140c8 <_vfiprintf_r+0x4c>
 80140ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140ee:	f7ff fe04 	bl	8013cfa <__retarget_lock_release_recursive>
 80140f2:	e7e9      	b.n	80140c8 <_vfiprintf_r+0x4c>
 80140f4:	2300      	movs	r3, #0
 80140f6:	9309      	str	r3, [sp, #36]	; 0x24
 80140f8:	2320      	movs	r3, #32
 80140fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014102:	2330      	movs	r3, #48	; 0x30
 8014104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80142c8 <_vfiprintf_r+0x24c>
 8014108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801410c:	f04f 0901 	mov.w	r9, #1
 8014110:	4623      	mov	r3, r4
 8014112:	469a      	mov	sl, r3
 8014114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014118:	b10a      	cbz	r2, 801411e <_vfiprintf_r+0xa2>
 801411a:	2a25      	cmp	r2, #37	; 0x25
 801411c:	d1f9      	bne.n	8014112 <_vfiprintf_r+0x96>
 801411e:	ebba 0b04 	subs.w	fp, sl, r4
 8014122:	d00b      	beq.n	801413c <_vfiprintf_r+0xc0>
 8014124:	465b      	mov	r3, fp
 8014126:	4622      	mov	r2, r4
 8014128:	4629      	mov	r1, r5
 801412a:	4630      	mov	r0, r6
 801412c:	f7ff ff93 	bl	8014056 <__sfputs_r>
 8014130:	3001      	adds	r0, #1
 8014132:	f000 80aa 	beq.w	801428a <_vfiprintf_r+0x20e>
 8014136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014138:	445a      	add	r2, fp
 801413a:	9209      	str	r2, [sp, #36]	; 0x24
 801413c:	f89a 3000 	ldrb.w	r3, [sl]
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 80a2 	beq.w	801428a <_vfiprintf_r+0x20e>
 8014146:	2300      	movs	r3, #0
 8014148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801414c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014150:	f10a 0a01 	add.w	sl, sl, #1
 8014154:	9304      	str	r3, [sp, #16]
 8014156:	9307      	str	r3, [sp, #28]
 8014158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801415c:	931a      	str	r3, [sp, #104]	; 0x68
 801415e:	4654      	mov	r4, sl
 8014160:	2205      	movs	r2, #5
 8014162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014166:	4858      	ldr	r0, [pc, #352]	; (80142c8 <_vfiprintf_r+0x24c>)
 8014168:	f7ec f86a 	bl	8000240 <memchr>
 801416c:	9a04      	ldr	r2, [sp, #16]
 801416e:	b9d8      	cbnz	r0, 80141a8 <_vfiprintf_r+0x12c>
 8014170:	06d1      	lsls	r1, r2, #27
 8014172:	bf44      	itt	mi
 8014174:	2320      	movmi	r3, #32
 8014176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801417a:	0713      	lsls	r3, r2, #28
 801417c:	bf44      	itt	mi
 801417e:	232b      	movmi	r3, #43	; 0x2b
 8014180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014184:	f89a 3000 	ldrb.w	r3, [sl]
 8014188:	2b2a      	cmp	r3, #42	; 0x2a
 801418a:	d015      	beq.n	80141b8 <_vfiprintf_r+0x13c>
 801418c:	9a07      	ldr	r2, [sp, #28]
 801418e:	4654      	mov	r4, sl
 8014190:	2000      	movs	r0, #0
 8014192:	f04f 0c0a 	mov.w	ip, #10
 8014196:	4621      	mov	r1, r4
 8014198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801419c:	3b30      	subs	r3, #48	; 0x30
 801419e:	2b09      	cmp	r3, #9
 80141a0:	d94e      	bls.n	8014240 <_vfiprintf_r+0x1c4>
 80141a2:	b1b0      	cbz	r0, 80141d2 <_vfiprintf_r+0x156>
 80141a4:	9207      	str	r2, [sp, #28]
 80141a6:	e014      	b.n	80141d2 <_vfiprintf_r+0x156>
 80141a8:	eba0 0308 	sub.w	r3, r0, r8
 80141ac:	fa09 f303 	lsl.w	r3, r9, r3
 80141b0:	4313      	orrs	r3, r2
 80141b2:	9304      	str	r3, [sp, #16]
 80141b4:	46a2      	mov	sl, r4
 80141b6:	e7d2      	b.n	801415e <_vfiprintf_r+0xe2>
 80141b8:	9b03      	ldr	r3, [sp, #12]
 80141ba:	1d19      	adds	r1, r3, #4
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	9103      	str	r1, [sp, #12]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	bfbb      	ittet	lt
 80141c4:	425b      	neglt	r3, r3
 80141c6:	f042 0202 	orrlt.w	r2, r2, #2
 80141ca:	9307      	strge	r3, [sp, #28]
 80141cc:	9307      	strlt	r3, [sp, #28]
 80141ce:	bfb8      	it	lt
 80141d0:	9204      	strlt	r2, [sp, #16]
 80141d2:	7823      	ldrb	r3, [r4, #0]
 80141d4:	2b2e      	cmp	r3, #46	; 0x2e
 80141d6:	d10c      	bne.n	80141f2 <_vfiprintf_r+0x176>
 80141d8:	7863      	ldrb	r3, [r4, #1]
 80141da:	2b2a      	cmp	r3, #42	; 0x2a
 80141dc:	d135      	bne.n	801424a <_vfiprintf_r+0x1ce>
 80141de:	9b03      	ldr	r3, [sp, #12]
 80141e0:	1d1a      	adds	r2, r3, #4
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	9203      	str	r2, [sp, #12]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	bfb8      	it	lt
 80141ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80141ee:	3402      	adds	r4, #2
 80141f0:	9305      	str	r3, [sp, #20]
 80141f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80142d8 <_vfiprintf_r+0x25c>
 80141f6:	7821      	ldrb	r1, [r4, #0]
 80141f8:	2203      	movs	r2, #3
 80141fa:	4650      	mov	r0, sl
 80141fc:	f7ec f820 	bl	8000240 <memchr>
 8014200:	b140      	cbz	r0, 8014214 <_vfiprintf_r+0x198>
 8014202:	2340      	movs	r3, #64	; 0x40
 8014204:	eba0 000a 	sub.w	r0, r0, sl
 8014208:	fa03 f000 	lsl.w	r0, r3, r0
 801420c:	9b04      	ldr	r3, [sp, #16]
 801420e:	4303      	orrs	r3, r0
 8014210:	3401      	adds	r4, #1
 8014212:	9304      	str	r3, [sp, #16]
 8014214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014218:	482c      	ldr	r0, [pc, #176]	; (80142cc <_vfiprintf_r+0x250>)
 801421a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801421e:	2206      	movs	r2, #6
 8014220:	f7ec f80e 	bl	8000240 <memchr>
 8014224:	2800      	cmp	r0, #0
 8014226:	d03f      	beq.n	80142a8 <_vfiprintf_r+0x22c>
 8014228:	4b29      	ldr	r3, [pc, #164]	; (80142d0 <_vfiprintf_r+0x254>)
 801422a:	bb1b      	cbnz	r3, 8014274 <_vfiprintf_r+0x1f8>
 801422c:	9b03      	ldr	r3, [sp, #12]
 801422e:	3307      	adds	r3, #7
 8014230:	f023 0307 	bic.w	r3, r3, #7
 8014234:	3308      	adds	r3, #8
 8014236:	9303      	str	r3, [sp, #12]
 8014238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801423a:	443b      	add	r3, r7
 801423c:	9309      	str	r3, [sp, #36]	; 0x24
 801423e:	e767      	b.n	8014110 <_vfiprintf_r+0x94>
 8014240:	fb0c 3202 	mla	r2, ip, r2, r3
 8014244:	460c      	mov	r4, r1
 8014246:	2001      	movs	r0, #1
 8014248:	e7a5      	b.n	8014196 <_vfiprintf_r+0x11a>
 801424a:	2300      	movs	r3, #0
 801424c:	3401      	adds	r4, #1
 801424e:	9305      	str	r3, [sp, #20]
 8014250:	4619      	mov	r1, r3
 8014252:	f04f 0c0a 	mov.w	ip, #10
 8014256:	4620      	mov	r0, r4
 8014258:	f810 2b01 	ldrb.w	r2, [r0], #1
 801425c:	3a30      	subs	r2, #48	; 0x30
 801425e:	2a09      	cmp	r2, #9
 8014260:	d903      	bls.n	801426a <_vfiprintf_r+0x1ee>
 8014262:	2b00      	cmp	r3, #0
 8014264:	d0c5      	beq.n	80141f2 <_vfiprintf_r+0x176>
 8014266:	9105      	str	r1, [sp, #20]
 8014268:	e7c3      	b.n	80141f2 <_vfiprintf_r+0x176>
 801426a:	fb0c 2101 	mla	r1, ip, r1, r2
 801426e:	4604      	mov	r4, r0
 8014270:	2301      	movs	r3, #1
 8014272:	e7f0      	b.n	8014256 <_vfiprintf_r+0x1da>
 8014274:	ab03      	add	r3, sp, #12
 8014276:	9300      	str	r3, [sp, #0]
 8014278:	462a      	mov	r2, r5
 801427a:	4b16      	ldr	r3, [pc, #88]	; (80142d4 <_vfiprintf_r+0x258>)
 801427c:	a904      	add	r1, sp, #16
 801427e:	4630      	mov	r0, r6
 8014280:	f3af 8000 	nop.w
 8014284:	4607      	mov	r7, r0
 8014286:	1c78      	adds	r0, r7, #1
 8014288:	d1d6      	bne.n	8014238 <_vfiprintf_r+0x1bc>
 801428a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801428c:	07d9      	lsls	r1, r3, #31
 801428e:	d405      	bmi.n	801429c <_vfiprintf_r+0x220>
 8014290:	89ab      	ldrh	r3, [r5, #12]
 8014292:	059a      	lsls	r2, r3, #22
 8014294:	d402      	bmi.n	801429c <_vfiprintf_r+0x220>
 8014296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014298:	f7ff fd2f 	bl	8013cfa <__retarget_lock_release_recursive>
 801429c:	89ab      	ldrh	r3, [r5, #12]
 801429e:	065b      	lsls	r3, r3, #25
 80142a0:	f53f af12 	bmi.w	80140c8 <_vfiprintf_r+0x4c>
 80142a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142a6:	e711      	b.n	80140cc <_vfiprintf_r+0x50>
 80142a8:	ab03      	add	r3, sp, #12
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	462a      	mov	r2, r5
 80142ae:	4b09      	ldr	r3, [pc, #36]	; (80142d4 <_vfiprintf_r+0x258>)
 80142b0:	a904      	add	r1, sp, #16
 80142b2:	4630      	mov	r0, r6
 80142b4:	f000 f880 	bl	80143b8 <_printf_i>
 80142b8:	e7e4      	b.n	8014284 <_vfiprintf_r+0x208>
 80142ba:	bf00      	nop
 80142bc:	080157d4 	.word	0x080157d4
 80142c0:	080157f4 	.word	0x080157f4
 80142c4:	080157b4 	.word	0x080157b4
 80142c8:	08015814 	.word	0x08015814
 80142cc:	0801581e 	.word	0x0801581e
 80142d0:	00000000 	.word	0x00000000
 80142d4:	08014057 	.word	0x08014057
 80142d8:	0801581a 	.word	0x0801581a

080142dc <_printf_common>:
 80142dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e0:	4616      	mov	r6, r2
 80142e2:	4699      	mov	r9, r3
 80142e4:	688a      	ldr	r2, [r1, #8]
 80142e6:	690b      	ldr	r3, [r1, #16]
 80142e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142ec:	4293      	cmp	r3, r2
 80142ee:	bfb8      	it	lt
 80142f0:	4613      	movlt	r3, r2
 80142f2:	6033      	str	r3, [r6, #0]
 80142f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142f8:	4607      	mov	r7, r0
 80142fa:	460c      	mov	r4, r1
 80142fc:	b10a      	cbz	r2, 8014302 <_printf_common+0x26>
 80142fe:	3301      	adds	r3, #1
 8014300:	6033      	str	r3, [r6, #0]
 8014302:	6823      	ldr	r3, [r4, #0]
 8014304:	0699      	lsls	r1, r3, #26
 8014306:	bf42      	ittt	mi
 8014308:	6833      	ldrmi	r3, [r6, #0]
 801430a:	3302      	addmi	r3, #2
 801430c:	6033      	strmi	r3, [r6, #0]
 801430e:	6825      	ldr	r5, [r4, #0]
 8014310:	f015 0506 	ands.w	r5, r5, #6
 8014314:	d106      	bne.n	8014324 <_printf_common+0x48>
 8014316:	f104 0a19 	add.w	sl, r4, #25
 801431a:	68e3      	ldr	r3, [r4, #12]
 801431c:	6832      	ldr	r2, [r6, #0]
 801431e:	1a9b      	subs	r3, r3, r2
 8014320:	42ab      	cmp	r3, r5
 8014322:	dc26      	bgt.n	8014372 <_printf_common+0x96>
 8014324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014328:	1e13      	subs	r3, r2, #0
 801432a:	6822      	ldr	r2, [r4, #0]
 801432c:	bf18      	it	ne
 801432e:	2301      	movne	r3, #1
 8014330:	0692      	lsls	r2, r2, #26
 8014332:	d42b      	bmi.n	801438c <_printf_common+0xb0>
 8014334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014338:	4649      	mov	r1, r9
 801433a:	4638      	mov	r0, r7
 801433c:	47c0      	blx	r8
 801433e:	3001      	adds	r0, #1
 8014340:	d01e      	beq.n	8014380 <_printf_common+0xa4>
 8014342:	6823      	ldr	r3, [r4, #0]
 8014344:	68e5      	ldr	r5, [r4, #12]
 8014346:	6832      	ldr	r2, [r6, #0]
 8014348:	f003 0306 	and.w	r3, r3, #6
 801434c:	2b04      	cmp	r3, #4
 801434e:	bf08      	it	eq
 8014350:	1aad      	subeq	r5, r5, r2
 8014352:	68a3      	ldr	r3, [r4, #8]
 8014354:	6922      	ldr	r2, [r4, #16]
 8014356:	bf0c      	ite	eq
 8014358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801435c:	2500      	movne	r5, #0
 801435e:	4293      	cmp	r3, r2
 8014360:	bfc4      	itt	gt
 8014362:	1a9b      	subgt	r3, r3, r2
 8014364:	18ed      	addgt	r5, r5, r3
 8014366:	2600      	movs	r6, #0
 8014368:	341a      	adds	r4, #26
 801436a:	42b5      	cmp	r5, r6
 801436c:	d11a      	bne.n	80143a4 <_printf_common+0xc8>
 801436e:	2000      	movs	r0, #0
 8014370:	e008      	b.n	8014384 <_printf_common+0xa8>
 8014372:	2301      	movs	r3, #1
 8014374:	4652      	mov	r2, sl
 8014376:	4649      	mov	r1, r9
 8014378:	4638      	mov	r0, r7
 801437a:	47c0      	blx	r8
 801437c:	3001      	adds	r0, #1
 801437e:	d103      	bne.n	8014388 <_printf_common+0xac>
 8014380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014388:	3501      	adds	r5, #1
 801438a:	e7c6      	b.n	801431a <_printf_common+0x3e>
 801438c:	18e1      	adds	r1, r4, r3
 801438e:	1c5a      	adds	r2, r3, #1
 8014390:	2030      	movs	r0, #48	; 0x30
 8014392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014396:	4422      	add	r2, r4
 8014398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801439c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80143a0:	3302      	adds	r3, #2
 80143a2:	e7c7      	b.n	8014334 <_printf_common+0x58>
 80143a4:	2301      	movs	r3, #1
 80143a6:	4622      	mov	r2, r4
 80143a8:	4649      	mov	r1, r9
 80143aa:	4638      	mov	r0, r7
 80143ac:	47c0      	blx	r8
 80143ae:	3001      	adds	r0, #1
 80143b0:	d0e6      	beq.n	8014380 <_printf_common+0xa4>
 80143b2:	3601      	adds	r6, #1
 80143b4:	e7d9      	b.n	801436a <_printf_common+0x8e>
	...

080143b8 <_printf_i>:
 80143b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143bc:	7e0f      	ldrb	r7, [r1, #24]
 80143be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80143c0:	2f78      	cmp	r7, #120	; 0x78
 80143c2:	4691      	mov	r9, r2
 80143c4:	4680      	mov	r8, r0
 80143c6:	460c      	mov	r4, r1
 80143c8:	469a      	mov	sl, r3
 80143ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80143ce:	d807      	bhi.n	80143e0 <_printf_i+0x28>
 80143d0:	2f62      	cmp	r7, #98	; 0x62
 80143d2:	d80a      	bhi.n	80143ea <_printf_i+0x32>
 80143d4:	2f00      	cmp	r7, #0
 80143d6:	f000 80d8 	beq.w	801458a <_printf_i+0x1d2>
 80143da:	2f58      	cmp	r7, #88	; 0x58
 80143dc:	f000 80a3 	beq.w	8014526 <_printf_i+0x16e>
 80143e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143e8:	e03a      	b.n	8014460 <_printf_i+0xa8>
 80143ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143ee:	2b15      	cmp	r3, #21
 80143f0:	d8f6      	bhi.n	80143e0 <_printf_i+0x28>
 80143f2:	a101      	add	r1, pc, #4	; (adr r1, 80143f8 <_printf_i+0x40>)
 80143f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80143f8:	08014451 	.word	0x08014451
 80143fc:	08014465 	.word	0x08014465
 8014400:	080143e1 	.word	0x080143e1
 8014404:	080143e1 	.word	0x080143e1
 8014408:	080143e1 	.word	0x080143e1
 801440c:	080143e1 	.word	0x080143e1
 8014410:	08014465 	.word	0x08014465
 8014414:	080143e1 	.word	0x080143e1
 8014418:	080143e1 	.word	0x080143e1
 801441c:	080143e1 	.word	0x080143e1
 8014420:	080143e1 	.word	0x080143e1
 8014424:	08014571 	.word	0x08014571
 8014428:	08014495 	.word	0x08014495
 801442c:	08014553 	.word	0x08014553
 8014430:	080143e1 	.word	0x080143e1
 8014434:	080143e1 	.word	0x080143e1
 8014438:	08014593 	.word	0x08014593
 801443c:	080143e1 	.word	0x080143e1
 8014440:	08014495 	.word	0x08014495
 8014444:	080143e1 	.word	0x080143e1
 8014448:	080143e1 	.word	0x080143e1
 801444c:	0801455b 	.word	0x0801455b
 8014450:	682b      	ldr	r3, [r5, #0]
 8014452:	1d1a      	adds	r2, r3, #4
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	602a      	str	r2, [r5, #0]
 8014458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801445c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014460:	2301      	movs	r3, #1
 8014462:	e0a3      	b.n	80145ac <_printf_i+0x1f4>
 8014464:	6820      	ldr	r0, [r4, #0]
 8014466:	6829      	ldr	r1, [r5, #0]
 8014468:	0606      	lsls	r6, r0, #24
 801446a:	f101 0304 	add.w	r3, r1, #4
 801446e:	d50a      	bpl.n	8014486 <_printf_i+0xce>
 8014470:	680e      	ldr	r6, [r1, #0]
 8014472:	602b      	str	r3, [r5, #0]
 8014474:	2e00      	cmp	r6, #0
 8014476:	da03      	bge.n	8014480 <_printf_i+0xc8>
 8014478:	232d      	movs	r3, #45	; 0x2d
 801447a:	4276      	negs	r6, r6
 801447c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014480:	485e      	ldr	r0, [pc, #376]	; (80145fc <_printf_i+0x244>)
 8014482:	230a      	movs	r3, #10
 8014484:	e019      	b.n	80144ba <_printf_i+0x102>
 8014486:	680e      	ldr	r6, [r1, #0]
 8014488:	602b      	str	r3, [r5, #0]
 801448a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801448e:	bf18      	it	ne
 8014490:	b236      	sxthne	r6, r6
 8014492:	e7ef      	b.n	8014474 <_printf_i+0xbc>
 8014494:	682b      	ldr	r3, [r5, #0]
 8014496:	6820      	ldr	r0, [r4, #0]
 8014498:	1d19      	adds	r1, r3, #4
 801449a:	6029      	str	r1, [r5, #0]
 801449c:	0601      	lsls	r1, r0, #24
 801449e:	d501      	bpl.n	80144a4 <_printf_i+0xec>
 80144a0:	681e      	ldr	r6, [r3, #0]
 80144a2:	e002      	b.n	80144aa <_printf_i+0xf2>
 80144a4:	0646      	lsls	r6, r0, #25
 80144a6:	d5fb      	bpl.n	80144a0 <_printf_i+0xe8>
 80144a8:	881e      	ldrh	r6, [r3, #0]
 80144aa:	4854      	ldr	r0, [pc, #336]	; (80145fc <_printf_i+0x244>)
 80144ac:	2f6f      	cmp	r7, #111	; 0x6f
 80144ae:	bf0c      	ite	eq
 80144b0:	2308      	moveq	r3, #8
 80144b2:	230a      	movne	r3, #10
 80144b4:	2100      	movs	r1, #0
 80144b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80144ba:	6865      	ldr	r5, [r4, #4]
 80144bc:	60a5      	str	r5, [r4, #8]
 80144be:	2d00      	cmp	r5, #0
 80144c0:	bfa2      	ittt	ge
 80144c2:	6821      	ldrge	r1, [r4, #0]
 80144c4:	f021 0104 	bicge.w	r1, r1, #4
 80144c8:	6021      	strge	r1, [r4, #0]
 80144ca:	b90e      	cbnz	r6, 80144d0 <_printf_i+0x118>
 80144cc:	2d00      	cmp	r5, #0
 80144ce:	d04d      	beq.n	801456c <_printf_i+0x1b4>
 80144d0:	4615      	mov	r5, r2
 80144d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80144d6:	fb03 6711 	mls	r7, r3, r1, r6
 80144da:	5dc7      	ldrb	r7, [r0, r7]
 80144dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80144e0:	4637      	mov	r7, r6
 80144e2:	42bb      	cmp	r3, r7
 80144e4:	460e      	mov	r6, r1
 80144e6:	d9f4      	bls.n	80144d2 <_printf_i+0x11a>
 80144e8:	2b08      	cmp	r3, #8
 80144ea:	d10b      	bne.n	8014504 <_printf_i+0x14c>
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	07de      	lsls	r6, r3, #31
 80144f0:	d508      	bpl.n	8014504 <_printf_i+0x14c>
 80144f2:	6923      	ldr	r3, [r4, #16]
 80144f4:	6861      	ldr	r1, [r4, #4]
 80144f6:	4299      	cmp	r1, r3
 80144f8:	bfde      	ittt	le
 80144fa:	2330      	movle	r3, #48	; 0x30
 80144fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014500:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014504:	1b52      	subs	r2, r2, r5
 8014506:	6122      	str	r2, [r4, #16]
 8014508:	f8cd a000 	str.w	sl, [sp]
 801450c:	464b      	mov	r3, r9
 801450e:	aa03      	add	r2, sp, #12
 8014510:	4621      	mov	r1, r4
 8014512:	4640      	mov	r0, r8
 8014514:	f7ff fee2 	bl	80142dc <_printf_common>
 8014518:	3001      	adds	r0, #1
 801451a:	d14c      	bne.n	80145b6 <_printf_i+0x1fe>
 801451c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014520:	b004      	add	sp, #16
 8014522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014526:	4835      	ldr	r0, [pc, #212]	; (80145fc <_printf_i+0x244>)
 8014528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801452c:	6829      	ldr	r1, [r5, #0]
 801452e:	6823      	ldr	r3, [r4, #0]
 8014530:	f851 6b04 	ldr.w	r6, [r1], #4
 8014534:	6029      	str	r1, [r5, #0]
 8014536:	061d      	lsls	r5, r3, #24
 8014538:	d514      	bpl.n	8014564 <_printf_i+0x1ac>
 801453a:	07df      	lsls	r7, r3, #31
 801453c:	bf44      	itt	mi
 801453e:	f043 0320 	orrmi.w	r3, r3, #32
 8014542:	6023      	strmi	r3, [r4, #0]
 8014544:	b91e      	cbnz	r6, 801454e <_printf_i+0x196>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	f023 0320 	bic.w	r3, r3, #32
 801454c:	6023      	str	r3, [r4, #0]
 801454e:	2310      	movs	r3, #16
 8014550:	e7b0      	b.n	80144b4 <_printf_i+0xfc>
 8014552:	6823      	ldr	r3, [r4, #0]
 8014554:	f043 0320 	orr.w	r3, r3, #32
 8014558:	6023      	str	r3, [r4, #0]
 801455a:	2378      	movs	r3, #120	; 0x78
 801455c:	4828      	ldr	r0, [pc, #160]	; (8014600 <_printf_i+0x248>)
 801455e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014562:	e7e3      	b.n	801452c <_printf_i+0x174>
 8014564:	0659      	lsls	r1, r3, #25
 8014566:	bf48      	it	mi
 8014568:	b2b6      	uxthmi	r6, r6
 801456a:	e7e6      	b.n	801453a <_printf_i+0x182>
 801456c:	4615      	mov	r5, r2
 801456e:	e7bb      	b.n	80144e8 <_printf_i+0x130>
 8014570:	682b      	ldr	r3, [r5, #0]
 8014572:	6826      	ldr	r6, [r4, #0]
 8014574:	6961      	ldr	r1, [r4, #20]
 8014576:	1d18      	adds	r0, r3, #4
 8014578:	6028      	str	r0, [r5, #0]
 801457a:	0635      	lsls	r5, r6, #24
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	d501      	bpl.n	8014584 <_printf_i+0x1cc>
 8014580:	6019      	str	r1, [r3, #0]
 8014582:	e002      	b.n	801458a <_printf_i+0x1d2>
 8014584:	0670      	lsls	r0, r6, #25
 8014586:	d5fb      	bpl.n	8014580 <_printf_i+0x1c8>
 8014588:	8019      	strh	r1, [r3, #0]
 801458a:	2300      	movs	r3, #0
 801458c:	6123      	str	r3, [r4, #16]
 801458e:	4615      	mov	r5, r2
 8014590:	e7ba      	b.n	8014508 <_printf_i+0x150>
 8014592:	682b      	ldr	r3, [r5, #0]
 8014594:	1d1a      	adds	r2, r3, #4
 8014596:	602a      	str	r2, [r5, #0]
 8014598:	681d      	ldr	r5, [r3, #0]
 801459a:	6862      	ldr	r2, [r4, #4]
 801459c:	2100      	movs	r1, #0
 801459e:	4628      	mov	r0, r5
 80145a0:	f7eb fe4e 	bl	8000240 <memchr>
 80145a4:	b108      	cbz	r0, 80145aa <_printf_i+0x1f2>
 80145a6:	1b40      	subs	r0, r0, r5
 80145a8:	6060      	str	r0, [r4, #4]
 80145aa:	6863      	ldr	r3, [r4, #4]
 80145ac:	6123      	str	r3, [r4, #16]
 80145ae:	2300      	movs	r3, #0
 80145b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145b4:	e7a8      	b.n	8014508 <_printf_i+0x150>
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	462a      	mov	r2, r5
 80145ba:	4649      	mov	r1, r9
 80145bc:	4640      	mov	r0, r8
 80145be:	47d0      	blx	sl
 80145c0:	3001      	adds	r0, #1
 80145c2:	d0ab      	beq.n	801451c <_printf_i+0x164>
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	079b      	lsls	r3, r3, #30
 80145c8:	d413      	bmi.n	80145f2 <_printf_i+0x23a>
 80145ca:	68e0      	ldr	r0, [r4, #12]
 80145cc:	9b03      	ldr	r3, [sp, #12]
 80145ce:	4298      	cmp	r0, r3
 80145d0:	bfb8      	it	lt
 80145d2:	4618      	movlt	r0, r3
 80145d4:	e7a4      	b.n	8014520 <_printf_i+0x168>
 80145d6:	2301      	movs	r3, #1
 80145d8:	4632      	mov	r2, r6
 80145da:	4649      	mov	r1, r9
 80145dc:	4640      	mov	r0, r8
 80145de:	47d0      	blx	sl
 80145e0:	3001      	adds	r0, #1
 80145e2:	d09b      	beq.n	801451c <_printf_i+0x164>
 80145e4:	3501      	adds	r5, #1
 80145e6:	68e3      	ldr	r3, [r4, #12]
 80145e8:	9903      	ldr	r1, [sp, #12]
 80145ea:	1a5b      	subs	r3, r3, r1
 80145ec:	42ab      	cmp	r3, r5
 80145ee:	dcf2      	bgt.n	80145d6 <_printf_i+0x21e>
 80145f0:	e7eb      	b.n	80145ca <_printf_i+0x212>
 80145f2:	2500      	movs	r5, #0
 80145f4:	f104 0619 	add.w	r6, r4, #25
 80145f8:	e7f5      	b.n	80145e6 <_printf_i+0x22e>
 80145fa:	bf00      	nop
 80145fc:	08015825 	.word	0x08015825
 8014600:	08015836 	.word	0x08015836

08014604 <__sread>:
 8014604:	b510      	push	{r4, lr}
 8014606:	460c      	mov	r4, r1
 8014608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801460c:	f000 fa6a 	bl	8014ae4 <_read_r>
 8014610:	2800      	cmp	r0, #0
 8014612:	bfab      	itete	ge
 8014614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014616:	89a3      	ldrhlt	r3, [r4, #12]
 8014618:	181b      	addge	r3, r3, r0
 801461a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801461e:	bfac      	ite	ge
 8014620:	6563      	strge	r3, [r4, #84]	; 0x54
 8014622:	81a3      	strhlt	r3, [r4, #12]
 8014624:	bd10      	pop	{r4, pc}

08014626 <__swrite>:
 8014626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801462a:	461f      	mov	r7, r3
 801462c:	898b      	ldrh	r3, [r1, #12]
 801462e:	05db      	lsls	r3, r3, #23
 8014630:	4605      	mov	r5, r0
 8014632:	460c      	mov	r4, r1
 8014634:	4616      	mov	r6, r2
 8014636:	d505      	bpl.n	8014644 <__swrite+0x1e>
 8014638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801463c:	2302      	movs	r3, #2
 801463e:	2200      	movs	r2, #0
 8014640:	f000 f9d0 	bl	80149e4 <_lseek_r>
 8014644:	89a3      	ldrh	r3, [r4, #12]
 8014646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801464a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801464e:	81a3      	strh	r3, [r4, #12]
 8014650:	4632      	mov	r2, r6
 8014652:	463b      	mov	r3, r7
 8014654:	4628      	mov	r0, r5
 8014656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801465a:	f000 b869 	b.w	8014730 <_write_r>

0801465e <__sseek>:
 801465e:	b510      	push	{r4, lr}
 8014660:	460c      	mov	r4, r1
 8014662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014666:	f000 f9bd 	bl	80149e4 <_lseek_r>
 801466a:	1c43      	adds	r3, r0, #1
 801466c:	89a3      	ldrh	r3, [r4, #12]
 801466e:	bf15      	itete	ne
 8014670:	6560      	strne	r0, [r4, #84]	; 0x54
 8014672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801467a:	81a3      	strheq	r3, [r4, #12]
 801467c:	bf18      	it	ne
 801467e:	81a3      	strhne	r3, [r4, #12]
 8014680:	bd10      	pop	{r4, pc}

08014682 <__sclose>:
 8014682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014686:	f000 b8db 	b.w	8014840 <_close_r>
	...

0801468c <__swbuf_r>:
 801468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801468e:	460e      	mov	r6, r1
 8014690:	4614      	mov	r4, r2
 8014692:	4605      	mov	r5, r0
 8014694:	b118      	cbz	r0, 801469e <__swbuf_r+0x12>
 8014696:	6983      	ldr	r3, [r0, #24]
 8014698:	b90b      	cbnz	r3, 801469e <__swbuf_r+0x12>
 801469a:	f7ff fa7d 	bl	8013b98 <__sinit>
 801469e:	4b21      	ldr	r3, [pc, #132]	; (8014724 <__swbuf_r+0x98>)
 80146a0:	429c      	cmp	r4, r3
 80146a2:	d12b      	bne.n	80146fc <__swbuf_r+0x70>
 80146a4:	686c      	ldr	r4, [r5, #4]
 80146a6:	69a3      	ldr	r3, [r4, #24]
 80146a8:	60a3      	str	r3, [r4, #8]
 80146aa:	89a3      	ldrh	r3, [r4, #12]
 80146ac:	071a      	lsls	r2, r3, #28
 80146ae:	d52f      	bpl.n	8014710 <__swbuf_r+0x84>
 80146b0:	6923      	ldr	r3, [r4, #16]
 80146b2:	b36b      	cbz	r3, 8014710 <__swbuf_r+0x84>
 80146b4:	6923      	ldr	r3, [r4, #16]
 80146b6:	6820      	ldr	r0, [r4, #0]
 80146b8:	1ac0      	subs	r0, r0, r3
 80146ba:	6963      	ldr	r3, [r4, #20]
 80146bc:	b2f6      	uxtb	r6, r6
 80146be:	4283      	cmp	r3, r0
 80146c0:	4637      	mov	r7, r6
 80146c2:	dc04      	bgt.n	80146ce <__swbuf_r+0x42>
 80146c4:	4621      	mov	r1, r4
 80146c6:	4628      	mov	r0, r5
 80146c8:	f000 f950 	bl	801496c <_fflush_r>
 80146cc:	bb30      	cbnz	r0, 801471c <__swbuf_r+0x90>
 80146ce:	68a3      	ldr	r3, [r4, #8]
 80146d0:	3b01      	subs	r3, #1
 80146d2:	60a3      	str	r3, [r4, #8]
 80146d4:	6823      	ldr	r3, [r4, #0]
 80146d6:	1c5a      	adds	r2, r3, #1
 80146d8:	6022      	str	r2, [r4, #0]
 80146da:	701e      	strb	r6, [r3, #0]
 80146dc:	6963      	ldr	r3, [r4, #20]
 80146de:	3001      	adds	r0, #1
 80146e0:	4283      	cmp	r3, r0
 80146e2:	d004      	beq.n	80146ee <__swbuf_r+0x62>
 80146e4:	89a3      	ldrh	r3, [r4, #12]
 80146e6:	07db      	lsls	r3, r3, #31
 80146e8:	d506      	bpl.n	80146f8 <__swbuf_r+0x6c>
 80146ea:	2e0a      	cmp	r6, #10
 80146ec:	d104      	bne.n	80146f8 <__swbuf_r+0x6c>
 80146ee:	4621      	mov	r1, r4
 80146f0:	4628      	mov	r0, r5
 80146f2:	f000 f93b 	bl	801496c <_fflush_r>
 80146f6:	b988      	cbnz	r0, 801471c <__swbuf_r+0x90>
 80146f8:	4638      	mov	r0, r7
 80146fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146fc:	4b0a      	ldr	r3, [pc, #40]	; (8014728 <__swbuf_r+0x9c>)
 80146fe:	429c      	cmp	r4, r3
 8014700:	d101      	bne.n	8014706 <__swbuf_r+0x7a>
 8014702:	68ac      	ldr	r4, [r5, #8]
 8014704:	e7cf      	b.n	80146a6 <__swbuf_r+0x1a>
 8014706:	4b09      	ldr	r3, [pc, #36]	; (801472c <__swbuf_r+0xa0>)
 8014708:	429c      	cmp	r4, r3
 801470a:	bf08      	it	eq
 801470c:	68ec      	ldreq	r4, [r5, #12]
 801470e:	e7ca      	b.n	80146a6 <__swbuf_r+0x1a>
 8014710:	4621      	mov	r1, r4
 8014712:	4628      	mov	r0, r5
 8014714:	f000 f81e 	bl	8014754 <__swsetup_r>
 8014718:	2800      	cmp	r0, #0
 801471a:	d0cb      	beq.n	80146b4 <__swbuf_r+0x28>
 801471c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014720:	e7ea      	b.n	80146f8 <__swbuf_r+0x6c>
 8014722:	bf00      	nop
 8014724:	080157d4 	.word	0x080157d4
 8014728:	080157f4 	.word	0x080157f4
 801472c:	080157b4 	.word	0x080157b4

08014730 <_write_r>:
 8014730:	b538      	push	{r3, r4, r5, lr}
 8014732:	4d07      	ldr	r5, [pc, #28]	; (8014750 <_write_r+0x20>)
 8014734:	4604      	mov	r4, r0
 8014736:	4608      	mov	r0, r1
 8014738:	4611      	mov	r1, r2
 801473a:	2200      	movs	r2, #0
 801473c:	602a      	str	r2, [r5, #0]
 801473e:	461a      	mov	r2, r3
 8014740:	f7ed f86f 	bl	8001822 <_write>
 8014744:	1c43      	adds	r3, r0, #1
 8014746:	d102      	bne.n	801474e <_write_r+0x1e>
 8014748:	682b      	ldr	r3, [r5, #0]
 801474a:	b103      	cbz	r3, 801474e <_write_r+0x1e>
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	bd38      	pop	{r3, r4, r5, pc}
 8014750:	2000921c 	.word	0x2000921c

08014754 <__swsetup_r>:
 8014754:	4b32      	ldr	r3, [pc, #200]	; (8014820 <__swsetup_r+0xcc>)
 8014756:	b570      	push	{r4, r5, r6, lr}
 8014758:	681d      	ldr	r5, [r3, #0]
 801475a:	4606      	mov	r6, r0
 801475c:	460c      	mov	r4, r1
 801475e:	b125      	cbz	r5, 801476a <__swsetup_r+0x16>
 8014760:	69ab      	ldr	r3, [r5, #24]
 8014762:	b913      	cbnz	r3, 801476a <__swsetup_r+0x16>
 8014764:	4628      	mov	r0, r5
 8014766:	f7ff fa17 	bl	8013b98 <__sinit>
 801476a:	4b2e      	ldr	r3, [pc, #184]	; (8014824 <__swsetup_r+0xd0>)
 801476c:	429c      	cmp	r4, r3
 801476e:	d10f      	bne.n	8014790 <__swsetup_r+0x3c>
 8014770:	686c      	ldr	r4, [r5, #4]
 8014772:	89a3      	ldrh	r3, [r4, #12]
 8014774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014778:	0719      	lsls	r1, r3, #28
 801477a:	d42c      	bmi.n	80147d6 <__swsetup_r+0x82>
 801477c:	06dd      	lsls	r5, r3, #27
 801477e:	d411      	bmi.n	80147a4 <__swsetup_r+0x50>
 8014780:	2309      	movs	r3, #9
 8014782:	6033      	str	r3, [r6, #0]
 8014784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014788:	81a3      	strh	r3, [r4, #12]
 801478a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801478e:	e03e      	b.n	801480e <__swsetup_r+0xba>
 8014790:	4b25      	ldr	r3, [pc, #148]	; (8014828 <__swsetup_r+0xd4>)
 8014792:	429c      	cmp	r4, r3
 8014794:	d101      	bne.n	801479a <__swsetup_r+0x46>
 8014796:	68ac      	ldr	r4, [r5, #8]
 8014798:	e7eb      	b.n	8014772 <__swsetup_r+0x1e>
 801479a:	4b24      	ldr	r3, [pc, #144]	; (801482c <__swsetup_r+0xd8>)
 801479c:	429c      	cmp	r4, r3
 801479e:	bf08      	it	eq
 80147a0:	68ec      	ldreq	r4, [r5, #12]
 80147a2:	e7e6      	b.n	8014772 <__swsetup_r+0x1e>
 80147a4:	0758      	lsls	r0, r3, #29
 80147a6:	d512      	bpl.n	80147ce <__swsetup_r+0x7a>
 80147a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147aa:	b141      	cbz	r1, 80147be <__swsetup_r+0x6a>
 80147ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147b0:	4299      	cmp	r1, r3
 80147b2:	d002      	beq.n	80147ba <__swsetup_r+0x66>
 80147b4:	4630      	mov	r0, r6
 80147b6:	f7fe fec7 	bl	8013548 <_free_r>
 80147ba:	2300      	movs	r3, #0
 80147bc:	6363      	str	r3, [r4, #52]	; 0x34
 80147be:	89a3      	ldrh	r3, [r4, #12]
 80147c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80147c4:	81a3      	strh	r3, [r4, #12]
 80147c6:	2300      	movs	r3, #0
 80147c8:	6063      	str	r3, [r4, #4]
 80147ca:	6923      	ldr	r3, [r4, #16]
 80147cc:	6023      	str	r3, [r4, #0]
 80147ce:	89a3      	ldrh	r3, [r4, #12]
 80147d0:	f043 0308 	orr.w	r3, r3, #8
 80147d4:	81a3      	strh	r3, [r4, #12]
 80147d6:	6923      	ldr	r3, [r4, #16]
 80147d8:	b94b      	cbnz	r3, 80147ee <__swsetup_r+0x9a>
 80147da:	89a3      	ldrh	r3, [r4, #12]
 80147dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147e4:	d003      	beq.n	80147ee <__swsetup_r+0x9a>
 80147e6:	4621      	mov	r1, r4
 80147e8:	4630      	mov	r0, r6
 80147ea:	f000 f933 	bl	8014a54 <__smakebuf_r>
 80147ee:	89a0      	ldrh	r0, [r4, #12]
 80147f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80147f4:	f010 0301 	ands.w	r3, r0, #1
 80147f8:	d00a      	beq.n	8014810 <__swsetup_r+0xbc>
 80147fa:	2300      	movs	r3, #0
 80147fc:	60a3      	str	r3, [r4, #8]
 80147fe:	6963      	ldr	r3, [r4, #20]
 8014800:	425b      	negs	r3, r3
 8014802:	61a3      	str	r3, [r4, #24]
 8014804:	6923      	ldr	r3, [r4, #16]
 8014806:	b943      	cbnz	r3, 801481a <__swsetup_r+0xc6>
 8014808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801480c:	d1ba      	bne.n	8014784 <__swsetup_r+0x30>
 801480e:	bd70      	pop	{r4, r5, r6, pc}
 8014810:	0781      	lsls	r1, r0, #30
 8014812:	bf58      	it	pl
 8014814:	6963      	ldrpl	r3, [r4, #20]
 8014816:	60a3      	str	r3, [r4, #8]
 8014818:	e7f4      	b.n	8014804 <__swsetup_r+0xb0>
 801481a:	2000      	movs	r0, #0
 801481c:	e7f7      	b.n	801480e <__swsetup_r+0xba>
 801481e:	bf00      	nop
 8014820:	20000094 	.word	0x20000094
 8014824:	080157d4 	.word	0x080157d4
 8014828:	080157f4 	.word	0x080157f4
 801482c:	080157b4 	.word	0x080157b4

08014830 <abort>:
 8014830:	b508      	push	{r3, lr}
 8014832:	2006      	movs	r0, #6
 8014834:	f000 f990 	bl	8014b58 <raise>
 8014838:	2001      	movs	r0, #1
 801483a:	f7ec ffcb 	bl	80017d4 <_exit>
	...

08014840 <_close_r>:
 8014840:	b538      	push	{r3, r4, r5, lr}
 8014842:	4d06      	ldr	r5, [pc, #24]	; (801485c <_close_r+0x1c>)
 8014844:	2300      	movs	r3, #0
 8014846:	4604      	mov	r4, r0
 8014848:	4608      	mov	r0, r1
 801484a:	602b      	str	r3, [r5, #0]
 801484c:	f7ed f805 	bl	800185a <_close>
 8014850:	1c43      	adds	r3, r0, #1
 8014852:	d102      	bne.n	801485a <_close_r+0x1a>
 8014854:	682b      	ldr	r3, [r5, #0]
 8014856:	b103      	cbz	r3, 801485a <_close_r+0x1a>
 8014858:	6023      	str	r3, [r4, #0]
 801485a:	bd38      	pop	{r3, r4, r5, pc}
 801485c:	2000921c 	.word	0x2000921c

08014860 <__sflush_r>:
 8014860:	898a      	ldrh	r2, [r1, #12]
 8014862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014866:	4605      	mov	r5, r0
 8014868:	0710      	lsls	r0, r2, #28
 801486a:	460c      	mov	r4, r1
 801486c:	d458      	bmi.n	8014920 <__sflush_r+0xc0>
 801486e:	684b      	ldr	r3, [r1, #4]
 8014870:	2b00      	cmp	r3, #0
 8014872:	dc05      	bgt.n	8014880 <__sflush_r+0x20>
 8014874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014876:	2b00      	cmp	r3, #0
 8014878:	dc02      	bgt.n	8014880 <__sflush_r+0x20>
 801487a:	2000      	movs	r0, #0
 801487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014882:	2e00      	cmp	r6, #0
 8014884:	d0f9      	beq.n	801487a <__sflush_r+0x1a>
 8014886:	2300      	movs	r3, #0
 8014888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801488c:	682f      	ldr	r7, [r5, #0]
 801488e:	602b      	str	r3, [r5, #0]
 8014890:	d032      	beq.n	80148f8 <__sflush_r+0x98>
 8014892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014894:	89a3      	ldrh	r3, [r4, #12]
 8014896:	075a      	lsls	r2, r3, #29
 8014898:	d505      	bpl.n	80148a6 <__sflush_r+0x46>
 801489a:	6863      	ldr	r3, [r4, #4]
 801489c:	1ac0      	subs	r0, r0, r3
 801489e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148a0:	b10b      	cbz	r3, 80148a6 <__sflush_r+0x46>
 80148a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148a4:	1ac0      	subs	r0, r0, r3
 80148a6:	2300      	movs	r3, #0
 80148a8:	4602      	mov	r2, r0
 80148aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148ac:	6a21      	ldr	r1, [r4, #32]
 80148ae:	4628      	mov	r0, r5
 80148b0:	47b0      	blx	r6
 80148b2:	1c43      	adds	r3, r0, #1
 80148b4:	89a3      	ldrh	r3, [r4, #12]
 80148b6:	d106      	bne.n	80148c6 <__sflush_r+0x66>
 80148b8:	6829      	ldr	r1, [r5, #0]
 80148ba:	291d      	cmp	r1, #29
 80148bc:	d82c      	bhi.n	8014918 <__sflush_r+0xb8>
 80148be:	4a2a      	ldr	r2, [pc, #168]	; (8014968 <__sflush_r+0x108>)
 80148c0:	40ca      	lsrs	r2, r1
 80148c2:	07d6      	lsls	r6, r2, #31
 80148c4:	d528      	bpl.n	8014918 <__sflush_r+0xb8>
 80148c6:	2200      	movs	r2, #0
 80148c8:	6062      	str	r2, [r4, #4]
 80148ca:	04d9      	lsls	r1, r3, #19
 80148cc:	6922      	ldr	r2, [r4, #16]
 80148ce:	6022      	str	r2, [r4, #0]
 80148d0:	d504      	bpl.n	80148dc <__sflush_r+0x7c>
 80148d2:	1c42      	adds	r2, r0, #1
 80148d4:	d101      	bne.n	80148da <__sflush_r+0x7a>
 80148d6:	682b      	ldr	r3, [r5, #0]
 80148d8:	b903      	cbnz	r3, 80148dc <__sflush_r+0x7c>
 80148da:	6560      	str	r0, [r4, #84]	; 0x54
 80148dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148de:	602f      	str	r7, [r5, #0]
 80148e0:	2900      	cmp	r1, #0
 80148e2:	d0ca      	beq.n	801487a <__sflush_r+0x1a>
 80148e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148e8:	4299      	cmp	r1, r3
 80148ea:	d002      	beq.n	80148f2 <__sflush_r+0x92>
 80148ec:	4628      	mov	r0, r5
 80148ee:	f7fe fe2b 	bl	8013548 <_free_r>
 80148f2:	2000      	movs	r0, #0
 80148f4:	6360      	str	r0, [r4, #52]	; 0x34
 80148f6:	e7c1      	b.n	801487c <__sflush_r+0x1c>
 80148f8:	6a21      	ldr	r1, [r4, #32]
 80148fa:	2301      	movs	r3, #1
 80148fc:	4628      	mov	r0, r5
 80148fe:	47b0      	blx	r6
 8014900:	1c41      	adds	r1, r0, #1
 8014902:	d1c7      	bne.n	8014894 <__sflush_r+0x34>
 8014904:	682b      	ldr	r3, [r5, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d0c4      	beq.n	8014894 <__sflush_r+0x34>
 801490a:	2b1d      	cmp	r3, #29
 801490c:	d001      	beq.n	8014912 <__sflush_r+0xb2>
 801490e:	2b16      	cmp	r3, #22
 8014910:	d101      	bne.n	8014916 <__sflush_r+0xb6>
 8014912:	602f      	str	r7, [r5, #0]
 8014914:	e7b1      	b.n	801487a <__sflush_r+0x1a>
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801491c:	81a3      	strh	r3, [r4, #12]
 801491e:	e7ad      	b.n	801487c <__sflush_r+0x1c>
 8014920:	690f      	ldr	r7, [r1, #16]
 8014922:	2f00      	cmp	r7, #0
 8014924:	d0a9      	beq.n	801487a <__sflush_r+0x1a>
 8014926:	0793      	lsls	r3, r2, #30
 8014928:	680e      	ldr	r6, [r1, #0]
 801492a:	bf08      	it	eq
 801492c:	694b      	ldreq	r3, [r1, #20]
 801492e:	600f      	str	r7, [r1, #0]
 8014930:	bf18      	it	ne
 8014932:	2300      	movne	r3, #0
 8014934:	eba6 0807 	sub.w	r8, r6, r7
 8014938:	608b      	str	r3, [r1, #8]
 801493a:	f1b8 0f00 	cmp.w	r8, #0
 801493e:	dd9c      	ble.n	801487a <__sflush_r+0x1a>
 8014940:	6a21      	ldr	r1, [r4, #32]
 8014942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014944:	4643      	mov	r3, r8
 8014946:	463a      	mov	r2, r7
 8014948:	4628      	mov	r0, r5
 801494a:	47b0      	blx	r6
 801494c:	2800      	cmp	r0, #0
 801494e:	dc06      	bgt.n	801495e <__sflush_r+0xfe>
 8014950:	89a3      	ldrh	r3, [r4, #12]
 8014952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014956:	81a3      	strh	r3, [r4, #12]
 8014958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801495c:	e78e      	b.n	801487c <__sflush_r+0x1c>
 801495e:	4407      	add	r7, r0
 8014960:	eba8 0800 	sub.w	r8, r8, r0
 8014964:	e7e9      	b.n	801493a <__sflush_r+0xda>
 8014966:	bf00      	nop
 8014968:	20400001 	.word	0x20400001

0801496c <_fflush_r>:
 801496c:	b538      	push	{r3, r4, r5, lr}
 801496e:	690b      	ldr	r3, [r1, #16]
 8014970:	4605      	mov	r5, r0
 8014972:	460c      	mov	r4, r1
 8014974:	b913      	cbnz	r3, 801497c <_fflush_r+0x10>
 8014976:	2500      	movs	r5, #0
 8014978:	4628      	mov	r0, r5
 801497a:	bd38      	pop	{r3, r4, r5, pc}
 801497c:	b118      	cbz	r0, 8014986 <_fflush_r+0x1a>
 801497e:	6983      	ldr	r3, [r0, #24]
 8014980:	b90b      	cbnz	r3, 8014986 <_fflush_r+0x1a>
 8014982:	f7ff f909 	bl	8013b98 <__sinit>
 8014986:	4b14      	ldr	r3, [pc, #80]	; (80149d8 <_fflush_r+0x6c>)
 8014988:	429c      	cmp	r4, r3
 801498a:	d11b      	bne.n	80149c4 <_fflush_r+0x58>
 801498c:	686c      	ldr	r4, [r5, #4]
 801498e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d0ef      	beq.n	8014976 <_fflush_r+0xa>
 8014996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014998:	07d0      	lsls	r0, r2, #31
 801499a:	d404      	bmi.n	80149a6 <_fflush_r+0x3a>
 801499c:	0599      	lsls	r1, r3, #22
 801499e:	d402      	bmi.n	80149a6 <_fflush_r+0x3a>
 80149a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149a2:	f7ff f9a9 	bl	8013cf8 <__retarget_lock_acquire_recursive>
 80149a6:	4628      	mov	r0, r5
 80149a8:	4621      	mov	r1, r4
 80149aa:	f7ff ff59 	bl	8014860 <__sflush_r>
 80149ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149b0:	07da      	lsls	r2, r3, #31
 80149b2:	4605      	mov	r5, r0
 80149b4:	d4e0      	bmi.n	8014978 <_fflush_r+0xc>
 80149b6:	89a3      	ldrh	r3, [r4, #12]
 80149b8:	059b      	lsls	r3, r3, #22
 80149ba:	d4dd      	bmi.n	8014978 <_fflush_r+0xc>
 80149bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149be:	f7ff f99c 	bl	8013cfa <__retarget_lock_release_recursive>
 80149c2:	e7d9      	b.n	8014978 <_fflush_r+0xc>
 80149c4:	4b05      	ldr	r3, [pc, #20]	; (80149dc <_fflush_r+0x70>)
 80149c6:	429c      	cmp	r4, r3
 80149c8:	d101      	bne.n	80149ce <_fflush_r+0x62>
 80149ca:	68ac      	ldr	r4, [r5, #8]
 80149cc:	e7df      	b.n	801498e <_fflush_r+0x22>
 80149ce:	4b04      	ldr	r3, [pc, #16]	; (80149e0 <_fflush_r+0x74>)
 80149d0:	429c      	cmp	r4, r3
 80149d2:	bf08      	it	eq
 80149d4:	68ec      	ldreq	r4, [r5, #12]
 80149d6:	e7da      	b.n	801498e <_fflush_r+0x22>
 80149d8:	080157d4 	.word	0x080157d4
 80149dc:	080157f4 	.word	0x080157f4
 80149e0:	080157b4 	.word	0x080157b4

080149e4 <_lseek_r>:
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4d07      	ldr	r5, [pc, #28]	; (8014a04 <_lseek_r+0x20>)
 80149e8:	4604      	mov	r4, r0
 80149ea:	4608      	mov	r0, r1
 80149ec:	4611      	mov	r1, r2
 80149ee:	2200      	movs	r2, #0
 80149f0:	602a      	str	r2, [r5, #0]
 80149f2:	461a      	mov	r2, r3
 80149f4:	f7ec ff58 	bl	80018a8 <_lseek>
 80149f8:	1c43      	adds	r3, r0, #1
 80149fa:	d102      	bne.n	8014a02 <_lseek_r+0x1e>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b103      	cbz	r3, 8014a02 <_lseek_r+0x1e>
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	2000921c 	.word	0x2000921c

08014a08 <__swhatbuf_r>:
 8014a08:	b570      	push	{r4, r5, r6, lr}
 8014a0a:	460e      	mov	r6, r1
 8014a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a10:	2900      	cmp	r1, #0
 8014a12:	b096      	sub	sp, #88	; 0x58
 8014a14:	4614      	mov	r4, r2
 8014a16:	461d      	mov	r5, r3
 8014a18:	da08      	bge.n	8014a2c <__swhatbuf_r+0x24>
 8014a1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	602a      	str	r2, [r5, #0]
 8014a22:	061a      	lsls	r2, r3, #24
 8014a24:	d410      	bmi.n	8014a48 <__swhatbuf_r+0x40>
 8014a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a2a:	e00e      	b.n	8014a4a <__swhatbuf_r+0x42>
 8014a2c:	466a      	mov	r2, sp
 8014a2e:	f000 f8af 	bl	8014b90 <_fstat_r>
 8014a32:	2800      	cmp	r0, #0
 8014a34:	dbf1      	blt.n	8014a1a <__swhatbuf_r+0x12>
 8014a36:	9a01      	ldr	r2, [sp, #4]
 8014a38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a40:	425a      	negs	r2, r3
 8014a42:	415a      	adcs	r2, r3
 8014a44:	602a      	str	r2, [r5, #0]
 8014a46:	e7ee      	b.n	8014a26 <__swhatbuf_r+0x1e>
 8014a48:	2340      	movs	r3, #64	; 0x40
 8014a4a:	2000      	movs	r0, #0
 8014a4c:	6023      	str	r3, [r4, #0]
 8014a4e:	b016      	add	sp, #88	; 0x58
 8014a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08014a54 <__smakebuf_r>:
 8014a54:	898b      	ldrh	r3, [r1, #12]
 8014a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a58:	079d      	lsls	r5, r3, #30
 8014a5a:	4606      	mov	r6, r0
 8014a5c:	460c      	mov	r4, r1
 8014a5e:	d507      	bpl.n	8014a70 <__smakebuf_r+0x1c>
 8014a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a64:	6023      	str	r3, [r4, #0]
 8014a66:	6123      	str	r3, [r4, #16]
 8014a68:	2301      	movs	r3, #1
 8014a6a:	6163      	str	r3, [r4, #20]
 8014a6c:	b002      	add	sp, #8
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}
 8014a70:	ab01      	add	r3, sp, #4
 8014a72:	466a      	mov	r2, sp
 8014a74:	f7ff ffc8 	bl	8014a08 <__swhatbuf_r>
 8014a78:	9900      	ldr	r1, [sp, #0]
 8014a7a:	4605      	mov	r5, r0
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f7fe fdcf 	bl	8013620 <_malloc_r>
 8014a82:	b948      	cbnz	r0, 8014a98 <__smakebuf_r+0x44>
 8014a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a88:	059a      	lsls	r2, r3, #22
 8014a8a:	d4ef      	bmi.n	8014a6c <__smakebuf_r+0x18>
 8014a8c:	f023 0303 	bic.w	r3, r3, #3
 8014a90:	f043 0302 	orr.w	r3, r3, #2
 8014a94:	81a3      	strh	r3, [r4, #12]
 8014a96:	e7e3      	b.n	8014a60 <__smakebuf_r+0xc>
 8014a98:	4b0d      	ldr	r3, [pc, #52]	; (8014ad0 <__smakebuf_r+0x7c>)
 8014a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a9c:	89a3      	ldrh	r3, [r4, #12]
 8014a9e:	6020      	str	r0, [r4, #0]
 8014aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aa4:	81a3      	strh	r3, [r4, #12]
 8014aa6:	9b00      	ldr	r3, [sp, #0]
 8014aa8:	6163      	str	r3, [r4, #20]
 8014aaa:	9b01      	ldr	r3, [sp, #4]
 8014aac:	6120      	str	r0, [r4, #16]
 8014aae:	b15b      	cbz	r3, 8014ac8 <__smakebuf_r+0x74>
 8014ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	f000 f87d 	bl	8014bb4 <_isatty_r>
 8014aba:	b128      	cbz	r0, 8014ac8 <__smakebuf_r+0x74>
 8014abc:	89a3      	ldrh	r3, [r4, #12]
 8014abe:	f023 0303 	bic.w	r3, r3, #3
 8014ac2:	f043 0301 	orr.w	r3, r3, #1
 8014ac6:	81a3      	strh	r3, [r4, #12]
 8014ac8:	89a0      	ldrh	r0, [r4, #12]
 8014aca:	4305      	orrs	r5, r0
 8014acc:	81a5      	strh	r5, [r4, #12]
 8014ace:	e7cd      	b.n	8014a6c <__smakebuf_r+0x18>
 8014ad0:	08013b31 	.word	0x08013b31

08014ad4 <_malloc_usable_size_r>:
 8014ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ad8:	1f18      	subs	r0, r3, #4
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	bfbc      	itt	lt
 8014ade:	580b      	ldrlt	r3, [r1, r0]
 8014ae0:	18c0      	addlt	r0, r0, r3
 8014ae2:	4770      	bx	lr

08014ae4 <_read_r>:
 8014ae4:	b538      	push	{r3, r4, r5, lr}
 8014ae6:	4d07      	ldr	r5, [pc, #28]	; (8014b04 <_read_r+0x20>)
 8014ae8:	4604      	mov	r4, r0
 8014aea:	4608      	mov	r0, r1
 8014aec:	4611      	mov	r1, r2
 8014aee:	2200      	movs	r2, #0
 8014af0:	602a      	str	r2, [r5, #0]
 8014af2:	461a      	mov	r2, r3
 8014af4:	f7ec fe78 	bl	80017e8 <_read>
 8014af8:	1c43      	adds	r3, r0, #1
 8014afa:	d102      	bne.n	8014b02 <_read_r+0x1e>
 8014afc:	682b      	ldr	r3, [r5, #0]
 8014afe:	b103      	cbz	r3, 8014b02 <_read_r+0x1e>
 8014b00:	6023      	str	r3, [r4, #0]
 8014b02:	bd38      	pop	{r3, r4, r5, pc}
 8014b04:	2000921c 	.word	0x2000921c

08014b08 <_raise_r>:
 8014b08:	291f      	cmp	r1, #31
 8014b0a:	b538      	push	{r3, r4, r5, lr}
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	460d      	mov	r5, r1
 8014b10:	d904      	bls.n	8014b1c <_raise_r+0x14>
 8014b12:	2316      	movs	r3, #22
 8014b14:	6003      	str	r3, [r0, #0]
 8014b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b1a:	bd38      	pop	{r3, r4, r5, pc}
 8014b1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b1e:	b112      	cbz	r2, 8014b26 <_raise_r+0x1e>
 8014b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b24:	b94b      	cbnz	r3, 8014b3a <_raise_r+0x32>
 8014b26:	4620      	mov	r0, r4
 8014b28:	f000 f830 	bl	8014b8c <_getpid_r>
 8014b2c:	462a      	mov	r2, r5
 8014b2e:	4601      	mov	r1, r0
 8014b30:	4620      	mov	r0, r4
 8014b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b36:	f000 b817 	b.w	8014b68 <_kill_r>
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	d00a      	beq.n	8014b54 <_raise_r+0x4c>
 8014b3e:	1c59      	adds	r1, r3, #1
 8014b40:	d103      	bne.n	8014b4a <_raise_r+0x42>
 8014b42:	2316      	movs	r3, #22
 8014b44:	6003      	str	r3, [r0, #0]
 8014b46:	2001      	movs	r0, #1
 8014b48:	e7e7      	b.n	8014b1a <_raise_r+0x12>
 8014b4a:	2400      	movs	r4, #0
 8014b4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014b50:	4628      	mov	r0, r5
 8014b52:	4798      	blx	r3
 8014b54:	2000      	movs	r0, #0
 8014b56:	e7e0      	b.n	8014b1a <_raise_r+0x12>

08014b58 <raise>:
 8014b58:	4b02      	ldr	r3, [pc, #8]	; (8014b64 <raise+0xc>)
 8014b5a:	4601      	mov	r1, r0
 8014b5c:	6818      	ldr	r0, [r3, #0]
 8014b5e:	f7ff bfd3 	b.w	8014b08 <_raise_r>
 8014b62:	bf00      	nop
 8014b64:	20000094 	.word	0x20000094

08014b68 <_kill_r>:
 8014b68:	b538      	push	{r3, r4, r5, lr}
 8014b6a:	4d07      	ldr	r5, [pc, #28]	; (8014b88 <_kill_r+0x20>)
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	4604      	mov	r4, r0
 8014b70:	4608      	mov	r0, r1
 8014b72:	4611      	mov	r1, r2
 8014b74:	602b      	str	r3, [r5, #0]
 8014b76:	f7ec fe1d 	bl	80017b4 <_kill>
 8014b7a:	1c43      	adds	r3, r0, #1
 8014b7c:	d102      	bne.n	8014b84 <_kill_r+0x1c>
 8014b7e:	682b      	ldr	r3, [r5, #0]
 8014b80:	b103      	cbz	r3, 8014b84 <_kill_r+0x1c>
 8014b82:	6023      	str	r3, [r4, #0]
 8014b84:	bd38      	pop	{r3, r4, r5, pc}
 8014b86:	bf00      	nop
 8014b88:	2000921c 	.word	0x2000921c

08014b8c <_getpid_r>:
 8014b8c:	f7ec be0a 	b.w	80017a4 <_getpid>

08014b90 <_fstat_r>:
 8014b90:	b538      	push	{r3, r4, r5, lr}
 8014b92:	4d07      	ldr	r5, [pc, #28]	; (8014bb0 <_fstat_r+0x20>)
 8014b94:	2300      	movs	r3, #0
 8014b96:	4604      	mov	r4, r0
 8014b98:	4608      	mov	r0, r1
 8014b9a:	4611      	mov	r1, r2
 8014b9c:	602b      	str	r3, [r5, #0]
 8014b9e:	f7ec fe68 	bl	8001872 <_fstat>
 8014ba2:	1c43      	adds	r3, r0, #1
 8014ba4:	d102      	bne.n	8014bac <_fstat_r+0x1c>
 8014ba6:	682b      	ldr	r3, [r5, #0]
 8014ba8:	b103      	cbz	r3, 8014bac <_fstat_r+0x1c>
 8014baa:	6023      	str	r3, [r4, #0]
 8014bac:	bd38      	pop	{r3, r4, r5, pc}
 8014bae:	bf00      	nop
 8014bb0:	2000921c 	.word	0x2000921c

08014bb4 <_isatty_r>:
 8014bb4:	b538      	push	{r3, r4, r5, lr}
 8014bb6:	4d06      	ldr	r5, [pc, #24]	; (8014bd0 <_isatty_r+0x1c>)
 8014bb8:	2300      	movs	r3, #0
 8014bba:	4604      	mov	r4, r0
 8014bbc:	4608      	mov	r0, r1
 8014bbe:	602b      	str	r3, [r5, #0]
 8014bc0:	f7ec fe67 	bl	8001892 <_isatty>
 8014bc4:	1c43      	adds	r3, r0, #1
 8014bc6:	d102      	bne.n	8014bce <_isatty_r+0x1a>
 8014bc8:	682b      	ldr	r3, [r5, #0]
 8014bca:	b103      	cbz	r3, 8014bce <_isatty_r+0x1a>
 8014bcc:	6023      	str	r3, [r4, #0]
 8014bce:	bd38      	pop	{r3, r4, r5, pc}
 8014bd0:	2000921c 	.word	0x2000921c

08014bd4 <_init>:
 8014bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bd6:	bf00      	nop
 8014bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bda:	bc08      	pop	{r3}
 8014bdc:	469e      	mov	lr, r3
 8014bde:	4770      	bx	lr

08014be0 <_fini>:
 8014be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be2:	bf00      	nop
 8014be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014be6:	bc08      	pop	{r3}
 8014be8:	469e      	mov	lr, r3
 8014bea:	4770      	bx	lr
