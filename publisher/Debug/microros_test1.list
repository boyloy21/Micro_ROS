
microros_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  08016ce0  08016ce0  00026ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b38  08017b38  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08017b38  08017b38  00027b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b40  08017b40  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b40  08017b40  00027b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b44  08017b44  00027b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08017b48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010ab0  20000108  08017c4c  00030108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010bb8  08017c4c  00030bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222ef  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d26  00000000  00000000  00052423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  00057150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001968  00000000  00000000  00058cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291d9  00000000  00000000  0005a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e07  00000000  00000000  000837f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8868  00000000  00000000  000a6600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  0018ee68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  0018ef14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000108 	.word	0x20000108
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016cc8 	.word	0x08016cc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000010c 	.word	0x2000010c
 800020c:	08016cc8 	.word	0x08016cc8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b3a:	f000 b9bf 	b.w	8000ebc <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f000 ffbc 	bl	8001e4c <bno055_writeData>
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	203d      	movs	r0, #61	; 0x3d
 8000eec:	f000 ffae 	bl	8001e4c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ef6:	2013      	movs	r0, #19
 8000ef8:	f000 ff9c 	bl	8001e34 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000efc:	e002      	b.n	8000f04 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f000 ff98 	bl	8001e34 <bno055_delay>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff ffe3 	bl	8000edc <bno055_setOperationMode>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f1e:	200c      	movs	r0, #12
 8000f20:	f7ff ffdc 	bl	8000edc <bno055_setOperationMode>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	203f      	movs	r0, #63	; 0x3f
 8000f30:	f000 ff8c 	bl	8001e4c <bno055_writeData>
  bno055_delay(700);
 8000f34:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f38:	f000 ff7c 	bl	8001e34 <bno055_delay>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f46:	f7ff ffef 	bl	8000f28 <bno055_reset>

  uint8_t id = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	2201      	movs	r2, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	2000      	movs	r0, #0
 8000f56:	f001 f865 	bl	8002024 <bno055_readData>
  if (id != BNO055_ID) {
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2ba0      	cmp	r3, #160	; 0xa0
 8000f5e:	d004      	beq.n	8000f6a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <bno055_setup+0x4c>)
 8000f66:	f014 fbd3 	bl	8015710 <iprintf>
  }
  bno055_setPage(0);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ffa8 	bl	8000ec0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	203f      	movs	r0, #63	; 0x3f
 8000f74:	f000 ff6a 	bl	8001e4c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f78:	f7ff ffc8 	bl	8000f0c <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f000 ff59 	bl	8001e34 <bno055_delay>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08016ce0 	.word	0x08016ce0

08000f90 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f94:	b09e      	sub	sp, #120	; 0x78
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ff8e 	bl	8000ec0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d108      	bne.n	8000fbe <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000fac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f834 	bl	8002024 <bno055_readData>
 8000fbc:	e007      	b.n	8000fce <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000fbe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f82b 	bl	8002024 <bno055_readData>

  double scale = 1;
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b8b      	ldr	r3, [pc, #556]	; (8001200 <bno055_getVector+0x270>)
 8000fd4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fdc:	2b0e      	cmp	r3, #14
 8000fde:	d109      	bne.n	8000ff4 <bno055_getVector+0x64>
    scale = magScale;
 8000fe0:	4b88      	ldr	r3, [pc, #544]	; (8001204 <bno055_getVector+0x274>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fabd 	bl	8000564 <__aeabi_ui2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000ff2:	e03e      	b.n	8001072 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d007      	beq.n	800100c <bno055_getVector+0x7c>
 8000ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001000:	2b28      	cmp	r3, #40	; 0x28
 8001002:	d003      	beq.n	800100c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001008:	2b2e      	cmp	r3, #46	; 0x2e
 800100a:	d109      	bne.n	8001020 <bno055_getVector+0x90>
    scale = accelScale;
 800100c:	4b7e      	ldr	r3, [pc, #504]	; (8001208 <bno055_getVector+0x278>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff faa7 	bl	8000564 <__aeabi_ui2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800101e:	e028      	b.n	8001072 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001024:	2b14      	cmp	r3, #20
 8001026:	d109      	bne.n	800103c <bno055_getVector+0xac>
    scale = angularRateScale;
 8001028:	4b78      	ldr	r3, [pc, #480]	; (800120c <bno055_getVector+0x27c>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa99 	bl	8000564 <__aeabi_ui2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800103a:	e01a      	b.n	8001072 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001040:	2b1a      	cmp	r3, #26
 8001042:	d109      	bne.n	8001058 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001044:	4b72      	ldr	r3, [pc, #456]	; (8001210 <bno055_getVector+0x280>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa8b 	bl	8000564 <__aeabi_ui2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001056:	e00c      	b.n	8001072 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800105c:	2b20      	cmp	r3, #32
 800105e:	d108      	bne.n	8001072 <bno055_getVector+0xe2>
    scale = quaScale;
 8001060:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <bno055_getVector+0x284>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa7d 	bl	8000564 <__aeabi_ui2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2220      	movs	r2, #32
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f014 fa4a 	bl	8015514 <memset>
    if (vec == BNO055_VECTOR_QUATERNION) {
 8001080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001084:	2b20      	cmp	r3, #32
 8001086:	d150      	bne.n	800112a <bno055_getVector+0x19a>
      xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001088:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa72 	bl	8000584 <__aeabi_i2d>
 80010a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010a4:	f7ff fc02 	bl	80008ac <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80010b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa5e 	bl	8000584 <__aeabi_i2d>
 80010c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010cc:	f7ff fbee 	bl	80008ac <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa4a 	bl	8000584 <__aeabi_i2d>
 80010f0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010f4:	f7ff fbda 	bl	80008ac <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001100:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa36 	bl	8000584 <__aeabi_i2d>
 8001118:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800111c:	f7ff fbc6 	bl	80008ac <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001128:	e03b      	b.n	80011a2 <bno055_getVector+0x212>
    } else {
      xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800112a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa21 	bl	8000584 <__aeabi_i2d>
 8001142:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001146:	f7ff fbb1 	bl	80008ac <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001152:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21b      	sxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fa0d 	bl	8000584 <__aeabi_i2d>
 800116a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800116e:	f7ff fb9d 	bl	80008ac <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800117a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21b      	sxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9f9 	bl	8000584 <__aeabi_i2d>
 8001192:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001196:	f7ff fb89 	bl	80008ac <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return xyz;
 80011a2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80011a6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80011ba:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80011be:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011c6:	ec49 8b14 	vmov	d4, r8, r9
 80011ca:	ec45 4b15 	vmov	d5, r4, r5
 80011ce:	ec41 0b16 	vmov	d6, r0, r1
 80011d2:	ec43 2b17 	vmov	d7, r2, r3
  }
 80011d6:	eeb0 0a44 	vmov.f32	s0, s8
 80011da:	eef0 0a64 	vmov.f32	s1, s9
 80011de:	eeb0 1a45 	vmov.f32	s2, s10
 80011e2:	eef0 1a65 	vmov.f32	s3, s11
 80011e6:	eeb0 2a46 	vmov.f32	s4, s12
 80011ea:	eef0 2a66 	vmov.f32	s5, s13
 80011ee:	eeb0 3a47 	vmov.f32	s6, s14
 80011f2:	eef0 3a67 	vmov.f32	s7, s15
 80011f6:	3778      	adds	r7, #120	; 0x78
 80011f8:	46bd      	mov	sp, r7
 80011fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011fe:	bf00      	nop
 8001200:	3ff00000 	.word	0x3ff00000
 8001204:	20000006 	.word	0x20000006
 8001208:	20000000 	.word	0x20000000
 800120c:	20000002 	.word	0x20000002
 8001210:	20000004 	.word	0x20000004
 8001214:	20000008 	.word	0x20000008

08001218 <bno055_getVectorEuler>:
    return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
  }
  bno055_vector_t bno055_getVectorGyroscope() {
    return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
  }
  bno055_vector_t bno055_getVectorEuler() {
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_EULER);
 8001220:	201a      	movs	r0, #26
 8001222:	f7ff feb5 	bl	8000f90 <bno055_getVector>
 8001226:	eeb0 4a40 	vmov.f32	s8, s0
 800122a:	eef0 4a60 	vmov.f32	s9, s1
 800122e:	eeb0 5a41 	vmov.f32	s10, s2
 8001232:	eef0 5a61 	vmov.f32	s11, s3
 8001236:	eeb0 6a42 	vmov.f32	s12, s4
 800123a:	eef0 6a62 	vmov.f32	s13, s5
 800123e:	eeb0 7a43 	vmov.f32	s14, s6
 8001242:	eef0 7a63 	vmov.f32	s15, s7
 8001246:	ed87 4b08 	vstr	d4, [r7, #32]
 800124a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800124e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001252:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001256:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800125a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800125e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001262:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001266:	ec49 8b14 	vmov	d4, r8, r9
 800126a:	ec45 4b15 	vmov	d5, r4, r5
 800126e:	ec41 0b16 	vmov	d6, r0, r1
 8001272:	ec43 2b17 	vmov	d7, r2, r3
  }
 8001276:	eeb0 0a44 	vmov.f32	s0, s8
 800127a:	eef0 0a64 	vmov.f32	s1, s9
 800127e:	eeb0 1a45 	vmov.f32	s2, s10
 8001282:	eef0 1a65 	vmov.f32	s3, s11
 8001286:	eeb0 2a46 	vmov.f32	s4, s12
 800128a:	eef0 2a66 	vmov.f32	s5, s13
 800128e:	eeb0 3a47 	vmov.f32	s6, s14
 8001292:	eef0 3a67 	vmov.f32	s7, s15
 8001296:	3740      	adds	r7, #64	; 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800129e <bno055_getVectorQuaternion>:
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
  }
  bno055_vector_t bno055_getVectorGravity() {
    return bno055_getVector(BNO055_VECTOR_GRAVITY);
  }
  bno055_vector_t bno055_getVectorQuaternion() {
 800129e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a2:	b090      	sub	sp, #64	; 0x40
 80012a4:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80012a6:	2020      	movs	r0, #32
 80012a8:	f7ff fe72 	bl	8000f90 <bno055_getVector>
 80012ac:	eeb0 4a40 	vmov.f32	s8, s0
 80012b0:	eef0 4a60 	vmov.f32	s9, s1
 80012b4:	eeb0 5a41 	vmov.f32	s10, s2
 80012b8:	eef0 5a61 	vmov.f32	s11, s3
 80012bc:	eeb0 6a42 	vmov.f32	s12, s4
 80012c0:	eef0 6a62 	vmov.f32	s13, s5
 80012c4:	eeb0 7a43 	vmov.f32	s14, s6
 80012c8:	eef0 7a63 	vmov.f32	s15, s7
 80012cc:	ed87 4b08 	vstr	d4, [r7, #32]
 80012d0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80012d4:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80012d8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80012dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012e0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80012e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012ec:	ec49 8b14 	vmov	d4, r8, r9
 80012f0:	ec45 4b15 	vmov	d5, r4, r5
 80012f4:	ec41 0b16 	vmov	d6, r0, r1
 80012f8:	ec43 2b17 	vmov	d7, r2, r3
  }
 80012fc:	eeb0 0a44 	vmov.f32	s0, s8
 8001300:	eef0 0a64 	vmov.f32	s1, s9
 8001304:	eeb0 1a45 	vmov.f32	s2, s10
 8001308:	eef0 1a65 	vmov.f32	s3, s11
 800130c:	eeb0 2a46 	vmov.f32	s4, s12
 8001310:	eef0 2a66 	vmov.f32	s5, s13
 8001314:	eeb0 3a47 	vmov.f32	s6, s14
 8001318:	eef0 3a67 	vmov.f32	s7, s15
 800131c:	3740      	adds	r7, #64	; 0x40
 800131e:	46bd      	mov	sp, r7
 8001320:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001324 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001330:	f007 f92a 	bl	8008588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001334:	4b58      	ldr	r3, [pc, #352]	; (8001498 <pvPortMallocMicroROS+0x174>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800133c:	f000 f980 	bl	8001640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <pvPortMallocMicroROS+0x178>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 808e 	bne.w	800146a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01d      	beq.n	8001390 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001354:	2208      	movs	r2, #8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	2b00      	cmp	r3, #0
 8001364:	d014      	beq.n	8001390 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f023 0307 	bic.w	r3, r3, #7
 800136c:	3308      	adds	r3, #8
 800136e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800138c:	bf00      	nop
 800138e:	e7fe      	b.n	800138e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d069      	beq.n	800146a <pvPortMallocMicroROS+0x146>
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <pvPortMallocMicroROS+0x17c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	d864      	bhi.n	800146a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <pvPortMallocMicroROS+0x180>)
 80013a2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <pvPortMallocMicroROS+0x180>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013aa:	e004      	b.n	80013b6 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d903      	bls.n	80013c8 <pvPortMallocMicroROS+0xa4>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f1      	bne.n	80013ac <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <pvPortMallocMicroROS+0x174>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d04b      	beq.n	800146a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2208      	movs	r2, #8
 80013d8:	4413      	add	r3, r2
 80013da:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1ad2      	subs	r2, r2, r3
 80013ec:	2308      	movs	r3, #8
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d91f      	bls.n	8001434 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00a      	beq.n	800141c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140a:	f383 8811 	msr	BASEPRI, r3
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f3bf 8f4f 	dsb	sy
 8001416:	613b      	str	r3, [r7, #16]
}
 8001418:	bf00      	nop
 800141a:	e7fe      	b.n	800141a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800142e:	69b8      	ldr	r0, [r7, #24]
 8001430:	f000 f968 	bl	8001704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <pvPortMallocMicroROS+0x17c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <pvPortMallocMicroROS+0x17c>)
 8001440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <pvPortMallocMicroROS+0x17c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <pvPortMallocMicroROS+0x184>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d203      	bcs.n	8001456 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <pvPortMallocMicroROS+0x17c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <pvPortMallocMicroROS+0x184>)
 8001454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <pvPortMallocMicroROS+0x178>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	431a      	orrs	r2, r3
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800146a:	f007 f89b 	bl	80085a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00a      	beq.n	800148e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147c:	f383 8811 	msr	BASEPRI, r3
 8001480:	f3bf 8f6f 	isb	sy
 8001484:	f3bf 8f4f 	dsb	sy
 8001488:	60fb      	str	r3, [r7, #12]
}
 800148a:	bf00      	nop
 800148c:	e7fe      	b.n	800148c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800148e:	69fb      	ldr	r3, [r7, #28]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20003d2c 	.word	0x20003d2c
 800149c:	20003d38 	.word	0x20003d38
 80014a0:	20003d30 	.word	0x20003d30
 80014a4:	20003d24 	.word	0x20003d24
 80014a8:	20003d34 	.word	0x20003d34

080014ac <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d048      	beq.n	8001550 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80014be:	2308      	movs	r3, #8
 80014c0:	425b      	negs	r3, r3
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <vPortFreeMicroROS+0xac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10a      	bne.n	80014f0 <vPortFreeMicroROS+0x44>
	__asm volatile
 80014da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
 80014ea:	60fb      	str	r3, [r7, #12]
}
 80014ec:	bf00      	nop
 80014ee:	e7fe      	b.n	80014ee <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00a      	beq.n	800150e <vPortFreeMicroROS+0x62>
	__asm volatile
 80014f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fc:	f383 8811 	msr	BASEPRI, r3
 8001500:	f3bf 8f6f 	isb	sy
 8001504:	f3bf 8f4f 	dsb	sy
 8001508:	60bb      	str	r3, [r7, #8]
}
 800150a:	bf00      	nop
 800150c:	e7fe      	b.n	800150c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <vPortFreeMicroROS+0xac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d019      	beq.n	8001550 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d115      	bne.n	8001550 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <vPortFreeMicroROS+0xac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001534:	f007 f828 	bl	8008588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <vPortFreeMicroROS+0xb0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4413      	add	r3, r2
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <vPortFreeMicroROS+0xb0>)
 8001544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001546:	6938      	ldr	r0, [r7, #16]
 8001548:	f000 f8dc 	bl	8001704 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800154c:	f007 f82a 	bl	80085a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20003d38 	.word	0x20003d38
 800155c:	20003d30 	.word	0x20003d30

08001560 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800156c:	2308      	movs	r3, #8
 800156e:	425b      	negs	r3, r3
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4413      	add	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <getBlockSize+0x38>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	43db      	mvns	r3, r3
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]

	return count;
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	4618      	mov	r0, r3
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20003d38 	.word	0x20003d38

0800159c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80015a6:	f006 ffef 	bl	8008588 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f7ff feba 	bl	8001324 <pvPortMallocMicroROS>
 80015b0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d017      	beq.n	80015e8 <pvPortReallocMicroROS+0x4c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d014      	beq.n	80015e8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffce 	bl	8001560 <getBlockSize>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2208      	movs	r2, #8
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d201      	bcs.n	80015d8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f013 ff71 	bl	80154c4 <memcpy>

		vPortFreeMicroROS(pv);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff62 	bl	80014ac <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80015e8:	f006 ffdc 	bl	80085a4 <xTaskResumeAll>

	return newmem;
 80015ec:	68bb      	ldr	r3, [r7, #8]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001600:	f006 ffc2 	bl	8008588 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff fe88 	bl	8001324 <pvPortMallocMicroROS>
 8001614:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	613b      	str	r3, [r7, #16]

  	while(count--)
 800161a:	e004      	b.n	8001626 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	613a      	str	r2, [r7, #16]
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	617a      	str	r2, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f5      	bne.n	800161c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001630:	f006 ffb8 	bl	80085a4 <xTaskResumeAll>
  	return mem;
 8001634:	68fb      	ldr	r3, [r7, #12]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001646:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800164a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <prvHeapInit+0xac>)
 800164e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3307      	adds	r3, #7
 800165e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f023 0307 	bic.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <prvHeapInit+0xac>)
 8001670:	4413      	add	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <prvHeapInit+0xb0>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <prvHeapInit+0xb0>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800168c:	2208      	movs	r2, #8
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 0307 	bic.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <prvHeapInit+0xb4>)
 80016a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <prvHeapInit+0xb4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <prvHeapInit+0xb4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	1ad2      	subs	r2, r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <prvHeapInit+0xb4>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <prvHeapInit+0xb8>)
 80016ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <prvHeapInit+0xbc>)
 80016d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <prvHeapInit+0xc0>)
 80016da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016de:	601a      	str	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000124 	.word	0x20000124
 80016f0:	20003d24 	.word	0x20003d24
 80016f4:	20003d2c 	.word	0x20003d2c
 80016f8:	20003d34 	.word	0x20003d34
 80016fc:	20003d30 	.word	0x20003d30
 8001700:	20003d38 	.word	0x20003d38

08001704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <prvInsertBlockIntoFreeList+0xac>)
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e002      	b.n	8001718 <prvInsertBlockIntoFreeList+0x14>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d8f7      	bhi.n	8001712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d108      	bne.n	8001746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	441a      	add	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	441a      	add	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d118      	bne.n	800178c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d00d      	beq.n	8001782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e008      	b.n	8001794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e003      	b.n	8001794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	d002      	beq.n	80017a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20003d24 	.word	0x20003d24
 80017b4:	20003d2c 	.word	0x20003d2c

080017b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_DMA_Init+0x4c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <MX_DMA_Init+0x4c>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <MX_DMA_Init+0x4c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	2010      	movs	r0, #16
 80017e0:	f001 faba 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017e4:	2010      	movs	r0, #16
 80017e6:	f001 fad3 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2105      	movs	r1, #5
 80017ee:	2011      	movs	r0, #17
 80017f0:	f001 fab2 	bl	8002d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017f4:	2011      	movs	r0, #17
 80017f6:	f001 facb 	bl	8002d90 <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001816:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <cubemx_transport_open+0x28>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f004 fbc2 	bl	8005fa8 <HAL_UART_Receive_DMA>
    return true;
 8001824:	2301      	movs	r3, #1
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20003d3c 	.word	0x20003d3c

08001834 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001842:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f004 fbdf 	bl	8006008 <HAL_UART_DMAStop>
    return true;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001868:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	d11c      	bne.n	80018b0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	b29b      	uxth	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f004 fb14 	bl	8005eac <HAL_UART_Transmit_DMA>
 8001884:	4603      	mov	r3, r0
 8001886:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001888:	e002      	b.n	8001890 <cubemx_transport_write+0x3c>
            osDelay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f005 fe50 	bl	8007530 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001890:	7cfb      	ldrb	r3, [r7, #19]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <cubemx_transport_write+0x4e>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d1f3      	bne.n	800188a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <cubemx_transport_write+0x58>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	e002      	b.n	80018b2 <cubemx_transport_write+0x5e>
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80018b0:	2300      	movs	r3, #0
    }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80018d0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d6:	b672      	cpsid	i
}
 80018d8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <cubemx_transport_read+0x9c>)
 80018e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018ea:	b662      	cpsie	i
}
 80018ec:	bf00      	nop
        __enable_irq();
        ms_used++;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f005 fe1b 	bl	8007530 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <cubemx_transport_read+0xa0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <cubemx_transport_read+0x9c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d103      	bne.n	800190e <cubemx_transport_read+0x52>
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbe3      	blt.n	80018d6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001912:	e011      	b.n	8001938 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <cubemx_transport_read+0xa0>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	440b      	add	r3, r1
 800191e:	4910      	ldr	r1, [pc, #64]	; (8001960 <cubemx_transport_read+0xa4>)
 8001920:	5c8a      	ldrb	r2, [r1, r2]
 8001922:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <cubemx_transport_read+0xa0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <cubemx_transport_read+0xa0>)
 8001930:	6013      	str	r3, [r2, #0]
        wrote++;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	3301      	adds	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <cubemx_transport_read+0xa0>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <cubemx_transport_read+0x9c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d003      	beq.n	800194c <cubemx_transport_read+0x90>
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3e3      	bcc.n	8001914 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800194c:	69bb      	ldr	r3, [r7, #24]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20004540 	.word	0x20004540
 800195c:	2000453c 	.word	0x2000453c
 8001960:	20003d3c 	.word	0x20003d3c
 8001964:	00000000 	.word	0x00000000

08001968 <twist_publish_callback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void twist_publish_callback(rcl_timer_t * timer, int64_t last_call_time){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	e9c7 2300 	strd	r2, r3, [r7]
	(void) last_call_time;
	if (timer != NULL){
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 809b 	beq.w	8001ab2 <twist_publish_callback+0x14a>
		//IMU calculate vector Euler(position)
		v = bno055_getVectorEuler();
 800197c:	f7ff fc4c 	bl	8001218 <bno055_getVectorEuler>
 8001980:	eeb0 4a40 	vmov.f32	s8, s0
 8001984:	eef0 4a60 	vmov.f32	s9, s1
 8001988:	eeb0 5a41 	vmov.f32	s10, s2
 800198c:	eef0 5a61 	vmov.f32	s11, s3
 8001990:	eeb0 6a42 	vmov.f32	s12, s4
 8001994:	eef0 6a62 	vmov.f32	s13, s5
 8001998:	eeb0 7a43 	vmov.f32	s14, s6
 800199c:	eef0 7a63 	vmov.f32	s15, s7
 80019a0:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <twist_publish_callback+0x160>)
 80019a2:	ed83 4b00 	vstr	d4, [r3]
 80019a6:	ed83 5b02 	vstr	d5, [r3, #8]
 80019aa:	ed83 6b04 	vstr	d6, [r3, #16]
 80019ae:	ed83 7b06 	vstr	d7, [r3, #24]
		yaw = v.x;
 80019b2:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <twist_publish_callback+0x160>)
 80019b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f85e 	bl	8000a7c <__aeabi_d2f>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a42      	ldr	r2, [pc, #264]	; (8001acc <twist_publish_callback+0x164>)
 80019c4:	6013      	str	r3, [r2, #0]
		roll = v.y;
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <twist_publish_callback+0x160>)
 80019c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f854 	bl	8000a7c <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <twist_publish_callback+0x168>)
 80019d8:	6013      	str	r3, [r2, #0]
		pitch = v.z;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <twist_publish_callback+0x160>)
 80019dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f84a 	bl	8000a7c <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <twist_publish_callback+0x16c>)
 80019ec:	6013      	str	r3, [r2, #0]
		radian_heading = (yaw * pi) / 180;
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <twist_publish_callback+0x164>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdd8 	bl	80005a8 <__aeabi_f2d>
 80019f8:	a331      	add	r3, pc, #196	; (adr r3, 8001ac0 <twist_publish_callback+0x158>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe2b 	bl	8000658 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <twist_publish_callback+0x170>)
 8001a10:	f7fe ff4c 	bl	80008ac <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f82e 	bl	8000a7c <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a2e      	ldr	r2, [pc, #184]	; (8001adc <twist_publish_callback+0x174>)
 8001a24:	6013      	str	r3, [r2, #0]
		//IMU Calculate Vector Quaternion (speed)
		V = bno055_getVectorQuaternion();
 8001a26:	f7ff fc3a 	bl	800129e <bno055_getVectorQuaternion>
 8001a2a:	eeb0 4a40 	vmov.f32	s8, s0
 8001a2e:	eef0 4a60 	vmov.f32	s9, s1
 8001a32:	eeb0 5a41 	vmov.f32	s10, s2
 8001a36:	eef0 5a61 	vmov.f32	s11, s3
 8001a3a:	eeb0 6a42 	vmov.f32	s12, s4
 8001a3e:	eef0 6a62 	vmov.f32	s13, s5
 8001a42:	eeb0 7a43 	vmov.f32	s14, s6
 8001a46:	eef0 7a63 	vmov.f32	s15, s7
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <twist_publish_callback+0x178>)
 8001a4c:	ed83 4b00 	vstr	d4, [r3]
 8001a50:	ed83 5b02 	vstr	d5, [r3, #8]
 8001a54:	ed83 6b04 	vstr	d6, [r3, #16]
 8001a58:	ed83 7b06 	vstr	d7, [r3, #24]
		rcl_ret_t ret0 = rcl_publish(&publisher, &twist_msg, NULL);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4921      	ldr	r1, [pc, #132]	; (8001ae4 <twist_publish_callback+0x17c>)
 8001a60:	4821      	ldr	r0, [pc, #132]	; (8001ae8 <twist_publish_callback+0x180>)
 8001a62:	f00a f833 	bl	800bacc <rcl_publish>
 8001a66:	6178      	str	r0, [r7, #20]
		twist_msg.linear.x=roll;
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <twist_publish_callback+0x168>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd9b 	bl	80005a8 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <twist_publish_callback+0x17c>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
		twist_msg.linear.y=pitch;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <twist_publish_callback+0x16c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd91 	bl	80005a8 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <twist_publish_callback+0x17c>)
 8001a8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		twist_msg.angular.z=radian_heading;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <twist_publish_callback+0x174>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd87 	bl	80005a8 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4911      	ldr	r1, [pc, #68]	; (8001ae4 <twist_publish_callback+0x17c>)
 8001aa0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		if (ret0 != RCL_RET_OK) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <twist_publish_callback+0x14a>
			printf("Error publishing (line %d)\n", __LINE__);
 8001aaa:	2179      	movs	r1, #121	; 0x79
 8001aac:	480f      	ldr	r0, [pc, #60]	; (8001aec <twist_publish_callback+0x184>)
 8001aae:	f013 fe2f 	bl	8015710 <iprintf>
		}
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	2e48e8a7 	.word	0x2e48e8a7
 8001ac4:	400921ff 	.word	0x400921ff
 8001ac8:	20007528 	.word	0x20007528
 8001acc:	20004544 	.word	0x20004544
 8001ad0:	20004548 	.word	0x20004548
 8001ad4:	2000454c 	.word	0x2000454c
 8001ad8:	40668000 	.word	0x40668000
 8001adc:	20004550 	.word	0x20004550
 8001ae0:	20007548 	.word	0x20007548
 8001ae4:	20004560 	.word	0x20004560
 8001ae8:	20004558 	.word	0x20004558
 8001aec:	08016d28 	.word	0x08016d28

08001af0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */


	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <MX_FREERTOS_Init+0x18>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_FREERTOS_Init+0x1c>)
 8001afa:	f005 fc87 	bl	800740c <osThreadNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <MX_FREERTOS_Init+0x20>)
 8001b02:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08017000 	.word	0x08017000
 8001b0c:	08001b15 	.word	0x08001b15
 8001b10:	20004590 	.word	0x20004590

08001b14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b0c8      	sub	sp, #288	; 0x120
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
	rmw_uros_set_custom_transport(
 8001b1c:	4b55      	ldr	r3, [pc, #340]	; (8001c74 <StartDefaultTask+0x160>)
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	4b55      	ldr	r3, [pc, #340]	; (8001c78 <StartDefaultTask+0x164>)
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <StartDefaultTask+0x168>)
 8001b26:	4a56      	ldr	r2, [pc, #344]	; (8001c80 <StartDefaultTask+0x16c>)
 8001b28:	4956      	ldr	r1, [pc, #344]	; (8001c84 <StartDefaultTask+0x170>)
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f00b f8e0 	bl	800ccf0 <rmw_uros_set_custom_transport>
	      cubemx_transport_open,
	      cubemx_transport_close,
	      cubemx_transport_write,
	      cubemx_transport_read);

	    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00a fc41 	bl	800c3bc <rcutils_get_zero_initialized_allocator>
	    freeRTOS_allocator.allocate = microros_allocate;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <StartDefaultTask+0x174>)
 8001b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	    freeRTOS_allocator.deallocate = microros_deallocate;
 8001b40:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <StartDefaultTask+0x178>)
 8001b42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	    freeRTOS_allocator.reallocate = microros_reallocate;
 8001b46:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <StartDefaultTask+0x17c>)
 8001b48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b4c:	4b51      	ldr	r3, [pc, #324]	; (8001c94 <StartDefaultTask+0x180>)
 8001b4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001b52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00a fc3e 	bl	800c3d8 <rcutils_set_default_allocator>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <StartDefaultTask+0x5c>
	        printf("Error on default allocators (line %d)\n", __LINE__);
 8001b68:	21c7      	movs	r1, #199	; 0xc7
 8001b6a:	484b      	ldr	r0, [pc, #300]	; (8001c98 <StartDefaultTask+0x184>)
 8001b6c:	f013 fdd0 	bl	8015710 <iprintf>
	    //std_msgs__msg__Int32 msg;
	    rclc_support_t support;
	    rcl_allocator_t allocator;
	    rcl_node_t node;

	    allocator = rcl_get_default_allocator();
 8001b70:	463b      	mov	r3, r7
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00a fc50 	bl	800c418 <rcutils_get_default_allocator>
 8001b78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b80:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001b84:	461d      	mov	r5, r3
 8001b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	6023      	str	r3, [r4, #0]

	    //create init_options
	    rclc_support_init(&support, 0, NULL, &allocator);
 8001b8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b92:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f00a fb1b 	bl	800c1d4 <rclc_support_init>

	    // create node
	    rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001b9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ba2:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8001ba6:	4a3d      	ldr	r2, [pc, #244]	; (8001c9c <StartDefaultTask+0x188>)
 8001ba8:	493d      	ldr	r1, [pc, #244]	; (8001ca0 <StartDefaultTask+0x18c>)
 8001baa:	f00a fb61 	bl	800c270 <rclc_node_init_default>

	    // Create publisher
	    //========================================= create IMU publisher=========================================//
	    const char * pub_topic_name_0 = "/publish_twist";
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <StartDefaultTask+0x190>)
 8001bb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	    const rosidl_message_type_support_t * pub_type_support_0 = ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8001bb4:	f008 f95a 	bl	8009e6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001bb8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	    rclc_publisher_init_default(&publisher, &node, pub_type_support_0, pub_topic_name_0);
 8001bbc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bc4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001bc8:	4837      	ldr	r0, [pc, #220]	; (8001ca8 <StartDefaultTask+0x194>)
 8001bca:	f00a fb8d 	bl	800c2e8 <rclc_publisher_init_default>

	    msg.data = 0;*/

	    // Create timer
	    rcl_timer_t timer;
	    rclc_timer_init_default(
 8001bce:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001bd2:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <StartDefaultTask+0x198>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <StartDefaultTask+0x19c>)
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	f00a fbb6 	bl	800c350 <rclc_timer_init_default>
	    			RCL_MS_TO_NS(10),
	    			twist_publish_callback);
	    // create executor
	    //rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
	    rclc_executor_t executor;
	    rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001be4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001be8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bec:	1d19      	adds	r1, r3, #4
 8001bee:	f107 0020 	add.w	r0, r7, #32
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f00a f883 	bl	800bd00 <rclc_executor_init>
	    rclc_executor_add_timer(&executor, &timer);
 8001bfa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00a f8ef 	bl	800bde8 <rclc_executor_add_timer>

	    // cleaning Up
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8001c0a:	f107 0120 	add.w	r1, r7, #32
 8001c0e:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <StartDefaultTask+0x19c>)
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	4608      	mov	r0, r1
 8001c16:	f00a fa8d 	bl	800c134 <rclc_executor_spin_some>
	    rclc_executor_prepare(&executor);
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00a f90e 	bl	800be40 <rclc_executor_prepare>
	    rclc_executor_spin(&executor);
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00a fa99 	bl	800c160 <rclc_executor_spin>
	    for(;;)
	    {

	    	rc += rcl_publisher_fini(&publisher, &node);
 8001c2e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c32:	4619      	mov	r1, r3
 8001c34:	481c      	ldr	r0, [pc, #112]	; (8001ca8 <StartDefaultTask+0x194>)
 8001c36:	f009 fefb 	bl	800ba30 <rcl_publisher_fini>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <StartDefaultTask+0x1a0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <StartDefaultTask+0x1a0>)
 8001c44:	6013      	str	r3, [r2, #0]
	    	rc += rcl_node_fini(&node);
 8001c46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 fd60 	bl	800b710 <rcl_node_fini>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <StartDefaultTask+0x1a0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <StartDefaultTask+0x1a0>)
 8001c5a:	6013      	str	r3, [r2, #0]
	    	if (rc != RCL_RET_OK) {
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <StartDefaultTask+0x1a0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <StartDefaultTask+0x156>
	    		    printf("Error while cleaning up!\n");
 8001c64:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <StartDefaultTask+0x1a4>)
 8001c66:	f013 fdd9 	bl	801581c <puts>
	    	}

	      osDelay(10);
 8001c6a:	200a      	movs	r0, #10
 8001c6c:	f005 fc60 	bl	8007530 <osDelay>
	    	rc += rcl_publisher_fini(&publisher, &node);
 8001c70:	e7dd      	b.n	8001c2e <StartDefaultTask+0x11a>
 8001c72:	bf00      	nop
 8001c74:	080018bd 	.word	0x080018bd
 8001c78:	08001855 	.word	0x08001855
 8001c7c:	08001835 	.word	0x08001835
 8001c80:	08001809 	.word	0x08001809
 8001c84:	20007608 	.word	0x20007608
 8001c88:	080021cd 	.word	0x080021cd
 8001c8c:	08002211 	.word	0x08002211
 8001c90:	08002249 	.word	0x08002249
 8001c94:	080022b5 	.word	0x080022b5
 8001c98:	08016d44 	.word	0x08016d44
 8001c9c:	08016d6c 	.word	0x08016d6c
 8001ca0:	08016d70 	.word	0x08016d70
 8001ca4:	08016d7c 	.word	0x08016d7c
 8001ca8:	20004558 	.word	0x20004558
 8001cac:	08001969 	.word	0x08001969
 8001cb0:	00989680 	.word	0x00989680
 8001cb4:	20004554 	.word	0x20004554
 8001cb8:	08016d8c 	.word	0x08016d8c

08001cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_GPIO_Init+0x68>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <MX_I2C1_Init+0x54>)
 8001d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x58>)
 8001d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <MX_I2C1_Init+0x50>)
 8001d66:	f001 fdb7 	bl	80038d8 <HAL_I2C_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d70:	f000 fa26 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200074d0 	.word	0x200074d0
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	00061a80 	.word	0x00061a80

08001d84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_I2C_MspInit+0x84>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d12b      	bne.n	8001dfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_I2C_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_I2C_MspInit+0x88>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_I2C_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc6:	2312      	movs	r3, #18
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <HAL_I2C_MspInit+0x8c>)
 8001dde:	f001 fbe7 	bl	80035b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_I2C_MspInit+0x88>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_I2C_MspInit+0x88>)
 8001dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_I2C_MspInit+0x88>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400

08001e14 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <bno055_assignI2C+0x1c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20007524 	.word	0x20007524

08001e34 <bno055_delay>:

void bno055_delay(int time) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 feae 	bl	8002ba0 <HAL_Delay>
#endif
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	4603      	mov	r3, r0
 8001e54:	460a      	mov	r2, r1
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	733b      	strb	r3, [r7, #12]
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001e64:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <bno055_writeData+0x184>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f107 020c 	add.w	r2, r7, #12
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2302      	movs	r3, #2
 8001e72:	2150      	movs	r1, #80	; 0x50
 8001e74:	f001 fe74 	bl	8003b60 <HAL_I2C_Master_Transmit>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80a0 	beq.w	8001fc4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d103      	bne.n	8001e92 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001e8a:	4852      	ldr	r0, [pc, #328]	; (8001fd4 <bno055_writeData+0x188>)
 8001e8c:	f013 fcc6 	bl	801581c <puts>
 8001e90:	e012      	b.n	8001eb8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d103      	bne.n	8001ea0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001e98:	484f      	ldr	r0, [pc, #316]	; (8001fd8 <bno055_writeData+0x18c>)
 8001e9a:	f013 fcbf 	bl	801581c <puts>
 8001e9e:	e00b      	b.n	8001eb8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d103      	bne.n	8001eae <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001ea6:	484d      	ldr	r0, [pc, #308]	; (8001fdc <bno055_writeData+0x190>)
 8001ea8:	f013 fcb8 	bl	801581c <puts>
 8001eac:	e004      	b.n	8001eb8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	484b      	ldr	r0, [pc, #300]	; (8001fe0 <bno055_writeData+0x194>)
 8001eb4:	f013 fc2c 	bl	8015710 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001eb8:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <bno055_writeData+0x184>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f981 	bl	80041c4 <HAL_I2C_GetError>
 8001ec2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d07e      	beq.n	8001fc8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d103      	bne.n	8001ed8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001ed0:	4844      	ldr	r0, [pc, #272]	; (8001fe4 <bno055_writeData+0x198>)
 8001ed2:	f013 fca3 	bl	801581c <puts>
 8001ed6:	e021      	b.n	8001f1c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d103      	bne.n	8001ee6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001ede:	4842      	ldr	r0, [pc, #264]	; (8001fe8 <bno055_writeData+0x19c>)
 8001ee0:	f013 fc9c 	bl	801581c <puts>
 8001ee4:	e01a      	b.n	8001f1c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d103      	bne.n	8001ef4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001eec:	483f      	ldr	r0, [pc, #252]	; (8001fec <bno055_writeData+0x1a0>)
 8001eee:	f013 fc95 	bl	801581c <puts>
 8001ef2:	e013      	b.n	8001f1c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d103      	bne.n	8001f02 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001efa:	483d      	ldr	r0, [pc, #244]	; (8001ff0 <bno055_writeData+0x1a4>)
 8001efc:	f013 fc8e 	bl	801581c <puts>
 8001f00:	e00c      	b.n	8001f1c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d103      	bne.n	8001f10 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001f08:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <bno055_writeData+0x1a8>)
 8001f0a:	f013 fc87 	bl	801581c <puts>
 8001f0e:	e005      	b.n	8001f1c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d102      	bne.n	8001f1c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001f16:	4838      	ldr	r0, [pc, #224]	; (8001ff8 <bno055_writeData+0x1ac>)
 8001f18:	f013 fc80 	bl	801581c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <bno055_writeData+0x184>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 f941 	bl	80041a8 <HAL_I2C_GetState>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001f30:	4832      	ldr	r0, [pc, #200]	; (8001ffc <bno055_writeData+0x1b0>)
 8001f32:	f013 fc73 	bl	801581c <puts>
 8001f36:	e048      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d103      	bne.n	8001f46 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001f3e:	482f      	ldr	r0, [pc, #188]	; (8001ffc <bno055_writeData+0x1b0>)
 8001f40:	f013 fc6c 	bl	801581c <puts>
 8001f44:	e041      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b24      	cmp	r3, #36	; 0x24
 8001f4a:	d103      	bne.n	8001f54 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001f4c:	482c      	ldr	r0, [pc, #176]	; (8002000 <bno055_writeData+0x1b4>)
 8001f4e:	f013 fc65 	bl	801581c <puts>
 8001f52:	e03a      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	2b21      	cmp	r3, #33	; 0x21
 8001f58:	d103      	bne.n	8001f62 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001f5a:	482a      	ldr	r0, [pc, #168]	; (8002004 <bno055_writeData+0x1b8>)
 8001f5c:	f013 fc5e 	bl	801581c <puts>
 8001f60:	e033      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b22      	cmp	r3, #34	; 0x22
 8001f66:	d103      	bne.n	8001f70 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001f68:	4827      	ldr	r0, [pc, #156]	; (8002008 <bno055_writeData+0x1bc>)
 8001f6a:	f013 fc57 	bl	801581c <puts>
 8001f6e:	e02c      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b28      	cmp	r3, #40	; 0x28
 8001f74:	d103      	bne.n	8001f7e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001f76:	4825      	ldr	r0, [pc, #148]	; (800200c <bno055_writeData+0x1c0>)
 8001f78:	f013 fc50 	bl	801581c <puts>
 8001f7c:	e025      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b29      	cmp	r3, #41	; 0x29
 8001f82:	d103      	bne.n	8001f8c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001f84:	4822      	ldr	r0, [pc, #136]	; (8002010 <bno055_writeData+0x1c4>)
 8001f86:	f013 fc49 	bl	801581c <puts>
 8001f8a:	e01e      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f90:	d103      	bne.n	8001f9a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001f92:	4820      	ldr	r0, [pc, #128]	; (8002014 <bno055_writeData+0x1c8>)
 8001f94:	f013 fc42 	bl	801581c <puts>
 8001f98:	e017      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	2b60      	cmp	r3, #96	; 0x60
 8001f9e:	d103      	bne.n	8001fa8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001fa0:	481d      	ldr	r0, [pc, #116]	; (8002018 <bno055_writeData+0x1cc>)
 8001fa2:	f013 fc3b 	bl	801581c <puts>
 8001fa6:	e010      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2ba0      	cmp	r3, #160	; 0xa0
 8001fac:	d103      	bne.n	8001fb6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001fae:	481b      	ldr	r0, [pc, #108]	; (800201c <bno055_writeData+0x1d0>)
 8001fb0:	f013 fc34 	bl	801581c <puts>
 8001fb4:	e009      	b.n	8001fca <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2be0      	cmp	r3, #224	; 0xe0
 8001fba:	d106      	bne.n	8001fca <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001fbc:	4818      	ldr	r0, [pc, #96]	; (8002020 <bno055_writeData+0x1d4>)
 8001fbe:	f013 fc2d 	bl	801581c <puts>
 8001fc2:	e002      	b.n	8001fca <bno055_writeData+0x17e>
    return;
 8001fc4:	bf00      	nop
 8001fc6:	e000      	b.n	8001fca <bno055_writeData+0x17e>
    return;
 8001fc8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20007524 	.word	0x20007524
 8001fd4:	08016da8 	.word	0x08016da8
 8001fd8:	08016dcc 	.word	0x08016dcc
 8001fdc:	08016df4 	.word	0x08016df4
 8001fe0:	08016e18 	.word	0x08016e18
 8001fe4:	08016e30 	.word	0x08016e30
 8001fe8:	08016e44 	.word	0x08016e44
 8001fec:	08016e58 	.word	0x08016e58
 8001ff0:	08016e6c 	.word	0x08016e6c
 8001ff4:	08016e80 	.word	0x08016e80
 8001ff8:	08016e94 	.word	0x08016e94
 8001ffc:	08016eac 	.word	0x08016eac
 8002000:	08016ec4 	.word	0x08016ec4
 8002004:	08016ed8 	.word	0x08016ed8
 8002008:	08016ef0 	.word	0x08016ef0
 800200c:	08016f08 	.word	0x08016f08
 8002010:	08016f20 	.word	0x08016f20
 8002014:	08016f40 	.word	0x08016f40
 8002018:	08016f60 	.word	0x08016f60
 800201c:	08016f78 	.word	0x08016f78
 8002020:	08016f90 	.word	0x08016f90

08002024 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af02      	add	r7, sp, #8
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4613      	mov	r3, r2
 8002032:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <bno055_readData+0x40>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	1dfa      	adds	r2, r7, #7
 800203a:	2364      	movs	r3, #100	; 0x64
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2301      	movs	r3, #1
 8002040:	2150      	movs	r1, #80	; 0x50
 8002042:	f001 fd8d 	bl	8003b60 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <bno055_readData+0x40>)
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	79bb      	ldrb	r3, [r7, #6]
 800204c:	b29b      	uxth	r3, r3
 800204e:	2264      	movs	r2, #100	; 0x64
 8002050:	9200      	str	r2, [sp, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	2150      	movs	r1, #80	; 0x50
 8002056:	f001 fe81 	bl	8003d5c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20007524 	.word	0x20007524

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206c:	f000 fd56 	bl	8002b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002070:	f000 f820 	bl	80020b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002074:	f7ff fe22 	bl	8001cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8002078:	f7ff fb9e 	bl	80017b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800207c:	f000 fc42 	bl	8002904 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002080:	f7ff fe52 	bl	8001d28 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002084:	f000 fbc8 	bl	8002818 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <main+0x44>)
 800208a:	f7ff fec3 	bl	8001e14 <bno055_assignI2C>
  bno055_setup();
 800208e:	f7fe ff57 	bl	8000f40 <bno055_setup>
  bno055_setOperationModeNDOF();
 8002092:	f7fe ff42 	bl	8000f1a <bno055_setOperationModeNDOF>
	HAL_TIM_Base_Start_IT(&htim4);
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <main+0x48>)
 8002098:	f003 fa88 	bl	80055ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800209c:	f005 f96c 	bl	8007378 <osKernelInitialize>
  MX_FREERTOS_Init();
 80020a0:	f7ff fd26 	bl	8001af0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020a4:	f005 f98c 	bl	80073c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <main+0x40>
 80020aa:	bf00      	nop
 80020ac:	200074d0 	.word	0x200074d0
 80020b0:	200075c0 	.word	0x200075c0

080020b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b094      	sub	sp, #80	; 0x50
 80020b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	2234      	movs	r2, #52	; 0x34
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f013 fa26 	bl	8015514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <SystemClock_Config+0xe0>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	4a2c      	ldr	r2, [pc, #176]	; (8002194 <SystemClock_Config+0xe0>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6413      	str	r3, [r2, #64]	; 0x40
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <SystemClock_Config+0xe0>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <SystemClock_Config+0xe4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <SystemClock_Config+0xe4>)
 80020fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <SystemClock_Config+0xe4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002110:	2301      	movs	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002118:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211a:	2302      	movs	r3, #2
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800211e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002124:	2308      	movs	r3, #8
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002128:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800212c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800212e:	2302      	movs	r3, #2
 8002130:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002132:	2302      	movs	r3, #2
 8002134:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002136:	2302      	movs	r3, #2
 8002138:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4618      	mov	r0, r3
 8002140:	f002 ff46 	bl	8004fd0 <HAL_RCC_OscConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800214a:	f000 f839 	bl	80021c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800214e:	f002 fb73 	bl	8004838 <HAL_PWREx_EnableOverDrive>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002158:	f000 f832 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215c:	230f      	movs	r3, #15
 800215e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002160:	2303      	movs	r3, #3
 8002162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002168:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800216c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800216e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002172:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	2105      	movs	r1, #5
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fbac 	bl	80048d8 <HAL_RCC_ClockConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002186:	f000 f81b 	bl	80021c0 <Error_Handler>
  }
}
 800218a:	bf00      	nop
 800218c:	3750      	adds	r7, #80	; 0x50
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ae:	f000 fcd7 	bl	8002b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <microros_allocate+0x3c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <microros_allocate+0x3c>)
 80021e4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <microros_allocate+0x40>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <microros_allocate+0x40>)
 80021f4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff f894 	bl	8001324 <pvPortMallocMicroROS>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20007568 	.word	0x20007568
 800220c:	2000756c 	.word	0x2000756c

08002210 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff f99d 	bl	8001560 <getBlockSize>
 8002226:	4603      	mov	r3, r0
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <microros_deallocate+0x34>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	461a      	mov	r2, r3
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <microros_deallocate+0x34>)
 8002232:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff f939 	bl	80014ac <vPortFreeMicroROS>
  }
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000756c 	.word	0x2000756c

08002248 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <microros_reallocate+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <microros_reallocate+0x64>)
 8002262:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <microros_reallocate+0x68>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	461a      	mov	r2, r3
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <microros_reallocate+0x68>)
 8002272:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f7ff f852 	bl	8001324 <pvPortMallocMicroROS>
 8002280:	4603      	mov	r3, r0
 8002282:	e00e      	b.n	80022a2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7ff f96b 	bl	8001560 <getBlockSize>
 800228a:	4603      	mov	r3, r0
 800228c:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <microros_reallocate+0x68>)
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	461a      	mov	r2, r3
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <microros_reallocate+0x68>)
 8002296:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff f97e 	bl	800159c <pvPortReallocMicroROS>
 80022a0:	4603      	mov	r3, r0
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20007568 	.word	0x20007568
 80022b0:	2000756c 	.word	0x2000756c

080022b4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <microros_zero_allocate+0x48>)
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <microros_zero_allocate+0x48>)
 80022d2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	4a08      	ldr	r2, [pc, #32]	; (8002300 <microros_zero_allocate+0x4c>)
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <microros_zero_allocate+0x4c>)
 80022e6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff f983 	bl	80015f6 <pvPortCallocMicroROS>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20007568 	.word	0x20007568
 8002300:	2000756c 	.word	0x2000756c
 8002304:	00000000 	.word	0x00000000

08002308 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800231a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800231e:	a320      	add	r3, pc, #128	; (adr r3, 80023a0 <UTILS_NanosecondsToTimespec+0x98>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe fbfa 	bl	8000b1c <__aeabi_ldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002336:	a31a      	add	r3, pc, #104	; (adr r3, 80023a0 <UTILS_NanosecondsToTimespec+0x98>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fe fbee 	bl	8000b1c <__aeabi_ldivmod>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da20      	bge.n	800238e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <UTILS_NanosecondsToTimespec+0x90>)
 8002352:	fb82 1203 	smull	r1, r2, r2, r3
 8002356:	1712      	asrs	r2, r2, #28
 8002358:	17db      	asrs	r3, r3, #31
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	6979      	ldr	r1, [r7, #20]
 8002368:	17c8      	asrs	r0, r1, #31
 800236a:	460c      	mov	r4, r1
 800236c:	4605      	mov	r5, r0
 800236e:	ebb2 0804 	subs.w	r8, r2, r4
 8002372:	eb63 0905 	sbc.w	r9, r3, r5
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4906      	ldr	r1, [pc, #24]	; (800239c <UTILS_NanosecondsToTimespec+0x94>)
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
    }
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002398:	44b82fa1 	.word	0x44b82fa1
 800239c:	3b9aca00 	.word	0x3b9aca00
 80023a0:	3b9aca00 	.word	0x3b9aca00
 80023a4:	00000000 	.word	0x00000000

080023a8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b08e      	sub	sp, #56	; 0x38
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24
 80023b2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80023b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b8:	2300      	movs	r3, #0
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80023ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ce:	4618      	mov	r0, r3
 80023d0:	f006 fb62 	bl	8008a98 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	17da      	asrs	r2, r3, #31
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	61fa      	str	r2, [r7, #28]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	69b9      	ldr	r1, [r7, #24]
 80023e6:	000b      	movs	r3, r1
 80023e8:	2200      	movs	r2, #0
 80023ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2200      	movs	r2, #0
 80023f2:	461c      	mov	r4, r3
 80023f4:	4615      	mov	r5, r2
 80023f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023fa:	1911      	adds	r1, r2, r4
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	416b      	adcs	r3, r5
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002406:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800240a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	f04f 0400 	mov.w	r4, #0
 8002416:	f04f 0500 	mov.w	r5, #0
 800241a:	015d      	lsls	r5, r3, #5
 800241c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002420:	0154      	lsls	r4, r2, #5
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	ebb2 0800 	subs.w	r8, r2, r0
 800242a:	eb63 0901 	sbc.w	r9, r3, r1
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800243a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800243e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002442:	4690      	mov	r8, r2
 8002444:	4699      	mov	r9, r3
 8002446:	eb18 0a00 	adds.w	sl, r8, r0
 800244a:	eb49 0b01 	adc.w	fp, r9, r1
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800245a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800245e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002462:	ebb2 040a 	subs.w	r4, r2, sl
 8002466:	603c      	str	r4, [r7, #0]
 8002468:	eb63 030b 	sbc.w	r3, r3, fp
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002472:	4623      	mov	r3, r4
 8002474:	181b      	adds	r3, r3, r0
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	462b      	mov	r3, r5
 800247a:	eb41 0303 	adc.w	r3, r1, r3
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002486:	f7ff ff3f 	bl	8002308 <UTILS_NanosecondsToTimespec>

    return 0;
 800248a:	2300      	movs	r3, #0
 800248c:	4618      	mov	r0, r3
 800248e:	3738      	adds	r7, #56	; 0x38
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_MspInit+0x54>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_MspInit+0x54>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x54>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_MspInit+0x54>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_MspInit+0x54>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_MspInit+0x54>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	210f      	movs	r1, #15
 80024da:	f06f 0001 	mvn.w	r0, #1
 80024de:	f000 fc3b 	bl	8002d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_InitTick+0xd4>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_InitTick+0xd4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6453      	str	r3, [r2, #68]	; 0x44
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_InitTick+0xd4>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800251c:	f107 020c 	add.w	r2, r7, #12
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f002 faf0 	bl	8004b0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800252c:	f002 fada 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8002530:	4603      	mov	r3, r0
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_InitTick+0xd8>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	3b01      	subs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_InitTick+0xdc>)
 8002546:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_InitTick+0xe0>)
 8002548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_InitTick+0xdc>)
 800254c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002550:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <HAL_InitTick+0xdc>)
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_InitTick+0xdc>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_InitTick+0xdc>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_InitTick+0xdc>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800256a:	4818      	ldr	r0, [pc, #96]	; (80025cc <HAL_InitTick+0xdc>)
 800256c:	f002 ffce 	bl	800550c <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11b      	bne.n	80025b6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800257e:	4813      	ldr	r0, [pc, #76]	; (80025cc <HAL_InitTick+0xdc>)
 8002580:	f003 f814 	bl	80055ac <HAL_TIM_Base_Start_IT>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800258a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800258e:	2b00      	cmp	r3, #0
 8002590:	d111      	bne.n	80025b6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002592:	2019      	movs	r0, #25
 8002594:	f000 fbfc 	bl	8002d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	d808      	bhi.n	80025b0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800259e:	2200      	movs	r2, #0
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	2019      	movs	r0, #25
 80025a4:	f000 fbd8 	bl	8002d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_InitTick+0xe4>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e002      	b.n	80025b6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3730      	adds	r7, #48	; 0x30
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	20007570 	.word	0x20007570
 80025d0:	40010000 	.word	0x40010000
 80025d4:	20000014 	.word	0x20000014

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler+0x4>

080025de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <DMA1_Stream5_IRQHandler+0x10>)
 800260a:	f000 fd67 	bl	80030dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000764c 	.word	0x2000764c

08002618 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <DMA1_Stream6_IRQHandler+0x10>)
 800261e:	f000 fd5d 	bl	80030dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200076ac 	.word	0x200076ac

0800262c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002632:	f003 f82b 	bl	800568c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20007570 	.word	0x20007570

08002640 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <TIM4_IRQHandler+0x10>)
 8002646:	f003 f821 	bl	800568c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200075c0 	.word	0x200075c0

08002654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <USART2_IRQHandler+0x10>)
 800265a:	f003 fd55 	bl	8006108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20007608 	.word	0x20007608

08002668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return 1;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_kill>:

int _kill(int pid, int sig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002682:	f012 fe9d 	bl	80153c0 <__errno>
 8002686:	4603      	mov	r3, r0
 8002688:	2216      	movs	r2, #22
 800268a:	601a      	str	r2, [r3, #0]
  return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_exit>:

void _exit (int status)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ffe7 	bl	8002678 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026aa:	e7fe      	b.n	80026aa <_exit+0x12>

080026ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e00a      	b.n	80026d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026be:	f3af 8000 	nop.w
 80026c2:	4601      	mov	r1, r0
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	60ba      	str	r2, [r7, #8]
 80026ca:	b2ca      	uxtb	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf0      	blt.n	80026be <_read+0x12>
  }

  return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e009      	b.n	800270c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf1      	blt.n	80026f8 <_write+0x12>
  }
  return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_close>:

int _close(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002746:	605a      	str	r2, [r3, #4]
  return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f012 fe02 	bl	80153c0 <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	220c      	movs	r2, #12
 80027c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20020000 	.word	0x20020000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	200075bc 	.word	0x200075bc
 80027f0:	20010bb8 	.word	0x20010bb8

080027f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SystemInit+0x20>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <SystemInit+0x20>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282c:	463b      	mov	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <MX_TIM4_Init+0x94>)
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <MX_TIM4_Init+0x98>)
 8002838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <MX_TIM4_Init+0x94>)
 800283c:	224f      	movs	r2, #79	; 0x4f
 800283e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MX_TIM4_Init+0x94>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <MX_TIM4_Init+0x94>)
 8002848:	f242 720f 	movw	r2, #9999	; 0x270f
 800284c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <MX_TIM4_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_TIM4_Init+0x94>)
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800285a:	4814      	ldr	r0, [pc, #80]	; (80028ac <MX_TIM4_Init+0x94>)
 800285c:	f002 fe56 	bl	800550c <HAL_TIM_Base_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002866:	f7ff fcab 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002870:	f107 0308 	add.w	r3, r7, #8
 8002874:	4619      	mov	r1, r3
 8002876:	480d      	ldr	r0, [pc, #52]	; (80028ac <MX_TIM4_Init+0x94>)
 8002878:	f003 f810 	bl	800589c <HAL_TIM_ConfigClockSource>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002882:	f7ff fc9d 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800288e:	463b      	mov	r3, r7
 8002890:	4619      	mov	r1, r3
 8002892:	4806      	ldr	r0, [pc, #24]	; (80028ac <MX_TIM4_Init+0x94>)
 8002894:	f003 fa2c 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800289e:	f7ff fc8f 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200075c0 	.word	0x200075c0
 80028b0:	40000800 	.word	0x40000800

080028b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <HAL_TIM_Base_MspInit+0x48>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d115      	bne.n	80028f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_TIM_Base_MspInit+0x4c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_TIM_Base_MspInit+0x4c>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_TIM_Base_MspInit+0x4c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2105      	movs	r1, #5
 80028e6:	201e      	movs	r0, #30
 80028e8:	f000 fa36 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028ec:	201e      	movs	r0, #30
 80028ee:	f000 fa4f 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40000800 	.word	0x40000800
 8002900:	40023800 	.word	0x40023800

08002904 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <MX_USART2_UART_Init+0x50>)
 800290c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 8002910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <MX_USART2_UART_Init+0x4c>)
 800293c:	f003 fa68 	bl	8005e10 <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002946:	f7ff fc3b 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20007608 	.word	0x20007608
 8002954:	40004400 	.word	0x40004400

08002958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_UART_MspInit+0x154>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f040 8093 	bne.w	8002aa2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <HAL_UART_MspInit+0x158>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <HAL_UART_MspInit+0x158>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
 800298c:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_UART_MspInit+0x158>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <HAL_UART_MspInit+0x158>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <HAL_UART_MspInit+0x158>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_UART_MspInit+0x158>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029b4:	230c      	movs	r3, #12
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c4:	2307      	movs	r3, #7
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4839      	ldr	r0, [pc, #228]	; (8002ab4 <HAL_UART_MspInit+0x15c>)
 80029d0:	f000 fdee 	bl	80035b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029d4:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029d6:	4a39      	ldr	r2, [pc, #228]	; (8002abc <HAL_UART_MspInit+0x164>)
 80029d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e2:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029ee:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fc:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a08:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a10:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a18:	4827      	ldr	r0, [pc, #156]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a1a:	f000 f9c7 	bl	8002dac <HAL_DMA_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002a24:	f7ff fbcc 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2e:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <HAL_UART_MspInit+0x160>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_UART_MspInit+0x16c>)
 8002a38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a40:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a44:	2240      	movs	r2, #64	; 0x40
 8002a46:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a54:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a76:	4812      	ldr	r0, [pc, #72]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a78:	f000 f998 	bl	8002dac <HAL_DMA_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002a82:	f7ff fb9d 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_UART_MspInit+0x168>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2105      	movs	r1, #5
 8002a96:	2026      	movs	r0, #38	; 0x26
 8002a98:	f000 f95e 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a9c:	2026      	movs	r0, #38	; 0x26
 8002a9e:	f000 f977 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40004400 	.word	0x40004400
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	2000764c 	.word	0x2000764c
 8002abc:	40026088 	.word	0x40026088
 8002ac0:	200076ac 	.word	0x200076ac
 8002ac4:	400260a0 	.word	0x400260a0

08002ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ace:	490e      	ldr	r1, [pc, #56]	; (8002b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad4:	e002      	b.n	8002adc <LoopCopyDataInit>

08002ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ada:	3304      	adds	r3, #4

08002adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae0:	d3f9      	bcc.n	8002ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ae4:	4c0b      	ldr	r4, [pc, #44]	; (8002b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae8:	e001      	b.n	8002aee <LoopFillZerobss>

08002aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aec:	3204      	adds	r2, #4

08002aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af0:	d3fb      	bcc.n	8002aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002af2:	f7ff fe7f 	bl	80027f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af6:	f012 fcb1 	bl	801545c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afa:	f7ff fab5 	bl	8002068 <main>
  bx  lr    
 8002afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b08:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002b0c:	08017b48 	.word	0x08017b48
  ldr r2, =_sbss
 8002b10:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002b14:	20010bb8 	.word	0x20010bb8

08002b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC_IRQHandler>
	...

08002b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <HAL_Init+0x40>)
 8002b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_Init+0x40>)
 8002b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_Init+0x40>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b44:	2003      	movs	r0, #3
 8002b46:	f000 f8fc 	bl	8002d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4a:	200f      	movs	r0, #15
 8002b4c:	f7ff fcd0 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b50:	f7ff fca2 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023c00 	.word	0x40023c00

08002b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x20>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x24>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_IncTick+0x24>)
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000018 	.word	0x20000018
 8002b84:	2000770c 	.word	0x2000770c

08002b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_GetTick+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000770c 	.word	0x2000770c

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb8:	d005      	beq.n	8002bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_Delay+0x44>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc6:	bf00      	nop
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f7      	bhi.n	8002bc8 <HAL_Delay+0x28>
  {
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000018 	.word	0x20000018

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	; 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff4c 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6a:	f7ff ff61 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	6978      	ldr	r0, [r7, #20]
 8002d76:	f7ff ffb1 	bl	8002cdc <NVIC_EncodePriority>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff80 	bl	8002c88 <__NVIC_SetPriority>
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff54 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff fee6 	bl	8002b88 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e099      	b.n	8002efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de8:	e00f      	b.n	8002e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dea:	f7ff fecd 	bl	8002b88 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d908      	bls.n	8002e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e078      	b.n	8002efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e8      	bne.n	8002dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_DMA_Init+0x158>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0307 	bic.w	r3, r3, #7
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d117      	bne.n	8002ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb01 	bl	80034b8 <DMA_CheckFifoParam>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e016      	b.n	8002efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fab8 	bl	800344c <DMA_CalcBaseAndBitshift>
 8002edc:	4603      	mov	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	223f      	movs	r2, #63	; 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	f010803f 	.word	0xf010803f

08002f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Start_IT+0x26>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e040      	b.n	8002fb0 <HAL_DMA_Start_IT+0xa8>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d12f      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa4a 	bl	80033f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	223f      	movs	r2, #63	; 0x3f
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0216 	orr.w	r2, r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fc6:	f7ff fddf 	bl	8002b88 <HAL_GetTick>
 8002fca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d008      	beq.n	8002fea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e052      	b.n	8003090 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0216 	bic.w	r2, r2, #22
 8002ff8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003008:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <HAL_DMA_Abort+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0208 	bic.w	r2, r2, #8
 8003028:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303a:	e013      	b.n	8003064 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303c:	f7ff fda4 	bl	8002b88 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b05      	cmp	r3, #5
 8003048:	d90c      	bls.n	8003064 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e015      	b.n	8003090 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e4      	bne.n	800303c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	223f      	movs	r2, #63	; 0x3f
 8003078:	409a      	lsls	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d004      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00c      	b.n	80030d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2205      	movs	r2, #5
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e8:	4b8e      	ldr	r3, [pc, #568]	; (8003324 <HAL_DMA_IRQHandler+0x248>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a8e      	ldr	r2, [pc, #568]	; (8003328 <HAL_DMA_IRQHandler+0x24c>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	2208      	movs	r2, #8
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01a      	beq.n	8003148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0204 	bic.w	r2, r2, #4
 800312e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	2208      	movs	r2, #8
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2204      	movs	r2, #4
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	2204      	movs	r2, #4
 80031a2:	409a      	lsls	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2210      	movs	r2, #16
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d043      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03c      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d6:	2210      	movs	r2, #16
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d018      	beq.n	800321e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d024      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
 800320a:	e01f      	b.n	800324c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
 800321c:	e016      	b.n	800324c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0208 	bic.w	r2, r2, #8
 800323a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2220      	movs	r2, #32
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 808f 	beq.w	800337c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8087 	beq.w	800337c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2220      	movs	r2, #32
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b05      	cmp	r3, #5
 8003284:	d136      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0216 	bic.w	r2, r2, #22
 8003294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x1da>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	223f      	movs	r2, #63	; 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d07e      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
        }
        return;
 80032f2:	e079      	b.n	80033e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01d      	beq.n	800333e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	2b00      	cmp	r3, #0
 8003316:	d031      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
 8003320:	e02c      	b.n	800337c <HAL_DMA_IRQHandler+0x2a0>
 8003322:	bf00      	nop
 8003324:	20000010 	.word	0x20000010
 8003328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d023      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e01e      	b.n	800337c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0210 	bic.w	r2, r2, #16
 800335a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2205      	movs	r2, #5
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d307      	bcc.n	80033c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f2      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x2cc>
 80033c2:	e000      	b.n	80033c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
 80033e6:	e000      	b.n	80033ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e8:	bf00      	nop
    }
  }
}
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800340c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d108      	bne.n	8003430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800342e:	e007      	b.n	8003440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3b10      	subs	r3, #16
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <DMA_CalcBaseAndBitshift+0x64>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d909      	bls.n	800348e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	; 0x58
 800348c:	e007      	b.n	800349e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	aaaaaaab 	.word	0xaaaaaaab
 80034b4:	0801703c 	.word	0x0801703c

080034b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d856      	bhi.n	8003586 <DMA_CheckFifoParam+0xce>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <DMA_CheckFifoParam+0x28>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003503 	.word	0x08003503
 80034e8:	080034f1 	.word	0x080034f1
 80034ec:	08003587 	.word	0x08003587
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d046      	beq.n	800358a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e043      	b.n	800358a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800350a:	d140      	bne.n	800358e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e03d      	b.n	800358e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351a:	d121      	bne.n	8003560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d837      	bhi.n	8003592 <DMA_CheckFifoParam+0xda>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <DMA_CheckFifoParam+0x70>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	0800353f 	.word	0x0800353f
 8003530:	08003539 	.word	0x08003539
 8003534:	08003551 	.word	0x08003551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e030      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d025      	beq.n	8003596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354e:	e022      	b.n	8003596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003558:	d11f      	bne.n	800359a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800355e:	e01c      	b.n	800359a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d903      	bls.n	800356e <DMA_CheckFifoParam+0xb6>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d003      	beq.n	8003574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800356c:	e018      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      break;
 8003572:	e015      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e00b      	b.n	800359e <DMA_CheckFifoParam+0xe6>
      break;
 8003586:	bf00      	nop
 8003588:	e00a      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e008      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e006      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e004      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
    }
  } 
  
  return status; 
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e165      	b.n	8003898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8154 	bne.w	8003892 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d005      	beq.n	8003602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d130      	bne.n	8003664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003638:	2201      	movs	r2, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0201 	and.w	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d017      	beq.n	80036a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80ae 	beq.w	8003892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_GPIO_Init+0x300>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_GPIO_Init+0x300>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b5a      	ldr	r3, [pc, #360]	; (80038b0 <HAL_GPIO_Init+0x300>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_GPIO_Init+0x304>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_GPIO_Init+0x308>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x21a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4e      	ldr	r2, [pc, #312]	; (80038bc <HAL_GPIO_Init+0x30c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x216>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4d      	ldr	r2, [pc, #308]	; (80038c0 <HAL_GPIO_Init+0x310>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x212>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4c      	ldr	r2, [pc, #304]	; (80038c4 <HAL_GPIO_Init+0x314>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x20e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <HAL_GPIO_Init+0x318>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x20a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4a      	ldr	r2, [pc, #296]	; (80038cc <HAL_GPIO_Init+0x31c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x206>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a49      	ldr	r2, [pc, #292]	; (80038d0 <HAL_GPIO_Init+0x320>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x202>
 80037ae:	2306      	movs	r3, #6
 80037b0:	e00c      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037b2:	2307      	movs	r3, #7
 80037b4:	e00a      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037b6:	2305      	movs	r3, #5
 80037b8:	e008      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037ba:	2304      	movs	r3, #4
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037be:	2303      	movs	r3, #3
 80037c0:	e004      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e002      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_GPIO_Init+0x21c>
 80037ca:	2300      	movs	r3, #0
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f002 0203 	and.w	r2, r2, #3
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	4093      	lsls	r3, r2
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037dc:	4935      	ldr	r1, [pc, #212]	; (80038b4 <HAL_GPIO_Init+0x304>)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3302      	adds	r3, #2
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_GPIO_Init+0x324>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800380e:	4a31      	ldr	r2, [pc, #196]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003838:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003862:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_GPIO_Init+0x324>)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3301      	adds	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	f67f ae96 	bls.w	80035cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40013800 	.word	0x40013800
 80038b8:	40020000 	.word	0x40020000
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020c00 	.word	0x40020c00
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40021400 	.word	0x40021400
 80038d0:	40021800 	.word	0x40021800
 80038d4:	40013c00 	.word	0x40013c00

080038d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e12b      	b.n	8003b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fe fa40 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800393a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800393c:	f001 f8be 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8003940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4a81      	ldr	r2, [pc, #516]	; (8003b4c <HAL_I2C_Init+0x274>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d807      	bhi.n	800395c <HAL_I2C_Init+0x84>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a80      	ldr	r2, [pc, #512]	; (8003b50 <HAL_I2C_Init+0x278>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e006      	b.n	800396a <HAL_I2C_Init+0x92>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a7d      	ldr	r2, [pc, #500]	; (8003b54 <HAL_I2C_Init+0x27c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0e7      	b.n	8003b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a78      	ldr	r2, [pc, #480]	; (8003b58 <HAL_I2C_Init+0x280>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a6a      	ldr	r2, [pc, #424]	; (8003b4c <HAL_I2C_Init+0x274>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d802      	bhi.n	80039ac <HAL_I2C_Init+0xd4>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3301      	adds	r3, #1
 80039aa:	e009      	b.n	80039c0 <HAL_I2C_Init+0xe8>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a69      	ldr	r2, [pc, #420]	; (8003b5c <HAL_I2C_Init+0x284>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	495c      	ldr	r1, [pc, #368]	; (8003b4c <HAL_I2C_Init+0x274>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d819      	bhi.n	8003a14 <HAL_I2C_Init+0x13c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e59      	subs	r1, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ee:	1c59      	adds	r1, r3, #1
 80039f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039f4:	400b      	ands	r3, r1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_I2C_Init+0x138>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1e59      	subs	r1, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0e:	e051      	b.n	8003ab4 <HAL_I2C_Init+0x1dc>
 8003a10:	2304      	movs	r3, #4
 8003a12:	e04f      	b.n	8003ab4 <HAL_I2C_Init+0x1dc>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d111      	bne.n	8003a40 <HAL_I2C_Init+0x168>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e012      	b.n	8003a66 <HAL_I2C_Init+0x18e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	0099      	lsls	r1, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Init+0x196>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e022      	b.n	8003ab4 <HAL_I2C_Init+0x1dc>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10e      	bne.n	8003a94 <HAL_I2C_Init+0x1bc>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1e58      	subs	r0, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	440b      	add	r3, r1
 8003a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	e00f      	b.n	8003ab4 <HAL_I2C_Init+0x1dc>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e58      	subs	r0, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	0099      	lsls	r1, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	6809      	ldr	r1, [r1, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6911      	ldr	r1, [r2, #16]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	000186a0 	.word	0x000186a0
 8003b50:	001e847f 	.word	0x001e847f
 8003b54:	003d08ff 	.word	0x003d08ff
 8003b58:	431bde83 	.word	0x431bde83
 8003b5c:	10624dd3 	.word	0x10624dd3

08003b60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	817b      	strh	r3, [r7, #10]
 8003b70:	4613      	mov	r3, r2
 8003b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b74:	f7ff f808 	bl	8002b88 <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	f040 80e0 	bne.w	8003d48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2319      	movs	r3, #25
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4970      	ldr	r1, [pc, #448]	; (8003d54 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fc72 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e0d3      	b.n	8003d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_I2C_Master_Transmit+0x50>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e0cc      	b.n	8003d4a <HAL_I2C_Master_Transmit+0x1ea>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d007      	beq.n	8003bd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2221      	movs	r2, #33	; 0x21
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	893a      	ldrh	r2, [r7, #8]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a50      	ldr	r2, [pc, #320]	; (8003d58 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c18:	8979      	ldrh	r1, [r7, #10]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fadc 	bl	80041dc <I2C_MasterRequestWrite>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e08d      	b.n	8003d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c44:	e066      	b.n	8003d14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	6a39      	ldr	r1, [r7, #32]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fcec 	bl	8004628 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d107      	bne.n	8003c6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06b      	b.n	8003d4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0x188>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d017      	beq.n	8003ce8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	6a39      	ldr	r1, [r7, #32]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fcdc 	bl	80046aa <I2C_WaitOnBTFFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d107      	bne.n	8003d10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e01a      	b.n	8003d4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d194      	bne.n	8003c46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	00100002 	.word	0x00100002
 8003d58:	ffff0000 	.word	0xffff0000

08003d5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	; 0x30
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7fe ff0a 	bl	8002b88 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	f040 820b 	bne.w	800419a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	497c      	ldr	r1, [pc, #496]	; (8003f80 <HAL_I2C_Master_Receive+0x224>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fb74 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e1fe      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2C_Master_Receive+0x50>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e1f7      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d007      	beq.n	8003dd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2222      	movs	r2, #34	; 0x22
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2210      	movs	r2, #16
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a5c      	ldr	r2, [pc, #368]	; (8003f84 <HAL_I2C_Master_Receive+0x228>)
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e14:	8979      	ldrh	r1, [r7, #10]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa60 	bl	80042e0 <I2C_MasterRequestRead>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e1b8      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d113      	bne.n	8003e5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e18c      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d11b      	bne.n	8003e9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e16c      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d11b      	bne.n	8003eda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	e14c      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f00:	e138      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	f200 80f1 	bhi.w	80040ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d123      	bne.n	8003f5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fc07 	bl	800472c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e139      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f5a:	e10b      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d14e      	bne.n	8004002 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4906      	ldr	r1, [pc, #24]	; (8003f88 <HAL_I2C_Master_Receive+0x22c>)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fa84 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e10e      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
 8003f7e:	bf00      	nop
 8003f80:	00100002 	.word	0x00100002
 8003f84:	ffff0000 	.word	0xffff0000
 8003f88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004000:	e0b8      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	2200      	movs	r2, #0
 800400a:	4966      	ldr	r1, [pc, #408]	; (80041a4 <HAL_I2C_Master_Receive+0x448>)
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fa35 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0bf      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2200      	movs	r2, #0
 8004066:	494f      	ldr	r1, [pc, #316]	; (80041a4 <HAL_I2C_Master_Receive+0x448>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fa07 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e091      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ec:	e042      	b.n	8004174 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fb1a 	bl	800472c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e04c      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d118      	bne.n	8004174 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f aec2 	bne.w	8003f02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e000      	b.n	800419c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3728      	adds	r7, #40	; 0x28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	00010004 	.word	0x00010004

080041a8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d006      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d003      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004204:	d108      	bne.n	8004218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00b      	b.n	8004230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b12      	cmp	r3, #18
 800421e:	d107      	bne.n	8004230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f91d 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004256:	d103      	bne.n	8004260 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e035      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426c:	d108      	bne.n	8004280 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e01b      	b.n	80042b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004280:	897b      	ldrh	r3, [r7, #10]
 8004282:	11db      	asrs	r3, r3, #7
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f063 030f 	orn	r3, r3, #15
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	490e      	ldr	r1, [pc, #56]	; (80042d8 <I2C_MasterRequestWrite+0xfc>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f943 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e010      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <I2C_MasterRequestWrite+0x100>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f933 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00010008 	.word	0x00010008
 80042dc:	00010002 	.word	0x00010002

080042e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	460b      	mov	r3, r1
 80042ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004304:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d006      	beq.n	800431a <I2C_MasterRequestRead+0x3a>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d003      	beq.n	800431a <I2C_MasterRequestRead+0x3a>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004318:	d108      	bne.n	800432c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e00b      	b.n	8004344 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	2b11      	cmp	r3, #17
 8004332:	d107      	bne.n	8004344 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f893 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d103      	bne.n	8004374 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e079      	b.n	800446c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	d108      	bne.n	8004394 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004382:	897b      	ldrh	r3, [r7, #10]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]
 8004392:	e05f      	b.n	8004454 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	11db      	asrs	r3, r3, #7
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0306 	and.w	r3, r3, #6
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f063 030f 	orn	r3, r3, #15
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4930      	ldr	r1, [pc, #192]	; (8004474 <I2C_MasterRequestRead+0x194>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8b9 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e054      	b.n	800446c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4929      	ldr	r1, [pc, #164]	; (8004478 <I2C_MasterRequestRead+0x198>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f8a9 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e044      	b.n	800446c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004406:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f831 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d103      	bne.n	8004438 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e017      	b.n	800446c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800443c:	897b      	ldrh	r3, [r7, #10]
 800443e:	11db      	asrs	r3, r3, #7
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0306 	and.w	r3, r3, #6
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f063 030e 	orn	r3, r3, #14
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4907      	ldr	r1, [pc, #28]	; (8004478 <I2C_MasterRequestRead+0x198>)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f865 	bl	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	00010008 	.word	0x00010008
 8004478:	00010002 	.word	0x00010002

0800447c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	e025      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004494:	d021      	beq.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fe fb77 	bl	8002b88 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e023      	b.n	8004522 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10d      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	e00c      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d0b6      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004538:	e051      	b.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d123      	bne.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004562:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e046      	b.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004598:	d021      	beq.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fe faf5 	bl	8002b88 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e020      	b.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10c      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e00b      	b.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d18d      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004634:	e02d      	b.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8ce 	bl	80047d8 <I2C_IsAcknowledgeFailed>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e02d      	b.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464c:	d021      	beq.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fe fa9b 	bl	8002b88 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d116      	bne.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d1ca      	bne.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b6:	e02d      	b.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f88d 	bl	80047d8 <I2C_IsAcknowledgeFailed>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e02d      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ce:	d021      	beq.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d0:	f7fe fa5a 	bl	8002b88 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d302      	bcc.n	80046e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e007      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b04      	cmp	r3, #4
 8004720:	d1ca      	bne.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004738:	e042      	b.n	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b10      	cmp	r3, #16
 8004746:	d119      	bne.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0210 	mvn.w	r2, #16
 8004750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e029      	b.n	80047d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477c:	f7fe fa04 	bl	8002b88 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e007      	b.n	80047d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d1b5      	bne.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d11b      	bne.n	8004828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_PWREx_EnableOverDrive+0x94>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004864:	f7fe f990 	bl	8002b88 <HAL_GetTick>
 8004868:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800486a:	e009      	b.n	8004880 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800486c:	f7fe f98c 	bl	8002b88 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800487a:	d901      	bls.n	8004880 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e01f      	b.n	80048c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004880:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488c:	d1ee      	bne.n	800486c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004894:	f7fe f978 	bl	8002b88 <HAL_GetTick>
 8004898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800489a:	e009      	b.n	80048b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800489c:	f7fe f974 	bl	8002b88 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048aa:	d901      	bls.n	80048b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e007      	b.n	80048c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048bc:	d1ee      	bne.n	800489c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	420e0040 	.word	0x420e0040
 80048d0:	40007000 	.word	0x40007000
 80048d4:	420e0044 	.word	0x420e0044

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0cc      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b68      	ldr	r3, [pc, #416]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d90c      	bls.n	8004914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b65      	ldr	r3, [pc, #404]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b63      	ldr	r3, [pc, #396]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b8      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004944:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a52      	ldr	r2, [pc, #328]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494d      	ldr	r1, [pc, #308]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d119      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e07f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d003      	beq.n	8004996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	2b03      	cmp	r3, #3
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e06f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e067      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b37      	ldr	r3, [pc, #220]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4934      	ldr	r1, [pc, #208]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fe f8de 	bl	8002b88 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fe f8da 	bl	8002b88 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e04f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d20c      	bcs.n	8004a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e032      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4916      	ldr	r1, [pc, #88]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	490e      	ldr	r1, [pc, #56]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a5e:	f000 f887 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490a      	ldr	r1, [pc, #40]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd fd36 	bl	80024f0 <HAL_InitTick>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08017024 	.word	0x08017024
 8004a9c:	20000010 	.word	0x20000010
 8004aa0:	20000014 	.word	0x20000014

08004aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000010 	.word	0x20000010

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ac0:	f7ff fff0 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0a9b      	lsrs	r3, r3, #10
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	08017034 	.word	0x08017034

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ae8:	f7ff ffdc 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0b5b      	lsrs	r3, r3, #13
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4903      	ldr	r1, [pc, #12]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	08017034 	.word	0x08017034

08004b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	220f      	movs	r2, #15
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0203 	and.w	r2, r3, #3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <HAL_RCC_GetClockConfig+0x5c>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_GetClockConfig+0x5c>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	08db      	lsrs	r3, r3, #3
 8004b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <HAL_RCC_GetClockConfig+0x60>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 020f 	and.w	r2, r3, #15
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40023c00 	.word	0x40023c00

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b0ae      	sub	sp, #184	; 0xb8
 8004b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b96:	4bcb      	ldr	r3, [pc, #812]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	f200 8206 	bhi.w	8004fb0 <HAL_RCC_GetSysClockFreq+0x440>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004fb1 	.word	0x08004fb1
 8004bb4:	08004fb1 	.word	0x08004fb1
 8004bb8:	08004fb1 	.word	0x08004fb1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004fb1 	.word	0x08004fb1
 8004bc4:	08004fb1 	.word	0x08004fb1
 8004bc8:	08004fb1 	.word	0x08004fb1
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004fb1 	.word	0x08004fb1
 8004bd4:	08004fb1 	.word	0x08004fb1
 8004bd8:	08004fb1 	.word	0x08004fb1
 8004bdc:	08004de1 	.word	0x08004de1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004be0:	4bb9      	ldr	r3, [pc, #740]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004be6:	e1e7      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004be8:	4bb8      	ldr	r3, [pc, #736]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bee:	e1e3      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf0:	4bb4      	ldr	r3, [pc, #720]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bfc:	4bb1      	ldr	r3, [pc, #708]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d071      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c08:	4bae      	ldr	r3, [pc, #696]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c2e:	4622      	mov	r2, r4
 8004c30:	462b      	mov	r3, r5
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c40:	0150      	lsls	r0, r2, #5
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4621      	mov	r1, r4
 8004c48:	1a51      	subs	r1, r2, r1
 8004c4a:	6439      	str	r1, [r7, #64]	; 0x40
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c52:	647b      	str	r3, [r7, #68]	; 0x44
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c60:	4649      	mov	r1, r9
 8004c62:	018b      	lsls	r3, r1, #6
 8004c64:	4641      	mov	r1, r8
 8004c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	018a      	lsls	r2, r1, #6
 8004c6e:	4641      	mov	r1, r8
 8004c70:	1a51      	subs	r1, r2, r1
 8004c72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c74:	4649      	mov	r1, r9
 8004c76:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c88:	4649      	mov	r1, r9
 8004c8a:	00cb      	lsls	r3, r1, #3
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c92:	4641      	mov	r1, r8
 8004c94:	00ca      	lsls	r2, r1, #3
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	eb42 0303 	adc.w	r3, r2, r3
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cb8:	4629      	mov	r1, r5
 8004cba:	024b      	lsls	r3, r1, #9
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	024a      	lsls	r2, r1, #9
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cdc:	f7fb ff6e 	bl	8000bbc <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cea:	e067      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cec:	4b75      	ldr	r3, [pc, #468]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cf8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d06:	2300      	movs	r3, #0
 8004d08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d0e:	4622      	mov	r2, r4
 8004d10:	462b      	mov	r3, r5
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f04f 0100 	mov.w	r1, #0
 8004d1a:	0159      	lsls	r1, r3, #5
 8004d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d20:	0150      	lsls	r0, r2, #5
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4621      	mov	r1, r4
 8004d28:	1a51      	subs	r1, r2, r1
 8004d2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d40:	4649      	mov	r1, r9
 8004d42:	018b      	lsls	r3, r1, #6
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	018a      	lsls	r2, r1, #6
 8004d4e:	4641      	mov	r1, r8
 8004d50:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d54:	4649      	mov	r1, r9
 8004d56:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d6e:	4692      	mov	sl, r2
 8004d70:	469b      	mov	fp, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	eb1a 0303 	adds.w	r3, sl, r3
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d8e:	4629      	mov	r1, r5
 8004d90:	028b      	lsls	r3, r1, #10
 8004d92:	4621      	mov	r1, r4
 8004d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d98:	4621      	mov	r1, r4
 8004d9a:	028a      	lsls	r2, r1, #10
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da4:	2200      	movs	r2, #0
 8004da6:	673b      	str	r3, [r7, #112]	; 0x70
 8004da8:	677a      	str	r2, [r7, #116]	; 0x74
 8004daa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dae:	f7fb ff05 	bl	8000bbc <__aeabi_uldivmod>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4613      	mov	r3, r2
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dbc:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dde:	e0eb      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de0:	4b38      	ldr	r3, [pc, #224]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d06b      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df8:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	2200      	movs	r2, #0
 8004e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e14:	4622      	mov	r2, r4
 8004e16:	462b      	mov	r3, r5
 8004e18:	f04f 0000 	mov.w	r0, #0
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	0159      	lsls	r1, r3, #5
 8004e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e26:	0150      	lsls	r0, r2, #5
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	1a51      	subs	r1, r2, r1
 8004e30:	61b9      	str	r1, [r7, #24]
 8004e32:	4629      	mov	r1, r5
 8004e34:	eb63 0301 	sbc.w	r3, r3, r1
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e46:	4659      	mov	r1, fp
 8004e48:	018b      	lsls	r3, r1, #6
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e50:	4651      	mov	r1, sl
 8004e52:	018a      	lsls	r2, r1, #6
 8004e54:	4651      	mov	r1, sl
 8004e56:	ebb2 0801 	subs.w	r8, r2, r1
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	eb63 0901 	sbc.w	r9, r3, r1
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e74:	4690      	mov	r8, r2
 8004e76:	4699      	mov	r9, r3
 8004e78:	4623      	mov	r3, r4
 8004e7a:	eb18 0303 	adds.w	r3, r8, r3
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	462b      	mov	r3, r5
 8004e82:	eb49 0303 	adc.w	r3, r9, r3
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e94:	4629      	mov	r1, r5
 8004e96:	024b      	lsls	r3, r1, #9
 8004e98:	4621      	mov	r1, r4
 8004e9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	024a      	lsls	r2, r1, #9
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eaa:	2200      	movs	r2, #0
 8004eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004eb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eb4:	f7fb fe82 	bl	8000bbc <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ec2:	e065      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x420>
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed0:	4b3d      	ldr	r3, [pc, #244]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	4611      	mov	r1, r2
 8004edc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004eea:	4642      	mov	r2, r8
 8004eec:	464b      	mov	r3, r9
 8004eee:	f04f 0000 	mov.w	r0, #0
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	0159      	lsls	r1, r3, #5
 8004ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efc:	0150      	lsls	r0, r2, #5
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4641      	mov	r1, r8
 8004f04:	1a51      	subs	r1, r2, r1
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	4649      	mov	r1, r9
 8004f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	018b      	lsls	r3, r1, #6
 8004f20:	4651      	mov	r1, sl
 8004f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f26:	4651      	mov	r1, sl
 8004f28:	018a      	lsls	r2, r1, #6
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	1a54      	subs	r4, r2, r1
 8004f2e:	4659      	mov	r1, fp
 8004f30:	eb63 0501 	sbc.w	r5, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	00eb      	lsls	r3, r5, #3
 8004f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f42:	00e2      	lsls	r2, r4, #3
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	464b      	mov	r3, r9
 8004f50:	eb45 0303 	adc.w	r3, r5, r3
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f62:	4629      	mov	r1, r5
 8004f64:	028b      	lsls	r3, r1, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	028a      	lsls	r2, r1, #10
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f78:	2200      	movs	r2, #0
 8004f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f82:	f7fb fe1b 	bl	8000bbc <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0f1b      	lsrs	r3, r3, #28
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fae:	e003      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	37b8      	adds	r7, #184	; 0xb8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	00f42400 	.word	0x00f42400

08004fd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e28d      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8083 	beq.w	80050f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ff0:	4b94      	ldr	r3, [pc, #592]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d019      	beq.n	8005030 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ffc:	4b91      	ldr	r3, [pc, #580]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005004:	2b08      	cmp	r3, #8
 8005006:	d106      	bne.n	8005016 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005008:	4b8e      	ldr	r3, [pc, #568]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005014:	d00c      	beq.n	8005030 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005016:	4b8b      	ldr	r3, [pc, #556]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d112      	bne.n	8005048 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005022:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502e:	d10b      	bne.n	8005048 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	4b84      	ldr	r3, [pc, #528]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05b      	beq.n	80050f4 <HAL_RCC_OscConfig+0x124>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d157      	bne.n	80050f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e25a      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005050:	d106      	bne.n	8005060 <HAL_RCC_OscConfig+0x90>
 8005052:	4b7c      	ldr	r3, [pc, #496]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7b      	ldr	r2, [pc, #492]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e01d      	b.n	800509c <HAL_RCC_OscConfig+0xcc>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0xb4>
 800506a:	4b76      	ldr	r3, [pc, #472]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a75      	ldr	r2, [pc, #468]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b73      	ldr	r3, [pc, #460]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a72      	ldr	r2, [pc, #456]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e00b      	b.n	800509c <HAL_RCC_OscConfig+0xcc>
 8005084:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a6e      	ldr	r2, [pc, #440]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 800508a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	4b6c      	ldr	r3, [pc, #432]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6b      	ldr	r2, [pc, #428]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d013      	beq.n	80050cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fd70 	bl	8002b88 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ac:	f7fd fd6c 	bl	8002b88 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	; 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e21f      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	4b61      	ldr	r3, [pc, #388]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0xdc>
 80050ca:	e014      	b.n	80050f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd fd5c 	bl	8002b88 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fd fd58 	bl	8002b88 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	; 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e20b      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	4b57      	ldr	r3, [pc, #348]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x104>
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d06f      	beq.n	80051e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005102:	4b50      	ldr	r3, [pc, #320]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b00      	cmp	r3, #0
 800510c:	d017      	beq.n	800513e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800510e:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005116:	2b08      	cmp	r3, #8
 8005118:	d105      	bne.n	8005126 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800511a:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005126:	4b47      	ldr	r3, [pc, #284]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d11c      	bne.n	800516c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005132:	4b44      	ldr	r3, [pc, #272]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d116      	bne.n	800516c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_RCC_OscConfig+0x186>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e1d3      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005156:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4937      	ldr	r1, [pc, #220]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516a:	e03a      	b.n	80051e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005174:	4b34      	ldr	r3, [pc, #208]	; (8005248 <HAL_RCC_OscConfig+0x278>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fd fd05 	bl	8002b88 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005182:	f7fd fd01 	bl	8002b88 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1b4      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a0:	4b28      	ldr	r3, [pc, #160]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4925      	ldr	r1, [pc, #148]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]
 80051b4:	e015      	b.n	80051e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <HAL_RCC_OscConfig+0x278>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7fd fce4 	bl	8002b88 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c4:	f7fd fce0 	bl	8002b88 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e193      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d036      	beq.n	800525c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_RCC_OscConfig+0x27c>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fc:	f7fd fcc4 	bl	8002b88 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005204:	f7fd fcc0 	bl	8002b88 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e173      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_OscConfig+0x274>)
 8005218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0x234>
 8005222:	e01b      	b.n	800525c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_OscConfig+0x27c>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fd fcad 	bl	8002b88 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005230:	e00e      	b.n	8005250 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005232:	f7fd fca9 	bl	8002b88 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d907      	bls.n	8005250 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e15c      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
 8005244:	40023800 	.word	0x40023800
 8005248:	42470000 	.word	0x42470000
 800524c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005250:	4b8a      	ldr	r3, [pc, #552]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1ea      	bne.n	8005232 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8097 	beq.w	8005398 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526e:	4b83      	ldr	r3, [pc, #524]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	4b7f      	ldr	r3, [pc, #508]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a7e      	ldr	r2, [pc, #504]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b7c      	ldr	r3, [pc, #496]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529a:	4b79      	ldr	r3, [pc, #484]	; (8005480 <HAL_RCC_OscConfig+0x4b0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d118      	bne.n	80052d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCC_OscConfig+0x4b0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a75      	ldr	r2, [pc, #468]	; (8005480 <HAL_RCC_OscConfig+0x4b0>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b2:	f7fd fc69 	bl	8002b88 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fd fc65 	bl	8002b88 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e118      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	4b6c      	ldr	r3, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x4b0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d106      	bne.n	80052ee <HAL_RCC_OscConfig+0x31e>
 80052e0:	4b66      	ldr	r3, [pc, #408]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	4a65      	ldr	r2, [pc, #404]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6713      	str	r3, [r2, #112]	; 0x70
 80052ec:	e01c      	b.n	8005328 <HAL_RCC_OscConfig+0x358>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x340>
 80052f6:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	4a60      	ldr	r2, [pc, #384]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 80052fc:	f043 0304 	orr.w	r3, r3, #4
 8005300:	6713      	str	r3, [r2, #112]	; 0x70
 8005302:	4b5e      	ldr	r3, [pc, #376]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	4a5d      	ldr	r2, [pc, #372]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6713      	str	r3, [r2, #112]	; 0x70
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0x358>
 8005310:	4b5a      	ldr	r3, [pc, #360]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	4a59      	ldr	r2, [pc, #356]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	6713      	str	r3, [r2, #112]	; 0x70
 800531c:	4b57      	ldr	r3, [pc, #348]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a56      	ldr	r2, [pc, #344]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005322:	f023 0304 	bic.w	r3, r3, #4
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005330:	f7fd fc2a 	bl	8002b88 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005336:	e00a      	b.n	800534e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7fd fc26 	bl	8002b88 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0d7      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534e:	4b4b      	ldr	r3, [pc, #300]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ee      	beq.n	8005338 <HAL_RCC_OscConfig+0x368>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fd fc14 	bl	8002b88 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005362:	e00a      	b.n	800537a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fd fc10 	bl	8002b88 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0c1      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ee      	bne.n	8005364 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538c:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	4a3a      	ldr	r2, [pc, #232]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80ad 	beq.w	80054fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053a2:	4b36      	ldr	r3, [pc, #216]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d060      	beq.n	8005470 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d145      	bne.n	8005442 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b6:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_RCC_OscConfig+0x4b4>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fd fbe4 	bl	8002b88 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fd fbe0 	bl	8002b88 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e093      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	3b01      	subs	r3, #1
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	071b      	lsls	r3, r3, #28
 800540e:	491b      	ldr	r1, [pc, #108]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005414:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCC_OscConfig+0x4b4>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fd fbb5 	bl	8002b88 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005422:	f7fd fbb1 	bl	8002b88 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e064      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x452>
 8005440:	e05c      	b.n	80054fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <HAL_RCC_OscConfig+0x4b4>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd fb9e 	bl	8002b88 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005450:	f7fd fb9a 	bl	8002b88 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e04d      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	4b06      	ldr	r3, [pc, #24]	; (800547c <HAL_RCC_OscConfig+0x4ac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x480>
 800546e:	e045      	b.n	80054fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e040      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
 800547c:	40023800 	.word	0x40023800
 8005480:	40007000 	.word	0x40007000
 8005484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005488:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <HAL_RCC_OscConfig+0x538>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d030      	beq.n	80054f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d129      	bne.n	80054f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d122      	bne.n	80054f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d119      	bne.n	80054f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	3b01      	subs	r3, #1
 80054d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d10f      	bne.n	80054f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800

0800550c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e041      	b.n	80055a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fd f9be 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f000 fa96 	bl	8005a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d001      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e04e      	b.n	8005662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a23      	ldr	r2, [pc, #140]	; (8005670 <HAL_TIM_Base_Start_IT+0xc4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d01d      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1f      	ldr	r2, [pc, #124]	; (8005674 <HAL_TIM_Base_Start_IT+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <HAL_TIM_Base_Start_IT+0xcc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <HAL_TIM_Base_Start_IT+0xd0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <HAL_TIM_Base_Start_IT+0xd4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <HAL_TIM_Base_Start_IT+0xd8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x80>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_TIM_Base_Start_IT+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d111      	bne.n	8005650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d010      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	e007      	b.n	8005660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40010400 	.word	0x40010400
 8005684:	40014000 	.word	0x40014000
 8005688:	40001800 	.word	0x40001800

0800568c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0202 	mvn.w	r2, #2
 80056b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9b5 	bl	8005a3e <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f9a7 	bl	8005a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f9b8 	bl	8005a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0204 	mvn.w	r2, #4
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f98b 	bl	8005a3e <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f97d 	bl	8005a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f98e 	bl	8005a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b08      	cmp	r3, #8
 8005748:	d122      	bne.n	8005790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d11b      	bne.n	8005790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0208 	mvn.w	r2, #8
 8005760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2204      	movs	r2, #4
 8005766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f961 	bl	8005a3e <HAL_TIM_IC_CaptureCallback>
 800577c:	e005      	b.n	800578a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f953 	bl	8005a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f964 	bl	8005a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b10      	cmp	r3, #16
 800579c:	d122      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d11b      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0210 	mvn.w	r2, #16
 80057b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2208      	movs	r2, #8
 80057ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f937 	bl	8005a3e <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f929 	bl	8005a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f93a 	bl	8005a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d10e      	bne.n	8005810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0201 	mvn.w	r2, #1
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc fcc6 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	2b80      	cmp	r3, #128	; 0x80
 800581c:	d10e      	bne.n	800583c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	2b80      	cmp	r3, #128	; 0x80
 800582a:	d107      	bne.n	800583c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fae0 	bl	8005dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d10e      	bne.n	8005868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d107      	bne.n	8005868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8ff 	bl	8005a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b20      	cmp	r3, #32
 8005874:	d10e      	bne.n	8005894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b20      	cmp	r3, #32
 8005882:	d107      	bne.n	8005894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0220 	mvn.w	r2, #32
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 faaa 	bl	8005de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0b4      	b.n	8005a22 <HAL_TIM_ConfigClockSource+0x186>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f0:	d03e      	beq.n	8005970 <HAL_TIM_ConfigClockSource+0xd4>
 80058f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f6:	f200 8087 	bhi.w	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fe:	f000 8086 	beq.w	8005a0e <HAL_TIM_ConfigClockSource+0x172>
 8005902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005906:	d87f      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b70      	cmp	r3, #112	; 0x70
 800590a:	d01a      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0xa6>
 800590c:	2b70      	cmp	r3, #112	; 0x70
 800590e:	d87b      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b60      	cmp	r3, #96	; 0x60
 8005912:	d050      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005914:	2b60      	cmp	r3, #96	; 0x60
 8005916:	d877      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b50      	cmp	r3, #80	; 0x50
 800591a:	d03c      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0xfa>
 800591c:	2b50      	cmp	r3, #80	; 0x50
 800591e:	d873      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d058      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d86f      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b30      	cmp	r3, #48	; 0x30
 800592a:	d064      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x15a>
 800592c:	2b30      	cmp	r3, #48	; 0x30
 800592e:	d86b      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b20      	cmp	r3, #32
 8005932:	d060      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	2b20      	cmp	r3, #32
 8005936:	d867      	bhi.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d05c      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x15a>
 800593c:	2b10      	cmp	r3, #16
 800593e:	d05a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005940:	e062      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6899      	ldr	r1, [r3, #8]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f000 f9ad 	bl	8005cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	609a      	str	r2, [r3, #8]
      break;
 800596e:	e04f      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6899      	ldr	r1, [r3, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f000 f996 	bl	8005cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005992:	609a      	str	r2, [r3, #8]
      break;
 8005994:	e03c      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f000 f90a 	bl	8005bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2150      	movs	r1, #80	; 0x50
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f963 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80059b4:	e02c      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6859      	ldr	r1, [r3, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f000 f929 	bl	8005c1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2160      	movs	r1, #96	; 0x60
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f953 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80059d4:	e01c      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f000 f8ea 	bl	8005bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2140      	movs	r1, #64	; 0x40
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f943 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80059f4:	e00c      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f000 f93a 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 8005a06:	e003      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0c:	e000      	b.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a40      	ldr	r2, [pc, #256]	; (8005b90 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d00f      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3d      	ldr	r2, [pc, #244]	; (8005b94 <TIM_Base_SetConfig+0x118>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3c      	ldr	r2, [pc, #240]	; (8005b98 <TIM_Base_SetConfig+0x11c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3b      	ldr	r2, [pc, #236]	; (8005b9c <TIM_Base_SetConfig+0x120>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3a      	ldr	r2, [pc, #232]	; (8005ba0 <TIM_Base_SetConfig+0x124>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2f      	ldr	r2, [pc, #188]	; (8005b90 <TIM_Base_SetConfig+0x114>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d02b      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d027      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <TIM_Base_SetConfig+0x118>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d023      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2b      	ldr	r2, [pc, #172]	; (8005b98 <TIM_Base_SetConfig+0x11c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01f      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2a      	ldr	r2, [pc, #168]	; (8005b9c <TIM_Base_SetConfig+0x120>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01b      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a29      	ldr	r2, [pc, #164]	; (8005ba0 <TIM_Base_SetConfig+0x124>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d017      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a28      	ldr	r2, [pc, #160]	; (8005ba4 <TIM_Base_SetConfig+0x128>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <TIM_Base_SetConfig+0x12c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00f      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a26      	ldr	r2, [pc, #152]	; (8005bac <TIM_Base_SetConfig+0x130>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00b      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a25      	ldr	r2, [pc, #148]	; (8005bb0 <TIM_Base_SetConfig+0x134>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a24      	ldr	r2, [pc, #144]	; (8005bb4 <TIM_Base_SetConfig+0x138>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <TIM_Base_SetConfig+0x13c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d108      	bne.n	8005b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a0a      	ldr	r2, [pc, #40]	; (8005b90 <TIM_Base_SetConfig+0x114>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0xf8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a0c      	ldr	r2, [pc, #48]	; (8005ba0 <TIM_Base_SetConfig+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d103      	bne.n	8005b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	615a      	str	r2, [r3, #20]
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40010400 	.word	0x40010400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800
 8005bb0:	40001800 	.word	0x40001800
 8005bb4:	40001c00 	.word	0x40001c00
 8005bb8:	40002000 	.word	0x40002000

08005bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 030a 	bic.w	r3, r3, #10
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0210 	bic.w	r2, r3, #16
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	031b      	lsls	r3, r3, #12
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f043 0307 	orr.w	r3, r3, #7
 8005c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e05a      	b.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a15      	ldr	r2, [pc, #84]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10c      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40010400 	.word	0x40010400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40001800 	.word	0x40001800

08005de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e03f      	b.n	8005ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc fd8e 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 ffd7 	bl	8006e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08c      	sub	sp, #48	; 0x30
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d165      	bne.n	8005f92 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_UART_Transmit_DMA+0x26>
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e05e      	b.n	8005f94 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Transmit_DMA+0x38>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e057      	b.n	8005f94 <HAL_UART_Transmit_DMA+0xe8>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2221      	movs	r2, #33	; 0x21
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_UART_Transmit_DMA+0xf0>)
 8005f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_UART_Transmit_DMA+0xf4>)
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <HAL_UART_Transmit_DMA+0xf8>)
 8005f22:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f28:	2200      	movs	r2, #0
 8005f2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	461a      	mov	r2, r3
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	f7fc ffe0 	bl	8002f08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f50:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f7c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6a39      	ldr	r1, [r7, #32]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e000      	b.n	8005f94 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3730      	adds	r7, #48	; 0x30
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	080066a1 	.word	0x080066a1
 8005fa0:	0800673b 	.word	0x0800673b
 8005fa4:	080068b3 	.word	0x080068b3

08005fa8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d11d      	bne.n	8005ffe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_UART_Receive_DMA+0x26>
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e016      	b.n	8006000 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_UART_Receive_DMA+0x38>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e00f      	b.n	8006000 <HAL_UART_Receive_DMA+0x58>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fca7 	bl	8006948 <UART_Start_Receive_DMA>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	e000      	b.n	8006000 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b090      	sub	sp, #64	; 0x40
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006010:	2300      	movs	r3, #0
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	bf0c      	ite	eq
 8006022:	2301      	moveq	r3, #1
 8006024:	2300      	movne	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b21      	cmp	r3, #33	; 0x21
 8006034:	d128      	bne.n	8006088 <HAL_UART_DMAStop+0x80>
 8006036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d025      	beq.n	8006088 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3314      	adds	r3, #20
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	623b      	str	r3, [r7, #32]
   return(result);
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	63bb      	str	r3, [r7, #56]	; 0x38
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3314      	adds	r3, #20
 800605a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605c:	633a      	str	r2, [r7, #48]	; 0x30
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e5      	bne.n	800603c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607c:	4618      	mov	r0, r3
 800607e:	f7fc ff9b 	bl	8002fb8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fcfe 	bl	8006a84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	bf0c      	ite	eq
 8006096:	2301      	moveq	r3, #1
 8006098:	2300      	movne	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b22      	cmp	r3, #34	; 0x22
 80060a8:	d128      	bne.n	80060fc <HAL_UART_DMAStop+0xf4>
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d025      	beq.n	80060fc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060d0:	61fa      	str	r2, [r7, #28]
 80060d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69b9      	ldr	r1, [r7, #24]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	617b      	str	r3, [r7, #20]
   return(result);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fc ff61 	bl	8002fb8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fcec 	bl	8006ad4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3740      	adds	r7, #64	; 0x40
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b0ba      	sub	sp, #232	; 0xe8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <HAL_UART_IRQHandler+0x66>
 800615a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fd93 	bl	8006c92 <UART_Receive_IT>
      return;
 800616c:	e256      	b.n	800661c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800616e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80de 	beq.w	8006334 <HAL_UART_IRQHandler+0x22c>
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006188:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80d1 	beq.w	8006334 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_IRQHandler+0xae>
 800619e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f043 0201 	orr.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_UART_IRQHandler+0xd2>
 80061c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0202 	orr.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xf6>
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d011      	beq.n	800622e <HAL_UART_IRQHandler+0x126>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0208 	orr.w	r2, r3, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 81ed 	beq.w	8006612 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_UART_IRQHandler+0x14e>
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd1e 	bl	8006c92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <HAL_UART_IRQHandler+0x17a>
 800627a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04f      	beq.n	8006322 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc26 	bl	8006ad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d141      	bne.n	800631a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1d9      	bne.n	8006296 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d013      	beq.n	8006312 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	4a7d      	ldr	r2, [pc, #500]	; (80064e4 <HAL_UART_IRQHandler+0x3dc>)
 80062f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fc fece 	bl	8003098 <HAL_DMA_Abort_IT>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006310:	e00e      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9ae 	bl	8006674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e00a      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f9aa 	bl	8006674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e006      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f9a6 	bl	8006674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800632e:	e170      	b.n	8006612 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	bf00      	nop
    return;
 8006332:	e16e      	b.n	8006612 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	2b01      	cmp	r3, #1
 800633a:	f040 814a 	bne.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8143 	beq.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 813c 	beq.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	f040 80b4 	bne.w	80064e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800638c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8140 	beq.w	8006616 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800639a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800639e:	429a      	cmp	r2, r3
 80063a0:	f080 8139 	bcs.w	8006616 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	f000 8088 	beq.w	80064ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1d9      	bne.n	80063ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800642a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800642e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006432:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800643c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e1      	bne.n	8006406 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006468:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800646c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e3      	bne.n	8006442 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649a:	f023 0310 	bic.w	r3, r3, #16
 800649e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e3      	bne.n	8006488 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc fd77 	bl	8002fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8d4 	bl	8006688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064e0:	e099      	b.n	8006616 <HAL_UART_IRQHandler+0x50e>
 80064e2:	bf00      	nop
 80064e4:	08006b9b 	.word	0x08006b9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 808b 	beq.w	800661a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8086 	beq.w	800661a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006532:	647a      	str	r2, [r7, #68]	; 0x44
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3314      	adds	r3, #20
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	623b      	str	r3, [r7, #32]
   return(result);
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800656a:	633a      	str	r2, [r7, #48]	; 0x30
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e3      	bne.n	8006546 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60fb      	str	r3, [r7, #12]
   return(result);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065b0:	61fa      	str	r2, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	617b      	str	r3, [r7, #20]
   return(result);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e3      	bne.n	800658c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f85c 	bl	8006688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d0:	e023      	b.n	800661a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_UART_IRQHandler+0x4ea>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fae9 	bl	8006bc2 <UART_Transmit_IT>
    return;
 80065f0:	e014      	b.n	800661c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <HAL_UART_IRQHandler+0x514>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb29 	bl	8006c62 <UART_EndTransmit_IT>
    return;
 8006610:	e004      	b.n	800661c <HAL_UART_IRQHandler+0x514>
    return;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <HAL_UART_IRQHandler+0x514>
      return;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_UART_IRQHandler+0x514>
      return;
 800661a:	bf00      	nop
  }
}
 800661c:	37e8      	adds	r7, #232	; 0xe8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop

08006624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b090      	sub	sp, #64	; 0x40
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d137      	bne.n	800672c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	2200      	movs	r2, #0
 80066c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	623b      	str	r3, [r7, #32]
   return(result);
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3314      	adds	r3, #20
 80066e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066e2:	633a      	str	r2, [r7, #48]	; 0x30
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e5      	bne.n	80066c2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	60fb      	str	r3, [r7, #12]
   return(result);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
 800670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006716:	61fa      	str	r2, [r7, #28]
 8006718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	617b      	str	r3, [r7, #20]
   return(result);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e5      	bne.n	80066f6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800672a:	e002      	b.n	8006732 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800672c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800672e:	f7ff ff79 	bl	8006624 <HAL_UART_TxCpltCallback>
}
 8006732:	bf00      	nop
 8006734:	3740      	adds	r7, #64	; 0x40
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff75 	bl	8006638 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b09c      	sub	sp, #112	; 0x70
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d172      	bne.n	8006858 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006774:	2200      	movs	r2, #0
 8006776:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006798:	65ba      	str	r2, [r7, #88]	; 0x58
 800679a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800679e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e5      	bne.n	8006778 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3314      	adds	r3, #20
 80067b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	667b      	str	r3, [r7, #100]	; 0x64
 80067c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067cc:	647a      	str	r2, [r7, #68]	; 0x44
 80067ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3314      	adds	r3, #20
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	623b      	str	r3, [r7, #32]
   return(result);
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f6:	663b      	str	r3, [r7, #96]	; 0x60
 80067f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006800:	633a      	str	r2, [r7, #48]	; 0x30
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	2b01      	cmp	r3, #1
 8006822:	d119      	bne.n	8006858 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	60fb      	str	r3, [r7, #12]
   return(result);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0310 	bic.w	r3, r3, #16
 800683a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800683c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006844:	61fa      	str	r2, [r7, #28]
 8006846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	69b9      	ldr	r1, [r7, #24]
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	617b      	str	r3, [r7, #20]
   return(result);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e5      	bne.n	8006824 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006864:	4619      	mov	r1, r3
 8006866:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006868:	f7ff ff0e 	bl	8006688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800686c:	e002      	b.n	8006874 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800686e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006870:	f7ff feec 	bl	800664c <HAL_UART_RxCpltCallback>
}
 8006874:	bf00      	nop
 8006876:	3770      	adds	r7, #112	; 0x70
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	2b01      	cmp	r3, #1
 8006890:	d108      	bne.n	80068a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	4619      	mov	r1, r3
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fef3 	bl	8006688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068a2:	e002      	b.n	80068aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff fedb 	bl	8006660 <HAL_UART_RxHalfCpltCallback>
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b21      	cmp	r3, #33	; 0x21
 80068e4:	d108      	bne.n	80068f8 <UART_DMAError+0x46>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068f2:	68b8      	ldr	r0, [r7, #8]
 80068f4:	f000 f8c6 	bl	8006a84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b22      	cmp	r3, #34	; 0x22
 8006918:	d108      	bne.n	800692c <UART_DMAError+0x7a>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006926:	68b8      	ldr	r0, [r7, #8]
 8006928:	f000 f8d4 	bl	8006ad4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	f043 0210 	orr.w	r2, r3, #16
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006938:	68b8      	ldr	r0, [r7, #8]
 800693a:	f7ff fe9b 	bl	8006674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b098      	sub	sp, #96	; 0x60
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2222      	movs	r2, #34	; 0x22
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	4a40      	ldr	r2, [pc, #256]	; (8006a78 <UART_Start_Receive_DMA+0x130>)
 8006976:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	4a3f      	ldr	r2, [pc, #252]	; (8006a7c <UART_Start_Receive_DMA+0x134>)
 800697e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	4a3e      	ldr	r2, [pc, #248]	; (8006a80 <UART_Start_Receive_DMA+0x138>)
 8006986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	2200      	movs	r2, #0
 800698e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006990:	f107 0308 	add.w	r3, r7, #8
 8006994:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	f7fc faae 	bl	8002f08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d019      	beq.n	8006a06 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	330c      	adds	r3, #12
 80069d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80069f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e5      	bne.n	80069d2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3314      	adds	r3, #20
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	657b      	str	r3, [r7, #84]	; 0x54
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3314      	adds	r3, #20
 8006a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a26:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e5      	bne.n	8006a06 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a50:	653b      	str	r3, [r7, #80]	; 0x50
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6a39      	ldr	r1, [r7, #32]
 8006a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3760      	adds	r7, #96	; 0x60
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	08006757 	.word	0x08006757
 8006a7c:	0800687d 	.word	0x0800687d
 8006a80:	080068b3 	.word	0x080068b3

08006a84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	; 0x24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006ac8:	bf00      	nop
 8006aca:	3724      	adds	r7, #36	; 0x24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b095      	sub	sp, #84	; 0x54
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006afc:	643a      	str	r2, [r7, #64]	; 0x40
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d119      	bne.n	8006b80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0310 	bic.w	r3, r3, #16
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b6c:	61ba      	str	r2, [r7, #24]
 8006b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e5      	bne.n	8006b4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b8e:	bf00      	nop
 8006b90:	3754      	adds	r7, #84	; 0x54
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fd5d 	bl	8006674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b21      	cmp	r3, #33	; 0x21
 8006bd4:	d13e      	bne.n	8006c54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d114      	bne.n	8006c0a <UART_Transmit_IT+0x48>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d110      	bne.n	8006c0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	621a      	str	r2, [r3, #32]
 8006c08:	e008      	b.n	8006c1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	1c59      	adds	r1, r3, #1
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6211      	str	r1, [r2, #32]
 8006c14:	781a      	ldrb	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10f      	bne.n	8006c50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fcce 	bl	8006624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b08c      	sub	sp, #48	; 0x30
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b22      	cmp	r3, #34	; 0x22
 8006ca4:	f040 80ab 	bne.w	8006dfe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb0:	d117      	bne.n	8006ce2 <UART_Receive_IT+0x50>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d113      	bne.n	8006ce2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	1c9a      	adds	r2, r3, #2
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
 8006ce0:	e026      	b.n	8006d30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d007      	beq.n	8006d06 <UART_Receive_IT+0x74>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <UART_Receive_IT+0x82>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e008      	b.n	8006d26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d15a      	bne.n	8006dfa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0220 	bic.w	r2, r2, #32
 8006d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d135      	bne.n	8006df0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f023 0310 	bic.w	r3, r3, #16
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006daa:	623a      	str	r2, [r7, #32]
 8006dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	69f9      	ldr	r1, [r7, #28]
 8006db0:	6a3a      	ldr	r2, [r7, #32]
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d10a      	bne.n	8006de2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fc4d 	bl	8006688 <HAL_UARTEx_RxEventCallback>
 8006dee:	e002      	b.n	8006df6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff fc2b 	bl	800664c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e002      	b.n	8006e00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e000      	b.n	8006e00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3730      	adds	r7, #48	; 0x30
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e0c:	b0c0      	sub	sp, #256	; 0x100
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e24:	68d9      	ldr	r1, [r3, #12]
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	ea40 0301 	orr.w	r3, r0, r1
 8006e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e60:	f021 010c 	bic.w	r1, r1, #12
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e82:	6999      	ldr	r1, [r3, #24]
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	ea40 0301 	orr.w	r3, r0, r1
 8006e8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b8f      	ldr	r3, [pc, #572]	; (80070d4 <UART_SetConfig+0x2cc>)
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d005      	beq.n	8006ea8 <UART_SetConfig+0xa0>
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b8d      	ldr	r3, [pc, #564]	; (80070d8 <UART_SetConfig+0x2d0>)
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d104      	bne.n	8006eb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7fd fe1c 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8006eac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006eb0:	e003      	b.n	8006eba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7fd fe03 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8006eb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec4:	f040 810c 	bne.w	80070e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ed2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006eda:	4622      	mov	r2, r4
 8006edc:	462b      	mov	r3, r5
 8006ede:	1891      	adds	r1, r2, r2
 8006ee0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ee2:	415b      	adcs	r3, r3
 8006ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006eea:	4621      	mov	r1, r4
 8006eec:	eb12 0801 	adds.w	r8, r2, r1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	eb43 0901 	adc.w	r9, r3, r1
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f0a:	4690      	mov	r8, r2
 8006f0c:	4699      	mov	r9, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	eb18 0303 	adds.w	r3, r8, r3
 8006f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f18:	462b      	mov	r3, r5
 8006f1a:	eb49 0303 	adc.w	r3, r9, r3
 8006f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f36:	460b      	mov	r3, r1
 8006f38:	18db      	adds	r3, r3, r3
 8006f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	eb42 0303 	adc.w	r3, r2, r3
 8006f42:	657b      	str	r3, [r7, #84]	; 0x54
 8006f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f4c:	f7f9 fe36 	bl	8000bbc <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4b61      	ldr	r3, [pc, #388]	; (80070dc <UART_SetConfig+0x2d4>)
 8006f56:	fba3 2302 	umull	r2, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	011c      	lsls	r4, r3, #4
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	1891      	adds	r1, r2, r2
 8006f76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f78:	415b      	adcs	r3, r3
 8006f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f80:	4641      	mov	r1, r8
 8006f82:	eb12 0a01 	adds.w	sl, r2, r1
 8006f86:	4649      	mov	r1, r9
 8006f88:	eb43 0b01 	adc.w	fp, r3, r1
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa0:	4692      	mov	sl, r2
 8006fa2:	469b      	mov	fp, r3
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8006faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	18db      	adds	r3, r3, r3
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fe2:	f7f9 fdeb 	bl	8000bbc <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <UART_SetConfig+0x2d4>)
 8006fee:	fba3 2301 	umull	r2, r3, r3, r1
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2264      	movs	r2, #100	; 0x64
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	1acb      	subs	r3, r1, r3
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007002:	4b36      	ldr	r3, [pc, #216]	; (80070dc <UART_SetConfig+0x2d4>)
 8007004:	fba3 2302 	umull	r2, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007010:	441c      	add	r4, r3
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800701c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007020:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	63b9      	str	r1, [r7, #56]	; 0x38
 800702c:	415b      	adcs	r3, r3
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007034:	4641      	mov	r1, r8
 8007036:	1851      	adds	r1, r2, r1
 8007038:	6339      	str	r1, [r7, #48]	; 0x30
 800703a:	4649      	mov	r1, r9
 800703c:	414b      	adcs	r3, r1
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800704c:	4659      	mov	r1, fp
 800704e:	00cb      	lsls	r3, r1, #3
 8007050:	4651      	mov	r1, sl
 8007052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007056:	4651      	mov	r1, sl
 8007058:	00ca      	lsls	r2, r1, #3
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	4603      	mov	r3, r0
 8007060:	4642      	mov	r2, r8
 8007062:	189b      	adds	r3, r3, r2
 8007064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007068:	464b      	mov	r3, r9
 800706a:	460a      	mov	r2, r1
 800706c:	eb42 0303 	adc.w	r3, r2, r3
 8007070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007080:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007088:	460b      	mov	r3, r1
 800708a:	18db      	adds	r3, r3, r3
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
 800708e:	4613      	mov	r3, r2
 8007090:	eb42 0303 	adc.w	r3, r2, r3
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800709a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800709e:	f7f9 fd8d 	bl	8000bbc <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <UART_SetConfig+0x2d4>)
 80070a8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	2164      	movs	r1, #100	; 0x64
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	3332      	adds	r3, #50	; 0x32
 80070ba:	4a08      	ldr	r2, [pc, #32]	; (80070dc <UART_SetConfig+0x2d4>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	f003 0207 	and.w	r2, r3, #7
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4422      	add	r2, r4
 80070ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070d0:	e105      	b.n	80072de <UART_SetConfig+0x4d6>
 80070d2:	bf00      	nop
 80070d4:	40011000 	.word	0x40011000
 80070d8:	40011400 	.word	0x40011400
 80070dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070f2:	4642      	mov	r2, r8
 80070f4:	464b      	mov	r3, r9
 80070f6:	1891      	adds	r1, r2, r2
 80070f8:	6239      	str	r1, [r7, #32]
 80070fa:	415b      	adcs	r3, r3
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
 80070fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007102:	4641      	mov	r1, r8
 8007104:	1854      	adds	r4, r2, r1
 8007106:	4649      	mov	r1, r9
 8007108:	eb43 0501 	adc.w	r5, r3, r1
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	00eb      	lsls	r3, r5, #3
 8007116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800711a:	00e2      	lsls	r2, r4, #3
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	4643      	mov	r3, r8
 8007122:	18e3      	adds	r3, r4, r3
 8007124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007128:	464b      	mov	r3, r9
 800712a:	eb45 0303 	adc.w	r3, r5, r3
 800712e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800713e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800714e:	4629      	mov	r1, r5
 8007150:	008b      	lsls	r3, r1, #2
 8007152:	4621      	mov	r1, r4
 8007154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007158:	4621      	mov	r1, r4
 800715a:	008a      	lsls	r2, r1, #2
 800715c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007160:	f7f9 fd2c 	bl	8000bbc <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4b60      	ldr	r3, [pc, #384]	; (80072ec <UART_SetConfig+0x4e4>)
 800716a:	fba3 2302 	umull	r2, r3, r3, r2
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	011c      	lsls	r4, r3, #4
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800717c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007180:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	1891      	adds	r1, r2, r2
 800718a:	61b9      	str	r1, [r7, #24]
 800718c:	415b      	adcs	r3, r3
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007194:	4641      	mov	r1, r8
 8007196:	1851      	adds	r1, r2, r1
 8007198:	6139      	str	r1, [r7, #16]
 800719a:	4649      	mov	r1, r9
 800719c:	414b      	adcs	r3, r1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071ac:	4659      	mov	r1, fp
 80071ae:	00cb      	lsls	r3, r1, #3
 80071b0:	4651      	mov	r1, sl
 80071b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b6:	4651      	mov	r1, sl
 80071b8:	00ca      	lsls	r2, r1, #3
 80071ba:	4610      	mov	r0, r2
 80071bc:	4619      	mov	r1, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	4642      	mov	r2, r8
 80071c2:	189b      	adds	r3, r3, r2
 80071c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071c8:	464b      	mov	r3, r9
 80071ca:	460a      	mov	r2, r1
 80071cc:	eb42 0303 	adc.w	r3, r2, r3
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80071de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071ec:	4649      	mov	r1, r9
 80071ee:	008b      	lsls	r3, r1, #2
 80071f0:	4641      	mov	r1, r8
 80071f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f6:	4641      	mov	r1, r8
 80071f8:	008a      	lsls	r2, r1, #2
 80071fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071fe:	f7f9 fcdd 	bl	8000bbc <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4b39      	ldr	r3, [pc, #228]	; (80072ec <UART_SetConfig+0x4e4>)
 8007208:	fba3 1302 	umull	r1, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	2164      	movs	r1, #100	; 0x64
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	3332      	adds	r3, #50	; 0x32
 800721a:	4a34      	ldr	r2, [pc, #208]	; (80072ec <UART_SetConfig+0x4e4>)
 800721c:	fba2 2303 	umull	r2, r3, r2, r3
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007226:	441c      	add	r4, r3
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	2200      	movs	r2, #0
 800722e:	673b      	str	r3, [r7, #112]	; 0x70
 8007230:	677a      	str	r2, [r7, #116]	; 0x74
 8007232:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	1891      	adds	r1, r2, r2
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	415b      	adcs	r3, r3
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007246:	4641      	mov	r1, r8
 8007248:	1851      	adds	r1, r2, r1
 800724a:	6039      	str	r1, [r7, #0]
 800724c:	4649      	mov	r1, r9
 800724e:	414b      	adcs	r3, r1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800725e:	4659      	mov	r1, fp
 8007260:	00cb      	lsls	r3, r1, #3
 8007262:	4651      	mov	r1, sl
 8007264:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007268:	4651      	mov	r1, sl
 800726a:	00ca      	lsls	r2, r1, #3
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	4603      	mov	r3, r0
 8007272:	4642      	mov	r2, r8
 8007274:	189b      	adds	r3, r3, r2
 8007276:	66bb      	str	r3, [r7, #104]	; 0x68
 8007278:	464b      	mov	r3, r9
 800727a:	460a      	mov	r2, r1
 800727c:	eb42 0303 	adc.w	r3, r2, r3
 8007280:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	663b      	str	r3, [r7, #96]	; 0x60
 800728c:	667a      	str	r2, [r7, #100]	; 0x64
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800729a:	4649      	mov	r1, r9
 800729c:	008b      	lsls	r3, r1, #2
 800729e:	4641      	mov	r1, r8
 80072a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072a4:	4641      	mov	r1, r8
 80072a6:	008a      	lsls	r2, r1, #2
 80072a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072ac:	f7f9 fc86 	bl	8000bbc <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <UART_SetConfig+0x4e4>)
 80072b6:	fba3 1302 	umull	r1, r3, r3, r2
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	2164      	movs	r1, #100	; 0x64
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	3332      	adds	r3, #50	; 0x32
 80072c8:	4a08      	ldr	r2, [pc, #32]	; (80072ec <UART_SetConfig+0x4e4>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4422      	add	r2, r4
 80072dc:	609a      	str	r2, [r3, #8]
}
 80072de:	bf00      	nop
 80072e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072e4:	46bd      	mov	sp, r7
 80072e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ea:	bf00      	nop
 80072ec:	51eb851f 	.word	0x51eb851f

080072f0 <__NVIC_SetPriority>:
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007300:	2b00      	cmp	r3, #0
 8007302:	db0a      	blt.n	800731a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	b2da      	uxtb	r2, r3
 8007308:	490c      	ldr	r1, [pc, #48]	; (800733c <__NVIC_SetPriority+0x4c>)
 800730a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730e:	0112      	lsls	r2, r2, #4
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	440b      	add	r3, r1
 8007314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007318:	e00a      	b.n	8007330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	4908      	ldr	r1, [pc, #32]	; (8007340 <__NVIC_SetPriority+0x50>)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	3b04      	subs	r3, #4
 8007328:	0112      	lsls	r2, r2, #4
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	440b      	add	r3, r1
 800732e:	761a      	strb	r2, [r3, #24]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	e000e100 	.word	0xe000e100
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <SysTick_Handler+0x1c>)
 800734a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800734c:	f001 fd24 	bl	8008d98 <xTaskGetSchedulerState>
 8007350:	4603      	mov	r3, r0
 8007352:	2b01      	cmp	r3, #1
 8007354:	d001      	beq.n	800735a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007356:	f002 fb0f 	bl	8009978 <xPortSysTickHandler>
  }
}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	e000e010 	.word	0xe000e010

08007364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007368:	2100      	movs	r1, #0
 800736a:	f06f 0004 	mvn.w	r0, #4
 800736e:	f7ff ffbf 	bl	80072f0 <__NVIC_SetPriority>
#endif
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737e:	f3ef 8305 	mrs	r3, IPSR
 8007382:	603b      	str	r3, [r7, #0]
  return(result);
 8007384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800738a:	f06f 0305 	mvn.w	r3, #5
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	e00c      	b.n	80073ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <osKernelInitialize+0x44>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <osKernelInitialize+0x44>)
 800739c:	2201      	movs	r2, #1
 800739e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	e002      	b.n	80073ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073ac:	687b      	ldr	r3, [r7, #4]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20007710 	.word	0x20007710

080073c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c6:	f3ef 8305 	mrs	r3, IPSR
 80073ca:	603b      	str	r3, [r7, #0]
  return(result);
 80073cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <osKernelStart+0x1a>
    stat = osErrorISR;
 80073d2:	f06f 0305 	mvn.w	r3, #5
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	e010      	b.n	80073fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <osKernelStart+0x48>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d109      	bne.n	80073f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073e2:	f7ff ffbf 	bl	8007364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <osKernelStart+0x48>)
 80073e8:	2202      	movs	r2, #2
 80073ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073ec:	f001 f866 	bl	80084bc <vTaskStartScheduler>
      stat = osOK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	607b      	str	r3, [r7, #4]
 80073f4:	e002      	b.n	80073fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20007710 	.word	0x20007710

0800740c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b08e      	sub	sp, #56	; 0x38
 8007410:	af04      	add	r7, sp, #16
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800741c:	f3ef 8305 	mrs	r3, IPSR
 8007420:	617b      	str	r3, [r7, #20]
  return(result);
 8007422:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007424:	2b00      	cmp	r3, #0
 8007426:	d17e      	bne.n	8007526 <osThreadNew+0x11a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d07b      	beq.n	8007526 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800742e:	2380      	movs	r3, #128	; 0x80
 8007430:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007432:	2318      	movs	r3, #24
 8007434:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800743e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d045      	beq.n	80074d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <osThreadNew+0x48>
        name = attr->name;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <osThreadNew+0x6e>
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b38      	cmp	r3, #56	; 0x38
 800746c:	d805      	bhi.n	800747a <osThreadNew+0x6e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <osThreadNew+0x72>
        return (NULL);
 800747a:	2300      	movs	r3, #0
 800747c:	e054      	b.n	8007528 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	089b      	lsrs	r3, r3, #2
 800748c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00e      	beq.n	80074b4 <osThreadNew+0xa8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	2b5b      	cmp	r3, #91	; 0x5b
 800749c:	d90a      	bls.n	80074b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <osThreadNew+0xa8>
        mem = 1;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e010      	b.n	80074d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10c      	bne.n	80074d6 <osThreadNew+0xca>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d108      	bne.n	80074d6 <osThreadNew+0xca>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d104      	bne.n	80074d6 <osThreadNew+0xca>
          mem = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	e001      	b.n	80074d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d110      	bne.n	80074fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fe0c 	bl	8008110 <xTaskCreateStatic>
 80074f8:	4603      	mov	r3, r0
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	e013      	b.n	8007526 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d110      	bne.n	8007526 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	b29a      	uxth	r2, r3
 8007508:	f107 0310 	add.w	r3, r7, #16
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fe57 	bl	80081ca <xTaskCreate>
 800751c:	4603      	mov	r3, r0
 800751e:	2b01      	cmp	r3, #1
 8007520:	d001      	beq.n	8007526 <osThreadNew+0x11a>
            hTask = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007526:	693b      	ldr	r3, [r7, #16]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3728      	adds	r7, #40	; 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007538:	f3ef 8305 	mrs	r3, IPSR
 800753c:	60bb      	str	r3, [r7, #8]
  return(result);
 800753e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <osDelay+0x1c>
    stat = osErrorISR;
 8007544:	f06f 0305 	mvn.w	r3, #5
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	e007      	b.n	800755c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 ff7c 	bl	8008454 <vTaskDelay>
    }
  }

  return (stat);
 800755c:	68fb      	ldr	r3, [r7, #12]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a07      	ldr	r2, [pc, #28]	; (8007594 <vApplicationGetIdleTaskMemory+0x2c>)
 8007578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	4a06      	ldr	r2, [pc, #24]	; (8007598 <vApplicationGetIdleTaskMemory+0x30>)
 800757e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2280      	movs	r2, #128	; 0x80
 8007584:	601a      	str	r2, [r3, #0]
}
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20007714 	.word	0x20007714
 8007598:	20007770 	.word	0x20007770

0800759c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a07      	ldr	r2, [pc, #28]	; (80075c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80075ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4a06      	ldr	r2, [pc, #24]	; (80075cc <vApplicationGetTimerTaskMemory+0x30>)
 80075b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ba:	601a      	str	r2, [r3, #0]
}
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20007970 	.word	0x20007970
 80075cc:	200079cc 	.word	0x200079cc

080075d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f103 0208 	add.w	r2, r3, #8
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f103 0208 	add.w	r2, r3, #8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f103 0208 	add.w	r2, r3, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007688:	d103      	bne.n	8007692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e00c      	b.n	80076ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3308      	adds	r3, #8
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e002      	b.n	80076a0 <vListInsert+0x2e>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d2f6      	bcs.n	800769a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	601a      	str	r2, [r3, #0]
}
 80076d8:	bf00      	nop
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6892      	ldr	r2, [r2, #8]
 80076fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6852      	ldr	r2, [r2, #4]
 8007704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d103      	bne.n	8007718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	1e5a      	subs	r2, r3, #1
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <xQueueGenericReset+0x2a>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60bb      	str	r3, [r7, #8]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007762:	f002 f877 	bl	8009854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	441a      	add	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007792:	3b01      	subs	r3, #1
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	441a      	add	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	22ff      	movs	r2, #255	; 0xff
 80077ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d114      	bne.n	80077e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01a      	beq.n	80077f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3310      	adds	r3, #16
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 f903 	bl	80089d0 <xTaskRemoveFromEventList>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <xQueueGenericReset+0xcc>)
 80077d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	e009      	b.n	80077f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3310      	adds	r3, #16
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fef2 	bl	80075d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3324      	adds	r3, #36	; 0x24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff feed 	bl	80075d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077f6:	f002 f85d 	bl	80098b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077fa:	2301      	movs	r3, #1
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	e000ed04 	.word	0xe000ed04

08007808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08e      	sub	sp, #56	; 0x38
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <xQueueGenericCreateStatic+0x52>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <xQueueGenericCreateStatic+0x56>
 800785a:	2301      	movs	r3, #1
 800785c:	e000      	b.n	8007860 <xQueueGenericCreateStatic+0x58>
 800785e:	2300      	movs	r3, #0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	623b      	str	r3, [r7, #32]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <xQueueGenericCreateStatic+0x7e>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <xQueueGenericCreateStatic+0x82>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <xQueueGenericCreateStatic+0x84>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	61fb      	str	r3, [r7, #28]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078a6:	2350      	movs	r3, #80	; 0x50
 80078a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b50      	cmp	r3, #80	; 0x50
 80078ae:	d00a      	beq.n	80078c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	61bb      	str	r3, [r7, #24]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4613      	mov	r3, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f805 	bl	80078f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3730      	adds	r7, #48	; 0x30
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	e002      	b.n	800791a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007926:	2101      	movs	r1, #1
 8007928:	69b8      	ldr	r0, [r7, #24]
 800792a:	f7ff ff05 	bl	8007738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	78fa      	ldrb	r2, [r7, #3]
 8007932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08e      	sub	sp, #56	; 0x38
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <xQueueGenericSend+0x32>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <xQueueGenericSend+0x40>
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <xQueueGenericSend+0x44>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <xQueueGenericSend+0x46>
 8007984:	2300      	movs	r3, #0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <xQueueGenericSend+0x60>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d103      	bne.n	80079ae <xQueueGenericSend+0x6e>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <xQueueGenericSend+0x72>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <xQueueGenericSend+0x74>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xQueueGenericSend+0x8e>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	623b      	str	r3, [r7, #32]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079ce:	f001 f9e3 	bl	8008d98 <xTaskGetSchedulerState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <xQueueGenericSend+0x9e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <xQueueGenericSend+0xa2>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <xQueueGenericSend+0xa4>
 80079e2:	2300      	movs	r3, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <xQueueGenericSend+0xbe>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	61fb      	str	r3, [r7, #28]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079fe:	f001 ff29 	bl	8009854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d302      	bcc.n	8007a14 <xQueueGenericSend+0xd4>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d129      	bne.n	8007a68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a1a:	f000 fa0b 	bl	8007e34 <prvCopyDataToQueue>
 8007a1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d010      	beq.n	8007a4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 ffcf 	bl	80089d0 <xTaskRemoveFromEventList>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d013      	beq.n	8007a60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a38:	4b3f      	ldr	r3, [pc, #252]	; (8007b38 <xQueueGenericSend+0x1f8>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	e00a      	b.n	8007a60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a50:	4b39      	ldr	r3, [pc, #228]	; (8007b38 <xQueueGenericSend+0x1f8>)
 8007a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a60:	f001 ff28 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e063      	b.n	8007b30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a6e:	f001 ff21 	bl	80098b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e05c      	b.n	8007b30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d106      	bne.n	8007a8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 f82f 	bl	8008ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a8a:	f001 ff13 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a8e:	f000 fd7b 	bl	8008588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a92:	f001 fedf 	bl	8009854 <vPortEnterCritical>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a9c:	b25b      	sxtb	r3, r3
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa2:	d103      	bne.n	8007aac <xQueueGenericSend+0x16c>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab2:	b25b      	sxtb	r3, r3
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab8:	d103      	bne.n	8007ac2 <xQueueGenericSend+0x182>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ac2:	f001 fef7 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ac6:	1d3a      	adds	r2, r7, #4
 8007ac8:	f107 0314 	add.w	r3, r7, #20
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 f81e 	bl	8008b10 <xTaskCheckForTimeOut>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d124      	bne.n	8007b24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007adc:	f000 faa2 	bl	8008024 <prvIsQueueFull>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d018      	beq.n	8007b18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	3310      	adds	r3, #16
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4611      	mov	r1, r2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 ff1e 	bl	8008930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007af6:	f000 fa2d 	bl	8007f54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007afa:	f000 fd53 	bl	80085a4 <xTaskResumeAll>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f af7c 	bne.w	80079fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <xQueueGenericSend+0x1f8>)
 8007b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	e772      	b.n	80079fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b1a:	f000 fa1b 	bl	8007f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b1e:	f000 fd41 	bl	80085a4 <xTaskResumeAll>
 8007b22:	e76c      	b.n	80079fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b26:	f000 fa15 	bl	8007f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b2a:	f000 fd3b 	bl	80085a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3738      	adds	r7, #56	; 0x38
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b090      	sub	sp, #64	; 0x40
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <xQueueGenericSendFromISR+0x3c>
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <xQueueGenericSendFromISR+0x40>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <xQueueGenericSendFromISR+0x42>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d103      	bne.n	8007ba6 <xQueueGenericSendFromISR+0x6a>
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <xQueueGenericSendFromISR+0x6e>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e000      	b.n	8007bac <xQueueGenericSendFromISR+0x70>
 8007baa:	2300      	movs	r3, #0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	623b      	str	r3, [r7, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bc6:	f001 ff27 	bl	8009a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bca:	f3ef 8211 	mrs	r2, BASEPRI
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	61fa      	str	r2, [r7, #28]
 8007be0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007be2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <xQueueGenericSendFromISR+0xbc>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d12f      	bne.n	8007c58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c0e:	f000 f911 	bl	8007e34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c1a:	d112      	bne.n	8007c42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d016      	beq.n	8007c52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	3324      	adds	r3, #36	; 0x24
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fed1 	bl	80089d0 <xTaskRemoveFromEventList>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00e      	beq.n	8007c52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	e007      	b.n	8007c52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c46:	3301      	adds	r3, #1
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	b25a      	sxtb	r2, r3
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c52:	2301      	movs	r3, #1
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c56:	e001      	b.n	8007c5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3740      	adds	r7, #64	; 0x40
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08c      	sub	sp, #48	; 0x30
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <xQueueReceive+0x30>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	623b      	str	r3, [r7, #32]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <xQueueReceive+0x3e>
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <xQueueReceive+0x42>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <xQueueReceive+0x44>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xQueueReceive+0x5e>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	61fb      	str	r3, [r7, #28]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cd2:	f001 f861 	bl	8008d98 <xTaskGetSchedulerState>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <xQueueReceive+0x6e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <xQueueReceive+0x72>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueReceive+0x74>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xQueueReceive+0x8e>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	61bb      	str	r3, [r7, #24]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d02:	f001 fda7 	bl	8009854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01f      	beq.n	8007d52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d16:	f000 f8f7 	bl	8007f08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00f      	beq.n	8007d4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fe4e 	bl	80089d0 <xTaskRemoveFromEventList>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d3a:	4b3d      	ldr	r3, [pc, #244]	; (8007e30 <xQueueReceive+0x1bc>)
 8007d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d4a:	f001 fdb3 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e069      	b.n	8007e26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d58:	f001 fdac 	bl	80098b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e062      	b.n	8007e26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d66:	f107 0310 	add.w	r3, r7, #16
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 feba 	bl	8008ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d74:	f001 fd9e 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d78:	f000 fc06 	bl	8008588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d7c:	f001 fd6a 	bl	8009854 <vPortEnterCritical>
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d86:	b25b      	sxtb	r3, r3
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8c:	d103      	bne.n	8007d96 <xQueueReceive+0x122>
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da2:	d103      	bne.n	8007dac <xQueueReceive+0x138>
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dac:	f001 fd82 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007db0:	1d3a      	adds	r2, r7, #4
 8007db2:	f107 0310 	add.w	r3, r7, #16
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fea9 	bl	8008b10 <xTaskCheckForTimeOut>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d123      	bne.n	8007e0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc6:	f000 f917 	bl	8007ff8 <prvIsQueueEmpty>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d017      	beq.n	8007e00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fda9 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de0:	f000 f8b8 	bl	8007f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007de4:	f000 fbde 	bl	80085a4 <xTaskResumeAll>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d189      	bne.n	8007d02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dee:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <xQueueReceive+0x1bc>)
 8007df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	e780      	b.n	8007d02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e02:	f000 f8a7 	bl	8007f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e06:	f000 fbcd 	bl	80085a4 <xTaskResumeAll>
 8007e0a:	e77a      	b.n	8007d02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0e:	f000 f8a1 	bl	8007f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e12:	f000 fbc7 	bl	80085a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e18:	f000 f8ee 	bl	8007ff8 <prvIsQueueEmpty>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f43f af6f 	beq.w	8007d02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3730      	adds	r7, #48	; 0x30
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10d      	bne.n	8007e6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d14d      	bne.n	8007ef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 ffb8 	bl	8008dd4 <xTaskPriorityDisinherit>
 8007e64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]
 8007e6c:	e043      	b.n	8007ef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d119      	bne.n	8007ea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6858      	ldr	r0, [r3, #4]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	f00d fb20 	bl	80154c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d32b      	bcc.n	8007ef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	605a      	str	r2, [r3, #4]
 8007ea6:	e026      	b.n	8007ef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68d8      	ldr	r0, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	f00d fb06 	bl	80154c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	425b      	negs	r3, r3
 8007ec2:	441a      	add	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d207      	bcs.n	8007ee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	425b      	negs	r3, r3
 8007ede:	441a      	add	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d105      	bne.n	8007ef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007efe:	697b      	ldr	r3, [r7, #20]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d018      	beq.n	8007f4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	441a      	add	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d303      	bcc.n	8007f3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68d9      	ldr	r1, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	461a      	mov	r2, r3
 8007f46:	6838      	ldr	r0, [r7, #0]
 8007f48:	f00d fabc 	bl	80154c4 <memcpy>
	}
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f5c:	f001 fc7a 	bl	8009854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f68:	e011      	b.n	8007f8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3324      	adds	r3, #36	; 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fd2a 	bl	80089d0 <xTaskRemoveFromEventList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f82:	f000 fe27 	bl	8008bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dce9      	bgt.n	8007f6a <prvUnlockQueue+0x16>
 8007f96:	e000      	b.n	8007f9a <prvUnlockQueue+0x46>
					break;
 8007f98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	22ff      	movs	r2, #255	; 0xff
 8007f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fa2:	f001 fc87 	bl	80098b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fa6:	f001 fc55 	bl	8009854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fb2:	e011      	b.n	8007fd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d012      	beq.n	8007fe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fd05 	bl	80089d0 <xTaskRemoveFromEventList>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fcc:	f000 fe02 	bl	8008bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dce9      	bgt.n	8007fb4 <prvUnlockQueue+0x60>
 8007fe0:	e000      	b.n	8007fe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	22ff      	movs	r2, #255	; 0xff
 8007fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007fec:	f001 fc62 	bl	80098b4 <vPortExitCritical>
}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008000:	f001 fc28 	bl	8009854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e001      	b.n	8008016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008016:	f001 fc4d 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 800801a:	68fb      	ldr	r3, [r7, #12]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800802c:	f001 fc12 	bl	8009854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	429a      	cmp	r2, r3
 800803a:	d102      	bne.n	8008042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e001      	b.n	8008046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008046:	f001 fc35 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 800804a:	68fb      	ldr	r3, [r7, #12]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e014      	b.n	800808e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008064:	4a0f      	ldr	r2, [pc, #60]	; (80080a4 <vQueueAddToRegistry+0x50>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008070:	490c      	ldr	r1, [pc, #48]	; (80080a4 <vQueueAddToRegistry+0x50>)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800807a:	4a0a      	ldr	r2, [pc, #40]	; (80080a4 <vQueueAddToRegistry+0x50>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	4413      	add	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008086:	e006      	b.n	8008096 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b07      	cmp	r3, #7
 8008092:	d9e7      	bls.n	8008064 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20007dcc 	.word	0x20007dcc

080080a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080b8:	f001 fbcc 	bl	8009854 <vPortEnterCritical>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c8:	d103      	bne.n	80080d2 <vQueueWaitForMessageRestricted+0x2a>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080d8:	b25b      	sxtb	r3, r3
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080de:	d103      	bne.n	80080e8 <vQueueWaitForMessageRestricted+0x40>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080e8:	f001 fbe4 	bl	80098b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d106      	bne.n	8008102 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	3324      	adds	r3, #36	; 0x24
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fc3b 	bl	8008978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008102:	6978      	ldr	r0, [r7, #20]
 8008104:	f7ff ff26 	bl	8007f54 <prvUnlockQueue>
	}
 8008108:	bf00      	nop
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08e      	sub	sp, #56	; 0x38
 8008114:	af04      	add	r7, sp, #16
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	623b      	str	r3, [r7, #32]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xTaskCreateStatic+0x46>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	61fb      	str	r3, [r7, #28]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008156:	235c      	movs	r3, #92	; 0x5c
 8008158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b5c      	cmp	r3, #92	; 0x5c
 800815e:	d00a      	beq.n	8008176 <xTaskCreateStatic+0x66>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	61bb      	str	r3, [r7, #24]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008176:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01e      	beq.n	80081bc <xTaskCreateStatic+0xac>
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01b      	beq.n	80081bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800818c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	2202      	movs	r2, #2
 8008192:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008196:	2300      	movs	r3, #0
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	9302      	str	r3, [sp, #8]
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	68b9      	ldr	r1, [r7, #8]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f850 	bl	8008254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081b6:	f000 f8dd 	bl	8008374 <prvAddNewTaskToReadyList>
 80081ba:	e001      	b.n	80081c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081c0:	697b      	ldr	r3, [r7, #20]
	}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3728      	adds	r7, #40	; 0x28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b08c      	sub	sp, #48	; 0x30
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	603b      	str	r3, [r7, #0]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4618      	mov	r0, r3
 80081e0:	f001 fc5a 	bl	8009a98 <pvPortMalloc>
 80081e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00e      	beq.n	800820a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081ec:	205c      	movs	r0, #92	; 0x5c
 80081ee:	f001 fc53 	bl	8009a98 <pvPortMalloc>
 80081f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008200:	e005      	b.n	800820e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008202:	6978      	ldr	r0, [r7, #20]
 8008204:	f001 fd14 	bl	8009c30 <vPortFree>
 8008208:	e001      	b.n	800820e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d017      	beq.n	8008244 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	2300      	movs	r3, #0
 8008220:	9303      	str	r3, [sp, #12]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	9302      	str	r3, [sp, #8]
 8008226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f80e 	bl	8008254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008238:	69f8      	ldr	r0, [r7, #28]
 800823a:	f000 f89b 	bl	8008374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800823e:	2301      	movs	r3, #1
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	e002      	b.n	800824a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800824a:	69bb      	ldr	r3, [r7, #24]
	}
 800824c:	4618      	mov	r0, r3
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	461a      	mov	r2, r3
 800826c:	21a5      	movs	r1, #165	; 0xa5
 800826e:	f00d f951 	bl	8015514 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800827c:	3b01      	subs	r3, #1
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	617b      	str	r3, [r7, #20]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d01f      	beq.n	80082f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	e012      	b.n	80082de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	7819      	ldrb	r1, [r3, #0]
 80082c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	3334      	adds	r3, #52	; 0x34
 80082c8:	460a      	mov	r2, r1
 80082ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d006      	beq.n	80082e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	2b0f      	cmp	r3, #15
 80082e2:	d9e9      	bls.n	80082b8 <prvInitialiseNewTask+0x64>
 80082e4:	e000      	b.n	80082e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80082e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f0:	e003      	b.n	80082fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	2b37      	cmp	r3, #55	; 0x37
 80082fe:	d901      	bls.n	8008304 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008300:	2337      	movs	r3, #55	; 0x37
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	2200      	movs	r2, #0
 8008314:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	3304      	adds	r3, #4
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff f978 	bl	8007610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008322:	3318      	adds	r3, #24
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff f973 	bl	8007610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	69b8      	ldr	r0, [r7, #24]
 8008354:	f001 f94e 	bl	80095f4 <pxPortInitialiseStack>
 8008358:	4602      	mov	r2, r0
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800836a:	bf00      	nop
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800837c:	f001 fa6a 	bl	8009854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008380:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	4a2c      	ldr	r2, [pc, #176]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 8008388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800838a:	4b2c      	ldr	r3, [pc, #176]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008392:	4a2a      	ldr	r2, [pc, #168]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008398:	4b27      	ldr	r3, [pc, #156]	; (8008438 <prvAddNewTaskToReadyList+0xc4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d110      	bne.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083a0:	f000 fc3c 	bl	8008c1c <prvInitialiseTaskLists>
 80083a4:	e00d      	b.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083a6:	4b26      	ldr	r3, [pc, #152]	; (8008440 <prvAddNewTaskToReadyList+0xcc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d802      	bhi.n	80083c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083bc:	4a1f      	ldr	r2, [pc, #124]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083c2:	4b20      	ldr	r3, [pc, #128]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	4a1e      	ldr	r2, [pc, #120]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <prvAddNewTaskToReadyList+0xd0>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <prvAddNewTaskToReadyList+0xd4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d903      	bls.n	80083e8 <prvAddNewTaskToReadyList+0x74>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a18      	ldr	r2, [pc, #96]	; (8008448 <prvAddNewTaskToReadyList+0xd4>)
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4a15      	ldr	r2, [pc, #84]	; (800844c <prvAddNewTaskToReadyList+0xd8>)
 80083f6:	441a      	add	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7ff f913 	bl	800762a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008404:	f001 fa56 	bl	80098b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <prvAddNewTaskToReadyList+0xcc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <prvAddNewTaskToReadyList+0xc8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d207      	bcs.n	800842e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <prvAddNewTaskToReadyList+0xdc>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200082e0 	.word	0x200082e0
 800843c:	20007e0c 	.word	0x20007e0c
 8008440:	200082ec 	.word	0x200082ec
 8008444:	200082fc 	.word	0x200082fc
 8008448:	200082e8 	.word	0x200082e8
 800844c:	20007e10 	.word	0x20007e10
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d017      	beq.n	8008496 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <vTaskDelay+0x60>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <vTaskDelay+0x30>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60bb      	str	r3, [r7, #8]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008484:	f000 f880 	bl	8008588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fd10 	bl	8008eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008490:	f000 f888 	bl	80085a4 <xTaskResumeAll>
 8008494:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <vTaskDelay+0x64>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20008308 	.word	0x20008308
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ca:	463a      	mov	r2, r7
 80084cc:	1d39      	adds	r1, r7, #4
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff f848 	bl	8007568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	460a      	mov	r2, r1
 80084ea:	4921      	ldr	r1, [pc, #132]	; (8008570 <vTaskStartScheduler+0xb4>)
 80084ec:	4821      	ldr	r0, [pc, #132]	; (8008574 <vTaskStartScheduler+0xb8>)
 80084ee:	f7ff fe0f 	bl	8008110 <xTaskCreateStatic>
 80084f2:	4603      	mov	r3, r0
 80084f4:	4a20      	ldr	r2, [pc, #128]	; (8008578 <vTaskStartScheduler+0xbc>)
 80084f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084f8:	4b1f      	ldr	r3, [pc, #124]	; (8008578 <vTaskStartScheduler+0xbc>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e001      	b.n	800850a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d102      	bne.n	8008516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008510:	f000 fd22 	bl	8008f58 <xTimerCreateTimerTask>
 8008514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d116      	bne.n	800854a <vTaskStartScheduler+0x8e>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	613b      	str	r3, [r7, #16]
}
 800852e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008530:	4b12      	ldr	r3, [pc, #72]	; (800857c <vTaskStartScheduler+0xc0>)
 8008532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008536:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008538:	4b11      	ldr	r3, [pc, #68]	; (8008580 <vTaskStartScheduler+0xc4>)
 800853a:	2201      	movs	r2, #1
 800853c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800853e:	4b11      	ldr	r3, [pc, #68]	; (8008584 <vTaskStartScheduler+0xc8>)
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008544:	f001 f8e4 	bl	8009710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008548:	e00e      	b.n	8008568 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008550:	d10a      	bne.n	8008568 <vTaskStartScheduler+0xac>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60fb      	str	r3, [r7, #12]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <vTaskStartScheduler+0xaa>
}
 8008568:	bf00      	nop
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	08016fa8 	.word	0x08016fa8
 8008574:	08008bed 	.word	0x08008bed
 8008578:	20008304 	.word	0x20008304
 800857c:	20008300 	.word	0x20008300
 8008580:	200082ec 	.word	0x200082ec
 8008584:	200082e4 	.word	0x200082e4

08008588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800858c:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <vTaskSuspendAll+0x18>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	4a03      	ldr	r2, [pc, #12]	; (80085a0 <vTaskSuspendAll+0x18>)
 8008594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008596:	bf00      	nop
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	20008308 	.word	0x20008308

080085a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085b2:	4b42      	ldr	r3, [pc, #264]	; (80086bc <xTaskResumeAll+0x118>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	603b      	str	r3, [r7, #0]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085d0:	f001 f940 	bl	8009854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085d4:	4b39      	ldr	r3, [pc, #228]	; (80086bc <xTaskResumeAll+0x118>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3b01      	subs	r3, #1
 80085da:	4a38      	ldr	r2, [pc, #224]	; (80086bc <xTaskResumeAll+0x118>)
 80085dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085de:	4b37      	ldr	r3, [pc, #220]	; (80086bc <xTaskResumeAll+0x118>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d162      	bne.n	80086ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085e6:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <xTaskResumeAll+0x11c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d05e      	beq.n	80086ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ee:	e02f      	b.n	8008650 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f0:	4b34      	ldr	r3, [pc, #208]	; (80086c4 <xTaskResumeAll+0x120>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3318      	adds	r3, #24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff f871 	bl	80076e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff f86c 	bl	80076e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4b2d      	ldr	r3, [pc, #180]	; (80086c8 <xTaskResumeAll+0x124>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d903      	bls.n	8008620 <xTaskResumeAll+0x7c>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	4a2a      	ldr	r2, [pc, #168]	; (80086c8 <xTaskResumeAll+0x124>)
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4a27      	ldr	r2, [pc, #156]	; (80086cc <xTaskResumeAll+0x128>)
 800862e:	441a      	add	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3304      	adds	r3, #4
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f7fe fff7 	bl	800762a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008640:	4b23      	ldr	r3, [pc, #140]	; (80086d0 <xTaskResumeAll+0x12c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800864a:	4b22      	ldr	r3, [pc, #136]	; (80086d4 <xTaskResumeAll+0x130>)
 800864c:	2201      	movs	r2, #1
 800864e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008650:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <xTaskResumeAll+0x120>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1cb      	bne.n	80085f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800865e:	f000 fb7b 	bl	8008d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <xTaskResumeAll+0x134>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d010      	beq.n	8008690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800866e:	f000 f847 	bl	8008700 <xTaskIncrementTick>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008678:	4b16      	ldr	r3, [pc, #88]	; (80086d4 <xTaskResumeAll+0x130>)
 800867a:	2201      	movs	r2, #1
 800867c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3b01      	subs	r3, #1
 8008682:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f1      	bne.n	800866e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800868a:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <xTaskResumeAll+0x134>)
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008690:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <xTaskResumeAll+0x130>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d009      	beq.n	80086ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008698:	2301      	movs	r3, #1
 800869a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <xTaskResumeAll+0x138>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086ac:	f001 f902 	bl	80098b4 <vPortExitCritical>

	return xAlreadyYielded;
 80086b0:	68bb      	ldr	r3, [r7, #8]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20008308 	.word	0x20008308
 80086c0:	200082e0 	.word	0x200082e0
 80086c4:	200082a0 	.word	0x200082a0
 80086c8:	200082e8 	.word	0x200082e8
 80086cc:	20007e10 	.word	0x20007e10
 80086d0:	20007e0c 	.word	0x20007e0c
 80086d4:	200082f4 	.word	0x200082f4
 80086d8:	200082f0 	.word	0x200082f0
 80086dc:	e000ed04 	.word	0xe000ed04

080086e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <xTaskGetTickCount+0x1c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086ec:	687b      	ldr	r3, [r7, #4]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	200082e4 	.word	0x200082e4

08008700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800870a:	4b4f      	ldr	r3, [pc, #316]	; (8008848 <xTaskIncrementTick+0x148>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f040 808f 	bne.w	8008832 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008714:	4b4d      	ldr	r3, [pc, #308]	; (800884c <xTaskIncrementTick+0x14c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3301      	adds	r3, #1
 800871a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800871c:	4a4b      	ldr	r2, [pc, #300]	; (800884c <xTaskIncrementTick+0x14c>)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d120      	bne.n	800876a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008728:	4b49      	ldr	r3, [pc, #292]	; (8008850 <xTaskIncrementTick+0x150>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <xTaskIncrementTick+0x48>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	603b      	str	r3, [r7, #0]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xTaskIncrementTick+0x46>
 8008748:	4b41      	ldr	r3, [pc, #260]	; (8008850 <xTaskIncrementTick+0x150>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	4b41      	ldr	r3, [pc, #260]	; (8008854 <xTaskIncrementTick+0x154>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a3f      	ldr	r2, [pc, #252]	; (8008850 <xTaskIncrementTick+0x150>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	4a3f      	ldr	r2, [pc, #252]	; (8008854 <xTaskIncrementTick+0x154>)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	4b3e      	ldr	r3, [pc, #248]	; (8008858 <xTaskIncrementTick+0x158>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a3d      	ldr	r2, [pc, #244]	; (8008858 <xTaskIncrementTick+0x158>)
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	f000 faf7 	bl	8008d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800876a:	4b3c      	ldr	r3, [pc, #240]	; (800885c <xTaskIncrementTick+0x15c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	429a      	cmp	r2, r3
 8008772:	d349      	bcc.n	8008808 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008774:	4b36      	ldr	r3, [pc, #216]	; (8008850 <xTaskIncrementTick+0x150>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800877e:	4b37      	ldr	r3, [pc, #220]	; (800885c <xTaskIncrementTick+0x15c>)
 8008780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008784:	601a      	str	r2, [r3, #0]
					break;
 8008786:	e03f      	b.n	8008808 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008788:	4b31      	ldr	r3, [pc, #196]	; (8008850 <xTaskIncrementTick+0x150>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	429a      	cmp	r2, r3
 800879e:	d203      	bcs.n	80087a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087a0:	4a2e      	ldr	r2, [pc, #184]	; (800885c <xTaskIncrementTick+0x15c>)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087a6:	e02f      	b.n	8008808 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe ff99 	bl	80076e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	3318      	adds	r3, #24
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe ff90 	bl	80076e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c8:	4b25      	ldr	r3, [pc, #148]	; (8008860 <xTaskIncrementTick+0x160>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d903      	bls.n	80087d8 <xTaskIncrementTick+0xd8>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4a22      	ldr	r2, [pc, #136]	; (8008860 <xTaskIncrementTick+0x160>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a1f      	ldr	r2, [pc, #124]	; (8008864 <xTaskIncrementTick+0x164>)
 80087e6:	441a      	add	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe ff1b 	bl	800762a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <xTaskIncrementTick+0x168>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	429a      	cmp	r2, r3
 8008800:	d3b8      	bcc.n	8008774 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008802:	2301      	movs	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008806:	e7b5      	b.n	8008774 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008808:	4b17      	ldr	r3, [pc, #92]	; (8008868 <xTaskIncrementTick+0x168>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880e:	4915      	ldr	r1, [pc, #84]	; (8008864 <xTaskIncrementTick+0x164>)
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d901      	bls.n	8008824 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008820:	2301      	movs	r3, #1
 8008822:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <xTaskIncrementTick+0x16c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d007      	beq.n	800883c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	e004      	b.n	800883c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008832:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <xTaskIncrementTick+0x170>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	4a0d      	ldr	r2, [pc, #52]	; (8008870 <xTaskIncrementTick+0x170>)
 800883a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800883c:	697b      	ldr	r3, [r7, #20]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20008308 	.word	0x20008308
 800884c:	200082e4 	.word	0x200082e4
 8008850:	20008298 	.word	0x20008298
 8008854:	2000829c 	.word	0x2000829c
 8008858:	200082f8 	.word	0x200082f8
 800885c:	20008300 	.word	0x20008300
 8008860:	200082e8 	.word	0x200082e8
 8008864:	20007e10 	.word	0x20007e10
 8008868:	20007e0c 	.word	0x20007e0c
 800886c:	200082f4 	.word	0x200082f4
 8008870:	200082f0 	.word	0x200082f0

08008874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800887a:	4b28      	ldr	r3, [pc, #160]	; (800891c <vTaskSwitchContext+0xa8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008882:	4b27      	ldr	r3, [pc, #156]	; (8008920 <vTaskSwitchContext+0xac>)
 8008884:	2201      	movs	r2, #1
 8008886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008888:	e041      	b.n	800890e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800888a:	4b25      	ldr	r3, [pc, #148]	; (8008920 <vTaskSwitchContext+0xac>)
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008890:	4b24      	ldr	r3, [pc, #144]	; (8008924 <vTaskSwitchContext+0xb0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	e010      	b.n	80088ba <vTaskSwitchContext+0x46>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vTaskSwitchContext+0x3e>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	491b      	ldr	r1, [pc, #108]	; (8008928 <vTaskSwitchContext+0xb4>)
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0e4      	beq.n	8008898 <vTaskSwitchContext+0x24>
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4a13      	ldr	r2, [pc, #76]	; (8008928 <vTaskSwitchContext+0xb4>)
 80088da:	4413      	add	r3, r2
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	605a      	str	r2, [r3, #4]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	3308      	adds	r3, #8
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d104      	bne.n	80088fe <vTaskSwitchContext+0x8a>
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	4a09      	ldr	r2, [pc, #36]	; (800892c <vTaskSwitchContext+0xb8>)
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4a06      	ldr	r2, [pc, #24]	; (8008924 <vTaskSwitchContext+0xb0>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6013      	str	r3, [r2, #0]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20008308 	.word	0x20008308
 8008920:	200082f4 	.word	0x200082f4
 8008924:	200082e8 	.word	0x200082e8
 8008928:	20007e10 	.word	0x20007e10
 800892c:	20007e0c 	.word	0x20007e0c

08008930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008956:	4b07      	ldr	r3, [pc, #28]	; (8008974 <vTaskPlaceOnEventList+0x44>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3318      	adds	r3, #24
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7fe fe87 	bl	8007672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008964:	2101      	movs	r1, #1
 8008966:	6838      	ldr	r0, [r7, #0]
 8008968:	f000 faa2 	bl	8008eb0 <prvAddCurrentTaskToDelayedList>
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20007e0c 	.word	0x20007e0c

08008978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	617b      	str	r3, [r7, #20]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <vTaskPlaceOnEventListRestricted+0x54>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3318      	adds	r3, #24
 80089a6:	4619      	mov	r1, r3
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f7fe fe3e 	bl	800762a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80089b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	68b8      	ldr	r0, [r7, #8]
 80089be:	f000 fa77 	bl	8008eb0 <prvAddCurrentTaskToDelayedList>
	}
 80089c2:	bf00      	nop
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20007e0c 	.word	0x20007e0c

080089d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	3318      	adds	r3, #24
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fe6f 	bl	80076e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a06:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <xTaskRemoveFromEventList+0xb0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d11d      	bne.n	8008a4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3304      	adds	r3, #4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fe66 	bl	80076e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	4b19      	ldr	r3, [pc, #100]	; (8008a84 <xTaskRemoveFromEventList+0xb4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d903      	bls.n	8008a2c <xTaskRemoveFromEventList+0x5c>
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	4a16      	ldr	r2, [pc, #88]	; (8008a84 <xTaskRemoveFromEventList+0xb4>)
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <xTaskRemoveFromEventList+0xb8>)
 8008a3a:	441a      	add	r2, r3
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f7fe fdf1 	bl	800762a <vListInsertEnd>
 8008a48:	e005      	b.n	8008a56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	4619      	mov	r1, r3
 8008a50:	480e      	ldr	r0, [pc, #56]	; (8008a8c <xTaskRemoveFromEventList+0xbc>)
 8008a52:	f7fe fdea 	bl	800762a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <xTaskRemoveFromEventList+0xc0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d905      	bls.n	8008a70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <xTaskRemoveFromEventList+0xc4>)
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	e001      	b.n	8008a74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a74:	697b      	ldr	r3, [r7, #20]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20008308 	.word	0x20008308
 8008a84:	200082e8 	.word	0x200082e8
 8008a88:	20007e10 	.word	0x20007e10
 8008a8c:	200082a0 	.word	0x200082a0
 8008a90:	20007e0c 	.word	0x20007e0c
 8008a94:	200082f4 	.word	0x200082f4

08008a98 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008abc:	f000 feca 	bl	8009854 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <vTaskSetTimeOutState+0x44>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <vTaskSetTimeOutState+0x48>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008ad0:	f000 fef0 	bl	80098b4 <vPortExitCritical>
}
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	200082f8 	.word	0x200082f8
 8008ae0:	200082e4 	.word	0x200082e4

08008ae4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <vTaskInternalSetTimeOutState+0x24>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <vTaskInternalSetTimeOutState+0x28>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	605a      	str	r2, [r3, #4]
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	200082f8 	.word	0x200082f8
 8008b0c:	200082e4 	.word	0x200082e4

08008b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10a      	bne.n	8008b36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	613b      	str	r3, [r7, #16]
}
 8008b32:	bf00      	nop
 8008b34:	e7fe      	b.n	8008b34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b52:	f000 fe7f 	bl	8009854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <xTaskCheckForTimeOut+0xbc>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b6e:	d102      	bne.n	8008b76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61fb      	str	r3, [r7, #28]
 8008b74:	e023      	b.n	8008bbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <xTaskCheckForTimeOut+0xc0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d007      	beq.n	8008b92 <xTaskCheckForTimeOut+0x82>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d302      	bcc.n	8008b92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]
 8008b90:	e015      	b.n	8008bbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d20b      	bcs.n	8008bb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff9b 	bl	8008ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e004      	b.n	8008bbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bbe:	f000 fe79 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	200082e4 	.word	0x200082e4
 8008bd0:	200082f8 	.word	0x200082f8

08008bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bd8:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <vTaskMissedYield+0x14>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	200082f4 	.word	0x200082f4

08008bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bf4:	f000 f852 	bl	8008c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <prvIdleTask+0x28>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d9f9      	bls.n	8008bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c00:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <prvIdleTask+0x2c>)
 8008c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c10:	e7f0      	b.n	8008bf4 <prvIdleTask+0x8>
 8008c12:	bf00      	nop
 8008c14:	20007e10 	.word	0x20007e10
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
 8008c26:	e00c      	b.n	8008c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4a12      	ldr	r2, [pc, #72]	; (8008c7c <prvInitialiseTaskLists+0x60>)
 8008c34:	4413      	add	r3, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fcca 	bl	80075d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b37      	cmp	r3, #55	; 0x37
 8008c46:	d9ef      	bls.n	8008c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c48:	480d      	ldr	r0, [pc, #52]	; (8008c80 <prvInitialiseTaskLists+0x64>)
 8008c4a:	f7fe fcc1 	bl	80075d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c4e:	480d      	ldr	r0, [pc, #52]	; (8008c84 <prvInitialiseTaskLists+0x68>)
 8008c50:	f7fe fcbe 	bl	80075d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c54:	480c      	ldr	r0, [pc, #48]	; (8008c88 <prvInitialiseTaskLists+0x6c>)
 8008c56:	f7fe fcbb 	bl	80075d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c5a:	480c      	ldr	r0, [pc, #48]	; (8008c8c <prvInitialiseTaskLists+0x70>)
 8008c5c:	f7fe fcb8 	bl	80075d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c60:	480b      	ldr	r0, [pc, #44]	; (8008c90 <prvInitialiseTaskLists+0x74>)
 8008c62:	f7fe fcb5 	bl	80075d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <prvInitialiseTaskLists+0x78>)
 8008c68:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <prvInitialiseTaskLists+0x64>)
 8008c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <prvInitialiseTaskLists+0x7c>)
 8008c6e:	4a05      	ldr	r2, [pc, #20]	; (8008c84 <prvInitialiseTaskLists+0x68>)
 8008c70:	601a      	str	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20007e10 	.word	0x20007e10
 8008c80:	20008270 	.word	0x20008270
 8008c84:	20008284 	.word	0x20008284
 8008c88:	200082a0 	.word	0x200082a0
 8008c8c:	200082b4 	.word	0x200082b4
 8008c90:	200082cc 	.word	0x200082cc
 8008c94:	20008298 	.word	0x20008298
 8008c98:	2000829c 	.word	0x2000829c

08008c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca2:	e019      	b.n	8008cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ca4:	f000 fdd6 	bl	8009854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <prvCheckTasksWaitingTermination+0x50>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe fd15 	bl	80076e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <prvCheckTasksWaitingTermination+0x54>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <prvCheckTasksWaitingTermination+0x54>)
 8008cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	4a0a      	ldr	r2, [pc, #40]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cce:	f000 fdf1 	bl	80098b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f810 	bl	8008cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e1      	bne.n	8008ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200082b4 	.word	0x200082b4
 8008cf0:	200082e0 	.word	0x200082e0
 8008cf4:	200082c8 	.word	0x200082c8

08008cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d108      	bne.n	8008d1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 ff8e 	bl	8009c30 <vPortFree>
				vPortFree( pxTCB );
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 ff8b 	bl	8009c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d1a:	e018      	b.n	8008d4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d103      	bne.n	8008d2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 ff82 	bl	8009c30 <vPortFree>
	}
 8008d2c:	e00f      	b.n	8008d4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d00a      	beq.n	8008d4e <prvDeleteTCB+0x56>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	60fb      	str	r3, [r7, #12]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <prvDeleteTCB+0x54>
	}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <prvResetNextTaskUnblockTime+0x38>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d104      	bne.n	8008d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <prvResetNextTaskUnblockTime+0x3c>)
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d70:	e008      	b.n	8008d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <prvResetNextTaskUnblockTime+0x38>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4a04      	ldr	r2, [pc, #16]	; (8008d94 <prvResetNextTaskUnblockTime+0x3c>)
 8008d82:	6013      	str	r3, [r2, #0]
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	20008298 	.word	0x20008298
 8008d94:	20008300 	.word	0x20008300

08008d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <xTaskGetSchedulerState+0x34>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008da6:	2301      	movs	r3, #1
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	e008      	b.n	8008dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dac:	4b08      	ldr	r3, [pc, #32]	; (8008dd0 <xTaskGetSchedulerState+0x38>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008db4:	2302      	movs	r3, #2
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	e001      	b.n	8008dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dbe:	687b      	ldr	r3, [r7, #4]
	}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	200082ec 	.word	0x200082ec
 8008dd0:	20008308 	.word	0x20008308

08008dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d056      	beq.n	8008e98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dea:	4b2e      	ldr	r3, [pc, #184]	; (8008ea4 <xTaskPriorityDisinherit+0xd0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d00a      	beq.n	8008e0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60fb      	str	r3, [r7, #12]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e2c:	1e5a      	subs	r2, r3, #1
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d02c      	beq.n	8008e98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d128      	bne.n	8008e98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe fc4a 	bl	80076e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <xTaskPriorityDisinherit+0xd4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d903      	bls.n	8008e78 <xTaskPriorityDisinherit+0xa4>
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4a0c      	ldr	r2, [pc, #48]	; (8008ea8 <xTaskPriorityDisinherit+0xd4>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4a09      	ldr	r2, [pc, #36]	; (8008eac <xTaskPriorityDisinherit+0xd8>)
 8008e86:	441a      	add	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fe fbcb 	bl	800762a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e98:	697b      	ldr	r3, [r7, #20]
	}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20007e0c 	.word	0x20007e0c
 8008ea8:	200082e8 	.word	0x200082e8
 8008eac:	20007e10 	.word	0x20007e10

08008eb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eba:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec0:	4b20      	ldr	r3, [pc, #128]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fc0c 	bl	80076e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed2:	d10a      	bne.n	8008eea <prvAddCurrentTaskToDelayedList+0x3a>
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d007      	beq.n	8008eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eda:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4819      	ldr	r0, [pc, #100]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ee4:	f7fe fba1 	bl	800762a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ee8:	e026      	b.n	8008f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ef2:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d209      	bcs.n	8008f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fe fbaf 	bl	8007672 <vListInsert>
}
 8008f14:	e010      	b.n	8008f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f16:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4619      	mov	r1, r3
 8008f22:	4610      	mov	r0, r2
 8008f24:	f7fe fba5 	bl	8007672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d202      	bcs.n	8008f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f32:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	6013      	str	r3, [r2, #0]
}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	200082e4 	.word	0x200082e4
 8008f44:	20007e0c 	.word	0x20007e0c
 8008f48:	200082cc 	.word	0x200082cc
 8008f4c:	2000829c 	.word	0x2000829c
 8008f50:	20008298 	.word	0x20008298
 8008f54:	20008300 	.word	0x20008300

08008f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f62:	f000 fb07 	bl	8009574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f66:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <xTimerCreateTimerTask+0x80>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d021      	beq.n	8008fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f76:	1d3a      	adds	r2, r7, #4
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fb0b 	bl	800759c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	9202      	str	r2, [sp, #8]
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	2302      	movs	r3, #2
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	460a      	mov	r2, r1
 8008f98:	4910      	ldr	r1, [pc, #64]	; (8008fdc <xTimerCreateTimerTask+0x84>)
 8008f9a:	4811      	ldr	r0, [pc, #68]	; (8008fe0 <xTimerCreateTimerTask+0x88>)
 8008f9c:	f7ff f8b8 	bl	8008110 <xTaskCreateStatic>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	4a10      	ldr	r2, [pc, #64]	; (8008fe4 <xTimerCreateTimerTask+0x8c>)
 8008fa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <xTimerCreateTimerTask+0x8c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	613b      	str	r3, [r7, #16]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fce:	697b      	ldr	r3, [r7, #20]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	2000833c 	.word	0x2000833c
 8008fdc:	08016fb0 	.word	0x08016fb0
 8008fe0:	0800911d 	.word	0x0800911d
 8008fe4:	20008340 	.word	0x20008340

08008fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	623b      	str	r3, [r7, #32]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009016:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <xTimerGenericCommand+0x98>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d02a      	beq.n	8009074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b05      	cmp	r3, #5
 800902e:	dc18      	bgt.n	8009062 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009030:	f7ff feb2 	bl	8008d98 <xTaskGetSchedulerState>
 8009034:	4603      	mov	r3, r0
 8009036:	2b02      	cmp	r3, #2
 8009038:	d109      	bne.n	800904e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800903a:	4b11      	ldr	r3, [pc, #68]	; (8009080 <xTimerGenericCommand+0x98>)
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	f107 0110 	add.w	r1, r7, #16
 8009042:	2300      	movs	r3, #0
 8009044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009046:	f7fe fc7b 	bl	8007940 <xQueueGenericSend>
 800904a:	6278      	str	r0, [r7, #36]	; 0x24
 800904c:	e012      	b.n	8009074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <xTimerGenericCommand+0x98>)
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	f107 0110 	add.w	r1, r7, #16
 8009056:	2300      	movs	r3, #0
 8009058:	2200      	movs	r2, #0
 800905a:	f7fe fc71 	bl	8007940 <xQueueGenericSend>
 800905e:	6278      	str	r0, [r7, #36]	; 0x24
 8009060:	e008      	b.n	8009074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009062:	4b07      	ldr	r3, [pc, #28]	; (8009080 <xTimerGenericCommand+0x98>)
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f107 0110 	add.w	r1, r7, #16
 800906a:	2300      	movs	r3, #0
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	f7fe fd65 	bl	8007b3c <xQueueGenericSendFromISR>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009076:	4618      	mov	r0, r3
 8009078:	3728      	adds	r7, #40	; 0x28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	2000833c 	.word	0x2000833c

08009084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af02      	add	r7, sp, #8
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908e:	4b22      	ldr	r3, [pc, #136]	; (8009118 <prvProcessExpiredTimer+0x94>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	3304      	adds	r3, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fb21 	bl	80076e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d022      	beq.n	80090f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	699a      	ldr	r2, [r3, #24]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	18d1      	adds	r1, r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	6978      	ldr	r0, [r7, #20]
 80090be:	f000 f8d1 	bl	8009264 <prvInsertTimerInActiveList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01f      	beq.n	8009108 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090c8:	2300      	movs	r3, #0
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	2300      	movs	r3, #0
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	2100      	movs	r1, #0
 80090d2:	6978      	ldr	r0, [r7, #20]
 80090d4:	f7ff ff88 	bl	8008fe8 <xTimerGenericCommand>
 80090d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d113      	bne.n	8009108 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	60fb      	str	r3, [r7, #12]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	b2da      	uxtb	r2, r3
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	6978      	ldr	r0, [r7, #20]
 800910e:	4798      	blx	r3
}
 8009110:	bf00      	nop
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20008334 	.word	0x20008334

0800911c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009124:	f107 0308 	add.w	r3, r7, #8
 8009128:	4618      	mov	r0, r3
 800912a:	f000 f857 	bl	80091dc <prvGetNextExpireTime>
 800912e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4619      	mov	r1, r3
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f803 	bl	8009140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800913a:	f000 f8d5 	bl	80092e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800913e:	e7f1      	b.n	8009124 <prvTimerTask+0x8>

08009140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800914a:	f7ff fa1d 	bl	8008588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800914e:	f107 0308 	add.w	r3, r7, #8
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f866 	bl	8009224 <prvSampleTimeNow>
 8009158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d130      	bne.n	80091c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10a      	bne.n	800917c <prvProcessTimerOrBlockTask+0x3c>
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	429a      	cmp	r2, r3
 800916c:	d806      	bhi.n	800917c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800916e:	f7ff fa19 	bl	80085a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff ff85 	bl	8009084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800917a:	e024      	b.n	80091c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d008      	beq.n	8009194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009182:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <prvProcessTimerOrBlockTask+0x90>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <prvProcessTimerOrBlockTask+0x50>
 800918c:	2301      	movs	r3, #1
 800918e:	e000      	b.n	8009192 <prvProcessTimerOrBlockTask+0x52>
 8009190:	2300      	movs	r3, #0
 8009192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009194:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <prvProcessTimerOrBlockTask+0x94>)
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7fe ff81 	bl	80080a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091a6:	f7ff f9fd 	bl	80085a4 <xTaskResumeAll>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091b0:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <prvProcessTimerOrBlockTask+0x98>)
 80091b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
}
 80091c0:	e001      	b.n	80091c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091c2:	f7ff f9ef 	bl	80085a4 <xTaskResumeAll>
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20008338 	.word	0x20008338
 80091d4:	2000833c 	.word	0x2000833c
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <prvGetNextExpireTime+0x44>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <prvGetNextExpireTime+0x16>
 80091ee:	2201      	movs	r2, #1
 80091f0:	e000      	b.n	80091f4 <prvGetNextExpireTime+0x18>
 80091f2:	2200      	movs	r2, #0
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d105      	bne.n	800920c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <prvGetNextExpireTime+0x44>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	e001      	b.n	8009210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009210:	68fb      	ldr	r3, [r7, #12]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20008334 	.word	0x20008334

08009224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800922c:	f7ff fa58 	bl	80086e0 <xTaskGetTickCount>
 8009230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009232:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <prvSampleTimeNow+0x3c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	429a      	cmp	r2, r3
 800923a:	d205      	bcs.n	8009248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800923c:	f000 f936 	bl	80094ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	e002      	b.n	800924e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800924e:	4a04      	ldr	r2, [pc, #16]	; (8009260 <prvSampleTimeNow+0x3c>)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009254:	68fb      	ldr	r3, [r7, #12]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20008344 	.word	0x20008344

08009264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d812      	bhi.n	80092b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	1ad2      	subs	r2, r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	429a      	cmp	r2, r3
 8009296:	d302      	bcc.n	800929e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e01b      	b.n	80092d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800929e:	4b10      	ldr	r3, [pc, #64]	; (80092e0 <prvInsertTimerInActiveList+0x7c>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f7fe f9e2 	bl	8007672 <vListInsert>
 80092ae:	e012      	b.n	80092d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d206      	bcs.n	80092c6 <prvInsertTimerInActiveList+0x62>
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e007      	b.n	80092d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092c6:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <prvInsertTimerInActiveList+0x80>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4619      	mov	r1, r3
 80092d0:	4610      	mov	r0, r2
 80092d2:	f7fe f9ce 	bl	8007672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092d6:	697b      	ldr	r3, [r7, #20]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20008338 	.word	0x20008338
 80092e4:	20008334 	.word	0x20008334

080092e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08e      	sub	sp, #56	; 0x38
 80092ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ee:	e0ca      	b.n	8009486 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da18      	bge.n	8009328 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092f6:	1d3b      	adds	r3, r7, #4
 80092f8:	3304      	adds	r3, #4
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10a      	bne.n	8009318 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	61fb      	str	r3, [r7, #28]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931e:	6850      	ldr	r0, [r2, #4]
 8009320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009322:	6892      	ldr	r2, [r2, #8]
 8009324:	4611      	mov	r1, r2
 8009326:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f2c0 80aa 	blt.w	8009484 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe f9cf 	bl	80076e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009346:	463b      	mov	r3, r7
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff ff6b 	bl	8009224 <prvSampleTimeNow>
 800934e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b09      	cmp	r3, #9
 8009354:	f200 8097 	bhi.w	8009486 <prvProcessReceivedCommands+0x19e>
 8009358:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <prvProcessReceivedCommands+0x78>)
 800935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935e:	bf00      	nop
 8009360:	08009389 	.word	0x08009389
 8009364:	08009389 	.word	0x08009389
 8009368:	08009389 	.word	0x08009389
 800936c:	080093fd 	.word	0x080093fd
 8009370:	08009411 	.word	0x08009411
 8009374:	0800945b 	.word	0x0800945b
 8009378:	08009389 	.word	0x08009389
 800937c:	08009389 	.word	0x08009389
 8009380:	080093fd 	.word	0x080093fd
 8009384:	08009411 	.word	0x08009411
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800938e:	f043 0301 	orr.w	r3, r3, #1
 8009392:	b2da      	uxtb	r2, r3
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	18d1      	adds	r1, r2, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a8:	f7ff ff5c 	bl	8009264 <prvInsertTimerInActiveList>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d069      	beq.n	8009486 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d05e      	beq.n	8009486 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	441a      	add	r2, r3
 80093d0:	2300      	movs	r3, #0
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	2100      	movs	r1, #0
 80093d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093da:	f7ff fe05 	bl	8008fe8 <xTimerGenericCommand>
 80093de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d14f      	bne.n	8009486 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	61bb      	str	r3, [r7, #24]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800940e:	e03a      	b.n	8009486 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009416:	f043 0301 	orr.w	r3, r3, #1
 800941a:	b2da      	uxtb	r2, r3
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	617b      	str	r3, [r7, #20]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	18d1      	adds	r1, r2, r3
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009454:	f7ff ff06 	bl	8009264 <prvInsertTimerInActiveList>
					break;
 8009458:	e015      	b.n	8009486 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d103      	bne.n	8009470 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946a:	f000 fbe1 	bl	8009c30 <vPortFree>
 800946e:	e00a      	b.n	8009486 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009482:	e000      	b.n	8009486 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009486:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <prvProcessReceivedCommands+0x1c0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	1d39      	adds	r1, r7, #4
 800948c:	2200      	movs	r2, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fbf0 	bl	8007c74 <xQueueReceive>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	f47f af2a 	bne.w	80092f0 <prvProcessReceivedCommands+0x8>
	}
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3730      	adds	r7, #48	; 0x30
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	2000833c 	.word	0x2000833c

080094ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094b2:	e048      	b.n	8009546 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b4:	4b2d      	ldr	r3, [pc, #180]	; (800956c <prvSwitchTimerLists+0xc0>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094be:	4b2b      	ldr	r3, [pc, #172]	; (800956c <prvSwitchTimerLists+0xc0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fe f909 	bl	80076e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d02e      	beq.n	8009546 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4413      	add	r3, r2
 80094f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d90e      	bls.n	8009518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009506:	4b19      	ldr	r3, [pc, #100]	; (800956c <prvSwitchTimerLists+0xc0>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3304      	adds	r3, #4
 800950e:	4619      	mov	r1, r3
 8009510:	4610      	mov	r0, r2
 8009512:	f7fe f8ae 	bl	8007672 <vListInsert>
 8009516:	e016      	b.n	8009546 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009518:	2300      	movs	r3, #0
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	2300      	movs	r3, #0
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	2100      	movs	r1, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff fd60 	bl	8008fe8 <xTimerGenericCommand>
 8009528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	603b      	str	r3, [r7, #0]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009546:	4b09      	ldr	r3, [pc, #36]	; (800956c <prvSwitchTimerLists+0xc0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1b1      	bne.n	80094b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <prvSwitchTimerLists+0xc0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009556:	4b06      	ldr	r3, [pc, #24]	; (8009570 <prvSwitchTimerLists+0xc4>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a04      	ldr	r2, [pc, #16]	; (800956c <prvSwitchTimerLists+0xc0>)
 800955c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800955e:	4a04      	ldr	r2, [pc, #16]	; (8009570 <prvSwitchTimerLists+0xc4>)
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	6013      	str	r3, [r2, #0]
}
 8009564:	bf00      	nop
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20008334 	.word	0x20008334
 8009570:	20008338 	.word	0x20008338

08009574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800957a:	f000 f96b 	bl	8009854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800957e:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <prvCheckForValidListAndQueue+0x60>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d120      	bne.n	80095c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009586:	4814      	ldr	r0, [pc, #80]	; (80095d8 <prvCheckForValidListAndQueue+0x64>)
 8009588:	f7fe f822 	bl	80075d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800958c:	4813      	ldr	r0, [pc, #76]	; (80095dc <prvCheckForValidListAndQueue+0x68>)
 800958e:	f7fe f81f 	bl	80075d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009592:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <prvCheckForValidListAndQueue+0x6c>)
 8009594:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <prvCheckForValidListAndQueue+0x64>)
 8009596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009598:	4b12      	ldr	r3, [pc, #72]	; (80095e4 <prvCheckForValidListAndQueue+0x70>)
 800959a:	4a10      	ldr	r2, [pc, #64]	; (80095dc <prvCheckForValidListAndQueue+0x68>)
 800959c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800959e:	2300      	movs	r3, #0
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	4b11      	ldr	r3, [pc, #68]	; (80095e8 <prvCheckForValidListAndQueue+0x74>)
 80095a4:	4a11      	ldr	r2, [pc, #68]	; (80095ec <prvCheckForValidListAndQueue+0x78>)
 80095a6:	2110      	movs	r1, #16
 80095a8:	200a      	movs	r0, #10
 80095aa:	f7fe f92d 	bl	8007808 <xQueueGenericCreateStatic>
 80095ae:	4603      	mov	r3, r0
 80095b0:	4a08      	ldr	r2, [pc, #32]	; (80095d4 <prvCheckForValidListAndQueue+0x60>)
 80095b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b4:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <prvCheckForValidListAndQueue+0x60>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <prvCheckForValidListAndQueue+0x60>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	490b      	ldr	r1, [pc, #44]	; (80095f0 <prvCheckForValidListAndQueue+0x7c>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fd46 	bl	8008054 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c8:	f000 f974 	bl	80098b4 <vPortExitCritical>
}
 80095cc:	bf00      	nop
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	2000833c 	.word	0x2000833c
 80095d8:	2000830c 	.word	0x2000830c
 80095dc:	20008320 	.word	0x20008320
 80095e0:	20008334 	.word	0x20008334
 80095e4:	20008338 	.word	0x20008338
 80095e8:	200083e8 	.word	0x200083e8
 80095ec:	20008348 	.word	0x20008348
 80095f0:	08016fb8 	.word	0x08016fb8

080095f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3b04      	subs	r3, #4
 8009604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800960c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b04      	subs	r3, #4
 8009612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f023 0201 	bic.w	r2, r3, #1
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3b04      	subs	r3, #4
 8009622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009624:	4a0c      	ldr	r2, [pc, #48]	; (8009658 <pxPortInitialiseStack+0x64>)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3b14      	subs	r3, #20
 800962e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3b04      	subs	r3, #4
 800963a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f06f 0202 	mvn.w	r2, #2
 8009642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3b20      	subs	r3, #32
 8009648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800964a:	68fb      	ldr	r3, [r7, #12]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	0800965d 	.word	0x0800965d

0800965c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009666:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <prvTaskExitError+0x54>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966e:	d00a      	beq.n	8009686 <prvTaskExitError+0x2a>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <prvTaskExitError+0x28>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	60bb      	str	r3, [r7, #8]
}
 8009698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800969a:	bf00      	nop
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0fc      	beq.n	800969c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	2000001c 	.word	0x2000001c
	...

080096c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	20007e0c 	.word	0x20007e0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	; (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	bf00      	nop
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009716:	4b46      	ldr	r3, [pc, #280]	; (8009830 <xPortStartScheduler+0x120>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a46      	ldr	r2, [pc, #280]	; (8009834 <xPortStartScheduler+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10a      	bne.n	8009736 <xPortStartScheduler+0x26>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009736:	4b3e      	ldr	r3, [pc, #248]	; (8009830 <xPortStartScheduler+0x120>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a3f      	ldr	r2, [pc, #252]	; (8009838 <xPortStartScheduler+0x128>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d10a      	bne.n	8009756 <xPortStartScheduler+0x46>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	60fb      	str	r3, [r7, #12]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009756:	4b39      	ldr	r3, [pc, #228]	; (800983c <xPortStartScheduler+0x12c>)
 8009758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	22ff      	movs	r2, #255	; 0xff
 8009766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b31      	ldr	r3, [pc, #196]	; (8009840 <xPortStartScheduler+0x130>)
 800977c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800977e:	4b31      	ldr	r3, [pc, #196]	; (8009844 <xPortStartScheduler+0x134>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009784:	e009      	b.n	800979a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009786:	4b2f      	ldr	r3, [pc, #188]	; (8009844 <xPortStartScheduler+0x134>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	4a2d      	ldr	r2, [pc, #180]	; (8009844 <xPortStartScheduler+0x134>)
 800978e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	b2db      	uxtb	r3, r3
 8009798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	2b80      	cmp	r3, #128	; 0x80
 80097a4:	d0ef      	beq.n	8009786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097a6:	4b27      	ldr	r3, [pc, #156]	; (8009844 <xPortStartScheduler+0x134>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f1c3 0307 	rsb	r3, r3, #7
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d00a      	beq.n	80097c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	60bb      	str	r3, [r7, #8]
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <xPortStartScheduler+0x134>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	4a1d      	ldr	r2, [pc, #116]	; (8009844 <xPortStartScheduler+0x134>)
 80097d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097d2:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <xPortStartScheduler+0x134>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <xPortStartScheduler+0x134>)
 80097dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097e6:	4b18      	ldr	r3, [pc, #96]	; (8009848 <xPortStartScheduler+0x138>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a17      	ldr	r2, [pc, #92]	; (8009848 <xPortStartScheduler+0x138>)
 80097ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <xPortStartScheduler+0x138>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a14      	ldr	r2, [pc, #80]	; (8009848 <xPortStartScheduler+0x138>)
 80097f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097fe:	f000 f8dd 	bl	80099bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009802:	4b12      	ldr	r3, [pc, #72]	; (800984c <xPortStartScheduler+0x13c>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009808:	f000 f8fc 	bl	8009a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <xPortStartScheduler+0x140>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0f      	ldr	r2, [pc, #60]	; (8009850 <xPortStartScheduler+0x140>)
 8009812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009818:	f7ff ff66 	bl	80096e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800981c:	f7ff f82a 	bl	8008874 <vTaskSwitchContext>
	prvTaskExitError();
 8009820:	f7ff ff1c 	bl	800965c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	e000ed00 	.word	0xe000ed00
 8009834:	410fc271 	.word	0x410fc271
 8009838:	410fc270 	.word	0x410fc270
 800983c:	e000e400 	.word	0xe000e400
 8009840:	20008438 	.word	0x20008438
 8009844:	2000843c 	.word	0x2000843c
 8009848:	e000ed20 	.word	0xe000ed20
 800984c:	2000001c 	.word	0x2000001c
 8009850:	e000ef34 	.word	0xe000ef34

08009854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	607b      	str	r3, [r7, #4]
}
 800986c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <vPortEnterCritical+0x58>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <vPortEnterCritical+0x58>)
 8009876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <vPortEnterCritical+0x58>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d10f      	bne.n	80098a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <vPortEnterCritical+0x5c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	603b      	str	r3, [r7, #0]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <vPortEnterCritical+0x4a>
	}
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	2000001c 	.word	0x2000001c
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <vPortExitCritical+0x50>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <vPortExitCritical+0x24>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	607b      	str	r3, [r7, #4]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <vPortExitCritical+0x50>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3b01      	subs	r3, #1
 80098de:	4a09      	ldr	r2, [pc, #36]	; (8009904 <vPortExitCritical+0x50>)
 80098e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <vPortExitCritical+0x42>
 80098ea:	2300      	movs	r3, #0
 80098ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f383 8811 	msr	BASEPRI, r3
}
 80098f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	2000001c 	.word	0x2000001c
	...

08009910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009910:	f3ef 8009 	mrs	r0, PSP
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4b15      	ldr	r3, [pc, #84]	; (8009970 <pxCurrentTCBConst>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	f01e 0f10 	tst.w	lr, #16
 8009920:	bf08      	it	eq
 8009922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009934:	f380 8811 	msr	BASEPRI, r0
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f7fe ff98 	bl	8008874 <vTaskSwitchContext>
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	f380 8811 	msr	BASEPRI, r0
 800994c:	bc09      	pop	{r0, r3}
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	6808      	ldr	r0, [r1, #0]
 8009952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	f01e 0f10 	tst.w	lr, #16
 800995a:	bf08      	it	eq
 800995c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009960:	f380 8809 	msr	PSP, r0
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst>:
 8009970:	20007e0c 	.word	0x20007e0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009992:	f7fe feb5 	bl	8008700 <xTaskIncrementTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <xPortSysTickHandler+0x40>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <vPortSetupTimerInterrupt+0x38>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <vPortSetupTimerInterrupt+0x3c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <vPortSetupTimerInterrupt+0x40>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <vPortSetupTimerInterrupt+0x44>)
 80099da:	3b01      	subs	r3, #1
 80099dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099e0:	2207      	movs	r2, #7
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	e000e010 	.word	0xe000e010
 80099f4:	e000e018 	.word	0xe000e018
 80099f8:	20000010 	.word	0x20000010
 80099fc:	10624dd3 	.word	0x10624dd3
 8009a00:	e000e014 	.word	0xe000e014

08009a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a14 <vPortEnableVFP+0x10>
 8009a08:	6801      	ldr	r1, [r0, #0]
 8009a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a0e:	6001      	str	r1, [r0, #0]
 8009a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a12:	bf00      	nop
 8009a14:	e000ed88 	.word	0xe000ed88

08009a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d914      	bls.n	8009a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <vPortValidateInterruptPriority+0x70>)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a34:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <vPortValidateInterruptPriority+0x74>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	7afa      	ldrb	r2, [r7, #11]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d20a      	bcs.n	8009a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a54:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <vPortValidateInterruptPriority+0x78>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <vPortValidateInterruptPriority+0x7c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d90a      	bls.n	8009a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	603b      	str	r3, [r7, #0]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <vPortValidateInterruptPriority+0x60>
	}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	e000e3f0 	.word	0xe000e3f0
 8009a8c:	20008438 	.word	0x20008438
 8009a90:	e000ed0c 	.word	0xe000ed0c
 8009a94:	2000843c 	.word	0x2000843c

08009a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aa4:	f7fe fd70 	bl	8008588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aa8:	4b5b      	ldr	r3, [pc, #364]	; (8009c18 <pvPortMalloc+0x180>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab0:	f000 f920 	bl	8009cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ab4:	4b59      	ldr	r3, [pc, #356]	; (8009c1c <pvPortMalloc+0x184>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 8093 	bne.w	8009be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01d      	beq.n	8009b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ac8:	2208      	movs	r2, #8
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4413      	add	r3, r2
 8009ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d014      	beq.n	8009b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f023 0307 	bic.w	r3, r3, #7
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <pvPortMalloc+0x6c>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	617b      	str	r3, [r7, #20]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d06e      	beq.n	8009be8 <pvPortMalloc+0x150>
 8009b0a:	4b45      	ldr	r3, [pc, #276]	; (8009c20 <pvPortMalloc+0x188>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d869      	bhi.n	8009be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b14:	4b43      	ldr	r3, [pc, #268]	; (8009c24 <pvPortMalloc+0x18c>)
 8009b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b18:	4b42      	ldr	r3, [pc, #264]	; (8009c24 <pvPortMalloc+0x18c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1e:	e004      	b.n	8009b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d903      	bls.n	8009b3c <pvPortMalloc+0xa4>
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f1      	bne.n	8009b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b3c:	4b36      	ldr	r3, [pc, #216]	; (8009c18 <pvPortMalloc+0x180>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d050      	beq.n	8009be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	2308      	movs	r3, #8
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d91f      	bls.n	8009ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <pvPortMalloc+0xf8>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	613b      	str	r3, [r7, #16]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ba2:	69b8      	ldr	r0, [r7, #24]
 8009ba4:	f000 f908 	bl	8009db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ba8:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <pvPortMalloc+0x188>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <pvPortMalloc+0x188>)
 8009bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <pvPortMalloc+0x188>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	4b1b      	ldr	r3, [pc, #108]	; (8009c28 <pvPortMalloc+0x190>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d203      	bcs.n	8009bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <pvPortMalloc+0x188>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <pvPortMalloc+0x190>)
 8009bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <pvPortMalloc+0x184>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <pvPortMalloc+0x194>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	4a11      	ldr	r2, [pc, #68]	; (8009c2c <pvPortMalloc+0x194>)
 8009be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009be8:	f7fe fcdc 	bl	80085a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <pvPortMalloc+0x174>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <pvPortMalloc+0x172>
	return pvReturn;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3728      	adds	r7, #40	; 0x28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	2000c048 	.word	0x2000c048
 8009c1c:	2000c05c 	.word	0x2000c05c
 8009c20:	2000c04c 	.word	0x2000c04c
 8009c24:	2000c040 	.word	0x2000c040
 8009c28:	2000c050 	.word	0x2000c050
 8009c2c:	2000c054 	.word	0x2000c054

08009c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d04d      	beq.n	8009cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c42:	2308      	movs	r3, #8
 8009c44:	425b      	negs	r3, r3
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4413      	add	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <vPortFree+0xb8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4013      	ands	r3, r2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <vPortFree+0x44>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60fb      	str	r3, [r7, #12]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <vPortFree+0x62>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	60bb      	str	r3, [r7, #8]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <vPortFree+0xb8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01e      	beq.n	8009cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11a      	bne.n	8009cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <vPortFree+0xb8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	401a      	ands	r2, r3
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cb8:	f7fe fc66 	bl	8008588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <vPortFree+0xbc>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	4a09      	ldr	r2, [pc, #36]	; (8009cec <vPortFree+0xbc>)
 8009cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cca:	6938      	ldr	r0, [r7, #16]
 8009ccc:	f000 f874 	bl	8009db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <vPortFree+0xc0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <vPortFree+0xc0>)
 8009cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cda:	f7fe fc63 	bl	80085a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cde:	bf00      	nop
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000c05c 	.word	0x2000c05c
 8009cec:	2000c04c 	.word	0x2000c04c
 8009cf0:	2000c058 	.word	0x2000c058

08009cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <prvHeapInit+0xac>)
 8009d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <prvHeapInit+0xac>)
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <prvHeapInit+0xb0>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <prvHeapInit+0xb0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <prvHeapInit+0xb4>)
 8009d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvHeapInit+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvHeapInit+0xb4>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	; (8009dac <prvHeapInit+0xb8>)
 8009d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvHeapInit+0xbc>)
 8009d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <prvHeapInit+0xc0>)
 8009d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20008440 	.word	0x20008440
 8009da4:	2000c040 	.word	0x2000c040
 8009da8:	2000c048 	.word	0x2000c048
 8009dac:	2000c050 	.word	0x2000c050
 8009db0:	2000c04c 	.word	0x2000c04c
 8009db4:	2000c05c 	.word	0x2000c05c

08009db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <prvInsertBlockIntoFreeList+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x14>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d8f7      	bhi.n	8009dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d108      	bne.n	8009dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d118      	bne.n	8009e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d00d      	beq.n	8009e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e008      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e003      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d002      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	2000c040 	.word	0x2000c040
 8009e68:	2000c048 	.word	0x2000c048

08009e6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009e6c:	f000 b862 	b.w	8009f34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

08009e70 <get_serialized_size_geometry_msgs__msg__Twist>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4604      	mov	r4, r0
 8009e74:	b148      	cbz	r0, 8009e8a <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8009e76:	460d      	mov	r5, r1
 8009e78:	f000 f860 	bl	8009f3c <get_serialized_size_geometry_msgs__msg__Vector3>
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	1829      	adds	r1, r5, r0
 8009e80:	f104 0018 	add.w	r0, r4, #24
 8009e84:	f000 f85a 	bl	8009f3c <get_serialized_size_geometry_msgs__msg__Vector3>
 8009e88:	4430      	add	r0, r6
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}

08009e8c <_Twist__cdr_deserialize>:
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b189      	cbz	r1, 8009eb6 <_Twist__cdr_deserialize+0x2a>
 8009e92:	4605      	mov	r5, r0
 8009e94:	f000 f8de 	bl	800a054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8009e98:	6843      	ldr	r3, [r0, #4]
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	4798      	blx	r3
 8009ea2:	f000 f8d7 	bl	800a054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8009ea6:	6843      	ldr	r3, [r0, #4]
 8009ea8:	f104 0118 	add.w	r1, r4, #24
 8009eac:	4628      	mov	r0, r5
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eb4:	4718      	bx	r3
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	bd70      	pop	{r4, r5, r6, pc}
 8009eba:	bf00      	nop

08009ebc <_Twist__cdr_serialize>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	9101      	str	r1, [sp, #4]
 8009ec2:	b190      	cbz	r0, 8009eea <_Twist__cdr_serialize+0x2e>
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	f000 f8c5 	bl	800a054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8009eca:	6843      	ldr	r3, [r0, #4]
 8009ecc:	9901      	ldr	r1, [sp, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4798      	blx	r3
 8009ed4:	f000 f8be 	bl	800a054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8009ed8:	6843      	ldr	r3, [r0, #4]
 8009eda:	9901      	ldr	r1, [sp, #4]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f104 0018 	add.w	r0, r4, #24
 8009ee2:	b002      	add	sp, #8
 8009ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee8:	4718      	bx	r3
 8009eea:	b002      	add	sp, #8
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	bf00      	nop

08009ef0 <_Twist__get_serialized_size>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	b148      	cbz	r0, 8009f0a <_Twist__get_serialized_size+0x1a>
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	f000 f820 	bl	8009f3c <get_serialized_size_geometry_msgs__msg__Vector3>
 8009efc:	4605      	mov	r5, r0
 8009efe:	4629      	mov	r1, r5
 8009f00:	f104 0018 	add.w	r0, r4, #24
 8009f04:	f000 f81a 	bl	8009f3c <get_serialized_size_geometry_msgs__msg__Vector3>
 8009f08:	4428      	add	r0, r5
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}

08009f0c <_Twist__max_serialized_size>:
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	2301      	movs	r3, #1
 8009f12:	f10d 0007 	add.w	r0, sp, #7
 8009f16:	2100      	movs	r1, #0
 8009f18:	f88d 3007 	strb.w	r3, [sp, #7]
 8009f1c:	f000 f87e 	bl	800a01c <max_serialized_size_geometry_msgs__msg__Vector3>
 8009f20:	4604      	mov	r4, r0
 8009f22:	4621      	mov	r1, r4
 8009f24:	f10d 0007 	add.w	r0, sp, #7
 8009f28:	f000 f878 	bl	800a01c <max_serialized_size_geometry_msgs__msg__Vector3>
 8009f2c:	4420      	add	r0, r4
 8009f2e:	b002      	add	sp, #8
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	bf00      	nop

08009f34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8009f34:	4800      	ldr	r0, [pc, #0]	; (8009f38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8009f36:	4770      	bx	lr
 8009f38:	20000020 	.word	0x20000020

08009f3c <get_serialized_size_geometry_msgs__msg__Vector3>:
 8009f3c:	b1b8      	cbz	r0, 8009f6e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8009f3e:	b538      	push	{r3, r4, r5, lr}
 8009f40:	460d      	mov	r5, r1
 8009f42:	4628      	mov	r0, r5
 8009f44:	2108      	movs	r1, #8
 8009f46:	f001 f9fd 	bl	800b344 <ucdr_alignment>
 8009f4a:	f105 0308 	add.w	r3, r5, #8
 8009f4e:	181c      	adds	r4, r3, r0
 8009f50:	4620      	mov	r0, r4
 8009f52:	2108      	movs	r1, #8
 8009f54:	f001 f9f6 	bl	800b344 <ucdr_alignment>
 8009f58:	3008      	adds	r0, #8
 8009f5a:	4404      	add	r4, r0
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	2108      	movs	r1, #8
 8009f60:	f001 f9f0 	bl	800b344 <ucdr_alignment>
 8009f64:	f1c5 0508 	rsb	r5, r5, #8
 8009f68:	4428      	add	r0, r5
 8009f6a:	4420      	add	r0, r4
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	4770      	bx	lr

08009f70 <_Vector3__cdr_deserialize>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	460c      	mov	r4, r1
 8009f74:	b171      	cbz	r1, 8009f94 <_Vector3__cdr_deserialize+0x24>
 8009f76:	4605      	mov	r5, r0
 8009f78:	f001 f8c8 	bl	800b10c <ucdr_deserialize_double>
 8009f7c:	f104 0108 	add.w	r1, r4, #8
 8009f80:	4628      	mov	r0, r5
 8009f82:	f001 f8c3 	bl	800b10c <ucdr_deserialize_double>
 8009f86:	f104 0110 	add.w	r1, r4, #16
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f90:	f001 b8bc 	b.w	800b10c <ucdr_deserialize_double>
 8009f94:	4608      	mov	r0, r1
 8009f96:	bd38      	pop	{r3, r4, r5, pc}

08009f98 <_Vector3__cdr_serialize>:
 8009f98:	b198      	cbz	r0, 8009fc2 <_Vector3__cdr_serialize+0x2a>
 8009f9a:	b538      	push	{r3, r4, r5, lr}
 8009f9c:	ed90 0b00 	vldr	d0, [r0]
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	f000 ffe1 	bl	800af6c <ucdr_serialize_double>
 8009faa:	ed94 0b02 	vldr	d0, [r4, #8]
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 ffdc 	bl	800af6c <ucdr_serialize_double>
 8009fb4:	ed94 0b04 	vldr	d0, [r4, #16]
 8009fb8:	4628      	mov	r0, r5
 8009fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fbe:	f000 bfd5 	b.w	800af6c <ucdr_serialize_double>
 8009fc2:	4770      	bx	lr

08009fc4 <_Vector3__get_serialized_size>:
 8009fc4:	b198      	cbz	r0, 8009fee <_Vector3__get_serialized_size+0x2a>
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	2108      	movs	r1, #8
 8009fca:	2000      	movs	r0, #0
 8009fcc:	f001 f9ba 	bl	800b344 <ucdr_alignment>
 8009fd0:	f100 0408 	add.w	r4, r0, #8
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	2108      	movs	r1, #8
 8009fd8:	f001 f9b4 	bl	800b344 <ucdr_alignment>
 8009fdc:	3008      	adds	r0, #8
 8009fde:	4404      	add	r4, r0
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	2108      	movs	r1, #8
 8009fe4:	f001 f9ae 	bl	800b344 <ucdr_alignment>
 8009fe8:	3008      	adds	r0, #8
 8009fea:	4420      	add	r0, r4
 8009fec:	bd10      	pop	{r4, pc}
 8009fee:	4770      	bx	lr

08009ff0 <_Vector3__max_serialized_size>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	2108      	movs	r1, #8
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f001 f9a5 	bl	800b344 <ucdr_alignment>
 8009ffa:	f100 0508 	add.w	r5, r0, #8
 8009ffe:	4628      	mov	r0, r5
 800a000:	2108      	movs	r1, #8
 800a002:	f001 f99f 	bl	800b344 <ucdr_alignment>
 800a006:	f100 0408 	add.w	r4, r0, #8
 800a00a:	442c      	add	r4, r5
 800a00c:	4620      	mov	r0, r4
 800a00e:	2108      	movs	r1, #8
 800a010:	f001 f998 	bl	800b344 <ucdr_alignment>
 800a014:	3008      	adds	r0, #8
 800a016:	4420      	add	r0, r4
 800a018:	bd38      	pop	{r3, r4, r5, pc}
 800a01a:	bf00      	nop

0800a01c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a01c:	2301      	movs	r3, #1
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	7003      	strb	r3, [r0, #0]
 800a022:	460c      	mov	r4, r1
 800a024:	4608      	mov	r0, r1
 800a026:	2108      	movs	r1, #8
 800a028:	f001 f98c 	bl	800b344 <ucdr_alignment>
 800a02c:	f104 0508 	add.w	r5, r4, #8
 800a030:	1946      	adds	r6, r0, r5
 800a032:	4630      	mov	r0, r6
 800a034:	2108      	movs	r1, #8
 800a036:	f001 f985 	bl	800b344 <ucdr_alignment>
 800a03a:	f100 0508 	add.w	r5, r0, #8
 800a03e:	4435      	add	r5, r6
 800a040:	4628      	mov	r0, r5
 800a042:	2108      	movs	r1, #8
 800a044:	f001 f97e 	bl	800b344 <ucdr_alignment>
 800a048:	f1c4 0408 	rsb	r4, r4, #8
 800a04c:	4420      	add	r0, r4
 800a04e:	4428      	add	r0, r5
 800a050:	bd70      	pop	{r4, r5, r6, pc}
 800a052:	bf00      	nop

0800a054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a054:	4800      	ldr	r0, [pc, #0]	; (800a058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a056:	4770      	bx	lr
 800a058:	20000048 	.word	0x20000048

0800a05c <ucdr_serialize_bool>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	460d      	mov	r5, r1
 800a060:	2101      	movs	r1, #1
 800a062:	4604      	mov	r4, r0
 800a064:	f001 f924 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a068:	b148      	cbz	r0, 800a07e <ucdr_serialize_bool+0x22>
 800a06a:	68a3      	ldr	r3, [r4, #8]
 800a06c:	701d      	strb	r5, [r3, #0]
 800a06e:	68a2      	ldr	r2, [r4, #8]
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	3201      	adds	r2, #1
 800a074:	3301      	adds	r3, #1
 800a076:	2101      	movs	r1, #1
 800a078:	60a2      	str	r2, [r4, #8]
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	7561      	strb	r1, [r4, #21]
 800a07e:	7da0      	ldrb	r0, [r4, #22]
 800a080:	f080 0001 	eor.w	r0, r0, #1
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop

0800a088 <ucdr_deserialize_bool>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	460d      	mov	r5, r1
 800a08c:	2101      	movs	r1, #1
 800a08e:	4604      	mov	r4, r0
 800a090:	f001 f90e 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a094:	b168      	cbz	r0, 800a0b2 <ucdr_deserialize_bool+0x2a>
 800a096:	68a2      	ldr	r2, [r4, #8]
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a09e:	3900      	subs	r1, #0
 800a0a0:	f103 0301 	add.w	r3, r3, #1
 800a0a4:	bf18      	it	ne
 800a0a6:	2101      	movne	r1, #1
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	7029      	strb	r1, [r5, #0]
 800a0ac:	60a2      	str	r2, [r4, #8]
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	7560      	strb	r0, [r4, #21]
 800a0b2:	7da0      	ldrb	r0, [r4, #22]
 800a0b4:	f080 0001 	eor.w	r0, r0, #1
 800a0b8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ba:	bf00      	nop

0800a0bc <ucdr_serialize_uint8_t>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	460d      	mov	r5, r1
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	f001 f8f4 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a0c8:	b148      	cbz	r0, 800a0de <ucdr_serialize_uint8_t+0x22>
 800a0ca:	68a3      	ldr	r3, [r4, #8]
 800a0cc:	701d      	strb	r5, [r3, #0]
 800a0ce:	68a2      	ldr	r2, [r4, #8]
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	3201      	adds	r2, #1
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	60a2      	str	r2, [r4, #8]
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	7561      	strb	r1, [r4, #21]
 800a0de:	7da0      	ldrb	r0, [r4, #22]
 800a0e0:	f080 0001 	eor.w	r0, r0, #1
 800a0e4:	bd38      	pop	{r3, r4, r5, pc}
 800a0e6:	bf00      	nop

0800a0e8 <ucdr_deserialize_uint8_t>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	f001 f8de 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a0f4:	b150      	cbz	r0, 800a10c <ucdr_deserialize_uint8_t+0x24>
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	702b      	strb	r3, [r5, #0]
 800a0fc:	68a2      	ldr	r2, [r4, #8]
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	3201      	adds	r2, #1
 800a102:	3301      	adds	r3, #1
 800a104:	2101      	movs	r1, #1
 800a106:	60a2      	str	r2, [r4, #8]
 800a108:	6123      	str	r3, [r4, #16]
 800a10a:	7561      	strb	r1, [r4, #21]
 800a10c:	7da0      	ldrb	r0, [r4, #22]
 800a10e:	f080 0001 	eor.w	r0, r0, #1
 800a112:	bd38      	pop	{r3, r4, r5, pc}

0800a114 <ucdr_serialize_uint16_t>:
 800a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	460b      	mov	r3, r1
 800a11c:	2102      	movs	r1, #2
 800a11e:	4604      	mov	r4, r0
 800a120:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a124:	f001 f916 	bl	800b354 <ucdr_buffer_alignment>
 800a128:	4601      	mov	r1, r0
 800a12a:	4620      	mov	r0, r4
 800a12c:	7d67      	ldrb	r7, [r4, #21]
 800a12e:	f001 f955 	bl	800b3dc <ucdr_advance_buffer>
 800a132:	4620      	mov	r0, r4
 800a134:	2102      	movs	r1, #2
 800a136:	f001 f8af 	bl	800b298 <ucdr_check_buffer_available_for>
 800a13a:	bb78      	cbnz	r0, 800a19c <ucdr_serialize_uint16_t+0x88>
 800a13c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a140:	42b5      	cmp	r5, r6
 800a142:	d926      	bls.n	800a192 <ucdr_serialize_uint16_t+0x7e>
 800a144:	6922      	ldr	r2, [r4, #16]
 800a146:	60a5      	str	r5, [r4, #8]
 800a148:	1bad      	subs	r5, r5, r6
 800a14a:	442a      	add	r2, r5
 800a14c:	f1c5 0802 	rsb	r8, r5, #2
 800a150:	6122      	str	r2, [r4, #16]
 800a152:	4641      	mov	r1, r8
 800a154:	4620      	mov	r0, r4
 800a156:	f001 f8ab 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d03b      	beq.n	800a1d6 <ucdr_serialize_uint16_t+0xc2>
 800a15e:	7d23      	ldrb	r3, [r4, #20]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d04a      	beq.n	800a1fa <ucdr_serialize_uint16_t+0xe6>
 800a164:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a168:	7033      	strb	r3, [r6, #0]
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	d040      	beq.n	800a1f0 <ucdr_serialize_uint16_t+0xdc>
 800a16e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a172:	7073      	strb	r3, [r6, #1]
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	68a2      	ldr	r2, [r4, #8]
 800a178:	7da0      	ldrb	r0, [r4, #22]
 800a17a:	3302      	adds	r3, #2
 800a17c:	1b5b      	subs	r3, r3, r5
 800a17e:	4442      	add	r2, r8
 800a180:	2102      	movs	r1, #2
 800a182:	f080 0001 	eor.w	r0, r0, #1
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	60a2      	str	r2, [r4, #8]
 800a18a:	7561      	strb	r1, [r4, #21]
 800a18c:	b002      	add	sp, #8
 800a18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a192:	2102      	movs	r1, #2
 800a194:	4620      	mov	r0, r4
 800a196:	f001 f88b 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a19a:	b190      	cbz	r0, 800a1c2 <ucdr_serialize_uint16_t+0xae>
 800a19c:	7d23      	ldrb	r3, [r4, #20]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	68a3      	ldr	r3, [r4, #8]
 800a1a2:	d014      	beq.n	800a1ce <ucdr_serialize_uint16_t+0xba>
 800a1a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a1b0:	705a      	strb	r2, [r3, #1]
 800a1b2:	68a2      	ldr	r2, [r4, #8]
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	3202      	adds	r2, #2
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	60a2      	str	r2, [r4, #8]
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	7561      	strb	r1, [r4, #21]
 800a1c2:	7da0      	ldrb	r0, [r4, #22]
 800a1c4:	f080 0001 	eor.w	r0, r0, #1
 800a1c8:	b002      	add	sp, #8
 800a1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a1d2:	801a      	strh	r2, [r3, #0]
 800a1d4:	e7ed      	b.n	800a1b2 <ucdr_serialize_uint16_t+0x9e>
 800a1d6:	68a2      	ldr	r2, [r4, #8]
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	7da0      	ldrb	r0, [r4, #22]
 800a1dc:	7567      	strb	r7, [r4, #21]
 800a1de:	1b52      	subs	r2, r2, r5
 800a1e0:	1b5b      	subs	r3, r3, r5
 800a1e2:	f080 0001 	eor.w	r0, r0, #1
 800a1e6:	60a2      	str	r2, [r4, #8]
 800a1e8:	6123      	str	r3, [r4, #16]
 800a1ea:	b002      	add	sp, #8
 800a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	e7bc      	b.n	800a174 <ucdr_serialize_uint16_t+0x60>
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f10d 0606 	add.w	r6, sp, #6
 800a200:	4631      	mov	r1, r6
 800a202:	462a      	mov	r2, r5
 800a204:	f00b f95e 	bl	80154c4 <memcpy>
 800a208:	68a0      	ldr	r0, [r4, #8]
 800a20a:	4642      	mov	r2, r8
 800a20c:	1971      	adds	r1, r6, r5
 800a20e:	f00b f959 	bl	80154c4 <memcpy>
 800a212:	e7af      	b.n	800a174 <ucdr_serialize_uint16_t+0x60>

0800a214 <ucdr_serialize_endian_uint16_t>:
 800a214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a218:	b083      	sub	sp, #12
 800a21a:	460d      	mov	r5, r1
 800a21c:	2102      	movs	r1, #2
 800a21e:	4604      	mov	r4, r0
 800a220:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a224:	f001 f896 	bl	800b354 <ucdr_buffer_alignment>
 800a228:	4601      	mov	r1, r0
 800a22a:	4620      	mov	r0, r4
 800a22c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a230:	f001 f8d4 	bl	800b3dc <ucdr_advance_buffer>
 800a234:	4620      	mov	r0, r4
 800a236:	2102      	movs	r1, #2
 800a238:	f001 f82e 	bl	800b298 <ucdr_check_buffer_available_for>
 800a23c:	bb70      	cbnz	r0, 800a29c <ucdr_serialize_endian_uint16_t+0x88>
 800a23e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a242:	42be      	cmp	r6, r7
 800a244:	d925      	bls.n	800a292 <ucdr_serialize_endian_uint16_t+0x7e>
 800a246:	6922      	ldr	r2, [r4, #16]
 800a248:	60a6      	str	r6, [r4, #8]
 800a24a:	1bf6      	subs	r6, r6, r7
 800a24c:	4432      	add	r2, r6
 800a24e:	f1c6 0902 	rsb	r9, r6, #2
 800a252:	6122      	str	r2, [r4, #16]
 800a254:	4649      	mov	r1, r9
 800a256:	4620      	mov	r0, r4
 800a258:	f001 f82a 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d039      	beq.n	800a2d4 <ucdr_serialize_endian_uint16_t+0xc0>
 800a260:	2d01      	cmp	r5, #1
 800a262:	d04a      	beq.n	800a2fa <ucdr_serialize_endian_uint16_t+0xe6>
 800a264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a268:	703b      	strb	r3, [r7, #0]
 800a26a:	2e00      	cmp	r6, #0
 800a26c:	d040      	beq.n	800a2f0 <ucdr_serialize_endian_uint16_t+0xdc>
 800a26e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a272:	707b      	strb	r3, [r7, #1]
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	68a2      	ldr	r2, [r4, #8]
 800a278:	7da0      	ldrb	r0, [r4, #22]
 800a27a:	3302      	adds	r3, #2
 800a27c:	1b9b      	subs	r3, r3, r6
 800a27e:	444a      	add	r2, r9
 800a280:	2102      	movs	r1, #2
 800a282:	f080 0001 	eor.w	r0, r0, #1
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	60a2      	str	r2, [r4, #8]
 800a28a:	7561      	strb	r1, [r4, #21]
 800a28c:	b003      	add	sp, #12
 800a28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a292:	2102      	movs	r1, #2
 800a294:	4620      	mov	r0, r4
 800a296:	f001 f80b 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a29a:	b188      	cbz	r0, 800a2c0 <ucdr_serialize_endian_uint16_t+0xac>
 800a29c:	2d01      	cmp	r5, #1
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	d014      	beq.n	800a2cc <ucdr_serialize_endian_uint16_t+0xb8>
 800a2a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	68a3      	ldr	r3, [r4, #8]
 800a2aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a2ae:	705a      	strb	r2, [r3, #1]
 800a2b0:	68a2      	ldr	r2, [r4, #8]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	3202      	adds	r2, #2
 800a2b6:	3302      	adds	r3, #2
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	60a2      	str	r2, [r4, #8]
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	7561      	strb	r1, [r4, #21]
 800a2c0:	7da0      	ldrb	r0, [r4, #22]
 800a2c2:	f080 0001 	eor.w	r0, r0, #1
 800a2c6:	b003      	add	sp, #12
 800a2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a2d0:	801a      	strh	r2, [r3, #0]
 800a2d2:	e7ed      	b.n	800a2b0 <ucdr_serialize_endian_uint16_t+0x9c>
 800a2d4:	68a2      	ldr	r2, [r4, #8]
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	7da0      	ldrb	r0, [r4, #22]
 800a2da:	f884 8015 	strb.w	r8, [r4, #21]
 800a2de:	1b92      	subs	r2, r2, r6
 800a2e0:	1b9b      	subs	r3, r3, r6
 800a2e2:	f080 0001 	eor.w	r0, r0, #1
 800a2e6:	60a2      	str	r2, [r4, #8]
 800a2e8:	6123      	str	r3, [r4, #16]
 800a2ea:	b003      	add	sp, #12
 800a2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2f0:	68a3      	ldr	r3, [r4, #8]
 800a2f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e7bc      	b.n	800a274 <ucdr_serialize_endian_uint16_t+0x60>
 800a2fa:	f10d 0506 	add.w	r5, sp, #6
 800a2fe:	4629      	mov	r1, r5
 800a300:	4632      	mov	r2, r6
 800a302:	4638      	mov	r0, r7
 800a304:	f00b f8de 	bl	80154c4 <memcpy>
 800a308:	68a0      	ldr	r0, [r4, #8]
 800a30a:	464a      	mov	r2, r9
 800a30c:	19a9      	adds	r1, r5, r6
 800a30e:	f00b f8d9 	bl	80154c4 <memcpy>
 800a312:	e7af      	b.n	800a274 <ucdr_serialize_endian_uint16_t+0x60>

0800a314 <ucdr_deserialize_uint16_t>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	460d      	mov	r5, r1
 800a31a:	2102      	movs	r1, #2
 800a31c:	4604      	mov	r4, r0
 800a31e:	f001 f819 	bl	800b354 <ucdr_buffer_alignment>
 800a322:	4601      	mov	r1, r0
 800a324:	4620      	mov	r0, r4
 800a326:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a32a:	f001 f857 	bl	800b3dc <ucdr_advance_buffer>
 800a32e:	4620      	mov	r0, r4
 800a330:	2102      	movs	r1, #2
 800a332:	f000 ffb1 	bl	800b298 <ucdr_check_buffer_available_for>
 800a336:	bb60      	cbnz	r0, 800a392 <ucdr_deserialize_uint16_t+0x7e>
 800a338:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a33c:	42be      	cmp	r6, r7
 800a33e:	d923      	bls.n	800a388 <ucdr_deserialize_uint16_t+0x74>
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	60a6      	str	r6, [r4, #8]
 800a344:	1bf6      	subs	r6, r6, r7
 800a346:	4432      	add	r2, r6
 800a348:	f1c6 0902 	rsb	r9, r6, #2
 800a34c:	6122      	str	r2, [r4, #16]
 800a34e:	4649      	mov	r1, r9
 800a350:	4620      	mov	r0, r4
 800a352:	f000 ffad 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a356:	2800      	cmp	r0, #0
 800a358:	d034      	beq.n	800a3c4 <ucdr_deserialize_uint16_t+0xb0>
 800a35a:	7d23      	ldrb	r3, [r4, #20]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d042      	beq.n	800a3e6 <ucdr_deserialize_uint16_t+0xd2>
 800a360:	787b      	ldrb	r3, [r7, #1]
 800a362:	702b      	strb	r3, [r5, #0]
 800a364:	2e00      	cmp	r6, #0
 800a366:	d03a      	beq.n	800a3de <ucdr_deserialize_uint16_t+0xca>
 800a368:	783b      	ldrb	r3, [r7, #0]
 800a36a:	706b      	strb	r3, [r5, #1]
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	68a2      	ldr	r2, [r4, #8]
 800a370:	7da0      	ldrb	r0, [r4, #22]
 800a372:	2102      	movs	r1, #2
 800a374:	3302      	adds	r3, #2
 800a376:	1b9b      	subs	r3, r3, r6
 800a378:	444a      	add	r2, r9
 800a37a:	7561      	strb	r1, [r4, #21]
 800a37c:	6123      	str	r3, [r4, #16]
 800a37e:	60a2      	str	r2, [r4, #8]
 800a380:	f080 0001 	eor.w	r0, r0, #1
 800a384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a388:	2102      	movs	r1, #2
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 ff90 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a390:	b180      	cbz	r0, 800a3b4 <ucdr_deserialize_uint16_t+0xa0>
 800a392:	7d23      	ldrb	r3, [r4, #20]
 800a394:	2b01      	cmp	r3, #1
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	d011      	beq.n	800a3be <ucdr_deserialize_uint16_t+0xaa>
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	702b      	strb	r3, [r5, #0]
 800a39e:	68a3      	ldr	r3, [r4, #8]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	706b      	strb	r3, [r5, #1]
 800a3a4:	68a2      	ldr	r2, [r4, #8]
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	3202      	adds	r2, #2
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	2102      	movs	r1, #2
 800a3ae:	60a2      	str	r2, [r4, #8]
 800a3b0:	6123      	str	r3, [r4, #16]
 800a3b2:	7561      	strb	r1, [r4, #21]
 800a3b4:	7da0      	ldrb	r0, [r4, #22]
 800a3b6:	f080 0001 	eor.w	r0, r0, #1
 800a3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	802b      	strh	r3, [r5, #0]
 800a3c2:	e7ef      	b.n	800a3a4 <ucdr_deserialize_uint16_t+0x90>
 800a3c4:	68a2      	ldr	r2, [r4, #8]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	7da0      	ldrb	r0, [r4, #22]
 800a3ca:	f884 8015 	strb.w	r8, [r4, #21]
 800a3ce:	1b92      	subs	r2, r2, r6
 800a3d0:	1b9b      	subs	r3, r3, r6
 800a3d2:	60a2      	str	r2, [r4, #8]
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	f080 0001 	eor.w	r0, r0, #1
 800a3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	706b      	strb	r3, [r5, #1]
 800a3e4:	e7c2      	b.n	800a36c <ucdr_deserialize_uint16_t+0x58>
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f00b f86a 	bl	80154c4 <memcpy>
 800a3f0:	68a1      	ldr	r1, [r4, #8]
 800a3f2:	464a      	mov	r2, r9
 800a3f4:	19a8      	adds	r0, r5, r6
 800a3f6:	f00b f865 	bl	80154c4 <memcpy>
 800a3fa:	e7b7      	b.n	800a36c <ucdr_deserialize_uint16_t+0x58>

0800a3fc <ucdr_deserialize_endian_uint16_t>:
 800a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	460e      	mov	r6, r1
 800a402:	2102      	movs	r1, #2
 800a404:	4604      	mov	r4, r0
 800a406:	4615      	mov	r5, r2
 800a408:	f000 ffa4 	bl	800b354 <ucdr_buffer_alignment>
 800a40c:	4601      	mov	r1, r0
 800a40e:	4620      	mov	r0, r4
 800a410:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a414:	f000 ffe2 	bl	800b3dc <ucdr_advance_buffer>
 800a418:	4620      	mov	r0, r4
 800a41a:	2102      	movs	r1, #2
 800a41c:	f000 ff3c 	bl	800b298 <ucdr_check_buffer_available_for>
 800a420:	bb70      	cbnz	r0, 800a480 <ucdr_deserialize_endian_uint16_t+0x84>
 800a422:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a426:	4547      	cmp	r7, r8
 800a428:	d925      	bls.n	800a476 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a42a:	6922      	ldr	r2, [r4, #16]
 800a42c:	60a7      	str	r7, [r4, #8]
 800a42e:	eba7 0708 	sub.w	r7, r7, r8
 800a432:	443a      	add	r2, r7
 800a434:	f1c7 0a02 	rsb	sl, r7, #2
 800a438:	6122      	str	r2, [r4, #16]
 800a43a:	4651      	mov	r1, sl
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 ff37 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a442:	2800      	cmp	r0, #0
 800a444:	d034      	beq.n	800a4b0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a446:	2e01      	cmp	r6, #1
 800a448:	d043      	beq.n	800a4d2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a44a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a44e:	702b      	strb	r3, [r5, #0]
 800a450:	2f00      	cmp	r7, #0
 800a452:	d03a      	beq.n	800a4ca <ucdr_deserialize_endian_uint16_t+0xce>
 800a454:	f898 3000 	ldrb.w	r3, [r8]
 800a458:	706b      	strb	r3, [r5, #1]
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	68a2      	ldr	r2, [r4, #8]
 800a45e:	7da0      	ldrb	r0, [r4, #22]
 800a460:	2102      	movs	r1, #2
 800a462:	3302      	adds	r3, #2
 800a464:	1bdb      	subs	r3, r3, r7
 800a466:	4452      	add	r2, sl
 800a468:	7561      	strb	r1, [r4, #21]
 800a46a:	6123      	str	r3, [r4, #16]
 800a46c:	60a2      	str	r2, [r4, #8]
 800a46e:	f080 0001 	eor.w	r0, r0, #1
 800a472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a476:	2102      	movs	r1, #2
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 ff19 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a47e:	b178      	cbz	r0, 800a4a0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a480:	2e01      	cmp	r6, #1
 800a482:	68a3      	ldr	r3, [r4, #8]
 800a484:	d011      	beq.n	800a4aa <ucdr_deserialize_endian_uint16_t+0xae>
 800a486:	785b      	ldrb	r3, [r3, #1]
 800a488:	702b      	strb	r3, [r5, #0]
 800a48a:	68a3      	ldr	r3, [r4, #8]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	706b      	strb	r3, [r5, #1]
 800a490:	68a2      	ldr	r2, [r4, #8]
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	3202      	adds	r2, #2
 800a496:	3302      	adds	r3, #2
 800a498:	2102      	movs	r1, #2
 800a49a:	60a2      	str	r2, [r4, #8]
 800a49c:	6123      	str	r3, [r4, #16]
 800a49e:	7561      	strb	r1, [r4, #21]
 800a4a0:	7da0      	ldrb	r0, [r4, #22]
 800a4a2:	f080 0001 	eor.w	r0, r0, #1
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	802b      	strh	r3, [r5, #0]
 800a4ae:	e7ef      	b.n	800a490 <ucdr_deserialize_endian_uint16_t+0x94>
 800a4b0:	68a2      	ldr	r2, [r4, #8]
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	7da0      	ldrb	r0, [r4, #22]
 800a4b6:	f884 9015 	strb.w	r9, [r4, #21]
 800a4ba:	1bd2      	subs	r2, r2, r7
 800a4bc:	1bdb      	subs	r3, r3, r7
 800a4be:	60a2      	str	r2, [r4, #8]
 800a4c0:	6123      	str	r3, [r4, #16]
 800a4c2:	f080 0001 	eor.w	r0, r0, #1
 800a4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	706b      	strb	r3, [r5, #1]
 800a4d0:	e7c3      	b.n	800a45a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a4d2:	4641      	mov	r1, r8
 800a4d4:	463a      	mov	r2, r7
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f00a fff4 	bl	80154c4 <memcpy>
 800a4dc:	68a1      	ldr	r1, [r4, #8]
 800a4de:	4652      	mov	r2, sl
 800a4e0:	19e8      	adds	r0, r5, r7
 800a4e2:	f00a ffef 	bl	80154c4 <memcpy>
 800a4e6:	e7b8      	b.n	800a45a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a4e8 <ucdr_serialize_uint32_t>:
 800a4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	9101      	str	r1, [sp, #4]
 800a4f2:	2104      	movs	r1, #4
 800a4f4:	f000 ff2e 	bl	800b354 <ucdr_buffer_alignment>
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	7d67      	ldrb	r7, [r4, #21]
 800a4fe:	f000 ff6d 	bl	800b3dc <ucdr_advance_buffer>
 800a502:	4620      	mov	r0, r4
 800a504:	2104      	movs	r1, #4
 800a506:	f000 fec7 	bl	800b298 <ucdr_check_buffer_available_for>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d139      	bne.n	800a582 <ucdr_serialize_uint32_t+0x9a>
 800a50e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800a512:	42ae      	cmp	r6, r5
 800a514:	d930      	bls.n	800a578 <ucdr_serialize_uint32_t+0x90>
 800a516:	6922      	ldr	r2, [r4, #16]
 800a518:	60a6      	str	r6, [r4, #8]
 800a51a:	1b76      	subs	r6, r6, r5
 800a51c:	4432      	add	r2, r6
 800a51e:	f1c6 0804 	rsb	r8, r6, #4
 800a522:	6122      	str	r2, [r4, #16]
 800a524:	4641      	mov	r1, r8
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fec2 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d04c      	beq.n	800a5ca <ucdr_serialize_uint32_t+0xe2>
 800a530:	7d23      	ldrb	r3, [r4, #20]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d063      	beq.n	800a5fe <ucdr_serialize_uint32_t+0x116>
 800a536:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a53a:	702b      	strb	r3, [r5, #0]
 800a53c:	2e00      	cmp	r6, #0
 800a53e:	d051      	beq.n	800a5e4 <ucdr_serialize_uint32_t+0xfc>
 800a540:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a544:	706b      	strb	r3, [r5, #1]
 800a546:	2e01      	cmp	r6, #1
 800a548:	d050      	beq.n	800a5ec <ucdr_serialize_uint32_t+0x104>
 800a54a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a54e:	70ab      	strb	r3, [r5, #2]
 800a550:	2e02      	cmp	r6, #2
 800a552:	d04f      	beq.n	800a5f4 <ucdr_serialize_uint32_t+0x10c>
 800a554:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a558:	70eb      	strb	r3, [r5, #3]
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	68a2      	ldr	r2, [r4, #8]
 800a55e:	7da0      	ldrb	r0, [r4, #22]
 800a560:	3304      	adds	r3, #4
 800a562:	1b9b      	subs	r3, r3, r6
 800a564:	4442      	add	r2, r8
 800a566:	2104      	movs	r1, #4
 800a568:	f080 0001 	eor.w	r0, r0, #1
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	60a2      	str	r2, [r4, #8]
 800a570:	7561      	strb	r1, [r4, #21]
 800a572:	b002      	add	sp, #8
 800a574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a578:	2104      	movs	r1, #4
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 fe98 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a580:	b1d0      	cbz	r0, 800a5b8 <ucdr_serialize_uint32_t+0xd0>
 800a582:	7d23      	ldrb	r3, [r4, #20]
 800a584:	2b01      	cmp	r3, #1
 800a586:	68a3      	ldr	r3, [r4, #8]
 800a588:	d01c      	beq.n	800a5c4 <ucdr_serialize_uint32_t+0xdc>
 800a58a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a596:	705a      	strb	r2, [r3, #1]
 800a598:	68a3      	ldr	r3, [r4, #8]
 800a59a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a59e:	709a      	strb	r2, [r3, #2]
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a5a6:	70da      	strb	r2, [r3, #3]
 800a5a8:	68a2      	ldr	r2, [r4, #8]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	3204      	adds	r2, #4
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	2104      	movs	r1, #4
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	7561      	strb	r1, [r4, #21]
 800a5b8:	7da0      	ldrb	r0, [r4, #22]
 800a5ba:	f080 0001 	eor.w	r0, r0, #1
 800a5be:	b002      	add	sp, #8
 800a5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c4:	9a01      	ldr	r2, [sp, #4]
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	e7ee      	b.n	800a5a8 <ucdr_serialize_uint32_t+0xc0>
 800a5ca:	68a2      	ldr	r2, [r4, #8]
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	7da0      	ldrb	r0, [r4, #22]
 800a5d0:	7567      	strb	r7, [r4, #21]
 800a5d2:	1b92      	subs	r2, r2, r6
 800a5d4:	1b9b      	subs	r3, r3, r6
 800a5d6:	f080 0001 	eor.w	r0, r0, #1
 800a5da:	60a2      	str	r2, [r4, #8]
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	b002      	add	sp, #8
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5ea:	701a      	strb	r2, [r3, #0]
 800a5ec:	68a3      	ldr	r3, [r4, #8]
 800a5ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	68a3      	ldr	r3, [r4, #8]
 800a5f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	e7ad      	b.n	800a55a <ucdr_serialize_uint32_t+0x72>
 800a5fe:	4628      	mov	r0, r5
 800a600:	ad01      	add	r5, sp, #4
 800a602:	4629      	mov	r1, r5
 800a604:	4632      	mov	r2, r6
 800a606:	f00a ff5d 	bl	80154c4 <memcpy>
 800a60a:	68a0      	ldr	r0, [r4, #8]
 800a60c:	4642      	mov	r2, r8
 800a60e:	19a9      	adds	r1, r5, r6
 800a610:	f00a ff58 	bl	80154c4 <memcpy>
 800a614:	e7a1      	b.n	800a55a <ucdr_serialize_uint32_t+0x72>
 800a616:	bf00      	nop

0800a618 <ucdr_serialize_endian_uint32_t>:
 800a618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a61c:	b083      	sub	sp, #12
 800a61e:	460d      	mov	r5, r1
 800a620:	2104      	movs	r1, #4
 800a622:	4604      	mov	r4, r0
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	f000 fe95 	bl	800b354 <ucdr_buffer_alignment>
 800a62a:	4601      	mov	r1, r0
 800a62c:	4620      	mov	r0, r4
 800a62e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a632:	f000 fed3 	bl	800b3dc <ucdr_advance_buffer>
 800a636:	4620      	mov	r0, r4
 800a638:	2104      	movs	r1, #4
 800a63a:	f000 fe2d 	bl	800b298 <ucdr_check_buffer_available_for>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d138      	bne.n	800a6b4 <ucdr_serialize_endian_uint32_t+0x9c>
 800a642:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a646:	42b7      	cmp	r7, r6
 800a648:	d92f      	bls.n	800a6aa <ucdr_serialize_endian_uint32_t+0x92>
 800a64a:	6922      	ldr	r2, [r4, #16]
 800a64c:	60a7      	str	r7, [r4, #8]
 800a64e:	1bbf      	subs	r7, r7, r6
 800a650:	443a      	add	r2, r7
 800a652:	f1c7 0904 	rsb	r9, r7, #4
 800a656:	6122      	str	r2, [r4, #16]
 800a658:	4649      	mov	r1, r9
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fe28 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a660:	2800      	cmp	r0, #0
 800a662:	d04a      	beq.n	800a6fa <ucdr_serialize_endian_uint32_t+0xe2>
 800a664:	2d01      	cmp	r5, #1
 800a666:	d063      	beq.n	800a730 <ucdr_serialize_endian_uint32_t+0x118>
 800a668:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a66c:	7033      	strb	r3, [r6, #0]
 800a66e:	2f00      	cmp	r7, #0
 800a670:	d051      	beq.n	800a716 <ucdr_serialize_endian_uint32_t+0xfe>
 800a672:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a676:	7073      	strb	r3, [r6, #1]
 800a678:	2f01      	cmp	r7, #1
 800a67a:	d050      	beq.n	800a71e <ucdr_serialize_endian_uint32_t+0x106>
 800a67c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a680:	70b3      	strb	r3, [r6, #2]
 800a682:	2f02      	cmp	r7, #2
 800a684:	d04f      	beq.n	800a726 <ucdr_serialize_endian_uint32_t+0x10e>
 800a686:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a68a:	70f3      	strb	r3, [r6, #3]
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	68a2      	ldr	r2, [r4, #8]
 800a690:	7da0      	ldrb	r0, [r4, #22]
 800a692:	3304      	adds	r3, #4
 800a694:	1bdb      	subs	r3, r3, r7
 800a696:	444a      	add	r2, r9
 800a698:	2104      	movs	r1, #4
 800a69a:	f080 0001 	eor.w	r0, r0, #1
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	60a2      	str	r2, [r4, #8]
 800a6a2:	7561      	strb	r1, [r4, #21]
 800a6a4:	b003      	add	sp, #12
 800a6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	2104      	movs	r1, #4
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fdff 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a6b2:	b1c8      	cbz	r0, 800a6e8 <ucdr_serialize_endian_uint32_t+0xd0>
 800a6b4:	2d01      	cmp	r5, #1
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	d01c      	beq.n	800a6f4 <ucdr_serialize_endian_uint32_t+0xdc>
 800a6ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	68a3      	ldr	r3, [r4, #8]
 800a6c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a6c6:	705a      	strb	r2, [r3, #1]
 800a6c8:	68a3      	ldr	r3, [r4, #8]
 800a6ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a6ce:	709a      	strb	r2, [r3, #2]
 800a6d0:	68a3      	ldr	r3, [r4, #8]
 800a6d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a6d6:	70da      	strb	r2, [r3, #3]
 800a6d8:	68a2      	ldr	r2, [r4, #8]
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	3204      	adds	r2, #4
 800a6de:	3304      	adds	r3, #4
 800a6e0:	2104      	movs	r1, #4
 800a6e2:	60a2      	str	r2, [r4, #8]
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	7561      	strb	r1, [r4, #21]
 800a6e8:	7da0      	ldrb	r0, [r4, #22]
 800a6ea:	f080 0001 	eor.w	r0, r0, #1
 800a6ee:	b003      	add	sp, #12
 800a6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f4:	9a01      	ldr	r2, [sp, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	e7ee      	b.n	800a6d8 <ucdr_serialize_endian_uint32_t+0xc0>
 800a6fa:	68a2      	ldr	r2, [r4, #8]
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	7da0      	ldrb	r0, [r4, #22]
 800a700:	f884 8015 	strb.w	r8, [r4, #21]
 800a704:	1bd2      	subs	r2, r2, r7
 800a706:	1bdb      	subs	r3, r3, r7
 800a708:	f080 0001 	eor.w	r0, r0, #1
 800a70c:	60a2      	str	r2, [r4, #8]
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	b003      	add	sp, #12
 800a712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a716:	68a3      	ldr	r3, [r4, #8]
 800a718:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	68a3      	ldr	r3, [r4, #8]
 800a728:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	e7ad      	b.n	800a68c <ucdr_serialize_endian_uint32_t+0x74>
 800a730:	ad01      	add	r5, sp, #4
 800a732:	4629      	mov	r1, r5
 800a734:	463a      	mov	r2, r7
 800a736:	4630      	mov	r0, r6
 800a738:	f00a fec4 	bl	80154c4 <memcpy>
 800a73c:	68a0      	ldr	r0, [r4, #8]
 800a73e:	464a      	mov	r2, r9
 800a740:	19e9      	adds	r1, r5, r7
 800a742:	f00a febf 	bl	80154c4 <memcpy>
 800a746:	e7a1      	b.n	800a68c <ucdr_serialize_endian_uint32_t+0x74>

0800a748 <ucdr_deserialize_uint32_t>:
 800a748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a74c:	460d      	mov	r5, r1
 800a74e:	2104      	movs	r1, #4
 800a750:	4604      	mov	r4, r0
 800a752:	f000 fdff 	bl	800b354 <ucdr_buffer_alignment>
 800a756:	4601      	mov	r1, r0
 800a758:	4620      	mov	r0, r4
 800a75a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a75e:	f000 fe3d 	bl	800b3dc <ucdr_advance_buffer>
 800a762:	4620      	mov	r0, r4
 800a764:	2104      	movs	r1, #4
 800a766:	f000 fd97 	bl	800b298 <ucdr_check_buffer_available_for>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d138      	bne.n	800a7e0 <ucdr_deserialize_uint32_t+0x98>
 800a76e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a772:	42b7      	cmp	r7, r6
 800a774:	d92f      	bls.n	800a7d6 <ucdr_deserialize_uint32_t+0x8e>
 800a776:	6922      	ldr	r2, [r4, #16]
 800a778:	60a7      	str	r7, [r4, #8]
 800a77a:	1bbf      	subs	r7, r7, r6
 800a77c:	443a      	add	r2, r7
 800a77e:	f1c7 0904 	rsb	r9, r7, #4
 800a782:	6122      	str	r2, [r4, #16]
 800a784:	4649      	mov	r1, r9
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fd92 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d046      	beq.n	800a81e <ucdr_deserialize_uint32_t+0xd6>
 800a790:	7d23      	ldrb	r3, [r4, #20]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d05c      	beq.n	800a850 <ucdr_deserialize_uint32_t+0x108>
 800a796:	78f3      	ldrb	r3, [r6, #3]
 800a798:	702b      	strb	r3, [r5, #0]
 800a79a:	2f00      	cmp	r7, #0
 800a79c:	d04c      	beq.n	800a838 <ucdr_deserialize_uint32_t+0xf0>
 800a79e:	78b3      	ldrb	r3, [r6, #2]
 800a7a0:	706b      	strb	r3, [r5, #1]
 800a7a2:	2f01      	cmp	r7, #1
 800a7a4:	f105 0302 	add.w	r3, r5, #2
 800a7a8:	d04a      	beq.n	800a840 <ucdr_deserialize_uint32_t+0xf8>
 800a7aa:	7873      	ldrb	r3, [r6, #1]
 800a7ac:	70ab      	strb	r3, [r5, #2]
 800a7ae:	2f02      	cmp	r7, #2
 800a7b0:	f105 0303 	add.w	r3, r5, #3
 800a7b4:	d048      	beq.n	800a848 <ucdr_deserialize_uint32_t+0x100>
 800a7b6:	7833      	ldrb	r3, [r6, #0]
 800a7b8:	70eb      	strb	r3, [r5, #3]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	68a2      	ldr	r2, [r4, #8]
 800a7be:	7da0      	ldrb	r0, [r4, #22]
 800a7c0:	2104      	movs	r1, #4
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	1bdb      	subs	r3, r3, r7
 800a7c6:	444a      	add	r2, r9
 800a7c8:	7561      	strb	r1, [r4, #21]
 800a7ca:	6123      	str	r3, [r4, #16]
 800a7cc:	60a2      	str	r2, [r4, #8]
 800a7ce:	f080 0001 	eor.w	r0, r0, #1
 800a7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d6:	2104      	movs	r1, #4
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fd69 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a7de:	b1b0      	cbz	r0, 800a80e <ucdr_deserialize_uint32_t+0xc6>
 800a7e0:	7d23      	ldrb	r3, [r4, #20]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	68a3      	ldr	r3, [r4, #8]
 800a7e6:	d017      	beq.n	800a818 <ucdr_deserialize_uint32_t+0xd0>
 800a7e8:	78db      	ldrb	r3, [r3, #3]
 800a7ea:	702b      	strb	r3, [r5, #0]
 800a7ec:	68a3      	ldr	r3, [r4, #8]
 800a7ee:	789b      	ldrb	r3, [r3, #2]
 800a7f0:	706b      	strb	r3, [r5, #1]
 800a7f2:	68a3      	ldr	r3, [r4, #8]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	70ab      	strb	r3, [r5, #2]
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	70eb      	strb	r3, [r5, #3]
 800a7fe:	68a2      	ldr	r2, [r4, #8]
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	3204      	adds	r2, #4
 800a804:	3304      	adds	r3, #4
 800a806:	2104      	movs	r1, #4
 800a808:	60a2      	str	r2, [r4, #8]
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	7561      	strb	r1, [r4, #21]
 800a80e:	7da0      	ldrb	r0, [r4, #22]
 800a810:	f080 0001 	eor.w	r0, r0, #1
 800a814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	602b      	str	r3, [r5, #0]
 800a81c:	e7ef      	b.n	800a7fe <ucdr_deserialize_uint32_t+0xb6>
 800a81e:	68a2      	ldr	r2, [r4, #8]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	7da0      	ldrb	r0, [r4, #22]
 800a824:	f884 8015 	strb.w	r8, [r4, #21]
 800a828:	1bd2      	subs	r2, r2, r7
 800a82a:	1bdb      	subs	r3, r3, r7
 800a82c:	60a2      	str	r2, [r4, #8]
 800a82e:	6123      	str	r3, [r4, #16]
 800a830:	f080 0001 	eor.w	r0, r0, #1
 800a834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a838:	68a3      	ldr	r3, [r4, #8]
 800a83a:	789b      	ldrb	r3, [r3, #2]
 800a83c:	706b      	strb	r3, [r5, #1]
 800a83e:	1cab      	adds	r3, r5, #2
 800a840:	68a2      	ldr	r2, [r4, #8]
 800a842:	7852      	ldrb	r2, [r2, #1]
 800a844:	f803 2b01 	strb.w	r2, [r3], #1
 800a848:	68a2      	ldr	r2, [r4, #8]
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	e7b4      	b.n	800a7ba <ucdr_deserialize_uint32_t+0x72>
 800a850:	4631      	mov	r1, r6
 800a852:	463a      	mov	r2, r7
 800a854:	4628      	mov	r0, r5
 800a856:	f00a fe35 	bl	80154c4 <memcpy>
 800a85a:	68a1      	ldr	r1, [r4, #8]
 800a85c:	464a      	mov	r2, r9
 800a85e:	19e8      	adds	r0, r5, r7
 800a860:	f00a fe30 	bl	80154c4 <memcpy>
 800a864:	e7a9      	b.n	800a7ba <ucdr_deserialize_uint32_t+0x72>
 800a866:	bf00      	nop

0800a868 <ucdr_deserialize_endian_uint32_t>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	460e      	mov	r6, r1
 800a86e:	2104      	movs	r1, #4
 800a870:	4604      	mov	r4, r0
 800a872:	4615      	mov	r5, r2
 800a874:	f000 fd6e 	bl	800b354 <ucdr_buffer_alignment>
 800a878:	4601      	mov	r1, r0
 800a87a:	4620      	mov	r0, r4
 800a87c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a880:	f000 fdac 	bl	800b3dc <ucdr_advance_buffer>
 800a884:	4620      	mov	r0, r4
 800a886:	2104      	movs	r1, #4
 800a888:	f000 fd06 	bl	800b298 <ucdr_check_buffer_available_for>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d13c      	bne.n	800a90a <ucdr_deserialize_endian_uint32_t+0xa2>
 800a890:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a894:	42bb      	cmp	r3, r7
 800a896:	d933      	bls.n	800a900 <ucdr_deserialize_endian_uint32_t+0x98>
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	60a3      	str	r3, [r4, #8]
 800a89c:	eba3 0807 	sub.w	r8, r3, r7
 800a8a0:	4442      	add	r2, r8
 800a8a2:	f1c8 0a04 	rsb	sl, r8, #4
 800a8a6:	6122      	str	r2, [r4, #16]
 800a8a8:	4651      	mov	r1, sl
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fd00 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d048      	beq.n	800a946 <ucdr_deserialize_endian_uint32_t+0xde>
 800a8b4:	2e01      	cmp	r6, #1
 800a8b6:	d061      	beq.n	800a97c <ucdr_deserialize_endian_uint32_t+0x114>
 800a8b8:	78fb      	ldrb	r3, [r7, #3]
 800a8ba:	702b      	strb	r3, [r5, #0]
 800a8bc:	f1b8 0f00 	cmp.w	r8, #0
 800a8c0:	d050      	beq.n	800a964 <ucdr_deserialize_endian_uint32_t+0xfc>
 800a8c2:	78bb      	ldrb	r3, [r7, #2]
 800a8c4:	706b      	strb	r3, [r5, #1]
 800a8c6:	f1b8 0f01 	cmp.w	r8, #1
 800a8ca:	f105 0302 	add.w	r3, r5, #2
 800a8ce:	d04d      	beq.n	800a96c <ucdr_deserialize_endian_uint32_t+0x104>
 800a8d0:	787b      	ldrb	r3, [r7, #1]
 800a8d2:	70ab      	strb	r3, [r5, #2]
 800a8d4:	f1b8 0f02 	cmp.w	r8, #2
 800a8d8:	f105 0303 	add.w	r3, r5, #3
 800a8dc:	d04a      	beq.n	800a974 <ucdr_deserialize_endian_uint32_t+0x10c>
 800a8de:	783b      	ldrb	r3, [r7, #0]
 800a8e0:	70eb      	strb	r3, [r5, #3]
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	68a2      	ldr	r2, [r4, #8]
 800a8e6:	7da0      	ldrb	r0, [r4, #22]
 800a8e8:	2104      	movs	r1, #4
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	eba3 0308 	sub.w	r3, r3, r8
 800a8f0:	4452      	add	r2, sl
 800a8f2:	7561      	strb	r1, [r4, #21]
 800a8f4:	6123      	str	r3, [r4, #16]
 800a8f6:	60a2      	str	r2, [r4, #8]
 800a8f8:	f080 0001 	eor.w	r0, r0, #1
 800a8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a900:	2104      	movs	r1, #4
 800a902:	4620      	mov	r0, r4
 800a904:	f000 fcd4 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a908:	b1a8      	cbz	r0, 800a936 <ucdr_deserialize_endian_uint32_t+0xce>
 800a90a:	2e01      	cmp	r6, #1
 800a90c:	68a3      	ldr	r3, [r4, #8]
 800a90e:	d017      	beq.n	800a940 <ucdr_deserialize_endian_uint32_t+0xd8>
 800a910:	78db      	ldrb	r3, [r3, #3]
 800a912:	702b      	strb	r3, [r5, #0]
 800a914:	68a3      	ldr	r3, [r4, #8]
 800a916:	789b      	ldrb	r3, [r3, #2]
 800a918:	706b      	strb	r3, [r5, #1]
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	70ab      	strb	r3, [r5, #2]
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	70eb      	strb	r3, [r5, #3]
 800a926:	68a2      	ldr	r2, [r4, #8]
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	3204      	adds	r2, #4
 800a92c:	3304      	adds	r3, #4
 800a92e:	2104      	movs	r1, #4
 800a930:	60a2      	str	r2, [r4, #8]
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	7561      	strb	r1, [r4, #21]
 800a936:	7da0      	ldrb	r0, [r4, #22]
 800a938:	f080 0001 	eor.w	r0, r0, #1
 800a93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	602b      	str	r3, [r5, #0]
 800a944:	e7ef      	b.n	800a926 <ucdr_deserialize_endian_uint32_t+0xbe>
 800a946:	68a2      	ldr	r2, [r4, #8]
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	7da0      	ldrb	r0, [r4, #22]
 800a94c:	f884 9015 	strb.w	r9, [r4, #21]
 800a950:	eba2 0208 	sub.w	r2, r2, r8
 800a954:	eba3 0308 	sub.w	r3, r3, r8
 800a958:	60a2      	str	r2, [r4, #8]
 800a95a:	6123      	str	r3, [r4, #16]
 800a95c:	f080 0001 	eor.w	r0, r0, #1
 800a960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a964:	68a3      	ldr	r3, [r4, #8]
 800a966:	789b      	ldrb	r3, [r3, #2]
 800a968:	706b      	strb	r3, [r5, #1]
 800a96a:	1cab      	adds	r3, r5, #2
 800a96c:	68a2      	ldr	r2, [r4, #8]
 800a96e:	7852      	ldrb	r2, [r2, #1]
 800a970:	f803 2b01 	strb.w	r2, [r3], #1
 800a974:	68a2      	ldr	r2, [r4, #8]
 800a976:	7812      	ldrb	r2, [r2, #0]
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e7b2      	b.n	800a8e2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800a97c:	4639      	mov	r1, r7
 800a97e:	4642      	mov	r2, r8
 800a980:	4628      	mov	r0, r5
 800a982:	f00a fd9f 	bl	80154c4 <memcpy>
 800a986:	68a1      	ldr	r1, [r4, #8]
 800a988:	4652      	mov	r2, sl
 800a98a:	eb05 0008 	add.w	r0, r5, r8
 800a98e:	f00a fd99 	bl	80154c4 <memcpy>
 800a992:	e7a6      	b.n	800a8e2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800a994 <ucdr_serialize_uint64_t>:
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	2108      	movs	r1, #8
 800a99a:	b082      	sub	sp, #8
 800a99c:	4604      	mov	r4, r0
 800a99e:	e9cd 2300 	strd	r2, r3, [sp]
 800a9a2:	f000 fcd7 	bl	800b354 <ucdr_buffer_alignment>
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	7d67      	ldrb	r7, [r4, #21]
 800a9ac:	f000 fd16 	bl	800b3dc <ucdr_advance_buffer>
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	2108      	movs	r1, #8
 800a9b4:	f000 fc70 	bl	800b298 <ucdr_check_buffer_available_for>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d14e      	bne.n	800aa5a <ucdr_serialize_uint64_t+0xc6>
 800a9bc:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a9c0:	42b5      	cmp	r5, r6
 800a9c2:	d945      	bls.n	800aa50 <ucdr_serialize_uint64_t+0xbc>
 800a9c4:	6923      	ldr	r3, [r4, #16]
 800a9c6:	60a5      	str	r5, [r4, #8]
 800a9c8:	1bad      	subs	r5, r5, r6
 800a9ca:	442b      	add	r3, r5
 800a9cc:	f1c5 0808 	rsb	r8, r5, #8
 800a9d0:	6123      	str	r3, [r4, #16]
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 fc6b 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d074      	beq.n	800aac8 <ucdr_serialize_uint64_t+0x134>
 800a9de:	7d23      	ldrb	r3, [r4, #20]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	f000 809b 	beq.w	800ab1c <ucdr_serialize_uint64_t+0x188>
 800a9e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9ea:	7033      	strb	r3, [r6, #0]
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	d078      	beq.n	800aae2 <ucdr_serialize_uint64_t+0x14e>
 800a9f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9f4:	7073      	strb	r3, [r6, #1]
 800a9f6:	2d01      	cmp	r5, #1
 800a9f8:	d077      	beq.n	800aaea <ucdr_serialize_uint64_t+0x156>
 800a9fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a9fe:	70b3      	strb	r3, [r6, #2]
 800aa00:	2d02      	cmp	r5, #2
 800aa02:	d076      	beq.n	800aaf2 <ucdr_serialize_uint64_t+0x15e>
 800aa04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aa08:	70f3      	strb	r3, [r6, #3]
 800aa0a:	2d03      	cmp	r5, #3
 800aa0c:	d075      	beq.n	800aafa <ucdr_serialize_uint64_t+0x166>
 800aa0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aa12:	7133      	strb	r3, [r6, #4]
 800aa14:	2d04      	cmp	r5, #4
 800aa16:	d074      	beq.n	800ab02 <ucdr_serialize_uint64_t+0x16e>
 800aa18:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800aa1c:	7173      	strb	r3, [r6, #5]
 800aa1e:	2d05      	cmp	r5, #5
 800aa20:	d073      	beq.n	800ab0a <ucdr_serialize_uint64_t+0x176>
 800aa22:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800aa26:	71b3      	strb	r3, [r6, #6]
 800aa28:	2d06      	cmp	r5, #6
 800aa2a:	d072      	beq.n	800ab12 <ucdr_serialize_uint64_t+0x17e>
 800aa2c:	f89d 3000 	ldrb.w	r3, [sp]
 800aa30:	71f3      	strb	r3, [r6, #7]
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	68a2      	ldr	r2, [r4, #8]
 800aa36:	7da0      	ldrb	r0, [r4, #22]
 800aa38:	3308      	adds	r3, #8
 800aa3a:	1b5d      	subs	r5, r3, r5
 800aa3c:	4442      	add	r2, r8
 800aa3e:	2308      	movs	r3, #8
 800aa40:	f080 0001 	eor.w	r0, r0, #1
 800aa44:	6125      	str	r5, [r4, #16]
 800aa46:	60a2      	str	r2, [r4, #8]
 800aa48:	7563      	strb	r3, [r4, #21]
 800aa4a:	b002      	add	sp, #8
 800aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa50:	2108      	movs	r1, #8
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fc2c 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800aa58:	b350      	cbz	r0, 800aab0 <ucdr_serialize_uint64_t+0x11c>
 800aa5a:	7d23      	ldrb	r3, [r4, #20]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d02d      	beq.n	800aabc <ucdr_serialize_uint64_t+0x128>
 800aa60:	68a3      	ldr	r3, [r4, #8]
 800aa62:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	68a3      	ldr	r3, [r4, #8]
 800aa6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa6e:	705a      	strb	r2, [r3, #1]
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aa76:	709a      	strb	r2, [r3, #2]
 800aa78:	68a3      	ldr	r3, [r4, #8]
 800aa7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa7e:	70da      	strb	r2, [r3, #3]
 800aa80:	68a3      	ldr	r3, [r4, #8]
 800aa82:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800aa86:	711a      	strb	r2, [r3, #4]
 800aa88:	68a3      	ldr	r3, [r4, #8]
 800aa8a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800aa8e:	715a      	strb	r2, [r3, #5]
 800aa90:	68a3      	ldr	r3, [r4, #8]
 800aa92:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800aa96:	719a      	strb	r2, [r3, #6]
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	f89d 2000 	ldrb.w	r2, [sp]
 800aa9e:	71da      	strb	r2, [r3, #7]
 800aaa0:	68a2      	ldr	r2, [r4, #8]
 800aaa2:	6923      	ldr	r3, [r4, #16]
 800aaa4:	3208      	adds	r2, #8
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	2108      	movs	r1, #8
 800aaaa:	60a2      	str	r2, [r4, #8]
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	7561      	strb	r1, [r4, #21]
 800aab0:	7da0      	ldrb	r0, [r4, #22]
 800aab2:	f080 0001 	eor.w	r0, r0, #1
 800aab6:	b002      	add	sp, #8
 800aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aabc:	466b      	mov	r3, sp
 800aabe:	cb03      	ldmia	r3!, {r0, r1}
 800aac0:	68a3      	ldr	r3, [r4, #8]
 800aac2:	6018      	str	r0, [r3, #0]
 800aac4:	6059      	str	r1, [r3, #4]
 800aac6:	e7eb      	b.n	800aaa0 <ucdr_serialize_uint64_t+0x10c>
 800aac8:	68a2      	ldr	r2, [r4, #8]
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	7da0      	ldrb	r0, [r4, #22]
 800aace:	7567      	strb	r7, [r4, #21]
 800aad0:	1b52      	subs	r2, r2, r5
 800aad2:	f080 0001 	eor.w	r0, r0, #1
 800aad6:	1b5d      	subs	r5, r3, r5
 800aad8:	60a2      	str	r2, [r4, #8]
 800aada:	6125      	str	r5, [r4, #16]
 800aadc:	b002      	add	sp, #8
 800aade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aae8:	701a      	strb	r2, [r3, #0]
 800aaea:	68a3      	ldr	r3, [r4, #8]
 800aaec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ab00:	701a      	strb	r2, [r3, #0]
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ab08:	701a      	strb	r2, [r3, #0]
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ab10:	701a      	strb	r2, [r3, #0]
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	f89d 2000 	ldrb.w	r2, [sp]
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	e78a      	b.n	800aa32 <ucdr_serialize_uint64_t+0x9e>
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	466e      	mov	r6, sp
 800ab20:	4631      	mov	r1, r6
 800ab22:	462a      	mov	r2, r5
 800ab24:	f00a fcce 	bl	80154c4 <memcpy>
 800ab28:	68a0      	ldr	r0, [r4, #8]
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	1971      	adds	r1, r6, r5
 800ab2e:	f00a fcc9 	bl	80154c4 <memcpy>
 800ab32:	e77e      	b.n	800aa32 <ucdr_serialize_uint64_t+0x9e>

0800ab34 <ucdr_serialize_int16_t>:
 800ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	4604      	mov	r4, r0
 800ab40:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ab44:	f000 fc06 	bl	800b354 <ucdr_buffer_alignment>
 800ab48:	4601      	mov	r1, r0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	7d67      	ldrb	r7, [r4, #21]
 800ab4e:	f000 fc45 	bl	800b3dc <ucdr_advance_buffer>
 800ab52:	4620      	mov	r0, r4
 800ab54:	2102      	movs	r1, #2
 800ab56:	f000 fb9f 	bl	800b298 <ucdr_check_buffer_available_for>
 800ab5a:	bb78      	cbnz	r0, 800abbc <ucdr_serialize_int16_t+0x88>
 800ab5c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800ab60:	42b5      	cmp	r5, r6
 800ab62:	d926      	bls.n	800abb2 <ucdr_serialize_int16_t+0x7e>
 800ab64:	6922      	ldr	r2, [r4, #16]
 800ab66:	60a5      	str	r5, [r4, #8]
 800ab68:	1bad      	subs	r5, r5, r6
 800ab6a:	442a      	add	r2, r5
 800ab6c:	f1c5 0802 	rsb	r8, r5, #2
 800ab70:	6122      	str	r2, [r4, #16]
 800ab72:	4641      	mov	r1, r8
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 fb9b 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d03b      	beq.n	800abf6 <ucdr_serialize_int16_t+0xc2>
 800ab7e:	7d23      	ldrb	r3, [r4, #20]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d04a      	beq.n	800ac1a <ucdr_serialize_int16_t+0xe6>
 800ab84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab88:	7033      	strb	r3, [r6, #0]
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	d040      	beq.n	800ac10 <ucdr_serialize_int16_t+0xdc>
 800ab8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab92:	7073      	strb	r3, [r6, #1]
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	68a2      	ldr	r2, [r4, #8]
 800ab98:	7da0      	ldrb	r0, [r4, #22]
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	1b5b      	subs	r3, r3, r5
 800ab9e:	4442      	add	r2, r8
 800aba0:	2102      	movs	r1, #2
 800aba2:	f080 0001 	eor.w	r0, r0, #1
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	60a2      	str	r2, [r4, #8]
 800abaa:	7561      	strb	r1, [r4, #21]
 800abac:	b002      	add	sp, #8
 800abae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb2:	2102      	movs	r1, #2
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fb7b 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800abba:	b190      	cbz	r0, 800abe2 <ucdr_serialize_int16_t+0xae>
 800abbc:	7d23      	ldrb	r3, [r4, #20]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	68a3      	ldr	r3, [r4, #8]
 800abc2:	d014      	beq.n	800abee <ucdr_serialize_int16_t+0xba>
 800abc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abd0:	705a      	strb	r2, [r3, #1]
 800abd2:	68a2      	ldr	r2, [r4, #8]
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	3202      	adds	r2, #2
 800abd8:	3302      	adds	r3, #2
 800abda:	2102      	movs	r1, #2
 800abdc:	60a2      	str	r2, [r4, #8]
 800abde:	6123      	str	r3, [r4, #16]
 800abe0:	7561      	strb	r1, [r4, #21]
 800abe2:	7da0      	ldrb	r0, [r4, #22]
 800abe4:	f080 0001 	eor.w	r0, r0, #1
 800abe8:	b002      	add	sp, #8
 800abea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e7ed      	b.n	800abd2 <ucdr_serialize_int16_t+0x9e>
 800abf6:	68a2      	ldr	r2, [r4, #8]
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	7da0      	ldrb	r0, [r4, #22]
 800abfc:	7567      	strb	r7, [r4, #21]
 800abfe:	1b52      	subs	r2, r2, r5
 800ac00:	1b5b      	subs	r3, r3, r5
 800ac02:	f080 0001 	eor.w	r0, r0, #1
 800ac06:	60a2      	str	r2, [r4, #8]
 800ac08:	6123      	str	r3, [r4, #16]
 800ac0a:	b002      	add	sp, #8
 800ac0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	e7bc      	b.n	800ab94 <ucdr_serialize_int16_t+0x60>
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f10d 0606 	add.w	r6, sp, #6
 800ac20:	4631      	mov	r1, r6
 800ac22:	462a      	mov	r2, r5
 800ac24:	f00a fc4e 	bl	80154c4 <memcpy>
 800ac28:	68a0      	ldr	r0, [r4, #8]
 800ac2a:	4642      	mov	r2, r8
 800ac2c:	1971      	adds	r1, r6, r5
 800ac2e:	f00a fc49 	bl	80154c4 <memcpy>
 800ac32:	e7af      	b.n	800ab94 <ucdr_serialize_int16_t+0x60>

0800ac34 <ucdr_deserialize_int16_t>:
 800ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac38:	460d      	mov	r5, r1
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	f000 fb89 	bl	800b354 <ucdr_buffer_alignment>
 800ac42:	4601      	mov	r1, r0
 800ac44:	4620      	mov	r0, r4
 800ac46:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac4a:	f000 fbc7 	bl	800b3dc <ucdr_advance_buffer>
 800ac4e:	4620      	mov	r0, r4
 800ac50:	2102      	movs	r1, #2
 800ac52:	f000 fb21 	bl	800b298 <ucdr_check_buffer_available_for>
 800ac56:	bb60      	cbnz	r0, 800acb2 <ucdr_deserialize_int16_t+0x7e>
 800ac58:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ac5c:	42be      	cmp	r6, r7
 800ac5e:	d923      	bls.n	800aca8 <ucdr_deserialize_int16_t+0x74>
 800ac60:	6922      	ldr	r2, [r4, #16]
 800ac62:	60a6      	str	r6, [r4, #8]
 800ac64:	1bf6      	subs	r6, r6, r7
 800ac66:	4432      	add	r2, r6
 800ac68:	f1c6 0902 	rsb	r9, r6, #2
 800ac6c:	6122      	str	r2, [r4, #16]
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 fb1d 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d034      	beq.n	800ace4 <ucdr_deserialize_int16_t+0xb0>
 800ac7a:	7d23      	ldrb	r3, [r4, #20]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d042      	beq.n	800ad06 <ucdr_deserialize_int16_t+0xd2>
 800ac80:	787b      	ldrb	r3, [r7, #1]
 800ac82:	702b      	strb	r3, [r5, #0]
 800ac84:	2e00      	cmp	r6, #0
 800ac86:	d03a      	beq.n	800acfe <ucdr_deserialize_int16_t+0xca>
 800ac88:	783b      	ldrb	r3, [r7, #0]
 800ac8a:	706b      	strb	r3, [r5, #1]
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	68a2      	ldr	r2, [r4, #8]
 800ac90:	7da0      	ldrb	r0, [r4, #22]
 800ac92:	2102      	movs	r1, #2
 800ac94:	3302      	adds	r3, #2
 800ac96:	1b9b      	subs	r3, r3, r6
 800ac98:	444a      	add	r2, r9
 800ac9a:	7561      	strb	r1, [r4, #21]
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	60a2      	str	r2, [r4, #8]
 800aca0:	f080 0001 	eor.w	r0, r0, #1
 800aca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca8:	2102      	movs	r1, #2
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fb00 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800acb0:	b180      	cbz	r0, 800acd4 <ucdr_deserialize_int16_t+0xa0>
 800acb2:	7d23      	ldrb	r3, [r4, #20]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	d011      	beq.n	800acde <ucdr_deserialize_int16_t+0xaa>
 800acba:	785b      	ldrb	r3, [r3, #1]
 800acbc:	702b      	strb	r3, [r5, #0]
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	706b      	strb	r3, [r5, #1]
 800acc4:	68a2      	ldr	r2, [r4, #8]
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	3202      	adds	r2, #2
 800acca:	3302      	adds	r3, #2
 800accc:	2102      	movs	r1, #2
 800acce:	60a2      	str	r2, [r4, #8]
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	7561      	strb	r1, [r4, #21]
 800acd4:	7da0      	ldrb	r0, [r4, #22]
 800acd6:	f080 0001 	eor.w	r0, r0, #1
 800acda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	802b      	strh	r3, [r5, #0]
 800ace2:	e7ef      	b.n	800acc4 <ucdr_deserialize_int16_t+0x90>
 800ace4:	68a2      	ldr	r2, [r4, #8]
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	7da0      	ldrb	r0, [r4, #22]
 800acea:	f884 8015 	strb.w	r8, [r4, #21]
 800acee:	1b92      	subs	r2, r2, r6
 800acf0:	1b9b      	subs	r3, r3, r6
 800acf2:	60a2      	str	r2, [r4, #8]
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	f080 0001 	eor.w	r0, r0, #1
 800acfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	706b      	strb	r3, [r5, #1]
 800ad04:	e7c2      	b.n	800ac8c <ucdr_deserialize_int16_t+0x58>
 800ad06:	4639      	mov	r1, r7
 800ad08:	4632      	mov	r2, r6
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f00a fbda 	bl	80154c4 <memcpy>
 800ad10:	68a1      	ldr	r1, [r4, #8]
 800ad12:	464a      	mov	r2, r9
 800ad14:	19a8      	adds	r0, r5, r6
 800ad16:	f00a fbd5 	bl	80154c4 <memcpy>
 800ad1a:	e7b7      	b.n	800ac8c <ucdr_deserialize_int16_t+0x58>

0800ad1c <ucdr_serialize_int32_t>:
 800ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	4604      	mov	r4, r0
 800ad24:	9101      	str	r1, [sp, #4]
 800ad26:	2104      	movs	r1, #4
 800ad28:	f000 fb14 	bl	800b354 <ucdr_buffer_alignment>
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	4620      	mov	r0, r4
 800ad30:	7d67      	ldrb	r7, [r4, #21]
 800ad32:	f000 fb53 	bl	800b3dc <ucdr_advance_buffer>
 800ad36:	4620      	mov	r0, r4
 800ad38:	2104      	movs	r1, #4
 800ad3a:	f000 faad 	bl	800b298 <ucdr_check_buffer_available_for>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d139      	bne.n	800adb6 <ucdr_serialize_int32_t+0x9a>
 800ad42:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ad46:	42ae      	cmp	r6, r5
 800ad48:	d930      	bls.n	800adac <ucdr_serialize_int32_t+0x90>
 800ad4a:	6922      	ldr	r2, [r4, #16]
 800ad4c:	60a6      	str	r6, [r4, #8]
 800ad4e:	1b76      	subs	r6, r6, r5
 800ad50:	4432      	add	r2, r6
 800ad52:	f1c6 0804 	rsb	r8, r6, #4
 800ad56:	6122      	str	r2, [r4, #16]
 800ad58:	4641      	mov	r1, r8
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 faa8 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d04c      	beq.n	800adfe <ucdr_serialize_int32_t+0xe2>
 800ad64:	7d23      	ldrb	r3, [r4, #20]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d063      	beq.n	800ae32 <ucdr_serialize_int32_t+0x116>
 800ad6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad6e:	702b      	strb	r3, [r5, #0]
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	d051      	beq.n	800ae18 <ucdr_serialize_int32_t+0xfc>
 800ad74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad78:	706b      	strb	r3, [r5, #1]
 800ad7a:	2e01      	cmp	r6, #1
 800ad7c:	d050      	beq.n	800ae20 <ucdr_serialize_int32_t+0x104>
 800ad7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad82:	70ab      	strb	r3, [r5, #2]
 800ad84:	2e02      	cmp	r6, #2
 800ad86:	d04f      	beq.n	800ae28 <ucdr_serialize_int32_t+0x10c>
 800ad88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad8c:	70eb      	strb	r3, [r5, #3]
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	68a2      	ldr	r2, [r4, #8]
 800ad92:	7da0      	ldrb	r0, [r4, #22]
 800ad94:	3304      	adds	r3, #4
 800ad96:	1b9b      	subs	r3, r3, r6
 800ad98:	4442      	add	r2, r8
 800ad9a:	2104      	movs	r1, #4
 800ad9c:	f080 0001 	eor.w	r0, r0, #1
 800ada0:	6123      	str	r3, [r4, #16]
 800ada2:	60a2      	str	r2, [r4, #8]
 800ada4:	7561      	strb	r1, [r4, #21]
 800ada6:	b002      	add	sp, #8
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	2104      	movs	r1, #4
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 fa7e 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800adb4:	b1d0      	cbz	r0, 800adec <ucdr_serialize_int32_t+0xd0>
 800adb6:	7d23      	ldrb	r3, [r4, #20]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	d01c      	beq.n	800adf8 <ucdr_serialize_int32_t+0xdc>
 800adbe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800adc2:	701a      	strb	r2, [r3, #0]
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800adca:	705a      	strb	r2, [r3, #1]
 800adcc:	68a3      	ldr	r3, [r4, #8]
 800adce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800add2:	709a      	strb	r2, [r3, #2]
 800add4:	68a3      	ldr	r3, [r4, #8]
 800add6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800adda:	70da      	strb	r2, [r3, #3]
 800addc:	68a2      	ldr	r2, [r4, #8]
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	3204      	adds	r2, #4
 800ade2:	3304      	adds	r3, #4
 800ade4:	2104      	movs	r1, #4
 800ade6:	60a2      	str	r2, [r4, #8]
 800ade8:	6123      	str	r3, [r4, #16]
 800adea:	7561      	strb	r1, [r4, #21]
 800adec:	7da0      	ldrb	r0, [r4, #22]
 800adee:	f080 0001 	eor.w	r0, r0, #1
 800adf2:	b002      	add	sp, #8
 800adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf8:	9a01      	ldr	r2, [sp, #4]
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	e7ee      	b.n	800addc <ucdr_serialize_int32_t+0xc0>
 800adfe:	68a2      	ldr	r2, [r4, #8]
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	7da0      	ldrb	r0, [r4, #22]
 800ae04:	7567      	strb	r7, [r4, #21]
 800ae06:	1b92      	subs	r2, r2, r6
 800ae08:	1b9b      	subs	r3, r3, r6
 800ae0a:	f080 0001 	eor.w	r0, r0, #1
 800ae0e:	60a2      	str	r2, [r4, #8]
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	b002      	add	sp, #8
 800ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae18:	68a3      	ldr	r3, [r4, #8]
 800ae1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae1e:	701a      	strb	r2, [r3, #0]
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae26:	701a      	strb	r2, [r3, #0]
 800ae28:	68a3      	ldr	r3, [r4, #8]
 800ae2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae2e:	701a      	strb	r2, [r3, #0]
 800ae30:	e7ad      	b.n	800ad8e <ucdr_serialize_int32_t+0x72>
 800ae32:	4628      	mov	r0, r5
 800ae34:	ad01      	add	r5, sp, #4
 800ae36:	4629      	mov	r1, r5
 800ae38:	4632      	mov	r2, r6
 800ae3a:	f00a fb43 	bl	80154c4 <memcpy>
 800ae3e:	68a0      	ldr	r0, [r4, #8]
 800ae40:	4642      	mov	r2, r8
 800ae42:	19a9      	adds	r1, r5, r6
 800ae44:	f00a fb3e 	bl	80154c4 <memcpy>
 800ae48:	e7a1      	b.n	800ad8e <ucdr_serialize_int32_t+0x72>
 800ae4a:	bf00      	nop

0800ae4c <ucdr_deserialize_int32_t>:
 800ae4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae50:	460d      	mov	r5, r1
 800ae52:	2104      	movs	r1, #4
 800ae54:	4604      	mov	r4, r0
 800ae56:	f000 fa7d 	bl	800b354 <ucdr_buffer_alignment>
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae62:	f000 fabb 	bl	800b3dc <ucdr_advance_buffer>
 800ae66:	4620      	mov	r0, r4
 800ae68:	2104      	movs	r1, #4
 800ae6a:	f000 fa15 	bl	800b298 <ucdr_check_buffer_available_for>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d138      	bne.n	800aee4 <ucdr_deserialize_int32_t+0x98>
 800ae72:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae76:	42b7      	cmp	r7, r6
 800ae78:	d92f      	bls.n	800aeda <ucdr_deserialize_int32_t+0x8e>
 800ae7a:	6922      	ldr	r2, [r4, #16]
 800ae7c:	60a7      	str	r7, [r4, #8]
 800ae7e:	1bbf      	subs	r7, r7, r6
 800ae80:	443a      	add	r2, r7
 800ae82:	f1c7 0904 	rsb	r9, r7, #4
 800ae86:	6122      	str	r2, [r4, #16]
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 fa10 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d046      	beq.n	800af22 <ucdr_deserialize_int32_t+0xd6>
 800ae94:	7d23      	ldrb	r3, [r4, #20]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d05c      	beq.n	800af54 <ucdr_deserialize_int32_t+0x108>
 800ae9a:	78f3      	ldrb	r3, [r6, #3]
 800ae9c:	702b      	strb	r3, [r5, #0]
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d04c      	beq.n	800af3c <ucdr_deserialize_int32_t+0xf0>
 800aea2:	78b3      	ldrb	r3, [r6, #2]
 800aea4:	706b      	strb	r3, [r5, #1]
 800aea6:	2f01      	cmp	r7, #1
 800aea8:	f105 0302 	add.w	r3, r5, #2
 800aeac:	d04a      	beq.n	800af44 <ucdr_deserialize_int32_t+0xf8>
 800aeae:	7873      	ldrb	r3, [r6, #1]
 800aeb0:	70ab      	strb	r3, [r5, #2]
 800aeb2:	2f02      	cmp	r7, #2
 800aeb4:	f105 0303 	add.w	r3, r5, #3
 800aeb8:	d048      	beq.n	800af4c <ucdr_deserialize_int32_t+0x100>
 800aeba:	7833      	ldrb	r3, [r6, #0]
 800aebc:	70eb      	strb	r3, [r5, #3]
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	68a2      	ldr	r2, [r4, #8]
 800aec2:	7da0      	ldrb	r0, [r4, #22]
 800aec4:	2104      	movs	r1, #4
 800aec6:	3304      	adds	r3, #4
 800aec8:	1bdb      	subs	r3, r3, r7
 800aeca:	444a      	add	r2, r9
 800aecc:	7561      	strb	r1, [r4, #21]
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	60a2      	str	r2, [r4, #8]
 800aed2:	f080 0001 	eor.w	r0, r0, #1
 800aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeda:	2104      	movs	r1, #4
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 f9e7 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800aee2:	b1b0      	cbz	r0, 800af12 <ucdr_deserialize_int32_t+0xc6>
 800aee4:	7d23      	ldrb	r3, [r4, #20]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	68a3      	ldr	r3, [r4, #8]
 800aeea:	d017      	beq.n	800af1c <ucdr_deserialize_int32_t+0xd0>
 800aeec:	78db      	ldrb	r3, [r3, #3]
 800aeee:	702b      	strb	r3, [r5, #0]
 800aef0:	68a3      	ldr	r3, [r4, #8]
 800aef2:	789b      	ldrb	r3, [r3, #2]
 800aef4:	706b      	strb	r3, [r5, #1]
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	785b      	ldrb	r3, [r3, #1]
 800aefa:	70ab      	strb	r3, [r5, #2]
 800aefc:	68a3      	ldr	r3, [r4, #8]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	70eb      	strb	r3, [r5, #3]
 800af02:	68a2      	ldr	r2, [r4, #8]
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	3204      	adds	r2, #4
 800af08:	3304      	adds	r3, #4
 800af0a:	2104      	movs	r1, #4
 800af0c:	60a2      	str	r2, [r4, #8]
 800af0e:	6123      	str	r3, [r4, #16]
 800af10:	7561      	strb	r1, [r4, #21]
 800af12:	7da0      	ldrb	r0, [r4, #22]
 800af14:	f080 0001 	eor.w	r0, r0, #1
 800af18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	e7ef      	b.n	800af02 <ucdr_deserialize_int32_t+0xb6>
 800af22:	68a2      	ldr	r2, [r4, #8]
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	7da0      	ldrb	r0, [r4, #22]
 800af28:	f884 8015 	strb.w	r8, [r4, #21]
 800af2c:	1bd2      	subs	r2, r2, r7
 800af2e:	1bdb      	subs	r3, r3, r7
 800af30:	60a2      	str	r2, [r4, #8]
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	f080 0001 	eor.w	r0, r0, #1
 800af38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3c:	68a3      	ldr	r3, [r4, #8]
 800af3e:	789b      	ldrb	r3, [r3, #2]
 800af40:	706b      	strb	r3, [r5, #1]
 800af42:	1cab      	adds	r3, r5, #2
 800af44:	68a2      	ldr	r2, [r4, #8]
 800af46:	7852      	ldrb	r2, [r2, #1]
 800af48:	f803 2b01 	strb.w	r2, [r3], #1
 800af4c:	68a2      	ldr	r2, [r4, #8]
 800af4e:	7812      	ldrb	r2, [r2, #0]
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e7b4      	b.n	800aebe <ucdr_deserialize_int32_t+0x72>
 800af54:	4631      	mov	r1, r6
 800af56:	463a      	mov	r2, r7
 800af58:	4628      	mov	r0, r5
 800af5a:	f00a fab3 	bl	80154c4 <memcpy>
 800af5e:	68a1      	ldr	r1, [r4, #8]
 800af60:	464a      	mov	r2, r9
 800af62:	19e8      	adds	r0, r5, r7
 800af64:	f00a faae 	bl	80154c4 <memcpy>
 800af68:	e7a9      	b.n	800aebe <ucdr_deserialize_int32_t+0x72>
 800af6a:	bf00      	nop

0800af6c <ucdr_serialize_double>:
 800af6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af70:	2108      	movs	r1, #8
 800af72:	b082      	sub	sp, #8
 800af74:	4604      	mov	r4, r0
 800af76:	ed8d 0b00 	vstr	d0, [sp]
 800af7a:	f000 f9eb 	bl	800b354 <ucdr_buffer_alignment>
 800af7e:	4601      	mov	r1, r0
 800af80:	4620      	mov	r0, r4
 800af82:	7d67      	ldrb	r7, [r4, #21]
 800af84:	f000 fa2a 	bl	800b3dc <ucdr_advance_buffer>
 800af88:	4620      	mov	r0, r4
 800af8a:	2108      	movs	r1, #8
 800af8c:	f000 f984 	bl	800b298 <ucdr_check_buffer_available_for>
 800af90:	2800      	cmp	r0, #0
 800af92:	d14e      	bne.n	800b032 <ucdr_serialize_double+0xc6>
 800af94:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800af98:	42b5      	cmp	r5, r6
 800af9a:	d945      	bls.n	800b028 <ucdr_serialize_double+0xbc>
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	60a5      	str	r5, [r4, #8]
 800afa0:	1bad      	subs	r5, r5, r6
 800afa2:	442b      	add	r3, r5
 800afa4:	f1c5 0808 	rsb	r8, r5, #8
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	4641      	mov	r1, r8
 800afac:	4620      	mov	r0, r4
 800afae:	f000 f97f 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d074      	beq.n	800b0a0 <ucdr_serialize_double+0x134>
 800afb6:	7d23      	ldrb	r3, [r4, #20]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	f000 809b 	beq.w	800b0f4 <ucdr_serialize_double+0x188>
 800afbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afc2:	7033      	strb	r3, [r6, #0]
 800afc4:	2d00      	cmp	r5, #0
 800afc6:	d078      	beq.n	800b0ba <ucdr_serialize_double+0x14e>
 800afc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afcc:	7073      	strb	r3, [r6, #1]
 800afce:	2d01      	cmp	r5, #1
 800afd0:	d077      	beq.n	800b0c2 <ucdr_serialize_double+0x156>
 800afd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800afd6:	70b3      	strb	r3, [r6, #2]
 800afd8:	2d02      	cmp	r5, #2
 800afda:	d076      	beq.n	800b0ca <ucdr_serialize_double+0x15e>
 800afdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800afe0:	70f3      	strb	r3, [r6, #3]
 800afe2:	2d03      	cmp	r5, #3
 800afe4:	d075      	beq.n	800b0d2 <ucdr_serialize_double+0x166>
 800afe6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800afea:	7133      	strb	r3, [r6, #4]
 800afec:	2d04      	cmp	r5, #4
 800afee:	d074      	beq.n	800b0da <ucdr_serialize_double+0x16e>
 800aff0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800aff4:	7173      	strb	r3, [r6, #5]
 800aff6:	2d05      	cmp	r5, #5
 800aff8:	d073      	beq.n	800b0e2 <ucdr_serialize_double+0x176>
 800affa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800affe:	71b3      	strb	r3, [r6, #6]
 800b000:	2d06      	cmp	r5, #6
 800b002:	d072      	beq.n	800b0ea <ucdr_serialize_double+0x17e>
 800b004:	f89d 3000 	ldrb.w	r3, [sp]
 800b008:	71f3      	strb	r3, [r6, #7]
 800b00a:	6923      	ldr	r3, [r4, #16]
 800b00c:	68a2      	ldr	r2, [r4, #8]
 800b00e:	7da0      	ldrb	r0, [r4, #22]
 800b010:	3308      	adds	r3, #8
 800b012:	1b5d      	subs	r5, r3, r5
 800b014:	4442      	add	r2, r8
 800b016:	2308      	movs	r3, #8
 800b018:	f080 0001 	eor.w	r0, r0, #1
 800b01c:	6125      	str	r5, [r4, #16]
 800b01e:	60a2      	str	r2, [r4, #8]
 800b020:	7563      	strb	r3, [r4, #21]
 800b022:	b002      	add	sp, #8
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	2108      	movs	r1, #8
 800b02a:	4620      	mov	r0, r4
 800b02c:	f000 f940 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800b030:	b350      	cbz	r0, 800b088 <ucdr_serialize_double+0x11c>
 800b032:	7d23      	ldrb	r3, [r4, #20]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d02d      	beq.n	800b094 <ucdr_serialize_double+0x128>
 800b038:	68a3      	ldr	r3, [r4, #8]
 800b03a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b03e:	701a      	strb	r2, [r3, #0]
 800b040:	68a3      	ldr	r3, [r4, #8]
 800b042:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b046:	705a      	strb	r2, [r3, #1]
 800b048:	68a3      	ldr	r3, [r4, #8]
 800b04a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b04e:	709a      	strb	r2, [r3, #2]
 800b050:	68a3      	ldr	r3, [r4, #8]
 800b052:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b056:	70da      	strb	r2, [r3, #3]
 800b058:	68a3      	ldr	r3, [r4, #8]
 800b05a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b05e:	711a      	strb	r2, [r3, #4]
 800b060:	68a3      	ldr	r3, [r4, #8]
 800b062:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b066:	715a      	strb	r2, [r3, #5]
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b06e:	719a      	strb	r2, [r3, #6]
 800b070:	68a3      	ldr	r3, [r4, #8]
 800b072:	f89d 2000 	ldrb.w	r2, [sp]
 800b076:	71da      	strb	r2, [r3, #7]
 800b078:	68a2      	ldr	r2, [r4, #8]
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	3208      	adds	r2, #8
 800b07e:	3308      	adds	r3, #8
 800b080:	2108      	movs	r1, #8
 800b082:	60a2      	str	r2, [r4, #8]
 800b084:	6123      	str	r3, [r4, #16]
 800b086:	7561      	strb	r1, [r4, #21]
 800b088:	7da0      	ldrb	r0, [r4, #22]
 800b08a:	f080 0001 	eor.w	r0, r0, #1
 800b08e:	b002      	add	sp, #8
 800b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b094:	466b      	mov	r3, sp
 800b096:	cb03      	ldmia	r3!, {r0, r1}
 800b098:	68a3      	ldr	r3, [r4, #8]
 800b09a:	6018      	str	r0, [r3, #0]
 800b09c:	6059      	str	r1, [r3, #4]
 800b09e:	e7eb      	b.n	800b078 <ucdr_serialize_double+0x10c>
 800b0a0:	68a2      	ldr	r2, [r4, #8]
 800b0a2:	6923      	ldr	r3, [r4, #16]
 800b0a4:	7da0      	ldrb	r0, [r4, #22]
 800b0a6:	7567      	strb	r7, [r4, #21]
 800b0a8:	1b52      	subs	r2, r2, r5
 800b0aa:	f080 0001 	eor.w	r0, r0, #1
 800b0ae:	1b5d      	subs	r5, r3, r5
 800b0b0:	60a2      	str	r2, [r4, #8]
 800b0b2:	6125      	str	r5, [r4, #16]
 800b0b4:	b002      	add	sp, #8
 800b0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	68a3      	ldr	r3, [r4, #8]
 800b0c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0c8:	701a      	strb	r2, [r3, #0]
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0d0:	701a      	strb	r2, [r3, #0]
 800b0d2:	68a3      	ldr	r3, [r4, #8]
 800b0d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	f89d 2000 	ldrb.w	r2, [sp]
 800b0f0:	701a      	strb	r2, [r3, #0]
 800b0f2:	e78a      	b.n	800b00a <ucdr_serialize_double+0x9e>
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	466e      	mov	r6, sp
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	f00a f9e2 	bl	80154c4 <memcpy>
 800b100:	68a0      	ldr	r0, [r4, #8]
 800b102:	4642      	mov	r2, r8
 800b104:	1971      	adds	r1, r6, r5
 800b106:	f00a f9dd 	bl	80154c4 <memcpy>
 800b10a:	e77e      	b.n	800b00a <ucdr_serialize_double+0x9e>

0800b10c <ucdr_deserialize_double>:
 800b10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b110:	460d      	mov	r5, r1
 800b112:	2108      	movs	r1, #8
 800b114:	4604      	mov	r4, r0
 800b116:	f000 f91d 	bl	800b354 <ucdr_buffer_alignment>
 800b11a:	4601      	mov	r1, r0
 800b11c:	4620      	mov	r0, r4
 800b11e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b122:	f000 f95b 	bl	800b3dc <ucdr_advance_buffer>
 800b126:	4620      	mov	r0, r4
 800b128:	2108      	movs	r1, #8
 800b12a:	f000 f8b5 	bl	800b298 <ucdr_check_buffer_available_for>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d151      	bne.n	800b1d6 <ucdr_deserialize_double+0xca>
 800b132:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b136:	42be      	cmp	r6, r7
 800b138:	d948      	bls.n	800b1cc <ucdr_deserialize_double+0xc0>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	60a6      	str	r6, [r4, #8]
 800b13e:	1bf6      	subs	r6, r6, r7
 800b140:	4433      	add	r3, r6
 800b142:	f1c6 0808 	rsb	r8, r6, #8
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	4641      	mov	r1, r8
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 f8b0 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800b150:	2800      	cmp	r0, #0
 800b152:	d06d      	beq.n	800b230 <ucdr_deserialize_double+0x124>
 800b154:	7d23      	ldrb	r3, [r4, #20]
 800b156:	2b01      	cmp	r3, #1
 800b158:	f000 8093 	beq.w	800b282 <ucdr_deserialize_double+0x176>
 800b15c:	79fb      	ldrb	r3, [r7, #7]
 800b15e:	702b      	strb	r3, [r5, #0]
 800b160:	2e00      	cmp	r6, #0
 800b162:	d072      	beq.n	800b24a <ucdr_deserialize_double+0x13e>
 800b164:	79bb      	ldrb	r3, [r7, #6]
 800b166:	706b      	strb	r3, [r5, #1]
 800b168:	2e01      	cmp	r6, #1
 800b16a:	f105 0302 	add.w	r3, r5, #2
 800b16e:	d070      	beq.n	800b252 <ucdr_deserialize_double+0x146>
 800b170:	797b      	ldrb	r3, [r7, #5]
 800b172:	70ab      	strb	r3, [r5, #2]
 800b174:	2e02      	cmp	r6, #2
 800b176:	f105 0303 	add.w	r3, r5, #3
 800b17a:	d06e      	beq.n	800b25a <ucdr_deserialize_double+0x14e>
 800b17c:	793b      	ldrb	r3, [r7, #4]
 800b17e:	70eb      	strb	r3, [r5, #3]
 800b180:	2e03      	cmp	r6, #3
 800b182:	f105 0304 	add.w	r3, r5, #4
 800b186:	d06c      	beq.n	800b262 <ucdr_deserialize_double+0x156>
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	712b      	strb	r3, [r5, #4]
 800b18c:	2e04      	cmp	r6, #4
 800b18e:	f105 0305 	add.w	r3, r5, #5
 800b192:	d06a      	beq.n	800b26a <ucdr_deserialize_double+0x15e>
 800b194:	78bb      	ldrb	r3, [r7, #2]
 800b196:	716b      	strb	r3, [r5, #5]
 800b198:	2e05      	cmp	r6, #5
 800b19a:	f105 0306 	add.w	r3, r5, #6
 800b19e:	d068      	beq.n	800b272 <ucdr_deserialize_double+0x166>
 800b1a0:	787b      	ldrb	r3, [r7, #1]
 800b1a2:	71ab      	strb	r3, [r5, #6]
 800b1a4:	2e06      	cmp	r6, #6
 800b1a6:	f105 0307 	add.w	r3, r5, #7
 800b1aa:	d066      	beq.n	800b27a <ucdr_deserialize_double+0x16e>
 800b1ac:	783b      	ldrb	r3, [r7, #0]
 800b1ae:	71eb      	strb	r3, [r5, #7]
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	68a2      	ldr	r2, [r4, #8]
 800b1b4:	7da0      	ldrb	r0, [r4, #22]
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	1b9e      	subs	r6, r3, r6
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	4442      	add	r2, r8
 800b1be:	7563      	strb	r3, [r4, #21]
 800b1c0:	6126      	str	r6, [r4, #16]
 800b1c2:	60a2      	str	r2, [r4, #8]
 800b1c4:	f080 0001 	eor.w	r0, r0, #1
 800b1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	2108      	movs	r1, #8
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 f86e 	bl	800b2b0 <ucdr_check_final_buffer_behavior>
 800b1d4:	b310      	cbz	r0, 800b21c <ucdr_deserialize_double+0x110>
 800b1d6:	7d23      	ldrb	r3, [r4, #20]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	d023      	beq.n	800b226 <ucdr_deserialize_double+0x11a>
 800b1de:	79db      	ldrb	r3, [r3, #7]
 800b1e0:	702b      	strb	r3, [r5, #0]
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	799b      	ldrb	r3, [r3, #6]
 800b1e6:	706b      	strb	r3, [r5, #1]
 800b1e8:	68a3      	ldr	r3, [r4, #8]
 800b1ea:	795b      	ldrb	r3, [r3, #5]
 800b1ec:	70ab      	strb	r3, [r5, #2]
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	791b      	ldrb	r3, [r3, #4]
 800b1f2:	70eb      	strb	r3, [r5, #3]
 800b1f4:	68a3      	ldr	r3, [r4, #8]
 800b1f6:	78db      	ldrb	r3, [r3, #3]
 800b1f8:	712b      	strb	r3, [r5, #4]
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	789b      	ldrb	r3, [r3, #2]
 800b1fe:	716b      	strb	r3, [r5, #5]
 800b200:	68a3      	ldr	r3, [r4, #8]
 800b202:	785b      	ldrb	r3, [r3, #1]
 800b204:	71ab      	strb	r3, [r5, #6]
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	71eb      	strb	r3, [r5, #7]
 800b20c:	68a2      	ldr	r2, [r4, #8]
 800b20e:	6923      	ldr	r3, [r4, #16]
 800b210:	3208      	adds	r2, #8
 800b212:	3308      	adds	r3, #8
 800b214:	2108      	movs	r1, #8
 800b216:	60a2      	str	r2, [r4, #8]
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	7561      	strb	r1, [r4, #21]
 800b21c:	7da0      	ldrb	r0, [r4, #22]
 800b21e:	f080 0001 	eor.w	r0, r0, #1
 800b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	606b      	str	r3, [r5, #4]
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	e7ed      	b.n	800b20c <ucdr_deserialize_double+0x100>
 800b230:	68a2      	ldr	r2, [r4, #8]
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	7da0      	ldrb	r0, [r4, #22]
 800b236:	f884 9015 	strb.w	r9, [r4, #21]
 800b23a:	1b92      	subs	r2, r2, r6
 800b23c:	1b9e      	subs	r6, r3, r6
 800b23e:	60a2      	str	r2, [r4, #8]
 800b240:	6126      	str	r6, [r4, #16]
 800b242:	f080 0001 	eor.w	r0, r0, #1
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	799b      	ldrb	r3, [r3, #6]
 800b24e:	706b      	strb	r3, [r5, #1]
 800b250:	1cab      	adds	r3, r5, #2
 800b252:	68a2      	ldr	r2, [r4, #8]
 800b254:	7952      	ldrb	r2, [r2, #5]
 800b256:	f803 2b01 	strb.w	r2, [r3], #1
 800b25a:	68a2      	ldr	r2, [r4, #8]
 800b25c:	7912      	ldrb	r2, [r2, #4]
 800b25e:	f803 2b01 	strb.w	r2, [r3], #1
 800b262:	68a2      	ldr	r2, [r4, #8]
 800b264:	78d2      	ldrb	r2, [r2, #3]
 800b266:	f803 2b01 	strb.w	r2, [r3], #1
 800b26a:	68a2      	ldr	r2, [r4, #8]
 800b26c:	7892      	ldrb	r2, [r2, #2]
 800b26e:	f803 2b01 	strb.w	r2, [r3], #1
 800b272:	68a2      	ldr	r2, [r4, #8]
 800b274:	7852      	ldrb	r2, [r2, #1]
 800b276:	f803 2b01 	strb.w	r2, [r3], #1
 800b27a:	68a2      	ldr	r2, [r4, #8]
 800b27c:	7812      	ldrb	r2, [r2, #0]
 800b27e:	701a      	strb	r2, [r3, #0]
 800b280:	e796      	b.n	800b1b0 <ucdr_deserialize_double+0xa4>
 800b282:	4639      	mov	r1, r7
 800b284:	4632      	mov	r2, r6
 800b286:	4628      	mov	r0, r5
 800b288:	f00a f91c 	bl	80154c4 <memcpy>
 800b28c:	68a1      	ldr	r1, [r4, #8]
 800b28e:	4642      	mov	r2, r8
 800b290:	19a8      	adds	r0, r5, r6
 800b292:	f00a f917 	bl	80154c4 <memcpy>
 800b296:	e78b      	b.n	800b1b0 <ucdr_deserialize_double+0xa4>

0800b298 <ucdr_check_buffer_available_for>:
 800b298:	7d83      	ldrb	r3, [r0, #22]
 800b29a:	b93b      	cbnz	r3, 800b2ac <ucdr_check_buffer_available_for+0x14>
 800b29c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b2a0:	4419      	add	r1, r3
 800b2a2:	4288      	cmp	r0, r1
 800b2a4:	bf34      	ite	cc
 800b2a6:	2000      	movcc	r0, #0
 800b2a8:	2001      	movcs	r0, #1
 800b2aa:	4770      	bx	lr
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	4770      	bx	lr

0800b2b0 <ucdr_check_final_buffer_behavior>:
 800b2b0:	7d83      	ldrb	r3, [r0, #22]
 800b2b2:	b943      	cbnz	r3, 800b2c6 <ucdr_check_final_buffer_behavior+0x16>
 800b2b4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b2b8:	4291      	cmp	r1, r2
 800b2ba:	b510      	push	{r4, lr}
 800b2bc:	4604      	mov	r4, r0
 800b2be:	d205      	bcs.n	800b2cc <ucdr_check_final_buffer_behavior+0x1c>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	4770      	bx	lr
 800b2cc:	6982      	ldr	r2, [r0, #24]
 800b2ce:	b13a      	cbz	r2, 800b2e0 <ucdr_check_final_buffer_behavior+0x30>
 800b2d0:	69c1      	ldr	r1, [r0, #28]
 800b2d2:	4790      	blx	r2
 800b2d4:	f080 0301 	eor.w	r3, r0, #1
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	75a0      	strb	r0, [r4, #22]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	bd10      	pop	{r4, pc}
 800b2e0:	2001      	movs	r0, #1
 800b2e2:	75a0      	strb	r0, [r4, #22]
 800b2e4:	e7fa      	b.n	800b2dc <ucdr_check_final_buffer_behavior+0x2c>
 800b2e6:	bf00      	nop

0800b2e8 <ucdr_set_on_full_buffer_callback>:
 800b2e8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop

0800b2f0 <ucdr_init_buffer_origin_offset_endian>:
 800b2f0:	b430      	push	{r4, r5}
 800b2f2:	9c02      	ldr	r4, [sp, #8]
 800b2f4:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800b2f8:	6001      	str	r1, [r0, #0]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	60c3      	str	r3, [r0, #12]
 800b2fe:	4421      	add	r1, r4
 800b300:	441c      	add	r4, r3
 800b302:	2300      	movs	r3, #0
 800b304:	6104      	str	r4, [r0, #16]
 800b306:	7505      	strb	r5, [r0, #20]
 800b308:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b30c:	bc30      	pop	{r4, r5}
 800b30e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800b312:	7543      	strb	r3, [r0, #21]
 800b314:	7583      	strb	r3, [r0, #22]
 800b316:	4770      	bx	lr

0800b318 <ucdr_init_buffer_origin_offset>:
 800b318:	b510      	push	{r4, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	9c04      	ldr	r4, [sp, #16]
 800b31e:	9400      	str	r4, [sp, #0]
 800b320:	2401      	movs	r4, #1
 800b322:	9401      	str	r4, [sp, #4]
 800b324:	f7ff ffe4 	bl	800b2f0 <ucdr_init_buffer_origin_offset_endian>
 800b328:	b002      	add	sp, #8
 800b32a:	bd10      	pop	{r4, pc}

0800b32c <ucdr_init_buffer_origin>:
 800b32c:	b510      	push	{r4, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	2400      	movs	r4, #0
 800b332:	9400      	str	r4, [sp, #0]
 800b334:	f7ff fff0 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800b338:	b002      	add	sp, #8
 800b33a:	bd10      	pop	{r4, pc}

0800b33c <ucdr_init_buffer>:
 800b33c:	2300      	movs	r3, #0
 800b33e:	f7ff bff5 	b.w	800b32c <ucdr_init_buffer_origin>
 800b342:	bf00      	nop

0800b344 <ucdr_alignment>:
 800b344:	fbb0 f3f1 	udiv	r3, r0, r1
 800b348:	fb03 0011 	mls	r0, r3, r1, r0
 800b34c:	1a08      	subs	r0, r1, r0
 800b34e:	3901      	subs	r1, #1
 800b350:	4008      	ands	r0, r1
 800b352:	4770      	bx	lr

0800b354 <ucdr_buffer_alignment>:
 800b354:	7d43      	ldrb	r3, [r0, #21]
 800b356:	428b      	cmp	r3, r1
 800b358:	d208      	bcs.n	800b36c <ucdr_buffer_alignment+0x18>
 800b35a:	6903      	ldr	r3, [r0, #16]
 800b35c:	fbb3 f0f1 	udiv	r0, r3, r1
 800b360:	fb01 3010 	mls	r0, r1, r0, r3
 800b364:	1a08      	subs	r0, r1, r0
 800b366:	3901      	subs	r1, #1
 800b368:	4008      	ands	r0, r1
 800b36a:	4770      	bx	lr
 800b36c:	2000      	movs	r0, #0
 800b36e:	4770      	bx	lr

0800b370 <ucdr_align_to>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4604      	mov	r4, r0
 800b374:	460e      	mov	r6, r1
 800b376:	f7ff ffed 	bl	800b354 <ucdr_buffer_alignment>
 800b37a:	68a5      	ldr	r5, [r4, #8]
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	6922      	ldr	r2, [r4, #16]
 800b380:	7566      	strb	r6, [r4, #21]
 800b382:	4405      	add	r5, r0
 800b384:	42ab      	cmp	r3, r5
 800b386:	4410      	add	r0, r2
 800b388:	bf28      	it	cs
 800b38a:	462b      	movcs	r3, r5
 800b38c:	6120      	str	r0, [r4, #16]
 800b38e:	60a3      	str	r3, [r4, #8]
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	bf00      	nop

0800b394 <ucdr_buffer_length>:
 800b394:	6882      	ldr	r2, [r0, #8]
 800b396:	6800      	ldr	r0, [r0, #0]
 800b398:	1a10      	subs	r0, r2, r0
 800b39a:	4770      	bx	lr

0800b39c <ucdr_buffer_remaining>:
 800b39c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b3a0:	1a10      	subs	r0, r2, r0
 800b3a2:	4770      	bx	lr

0800b3a4 <ucdr_check_final_buffer_behavior_array>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	7d83      	ldrb	r3, [r0, #22]
 800b3a8:	b963      	cbnz	r3, 800b3c4 <ucdr_check_final_buffer_behavior_array+0x20>
 800b3aa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	d308      	bcc.n	800b3c8 <ucdr_check_final_buffer_behavior_array+0x24>
 800b3b6:	b139      	cbz	r1, 800b3c8 <ucdr_check_final_buffer_behavior_array+0x24>
 800b3b8:	6983      	ldr	r3, [r0, #24]
 800b3ba:	b163      	cbz	r3, 800b3d6 <ucdr_check_final_buffer_behavior_array+0x32>
 800b3bc:	69c1      	ldr	r1, [r0, #28]
 800b3be:	4798      	blx	r3
 800b3c0:	75a0      	strb	r0, [r4, #22]
 800b3c2:	b108      	cbz	r0, 800b3c8 <ucdr_check_final_buffer_behavior_array+0x24>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f7ff ffe7 	bl	800b39c <ucdr_buffer_remaining>
 800b3ce:	42a8      	cmp	r0, r5
 800b3d0:	bf28      	it	cs
 800b3d2:	4628      	movcs	r0, r5
 800b3d4:	bd38      	pop	{r3, r4, r5, pc}
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	7583      	strb	r3, [r0, #22]
 800b3da:	e7f3      	b.n	800b3c4 <ucdr_check_final_buffer_behavior_array+0x20>

0800b3dc <ucdr_advance_buffer>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	f7ff ff59 	bl	800b298 <ucdr_check_buffer_available_for>
 800b3e6:	b178      	cbz	r0, 800b408 <ucdr_advance_buffer+0x2c>
 800b3e8:	68a3      	ldr	r3, [r4, #8]
 800b3ea:	6921      	ldr	r1, [r4, #16]
 800b3ec:	442b      	add	r3, r5
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	4429      	add	r1, r5
 800b3f4:	7563      	strb	r3, [r4, #21]
 800b3f6:	6121      	str	r1, [r4, #16]
 800b3f8:	bd38      	pop	{r3, r4, r5, pc}
 800b3fa:	68a2      	ldr	r2, [r4, #8]
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	4402      	add	r2, r0
 800b400:	4403      	add	r3, r0
 800b402:	1a2d      	subs	r5, r5, r0
 800b404:	60a2      	str	r2, [r4, #8]
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	2201      	movs	r2, #1
 800b40a:	4629      	mov	r1, r5
 800b40c:	4620      	mov	r0, r4
 800b40e:	f7ff ffc9 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 800b412:	2800      	cmp	r0, #0
 800b414:	d1f1      	bne.n	800b3fa <ucdr_advance_buffer+0x1e>
 800b416:	2301      	movs	r3, #1
 800b418:	7563      	strb	r3, [r4, #21]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}

0800b41c <rcl_get_zero_initialized_node>:
 800b41c:	4a03      	ldr	r2, [pc, #12]	; (800b42c <rcl_get_zero_initialized_node+0x10>)
 800b41e:	4603      	mov	r3, r0
 800b420:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b424:	e883 0003 	stmia.w	r3, {r0, r1}
 800b428:	4618      	mov	r0, r3
 800b42a:	4770      	bx	lr
 800b42c:	080170a8 	.word	0x080170a8

0800b430 <rcl_node_init>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	b09b      	sub	sp, #108	; 0x6c
 800b436:	4604      	mov	r4, r0
 800b438:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800b43c:	f04f 0c00 	mov.w	ip, #0
 800b440:	a815      	add	r0, sp, #84	; 0x54
 800b442:	460e      	mov	r6, r1
 800b444:	4615      	mov	r5, r2
 800b446:	461f      	mov	r7, r3
 800b448:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800b44c:	f005 fc0c 	bl	8010c68 <rcl_guard_condition_get_default_options>
 800b450:	f1b8 0f00 	cmp.w	r8, #0
 800b454:	f000 80fd 	beq.w	800b652 <rcl_node_init+0x222>
 800b458:	f108 0b04 	add.w	fp, r8, #4
 800b45c:	4658      	mov	r0, fp
 800b45e:	f000 ffe9 	bl	800c434 <rcutils_allocator_is_valid>
 800b462:	2800      	cmp	r0, #0
 800b464:	f000 80f5 	beq.w	800b652 <rcl_node_init+0x222>
 800b468:	2e00      	cmp	r6, #0
 800b46a:	f000 80f2 	beq.w	800b652 <rcl_node_init+0x222>
 800b46e:	2d00      	cmp	r5, #0
 800b470:	f000 80ef 	beq.w	800b652 <rcl_node_init+0x222>
 800b474:	2c00      	cmp	r4, #0
 800b476:	f000 80ec 	beq.w	800b652 <rcl_node_init+0x222>
 800b47a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b47e:	f1b9 0f00 	cmp.w	r9, #0
 800b482:	f040 8112 	bne.w	800b6aa <rcl_node_init+0x27a>
 800b486:	2f00      	cmp	r7, #0
 800b488:	f000 80e3 	beq.w	800b652 <rcl_node_init+0x222>
 800b48c:	4638      	mov	r0, r7
 800b48e:	f005 f8ff 	bl	8010690 <rcl_context_is_valid>
 800b492:	4682      	mov	sl, r0
 800b494:	2800      	cmp	r0, #0
 800b496:	f000 80e2 	beq.w	800b65e <rcl_node_init+0x22e>
 800b49a:	464a      	mov	r2, r9
 800b49c:	a914      	add	r1, sp, #80	; 0x50
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800b4a4:	f001 fbc6 	bl	800cc34 <rmw_validate_node_name>
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f040 80d3 	bne.w	800b656 <rcl_node_init+0x226>
 800b4b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f040 8105 	bne.w	800b6c2 <rcl_node_init+0x292>
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f7f4 feb3 	bl	8000224 <strlen>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f040 80d0 	bne.w	800b664 <rcl_node_init+0x234>
 800b4c4:	4d8e      	ldr	r5, [pc, #568]	; (800b700 <rcl_node_init+0x2d0>)
 800b4c6:	a914      	add	r1, sp, #80	; 0x50
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f001 fb94 	bl	800cbf8 <rmw_validate_namespace>
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	f040 80bf 	bne.w	800b656 <rcl_node_init+0x226>
 800b4d8:	4682      	mov	sl, r0
 800b4da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 80f5 	bne.w	800b6cc <rcl_node_init+0x29c>
 800b4e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b4e6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b4ea:	9307      	str	r3, [sp, #28]
 800b4ec:	2030      	movs	r0, #48	; 0x30
 800b4ee:	4790      	blx	r2
 800b4f0:	4681      	mov	r9, r0
 800b4f2:	6060      	str	r0, [r4, #4]
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f000 80de 	beq.w	800b6b6 <rcl_node_init+0x286>
 800b4fa:	9b07      	ldr	r3, [sp, #28]
 800b4fc:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800b500:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800b504:	a80a      	add	r0, sp, #40	; 0x28
 800b506:	f000 f95d 	bl	800b7c4 <rcl_node_get_default_options>
 800b50a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b50e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b512:	46cc      	mov	ip, r9
 800b514:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b518:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b51c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b520:	6861      	ldr	r1, [r4, #4]
 800b522:	6027      	str	r7, [r4, #0]
 800b524:	4640      	mov	r0, r8
 800b526:	f000 f969 	bl	800b7fc <rcl_node_options_copy>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d167      	bne.n	800b5fe <rcl_node_init+0x1ce>
 800b52e:	4628      	mov	r0, r5
 800b530:	f7f4 fe78 	bl	8000224 <strlen>
 800b534:	4428      	add	r0, r5
 800b536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b53a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800b53e:	2b2f      	cmp	r3, #47	; 0x2f
 800b540:	bf08      	it	eq
 800b542:	4970      	ldreq	r1, [pc, #448]	; (800b704 <rcl_node_init+0x2d4>)
 800b544:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b548:	bf18      	it	ne
 800b54a:	496f      	ldrne	r1, [pc, #444]	; (800b708 <rcl_node_init+0x2d8>)
 800b54c:	9604      	str	r6, [sp, #16]
 800b54e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800b552:	e9cd 3200 	strd	r3, r2, [sp]
 800b556:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800b55a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b55e:	f000 ffa5 	bl	800c4ac <rcutils_format_string_limit>
 800b562:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800b566:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b56a:	f8d9 3000 	ldr.w	r3, [r9]
 800b56e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b570:	1c59      	adds	r1, r3, #1
 800b572:	f000 80b7 	beq.w	800b6e4 <rcl_node_init+0x2b4>
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	f8c9 301c 	str.w	r3, [r9, #28]
 800b57c:	6952      	ldr	r2, [r2, #20]
 800b57e:	6821      	ldr	r1, [r4, #0]
 800b580:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b584:	6808      	ldr	r0, [r1, #0]
 800b586:	f1a2 0201 	sub.w	r2, r2, #1
 800b58a:	fab2 f282 	clz	r2, r2
 800b58e:	0952      	lsrs	r2, r2, #5
 800b590:	9200      	str	r2, [sp, #0]
 800b592:	4631      	mov	r1, r6
 800b594:	3028      	adds	r0, #40	; 0x28
 800b596:	462a      	mov	r2, r5
 800b598:	f001 fc3a 	bl	800ce10 <rmw_create_node>
 800b59c:	6863      	ldr	r3, [r4, #4]
 800b59e:	f8c9 0020 	str.w	r0, [r9, #32]
 800b5a2:	6a18      	ldr	r0, [r3, #32]
 800b5a4:	b368      	cbz	r0, 800b602 <rcl_node_init+0x1d2>
 800b5a6:	f001 fcc7 	bl	800cf38 <rmw_node_get_graph_guard_condition>
 800b5aa:	4681      	mov	r9, r0
 800b5ac:	b338      	cbz	r0, 800b5fe <rcl_node_init+0x1ce>
 800b5ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5b2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b5b6:	6866      	ldr	r6, [r4, #4]
 800b5b8:	2008      	movs	r0, #8
 800b5ba:	4798      	blx	r3
 800b5bc:	6863      	ldr	r3, [r4, #4]
 800b5be:	6270      	str	r0, [r6, #36]	; 0x24
 800b5c0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800b5c2:	b1f6      	cbz	r6, 800b602 <rcl_node_init+0x1d2>
 800b5c4:	a808      	add	r0, sp, #32
 800b5c6:	f005 fa6d 	bl	8010aa4 <rcl_get_zero_initialized_guard_condition>
 800b5ca:	a808      	add	r0, sp, #32
 800b5cc:	c803      	ldmia	r0, {r0, r1}
 800b5ce:	e886 0003 	stmia.w	r6, {r0, r1}
 800b5d2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800b5d6:	ae15      	add	r6, sp, #84	; 0x54
 800b5d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b5da:	f8db 3000 	ldr.w	r3, [fp]
 800b5de:	6033      	str	r3, [r6, #0]
 800b5e0:	ab1a      	add	r3, sp, #104	; 0x68
 800b5e2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b5e6:	6866      	ldr	r6, [r4, #4]
 800b5e8:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800b5ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	463a      	mov	r2, r7
 800b5f6:	f005 fab9 	bl	8010b6c <rcl_guard_condition_init_from_rmw>
 800b5fa:	4681      	mov	r9, r0
 800b5fc:	b328      	cbz	r0, 800b64a <rcl_node_init+0x21a>
 800b5fe:	6863      	ldr	r3, [r4, #4]
 800b600:	b1f3      	cbz	r3, 800b640 <rcl_node_init+0x210>
 800b602:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b604:	b128      	cbz	r0, 800b612 <rcl_node_init+0x1e2>
 800b606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b60a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b60e:	4798      	blx	r3
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	6a18      	ldr	r0, [r3, #32]
 800b614:	b110      	cbz	r0, 800b61c <rcl_node_init+0x1ec>
 800b616:	f001 fc13 	bl	800ce40 <rmw_destroy_node>
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b61e:	b148      	cbz	r0, 800b634 <rcl_node_init+0x204>
 800b620:	f005 fafc 	bl	8010c1c <rcl_guard_condition_fini>
 800b624:	6862      	ldr	r2, [r4, #4]
 800b626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b62a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800b62c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b630:	4798      	blx	r3
 800b632:	6863      	ldr	r3, [r4, #4]
 800b634:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b638:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b63c:	4618      	mov	r0, r3
 800b63e:	4790      	blx	r2
 800b640:	2300      	movs	r3, #0
 800b642:	e9c4 3300 	strd	r3, r3, [r4]
 800b646:	f04f 0901 	mov.w	r9, #1
 800b64a:	f1ba 0f00 	cmp.w	sl, #0
 800b64e:	d125      	bne.n	800b69c <rcl_node_init+0x26c>
 800b650:	e001      	b.n	800b656 <rcl_node_init+0x226>
 800b652:	f04f 090b 	mov.w	r9, #11
 800b656:	4648      	mov	r0, r9
 800b658:	b01b      	add	sp, #108	; 0x6c
 800b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65e:	f04f 0965 	mov.w	r9, #101	; 0x65
 800b662:	e7f8      	b.n	800b656 <rcl_node_init+0x226>
 800b664:	782b      	ldrb	r3, [r5, #0]
 800b666:	2b2f      	cmp	r3, #47	; 0x2f
 800b668:	f43f af2d 	beq.w	800b4c6 <rcl_node_init+0x96>
 800b66c:	4927      	ldr	r1, [pc, #156]	; (800b70c <rcl_node_init+0x2dc>)
 800b66e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b678:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b67c:	9503      	str	r5, [sp, #12]
 800b67e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800b682:	f000 ff13 	bl	800c4ac <rcutils_format_string_limit>
 800b686:	4605      	mov	r5, r0
 800b688:	b348      	cbz	r0, 800b6de <rcl_node_init+0x2ae>
 800b68a:	2200      	movs	r2, #0
 800b68c:	a914      	add	r1, sp, #80	; 0x50
 800b68e:	9214      	str	r2, [sp, #80]	; 0x50
 800b690:	f001 fab2 	bl	800cbf8 <rmw_validate_namespace>
 800b694:	4681      	mov	r9, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f af1f 	beq.w	800b4da <rcl_node_init+0xaa>
 800b69c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6a0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	4798      	blx	r3
 800b6a8:	e7d5      	b.n	800b656 <rcl_node_init+0x226>
 800b6aa:	f04f 0964 	mov.w	r9, #100	; 0x64
 800b6ae:	4648      	mov	r0, r9
 800b6b0:	b01b      	add	sp, #108	; 0x6c
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	f04f 090a 	mov.w	r9, #10
 800b6ba:	f1ba 0f00 	cmp.w	sl, #0
 800b6be:	d1ed      	bne.n	800b69c <rcl_node_init+0x26c>
 800b6c0:	e7c9      	b.n	800b656 <rcl_node_init+0x226>
 800b6c2:	f001 fb09 	bl	800ccd8 <rmw_node_name_validation_result_string>
 800b6c6:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800b6ca:	e7c4      	b.n	800b656 <rcl_node_init+0x226>
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f001 faa5 	bl	800cc1c <rmw_namespace_validation_result_string>
 800b6d2:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800b6d6:	f1ba 0f00 	cmp.w	sl, #0
 800b6da:	d1df      	bne.n	800b69c <rcl_node_init+0x26c>
 800b6dc:	e7bb      	b.n	800b656 <rcl_node_init+0x226>
 800b6de:	f04f 090a 	mov.w	r9, #10
 800b6e2:	e7b8      	b.n	800b656 <rcl_node_init+0x226>
 800b6e4:	a813      	add	r0, sp, #76	; 0x4c
 800b6e6:	f005 f83d 	bl	8010764 <rcl_get_default_domain_id>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d187      	bne.n	800b5fe <rcl_node_init+0x1ce>
 800b6ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6f0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	bf04      	itt	eq
 800b6f8:	9013      	streq	r0, [sp, #76]	; 0x4c
 800b6fa:	4603      	moveq	r3, r0
 800b6fc:	e73b      	b.n	800b576 <rcl_node_init+0x146>
 800b6fe:	bf00      	nop
 800b700:	08017090 	.word	0x08017090
 800b704:	08017098 	.word	0x08017098
 800b708:	080170a0 	.word	0x080170a0
 800b70c:	08017094 	.word	0x08017094

0800b710 <rcl_node_fini>:
 800b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b712:	b320      	cbz	r0, 800b75e <rcl_node_fini+0x4e>
 800b714:	6845      	ldr	r5, [r0, #4]
 800b716:	4604      	mov	r4, r0
 800b718:	b1fd      	cbz	r5, 800b75a <rcl_node_fini+0x4a>
 800b71a:	6a28      	ldr	r0, [r5, #32]
 800b71c:	68af      	ldr	r7, [r5, #8]
 800b71e:	696e      	ldr	r6, [r5, #20]
 800b720:	f001 fb8e 	bl	800ce40 <rmw_destroy_node>
 800b724:	6863      	ldr	r3, [r4, #4]
 800b726:	4605      	mov	r5, r0
 800b728:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b72a:	f005 fa77 	bl	8010c1c <rcl_guard_condition_fini>
 800b72e:	6863      	ldr	r3, [r4, #4]
 800b730:	ea55 0200 	orrs.w	r2, r5, r0
 800b734:	4631      	mov	r1, r6
 800b736:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b738:	bf14      	ite	ne
 800b73a:	2501      	movne	r5, #1
 800b73c:	2500      	moveq	r5, #0
 800b73e:	47b8      	blx	r7
 800b740:	6863      	ldr	r3, [r4, #4]
 800b742:	4631      	mov	r1, r6
 800b744:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b746:	47b8      	blx	r7
 800b748:	6863      	ldr	r3, [r4, #4]
 800b74a:	4631      	mov	r1, r6
 800b74c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b74e:	47b8      	blx	r7
 800b750:	6860      	ldr	r0, [r4, #4]
 800b752:	4631      	mov	r1, r6
 800b754:	47b8      	blx	r7
 800b756:	2300      	movs	r3, #0
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	4628      	mov	r0, r5
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75e:	25c8      	movs	r5, #200	; 0xc8
 800b760:	4628      	mov	r0, r5
 800b762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b764 <rcl_node_is_valid_except_context>:
 800b764:	b128      	cbz	r0, 800b772 <rcl_node_is_valid_except_context+0xe>
 800b766:	6840      	ldr	r0, [r0, #4]
 800b768:	b118      	cbz	r0, 800b772 <rcl_node_is_valid_except_context+0xe>
 800b76a:	6a00      	ldr	r0, [r0, #32]
 800b76c:	3800      	subs	r0, #0
 800b76e:	bf18      	it	ne
 800b770:	2001      	movne	r0, #1
 800b772:	4770      	bx	lr

0800b774 <rcl_node_is_valid>:
 800b774:	b130      	cbz	r0, 800b784 <rcl_node_is_valid+0x10>
 800b776:	6843      	ldr	r3, [r0, #4]
 800b778:	b123      	cbz	r3, 800b784 <rcl_node_is_valid+0x10>
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	b113      	cbz	r3, 800b784 <rcl_node_is_valid+0x10>
 800b77e:	6800      	ldr	r0, [r0, #0]
 800b780:	f004 bf86 	b.w	8010690 <rcl_context_is_valid>
 800b784:	2000      	movs	r0, #0
 800b786:	4770      	bx	lr

0800b788 <rcl_node_get_name>:
 800b788:	b120      	cbz	r0, 800b794 <rcl_node_get_name+0xc>
 800b78a:	6840      	ldr	r0, [r0, #4]
 800b78c:	b110      	cbz	r0, 800b794 <rcl_node_get_name+0xc>
 800b78e:	6a00      	ldr	r0, [r0, #32]
 800b790:	b100      	cbz	r0, 800b794 <rcl_node_get_name+0xc>
 800b792:	6880      	ldr	r0, [r0, #8]
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop

0800b798 <rcl_node_get_namespace>:
 800b798:	b120      	cbz	r0, 800b7a4 <rcl_node_get_namespace+0xc>
 800b79a:	6840      	ldr	r0, [r0, #4]
 800b79c:	b110      	cbz	r0, 800b7a4 <rcl_node_get_namespace+0xc>
 800b79e:	6a00      	ldr	r0, [r0, #32]
 800b7a0:	b100      	cbz	r0, 800b7a4 <rcl_node_get_namespace+0xc>
 800b7a2:	68c0      	ldr	r0, [r0, #12]
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop

0800b7a8 <rcl_node_get_options>:
 800b7a8:	b128      	cbz	r0, 800b7b6 <rcl_node_get_options+0xe>
 800b7aa:	6840      	ldr	r0, [r0, #4]
 800b7ac:	b118      	cbz	r0, 800b7b6 <rcl_node_get_options+0xe>
 800b7ae:	6a03      	ldr	r3, [r0, #32]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bf08      	it	eq
 800b7b4:	2000      	moveq	r0, #0
 800b7b6:	4770      	bx	lr

0800b7b8 <rcl_node_get_rmw_handle>:
 800b7b8:	b110      	cbz	r0, 800b7c0 <rcl_node_get_rmw_handle+0x8>
 800b7ba:	6840      	ldr	r0, [r0, #4]
 800b7bc:	b100      	cbz	r0, 800b7c0 <rcl_node_get_rmw_handle+0x8>
 800b7be:	6a00      	ldr	r0, [r0, #32]
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop

0800b7c4 <rcl_node_get_default_options>:
 800b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	466d      	mov	r5, sp
 800b7cc:	4668      	mov	r0, sp
 800b7ce:	f000 fe23 	bl	800c418 <rcutils_get_default_allocator>
 800b7d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7d4:	4c08      	ldr	r4, [pc, #32]	; (800b7f8 <rcl_node_get_default_options+0x34>)
 800b7d6:	f8d5 c000 	ldr.w	ip, [r5]
 800b7da:	1d26      	adds	r6, r4, #4
 800b7dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b7de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7e0:	463d      	mov	r5, r7
 800b7e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b7e4:	f8c6 c000 	str.w	ip, [r6]
 800b7e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b7ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	b007      	add	sp, #28
 800b7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000070 	.word	0x20000070

0800b7fc <rcl_node_options_copy>:
 800b7fc:	b1c8      	cbz	r0, 800b832 <rcl_node_options_copy+0x36>
 800b7fe:	b4f0      	push	{r4, r5, r6, r7}
 800b800:	460f      	mov	r7, r1
 800b802:	b199      	cbz	r1, 800b82c <rcl_node_options_copy+0x30>
 800b804:	4288      	cmp	r0, r1
 800b806:	4606      	mov	r6, r0
 800b808:	d010      	beq.n	800b82c <rcl_node_options_copy+0x30>
 800b80a:	4605      	mov	r5, r0
 800b80c:	460c      	mov	r4, r1
 800b80e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b812:	f844 3b04 	str.w	r3, [r4], #4
 800b816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b81a:	7e32      	ldrb	r2, [r6, #24]
 800b81c:	6829      	ldr	r1, [r5, #0]
 800b81e:	7e73      	ldrb	r3, [r6, #25]
 800b820:	6021      	str	r1, [r4, #0]
 800b822:	2000      	movs	r0, #0
 800b824:	763a      	strb	r2, [r7, #24]
 800b826:	767b      	strb	r3, [r7, #25]
 800b828:	bcf0      	pop	{r4, r5, r6, r7}
 800b82a:	4770      	bx	lr
 800b82c:	200b      	movs	r0, #11
 800b82e:	bcf0      	pop	{r4, r5, r6, r7}
 800b830:	4770      	bx	lr
 800b832:	200b      	movs	r0, #11
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop

0800b838 <rcl_get_zero_initialized_publisher>:
 800b838:	4b01      	ldr	r3, [pc, #4]	; (800b840 <rcl_get_zero_initialized_publisher+0x8>)
 800b83a:	6818      	ldr	r0, [r3, #0]
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	080170b0 	.word	0x080170b0

0800b844 <rcl_publisher_init>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	b091      	sub	sp, #68	; 0x44
 800b84a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b84c:	b3d7      	cbz	r7, 800b8c4 <rcl_publisher_init+0x80>
 800b84e:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800b852:	4604      	mov	r4, r0
 800b854:	4648      	mov	r0, r9
 800b856:	4688      	mov	r8, r1
 800b858:	4616      	mov	r6, r2
 800b85a:	461d      	mov	r5, r3
 800b85c:	f000 fdea 	bl	800c434 <rcutils_allocator_is_valid>
 800b860:	b380      	cbz	r0, 800b8c4 <rcl_publisher_init+0x80>
 800b862:	b37c      	cbz	r4, 800b8c4 <rcl_publisher_init+0x80>
 800b864:	f8d4 a000 	ldr.w	sl, [r4]
 800b868:	f1ba 0f00 	cmp.w	sl, #0
 800b86c:	d004      	beq.n	800b878 <rcl_publisher_init+0x34>
 800b86e:	2564      	movs	r5, #100	; 0x64
 800b870:	4628      	mov	r0, r5
 800b872:	b011      	add	sp, #68	; 0x44
 800b874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b878:	4640      	mov	r0, r8
 800b87a:	f7ff ff7b 	bl	800b774 <rcl_node_is_valid>
 800b87e:	b330      	cbz	r0, 800b8ce <rcl_publisher_init+0x8a>
 800b880:	b306      	cbz	r6, 800b8c4 <rcl_publisher_init+0x80>
 800b882:	b1fd      	cbz	r5, 800b8c4 <rcl_publisher_init+0x80>
 800b884:	46ce      	mov	lr, r9
 800b886:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b88a:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800b88e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b892:	f8de 3000 	ldr.w	r3, [lr]
 800b896:	f8cc 3000 	str.w	r3, [ip]
 800b89a:	f000 ff57 	bl	800c74c <rcutils_get_zero_initialized_string_map>
 800b89e:	ab10      	add	r3, sp, #64	; 0x40
 800b8a0:	4684      	mov	ip, r0
 800b8a2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800b8a6:	f8cd c020 	str.w	ip, [sp, #32]
 800b8aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b8ae:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800b8b2:	4651      	mov	r1, sl
 800b8b4:	a808      	add	r0, sp, #32
 800b8b6:	f000 ffc3 	bl	800c840 <rcutils_string_map_init>
 800b8ba:	b150      	cbz	r0, 800b8d2 <rcl_publisher_init+0x8e>
 800b8bc:	280a      	cmp	r0, #10
 800b8be:	d013      	beq.n	800b8e8 <rcl_publisher_init+0xa4>
 800b8c0:	2501      	movs	r5, #1
 800b8c2:	e7d5      	b.n	800b870 <rcl_publisher_init+0x2c>
 800b8c4:	250b      	movs	r5, #11
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	b011      	add	sp, #68	; 0x44
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	25c8      	movs	r5, #200	; 0xc8
 800b8d0:	e7ce      	b.n	800b870 <rcl_publisher_init+0x2c>
 800b8d2:	a808      	add	r0, sp, #32
 800b8d4:	f005 f8e0 	bl	8010a98 <rcl_get_default_topic_name_substitutions>
 800b8d8:	4682      	mov	sl, r0
 800b8da:	b138      	cbz	r0, 800b8ec <rcl_publisher_init+0xa8>
 800b8dc:	a808      	add	r0, sp, #32
 800b8de:	f000 ffef 	bl	800c8c0 <rcutils_string_map_fini>
 800b8e2:	f1ba 0f0a 	cmp.w	sl, #10
 800b8e6:	d1eb      	bne.n	800b8c0 <rcl_publisher_init+0x7c>
 800b8e8:	250a      	movs	r5, #10
 800b8ea:	e7c1      	b.n	800b870 <rcl_publisher_init+0x2c>
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8f2:	f7ff ff49 	bl	800b788 <rcl_node_get_name>
 800b8f6:	4682      	mov	sl, r0
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	f7ff ff4d 	bl	800b798 <rcl_node_get_namespace>
 800b8fe:	4686      	mov	lr, r0
 800b900:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800b904:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800b908:	46ec      	mov	ip, sp
 800b90a:	f8cd b014 	str.w	fp, [sp, #20]
 800b90e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b912:	f8d9 3000 	ldr.w	r3, [r9]
 800b916:	f8cc 3000 	str.w	r3, [ip]
 800b91a:	4628      	mov	r0, r5
 800b91c:	4651      	mov	r1, sl
 800b91e:	4672      	mov	r2, lr
 800b920:	ab08      	add	r3, sp, #32
 800b922:	f004 ff53 	bl	80107cc <rcl_expand_topic_name>
 800b926:	4605      	mov	r5, r0
 800b928:	a808      	add	r0, sp, #32
 800b92a:	f000 ffc9 	bl	800c8c0 <rcutils_string_map_fini>
 800b92e:	b920      	cbnz	r0, 800b93a <rcl_publisher_init+0xf6>
 800b930:	b15d      	cbz	r5, 800b94a <rcl_publisher_init+0x106>
 800b932:	2d67      	cmp	r5, #103	; 0x67
 800b934:	d002      	beq.n	800b93c <rcl_publisher_init+0xf8>
 800b936:	2d69      	cmp	r5, #105	; 0x69
 800b938:	d05f      	beq.n	800b9fa <rcl_publisher_init+0x1b6>
 800b93a:	2501      	movs	r5, #1
 800b93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93e:	2800      	cmp	r0, #0
 800b940:	d096      	beq.n	800b870 <rcl_publisher_init+0x2c>
 800b942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b944:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b946:	4798      	blx	r3
 800b948:	e792      	b.n	800b870 <rcl_publisher_init+0x2c>
 800b94a:	4640      	mov	r0, r8
 800b94c:	f7ff ff2c 	bl	800b7a8 <rcl_node_get_options>
 800b950:	2800      	cmp	r0, #0
 800b952:	d0f2      	beq.n	800b93a <rcl_publisher_init+0xf6>
 800b954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b956:	f7f4 fc65 	bl	8000224 <strlen>
 800b95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b95c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b95e:	3001      	adds	r0, #1
 800b960:	4798      	blx	r3
 800b962:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b964:	9107      	str	r1, [sp, #28]
 800b966:	4681      	mov	r9, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	f7f4 fc5b 	bl	8000224 <strlen>
 800b96e:	9907      	ldr	r1, [sp, #28]
 800b970:	1c42      	adds	r2, r0, #1
 800b972:	4648      	mov	r0, r9
 800b974:	f009 fda6 	bl	80154c4 <memcpy>
 800b978:	462a      	mov	r2, r5
 800b97a:	4648      	mov	r0, r9
 800b97c:	a90a      	add	r1, sp, #40	; 0x28
 800b97e:	f001 f867 	bl	800ca50 <rmw_validate_full_topic_name>
 800b982:	2800      	cmp	r0, #0
 800b984:	d137      	bne.n	800b9f6 <rcl_publisher_init+0x1b2>
 800b986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d138      	bne.n	800b9fe <rcl_publisher_init+0x1ba>
 800b98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b990:	20c0      	movs	r0, #192	; 0xc0
 800b992:	4798      	blx	r3
 800b994:	6020      	str	r0, [r4, #0]
 800b996:	b3a0      	cbz	r0, 800ba02 <rcl_publisher_init+0x1be>
 800b998:	4640      	mov	r0, r8
 800b99a:	f7ff ff0d 	bl	800b7b8 <rcl_node_get_rmw_handle>
 800b99e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	464a      	mov	r2, r9
 800b9aa:	6825      	ldr	r5, [r4, #0]
 800b9ac:	f001 fb2e 	bl	800d00c <rmw_create_publisher>
 800b9b0:	6821      	ldr	r1, [r4, #0]
 800b9b2:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800b9b6:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800b9ba:	b388      	cbz	r0, 800ba20 <rcl_publisher_init+0x1dc>
 800b9bc:	3168      	adds	r1, #104	; 0x68
 800b9be:	f001 fbff 	bl	800d1c0 <rmw_publisher_get_actual_qos>
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	b9f0      	cbnz	r0, 800ba06 <rcl_publisher_init+0x1c2>
 800b9c8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800b9cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	2268      	movs	r2, #104	; 0x68
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	f009 fd75 	bl	80154c4 <memcpy>
 800b9da:	f8d8 2000 	ldr.w	r2, [r8]
 800b9de:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800b9e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e4:	b110      	cbz	r0, 800b9ec <rcl_publisher_init+0x1a8>
 800b9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b9ea:	4798      	blx	r3
 800b9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b9f0:	4648      	mov	r0, r9
 800b9f2:	4798      	blx	r3
 800b9f4:	e73c      	b.n	800b870 <rcl_publisher_init+0x2c>
 800b9f6:	2501      	movs	r5, #1
 800b9f8:	e7f3      	b.n	800b9e2 <rcl_publisher_init+0x19e>
 800b9fa:	2567      	movs	r5, #103	; 0x67
 800b9fc:	e79e      	b.n	800b93c <rcl_publisher_init+0xf8>
 800b9fe:	2567      	movs	r5, #103	; 0x67
 800ba00:	e7ef      	b.n	800b9e2 <rcl_publisher_init+0x19e>
 800ba02:	250a      	movs	r5, #10
 800ba04:	e7ed      	b.n	800b9e2 <rcl_publisher_init+0x19e>
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f5      	beq.n	800b9f6 <rcl_publisher_init+0x1b2>
 800ba0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ba0e:	b13b      	cbz	r3, 800ba20 <rcl_publisher_init+0x1dc>
 800ba10:	4640      	mov	r0, r8
 800ba12:	f7ff fed1 	bl	800b7b8 <rcl_node_get_rmw_handle>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ba1c:	f001 fbde 	bl	800d1dc <rmw_destroy_publisher>
 800ba20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ba24:	6820      	ldr	r0, [r4, #0]
 800ba26:	4798      	blx	r3
 800ba28:	2300      	movs	r3, #0
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	2501      	movs	r5, #1
 800ba2e:	e7d8      	b.n	800b9e2 <rcl_publisher_init+0x19e>

0800ba30 <rcl_publisher_fini>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	b300      	cbz	r0, 800ba76 <rcl_publisher_fini+0x46>
 800ba34:	4604      	mov	r4, r0
 800ba36:	4608      	mov	r0, r1
 800ba38:	460d      	mov	r5, r1
 800ba3a:	f7ff fe93 	bl	800b764 <rcl_node_is_valid_except_context>
 800ba3e:	b1f0      	cbz	r0, 800ba7e <rcl_publisher_fini+0x4e>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	b1ab      	cbz	r3, 800ba70 <rcl_publisher_fini+0x40>
 800ba44:	4628      	mov	r0, r5
 800ba46:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800ba48:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800ba4a:	f7ff feb5 	bl	800b7b8 <rcl_node_get_rmw_handle>
 800ba4e:	b1c8      	cbz	r0, 800ba84 <rcl_publisher_fini+0x54>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ba56:	f001 fbc1 	bl	800d1dc <rmw_destroy_publisher>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	6820      	ldr	r0, [r4, #0]
 800ba60:	1e1d      	subs	r5, r3, #0
 800ba62:	bf18      	it	ne
 800ba64:	2501      	movne	r5, #1
 800ba66:	47b0      	blx	r6
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	461d      	mov	r5, r3
 800ba72:	4628      	mov	r0, r5
 800ba74:	bd70      	pop	{r4, r5, r6, pc}
 800ba76:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	bd70      	pop	{r4, r5, r6, pc}
 800ba7e:	25c8      	movs	r5, #200	; 0xc8
 800ba80:	4628      	mov	r0, r5
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	250b      	movs	r5, #11
 800ba86:	e7f1      	b.n	800ba6c <rcl_publisher_fini+0x3c>

0800ba88 <rcl_publisher_get_default_options>:
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8a:	4f0e      	ldr	r7, [pc, #56]	; (800bac4 <rcl_publisher_get_default_options+0x3c>)
 800ba8c:	490e      	ldr	r1, [pc, #56]	; (800bac8 <rcl_publisher_get_default_options+0x40>)
 800ba8e:	b087      	sub	sp, #28
 800ba90:	4606      	mov	r6, r0
 800ba92:	2250      	movs	r2, #80	; 0x50
 800ba94:	4638      	mov	r0, r7
 800ba96:	f009 fd15 	bl	80154c4 <memcpy>
 800ba9a:	466c      	mov	r4, sp
 800ba9c:	4668      	mov	r0, sp
 800ba9e:	f000 fcbb 	bl	800c418 <rcutils_get_default_allocator>
 800baa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800baa4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800baa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	f000 ffcd 	bl	800ca4c <rmw_get_default_publisher_options>
 800bab2:	4639      	mov	r1, r7
 800bab4:	6678      	str	r0, [r7, #100]	; 0x64
 800bab6:	2268      	movs	r2, #104	; 0x68
 800bab8:	4630      	mov	r0, r6
 800baba:	f009 fd03 	bl	80154c4 <memcpy>
 800babe:	4630      	mov	r0, r6
 800bac0:	b007      	add	sp, #28
 800bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac4:	2000c060 	.word	0x2000c060
 800bac8:	080170b8 	.word	0x080170b8

0800bacc <rcl_publish>:
 800bacc:	b1f8      	cbz	r0, 800bb0e <rcl_publish+0x42>
 800bace:	6803      	ldr	r3, [r0, #0]
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4604      	mov	r4, r0
 800bad4:	b1b3      	cbz	r3, 800bb04 <rcl_publish+0x38>
 800bad6:	4616      	mov	r6, r2
 800bad8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800badc:	b192      	cbz	r2, 800bb04 <rcl_publish+0x38>
 800bade:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800bae2:	460d      	mov	r5, r1
 800bae4:	f004 fdd4 	bl	8010690 <rcl_context_is_valid>
 800bae8:	b160      	cbz	r0, 800bb04 <rcl_publish+0x38>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800baf0:	b140      	cbz	r0, 800bb04 <rcl_publish+0x38>
 800baf2:	b155      	cbz	r5, 800bb0a <rcl_publish+0x3e>
 800baf4:	4632      	mov	r2, r6
 800baf6:	4629      	mov	r1, r5
 800baf8:	f001 fa28 	bl	800cf4c <rmw_publish>
 800bafc:	3800      	subs	r0, #0
 800bafe:	bf18      	it	ne
 800bb00:	2001      	movne	r0, #1
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	200b      	movs	r0, #11
 800bb0c:	bd70      	pop	{r4, r5, r6, pc}
 800bb0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800bb12:	4770      	bx	lr

0800bb14 <_rclc_check_for_new_data>:
 800bb14:	b1e0      	cbz	r0, 800bb50 <_rclc_check_for_new_data+0x3c>
 800bb16:	7803      	ldrb	r3, [r0, #0]
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d81b      	bhi.n	800bb54 <_rclc_check_for_new_data+0x40>
 800bb1c:	e8df f003 	tbb	[pc, r3]
 800bb20:	12161010 	.word	0x12161010
 800bb24:	05050512 	.word	0x05050512
 800bb28:	14          	.byte	0x14
 800bb29:	00          	.byte	0x00
 800bb2a:	6a0b      	ldr	r3, [r1, #32]
 800bb2c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb32:	3b00      	subs	r3, #0
 800bb34:	bf18      	it	ne
 800bb36:	2301      	movne	r3, #1
 800bb38:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	4770      	bx	lr
 800bb40:	680b      	ldr	r3, [r1, #0]
 800bb42:	e7f3      	b.n	800bb2c <_rclc_check_for_new_data+0x18>
 800bb44:	698b      	ldr	r3, [r1, #24]
 800bb46:	e7f1      	b.n	800bb2c <_rclc_check_for_new_data+0x18>
 800bb48:	688b      	ldr	r3, [r1, #8]
 800bb4a:	e7ef      	b.n	800bb2c <_rclc_check_for_new_data+0x18>
 800bb4c:	690b      	ldr	r3, [r1, #16]
 800bb4e:	e7ed      	b.n	800bb2c <_rclc_check_for_new_data+0x18>
 800bb50:	200b      	movs	r0, #11
 800bb52:	4770      	bx	lr
 800bb54:	2300      	movs	r3, #0
 800bb56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800bb5a:	2001      	movs	r0, #1
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop

0800bb60 <_rclc_take_new_data>:
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d049      	beq.n	800bbf8 <_rclc_take_new_data+0x98>
 800bb64:	b510      	push	{r4, lr}
 800bb66:	7803      	ldrb	r3, [r0, #0]
 800bb68:	b08e      	sub	sp, #56	; 0x38
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	2b08      	cmp	r3, #8
 800bb6e:	d84a      	bhi.n	800bc06 <_rclc_take_new_data+0xa6>
 800bb70:	e8df f003 	tbb	[pc, r3]
 800bb74:	2b121515 	.word	0x2b121515
 800bb78:	0505052b 	.word	0x0505052b
 800bb7c:	12          	.byte	0x12
 800bb7d:	00          	.byte	0x00
 800bb7e:	6a0b      	ldr	r3, [r1, #32]
 800bb80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb86:	b13b      	cbz	r3, 800bb98 <_rclc_take_new_data+0x38>
 800bb88:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bb8c:	f104 0110 	add.w	r1, r4, #16
 800bb90:	f005 fbde 	bl	8011350 <rcl_take_request>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d131      	bne.n	800bbfc <_rclc_take_new_data+0x9c>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	b00e      	add	sp, #56	; 0x38
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	680b      	ldr	r3, [r1, #0]
 800bba0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0f6      	beq.n	800bb98 <_rclc_take_new_data+0x38>
 800bbaa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	aa02      	add	r2, sp, #8
 800bbb2:	f005 fc1b 	bl	80113ec <rcl_take>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d0ef      	beq.n	800bb9a <_rclc_take_new_data+0x3a>
 800bbba:	f240 1391 	movw	r3, #401	; 0x191
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	d115      	bne.n	800bbee <_rclc_take_new_data+0x8e>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800bbc8:	e7e7      	b.n	800bb9a <_rclc_take_new_data+0x3a>
 800bbca:	698b      	ldr	r3, [r1, #24]
 800bbcc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0e0      	beq.n	800bb98 <_rclc_take_new_data+0x38>
 800bbd6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bbda:	f104 0110 	add.w	r1, r4, #16
 800bbde:	f004 fcfd 	bl	80105dc <rcl_take_response>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d0d8      	beq.n	800bb98 <_rclc_take_new_data+0x38>
 800bbe6:	f240 13f5 	movw	r3, #501	; 0x1f5
 800bbea:	4298      	cmp	r0, r3
 800bbec:	d0d5      	beq.n	800bb9a <_rclc_take_new_data+0x3a>
 800bbee:	9001      	str	r0, [sp, #4]
 800bbf0:	f000 fc44 	bl	800c47c <rcutils_reset_error>
 800bbf4:	9801      	ldr	r0, [sp, #4]
 800bbf6:	e7d0      	b.n	800bb9a <_rclc_take_new_data+0x3a>
 800bbf8:	200b      	movs	r0, #11
 800bbfa:	4770      	bx	lr
 800bbfc:	f240 2359 	movw	r3, #601	; 0x259
 800bc00:	4298      	cmp	r0, r3
 800bc02:	d0de      	beq.n	800bbc2 <_rclc_take_new_data+0x62>
 800bc04:	e7f3      	b.n	800bbee <_rclc_take_new_data+0x8e>
 800bc06:	2001      	movs	r0, #1
 800bc08:	e7c7      	b.n	800bb9a <_rclc_take_new_data+0x3a>
 800bc0a:	bf00      	nop

0800bc0c <rclc_executor_trigger_any>:
 800bc0c:	b170      	cbz	r0, 800bc2c <rclc_executor_trigger_any+0x20>
 800bc0e:	b179      	cbz	r1, 800bc30 <rclc_executor_trigger_any+0x24>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2200      	movs	r2, #0
 800bc14:	e005      	b.n	800bc22 <rclc_executor_trigger_any+0x16>
 800bc16:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800bc1a:	3340      	adds	r3, #64	; 0x40
 800bc1c:	b930      	cbnz	r0, 800bc2c <rclc_executor_trigger_any+0x20>
 800bc1e:	4291      	cmp	r1, r2
 800bc20:	d005      	beq.n	800bc2e <rclc_executor_trigger_any+0x22>
 800bc22:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800bc26:	3201      	adds	r2, #1
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d1f4      	bne.n	800bc16 <rclc_executor_trigger_any+0xa>
 800bc2c:	4770      	bx	lr
 800bc2e:	4770      	bx	lr
 800bc30:	4608      	mov	r0, r1
 800bc32:	e7fb      	b.n	800bc2c <rclc_executor_trigger_any+0x20>

0800bc34 <_rclc_execute.part.0>:
 800bc34:	b530      	push	{r4, r5, lr}
 800bc36:	7803      	ldrb	r3, [r0, #0]
 800bc38:	b083      	sub	sp, #12
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	2b08      	cmp	r3, #8
 800bc3e:	d85b      	bhi.n	800bcf8 <_rclc_execute.part.0+0xc4>
 800bc40:	e8df f003 	tbb	[pc, r3]
 800bc44:	3036271f 	.word	0x3036271f
 800bc48:	0505053f 	.word	0x0505053f
 800bc4c:	1a          	.byte	0x1a
 800bc4d:	00          	.byte	0x00
 800bc4e:	2b06      	cmp	r3, #6
 800bc50:	d049      	beq.n	800bce6 <_rclc_execute.part.0+0xb2>
 800bc52:	2b07      	cmp	r3, #7
 800bc54:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bc56:	d140      	bne.n	800bcda <_rclc_execute.part.0+0xa6>
 800bc58:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800bc5c:	6880      	ldr	r0, [r0, #8]
 800bc5e:	4798      	blx	r3
 800bc60:	f104 0110 	add.w	r1, r4, #16
 800bc64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bc66:	6860      	ldr	r0, [r4, #4]
 800bc68:	f005 fbaa 	bl	80113c0 <rcl_send_response>
 800bc6c:	b138      	cbz	r0, 800bc7e <_rclc_execute.part.0+0x4a>
 800bc6e:	9001      	str	r0, [sp, #4]
 800bc70:	f000 fc04 	bl	800c47c <rcutils_reset_error>
 800bc74:	9801      	ldr	r0, [sp, #4]
 800bc76:	e002      	b.n	800bc7e <_rclc_execute.part.0+0x4a>
 800bc78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bc7a:	4798      	blx	r3
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	b003      	add	sp, #12
 800bc80:	bd30      	pop	{r4, r5, pc}
 800bc82:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800bc86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bc88:	b96d      	cbnz	r5, 800bca6 <_rclc_execute.part.0+0x72>
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	4798      	blx	r3
 800bc8e:	4628      	mov	r0, r5
 800bc90:	e7f5      	b.n	800bc7e <_rclc_execute.part.0+0x4a>
 800bc92:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800bc96:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800bc9a:	b1d5      	cbz	r5, 800bcd2 <_rclc_execute.part.0+0x9e>
 800bc9c:	6880      	ldr	r0, [r0, #8]
 800bc9e:	4798      	blx	r3
 800bca0:	2000      	movs	r0, #0
 800bca2:	e7ec      	b.n	800bc7e <_rclc_execute.part.0+0x4a>
 800bca4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bca6:	68a0      	ldr	r0, [r4, #8]
 800bca8:	4798      	blx	r3
 800bcaa:	2000      	movs	r0, #0
 800bcac:	b003      	add	sp, #12
 800bcae:	bd30      	pop	{r4, r5, pc}
 800bcb0:	6840      	ldr	r0, [r0, #4]
 800bcb2:	f005 feab 	bl	8011a0c <rcl_timer_call>
 800bcb6:	f240 3321 	movw	r3, #801	; 0x321
 800bcba:	4298      	cmp	r0, r3
 800bcbc:	d1d6      	bne.n	800bc6c <_rclc_execute.part.0+0x38>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e7dd      	b.n	800bc7e <_rclc_execute.part.0+0x4a>
 800bcc2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bcc4:	6880      	ldr	r0, [r0, #8]
 800bcc6:	f104 0110 	add.w	r1, r4, #16
 800bcca:	4798      	blx	r3
 800bccc:	2000      	movs	r0, #0
 800bcce:	b003      	add	sp, #12
 800bcd0:	bd30      	pop	{r4, r5, pc}
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	4798      	blx	r3
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	e7d1      	b.n	800bc7e <_rclc_execute.part.0+0x4a>
 800bcda:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800bcdc:	6880      	ldr	r0, [r0, #8]
 800bcde:	4798      	blx	r3
 800bce0:	f104 0110 	add.w	r1, r4, #16
 800bce4:	e7be      	b.n	800bc64 <_rclc_execute.part.0+0x30>
 800bce6:	f100 0110 	add.w	r1, r0, #16
 800bcea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bcec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bcee:	6880      	ldr	r0, [r0, #8]
 800bcf0:	9101      	str	r1, [sp, #4]
 800bcf2:	4798      	blx	r3
 800bcf4:	9901      	ldr	r1, [sp, #4]
 800bcf6:	e7b5      	b.n	800bc64 <_rclc_execute.part.0+0x30>
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	e7c0      	b.n	800bc7e <_rclc_execute.part.0+0x4a>
 800bcfc:	0000      	movs	r0, r0
	...

0800bd00 <rclc_executor_init>:
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d063      	beq.n	800bdcc <rclc_executor_init+0xcc>
 800bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd08:	460f      	mov	r7, r1
 800bd0a:	b0ae      	sub	sp, #184	; 0xb8
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d055      	beq.n	800bdbc <rclc_executor_init+0xbc>
 800bd10:	4605      	mov	r5, r0
 800bd12:	4618      	mov	r0, r3
 800bd14:	4616      	mov	r6, r2
 800bd16:	4698      	mov	r8, r3
 800bd18:	f000 fb8c 	bl	800c434 <rcutils_allocator_is_valid>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d04d      	beq.n	800bdbc <rclc_executor_init+0xbc>
 800bd20:	2e00      	cmp	r6, #0
 800bd22:	d04b      	beq.n	800bdbc <rclc_executor_init+0xbc>
 800bd24:	492e      	ldr	r1, [pc, #184]	; (800bde0 <rclc_executor_init+0xe0>)
 800bd26:	2280      	movs	r2, #128	; 0x80
 800bd28:	a80e      	add	r0, sp, #56	; 0x38
 800bd2a:	f009 fbcb 	bl	80154c4 <memcpy>
 800bd2e:	2400      	movs	r4, #0
 800bd30:	a90e      	add	r1, sp, #56	; 0x38
 800bd32:	2280      	movs	r2, #128	; 0x80
 800bd34:	4628      	mov	r0, r5
 800bd36:	f009 fbc5 	bl	80154c4 <memcpy>
 800bd3a:	602f      	str	r7, [r5, #0]
 800bd3c:	4668      	mov	r0, sp
 800bd3e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800bd42:	466f      	mov	r7, sp
 800bd44:	f006 f8bc 	bl	8011ec0 <rcl_get_zero_initialized_wait_set>
 800bd48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bd4a:	f105 0c14 	add.w	ip, r5, #20
 800bd4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bd54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd58:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bd5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd5e:	a31e      	add	r3, pc, #120	; (adr r3, 800bdd8 <rclc_executor_init+0xd8>)
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	f8cc 1000 	str.w	r1, [ip]
 800bd6a:	f8d8 7000 	ldr.w	r7, [r8]
 800bd6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bd72:	f8c5 8010 	str.w	r8, [r5, #16]
 800bd76:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800bd7a:	01b0      	lsls	r0, r6, #6
 800bd7c:	47b8      	blx	r7
 800bd7e:	6068      	str	r0, [r5, #4]
 800bd80:	b908      	cbnz	r0, 800bd86 <rclc_executor_init+0x86>
 800bd82:	e025      	b.n	800bdd0 <rclc_executor_init+0xd0>
 800bd84:	6868      	ldr	r0, [r5, #4]
 800bd86:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	3401      	adds	r4, #1
 800bd8e:	f000 fa0d 	bl	800c1ac <rclc_executor_handle_init>
 800bd92:	42a6      	cmp	r6, r4
 800bd94:	d1f6      	bne.n	800bd84 <rclc_executor_init+0x84>
 800bd96:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800bd9a:	f000 f9fb 	bl	800c194 <rclc_executor_handle_counters_zero_init>
 800bd9e:	686b      	ldr	r3, [r5, #4]
 800bda0:	4a10      	ldr	r2, [pc, #64]	; (800bde4 <rclc_executor_init+0xe4>)
 800bda2:	672a      	str	r2, [r5, #112]	; 0x70
 800bda4:	2000      	movs	r0, #0
 800bda6:	6768      	str	r0, [r5, #116]	; 0x74
 800bda8:	b163      	cbz	r3, 800bdc4 <rclc_executor_init+0xc4>
 800bdaa:	692b      	ldr	r3, [r5, #16]
 800bdac:	b153      	cbz	r3, 800bdc4 <rclc_executor_init+0xc4>
 800bdae:	68ab      	ldr	r3, [r5, #8]
 800bdb0:	b143      	cbz	r3, 800bdc4 <rclc_executor_init+0xc4>
 800bdb2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800bdb6:	b02e      	add	sp, #184	; 0xb8
 800bdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdbc:	200b      	movs	r0, #11
 800bdbe:	b02e      	add	sp, #184	; 0xb8
 800bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	b02e      	add	sp, #184	; 0xb8
 800bdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdcc:	200b      	movs	r0, #11
 800bdce:	4770      	bx	lr
 800bdd0:	200a      	movs	r0, #10
 800bdd2:	e7f4      	b.n	800bdbe <rclc_executor_init+0xbe>
 800bdd4:	f3af 8000 	nop.w
 800bdd8:	3b9aca00 	.word	0x3b9aca00
 800bddc:	00000000 	.word	0x00000000
 800bde0:	08017108 	.word	0x08017108
 800bde4:	0800bc0d 	.word	0x0800bc0d

0800bde8 <rclc_executor_add_timer>:
 800bde8:	b308      	cbz	r0, 800be2e <rclc_executor_add_timer+0x46>
 800bdea:	b301      	cbz	r1, 800be2e <rclc_executor_add_timer+0x46>
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	d301      	bcc.n	800bdfc <rclc_executor_add_timer+0x14>
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdfc:	6840      	ldr	r0, [r0, #4]
 800bdfe:	019d      	lsls	r5, r3, #6
 800be00:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800be04:	2702      	movs	r7, #2
 800be06:	6051      	str	r1, [r2, #4]
 800be08:	3301      	adds	r3, #1
 800be0a:	5347      	strh	r7, [r0, r5]
 800be0c:	2601      	movs	r6, #1
 800be0e:	2100      	movs	r1, #0
 800be10:	f104 0514 	add.w	r5, r4, #20
 800be14:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
 800be18:	62d1      	str	r1, [r2, #44]	; 0x2c
 800be1a:	4628      	mov	r0, r5
 800be1c:	60e3      	str	r3, [r4, #12]
 800be1e:	f006 f861 	bl	8011ee4 <rcl_wait_set_is_valid>
 800be22:	b930      	cbnz	r0, 800be32 <rclc_executor_add_timer+0x4a>
 800be24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800be26:	3301      	adds	r3, #1
 800be28:	64e3      	str	r3, [r4, #76]	; 0x4c
 800be2a:	2000      	movs	r0, #0
 800be2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be2e:	200b      	movs	r0, #11
 800be30:	4770      	bx	lr
 800be32:	4628      	mov	r0, r5
 800be34:	f006 f85c 	bl	8011ef0 <rcl_wait_set_fini>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d0f3      	beq.n	800be24 <rclc_executor_add_timer+0x3c>
 800be3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be3e:	bf00      	nop

0800be40 <rclc_executor_prepare>:
 800be40:	2800      	cmp	r0, #0
 800be42:	d03d      	beq.n	800bec0 <rclc_executor_prepare+0x80>
 800be44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be48:	f100 0814 	add.w	r8, r0, #20
 800be4c:	b09a      	sub	sp, #104	; 0x68
 800be4e:	4604      	mov	r4, r0
 800be50:	4640      	mov	r0, r8
 800be52:	f006 f847 	bl	8011ee4 <rcl_wait_set_is_valid>
 800be56:	b118      	cbz	r0, 800be60 <rclc_executor_prepare+0x20>
 800be58:	2000      	movs	r0, #0
 800be5a:	b01a      	add	sp, #104	; 0x68
 800be5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be60:	4640      	mov	r0, r8
 800be62:	f006 f845 	bl	8011ef0 <rcl_wait_set_fini>
 800be66:	2800      	cmp	r0, #0
 800be68:	d127      	bne.n	800beba <rclc_executor_prepare+0x7a>
 800be6a:	a80c      	add	r0, sp, #48	; 0x30
 800be6c:	ad0c      	add	r5, sp, #48	; 0x30
 800be6e:	f006 f827 	bl	8011ec0 <rcl_get_zero_initialized_wait_set>
 800be72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be74:	4646      	mov	r6, r8
 800be76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800be78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800be7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be7e:	6927      	ldr	r7, [r4, #16]
 800be80:	682d      	ldr	r5, [r5, #0]
 800be82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800be84:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800be86:	6035      	str	r5, [r6, #0]
 800be88:	ad04      	add	r5, sp, #16
 800be8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be8c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800be90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be92:	6826      	ldr	r6, [r4, #0]
 800be94:	6838      	ldr	r0, [r7, #0]
 800be96:	6028      	str	r0, [r5, #0]
 800be98:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800be9c:	e9cd 3200 	strd	r3, r2, [sp]
 800bea0:	4640      	mov	r0, r8
 800bea2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bea4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bea6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bea8:	f006 fb40 	bl	801252c <rcl_wait_set_init>
 800beac:	2800      	cmp	r0, #0
 800beae:	d0d4      	beq.n	800be5a <rclc_executor_prepare+0x1a>
 800beb0:	900b      	str	r0, [sp, #44]	; 0x2c
 800beb2:	f000 fae3 	bl	800c47c <rcutils_reset_error>
 800beb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800beb8:	e7cf      	b.n	800be5a <rclc_executor_prepare+0x1a>
 800beba:	f000 fadf 	bl	800c47c <rcutils_reset_error>
 800bebe:	e7d4      	b.n	800be6a <rclc_executor_prepare+0x2a>
 800bec0:	200b      	movs	r0, #11
 800bec2:	4770      	bx	lr

0800bec4 <rclc_executor_spin_some.part.0>:
 800bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	f100 0814 	add.w	r8, r0, #20
 800becc:	b083      	sub	sp, #12
 800bece:	4692      	mov	sl, r2
 800bed0:	4699      	mov	r9, r3
 800bed2:	4605      	mov	r5, r0
 800bed4:	f7ff ffb4 	bl	800be40 <rclc_executor_prepare>
 800bed8:	4640      	mov	r0, r8
 800beda:	f006 f8d5 	bl	8012088 <rcl_wait_set_clear>
 800bede:	4607      	mov	r7, r0
 800bee0:	2800      	cmp	r0, #0
 800bee2:	f040 80be 	bne.w	800c062 <rclc_executor_spin_some.part.0+0x19e>
 800bee6:	68ab      	ldr	r3, [r5, #8]
 800bee8:	4604      	mov	r4, r0
 800beea:	b1eb      	cbz	r3, 800bf28 <rclc_executor_spin_some.part.0+0x64>
 800beec:	686e      	ldr	r6, [r5, #4]
 800beee:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800bef2:	01a2      	lsls	r2, r4, #6
 800bef4:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800bef8:	b1b3      	cbz	r3, 800bf28 <rclc_executor_spin_some.part.0+0x64>
 800befa:	5cb3      	ldrb	r3, [r6, r2]
 800befc:	2b08      	cmp	r3, #8
 800befe:	f200 80a9 	bhi.w	800c054 <rclc_executor_spin_some.part.0+0x190>
 800bf02:	e8df f003 	tbb	[pc, r3]
 800bf06:	8989      	.short	0x8989
 800bf08:	057b7b93 	.word	0x057b7b93
 800bf0c:	0505      	.short	0x0505
 800bf0e:	9d          	.byte	0x9d
 800bf0f:	00          	.byte	0x00
 800bf10:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800bf14:	4640      	mov	r0, r8
 800bf16:	6849      	ldr	r1, [r1, #4]
 800bf18:	f006 fc1e 	bl	8012758 <rcl_wait_set_add_service>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d175      	bne.n	800c00c <rclc_executor_spin_some.part.0+0x148>
 800bf20:	68ab      	ldr	r3, [r5, #8]
 800bf22:	3401      	adds	r4, #1
 800bf24:	429c      	cmp	r4, r3
 800bf26:	d3e1      	bcc.n	800beec <rclc_executor_spin_some.part.0+0x28>
 800bf28:	464b      	mov	r3, r9
 800bf2a:	4652      	mov	r2, sl
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	f006 fc3f 	bl	80127b0 <rcl_wait>
 800bf32:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 809b 	beq.w	800c072 <rclc_executor_spin_some.part.0+0x1ae>
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	f040 8089 	bne.w	800c054 <rclc_executor_spin_some.part.0+0x190>
 800bf42:	68ab      	ldr	r3, [r5, #8]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80ef 	beq.w	800c128 <rclc_executor_spin_some.part.0+0x264>
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	4626      	mov	r6, r4
 800bf4e:	f240 1991 	movw	r9, #401	; 0x191
 800bf52:	e00a      	b.n	800bf6a <rclc_executor_spin_some.part.0+0xa6>
 800bf54:	f7ff fdde 	bl	800bb14 <_rclc_check_for_new_data>
 800bf58:	4604      	mov	r4, r0
 800bf5a:	b110      	cbz	r0, 800bf62 <rclc_executor_spin_some.part.0+0x9e>
 800bf5c:	4548      	cmp	r0, r9
 800bf5e:	f040 8086 	bne.w	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800bf62:	68ab      	ldr	r3, [r5, #8]
 800bf64:	429e      	cmp	r6, r3
 800bf66:	f080 80db 	bcs.w	800c120 <rclc_executor_spin_some.part.0+0x25c>
 800bf6a:	686a      	ldr	r2, [r5, #4]
 800bf6c:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800bf70:	4641      	mov	r1, r8
 800bf72:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bf76:	3601      	adds	r6, #1
 800bf78:	f1bc 0f00 	cmp.w	ip, #0
 800bf7c:	d1ea      	bne.n	800bf54 <rclc_executor_spin_some.part.0+0x90>
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800bf86:	4798      	blx	r3
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d070      	beq.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800bf8c:	68aa      	ldr	r2, [r5, #8]
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	d06d      	beq.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800bf92:	2600      	movs	r6, #0
 800bf94:	f240 1991 	movw	r9, #401	; 0x191
 800bf98:	e008      	b.n	800bfac <rclc_executor_spin_some.part.0+0xe8>
 800bf9a:	f7ff fde1 	bl	800bb60 <_rclc_take_new_data>
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	b108      	cbz	r0, 800bfa6 <rclc_executor_spin_some.part.0+0xe2>
 800bfa2:	4548      	cmp	r0, r9
 800bfa4:	d163      	bne.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800bfa6:	68aa      	ldr	r2, [r5, #8]
 800bfa8:	4296      	cmp	r6, r2
 800bfaa:	d208      	bcs.n	800bfbe <rclc_executor_spin_some.part.0+0xfa>
 800bfac:	6868      	ldr	r0, [r5, #4]
 800bfae:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800bfb8:	3601      	adds	r6, #1
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1ed      	bne.n	800bf9a <rclc_executor_spin_some.part.0+0xd6>
 800bfbe:	2600      	movs	r6, #0
 800bfc0:	b932      	cbnz	r2, 800bfd0 <rclc_executor_spin_some.part.0+0x10c>
 800bfc2:	e054      	b.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800bfc4:	2901      	cmp	r1, #1
 800bfc6:	d012      	beq.n	800bfee <rclc_executor_spin_some.part.0+0x12a>
 800bfc8:	3601      	adds	r6, #1
 800bfca:	4296      	cmp	r6, r2
 800bfcc:	d245      	bcs.n	800c05a <rclc_executor_spin_some.part.0+0x196>
 800bfce:	2400      	movs	r4, #0
 800bfd0:	686b      	ldr	r3, [r5, #4]
 800bfd2:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800bfdc:	2900      	cmp	r1, #0
 800bfde:	d046      	beq.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800bfe0:	7859      	ldrb	r1, [r3, #1]
 800bfe2:	2900      	cmp	r1, #0
 800bfe4:	d1ee      	bne.n	800bfc4 <rclc_executor_spin_some.part.0+0x100>
 800bfe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d0ec      	beq.n	800bfc8 <rclc_executor_spin_some.part.0+0x104>
 800bfee:	f7ff fe21 	bl	800bc34 <_rclc_execute.part.0>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f040 8096 	bne.w	800c124 <rclc_executor_spin_some.part.0+0x260>
 800bff8:	68aa      	ldr	r2, [r5, #8]
 800bffa:	e7e5      	b.n	800bfc8 <rclc_executor_spin_some.part.0+0x104>
 800bffc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800c000:	4640      	mov	r0, r8
 800c002:	6849      	ldr	r1, [r1, #4]
 800c004:	f006 fb7c 	bl	8012700 <rcl_wait_set_add_client>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d089      	beq.n	800bf20 <rclc_executor_spin_some.part.0+0x5c>
 800c00c:	9001      	str	r0, [sp, #4]
 800c00e:	f000 fa35 	bl	800c47c <rcutils_reset_error>
 800c012:	9801      	ldr	r0, [sp, #4]
 800c014:	4607      	mov	r7, r0
 800c016:	e020      	b.n	800c05a <rclc_executor_spin_some.part.0+0x196>
 800c018:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800c01c:	4640      	mov	r0, r8
 800c01e:	6849      	ldr	r1, [r1, #4]
 800c020:	f006 f806 	bl	8012030 <rcl_wait_set_add_subscription>
 800c024:	2800      	cmp	r0, #0
 800c026:	f43f af7b 	beq.w	800bf20 <rclc_executor_spin_some.part.0+0x5c>
 800c02a:	e7ef      	b.n	800c00c <rclc_executor_spin_some.part.0+0x148>
 800c02c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800c030:	4640      	mov	r0, r8
 800c032:	6849      	ldr	r1, [r1, #4]
 800c034:	f006 fb34 	bl	80126a0 <rcl_wait_set_add_timer>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f43f af71 	beq.w	800bf20 <rclc_executor_spin_some.part.0+0x5c>
 800c03e:	e7e5      	b.n	800c00c <rclc_executor_spin_some.part.0+0x148>
 800c040:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800c044:	4640      	mov	r0, r8
 800c046:	6849      	ldr	r1, [r1, #4]
 800c048:	f006 fafe 	bl	8012648 <rcl_wait_set_add_guard_condition>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f43f af67 	beq.w	800bf20 <rclc_executor_spin_some.part.0+0x5c>
 800c052:	e7db      	b.n	800c00c <rclc_executor_spin_some.part.0+0x148>
 800c054:	f000 fa12 	bl	800c47c <rcutils_reset_error>
 800c058:	2701      	movs	r7, #1
 800c05a:	4638      	mov	r0, r7
 800c05c:	b003      	add	sp, #12
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	f000 fa0b 	bl	800c47c <rcutils_reset_error>
 800c066:	4638      	mov	r0, r7
 800c068:	b003      	add	sp, #12
 800c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06e:	4627      	mov	r7, r4
 800c070:	e7f3      	b.n	800c05a <rclc_executor_spin_some.part.0+0x196>
 800c072:	68ab      	ldr	r3, [r5, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d05a      	beq.n	800c12e <rclc_executor_spin_some.part.0+0x26a>
 800c078:	2400      	movs	r4, #0
 800c07a:	4626      	mov	r6, r4
 800c07c:	f240 1991 	movw	r9, #401	; 0x191
 800c080:	e008      	b.n	800c094 <rclc_executor_spin_some.part.0+0x1d0>
 800c082:	f7ff fd47 	bl	800bb14 <_rclc_check_for_new_data>
 800c086:	4604      	mov	r4, r0
 800c088:	b108      	cbz	r0, 800c08e <rclc_executor_spin_some.part.0+0x1ca>
 800c08a:	4548      	cmp	r0, r9
 800c08c:	d1ef      	bne.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800c08e:	68ab      	ldr	r3, [r5, #8]
 800c090:	429e      	cmp	r6, r3
 800c092:	d243      	bcs.n	800c11c <rclc_executor_spin_some.part.0+0x258>
 800c094:	686a      	ldr	r2, [r5, #4]
 800c096:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c09a:	4641      	mov	r1, r8
 800c09c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800c0a0:	3601      	adds	r6, #1
 800c0a2:	f1bc 0f00 	cmp.w	ip, #0
 800c0a6:	d1ec      	bne.n	800c082 <rclc_executor_spin_some.part.0+0x1be>
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800c0b0:	4798      	blx	r3
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d0db      	beq.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800c0b6:	68ab      	ldr	r3, [r5, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d0d8      	beq.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800c0bc:	f04f 0a00 	mov.w	sl, #0
 800c0c0:	f240 1691 	movw	r6, #401	; 0x191
 800c0c4:	f240 2959 	movw	r9, #601	; 0x259
 800c0c8:	e00b      	b.n	800c0e2 <rclc_executor_spin_some.part.0+0x21e>
 800c0ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800c0ce:	b113      	cbz	r3, 800c0d6 <rclc_executor_spin_some.part.0+0x212>
 800c0d0:	f7ff fdb0 	bl	800bc34 <_rclc_execute.part.0>
 800c0d4:	bb30      	cbnz	r0, 800c124 <rclc_executor_spin_some.part.0+0x260>
 800c0d6:	68ab      	ldr	r3, [r5, #8]
 800c0d8:	f10a 0a01 	add.w	sl, sl, #1
 800c0dc:	459a      	cmp	sl, r3
 800c0de:	d2bc      	bcs.n	800c05a <rclc_executor_spin_some.part.0+0x196>
 800c0e0:	2400      	movs	r4, #0
 800c0e2:	6868      	ldr	r0, [r5, #4]
 800c0e4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800c0e8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800c0ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0bc      	beq.n	800c06e <rclc_executor_spin_some.part.0+0x1aa>
 800c0f4:	4641      	mov	r1, r8
 800c0f6:	f7ff fd33 	bl	800bb60 <_rclc_take_new_data>
 800c0fa:	b118      	cbz	r0, 800c104 <rclc_executor_spin_some.part.0+0x240>
 800c0fc:	42b0      	cmp	r0, r6
 800c0fe:	d001      	beq.n	800c104 <rclc_executor_spin_some.part.0+0x240>
 800c100:	4548      	cmp	r0, r9
 800c102:	d10f      	bne.n	800c124 <rclc_executor_spin_some.part.0+0x260>
 800c104:	6868      	ldr	r0, [r5, #4]
 800c106:	eb10 000b 	adds.w	r0, r0, fp
 800c10a:	d005      	beq.n	800c118 <rclc_executor_spin_some.part.0+0x254>
 800c10c:	7843      	ldrb	r3, [r0, #1]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0db      	beq.n	800c0ca <rclc_executor_spin_some.part.0+0x206>
 800c112:	2b01      	cmp	r3, #1
 800c114:	d1df      	bne.n	800c0d6 <rclc_executor_spin_some.part.0+0x212>
 800c116:	e7db      	b.n	800c0d0 <rclc_executor_spin_some.part.0+0x20c>
 800c118:	270b      	movs	r7, #11
 800c11a:	e79e      	b.n	800c05a <rclc_executor_spin_some.part.0+0x196>
 800c11c:	686a      	ldr	r2, [r5, #4]
 800c11e:	e7c3      	b.n	800c0a8 <rclc_executor_spin_some.part.0+0x1e4>
 800c120:	686a      	ldr	r2, [r5, #4]
 800c122:	e72c      	b.n	800bf7e <rclc_executor_spin_some.part.0+0xba>
 800c124:	4607      	mov	r7, r0
 800c126:	e798      	b.n	800c05a <rclc_executor_spin_some.part.0+0x196>
 800c128:	686a      	ldr	r2, [r5, #4]
 800c12a:	461c      	mov	r4, r3
 800c12c:	e727      	b.n	800bf7e <rclc_executor_spin_some.part.0+0xba>
 800c12e:	686a      	ldr	r2, [r5, #4]
 800c130:	461c      	mov	r4, r3
 800c132:	e7b9      	b.n	800c0a8 <rclc_executor_spin_some.part.0+0x1e4>

0800c134 <rclc_executor_spin_some>:
 800c134:	b190      	cbz	r0, 800c15c <rclc_executor_spin_some+0x28>
 800c136:	b570      	push	{r4, r5, r6, lr}
 800c138:	4604      	mov	r4, r0
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	4616      	mov	r6, r2
 800c13e:	461d      	mov	r5, r3
 800c140:	f004 faa6 	bl	8010690 <rcl_context_is_valid>
 800c144:	b130      	cbz	r0, 800c154 <rclc_executor_spin_some+0x20>
 800c146:	4632      	mov	r2, r6
 800c148:	462b      	mov	r3, r5
 800c14a:	4620      	mov	r0, r4
 800c14c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c150:	f7ff beb8 	b.w	800bec4 <rclc_executor_spin_some.part.0>
 800c154:	f000 f992 	bl	800c47c <rcutils_reset_error>
 800c158:	2001      	movs	r0, #1
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	200b      	movs	r0, #11
 800c15e:	4770      	bx	lr

0800c160 <rclc_executor_spin>:
 800c160:	b1a8      	cbz	r0, 800c18e <rclc_executor_spin+0x2e>
 800c162:	b5d0      	push	{r4, r6, r7, lr}
 800c164:	4604      	mov	r4, r0
 800c166:	6820      	ldr	r0, [r4, #0]
 800c168:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800c16c:	f004 fa90 	bl	8010690 <rcl_context_is_valid>
 800c170:	4601      	mov	r1, r0
 800c172:	4632      	mov	r2, r6
 800c174:	463b      	mov	r3, r7
 800c176:	4620      	mov	r0, r4
 800c178:	b129      	cbz	r1, 800c186 <rclc_executor_spin+0x26>
 800c17a:	f7ff fea3 	bl	800bec4 <rclc_executor_spin_some.part.0>
 800c17e:	f030 0302 	bics.w	r3, r0, #2
 800c182:	d0f0      	beq.n	800c166 <rclc_executor_spin+0x6>
 800c184:	bdd0      	pop	{r4, r6, r7, pc}
 800c186:	f000 f979 	bl	800c47c <rcutils_reset_error>
 800c18a:	2001      	movs	r0, #1
 800c18c:	bdd0      	pop	{r4, r6, r7, pc}
 800c18e:	200b      	movs	r0, #11
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop

0800c194 <rclc_executor_handle_counters_zero_init>:
 800c194:	b140      	cbz	r0, 800c1a8 <rclc_executor_handle_counters_zero_init+0x14>
 800c196:	2300      	movs	r3, #0
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	6043      	str	r3, [r0, #4]
 800c19c:	6083      	str	r3, [r0, #8]
 800c19e:	60c3      	str	r3, [r0, #12]
 800c1a0:	6103      	str	r3, [r0, #16]
 800c1a2:	6143      	str	r3, [r0, #20]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	4770      	bx	lr
 800c1a8:	200b      	movs	r0, #11
 800c1aa:	4770      	bx	lr

0800c1ac <rclc_executor_handle_init>:
 800c1ac:	b178      	cbz	r0, 800c1ce <rclc_executor_handle_init+0x22>
 800c1ae:	b430      	push	{r4, r5}
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2209      	movs	r2, #9
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	2400      	movs	r4, #0
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	801a      	strh	r2, [r3, #0]
 800c1bc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800c1c0:	bc30      	pop	{r4, r5}
 800c1c2:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800c1c6:	6359      	str	r1, [r3, #52]	; 0x34
 800c1c8:	6318      	str	r0, [r3, #48]	; 0x30
 800c1ca:	8718      	strh	r0, [r3, #56]	; 0x38
 800c1cc:	4770      	bx	lr
 800c1ce:	200b      	movs	r0, #11
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop

0800c1d4 <rclc_support_init>:
 800c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	b086      	sub	sp, #24
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d042      	beq.n	800c264 <rclc_support_init+0x90>
 800c1de:	461c      	mov	r4, r3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d03f      	beq.n	800c264 <rclc_support_init+0x90>
 800c1e4:	460f      	mov	r7, r1
 800c1e6:	4690      	mov	r8, r2
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	f004 fe77 	bl	8010edc <rcl_get_zero_initialized_init_options>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800c1f4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	a805      	add	r0, sp, #20
 800c1fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c200:	f004 fe6e 	bl	8010ee0 <rcl_init_options_init>
 800c204:	4605      	mov	r5, r0
 800c206:	bb38      	cbnz	r0, 800c258 <rclc_support_init+0x84>
 800c208:	f004 fe68 	bl	8010edc <rcl_get_zero_initialized_init_options>
 800c20c:	4631      	mov	r1, r6
 800c20e:	6030      	str	r0, [r6, #0]
 800c210:	a805      	add	r0, sp, #20
 800c212:	f004 fedb 	bl	8010fcc <rcl_init_options_copy>
 800c216:	4605      	mov	r5, r0
 800c218:	b9c0      	cbnz	r0, 800c24c <rclc_support_init+0x78>
 800c21a:	ad02      	add	r5, sp, #8
 800c21c:	4628      	mov	r0, r5
 800c21e:	f004 fa2d 	bl	801067c <rcl_get_zero_initialized_context>
 800c222:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c226:	1d33      	adds	r3, r6, #4
 800c228:	e883 0003 	stmia.w	r3, {r0, r1}
 800c22c:	4632      	mov	r2, r6
 800c22e:	4641      	mov	r1, r8
 800c230:	4638      	mov	r0, r7
 800c232:	f004 fd49 	bl	8010cc8 <rcl_init>
 800c236:	4605      	mov	r5, r0
 800c238:	b940      	cbnz	r0, 800c24c <rclc_support_init+0x78>
 800c23a:	60f4      	str	r4, [r6, #12]
 800c23c:	4622      	mov	r2, r4
 800c23e:	f106 0110 	add.w	r1, r6, #16
 800c242:	2003      	movs	r0, #3
 800c244:	f005 f93c 	bl	80114c0 <rcl_clock_init>
 800c248:	4605      	mov	r5, r0
 800c24a:	b108      	cbz	r0, 800c250 <rclc_support_init+0x7c>
 800c24c:	f000 f916 	bl	800c47c <rcutils_reset_error>
 800c250:	a805      	add	r0, sp, #20
 800c252:	f004 fe97 	bl	8010f84 <rcl_init_options_fini>
 800c256:	b108      	cbz	r0, 800c25c <rclc_support_init+0x88>
 800c258:	f000 f910 	bl	800c47c <rcutils_reset_error>
 800c25c:	4628      	mov	r0, r5
 800c25e:	b006      	add	sp, #24
 800c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c264:	250b      	movs	r5, #11
 800c266:	4628      	mov	r0, r5
 800c268:	b006      	add	sp, #24
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26e:	bf00      	nop

0800c270 <rclc_node_init_default>:
 800c270:	b3b8      	cbz	r0, 800c2e2 <rclc_node_init_default+0x72>
 800c272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c276:	460d      	mov	r5, r1
 800c278:	b08f      	sub	sp, #60	; 0x3c
 800c27a:	b329      	cbz	r1, 800c2c8 <rclc_node_init_default+0x58>
 800c27c:	4616      	mov	r6, r2
 800c27e:	b31a      	cbz	r2, 800c2c8 <rclc_node_init_default+0x58>
 800c280:	461f      	mov	r7, r3
 800c282:	b30b      	cbz	r3, 800c2c8 <rclc_node_init_default+0x58>
 800c284:	f10d 0810 	add.w	r8, sp, #16
 800c288:	4604      	mov	r4, r0
 800c28a:	4640      	mov	r0, r8
 800c28c:	f7ff f8c6 	bl	800b41c <rcl_get_zero_initialized_node>
 800c290:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c294:	f10d 091c 	add.w	r9, sp, #28
 800c298:	e884 0003 	stmia.w	r4, {r0, r1}
 800c29c:	4648      	mov	r0, r9
 800c29e:	f7ff fa91 	bl	800b7c4 <rcl_node_get_default_options>
 800c2a2:	4640      	mov	r0, r8
 800c2a4:	f7ff f8ba 	bl	800b41c <rcl_get_zero_initialized_node>
 800c2a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c2ac:	1d3b      	adds	r3, r7, #4
 800c2ae:	f8cd 9000 	str.w	r9, [sp]
 800c2b2:	4632      	mov	r2, r6
 800c2b4:	e884 0003 	stmia.w	r4, {r0, r1}
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f7ff f8b8 	bl	800b430 <rcl_node_init>
 800c2c0:	b930      	cbnz	r0, 800c2d0 <rclc_node_init_default+0x60>
 800c2c2:	b00f      	add	sp, #60	; 0x3c
 800c2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2c8:	200b      	movs	r0, #11
 800c2ca:	b00f      	add	sp, #60	; 0x3c
 800c2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2d0:	9003      	str	r0, [sp, #12]
 800c2d2:	f000 f8d3 	bl	800c47c <rcutils_reset_error>
 800c2d6:	f000 f8d1 	bl	800c47c <rcutils_reset_error>
 800c2da:	9803      	ldr	r0, [sp, #12]
 800c2dc:	b00f      	add	sp, #60	; 0x3c
 800c2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2e2:	200b      	movs	r0, #11
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop

0800c2e8 <rclc_publisher_init_default>:
 800c2e8:	b368      	cbz	r0, 800c346 <rclc_publisher_init_default+0x5e>
 800c2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	b09e      	sub	sp, #120	; 0x78
 800c2f2:	b321      	cbz	r1, 800c33e <rclc_publisher_init_default+0x56>
 800c2f4:	4616      	mov	r6, r2
 800c2f6:	b312      	cbz	r2, 800c33e <rclc_publisher_init_default+0x56>
 800c2f8:	461f      	mov	r7, r3
 800c2fa:	b303      	cbz	r3, 800c33e <rclc_publisher_init_default+0x56>
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	f7ff fa9b 	bl	800b838 <rcl_get_zero_initialized_publisher>
 800c302:	f10d 0810 	add.w	r8, sp, #16
 800c306:	6020      	str	r0, [r4, #0]
 800c308:	4640      	mov	r0, r8
 800c30a:	f7ff fbbd 	bl	800ba88 <rcl_publisher_get_default_options>
 800c30e:	490f      	ldr	r1, [pc, #60]	; (800c34c <rclc_publisher_init_default+0x64>)
 800c310:	2250      	movs	r2, #80	; 0x50
 800c312:	4640      	mov	r0, r8
 800c314:	f009 f8d6 	bl	80154c4 <memcpy>
 800c318:	f8cd 8000 	str.w	r8, [sp]
 800c31c:	463b      	mov	r3, r7
 800c31e:	4632      	mov	r2, r6
 800c320:	4629      	mov	r1, r5
 800c322:	4620      	mov	r0, r4
 800c324:	f7ff fa8e 	bl	800b844 <rcl_publisher_init>
 800c328:	b910      	cbnz	r0, 800c330 <rclc_publisher_init_default+0x48>
 800c32a:	b01e      	add	sp, #120	; 0x78
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	9003      	str	r0, [sp, #12]
 800c332:	f000 f8a3 	bl	800c47c <rcutils_reset_error>
 800c336:	9803      	ldr	r0, [sp, #12]
 800c338:	b01e      	add	sp, #120	; 0x78
 800c33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33e:	200b      	movs	r0, #11
 800c340:	b01e      	add	sp, #120	; 0x78
 800c342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c346:	200b      	movs	r0, #11
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	08017188 	.word	0x08017188

0800c350 <rclc_timer_init_default>:
 800c350:	b348      	cbz	r0, 800c3a6 <rclc_timer_init_default+0x56>
 800c352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c356:	460c      	mov	r4, r1
 800c358:	b08b      	sub	sp, #44	; 0x2c
 800c35a:	b301      	cbz	r1, 800c39e <rclc_timer_init_default+0x4e>
 800c35c:	4691      	mov	r9, r2
 800c35e:	4698      	mov	r8, r3
 800c360:	4607      	mov	r7, r0
 800c362:	f005 fa99 	bl	8011898 <rcl_get_zero_initialized_timer>
 800c366:	68e6      	ldr	r6, [r4, #12]
 800c368:	6038      	str	r0, [r7, #0]
 800c36a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c36c:	ad03      	add	r5, sp, #12
 800c36e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c370:	6833      	ldr	r3, [r6, #0]
 800c372:	602b      	str	r3, [r5, #0]
 800c374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	e9cd 9800 	strd	r9, r8, [sp]
 800c37c:	4638      	mov	r0, r7
 800c37e:	1d22      	adds	r2, r4, #4
 800c380:	f104 0110 	add.w	r1, r4, #16
 800c384:	f005 fa8e 	bl	80118a4 <rcl_timer_init>
 800c388:	b910      	cbnz	r0, 800c390 <rclc_timer_init_default+0x40>
 800c38a:	b00b      	add	sp, #44	; 0x2c
 800c38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c390:	9009      	str	r0, [sp, #36]	; 0x24
 800c392:	f000 f873 	bl	800c47c <rcutils_reset_error>
 800c396:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c398:	b00b      	add	sp, #44	; 0x2c
 800c39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39e:	200b      	movs	r0, #11
 800c3a0:	b00b      	add	sp, #44	; 0x2c
 800c3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3a6:	200b      	movs	r0, #11
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop

0800c3ac <__default_zero_allocate>:
 800c3ac:	f009 b800 	b.w	80153b0 <calloc>

0800c3b0 <__default_reallocate>:
 800c3b0:	f009 baa8 	b.w	8015904 <realloc>

0800c3b4 <__default_deallocate>:
 800c3b4:	f009 b87e 	b.w	80154b4 <free>

0800c3b8 <__default_allocate>:
 800c3b8:	f009 b874 	b.w	80154a4 <malloc>

0800c3bc <rcutils_get_zero_initialized_allocator>:
 800c3bc:	b470      	push	{r4, r5, r6}
 800c3be:	4d05      	ldr	r5, [pc, #20]	; (800c3d4 <rcutils_get_zero_initialized_allocator+0x18>)
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3c4:	4634      	mov	r4, r6
 800c3c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	bc70      	pop	{r4, r5, r6}
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	080171d8 	.word	0x080171d8

0800c3d8 <rcutils_set_default_allocator>:
 800c3d8:	b1a0      	cbz	r0, 800c404 <rcutils_set_default_allocator+0x2c>
 800c3da:	6801      	ldr	r1, [r0, #0]
 800c3dc:	b199      	cbz	r1, 800c406 <rcutils_set_default_allocator+0x2e>
 800c3de:	b430      	push	{r4, r5}
 800c3e0:	6844      	ldr	r4, [r0, #4]
 800c3e2:	b194      	cbz	r4, 800c40a <rcutils_set_default_allocator+0x32>
 800c3e4:	68c5      	ldr	r5, [r0, #12]
 800c3e6:	b15d      	cbz	r5, 800c400 <rcutils_set_default_allocator+0x28>
 800c3e8:	6883      	ldr	r3, [r0, #8]
 800c3ea:	b18b      	cbz	r3, 800c410 <rcutils_set_default_allocator+0x38>
 800c3ec:	4a09      	ldr	r2, [pc, #36]	; (800c414 <rcutils_set_default_allocator+0x3c>)
 800c3ee:	e9c2 1400 	strd	r1, r4, [r2]
 800c3f2:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	6110      	str	r0, [r2, #16]
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	bc30      	pop	{r4, r5}
 800c3fe:	4770      	bx	lr
 800c400:	4628      	mov	r0, r5
 800c402:	e7fb      	b.n	800c3fc <rcutils_set_default_allocator+0x24>
 800c404:	4770      	bx	lr
 800c406:	4608      	mov	r0, r1
 800c408:	4770      	bx	lr
 800c40a:	4620      	mov	r0, r4
 800c40c:	bc30      	pop	{r4, r5}
 800c40e:	4770      	bx	lr
 800c410:	4618      	mov	r0, r3
 800c412:	e7f3      	b.n	800c3fc <rcutils_set_default_allocator+0x24>
 800c414:	2000008c 	.word	0x2000008c

0800c418 <rcutils_get_default_allocator>:
 800c418:	b470      	push	{r4, r5, r6}
 800c41a:	4d05      	ldr	r5, [pc, #20]	; (800c430 <rcutils_get_default_allocator+0x18>)
 800c41c:	4606      	mov	r6, r0
 800c41e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c420:	4634      	mov	r4, r6
 800c422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	4630      	mov	r0, r6
 800c42a:	bc70      	pop	{r4, r5, r6}
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	2000008c 	.word	0x2000008c

0800c434 <rcutils_allocator_is_valid>:
 800c434:	b158      	cbz	r0, 800c44e <rcutils_allocator_is_valid+0x1a>
 800c436:	6803      	ldr	r3, [r0, #0]
 800c438:	b143      	cbz	r3, 800c44c <rcutils_allocator_is_valid+0x18>
 800c43a:	6843      	ldr	r3, [r0, #4]
 800c43c:	b133      	cbz	r3, 800c44c <rcutils_allocator_is_valid+0x18>
 800c43e:	68c3      	ldr	r3, [r0, #12]
 800c440:	b123      	cbz	r3, 800c44c <rcutils_allocator_is_valid+0x18>
 800c442:	6880      	ldr	r0, [r0, #8]
 800c444:	3800      	subs	r0, #0
 800c446:	bf18      	it	ne
 800c448:	2001      	movne	r0, #1
 800c44a:	4770      	bx	lr
 800c44c:	4618      	mov	r0, r3
 800c44e:	4770      	bx	lr

0800c450 <rcutils_get_error_string>:
 800c450:	4b06      	ldr	r3, [pc, #24]	; (800c46c <rcutils_get_error_string+0x1c>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	b13b      	cbz	r3, 800c466 <rcutils_get_error_string+0x16>
 800c456:	4b06      	ldr	r3, [pc, #24]	; (800c470 <rcutils_get_error_string+0x20>)
 800c458:	781a      	ldrb	r2, [r3, #0]
 800c45a:	b90a      	cbnz	r2, 800c460 <rcutils_get_error_string+0x10>
 800c45c:	2201      	movs	r2, #1
 800c45e:	701a      	strb	r2, [r3, #0]
 800c460:	4b04      	ldr	r3, [pc, #16]	; (800c474 <rcutils_get_error_string+0x24>)
 800c462:	7818      	ldrb	r0, [r3, #0]
 800c464:	4770      	bx	lr
 800c466:	4b04      	ldr	r3, [pc, #16]	; (800c478 <rcutils_get_error_string+0x28>)
 800c468:	7818      	ldrb	r0, [r3, #0]
 800c46a:	4770      	bx	lr
 800c46c:	2000c0c8 	.word	0x2000c0c8
 800c470:	2000c0c9 	.word	0x2000c0c9
 800c474:	2000c1f0 	.word	0x2000c1f0
 800c478:	080171ec 	.word	0x080171ec

0800c47c <rcutils_reset_error>:
 800c47c:	b4d0      	push	{r4, r6, r7}
 800c47e:	4a07      	ldr	r2, [pc, #28]	; (800c49c <rcutils_reset_error+0x20>)
 800c480:	4807      	ldr	r0, [pc, #28]	; (800c4a0 <rcutils_reset_error+0x24>)
 800c482:	4c08      	ldr	r4, [pc, #32]	; (800c4a4 <rcutils_reset_error+0x28>)
 800c484:	4908      	ldr	r1, [pc, #32]	; (800c4a8 <rcutils_reset_error+0x2c>)
 800c486:	2300      	movs	r3, #0
 800c488:	2600      	movs	r6, #0
 800c48a:	2700      	movs	r7, #0
 800c48c:	8013      	strh	r3, [r2, #0]
 800c48e:	7003      	strb	r3, [r0, #0]
 800c490:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800c494:	7023      	strb	r3, [r4, #0]
 800c496:	700b      	strb	r3, [r1, #0]
 800c498:	bcd0      	pop	{r4, r6, r7}
 800c49a:	4770      	bx	lr
 800c49c:	2000c1f8 	.word	0x2000c1f8
 800c4a0:	2000c1f0 	.word	0x2000c1f0
 800c4a4:	2000c0c9 	.word	0x2000c0c9
 800c4a8:	2000c0c8 	.word	0x2000c0c8

0800c4ac <rcutils_format_string_limit>:
 800c4ac:	b40f      	push	{r0, r1, r2, r3}
 800c4ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	ac08      	add	r4, sp, #32
 800c4b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c4b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c4ba:	b34e      	cbz	r6, 800c510 <rcutils_format_string_limit+0x64>
 800c4bc:	a808      	add	r0, sp, #32
 800c4be:	f7ff ffb9 	bl	800c434 <rcutils_allocator_is_valid>
 800c4c2:	b328      	cbz	r0, 800c510 <rcutils_format_string_limit+0x64>
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	ab0f      	add	r3, sp, #60	; 0x3c
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	4632      	mov	r2, r6
 800c4cc:	e9cd 3300 	strd	r3, r3, [sp]
 800c4d0:	f000 f8ec 	bl	800c6ac <rcutils_vsnprintf>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	d01a      	beq.n	800c510 <rcutils_format_string_limit+0x64>
 800c4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4de:	1c47      	adds	r7, r0, #1
 800c4e0:	429f      	cmp	r7, r3
 800c4e2:	bf84      	itt	hi
 800c4e4:	461f      	movhi	r7, r3
 800c4e6:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	9b08      	ldr	r3, [sp, #32]
 800c4ee:	4798      	blx	r3
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	b168      	cbz	r0, 800c510 <rcutils_format_string_limit+0x64>
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	f000 f8d7 	bl	800c6ac <rcutils_vsnprintf>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	db02      	blt.n	800c508 <rcutils_format_string_limit+0x5c>
 800c502:	2300      	movs	r3, #0
 800c504:	5563      	strb	r3, [r4, r5]
 800c506:	e004      	b.n	800c512 <rcutils_format_string_limit+0x66>
 800c508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c50c:	4620      	mov	r0, r4
 800c50e:	4798      	blx	r3
 800c510:	2400      	movs	r4, #0
 800c512:	4620      	mov	r0, r4
 800c514:	b003      	add	sp, #12
 800c516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c51a:	b004      	add	sp, #16
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop

0800c520 <rcutils_repl_str>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	ed2d 8b02 	vpush	{d8}
 800c528:	b087      	sub	sp, #28
 800c52a:	4680      	mov	r8, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	f8cd 8000 	str.w	r8, [sp]
 800c532:	ee08 2a10 	vmov	s16, r2
 800c536:	468a      	mov	sl, r1
 800c538:	4699      	mov	r9, r3
 800c53a:	f7f3 fe73 	bl	8000224 <strlen>
 800c53e:	2600      	movs	r6, #0
 800c540:	4647      	mov	r7, r8
 800c542:	9001      	str	r0, [sp, #4]
 800c544:	46b3      	mov	fp, r6
 800c546:	2510      	movs	r5, #16
 800c548:	46b0      	mov	r8, r6
 800c54a:	e01d      	b.n	800c588 <rcutils_repl_str+0x68>
 800c54c:	f10b 0b01 	add.w	fp, fp, #1
 800c550:	455e      	cmp	r6, fp
 800c552:	d211      	bcs.n	800c578 <rcutils_repl_str+0x58>
 800c554:	442e      	add	r6, r5
 800c556:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c55a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c55e:	00b1      	lsls	r1, r6, #2
 800c560:	4798      	blx	r3
 800c562:	2800      	cmp	r0, #0
 800c564:	f000 8084 	beq.w	800c670 <rcutils_repl_str+0x150>
 800c568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c56c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800c570:	bf28      	it	cs
 800c572:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800c576:	4680      	mov	r8, r0
 800c578:	9a00      	ldr	r2, [sp, #0]
 800c57a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800c57e:	1aa2      	subs	r2, r4, r2
 800c580:	f843 2c04 	str.w	r2, [r3, #-4]
 800c584:	9b01      	ldr	r3, [sp, #4]
 800c586:	18e7      	adds	r7, r4, r3
 800c588:	4651      	mov	r1, sl
 800c58a:	4638      	mov	r0, r7
 800c58c:	f009 fa2f 	bl	80159ee <strstr>
 800c590:	4604      	mov	r4, r0
 800c592:	4640      	mov	r0, r8
 800c594:	2c00      	cmp	r4, #0
 800c596:	d1d9      	bne.n	800c54c <rcutils_repl_str+0x2c>
 800c598:	46b8      	mov	r8, r7
 800c59a:	4607      	mov	r7, r0
 800c59c:	4640      	mov	r0, r8
 800c59e:	f7f3 fe41 	bl	8000224 <strlen>
 800c5a2:	9b00      	ldr	r3, [sp, #0]
 800c5a4:	eba8 0303 	sub.w	r3, r8, r3
 800c5a8:	181d      	adds	r5, r3, r0
 800c5aa:	9504      	str	r5, [sp, #16]
 800c5ac:	f1bb 0f00 	cmp.w	fp, #0
 800c5b0:	d03d      	beq.n	800c62e <rcutils_repl_str+0x10e>
 800c5b2:	ee18 0a10 	vmov	r0, s16
 800c5b6:	f7f3 fe35 	bl	8000224 <strlen>
 800c5ba:	9b01      	ldr	r3, [sp, #4]
 800c5bc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c5c0:	1ac3      	subs	r3, r0, r3
 800c5c2:	fb0b 5303 	mla	r3, fp, r3, r5
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	1c58      	adds	r0, r3, #1
 800c5cc:	f8d9 3000 	ldr.w	r3, [r9]
 800c5d0:	4798      	blx	r3
 800c5d2:	9003      	str	r0, [sp, #12]
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d04c      	beq.n	800c672 <rcutils_repl_str+0x152>
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	9900      	ldr	r1, [sp, #0]
 800c5dc:	f008 ff72 	bl	80154c4 <memcpy>
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	683d      	ldr	r5, [r7, #0]
 800c5e4:	ee18 8a10 	vmov	r8, s16
 800c5e8:	441d      	add	r5, r3
 800c5ea:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800c5ee:	9302      	str	r3, [sp, #8]
 800c5f0:	46ba      	mov	sl, r7
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	4641      	mov	r1, r8
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f008 ff64 	bl	80154c4 <memcpy>
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	f85a 2b04 	ldr.w	r2, [sl], #4
 800c602:	441a      	add	r2, r3
 800c604:	9b00      	ldr	r3, [sp, #0]
 800c606:	1899      	adds	r1, r3, r2
 800c608:	9b02      	ldr	r3, [sp, #8]
 800c60a:	4435      	add	r5, r6
 800c60c:	429c      	cmp	r4, r3
 800c60e:	4628      	mov	r0, r5
 800c610:	d025      	beq.n	800c65e <rcutils_repl_str+0x13e>
 800c612:	f8da 3000 	ldr.w	r3, [sl]
 800c616:	3401      	adds	r4, #1
 800c618:	1a9a      	subs	r2, r3, r2
 800c61a:	4415      	add	r5, r2
 800c61c:	f008 ff52 	bl	80154c4 <memcpy>
 800c620:	455c      	cmp	r4, fp
 800c622:	d3e6      	bcc.n	800c5f2 <rcutils_repl_str+0xd2>
 800c624:	9a03      	ldr	r2, [sp, #12]
 800c626:	9905      	ldr	r1, [sp, #20]
 800c628:	2300      	movs	r3, #0
 800c62a:	5453      	strb	r3, [r2, r1]
 800c62c:	e00b      	b.n	800c646 <rcutils_repl_str+0x126>
 800c62e:	4628      	mov	r0, r5
 800c630:	f8d9 3000 	ldr.w	r3, [r9]
 800c634:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c638:	3001      	adds	r0, #1
 800c63a:	4798      	blx	r3
 800c63c:	9003      	str	r0, [sp, #12]
 800c63e:	b110      	cbz	r0, 800c646 <rcutils_repl_str+0x126>
 800c640:	9900      	ldr	r1, [sp, #0]
 800c642:	f009 f9b8 	bl	80159b6 <strcpy>
 800c646:	4638      	mov	r0, r7
 800c648:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c64c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800c650:	4798      	blx	r3
 800c652:	9803      	ldr	r0, [sp, #12]
 800c654:	b007      	add	sp, #28
 800c656:	ecbd 8b02 	vpop	{d8}
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65e:	9b04      	ldr	r3, [sp, #16]
 800c660:	3401      	adds	r4, #1
 800c662:	1a9a      	subs	r2, r3, r2
 800c664:	4415      	add	r5, r2
 800c666:	f008 ff2d 	bl	80154c4 <memcpy>
 800c66a:	455c      	cmp	r4, fp
 800c66c:	d3c1      	bcc.n	800c5f2 <rcutils_repl_str+0xd2>
 800c66e:	e7d9      	b.n	800c624 <rcutils_repl_str+0x104>
 800c670:	4647      	mov	r7, r8
 800c672:	2300      	movs	r3, #0
 800c674:	9303      	str	r3, [sp, #12]
 800c676:	e7e6      	b.n	800c646 <rcutils_repl_str+0x126>

0800c678 <rcutils_snprintf>:
 800c678:	b40c      	push	{r2, r3}
 800c67a:	b530      	push	{r4, r5, lr}
 800c67c:	b083      	sub	sp, #12
 800c67e:	ab06      	add	r3, sp, #24
 800c680:	f853 2b04 	ldr.w	r2, [r3], #4
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	b152      	cbz	r2, 800c69e <rcutils_snprintf+0x26>
 800c688:	b138      	cbz	r0, 800c69a <rcutils_snprintf+0x22>
 800c68a:	b141      	cbz	r1, 800c69e <rcutils_snprintf+0x26>
 800c68c:	f009 fa6e 	bl	8015b6c <vsniprintf>
 800c690:	b003      	add	sp, #12
 800c692:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c696:	b002      	add	sp, #8
 800c698:	4770      	bx	lr
 800c69a:	2900      	cmp	r1, #0
 800c69c:	d0f6      	beq.n	800c68c <rcutils_snprintf+0x14>
 800c69e:	f008 fe8f 	bl	80153c0 <__errno>
 800c6a2:	2316      	movs	r3, #22
 800c6a4:	6003      	str	r3, [r0, #0]
 800c6a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6aa:	e7f1      	b.n	800c690 <rcutils_snprintf+0x18>

0800c6ac <rcutils_vsnprintf>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	b13a      	cbz	r2, 800c6c0 <rcutils_vsnprintf+0x14>
 800c6b0:	b120      	cbz	r0, 800c6bc <rcutils_vsnprintf+0x10>
 800c6b2:	b129      	cbz	r1, 800c6c0 <rcutils_vsnprintf+0x14>
 800c6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6b8:	f009 ba58 	b.w	8015b6c <vsniprintf>
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	d0f9      	beq.n	800c6b4 <rcutils_vsnprintf+0x8>
 800c6c0:	f008 fe7e 	bl	80153c0 <__errno>
 800c6c4:	2316      	movs	r3, #22
 800c6c6:	6003      	str	r3, [r0, #0]
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	bf00      	nop

0800c6d0 <rcutils_strdup>:
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	b570      	push	{r4, r5, r6, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	ac07      	add	r4, sp, #28
 800c6d8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800c6dc:	4605      	mov	r5, r0
 800c6de:	b1b0      	cbz	r0, 800c70e <rcutils_strdup+0x3e>
 800c6e0:	f7f3 fda0 	bl	8000224 <strlen>
 800c6e4:	1c42      	adds	r2, r0, #1
 800c6e6:	9b07      	ldr	r3, [sp, #28]
 800c6e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	4798      	blx	r3
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	b128      	cbz	r0, 800c702 <rcutils_strdup+0x32>
 800c6f6:	9a01      	ldr	r2, [sp, #4]
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f008 fee3 	bl	80154c4 <memcpy>
 800c6fe:	2300      	movs	r3, #0
 800c700:	55a3      	strb	r3, [r4, r6]
 800c702:	4620      	mov	r0, r4
 800c704:	b002      	add	sp, #8
 800c706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c70a:	b004      	add	sp, #16
 800c70c:	4770      	bx	lr
 800c70e:	4604      	mov	r4, r0
 800c710:	e7f7      	b.n	800c702 <rcutils_strdup+0x32>
 800c712:	bf00      	nop

0800c714 <rcutils_strndup>:
 800c714:	b082      	sub	sp, #8
 800c716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c718:	460e      	mov	r6, r1
 800c71a:	a906      	add	r1, sp, #24
 800c71c:	e881 000c 	stmia.w	r1, {r2, r3}
 800c720:	4605      	mov	r5, r0
 800c722:	b180      	cbz	r0, 800c746 <rcutils_strndup+0x32>
 800c724:	1c77      	adds	r7, r6, #1
 800c726:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c728:	4638      	mov	r0, r7
 800c72a:	4790      	blx	r2
 800c72c:	4604      	mov	r4, r0
 800c72e:	b128      	cbz	r0, 800c73c <rcutils_strndup+0x28>
 800c730:	463a      	mov	r2, r7
 800c732:	4629      	mov	r1, r5
 800c734:	f008 fec6 	bl	80154c4 <memcpy>
 800c738:	2300      	movs	r3, #0
 800c73a:	55a3      	strb	r3, [r4, r6]
 800c73c:	4620      	mov	r0, r4
 800c73e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c742:	b002      	add	sp, #8
 800c744:	4770      	bx	lr
 800c746:	4604      	mov	r4, r0
 800c748:	e7f8      	b.n	800c73c <rcutils_strndup+0x28>
 800c74a:	bf00      	nop

0800c74c <rcutils_get_zero_initialized_string_map>:
 800c74c:	4b01      	ldr	r3, [pc, #4]	; (800c754 <rcutils_get_zero_initialized_string_map+0x8>)
 800c74e:	2000      	movs	r0, #0
 800c750:	6018      	str	r0, [r3, #0]
 800c752:	4770      	bx	lr
 800c754:	2000c0cc 	.word	0x2000c0cc

0800c758 <rcutils_string_map_reserve>:
 800c758:	2800      	cmp	r0, #0
 800c75a:	d061      	beq.n	800c820 <rcutils_string_map_reserve+0xc8>
 800c75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c760:	6805      	ldr	r5, [r0, #0]
 800c762:	b083      	sub	sp, #12
 800c764:	460c      	mov	r4, r1
 800c766:	4606      	mov	r6, r0
 800c768:	b12d      	cbz	r5, 800c776 <rcutils_string_map_reserve+0x1e>
 800c76a:	68eb      	ldr	r3, [r5, #12]
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d906      	bls.n	800c77e <rcutils_string_map_reserve+0x26>
 800c770:	461c      	mov	r4, r3
 800c772:	2d00      	cmp	r5, #0
 800c774:	d1f9      	bne.n	800c76a <rcutils_string_map_reserve+0x12>
 800c776:	201f      	movs	r0, #31
 800c778:	b003      	add	sp, #12
 800c77a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c77e:	68ab      	ldr	r3, [r5, #8]
 800c780:	42a3      	cmp	r3, r4
 800c782:	d049      	beq.n	800c818 <rcutils_string_map_reserve+0xc0>
 800c784:	6a2f      	ldr	r7, [r5, #32]
 800c786:	2c00      	cmp	r4, #0
 800c788:	d035      	beq.n	800c7f6 <rcutils_string_map_reserve+0x9e>
 800c78a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c78e:	d245      	bcs.n	800c81c <rcutils_string_map_reserve+0xc4>
 800c790:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800c794:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800c798:	6828      	ldr	r0, [r5, #0]
 800c79a:	4641      	mov	r1, r8
 800c79c:	463a      	mov	r2, r7
 800c79e:	47c8      	blx	r9
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d03b      	beq.n	800c81c <rcutils_string_map_reserve+0xc4>
 800c7a4:	6833      	ldr	r3, [r6, #0]
 800c7a6:	463a      	mov	r2, r7
 800c7a8:	6018      	str	r0, [r3, #0]
 800c7aa:	4641      	mov	r1, r8
 800c7ac:	6858      	ldr	r0, [r3, #4]
 800c7ae:	47c8      	blx	r9
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d033      	beq.n	800c81c <rcutils_string_map_reserve+0xc4>
 800c7b4:	6835      	ldr	r5, [r6, #0]
 800c7b6:	68ab      	ldr	r3, [r5, #8]
 800c7b8:	6068      	str	r0, [r5, #4]
 800c7ba:	42a3      	cmp	r3, r4
 800c7bc:	d227      	bcs.n	800c80e <rcutils_string_map_reserve+0xb6>
 800c7be:	682a      	ldr	r2, [r5, #0]
 800c7c0:	eb00 0108 	add.w	r1, r0, r8
 800c7c4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800c7c8:	428f      	cmp	r7, r1
 800c7ca:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800c7ce:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800c7d2:	d203      	bcs.n	800c7dc <rcutils_string_map_reserve+0x84>
 800c7d4:	eb02 0108 	add.w	r1, r2, r8
 800c7d8:	428e      	cmp	r6, r1
 800c7da:	d323      	bcc.n	800c824 <rcutils_string_map_reserve+0xcc>
 800c7dc:	1ae3      	subs	r3, r4, r3
 800c7de:	009a      	lsls	r2, r3, #2
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	9201      	str	r2, [sp, #4]
 800c7e6:	f008 fe95 	bl	8015514 <memset>
 800c7ea:	9a01      	ldr	r2, [sp, #4]
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	f008 fe90 	bl	8015514 <memset>
 800c7f4:	e00b      	b.n	800c80e <rcutils_string_map_reserve+0xb6>
 800c7f6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800c7fa:	6828      	ldr	r0, [r5, #0]
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	47c0      	blx	r8
 800c800:	6833      	ldr	r3, [r6, #0]
 800c802:	4639      	mov	r1, r7
 800c804:	6858      	ldr	r0, [r3, #4]
 800c806:	601c      	str	r4, [r3, #0]
 800c808:	47c0      	blx	r8
 800c80a:	6835      	ldr	r5, [r6, #0]
 800c80c:	606c      	str	r4, [r5, #4]
 800c80e:	2000      	movs	r0, #0
 800c810:	60ac      	str	r4, [r5, #8]
 800c812:	b003      	add	sp, #12
 800c814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c818:	2000      	movs	r0, #0
 800c81a:	e7ad      	b.n	800c778 <rcutils_string_map_reserve+0x20>
 800c81c:	200a      	movs	r0, #10
 800c81e:	e7ab      	b.n	800c778 <rcutils_string_map_reserve+0x20>
 800c820:	200b      	movs	r0, #11
 800c822:	4770      	bx	lr
 800c824:	1f13      	subs	r3, r2, #4
 800c826:	f1ac 0c04 	sub.w	ip, ip, #4
 800c82a:	4498      	add	r8, r3
 800c82c:	4460      	add	r0, ip
 800c82e:	4462      	add	r2, ip
 800c830:	2300      	movs	r3, #0
 800c832:	f842 3f04 	str.w	r3, [r2, #4]!
 800c836:	4542      	cmp	r2, r8
 800c838:	f840 3f04 	str.w	r3, [r0, #4]!
 800c83c:	d1f9      	bne.n	800c832 <rcutils_string_map_reserve+0xda>
 800c83e:	e7e6      	b.n	800c80e <rcutils_string_map_reserve+0xb6>

0800c840 <rcutils_string_map_init>:
 800c840:	b082      	sub	sp, #8
 800c842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c844:	460e      	mov	r6, r1
 800c846:	a906      	add	r1, sp, #24
 800c848:	e881 000c 	stmia.w	r1, {r2, r3}
 800c84c:	b380      	cbz	r0, 800c8b0 <rcutils_string_map_init+0x70>
 800c84e:	6807      	ldr	r7, [r0, #0]
 800c850:	4604      	mov	r4, r0
 800c852:	b12f      	cbz	r7, 800c860 <rcutils_string_map_init+0x20>
 800c854:	251e      	movs	r5, #30
 800c856:	4628      	mov	r0, r5
 800c858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c85c:	b002      	add	sp, #8
 800c85e:	4770      	bx	lr
 800c860:	a806      	add	r0, sp, #24
 800c862:	f7ff fde7 	bl	800c434 <rcutils_allocator_is_valid>
 800c866:	b318      	cbz	r0, 800c8b0 <rcutils_string_map_init+0x70>
 800c868:	9b06      	ldr	r3, [sp, #24]
 800c86a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c86c:	2024      	movs	r0, #36	; 0x24
 800c86e:	4798      	blx	r3
 800c870:	4605      	mov	r5, r0
 800c872:	6020      	str	r0, [r4, #0]
 800c874:	b310      	cbz	r0, 800c8bc <rcutils_string_map_init+0x7c>
 800c876:	f10d 0e18 	add.w	lr, sp, #24
 800c87a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c87e:	f105 0c10 	add.w	ip, r5, #16
 800c882:	e9c5 7700 	strd	r7, r7, [r5]
 800c886:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800c88a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c88e:	f8de 3000 	ldr.w	r3, [lr]
 800c892:	f8cc 3000 	str.w	r3, [ip]
 800c896:	4631      	mov	r1, r6
 800c898:	4620      	mov	r0, r4
 800c89a:	f7ff ff5d 	bl	800c758 <rcutils_string_map_reserve>
 800c89e:	4605      	mov	r5, r0
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d0d8      	beq.n	800c856 <rcutils_string_map_init+0x16>
 800c8a4:	9b07      	ldr	r3, [sp, #28]
 800c8a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	4798      	blx	r3
 800c8ac:	6027      	str	r7, [r4, #0]
 800c8ae:	e7d2      	b.n	800c856 <rcutils_string_map_init+0x16>
 800c8b0:	250b      	movs	r5, #11
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c8b8:	b002      	add	sp, #8
 800c8ba:	4770      	bx	lr
 800c8bc:	250a      	movs	r5, #10
 800c8be:	e7ca      	b.n	800c856 <rcutils_string_map_init+0x16>

0800c8c0 <rcutils_string_map_fini>:
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d039      	beq.n	800c93e <rcutils_string_map_fini+0x7e>
 800c8ca:	6804      	ldr	r4, [r0, #0]
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	2c00      	cmp	r4, #0
 800c8d0:	d031      	beq.n	800c936 <rcutils_string_map_fini+0x76>
 800c8d2:	68a3      	ldr	r3, [r4, #8]
 800c8d4:	b323      	cbz	r3, 800c920 <rcutils_string_map_fini+0x60>
 800c8d6:	2500      	movs	r5, #0
 800c8d8:	6822      	ldr	r2, [r4, #0]
 800c8da:	46a8      	mov	r8, r5
 800c8dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800c8e0:	b1d8      	cbz	r0, 800c91a <rcutils_string_map_fini+0x5a>
 800c8e2:	6a21      	ldr	r1, [r4, #32]
 800c8e4:	6967      	ldr	r7, [r4, #20]
 800c8e6:	9101      	str	r1, [sp, #4]
 800c8e8:	47b8      	blx	r7
 800c8ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8ee:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800c8f2:	9901      	ldr	r1, [sp, #4]
 800c8f4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8f8:	47b8      	blx	r7
 800c8fa:	68e3      	ldr	r3, [r4, #12]
 800c8fc:	6862      	ldr	r2, [r4, #4]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800c904:	60e3      	str	r3, [r4, #12]
 800c906:	6834      	ldr	r4, [r6, #0]
 800c908:	68a3      	ldr	r3, [r4, #8]
 800c90a:	3501      	adds	r5, #1
 800c90c:	429d      	cmp	r5, r3
 800c90e:	d207      	bcs.n	800c920 <rcutils_string_map_fini+0x60>
 800c910:	6822      	ldr	r2, [r4, #0]
 800c912:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800c916:	2800      	cmp	r0, #0
 800c918:	d1e3      	bne.n	800c8e2 <rcutils_string_map_fini+0x22>
 800c91a:	3501      	adds	r5, #1
 800c91c:	429d      	cmp	r5, r3
 800c91e:	d3dd      	bcc.n	800c8dc <rcutils_string_map_fini+0x1c>
 800c920:	2100      	movs	r1, #0
 800c922:	4630      	mov	r0, r6
 800c924:	f7ff ff18 	bl	800c758 <rcutils_string_map_reserve>
 800c928:	4604      	mov	r4, r0
 800c92a:	b920      	cbnz	r0, 800c936 <rcutils_string_map_fini+0x76>
 800c92c:	6830      	ldr	r0, [r6, #0]
 800c92e:	6943      	ldr	r3, [r0, #20]
 800c930:	6a01      	ldr	r1, [r0, #32]
 800c932:	4798      	blx	r3
 800c934:	6034      	str	r4, [r6, #0]
 800c936:	4620      	mov	r0, r4
 800c938:	b002      	add	sp, #8
 800c93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93e:	240b      	movs	r4, #11
 800c940:	4620      	mov	r0, r4
 800c942:	b002      	add	sp, #8
 800c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c948 <rcutils_string_map_getn>:
 800c948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	b308      	cbz	r0, 800c994 <rcutils_string_map_getn+0x4c>
 800c950:	6804      	ldr	r4, [r0, #0]
 800c952:	b304      	cbz	r4, 800c996 <rcutils_string_map_getn+0x4e>
 800c954:	460d      	mov	r5, r1
 800c956:	b1e9      	cbz	r1, 800c994 <rcutils_string_map_getn+0x4c>
 800c958:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800c95c:	6827      	ldr	r7, [r4, #0]
 800c95e:	f1b9 0f00 	cmp.w	r9, #0
 800c962:	d017      	beq.n	800c994 <rcutils_string_map_getn+0x4c>
 800c964:	4690      	mov	r8, r2
 800c966:	3f04      	subs	r7, #4
 800c968:	2600      	movs	r6, #0
 800c96a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800c96e:	9101      	str	r1, [sp, #4]
 800c970:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800c974:	4608      	mov	r0, r1
 800c976:	3601      	adds	r6, #1
 800c978:	b151      	cbz	r1, 800c990 <rcutils_string_map_getn+0x48>
 800c97a:	f7f3 fc53 	bl	8000224 <strlen>
 800c97e:	4540      	cmp	r0, r8
 800c980:	4602      	mov	r2, r0
 800c982:	9901      	ldr	r1, [sp, #4]
 800c984:	bf38      	it	cc
 800c986:	4642      	movcc	r2, r8
 800c988:	4628      	mov	r0, r5
 800c98a:	f009 f81c 	bl	80159c6 <strncmp>
 800c98e:	b130      	cbz	r0, 800c99e <rcutils_string_map_getn+0x56>
 800c990:	45b1      	cmp	r9, r6
 800c992:	d1ea      	bne.n	800c96a <rcutils_string_map_getn+0x22>
 800c994:	2400      	movs	r4, #0
 800c996:	4620      	mov	r0, r4
 800c998:	b002      	add	sp, #8
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	6863      	ldr	r3, [r4, #4]
 800c9a0:	f853 400a 	ldr.w	r4, [r3, sl]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	b002      	add	sp, #8
 800c9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c9ac <rcutils_system_time_now>:
 800c9ac:	b310      	cbz	r0, 800c9f4 <rcutils_system_time_now+0x48>
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	4669      	mov	r1, sp
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	f7f5 fcf6 	bl	80023a8 <clock_gettime>
 800c9bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f171 0300 	sbcs.w	r3, r1, #0
 800c9c6:	db12      	blt.n	800c9ee <rcutils_system_time_now+0x42>
 800c9c8:	9d02      	ldr	r5, [sp, #8]
 800c9ca:	2d00      	cmp	r5, #0
 800c9cc:	db0c      	blt.n	800c9e8 <rcutils_system_time_now+0x3c>
 800c9ce:	4e0a      	ldr	r6, [pc, #40]	; (800c9f8 <rcutils_system_time_now+0x4c>)
 800c9d0:	fba0 2306 	umull	r2, r3, r0, r6
 800c9d4:	1952      	adds	r2, r2, r5
 800c9d6:	fb06 3301 	mla	r3, r6, r1, r3
 800c9da:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e9c4 2300 	strd	r2, r3, [r4]
 800c9e4:	b004      	add	sp, #16
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	ea50 0301 	orrs.w	r3, r0, r1
 800c9ec:	d1ef      	bne.n	800c9ce <rcutils_system_time_now+0x22>
 800c9ee:	2002      	movs	r0, #2
 800c9f0:	b004      	add	sp, #16
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	200b      	movs	r0, #11
 800c9f6:	4770      	bx	lr
 800c9f8:	3b9aca00 	.word	0x3b9aca00

0800c9fc <rcutils_steady_time_now>:
 800c9fc:	b310      	cbz	r0, 800ca44 <rcutils_steady_time_now+0x48>
 800c9fe:	b570      	push	{r4, r5, r6, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	4669      	mov	r1, sp
 800ca04:	4604      	mov	r4, r0
 800ca06:	2000      	movs	r0, #0
 800ca08:	f7f5 fcce 	bl	80023a8 <clock_gettime>
 800ca0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca10:	2800      	cmp	r0, #0
 800ca12:	f171 0300 	sbcs.w	r3, r1, #0
 800ca16:	db12      	blt.n	800ca3e <rcutils_steady_time_now+0x42>
 800ca18:	9d02      	ldr	r5, [sp, #8]
 800ca1a:	2d00      	cmp	r5, #0
 800ca1c:	db0c      	blt.n	800ca38 <rcutils_steady_time_now+0x3c>
 800ca1e:	4e0a      	ldr	r6, [pc, #40]	; (800ca48 <rcutils_steady_time_now+0x4c>)
 800ca20:	fba0 2306 	umull	r2, r3, r0, r6
 800ca24:	1952      	adds	r2, r2, r5
 800ca26:	fb06 3301 	mla	r3, r6, r1, r3
 800ca2a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ca2e:	2000      	movs	r0, #0
 800ca30:	e9c4 2300 	strd	r2, r3, [r4]
 800ca34:	b004      	add	sp, #16
 800ca36:	bd70      	pop	{r4, r5, r6, pc}
 800ca38:	ea50 0301 	orrs.w	r3, r0, r1
 800ca3c:	d1ef      	bne.n	800ca1e <rcutils_steady_time_now+0x22>
 800ca3e:	2002      	movs	r0, #2
 800ca40:	b004      	add	sp, #16
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
 800ca44:	200b      	movs	r0, #11
 800ca46:	4770      	bx	lr
 800ca48:	3b9aca00 	.word	0x3b9aca00

0800ca4c <rmw_get_default_publisher_options>:
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	4770      	bx	lr

0800ca50 <rmw_validate_full_topic_name>:
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d062      	beq.n	800cb1a <rmw_validate_full_topic_name+0xca>
 800ca54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca58:	460d      	mov	r5, r1
 800ca5a:	2900      	cmp	r1, #0
 800ca5c:	d05f      	beq.n	800cb1e <rmw_validate_full_topic_name+0xce>
 800ca5e:	4616      	mov	r6, r2
 800ca60:	4604      	mov	r4, r0
 800ca62:	f7f3 fbdf 	bl	8000224 <strlen>
 800ca66:	b148      	cbz	r0, 800ca7c <rmw_validate_full_topic_name+0x2c>
 800ca68:	7823      	ldrb	r3, [r4, #0]
 800ca6a:	2b2f      	cmp	r3, #47	; 0x2f
 800ca6c:	d00d      	beq.n	800ca8a <rmw_validate_full_topic_name+0x3a>
 800ca6e:	2302      	movs	r3, #2
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	b13e      	cbz	r6, 800ca84 <rmw_validate_full_topic_name+0x34>
 800ca74:	2000      	movs	r0, #0
 800ca76:	6030      	str	r0, [r6, #0]
 800ca78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	2e00      	cmp	r6, #0
 800ca82:	d1f7      	bne.n	800ca74 <rmw_validate_full_topic_name+0x24>
 800ca84:	2000      	movs	r0, #0
 800ca86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8a:	1e47      	subs	r7, r0, #1
 800ca8c:	5de3      	ldrb	r3, [r4, r7]
 800ca8e:	2b2f      	cmp	r3, #47	; 0x2f
 800ca90:	d047      	beq.n	800cb22 <rmw_validate_full_topic_name+0xd2>
 800ca92:	1e63      	subs	r3, r4, #1
 800ca94:	eb03 0900 	add.w	r9, r3, r0
 800ca98:	f1c4 0e01 	rsb	lr, r4, #1
 800ca9c:	eb0e 0803 	add.w	r8, lr, r3
 800caa0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800caa4:	f021 0220 	bic.w	r2, r1, #32
 800caa8:	3a41      	subs	r2, #65	; 0x41
 800caaa:	2a19      	cmp	r2, #25
 800caac:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800cab0:	d90c      	bls.n	800cacc <rmw_validate_full_topic_name+0x7c>
 800cab2:	295f      	cmp	r1, #95	; 0x5f
 800cab4:	d00a      	beq.n	800cacc <rmw_validate_full_topic_name+0x7c>
 800cab6:	f1bc 0f0a 	cmp.w	ip, #10
 800caba:	d907      	bls.n	800cacc <rmw_validate_full_topic_name+0x7c>
 800cabc:	2304      	movs	r3, #4
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	2e00      	cmp	r6, #0
 800cac2:	d0df      	beq.n	800ca84 <rmw_validate_full_topic_name+0x34>
 800cac4:	f8c6 8000 	str.w	r8, [r6]
 800cac8:	2000      	movs	r0, #0
 800caca:	e7d5      	b.n	800ca78 <rmw_validate_full_topic_name+0x28>
 800cacc:	454b      	cmp	r3, r9
 800cace:	d1e5      	bne.n	800ca9c <rmw_validate_full_topic_name+0x4c>
 800cad0:	f8df e084 	ldr.w	lr, [pc, #132]	; 800cb58 <rmw_validate_full_topic_name+0x108>
 800cad4:	2300      	movs	r3, #0
 800cad6:	f107 0801 	add.w	r8, r7, #1
 800cada:	e005      	b.n	800cae8 <rmw_validate_full_topic_name+0x98>
 800cadc:	4611      	mov	r1, r2
 800cade:	4288      	cmp	r0, r1
 800cae0:	4613      	mov	r3, r2
 800cae2:	f104 0401 	add.w	r4, r4, #1
 800cae6:	d925      	bls.n	800cb34 <rmw_validate_full_topic_name+0xe4>
 800cae8:	429f      	cmp	r7, r3
 800caea:	f103 0201 	add.w	r2, r3, #1
 800caee:	d01e      	beq.n	800cb2e <rmw_validate_full_topic_name+0xde>
 800caf0:	7821      	ldrb	r1, [r4, #0]
 800caf2:	292f      	cmp	r1, #47	; 0x2f
 800caf4:	d1f2      	bne.n	800cadc <rmw_validate_full_topic_name+0x8c>
 800caf6:	f894 c001 	ldrb.w	ip, [r4, #1]
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800cb00:	4611      	mov	r1, r2
 800cb02:	d024      	beq.n	800cb4e <rmw_validate_full_topic_name+0xfe>
 800cb04:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800cb08:	075b      	lsls	r3, r3, #29
 800cb0a:	d5e8      	bpl.n	800cade <rmw_validate_full_topic_name+0x8e>
 800cb0c:	2306      	movs	r3, #6
 800cb0e:	602b      	str	r3, [r5, #0]
 800cb10:	2e00      	cmp	r6, #0
 800cb12:	d0b7      	beq.n	800ca84 <rmw_validate_full_topic_name+0x34>
 800cb14:	6032      	str	r2, [r6, #0]
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7ae      	b.n	800ca78 <rmw_validate_full_topic_name+0x28>
 800cb1a:	200b      	movs	r0, #11
 800cb1c:	4770      	bx	lr
 800cb1e:	200b      	movs	r0, #11
 800cb20:	e7aa      	b.n	800ca78 <rmw_validate_full_topic_name+0x28>
 800cb22:	2303      	movs	r3, #3
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	d0ac      	beq.n	800ca84 <rmw_validate_full_topic_name+0x34>
 800cb2a:	6037      	str	r7, [r6, #0]
 800cb2c:	e7aa      	b.n	800ca84 <rmw_validate_full_topic_name+0x34>
 800cb2e:	4641      	mov	r1, r8
 800cb30:	1c7a      	adds	r2, r7, #1
 800cb32:	e7d4      	b.n	800cade <rmw_validate_full_topic_name+0x8e>
 800cb34:	28f7      	cmp	r0, #247	; 0xf7
 800cb36:	d802      	bhi.n	800cb3e <rmw_validate_full_topic_name+0xee>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	6028      	str	r0, [r5, #0]
 800cb3c:	e79c      	b.n	800ca78 <rmw_validate_full_topic_name+0x28>
 800cb3e:	2307      	movs	r3, #7
 800cb40:	602b      	str	r3, [r5, #0]
 800cb42:	2e00      	cmp	r6, #0
 800cb44:	d09e      	beq.n	800ca84 <rmw_validate_full_topic_name+0x34>
 800cb46:	23f6      	movs	r3, #246	; 0xf6
 800cb48:	6033      	str	r3, [r6, #0]
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e794      	b.n	800ca78 <rmw_validate_full_topic_name+0x28>
 800cb4e:	2305      	movs	r3, #5
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	2e00      	cmp	r6, #0
 800cb54:	d1de      	bne.n	800cb14 <rmw_validate_full_topic_name+0xc4>
 800cb56:	e795      	b.n	800ca84 <rmw_validate_full_topic_name+0x34>
 800cb58:	080178ed 	.word	0x080178ed

0800cb5c <rmw_validate_namespace_with_size>:
 800cb5c:	b340      	cbz	r0, 800cbb0 <rmw_validate_namespace_with_size+0x54>
 800cb5e:	b5d0      	push	{r4, r6, r7, lr}
 800cb60:	4614      	mov	r4, r2
 800cb62:	b0c2      	sub	sp, #264	; 0x108
 800cb64:	b332      	cbz	r2, 800cbb4 <rmw_validate_namespace_with_size+0x58>
 800cb66:	2901      	cmp	r1, #1
 800cb68:	460f      	mov	r7, r1
 800cb6a:	461e      	mov	r6, r3
 800cb6c:	d102      	bne.n	800cb74 <rmw_validate_namespace_with_size+0x18>
 800cb6e:	7803      	ldrb	r3, [r0, #0]
 800cb70:	2b2f      	cmp	r3, #47	; 0x2f
 800cb72:	d019      	beq.n	800cba8 <rmw_validate_namespace_with_size+0x4c>
 800cb74:	aa01      	add	r2, sp, #4
 800cb76:	4669      	mov	r1, sp
 800cb78:	f7ff ff6a 	bl	800ca50 <rmw_validate_full_topic_name>
 800cb7c:	b990      	cbnz	r0, 800cba4 <rmw_validate_namespace_with_size+0x48>
 800cb7e:	9b00      	ldr	r3, [sp, #0]
 800cb80:	b14b      	cbz	r3, 800cb96 <rmw_validate_namespace_with_size+0x3a>
 800cb82:	2b07      	cmp	r3, #7
 800cb84:	d007      	beq.n	800cb96 <rmw_validate_namespace_with_size+0x3a>
 800cb86:	1e5a      	subs	r2, r3, #1
 800cb88:	2a05      	cmp	r2, #5
 800cb8a:	d82b      	bhi.n	800cbe4 <rmw_validate_namespace_with_size+0x88>
 800cb8c:	e8df f002 	tbb	[pc, r2]
 800cb90:	24211e1b 	.word	0x24211e1b
 800cb94:	1427      	.short	0x1427
 800cb96:	2ff5      	cmp	r7, #245	; 0xf5
 800cb98:	d906      	bls.n	800cba8 <rmw_validate_namespace_with_size+0x4c>
 800cb9a:	2307      	movs	r3, #7
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	b10e      	cbz	r6, 800cba4 <rmw_validate_namespace_with_size+0x48>
 800cba0:	23f4      	movs	r3, #244	; 0xf4
 800cba2:	6033      	str	r3, [r6, #0]
 800cba4:	b042      	add	sp, #264	; 0x108
 800cba6:	bdd0      	pop	{r4, r6, r7, pc}
 800cba8:	2000      	movs	r0, #0
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	b042      	add	sp, #264	; 0x108
 800cbae:	bdd0      	pop	{r4, r6, r7, pc}
 800cbb0:	200b      	movs	r0, #11
 800cbb2:	4770      	bx	lr
 800cbb4:	200b      	movs	r0, #11
 800cbb6:	e7f5      	b.n	800cba4 <rmw_validate_namespace_with_size+0x48>
 800cbb8:	2306      	movs	r3, #6
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	2e00      	cmp	r6, #0
 800cbbe:	d0f1      	beq.n	800cba4 <rmw_validate_namespace_with_size+0x48>
 800cbc0:	9b01      	ldr	r3, [sp, #4]
 800cbc2:	6033      	str	r3, [r6, #0]
 800cbc4:	e7ee      	b.n	800cba4 <rmw_validate_namespace_with_size+0x48>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	e7f7      	b.n	800cbbc <rmw_validate_namespace_with_size+0x60>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	6023      	str	r3, [r4, #0]
 800cbd0:	e7f4      	b.n	800cbbc <rmw_validate_namespace_with_size+0x60>
 800cbd2:	2303      	movs	r3, #3
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	e7f1      	b.n	800cbbc <rmw_validate_namespace_with_size+0x60>
 800cbd8:	2304      	movs	r3, #4
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	e7ee      	b.n	800cbbc <rmw_validate_namespace_with_size+0x60>
 800cbde:	2305      	movs	r3, #5
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	e7eb      	b.n	800cbbc <rmw_validate_namespace_with_size+0x60>
 800cbe4:	4a03      	ldr	r2, [pc, #12]	; (800cbf4 <rmw_validate_namespace_with_size+0x98>)
 800cbe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbea:	a802      	add	r0, sp, #8
 800cbec:	f7ff fd44 	bl	800c678 <rcutils_snprintf>
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	e7d7      	b.n	800cba4 <rmw_validate_namespace_with_size+0x48>
 800cbf4:	080171f0 	.word	0x080171f0

0800cbf8 <rmw_validate_namespace>:
 800cbf8:	b168      	cbz	r0, 800cc16 <rmw_validate_namespace+0x1e>
 800cbfa:	b570      	push	{r4, r5, r6, lr}
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	4616      	mov	r6, r2
 800cc00:	4604      	mov	r4, r0
 800cc02:	f7f3 fb0f 	bl	8000224 <strlen>
 800cc06:	4633      	mov	r3, r6
 800cc08:	4601      	mov	r1, r0
 800cc0a:	462a      	mov	r2, r5
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc12:	f7ff bfa3 	b.w	800cb5c <rmw_validate_namespace_with_size>
 800cc16:	200b      	movs	r0, #11
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop

0800cc1c <rmw_namespace_validation_result_string>:
 800cc1c:	2807      	cmp	r0, #7
 800cc1e:	bf9a      	itte	ls
 800cc20:	4b02      	ldrls	r3, [pc, #8]	; (800cc2c <rmw_namespace_validation_result_string+0x10>)
 800cc22:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800cc26:	4802      	ldrhi	r0, [pc, #8]	; (800cc30 <rmw_namespace_validation_result_string+0x14>)
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	080173e8 	.word	0x080173e8
 800cc30:	08017240 	.word	0x08017240

0800cc34 <rmw_validate_node_name>:
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d03b      	beq.n	800ccb0 <rmw_validate_node_name+0x7c>
 800cc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	2900      	cmp	r1, #0
 800cc40:	d038      	beq.n	800ccb4 <rmw_validate_node_name+0x80>
 800cc42:	4615      	mov	r5, r2
 800cc44:	4604      	mov	r4, r0
 800cc46:	f7f3 faed 	bl	8000224 <strlen>
 800cc4a:	b1e0      	cbz	r0, 800cc86 <rmw_validate_node_name+0x52>
 800cc4c:	1e63      	subs	r3, r4, #1
 800cc4e:	eb03 0e00 	add.w	lr, r3, r0
 800cc52:	f1c4 0c01 	rsb	ip, r4, #1
 800cc56:	eb0c 0803 	add.w	r8, ip, r3
 800cc5a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800cc5e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800cc62:	f026 0220 	bic.w	r2, r6, #32
 800cc66:	2909      	cmp	r1, #9
 800cc68:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 800cc6c:	d913      	bls.n	800cc96 <rmw_validate_node_name+0x62>
 800cc6e:	2a19      	cmp	r2, #25
 800cc70:	d911      	bls.n	800cc96 <rmw_validate_node_name+0x62>
 800cc72:	2e5f      	cmp	r6, #95	; 0x5f
 800cc74:	d00f      	beq.n	800cc96 <rmw_validate_node_name+0x62>
 800cc76:	2302      	movs	r3, #2
 800cc78:	603b      	str	r3, [r7, #0]
 800cc7a:	b10d      	cbz	r5, 800cc80 <rmw_validate_node_name+0x4c>
 800cc7c:	f8c5 8000 	str.w	r8, [r5]
 800cc80:	2000      	movs	r0, #0
 800cc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc86:	2301      	movs	r3, #1
 800cc88:	603b      	str	r3, [r7, #0]
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	d0f8      	beq.n	800cc80 <rmw_validate_node_name+0x4c>
 800cc8e:	2000      	movs	r0, #0
 800cc90:	6028      	str	r0, [r5, #0]
 800cc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc96:	4573      	cmp	r3, lr
 800cc98:	d1dd      	bne.n	800cc56 <rmw_validate_node_name+0x22>
 800cc9a:	7822      	ldrb	r2, [r4, #0]
 800cc9c:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <rmw_validate_node_name+0xa0>)
 800cc9e:	5cd3      	ldrb	r3, [r2, r3]
 800cca0:	f013 0304 	ands.w	r3, r3, #4
 800cca4:	d110      	bne.n	800ccc8 <rmw_validate_node_name+0x94>
 800cca6:	28ff      	cmp	r0, #255	; 0xff
 800cca8:	d806      	bhi.n	800ccb8 <rmw_validate_node_name+0x84>
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	4618      	mov	r0, r3
 800ccae:	e7e8      	b.n	800cc82 <rmw_validate_node_name+0x4e>
 800ccb0:	200b      	movs	r0, #11
 800ccb2:	4770      	bx	lr
 800ccb4:	200b      	movs	r0, #11
 800ccb6:	e7e4      	b.n	800cc82 <rmw_validate_node_name+0x4e>
 800ccb8:	2204      	movs	r2, #4
 800ccba:	603a      	str	r2, [r7, #0]
 800ccbc:	2d00      	cmp	r5, #0
 800ccbe:	d0df      	beq.n	800cc80 <rmw_validate_node_name+0x4c>
 800ccc0:	22fe      	movs	r2, #254	; 0xfe
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	602a      	str	r2, [r5, #0]
 800ccc6:	e7dc      	b.n	800cc82 <rmw_validate_node_name+0x4e>
 800ccc8:	2303      	movs	r3, #3
 800ccca:	603b      	str	r3, [r7, #0]
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	d1de      	bne.n	800cc8e <rmw_validate_node_name+0x5a>
 800ccd0:	e7d6      	b.n	800cc80 <rmw_validate_node_name+0x4c>
 800ccd2:	bf00      	nop
 800ccd4:	080178ed 	.word	0x080178ed

0800ccd8 <rmw_node_name_validation_result_string>:
 800ccd8:	2804      	cmp	r0, #4
 800ccda:	bf9a      	itte	ls
 800ccdc:	4b02      	ldrls	r3, [pc, #8]	; (800cce8 <rmw_node_name_validation_result_string+0x10>)
 800ccde:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800cce2:	4802      	ldrhi	r0, [pc, #8]	; (800ccec <rmw_node_name_validation_result_string+0x14>)
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	080174f4 	.word	0x080174f4
 800ccec:	08017408 	.word	0x08017408

0800ccf0 <rmw_uros_set_custom_transport>:
 800ccf0:	b470      	push	{r4, r5, r6}
 800ccf2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ccf6:	b162      	cbz	r2, 800cd12 <rmw_uros_set_custom_transport+0x22>
 800ccf8:	b15b      	cbz	r3, 800cd12 <rmw_uros_set_custom_transport+0x22>
 800ccfa:	b155      	cbz	r5, 800cd12 <rmw_uros_set_custom_transport+0x22>
 800ccfc:	b14e      	cbz	r6, 800cd12 <rmw_uros_set_custom_transport+0x22>
 800ccfe:	4c06      	ldr	r4, [pc, #24]	; (800cd18 <rmw_uros_set_custom_transport+0x28>)
 800cd00:	7020      	strb	r0, [r4, #0]
 800cd02:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cd06:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd0a:	6166      	str	r6, [r4, #20]
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	bc70      	pop	{r4, r5, r6}
 800cd10:	4770      	bx	lr
 800cd12:	200b      	movs	r0, #11
 800cd14:	bc70      	pop	{r4, r5, r6}
 800cd16:	4770      	bx	lr
 800cd18:	2000c208 	.word	0x2000c208

0800cd1c <create_node>:
 800cd1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd20:	b083      	sub	sp, #12
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d05f      	beq.n	800cde6 <create_node+0xca>
 800cd26:	4606      	mov	r6, r0
 800cd28:	4835      	ldr	r0, [pc, #212]	; (800ce00 <create_node+0xe4>)
 800cd2a:	460f      	mov	r7, r1
 800cd2c:	4690      	mov	r8, r2
 800cd2e:	461d      	mov	r5, r3
 800cd30:	f005 ffb2 	bl	8012c98 <get_memory>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d056      	beq.n	800cde6 <create_node+0xca>
 800cd38:	68c4      	ldr	r4, [r0, #12]
 800cd3a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	f006 f813 	bl	8012d68 <rmw_get_implementation_identifier>
 800cd42:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800cd46:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800cd4a:	f8c4 9020 	str.w	r9, [r4, #32]
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7f3 fa68 	bl	8000224 <strlen>
 800cd54:	1c42      	adds	r2, r0, #1
 800cd56:	2a3c      	cmp	r2, #60	; 0x3c
 800cd58:	f104 0518 	add.w	r5, r4, #24
 800cd5c:	d840      	bhi.n	800cde0 <create_node+0xc4>
 800cd5e:	4648      	mov	r0, r9
 800cd60:	4631      	mov	r1, r6
 800cd62:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800cd66:	f008 fbad 	bl	80154c4 <memcpy>
 800cd6a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800cd6e:	4638      	mov	r0, r7
 800cd70:	f7f3 fa58 	bl	8000224 <strlen>
 800cd74:	1c42      	adds	r2, r0, #1
 800cd76:	2a3c      	cmp	r2, #60	; 0x3c
 800cd78:	d832      	bhi.n	800cde0 <create_node+0xc4>
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	4648      	mov	r0, r9
 800cd7e:	f008 fba1 	bl	80154c4 <memcpy>
 800cd82:	f241 5394 	movw	r3, #5524	; 0x1594
 800cd86:	6922      	ldr	r2, [r4, #16]
 800cd88:	5ad0      	ldrh	r0, [r2, r3]
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	eb00 0c01 	add.w	ip, r0, r1
 800cd90:	f822 c003 	strh.w	ip, [r2, r3]
 800cd94:	f000 ff9e 	bl	800dcd4 <uxr_object_id>
 800cd98:	6160      	str	r0, [r4, #20]
 800cd9a:	783b      	ldrb	r3, [r7, #0]
 800cd9c:	2b2f      	cmp	r3, #47	; 0x2f
 800cd9e:	d127      	bne.n	800cdf0 <create_node+0xd4>
 800cda0:	787b      	ldrb	r3, [r7, #1]
 800cda2:	bb2b      	cbnz	r3, 800cdf0 <create_node+0xd4>
 800cda4:	4a17      	ldr	r2, [pc, #92]	; (800ce04 <create_node+0xe8>)
 800cda6:	4818      	ldr	r0, [pc, #96]	; (800ce08 <create_node+0xec>)
 800cda8:	4633      	mov	r3, r6
 800cdaa:	213c      	movs	r1, #60	; 0x3c
 800cdac:	f008 fdc2 	bl	8015934 <sniprintf>
 800cdb0:	6920      	ldr	r0, [r4, #16]
 800cdb2:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <create_node+0xec>)
 800cdb4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	2306      	movs	r3, #6
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	6811      	ldr	r1, [r2, #0]
 800cdc0:	6962      	ldr	r2, [r4, #20]
 800cdc2:	fa1f f388 	uxth.w	r3, r8
 800cdc6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cdca:	f000 fe77 	bl	800dabc <uxr_buffer_create_participant_bin>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	6920      	ldr	r0, [r4, #16]
 800cdd2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800cdd6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800cdda:	f000 fd89 	bl	800d8f0 <run_xrce_session>
 800cdde:	b918      	cbnz	r0, 800cde8 <create_node+0xcc>
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 fc1d 	bl	800d620 <rmw_uxrce_fini_node_memory>
 800cde6:	2500      	movs	r5, #0
 800cde8:	4628      	mov	r0, r5
 800cdea:	b003      	add	sp, #12
 800cdec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf0:	4a06      	ldr	r2, [pc, #24]	; (800ce0c <create_node+0xf0>)
 800cdf2:	9600      	str	r6, [sp, #0]
 800cdf4:	463b      	mov	r3, r7
 800cdf6:	213c      	movs	r1, #60	; 0x3c
 800cdf8:	4803      	ldr	r0, [pc, #12]	; (800ce08 <create_node+0xec>)
 800cdfa:	f008 fd9b 	bl	8015934 <sniprintf>
 800cdfe:	e7d7      	b.n	800cdb0 <create_node+0x94>
 800ce00:	2000f1fc 	.word	0x2000f1fc
 800ce04:	08017518 	.word	0x08017518
 800ce08:	2000c0d0 	.word	0x2000c0d0
 800ce0c:	080170a0 	.word	0x080170a0

0800ce10 <rmw_create_node>:
 800ce10:	b199      	cbz	r1, 800ce3a <rmw_create_node+0x2a>
 800ce12:	b430      	push	{r4, r5}
 800ce14:	4615      	mov	r5, r2
 800ce16:	461a      	mov	r2, r3
 800ce18:	780b      	ldrb	r3, [r1, #0]
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	b153      	cbz	r3, 800ce34 <rmw_create_node+0x24>
 800ce1e:	b14d      	cbz	r5, 800ce34 <rmw_create_node+0x24>
 800ce20:	782b      	ldrb	r3, [r5, #0]
 800ce22:	b13b      	cbz	r3, 800ce34 <rmw_create_node+0x24>
 800ce24:	b902      	cbnz	r2, 800ce28 <rmw_create_node+0x18>
 800ce26:	69c2      	ldr	r2, [r0, #28]
 800ce28:	4603      	mov	r3, r0
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	bc30      	pop	{r4, r5}
 800ce30:	f7ff bf74 	b.w	800cd1c <create_node>
 800ce34:	2000      	movs	r0, #0
 800ce36:	bc30      	pop	{r4, r5}
 800ce38:	4770      	bx	lr
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop

0800ce40 <rmw_destroy_node>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	b328      	cbz	r0, 800ce90 <rmw_destroy_node+0x50>
 800ce44:	4607      	mov	r7, r0
 800ce46:	6800      	ldr	r0, [r0, #0]
 800ce48:	b120      	cbz	r0, 800ce54 <rmw_destroy_node+0x14>
 800ce4a:	4b36      	ldr	r3, [pc, #216]	; (800cf24 <rmw_destroy_node+0xe4>)
 800ce4c:	6819      	ldr	r1, [r3, #0]
 800ce4e:	f7f3 f9df 	bl	8000210 <strcmp>
 800ce52:	b9e8      	cbnz	r0, 800ce90 <rmw_destroy_node+0x50>
 800ce54:	687d      	ldr	r5, [r7, #4]
 800ce56:	b1dd      	cbz	r5, 800ce90 <rmw_destroy_node+0x50>
 800ce58:	4b33      	ldr	r3, [pc, #204]	; (800cf28 <rmw_destroy_node+0xe8>)
 800ce5a:	681c      	ldr	r4, [r3, #0]
 800ce5c:	2c00      	cmp	r4, #0
 800ce5e:	d05f      	beq.n	800cf20 <rmw_destroy_node+0xe0>
 800ce60:	2600      	movs	r6, #0
 800ce62:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ce66:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800ce6a:	429d      	cmp	r5, r3
 800ce6c:	d013      	beq.n	800ce96 <rmw_destroy_node+0x56>
 800ce6e:	2c00      	cmp	r4, #0
 800ce70:	d1f7      	bne.n	800ce62 <rmw_destroy_node+0x22>
 800ce72:	4b2e      	ldr	r3, [pc, #184]	; (800cf2c <rmw_destroy_node+0xec>)
 800ce74:	681c      	ldr	r4, [r3, #0]
 800ce76:	b1c4      	cbz	r4, 800ceaa <rmw_destroy_node+0x6a>
 800ce78:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ce7c:	6a0b      	ldr	r3, [r1, #32]
 800ce7e:	429d      	cmp	r5, r3
 800ce80:	d1f9      	bne.n	800ce76 <rmw_destroy_node+0x36>
 800ce82:	317c      	adds	r1, #124	; 0x7c
 800ce84:	4638      	mov	r0, r7
 800ce86:	f000 fa3d 	bl	800d304 <rmw_destroy_subscription>
 800ce8a:	2801      	cmp	r0, #1
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	d1f2      	bne.n	800ce76 <rmw_destroy_node+0x36>
 800ce90:	2601      	movs	r6, #1
 800ce92:	4630      	mov	r0, r6
 800ce94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce96:	3184      	adds	r1, #132	; 0x84
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f000 f99f 	bl	800d1dc <rmw_destroy_publisher>
 800ce9e:	2801      	cmp	r0, #1
 800cea0:	4606      	mov	r6, r0
 800cea2:	d0f5      	beq.n	800ce90 <rmw_destroy_node+0x50>
 800cea4:	2c00      	cmp	r4, #0
 800cea6:	d1dc      	bne.n	800ce62 <rmw_destroy_node+0x22>
 800cea8:	e7e3      	b.n	800ce72 <rmw_destroy_node+0x32>
 800ceaa:	4b21      	ldr	r3, [pc, #132]	; (800cf30 <rmw_destroy_node+0xf0>)
 800ceac:	681c      	ldr	r4, [r3, #0]
 800ceae:	b16c      	cbz	r4, 800cecc <rmw_destroy_node+0x8c>
 800ceb0:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ceb4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800ceb6:	429d      	cmp	r5, r3
 800ceb8:	d1f9      	bne.n	800ceae <rmw_destroy_node+0x6e>
 800ceba:	317c      	adds	r1, #124	; 0x7c
 800cebc:	4638      	mov	r0, r7
 800cebe:	f000 f9dd 	bl	800d27c <rmw_destroy_service>
 800cec2:	2801      	cmp	r0, #1
 800cec4:	4606      	mov	r6, r0
 800cec6:	d0e3      	beq.n	800ce90 <rmw_destroy_node+0x50>
 800cec8:	2c00      	cmp	r4, #0
 800ceca:	d1f1      	bne.n	800ceb0 <rmw_destroy_node+0x70>
 800cecc:	4b19      	ldr	r3, [pc, #100]	; (800cf34 <rmw_destroy_node+0xf4>)
 800cece:	681c      	ldr	r4, [r3, #0]
 800ced0:	b16c      	cbz	r4, 800ceee <rmw_destroy_node+0xae>
 800ced2:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800ced6:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800ced8:	429d      	cmp	r5, r3
 800ceda:	d1f9      	bne.n	800ced0 <rmw_destroy_node+0x90>
 800cedc:	317c      	adds	r1, #124	; 0x7c
 800cede:	4638      	mov	r0, r7
 800cee0:	f005 fefe 	bl	8012ce0 <rmw_destroy_client>
 800cee4:	2801      	cmp	r0, #1
 800cee6:	4606      	mov	r6, r0
 800cee8:	d0d2      	beq.n	800ce90 <rmw_destroy_node+0x50>
 800ceea:	2c00      	cmp	r4, #0
 800ceec:	d1f1      	bne.n	800ced2 <rmw_destroy_node+0x92>
 800ceee:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800cef2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800cef6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cefa:	6819      	ldr	r1, [r3, #0]
 800cefc:	f000 fd92 	bl	800da24 <uxr_buffer_delete_entity>
 800cf00:	4602      	mov	r2, r0
 800cf02:	6928      	ldr	r0, [r5, #16]
 800cf04:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800cf08:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800cf0c:	f000 fcf0 	bl	800d8f0 <run_xrce_session>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	bf08      	it	eq
 800cf14:	2602      	moveq	r6, #2
 800cf16:	4638      	mov	r0, r7
 800cf18:	f000 fb82 	bl	800d620 <rmw_uxrce_fini_node_memory>
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf20:	4626      	mov	r6, r4
 800cf22:	e7a6      	b.n	800ce72 <rmw_destroy_node+0x32>
 800cf24:	080176e8 	.word	0x080176e8
 800cf28:	2000c238 	.word	0x2000c238
 800cf2c:	2000f494 	.word	0x2000f494
 800cf30:	2000f484 	.word	0x2000f484
 800cf34:	2000cab8 	.word	0x2000cab8

0800cf38 <rmw_node_get_graph_guard_condition>:
 800cf38:	6843      	ldr	r3, [r0, #4]
 800cf3a:	6918      	ldr	r0, [r3, #16]
 800cf3c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop

0800cf44 <flush_session>:
 800cf44:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800cf46:	f001 bcb9 	b.w	800e8bc <uxr_run_session_until_confirm_delivery>
 800cf4a:	bf00      	nop

0800cf4c <rmw_publish>:
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d053      	beq.n	800cff8 <rmw_publish+0xac>
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	460d      	mov	r5, r1
 800cf54:	b08e      	sub	sp, #56	; 0x38
 800cf56:	2900      	cmp	r1, #0
 800cf58:	d04b      	beq.n	800cff2 <rmw_publish+0xa6>
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	6800      	ldr	r0, [r0, #0]
 800cf5e:	f000 fd47 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d045      	beq.n	800cff2 <rmw_publish+0xa6>
 800cf66:	6866      	ldr	r6, [r4, #4]
 800cf68:	2e00      	cmp	r6, #0
 800cf6a:	d042      	beq.n	800cff2 <rmw_publish+0xa6>
 800cf6c:	69b4      	ldr	r4, [r6, #24]
 800cf6e:	4628      	mov	r0, r5
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	4798      	blx	r3
 800cf74:	69f3      	ldr	r3, [r6, #28]
 800cf76:	9005      	str	r0, [sp, #20]
 800cf78:	b113      	cbz	r3, 800cf80 <rmw_publish+0x34>
 800cf7a:	a805      	add	r0, sp, #20
 800cf7c:	4798      	blx	r3
 800cf7e:	9805      	ldr	r0, [sp, #20]
 800cf80:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	9000      	str	r0, [sp, #0]
 800cf88:	6972      	ldr	r2, [r6, #20]
 800cf8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800cf8c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800cf90:	ab06      	add	r3, sp, #24
 800cf92:	f002 fa9b 	bl	800f4cc <uxr_prepare_output_stream>
 800cf96:	b1d8      	cbz	r0, 800cfd0 <rmw_publish+0x84>
 800cf98:	68a3      	ldr	r3, [r4, #8]
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	a906      	add	r1, sp, #24
 800cf9e:	4798      	blx	r3
 800cfa0:	6a33      	ldr	r3, [r6, #32]
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	b10b      	cbz	r3, 800cfaa <rmw_publish+0x5e>
 800cfa6:	a806      	add	r0, sp, #24
 800cfa8:	4798      	blx	r3
 800cfaa:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800cfb4:	d022      	beq.n	800cffc <rmw_publish+0xb0>
 800cfb6:	6918      	ldr	r0, [r3, #16]
 800cfb8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800cfba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cfbe:	f001 fc7d 	bl	800e8bc <uxr_run_session_until_confirm_delivery>
 800cfc2:	4020      	ands	r0, r4
 800cfc4:	b2c4      	uxtb	r4, r0
 800cfc6:	f084 0001 	eor.w	r0, r4, #1
 800cfca:	b2c0      	uxtb	r0, r0
 800cfcc:	b00e      	add	sp, #56	; 0x38
 800cfce:	bd70      	pop	{r4, r5, r6, pc}
 800cfd0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800cfd4:	4a0c      	ldr	r2, [pc, #48]	; (800d008 <rmw_publish+0xbc>)
 800cfd6:	6918      	ldr	r0, [r3, #16]
 800cfd8:	9b05      	ldr	r3, [sp, #20]
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800cfe0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cfe4:	6972      	ldr	r2, [r6, #20]
 800cfe6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800cfe8:	ab06      	add	r3, sp, #24
 800cfea:	f002 fa9f 	bl	800f52c <uxr_prepare_output_stream_fragmented>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d1d2      	bne.n	800cf98 <rmw_publish+0x4c>
 800cff2:	2001      	movs	r0, #1
 800cff4:	b00e      	add	sp, #56	; 0x38
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	2001      	movs	r0, #1
 800cffa:	4770      	bx	lr
 800cffc:	6918      	ldr	r0, [r3, #16]
 800cffe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d002:	f001 f89f 	bl	800e144 <uxr_flash_output_streams>
 800d006:	e7de      	b.n	800cfc6 <rmw_publish+0x7a>
 800d008:	0800cf45 	.word	0x0800cf45

0800d00c <rmw_create_publisher>:
 800d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d010:	b087      	sub	sp, #28
 800d012:	2800      	cmp	r0, #0
 800d014:	f000 80c9 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d018:	460e      	mov	r6, r1
 800d01a:	2900      	cmp	r1, #0
 800d01c:	f000 80c5 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d020:	4604      	mov	r4, r0
 800d022:	6800      	ldr	r0, [r0, #0]
 800d024:	4615      	mov	r5, r2
 800d026:	4698      	mov	r8, r3
 800d028:	f000 fce2 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	f000 80bc 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d032:	2d00      	cmp	r5, #0
 800d034:	f000 80b9 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d038:	782b      	ldrb	r3, [r5, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 80b5 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d040:	f1b8 0f00 	cmp.w	r8, #0
 800d044:	f000 80b1 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d048:	485a      	ldr	r0, [pc, #360]	; (800d1b4 <rmw_create_publisher+0x1a8>)
 800d04a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d04e:	f005 fe23 	bl	8012c98 <get_memory>
 800d052:	2800      	cmp	r0, #0
 800d054:	f000 80a9 	beq.w	800d1aa <rmw_create_publisher+0x19e>
 800d058:	68c4      	ldr	r4, [r0, #12]
 800d05a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800d05e:	f005 fe83 	bl	8012d68 <rmw_get_implementation_identifier>
 800d062:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800d066:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800d06a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800d06e:	4628      	mov	r0, r5
 800d070:	f7f3 f8d8 	bl	8000224 <strlen>
 800d074:	3001      	adds	r0, #1
 800d076:	283c      	cmp	r0, #60	; 0x3c
 800d078:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800d07c:	f200 808e 	bhi.w	800d19c <rmw_create_publisher+0x190>
 800d080:	4a4d      	ldr	r2, [pc, #308]	; (800d1b8 <rmw_create_publisher+0x1ac>)
 800d082:	462b      	mov	r3, r5
 800d084:	213c      	movs	r1, #60	; 0x3c
 800d086:	4650      	mov	r0, sl
 800d088:	f008 fc54 	bl	8015934 <sniprintf>
 800d08c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d090:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800d094:	4641      	mov	r1, r8
 800d096:	2250      	movs	r2, #80	; 0x50
 800d098:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d09c:	f008 fa12 	bl	80154c4 <memcpy>
 800d0a0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d0a4:	4945      	ldr	r1, [pc, #276]	; (800d1bc <rmw_create_publisher+0x1b0>)
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0ac:	bf0c      	ite	eq
 800d0ae:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800d0b2:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800d0b6:	67a3      	str	r3, [r4, #120]	; 0x78
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f000 fca4 	bl	800da0c <get_message_typesupport_handle>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d069      	beq.n	800d19c <rmw_create_publisher+0x190>
 800d0c8:	6842      	ldr	r2, [r0, #4]
 800d0ca:	61a2      	str	r2, [r4, #24]
 800d0cc:	2a00      	cmp	r2, #0
 800d0ce:	d065      	beq.n	800d19c <rmw_create_publisher+0x190>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4643      	mov	r3, r8
 800d0d4:	4648      	mov	r0, r9
 800d0d6:	f006 f8b9 	bl	801324c <create_topic>
 800d0da:	6260      	str	r0, [r4, #36]	; 0x24
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d061      	beq.n	800d1a4 <rmw_create_publisher+0x198>
 800d0e0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d0e4:	f241 5398 	movw	r3, #5528	; 0x1598
 800d0e8:	2103      	movs	r1, #3
 800d0ea:	5ad0      	ldrh	r0, [r2, r3]
 800d0ec:	1c45      	adds	r5, r0, #1
 800d0ee:	52d5      	strh	r5, [r2, r3]
 800d0f0:	f000 fdf0 	bl	800dcd4 <uxr_object_id>
 800d0f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0f8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800d0fc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800d100:	6912      	ldr	r2, [r2, #16]
 800d102:	6120      	str	r0, [r4, #16]
 800d104:	f04f 0a06 	mov.w	sl, #6
 800d108:	f8cd a000 	str.w	sl, [sp]
 800d10c:	6819      	ldr	r1, [r3, #0]
 800d10e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d112:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800d116:	6922      	ldr	r2, [r4, #16]
 800d118:	f000 fd36 	bl	800db88 <uxr_buffer_create_publisher_bin>
 800d11c:	4602      	mov	r2, r0
 800d11e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d122:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800d126:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800d12a:	f000 fbe1 	bl	800d8f0 <run_xrce_session>
 800d12e:	b3a8      	cbz	r0, 800d19c <rmw_create_publisher+0x190>
 800d130:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d134:	f241 539a 	movw	r3, #5530	; 0x159a
 800d138:	2105      	movs	r1, #5
 800d13a:	5ad0      	ldrh	r0, [r2, r3]
 800d13c:	1c45      	adds	r5, r0, #1
 800d13e:	52d5      	strh	r5, [r2, r3]
 800d140:	f000 fdc8 	bl	800dcd4 <uxr_object_id>
 800d144:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800d148:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d14c:	6915      	ldr	r5, [r2, #16]
 800d14e:	6160      	str	r0, [r4, #20]
 800d150:	ae04      	add	r6, sp, #16
 800d152:	4641      	mov	r1, r8
 800d154:	4630      	mov	r0, r6
 800d156:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800d15a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800d15e:	f000 fbe3 	bl	800d928 <convert_qos_profile>
 800d162:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d166:	f8cd a00c 	str.w	sl, [sp, #12]
 800d16a:	9001      	str	r0, [sp, #4]
 800d16c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d170:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800d17a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d17e:	f8d8 1000 	ldr.w	r1, [r8]
 800d182:	4628      	mov	r0, r5
 800d184:	f000 fd2e 	bl	800dbe4 <uxr_buffer_create_datawriter_bin>
 800d188:	4602      	mov	r2, r0
 800d18a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d18e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800d192:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800d196:	f000 fbab 	bl	800d8f0 <run_xrce_session>
 800d19a:	b938      	cbnz	r0, 800d1ac <rmw_create_publisher+0x1a0>
 800d19c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d19e:	b108      	cbz	r0, 800d1a4 <rmw_create_publisher+0x198>
 800d1a0:	f000 faae 	bl	800d700 <rmw_uxrce_fini_topic_memory>
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f000 fa53 	bl	800d650 <rmw_uxrce_fini_publisher_memory>
 800d1aa:	2700      	movs	r7, #0
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	b007      	add	sp, #28
 800d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b4:	2000c238 	.word	0x2000c238
 800d1b8:	08017518 	.word	0x08017518
 800d1bc:	08017044 	.word	0x08017044

0800d1c0 <rmw_publisher_get_actual_qos>:
 800d1c0:	b150      	cbz	r0, 800d1d8 <rmw_publisher_get_actual_qos+0x18>
 800d1c2:	b149      	cbz	r1, 800d1d8 <rmw_publisher_get_actual_qos+0x18>
 800d1c4:	b508      	push	{r3, lr}
 800d1c6:	6843      	ldr	r3, [r0, #4]
 800d1c8:	2250      	movs	r2, #80	; 0x50
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d1d0:	f008 f978 	bl	80154c4 <memcpy>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	bd08      	pop	{r3, pc}
 800d1d8:	200b      	movs	r0, #11
 800d1da:	4770      	bx	lr

0800d1dc <rmw_destroy_publisher>:
 800d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1de:	b128      	cbz	r0, 800d1ec <rmw_destroy_publisher+0x10>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	6800      	ldr	r0, [r0, #0]
 800d1e4:	460d      	mov	r5, r1
 800d1e6:	f000 fc03 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d1ea:	b910      	cbnz	r0, 800d1f2 <rmw_destroy_publisher+0x16>
 800d1ec:	2401      	movs	r4, #1
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f2:	6863      	ldr	r3, [r4, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d0f9      	beq.n	800d1ec <rmw_destroy_publisher+0x10>
 800d1f8:	2d00      	cmp	r5, #0
 800d1fa:	d0f7      	beq.n	800d1ec <rmw_destroy_publisher+0x10>
 800d1fc:	6828      	ldr	r0, [r5, #0]
 800d1fe:	f000 fbf7 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d202:	2800      	cmp	r0, #0
 800d204:	d0f2      	beq.n	800d1ec <rmw_destroy_publisher+0x10>
 800d206:	686c      	ldr	r4, [r5, #4]
 800d208:	2c00      	cmp	r4, #0
 800d20a:	d0ef      	beq.n	800d1ec <rmw_destroy_publisher+0x10>
 800d20c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d20e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800d212:	f006 f86b 	bl	80132ec <destroy_topic>
 800d216:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d21a:	6962      	ldr	r2, [r4, #20]
 800d21c:	6918      	ldr	r0, [r3, #16]
 800d21e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d222:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d226:	6819      	ldr	r1, [r3, #0]
 800d228:	f000 fbfc 	bl	800da24 <uxr_buffer_delete_entity>
 800d22c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d230:	6922      	ldr	r2, [r4, #16]
 800d232:	4603      	mov	r3, r0
 800d234:	6908      	ldr	r0, [r1, #16]
 800d236:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d23a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d23e:	6809      	ldr	r1, [r1, #0]
 800d240:	461c      	mov	r4, r3
 800d242:	f000 fbef 	bl	800da24 <uxr_buffer_delete_entity>
 800d246:	4606      	mov	r6, r0
 800d248:	6938      	ldr	r0, [r7, #16]
 800d24a:	4622      	mov	r2, r4
 800d24c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d250:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d254:	f000 fb4c 	bl	800d8f0 <run_xrce_session>
 800d258:	4604      	mov	r4, r0
 800d25a:	6938      	ldr	r0, [r7, #16]
 800d25c:	4632      	mov	r2, r6
 800d25e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d262:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d266:	f000 fb43 	bl	800d8f0 <run_xrce_session>
 800d26a:	b12c      	cbz	r4, 800d278 <rmw_destroy_publisher+0x9c>
 800d26c:	b120      	cbz	r0, 800d278 <rmw_destroy_publisher+0x9c>
 800d26e:	2400      	movs	r4, #0
 800d270:	4628      	mov	r0, r5
 800d272:	f000 f9ed 	bl	800d650 <rmw_uxrce_fini_publisher_memory>
 800d276:	e7ba      	b.n	800d1ee <rmw_destroy_publisher+0x12>
 800d278:	2402      	movs	r4, #2
 800d27a:	e7f9      	b.n	800d270 <rmw_destroy_publisher+0x94>

0800d27c <rmw_destroy_service>:
 800d27c:	b570      	push	{r4, r5, r6, lr}
 800d27e:	b128      	cbz	r0, 800d28c <rmw_destroy_service+0x10>
 800d280:	4604      	mov	r4, r0
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	460d      	mov	r5, r1
 800d286:	f000 fbb3 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d28a:	b910      	cbnz	r0, 800d292 <rmw_destroy_service+0x16>
 800d28c:	2401      	movs	r4, #1
 800d28e:	4620      	mov	r0, r4
 800d290:	bd70      	pop	{r4, r5, r6, pc}
 800d292:	6863      	ldr	r3, [r4, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0f9      	beq.n	800d28c <rmw_destroy_service+0x10>
 800d298:	2d00      	cmp	r5, #0
 800d29a:	d0f7      	beq.n	800d28c <rmw_destroy_service+0x10>
 800d29c:	6828      	ldr	r0, [r5, #0]
 800d29e:	f000 fba7 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d0f2      	beq.n	800d28c <rmw_destroy_service+0x10>
 800d2a6:	686e      	ldr	r6, [r5, #4]
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	d0ef      	beq.n	800d28c <rmw_destroy_service+0x10>
 800d2ac:	6864      	ldr	r4, [r4, #4]
 800d2ae:	6932      	ldr	r2, [r6, #16]
 800d2b0:	6920      	ldr	r0, [r4, #16]
 800d2b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d2b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d2ba:	6819      	ldr	r1, [r3, #0]
 800d2bc:	f000 fd38 	bl	800dd30 <uxr_buffer_cancel_data>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	6920      	ldr	r0, [r4, #16]
 800d2c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d2c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d2cc:	f000 fb10 	bl	800d8f0 <run_xrce_session>
 800d2d0:	6920      	ldr	r0, [r4, #16]
 800d2d2:	6932      	ldr	r2, [r6, #16]
 800d2d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d2d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d2dc:	6819      	ldr	r1, [r3, #0]
 800d2de:	f000 fba1 	bl	800da24 <uxr_buffer_delete_entity>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	6920      	ldr	r0, [r4, #16]
 800d2e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d2ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d2ee:	f000 faff 	bl	800d8f0 <run_xrce_session>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	bf14      	ite	ne
 800d2f8:	2400      	movne	r4, #0
 800d2fa:	2402      	moveq	r4, #2
 800d2fc:	f000 f9d4 	bl	800d6a8 <rmw_uxrce_fini_service_memory>
 800d300:	e7c5      	b.n	800d28e <rmw_destroy_service+0x12>
 800d302:	bf00      	nop

0800d304 <rmw_destroy_subscription>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	b128      	cbz	r0, 800d314 <rmw_destroy_subscription+0x10>
 800d308:	4604      	mov	r4, r0
 800d30a:	6800      	ldr	r0, [r0, #0]
 800d30c:	460d      	mov	r5, r1
 800d30e:	f000 fb6f 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d312:	b910      	cbnz	r0, 800d31a <rmw_destroy_subscription+0x16>
 800d314:	2401      	movs	r4, #1
 800d316:	4620      	mov	r0, r4
 800d318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31a:	6863      	ldr	r3, [r4, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0f9      	beq.n	800d314 <rmw_destroy_subscription+0x10>
 800d320:	2d00      	cmp	r5, #0
 800d322:	d0f7      	beq.n	800d314 <rmw_destroy_subscription+0x10>
 800d324:	6828      	ldr	r0, [r5, #0]
 800d326:	f000 fb63 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d0f2      	beq.n	800d314 <rmw_destroy_subscription+0x10>
 800d32e:	686c      	ldr	r4, [r5, #4]
 800d330:	2c00      	cmp	r4, #0
 800d332:	d0ef      	beq.n	800d314 <rmw_destroy_subscription+0x10>
 800d334:	6a26      	ldr	r6, [r4, #32]
 800d336:	6962      	ldr	r2, [r4, #20]
 800d338:	6930      	ldr	r0, [r6, #16]
 800d33a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d33e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	f000 fcf4 	bl	800dd30 <uxr_buffer_cancel_data>
 800d348:	4602      	mov	r2, r0
 800d34a:	6930      	ldr	r0, [r6, #16]
 800d34c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d350:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d354:	f000 facc 	bl	800d8f0 <run_xrce_session>
 800d358:	69e0      	ldr	r0, [r4, #28]
 800d35a:	f005 ffc7 	bl	80132ec <destroy_topic>
 800d35e:	6a23      	ldr	r3, [r4, #32]
 800d360:	6962      	ldr	r2, [r4, #20]
 800d362:	6918      	ldr	r0, [r3, #16]
 800d364:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800d368:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d36c:	6819      	ldr	r1, [r3, #0]
 800d36e:	f000 fb59 	bl	800da24 <uxr_buffer_delete_entity>
 800d372:	6a21      	ldr	r1, [r4, #32]
 800d374:	6922      	ldr	r2, [r4, #16]
 800d376:	4603      	mov	r3, r0
 800d378:	6908      	ldr	r0, [r1, #16]
 800d37a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d37e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d382:	6809      	ldr	r1, [r1, #0]
 800d384:	461c      	mov	r4, r3
 800d386:	f000 fb4d 	bl	800da24 <uxr_buffer_delete_entity>
 800d38a:	4607      	mov	r7, r0
 800d38c:	6930      	ldr	r0, [r6, #16]
 800d38e:	4622      	mov	r2, r4
 800d390:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d394:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d398:	f000 faaa 	bl	800d8f0 <run_xrce_session>
 800d39c:	4604      	mov	r4, r0
 800d39e:	6930      	ldr	r0, [r6, #16]
 800d3a0:	463a      	mov	r2, r7
 800d3a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800d3a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800d3aa:	f000 faa1 	bl	800d8f0 <run_xrce_session>
 800d3ae:	b12c      	cbz	r4, 800d3bc <rmw_destroy_subscription+0xb8>
 800d3b0:	b120      	cbz	r0, 800d3bc <rmw_destroy_subscription+0xb8>
 800d3b2:	2400      	movs	r4, #0
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f000 f961 	bl	800d67c <rmw_uxrce_fini_subscription_memory>
 800d3ba:	e7ac      	b.n	800d316 <rmw_destroy_subscription+0x12>
 800d3bc:	2402      	movs	r4, #2
 800d3be:	e7f9      	b.n	800d3b4 <rmw_destroy_subscription+0xb0>

0800d3c0 <rmw_uxrce_init_service_memory>:
 800d3c0:	b1b2      	cbz	r2, 800d3f0 <rmw_uxrce_init_service_memory+0x30>
 800d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c4:	7a07      	ldrb	r7, [r0, #8]
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	b98f      	cbnz	r7, 800d3ee <rmw_uxrce_init_service_memory+0x2e>
 800d3ca:	e9c0 7700 	strd	r7, r7, [r0]
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	23c8      	movs	r3, #200	; 0xc8
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	fb03 4602 	mla	r6, r3, r2, r4
 800d3d8:	60c3      	str	r3, [r0, #12]
 800d3da:	7201      	strb	r1, [r0, #8]
 800d3dc:	4621      	mov	r1, r4
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f005 fc6a 	bl	8012cb8 <put_memory>
 800d3e4:	60e4      	str	r4, [r4, #12]
 800d3e6:	f804 7bc8 	strb.w	r7, [r4], #200
 800d3ea:	42a6      	cmp	r6, r4
 800d3ec:	d1f6      	bne.n	800d3dc <rmw_uxrce_init_service_memory+0x1c>
 800d3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop

0800d3f4 <rmw_uxrce_init_client_memory>:
 800d3f4:	b1b2      	cbz	r2, 800d424 <rmw_uxrce_init_client_memory+0x30>
 800d3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f8:	7a07      	ldrb	r7, [r0, #8]
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	b98f      	cbnz	r7, 800d422 <rmw_uxrce_init_client_memory+0x2e>
 800d3fe:	e9c0 7700 	strd	r7, r7, [r0]
 800d402:	460c      	mov	r4, r1
 800d404:	23c8      	movs	r3, #200	; 0xc8
 800d406:	2101      	movs	r1, #1
 800d408:	fb03 4602 	mla	r6, r3, r2, r4
 800d40c:	60c3      	str	r3, [r0, #12]
 800d40e:	7201      	strb	r1, [r0, #8]
 800d410:	4621      	mov	r1, r4
 800d412:	4628      	mov	r0, r5
 800d414:	f005 fc50 	bl	8012cb8 <put_memory>
 800d418:	60e4      	str	r4, [r4, #12]
 800d41a:	f804 7bc8 	strb.w	r7, [r4], #200
 800d41e:	42a6      	cmp	r6, r4
 800d420:	d1f6      	bne.n	800d410 <rmw_uxrce_init_client_memory+0x1c>
 800d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop

0800d428 <rmw_uxrce_init_publisher_memory>:
 800d428:	b1b2      	cbz	r2, 800d458 <rmw_uxrce_init_publisher_memory+0x30>
 800d42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42c:	7a07      	ldrb	r7, [r0, #8]
 800d42e:	4605      	mov	r5, r0
 800d430:	b98f      	cbnz	r7, 800d456 <rmw_uxrce_init_publisher_memory+0x2e>
 800d432:	e9c0 7700 	strd	r7, r7, [r0]
 800d436:	460c      	mov	r4, r1
 800d438:	23d8      	movs	r3, #216	; 0xd8
 800d43a:	2101      	movs	r1, #1
 800d43c:	fb03 4602 	mla	r6, r3, r2, r4
 800d440:	60c3      	str	r3, [r0, #12]
 800d442:	7201      	strb	r1, [r0, #8]
 800d444:	4621      	mov	r1, r4
 800d446:	4628      	mov	r0, r5
 800d448:	f005 fc36 	bl	8012cb8 <put_memory>
 800d44c:	60e4      	str	r4, [r4, #12]
 800d44e:	f804 7bd8 	strb.w	r7, [r4], #216
 800d452:	42a6      	cmp	r6, r4
 800d454:	d1f6      	bne.n	800d444 <rmw_uxrce_init_publisher_memory+0x1c>
 800d456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop

0800d45c <rmw_uxrce_init_subscription_memory>:
 800d45c:	b1b2      	cbz	r2, 800d48c <rmw_uxrce_init_subscription_memory+0x30>
 800d45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d460:	7a07      	ldrb	r7, [r0, #8]
 800d462:	4605      	mov	r5, r0
 800d464:	b98f      	cbnz	r7, 800d48a <rmw_uxrce_init_subscription_memory+0x2e>
 800d466:	e9c0 7700 	strd	r7, r7, [r0]
 800d46a:	460c      	mov	r4, r1
 800d46c:	23d0      	movs	r3, #208	; 0xd0
 800d46e:	2101      	movs	r1, #1
 800d470:	fb03 4602 	mla	r6, r3, r2, r4
 800d474:	60c3      	str	r3, [r0, #12]
 800d476:	7201      	strb	r1, [r0, #8]
 800d478:	4621      	mov	r1, r4
 800d47a:	4628      	mov	r0, r5
 800d47c:	f005 fc1c 	bl	8012cb8 <put_memory>
 800d480:	60e4      	str	r4, [r4, #12]
 800d482:	f804 7bd0 	strb.w	r7, [r4], #208
 800d486:	42a6      	cmp	r6, r4
 800d488:	d1f6      	bne.n	800d478 <rmw_uxrce_init_subscription_memory+0x1c>
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop

0800d490 <rmw_uxrce_init_node_memory>:
 800d490:	b1b2      	cbz	r2, 800d4c0 <rmw_uxrce_init_node_memory+0x30>
 800d492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d494:	7a07      	ldrb	r7, [r0, #8]
 800d496:	4605      	mov	r5, r0
 800d498:	b98f      	cbnz	r7, 800d4be <rmw_uxrce_init_node_memory+0x2e>
 800d49a:	e9c0 7700 	strd	r7, r7, [r0]
 800d49e:	460c      	mov	r4, r1
 800d4a0:	23a4      	movs	r3, #164	; 0xa4
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	fb03 4602 	mla	r6, r3, r2, r4
 800d4a8:	60c3      	str	r3, [r0, #12]
 800d4aa:	7201      	strb	r1, [r0, #8]
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f005 fc02 	bl	8012cb8 <put_memory>
 800d4b4:	60e4      	str	r4, [r4, #12]
 800d4b6:	f804 7ba4 	strb.w	r7, [r4], #164
 800d4ba:	42a6      	cmp	r6, r4
 800d4bc:	d1f6      	bne.n	800d4ac <rmw_uxrce_init_node_memory+0x1c>
 800d4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop

0800d4c4 <rmw_uxrce_init_session_memory>:
 800d4c4:	b1d2      	cbz	r2, 800d4fc <rmw_uxrce_init_session_memory+0x38>
 800d4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ca:	7a07      	ldrb	r7, [r0, #8]
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	b99f      	cbnz	r7, 800d4f8 <rmw_uxrce_init_session_memory+0x34>
 800d4d0:	e9c0 7700 	strd	r7, r7, [r0]
 800d4d4:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800d4d8:	460c      	mov	r4, r1
 800d4da:	2101      	movs	r1, #1
 800d4dc:	fb03 4602 	mla	r6, r3, r2, r4
 800d4e0:	60c3      	str	r3, [r0, #12]
 800d4e2:	4698      	mov	r8, r3
 800d4e4:	7201      	strb	r1, [r0, #8]
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f005 fbe5 	bl	8012cb8 <put_memory>
 800d4ee:	60e4      	str	r4, [r4, #12]
 800d4f0:	7027      	strb	r7, [r4, #0]
 800d4f2:	4444      	add	r4, r8
 800d4f4:	42a6      	cmp	r6, r4
 800d4f6:	d1f6      	bne.n	800d4e6 <rmw_uxrce_init_session_memory+0x22>
 800d4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop

0800d500 <rmw_uxrce_init_topic_memory>:
 800d500:	b1c2      	cbz	r2, 800d534 <rmw_uxrce_init_topic_memory+0x34>
 800d502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d504:	7a07      	ldrb	r7, [r0, #8]
 800d506:	4606      	mov	r6, r0
 800d508:	b99f      	cbnz	r7, 800d532 <rmw_uxrce_init_topic_memory+0x32>
 800d50a:	e9c0 7700 	strd	r7, r7, [r0]
 800d50e:	460c      	mov	r4, r1
 800d510:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800d514:	2101      	movs	r1, #1
 800d516:	231c      	movs	r3, #28
 800d518:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d51c:	7201      	strb	r1, [r0, #8]
 800d51e:	60c3      	str	r3, [r0, #12]
 800d520:	4621      	mov	r1, r4
 800d522:	4630      	mov	r0, r6
 800d524:	f005 fbc8 	bl	8012cb8 <put_memory>
 800d528:	60e4      	str	r4, [r4, #12]
 800d52a:	f804 7b1c 	strb.w	r7, [r4], #28
 800d52e:	42a5      	cmp	r5, r4
 800d530:	d1f6      	bne.n	800d520 <rmw_uxrce_init_topic_memory+0x20>
 800d532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop

0800d538 <rmw_uxrce_init_static_input_buffer_memory>:
 800d538:	b1d2      	cbz	r2, 800d570 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800d53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53c:	7a07      	ldrb	r7, [r0, #8]
 800d53e:	4606      	mov	r6, r0
 800d540:	b9af      	cbnz	r7, 800d56e <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800d542:	e9c0 7700 	strd	r7, r7, [r0]
 800d546:	460c      	mov	r4, r1
 800d548:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800d54c:	2101      	movs	r1, #1
 800d54e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800d552:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800d556:	7201      	strb	r1, [r0, #8]
 800d558:	60c3      	str	r3, [r0, #12]
 800d55a:	4621      	mov	r1, r4
 800d55c:	4630      	mov	r0, r6
 800d55e:	f005 fbab 	bl	8012cb8 <put_memory>
 800d562:	60e4      	str	r4, [r4, #12]
 800d564:	7027      	strb	r7, [r4, #0]
 800d566:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800d56a:	42a5      	cmp	r5, r4
 800d56c:	d1f5      	bne.n	800d55a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop

0800d574 <rmw_uxrce_init_init_options_impl_memory>:
 800d574:	b1b2      	cbz	r2, 800d5a4 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800d576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d578:	7a07      	ldrb	r7, [r0, #8]
 800d57a:	4605      	mov	r5, r0
 800d57c:	b98f      	cbnz	r7, 800d5a2 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800d57e:	e9c0 7700 	strd	r7, r7, [r0]
 800d582:	460c      	mov	r4, r1
 800d584:	232c      	movs	r3, #44	; 0x2c
 800d586:	2101      	movs	r1, #1
 800d588:	fb03 4602 	mla	r6, r3, r2, r4
 800d58c:	60c3      	str	r3, [r0, #12]
 800d58e:	7201      	strb	r1, [r0, #8]
 800d590:	4621      	mov	r1, r4
 800d592:	4628      	mov	r0, r5
 800d594:	f005 fb90 	bl	8012cb8 <put_memory>
 800d598:	60e4      	str	r4, [r4, #12]
 800d59a:	f804 7b2c 	strb.w	r7, [r4], #44
 800d59e:	42a6      	cmp	r6, r4
 800d5a0:	d1f6      	bne.n	800d590 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800d5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop

0800d5a8 <rmw_uxrce_init_wait_set_memory>:
 800d5a8:	b1c2      	cbz	r2, 800d5dc <rmw_uxrce_init_wait_set_memory+0x34>
 800d5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ac:	7a07      	ldrb	r7, [r0, #8]
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	b99f      	cbnz	r7, 800d5da <rmw_uxrce_init_wait_set_memory+0x32>
 800d5b2:	e9c0 7700 	strd	r7, r7, [r0]
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800d5bc:	2101      	movs	r1, #1
 800d5be:	231c      	movs	r3, #28
 800d5c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5c4:	7201      	strb	r1, [r0, #8]
 800d5c6:	60c3      	str	r3, [r0, #12]
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f005 fb74 	bl	8012cb8 <put_memory>
 800d5d0:	60e4      	str	r4, [r4, #12]
 800d5d2:	f804 7b1c 	strb.w	r7, [r4], #28
 800d5d6:	42a5      	cmp	r5, r4
 800d5d8:	d1f6      	bne.n	800d5c8 <rmw_uxrce_init_wait_set_memory+0x20>
 800d5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop

0800d5e0 <rmw_uxrce_init_guard_condition_memory>:
 800d5e0:	b1b2      	cbz	r2, 800d610 <rmw_uxrce_init_guard_condition_memory+0x30>
 800d5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e4:	7a07      	ldrb	r7, [r0, #8]
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	b98f      	cbnz	r7, 800d60e <rmw_uxrce_init_guard_condition_memory+0x2e>
 800d5ea:	e9c0 7700 	strd	r7, r7, [r0]
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	2320      	movs	r3, #32
 800d5f2:	2101      	movs	r1, #1
 800d5f4:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800d5f8:	7201      	strb	r1, [r0, #8]
 800d5fa:	60c3      	str	r3, [r0, #12]
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4628      	mov	r0, r5
 800d600:	f005 fb5a 	bl	8012cb8 <put_memory>
 800d604:	60e4      	str	r4, [r4, #12]
 800d606:	f804 7b20 	strb.w	r7, [r4], #32
 800d60a:	42a6      	cmp	r6, r4
 800d60c:	d1f6      	bne.n	800d5fc <rmw_uxrce_init_guard_condition_memory+0x1c>
 800d60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop

0800d614 <rmw_uxrce_fini_session_memory>:
 800d614:	4601      	mov	r1, r0
 800d616:	4801      	ldr	r0, [pc, #4]	; (800d61c <rmw_uxrce_fini_session_memory+0x8>)
 800d618:	f005 bb4e 	b.w	8012cb8 <put_memory>
 800d61c:	2000f3d0 	.word	0x2000f3d0

0800d620 <rmw_uxrce_fini_node_memory>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4604      	mov	r4, r0
 800d624:	6800      	ldr	r0, [r0, #0]
 800d626:	b128      	cbz	r0, 800d634 <rmw_uxrce_fini_node_memory+0x14>
 800d628:	4b07      	ldr	r3, [pc, #28]	; (800d648 <rmw_uxrce_fini_node_memory+0x28>)
 800d62a:	6819      	ldr	r1, [r3, #0]
 800d62c:	f7f2 fdf0 	bl	8000210 <strcmp>
 800d630:	b940      	cbnz	r0, 800d644 <rmw_uxrce_fini_node_memory+0x24>
 800d632:	6020      	str	r0, [r4, #0]
 800d634:	6861      	ldr	r1, [r4, #4]
 800d636:	b129      	cbz	r1, 800d644 <rmw_uxrce_fini_node_memory+0x24>
 800d638:	2500      	movs	r5, #0
 800d63a:	4804      	ldr	r0, [pc, #16]	; (800d64c <rmw_uxrce_fini_node_memory+0x2c>)
 800d63c:	610d      	str	r5, [r1, #16]
 800d63e:	f005 fb3b 	bl	8012cb8 <put_memory>
 800d642:	6065      	str	r5, [r4, #4]
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	bf00      	nop
 800d648:	080176e8 	.word	0x080176e8
 800d64c:	2000f1fc 	.word	0x2000f1fc

0800d650 <rmw_uxrce_fini_publisher_memory>:
 800d650:	b510      	push	{r4, lr}
 800d652:	4604      	mov	r4, r0
 800d654:	6800      	ldr	r0, [r0, #0]
 800d656:	b128      	cbz	r0, 800d664 <rmw_uxrce_fini_publisher_memory+0x14>
 800d658:	4b06      	ldr	r3, [pc, #24]	; (800d674 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d65a:	6819      	ldr	r1, [r3, #0]
 800d65c:	f7f2 fdd8 	bl	8000210 <strcmp>
 800d660:	b938      	cbnz	r0, 800d672 <rmw_uxrce_fini_publisher_memory+0x22>
 800d662:	6020      	str	r0, [r4, #0]
 800d664:	6861      	ldr	r1, [r4, #4]
 800d666:	b121      	cbz	r1, 800d672 <rmw_uxrce_fini_publisher_memory+0x22>
 800d668:	4803      	ldr	r0, [pc, #12]	; (800d678 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d66a:	f005 fb25 	bl	8012cb8 <put_memory>
 800d66e:	2300      	movs	r3, #0
 800d670:	6063      	str	r3, [r4, #4]
 800d672:	bd10      	pop	{r4, pc}
 800d674:	080176e8 	.word	0x080176e8
 800d678:	2000c238 	.word	0x2000c238

0800d67c <rmw_uxrce_fini_subscription_memory>:
 800d67c:	b510      	push	{r4, lr}
 800d67e:	4604      	mov	r4, r0
 800d680:	6800      	ldr	r0, [r0, #0]
 800d682:	b128      	cbz	r0, 800d690 <rmw_uxrce_fini_subscription_memory+0x14>
 800d684:	4b06      	ldr	r3, [pc, #24]	; (800d6a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d686:	6819      	ldr	r1, [r3, #0]
 800d688:	f7f2 fdc2 	bl	8000210 <strcmp>
 800d68c:	b938      	cbnz	r0, 800d69e <rmw_uxrce_fini_subscription_memory+0x22>
 800d68e:	6020      	str	r0, [r4, #0]
 800d690:	6861      	ldr	r1, [r4, #4]
 800d692:	b121      	cbz	r1, 800d69e <rmw_uxrce_fini_subscription_memory+0x22>
 800d694:	4803      	ldr	r0, [pc, #12]	; (800d6a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d696:	f005 fb0f 	bl	8012cb8 <put_memory>
 800d69a:	2300      	movs	r3, #0
 800d69c:	6063      	str	r3, [r4, #4]
 800d69e:	bd10      	pop	{r4, pc}
 800d6a0:	080176e8 	.word	0x080176e8
 800d6a4:	2000f494 	.word	0x2000f494

0800d6a8 <rmw_uxrce_fini_service_memory>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	6800      	ldr	r0, [r0, #0]
 800d6ae:	b128      	cbz	r0, 800d6bc <rmw_uxrce_fini_service_memory+0x14>
 800d6b0:	4b06      	ldr	r3, [pc, #24]	; (800d6cc <rmw_uxrce_fini_service_memory+0x24>)
 800d6b2:	6819      	ldr	r1, [r3, #0]
 800d6b4:	f7f2 fdac 	bl	8000210 <strcmp>
 800d6b8:	b938      	cbnz	r0, 800d6ca <rmw_uxrce_fini_service_memory+0x22>
 800d6ba:	6020      	str	r0, [r4, #0]
 800d6bc:	6861      	ldr	r1, [r4, #4]
 800d6be:	b121      	cbz	r1, 800d6ca <rmw_uxrce_fini_service_memory+0x22>
 800d6c0:	4803      	ldr	r0, [pc, #12]	; (800d6d0 <rmw_uxrce_fini_service_memory+0x28>)
 800d6c2:	f005 faf9 	bl	8012cb8 <put_memory>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	6063      	str	r3, [r4, #4]
 800d6ca:	bd10      	pop	{r4, pc}
 800d6cc:	080176e8 	.word	0x080176e8
 800d6d0:	2000f484 	.word	0x2000f484

0800d6d4 <rmw_uxrce_fini_client_memory>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	6800      	ldr	r0, [r0, #0]
 800d6da:	b128      	cbz	r0, 800d6e8 <rmw_uxrce_fini_client_memory+0x14>
 800d6dc:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <rmw_uxrce_fini_client_memory+0x24>)
 800d6de:	6819      	ldr	r1, [r3, #0]
 800d6e0:	f7f2 fd96 	bl	8000210 <strcmp>
 800d6e4:	b938      	cbnz	r0, 800d6f6 <rmw_uxrce_fini_client_memory+0x22>
 800d6e6:	6020      	str	r0, [r4, #0]
 800d6e8:	6861      	ldr	r1, [r4, #4]
 800d6ea:	b121      	cbz	r1, 800d6f6 <rmw_uxrce_fini_client_memory+0x22>
 800d6ec:	4803      	ldr	r0, [pc, #12]	; (800d6fc <rmw_uxrce_fini_client_memory+0x28>)
 800d6ee:	f005 fae3 	bl	8012cb8 <put_memory>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	6063      	str	r3, [r4, #4]
 800d6f6:	bd10      	pop	{r4, pc}
 800d6f8:	080176e8 	.word	0x080176e8
 800d6fc:	2000cab8 	.word	0x2000cab8

0800d700 <rmw_uxrce_fini_topic_memory>:
 800d700:	b510      	push	{r4, lr}
 800d702:	4601      	mov	r1, r0
 800d704:	4604      	mov	r4, r0
 800d706:	4803      	ldr	r0, [pc, #12]	; (800d714 <rmw_uxrce_fini_topic_memory+0x14>)
 800d708:	f005 fad6 	bl	8012cb8 <put_memory>
 800d70c:	2300      	movs	r3, #0
 800d70e:	61a3      	str	r3, [r4, #24]
 800d710:	bd10      	pop	{r4, pc}
 800d712:	bf00      	nop
 800d714:	2000f3c0 	.word	0x2000f3c0

0800d718 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d718:	b082      	sub	sp, #8
 800d71a:	b4f0      	push	{r4, r5, r6, r7}
 800d71c:	4923      	ldr	r1, [pc, #140]	; (800d7ac <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800d71e:	ac04      	add	r4, sp, #16
 800d720:	e884 000c 	stmia.w	r4, {r2, r3}
 800d724:	680d      	ldr	r5, [r1, #0]
 800d726:	9c05      	ldr	r4, [sp, #20]
 800d728:	2d00      	cmp	r5, #0
 800d72a:	d03d      	beq.n	800d7a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800d72c:	462b      	mov	r3, r5
 800d72e:	2100      	movs	r1, #0
 800d730:	68da      	ldr	r2, [r3, #12]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800d738:	4290      	cmp	r0, r2
 800d73a:	bf08      	it	eq
 800d73c:	3101      	addeq	r1, #1
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1f6      	bne.n	800d730 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d742:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d746:	2b02      	cmp	r3, #2
 800d748:	d026      	beq.n	800d798 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800d74a:	d906      	bls.n	800d75a <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800d74c:	2b03      	cmp	r3, #3
 800d74e:	d004      	beq.n	800d75a <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800d750:	2100      	movs	r1, #0
 800d752:	bcf0      	pop	{r4, r5, r6, r7}
 800d754:	4608      	mov	r0, r1
 800d756:	b002      	add	sp, #8
 800d758:	4770      	bx	lr
 800d75a:	b304      	cbz	r4, 800d79e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d75c:	428c      	cmp	r4, r1
 800d75e:	d81e      	bhi.n	800d79e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d760:	2d00      	cmp	r5, #0
 800d762:	d0f5      	beq.n	800d750 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d764:	2100      	movs	r1, #0
 800d766:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d76a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800d76e:	e002      	b.n	800d776 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800d770:	68ad      	ldr	r5, [r5, #8]
 800d772:	2d00      	cmp	r5, #0
 800d774:	d0ed      	beq.n	800d752 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d776:	68eb      	ldr	r3, [r5, #12]
 800d778:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800d77c:	4290      	cmp	r0, r2
 800d77e:	d1f7      	bne.n	800d770 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800d780:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	42b2      	cmp	r2, r6
 800d78a:	eb73 0407 	sbcs.w	r4, r3, r7
 800d78e:	daef      	bge.n	800d770 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800d790:	4616      	mov	r6, r2
 800d792:	461f      	mov	r7, r3
 800d794:	4629      	mov	r1, r5
 800d796:	e7eb      	b.n	800d770 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800d798:	b10c      	cbz	r4, 800d79e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d79a:	428c      	cmp	r4, r1
 800d79c:	d9d8      	bls.n	800d750 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d79e:	bcf0      	pop	{r4, r5, r6, r7}
 800d7a0:	4802      	ldr	r0, [pc, #8]	; (800d7ac <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800d7a2:	b002      	add	sp, #8
 800d7a4:	f005 ba78 	b.w	8012c98 <get_memory>
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	e7ca      	b.n	800d742 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d7ac:	2000c228 	.word	0x2000c228

0800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d7b0:	4b12      	ldr	r3, [pc, #72]	; (800d7fc <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	b1fb      	cbz	r3, 800d7f6 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800d7b6:	b4f0      	push	{r4, r5, r6, r7}
 800d7b8:	f04f 0c00 	mov.w	ip, #0
 800d7bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d7c0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800d7c4:	e001      	b.n	800d7ca <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	b193      	cbz	r3, 800d7f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800d7ca:	68da      	ldr	r2, [r3, #12]
 800d7cc:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800d7d0:	4288      	cmp	r0, r1
 800d7d2:	d1f8      	bne.n	800d7c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800d7d4:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800d7d8:	e9d2 6700 	ldrd	r6, r7, [r2]
 800d7dc:	42a6      	cmp	r6, r4
 800d7de:	eb77 0205 	sbcs.w	r2, r7, r5
 800d7e2:	daf0      	bge.n	800d7c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800d7e4:	469c      	mov	ip, r3
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	4634      	mov	r4, r6
 800d7ea:	463d      	mov	r5, r7
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1ec      	bne.n	800d7ca <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800d7f0:	4660      	mov	r0, ip
 800d7f2:	bcf0      	pop	{r4, r5, r6, r7}
 800d7f4:	4770      	bx	lr
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	2000c228 	.word	0x2000c228

0800d800 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	4e38      	ldr	r6, [pc, #224]	; (800d8e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800d806:	f8d6 8000 	ldr.w	r8, [r6]
 800d80a:	b083      	sub	sp, #12
 800d80c:	f006 f8b2 	bl	8013974 <rmw_uros_epoch_nanos>
 800d810:	f1b8 0f00 	cmp.w	r8, #0
 800d814:	d05f      	beq.n	800d8d6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800d816:	46b1      	mov	r9, r6
 800d818:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800d81c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800d820:	2b04      	cmp	r3, #4
 800d822:	4682      	mov	sl, r0
 800d824:	468b      	mov	fp, r1
 800d826:	d02d      	beq.n	800d884 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800d828:	2b05      	cmp	r3, #5
 800d82a:	d041      	beq.n	800d8b0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800d82c:	2b03      	cmp	r3, #3
 800d82e:	d029      	beq.n	800d884 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800d830:	2200      	movs	r2, #0
 800d832:	2300      	movs	r3, #0
 800d834:	e9cd 2300 	strd	r2, r3, [sp]
 800d838:	2001      	movs	r0, #1
 800d83a:	2100      	movs	r1, #0
 800d83c:	9b00      	ldr	r3, [sp, #0]
 800d83e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800d842:	e9d6 6700 	ldrd	r6, r7, [r6]
 800d846:	18c2      	adds	r2, r0, r3
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	eb41 0303 	adc.w	r3, r1, r3
 800d84e:	1994      	adds	r4, r2, r6
 800d850:	eb43 0507 	adc.w	r5, r3, r7
 800d854:	4554      	cmp	r4, sl
 800d856:	eb75 020b 	sbcs.w	r2, r5, fp
 800d85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d85e:	db03      	blt.n	800d868 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d860:	45b2      	cmp	sl, r6
 800d862:	eb7b 0207 	sbcs.w	r2, fp, r7
 800d866:	da05      	bge.n	800d874 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800d868:	4641      	mov	r1, r8
 800d86a:	4648      	mov	r0, r9
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	f005 fa23 	bl	8012cb8 <put_memory>
 800d872:	9b00      	ldr	r3, [sp, #0]
 800d874:	b37b      	cbz	r3, 800d8d6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800d876:	4698      	mov	r8, r3
 800d878:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800d87c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800d880:	2b04      	cmp	r3, #4
 800d882:	d1d1      	bne.n	800d828 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800d884:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800d888:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800d88c:	e9cd 2300 	strd	r2, r3, [sp]
 800d890:	4313      	orrs	r3, r2
 800d892:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800d896:	d015      	beq.n	800d8c4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d898:	9a01      	ldr	r2, [sp, #4]
 800d89a:	4b14      	ldr	r3, [pc, #80]	; (800d8ec <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800d89c:	fb03 f702 	mul.w	r7, r3, r2
 800d8a0:	9a00      	ldr	r2, [sp, #0]
 800d8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a6:	e9cd 2300 	strd	r2, r3, [sp]
 800d8aa:	443b      	add	r3, r7
 800d8ac:	9301      	str	r3, [sp, #4]
 800d8ae:	e7c5      	b.n	800d83c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800d8b0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800d8b4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800d8b8:	e9cd 2300 	strd	r2, r3, [sp]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800d8c2:	d1e9      	bne.n	800d898 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800d8c4:	ea50 0301 	orrs.w	r3, r0, r1
 800d8c8:	bf02      	ittt	eq
 800d8ca:	a305      	addeq	r3, pc, #20	; (adr r3, 800d8e0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800d8cc:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800d8d0:	e9cd 2300 	strdeq	r2, r3, [sp]
 800d8d4:	e7b2      	b.n	800d83c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800d8d6:	b003      	add	sp, #12
 800d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8dc:	f3af 8000 	nop.w
 800d8e0:	fc23ac00 	.word	0xfc23ac00
 800d8e4:	00000006 	.word	0x00000006
 800d8e8:	2000c228 	.word	0x2000c228
 800d8ec:	3b9aca00 	.word	0x3b9aca00

0800d8f0 <run_xrce_session>:
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	788c      	ldrb	r4, [r1, #2]
 800d8f4:	b086      	sub	sp, #24
 800d8f6:	2c01      	cmp	r4, #1
 800d8f8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d8fc:	d00c      	beq.n	800d918 <run_xrce_session+0x28>
 800d8fe:	4619      	mov	r1, r3
 800d900:	2301      	movs	r3, #1
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	f10d 020e 	add.w	r2, sp, #14
 800d908:	f10d 0317 	add.w	r3, sp, #23
 800d90c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d910:	f000 fffa 	bl	800e908 <uxr_run_session_until_all_status>
 800d914:	b006      	add	sp, #24
 800d916:	bd10      	pop	{r4, pc}
 800d918:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d91c:	f000 fc12 	bl	800e144 <uxr_flash_output_streams>
 800d920:	4620      	mov	r0, r4
 800d922:	b006      	add	sp, #24
 800d924:	bd10      	pop	{r4, pc}
 800d926:	bf00      	nop

0800d928 <convert_qos_profile>:
 800d928:	b430      	push	{r4, r5}
 800d92a:	7a0d      	ldrb	r5, [r1, #8]
 800d92c:	780c      	ldrb	r4, [r1, #0]
 800d92e:	7a4a      	ldrb	r2, [r1, #9]
 800d930:	8889      	ldrh	r1, [r1, #4]
 800d932:	8081      	strh	r1, [r0, #4]
 800d934:	f1a5 0502 	sub.w	r5, r5, #2
 800d938:	f1a4 0402 	sub.w	r4, r4, #2
 800d93c:	2a02      	cmp	r2, #2
 800d93e:	fab5 f585 	clz	r5, r5
 800d942:	fab4 f484 	clz	r4, r4
 800d946:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d94a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800d94e:	bf18      	it	ne
 800d950:	2200      	movne	r2, #0
 800d952:	7045      	strb	r5, [r0, #1]
 800d954:	7084      	strb	r4, [r0, #2]
 800d956:	7002      	strb	r2, [r0, #0]
 800d958:	bc30      	pop	{r4, r5}
 800d95a:	4770      	bx	lr

0800d95c <generate_type_name>:
 800d95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d95e:	2300      	movs	r3, #0
 800d960:	700b      	strb	r3, [r1, #0]
 800d962:	6803      	ldr	r3, [r0, #0]
 800d964:	b087      	sub	sp, #28
 800d966:	4614      	mov	r4, r2
 800d968:	b1d3      	cbz	r3, 800d9a0 <generate_type_name+0x44>
 800d96a:	4d0f      	ldr	r5, [pc, #60]	; (800d9a8 <generate_type_name+0x4c>)
 800d96c:	462f      	mov	r7, r5
 800d96e:	4a0f      	ldr	r2, [pc, #60]	; (800d9ac <generate_type_name+0x50>)
 800d970:	4e0f      	ldr	r6, [pc, #60]	; (800d9b0 <generate_type_name+0x54>)
 800d972:	6840      	ldr	r0, [r0, #4]
 800d974:	9004      	str	r0, [sp, #16]
 800d976:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800d97a:	4608      	mov	r0, r1
 800d97c:	9205      	str	r2, [sp, #20]
 800d97e:	9503      	str	r5, [sp, #12]
 800d980:	4a0c      	ldr	r2, [pc, #48]	; (800d9b4 <generate_type_name+0x58>)
 800d982:	9700      	str	r7, [sp, #0]
 800d984:	4621      	mov	r1, r4
 800d986:	f007 ffd5 	bl	8015934 <sniprintf>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	db05      	blt.n	800d99a <generate_type_name+0x3e>
 800d98e:	4284      	cmp	r4, r0
 800d990:	bfd4      	ite	le
 800d992:	2000      	movle	r0, #0
 800d994:	2001      	movgt	r0, #1
 800d996:	b007      	add	sp, #28
 800d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99a:	2000      	movs	r0, #0
 800d99c:	b007      	add	sp, #28
 800d99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a0:	4b05      	ldr	r3, [pc, #20]	; (800d9b8 <generate_type_name+0x5c>)
 800d9a2:	4d01      	ldr	r5, [pc, #4]	; (800d9a8 <generate_type_name+0x4c>)
 800d9a4:	461f      	mov	r7, r3
 800d9a6:	e7e2      	b.n	800d96e <generate_type_name+0x12>
 800d9a8:	08017508 	.word	0x08017508
 800d9ac:	0801751c 	.word	0x0801751c
 800d9b0:	08017520 	.word	0x08017520
 800d9b4:	0801750c 	.word	0x0801750c
 800d9b8:	080172f8 	.word	0x080172f8

0800d9bc <generate_topic_name>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <generate_topic_name+0x2c>)
 800d9c2:	9000      	str	r0, [sp, #0]
 800d9c4:	4614      	mov	r4, r2
 800d9c6:	4608      	mov	r0, r1
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	4a08      	ldr	r2, [pc, #32]	; (800d9ec <generate_topic_name+0x30>)
 800d9cc:	f007 ffb2 	bl	8015934 <sniprintf>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	db05      	blt.n	800d9e0 <generate_topic_name+0x24>
 800d9d4:	4284      	cmp	r4, r0
 800d9d6:	bfd4      	ite	le
 800d9d8:	2000      	movle	r0, #0
 800d9da:	2001      	movgt	r0, #1
 800d9dc:	b002      	add	sp, #8
 800d9de:	bd10      	pop	{r4, pc}
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	b002      	add	sp, #8
 800d9e4:	bd10      	pop	{r4, pc}
 800d9e6:	bf00      	nop
 800d9e8:	08017524 	.word	0x08017524
 800d9ec:	08017098 	.word	0x08017098

0800d9f0 <is_uxrce_rmw_identifier_valid>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	b140      	cbz	r0, 800da08 <is_uxrce_rmw_identifier_valid+0x18>
 800d9f6:	f005 f9b7 	bl	8012d68 <rmw_get_implementation_identifier>
 800d9fa:	4601      	mov	r1, r0
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7f2 fc07 	bl	8000210 <strcmp>
 800da02:	fab0 f080 	clz	r0, r0
 800da06:	0940      	lsrs	r0, r0, #5
 800da08:	bd10      	pop	{r4, pc}
 800da0a:	bf00      	nop

0800da0c <get_message_typesupport_handle>:
 800da0c:	6883      	ldr	r3, [r0, #8]
 800da0e:	4718      	bx	r3

0800da10 <get_message_typesupport_handle_function>:
 800da10:	b510      	push	{r4, lr}
 800da12:	4604      	mov	r4, r0
 800da14:	6800      	ldr	r0, [r0, #0]
 800da16:	f7f2 fbfb 	bl	8000210 <strcmp>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	bf0c      	ite	eq
 800da1e:	4620      	moveq	r0, r4
 800da20:	2000      	movne	r0, #0
 800da22:	bd10      	pop	{r4, pc}

0800da24 <uxr_buffer_delete_entity>:
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	b08f      	sub	sp, #60	; 0x3c
 800da28:	2403      	movs	r4, #3
 800da2a:	2500      	movs	r5, #0
 800da2c:	e9cd 4500 	strd	r4, r5, [sp]
 800da30:	9202      	str	r2, [sp, #8]
 800da32:	ab06      	add	r3, sp, #24
 800da34:	2204      	movs	r2, #4
 800da36:	9103      	str	r1, [sp, #12]
 800da38:	4604      	mov	r4, r0
 800da3a:	f001 f9a1 	bl	800ed80 <uxr_prepare_stream_to_write_submessage>
 800da3e:	b918      	cbnz	r0, 800da48 <uxr_buffer_delete_entity+0x24>
 800da40:	4604      	mov	r4, r0
 800da42:	4620      	mov	r0, r4
 800da44:	b00f      	add	sp, #60	; 0x3c
 800da46:	bd30      	pop	{r4, r5, pc}
 800da48:	9902      	ldr	r1, [sp, #8]
 800da4a:	aa05      	add	r2, sp, #20
 800da4c:	4620      	mov	r0, r4
 800da4e:	f001 fad1 	bl	800eff4 <uxr_init_base_object_request>
 800da52:	a905      	add	r1, sp, #20
 800da54:	4604      	mov	r4, r0
 800da56:	a806      	add	r0, sp, #24
 800da58:	f002 fc20 	bl	801029c <uxr_serialize_DELETE_Payload>
 800da5c:	4620      	mov	r0, r4
 800da5e:	b00f      	add	sp, #60	; 0x3c
 800da60:	bd30      	pop	{r4, r5, pc}
 800da62:	bf00      	nop

0800da64 <uxr_common_create_entity>:
 800da64:	b530      	push	{r4, r5, lr}
 800da66:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800da6a:	b08d      	sub	sp, #52	; 0x34
 800da6c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800da70:	2d01      	cmp	r5, #1
 800da72:	bf0c      	ite	eq
 800da74:	f003 0201 	andeq.w	r2, r3, #1
 800da78:	2200      	movne	r2, #0
 800da7a:	330e      	adds	r3, #14
 800da7c:	4604      	mov	r4, r0
 800da7e:	441a      	add	r2, r3
 800da80:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800da84:	9001      	str	r0, [sp, #4]
 800da86:	2101      	movs	r1, #1
 800da88:	9100      	str	r1, [sp, #0]
 800da8a:	b292      	uxth	r2, r2
 800da8c:	9903      	ldr	r1, [sp, #12]
 800da8e:	ab04      	add	r3, sp, #16
 800da90:	4620      	mov	r0, r4
 800da92:	f001 f975 	bl	800ed80 <uxr_prepare_stream_to_write_submessage>
 800da96:	b918      	cbnz	r0, 800daa0 <uxr_common_create_entity+0x3c>
 800da98:	4604      	mov	r4, r0
 800da9a:	4620      	mov	r0, r4
 800da9c:	b00d      	add	sp, #52	; 0x34
 800da9e:	bd30      	pop	{r4, r5, pc}
 800daa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800daa2:	9902      	ldr	r1, [sp, #8]
 800daa4:	4620      	mov	r0, r4
 800daa6:	f001 faa5 	bl	800eff4 <uxr_init_base_object_request>
 800daaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800daac:	4604      	mov	r4, r0
 800daae:	a804      	add	r0, sp, #16
 800dab0:	f002 fb48 	bl	8010144 <uxr_serialize_CREATE_Payload>
 800dab4:	4620      	mov	r0, r4
 800dab6:	b00d      	add	sp, #52	; 0x34
 800dab8:	bd30      	pop	{r4, r5, pc}
 800daba:	bf00      	nop

0800dabc <uxr_buffer_create_participant_bin>:
 800dabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dabe:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800dac2:	ac11      	add	r4, sp, #68	; 0x44
 800dac4:	9103      	str	r1, [sp, #12]
 800dac6:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800dac8:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800dacc:	2103      	movs	r1, #3
 800dace:	7221      	strb	r1, [r4, #8]
 800dad0:	2301      	movs	r3, #1
 800dad2:	2100      	movs	r1, #0
 800dad4:	7123      	strb	r3, [r4, #4]
 800dad6:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800dada:	9202      	str	r2, [sp, #8]
 800dadc:	4605      	mov	r5, r0
 800dade:	f88d 1014 	strb.w	r1, [sp, #20]
 800dae2:	b1ce      	cbz	r6, 800db18 <uxr_buffer_create_participant_bin+0x5c>
 800dae4:	f88d 301c 	strb.w	r3, [sp, #28]
 800dae8:	9608      	str	r6, [sp, #32]
 800daea:	a809      	add	r0, sp, #36	; 0x24
 800daec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daf0:	a915      	add	r1, sp, #84	; 0x54
 800daf2:	f7fd fc23 	bl	800b33c <ucdr_init_buffer>
 800daf6:	a905      	add	r1, sp, #20
 800daf8:	a809      	add	r0, sp, #36	; 0x24
 800dafa:	f001 ffd7 	bl	800faac <uxr_serialize_OBJK_DomainParticipant_Binary>
 800dafe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800db00:	9401      	str	r4, [sp, #4]
 800db02:	b283      	uxth	r3, r0
 800db04:	9700      	str	r7, [sp, #0]
 800db06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800db0a:	60e0      	str	r0, [r4, #12]
 800db0c:	4628      	mov	r0, r5
 800db0e:	f7ff ffa9 	bl	800da64 <uxr_common_create_entity>
 800db12:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800db16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db18:	f88d 601c 	strb.w	r6, [sp, #28]
 800db1c:	e7e5      	b.n	800daea <uxr_buffer_create_participant_bin+0x2e>
 800db1e:	bf00      	nop

0800db20 <uxr_buffer_create_topic_bin>:
 800db20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db22:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800db26:	ac13      	add	r4, sp, #76	; 0x4c
 800db28:	4605      	mov	r5, r0
 800db2a:	9105      	str	r1, [sp, #20]
 800db2c:	4618      	mov	r0, r3
 800db2e:	a997      	add	r1, sp, #604	; 0x25c
 800db30:	2602      	movs	r6, #2
 800db32:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800db36:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800db3a:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800db3e:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800db40:	f000 f8ea 	bl	800dd18 <uxr_object_id_to_raw>
 800db44:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800db46:	9206      	str	r2, [sp, #24]
 800db48:	2303      	movs	r3, #3
 800db4a:	2101      	movs	r1, #1
 800db4c:	7223      	strb	r3, [r4, #8]
 800db4e:	a80b      	add	r0, sp, #44	; 0x2c
 800db50:	2300      	movs	r3, #0
 800db52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db56:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800db5a:	a917      	add	r1, sp, #92	; 0x5c
 800db5c:	f88d 301c 	strb.w	r3, [sp, #28]
 800db60:	960a      	str	r6, [sp, #40]	; 0x28
 800db62:	f7fd fbeb 	bl	800b33c <ucdr_init_buffer>
 800db66:	a906      	add	r1, sp, #24
 800db68:	a80b      	add	r0, sp, #44	; 0x2c
 800db6a:	f001 ffc1 	bl	800faf0 <uxr_serialize_OBJK_Topic_Binary>
 800db6e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800db70:	9401      	str	r4, [sp, #4]
 800db72:	9700      	str	r7, [sp, #0]
 800db74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800db78:	4628      	mov	r0, r5
 800db7a:	b2b3      	uxth	r3, r6
 800db7c:	60e6      	str	r6, [r4, #12]
 800db7e:	f7ff ff71 	bl	800da64 <uxr_common_create_entity>
 800db82:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800db86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db88 <uxr_buffer_create_publisher_bin>:
 800db88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db8a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800db8e:	ac0e      	add	r4, sp, #56	; 0x38
 800db90:	4605      	mov	r5, r0
 800db92:	9105      	str	r1, [sp, #20]
 800db94:	4618      	mov	r0, r3
 800db96:	2603      	movs	r6, #3
 800db98:	a992      	add	r1, sp, #584	; 0x248
 800db9a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800db9e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800dba2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800dba6:	f000 f8b7 	bl	800dd18 <uxr_object_id_to_raw>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	a806      	add	r0, sp, #24
 800dbae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbb2:	a912      	add	r1, sp, #72	; 0x48
 800dbb4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800dbb8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800dbbc:	7226      	strb	r6, [r4, #8]
 800dbbe:	f7fd fbbd 	bl	800b33c <ucdr_init_buffer>
 800dbc2:	a993      	add	r1, sp, #588	; 0x24c
 800dbc4:	a806      	add	r0, sp, #24
 800dbc6:	f002 f847 	bl	800fc58 <uxr_serialize_OBJK_Publisher_Binary>
 800dbca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dbcc:	9700      	str	r7, [sp, #0]
 800dbce:	9401      	str	r4, [sp, #4]
 800dbd0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	b2b3      	uxth	r3, r6
 800dbd8:	60e6      	str	r6, [r4, #12]
 800dbda:	f7ff ff43 	bl	800da64 <uxr_common_create_entity>
 800dbde:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800dbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbe4 <uxr_buffer_create_datawriter_bin>:
 800dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800dbec:	ac1d      	add	r4, sp, #116	; 0x74
 800dbee:	2505      	movs	r5, #5
 800dbf0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dbf4:	9105      	str	r1, [sp, #20]
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	a9a1      	add	r1, sp, #644	; 0x284
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	7125      	strb	r5, [r4, #4]
 800dbfe:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800dc02:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800dc06:	2703      	movs	r7, #3
 800dc08:	f000 f886 	bl	800dd18 <uxr_object_id_to_raw>
 800dc0c:	a90e      	add	r1, sp, #56	; 0x38
 800dc0e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800dc10:	7227      	strb	r7, [r4, #8]
 800dc12:	f000 f881 	bl	800dd18 <uxr_object_id_to_raw>
 800dc16:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800dc1a:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800dc1e:	3d00      	subs	r5, #0
 800dc20:	f04f 0300 	mov.w	r3, #0
 800dc24:	bf18      	it	ne
 800dc26:	2501      	movne	r5, #1
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800dc2e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800dc32:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800dc36:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800dc3a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800dc3e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800dc42:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800dc46:	bb89      	cbnz	r1, 800dcac <uxr_buffer_create_datawriter_bin+0xc8>
 800dc48:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800dc4c:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800dc50:	f04f 0c13 	mov.w	ip, #19
 800dc54:	250b      	movs	r5, #11
 800dc56:	2221      	movs	r2, #33	; 0x21
 800dc58:	2111      	movs	r1, #17
 800dc5a:	2009      	movs	r0, #9
 800dc5c:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800dc60:	b923      	cbnz	r3, 800dc6c <uxr_buffer_create_datawriter_bin+0x88>
 800dc62:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800dc66:	4672      	mov	r2, lr
 800dc68:	4661      	mov	r1, ip
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d025      	beq.n	800dcc0 <uxr_buffer_create_datawriter_bin+0xdc>
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d029      	beq.n	800dccc <uxr_buffer_create_datawriter_bin+0xe8>
 800dc78:	b32b      	cbz	r3, 800dcc6 <uxr_buffer_create_datawriter_bin+0xe2>
 800dc7a:	a806      	add	r0, sp, #24
 800dc7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc80:	a921      	add	r1, sp, #132	; 0x84
 800dc82:	f7fd fb5b 	bl	800b33c <ucdr_init_buffer>
 800dc86:	a90e      	add	r1, sp, #56	; 0x38
 800dc88:	a806      	add	r0, sp, #24
 800dc8a:	f002 f85b 	bl	800fd44 <uxr_serialize_OBJK_DataWriter_Binary>
 800dc8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc90:	9401      	str	r4, [sp, #4]
 800dc92:	b283      	uxth	r3, r0
 800dc94:	f8cd 8000 	str.w	r8, [sp]
 800dc98:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dc9c:	60e0      	str	r0, [r4, #12]
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7ff fee0 	bl	800da64 <uxr_common_create_entity>
 800dca4:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcac:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800dcb0:	f04f 0c12 	mov.w	ip, #18
 800dcb4:	250a      	movs	r5, #10
 800dcb6:	2220      	movs	r2, #32
 800dcb8:	2110      	movs	r1, #16
 800dcba:	2008      	movs	r0, #8
 800dcbc:	2702      	movs	r7, #2
 800dcbe:	e7cd      	b.n	800dc5c <uxr_buffer_create_datawriter_bin+0x78>
 800dcc0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800dcc4:	e7d9      	b.n	800dc7a <uxr_buffer_create_datawriter_bin+0x96>
 800dcc6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800dcca:	e7d6      	b.n	800dc7a <uxr_buffer_create_datawriter_bin+0x96>
 800dccc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800dcd0:	e7d3      	b.n	800dc7a <uxr_buffer_create_datawriter_bin+0x96>
 800dcd2:	bf00      	nop

0800dcd4 <uxr_object_id>:
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f88d 1006 	strb.w	r1, [sp, #6]
 800dcdc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dce0:	f360 030f 	bfi	r3, r0, #0, #16
 800dce4:	f362 431f 	bfi	r3, r2, #16, #16
 800dce8:	4618      	mov	r0, r3
 800dcea:	b002      	add	sp, #8
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop

0800dcf0 <uxr_object_id_from_raw>:
 800dcf0:	7843      	ldrb	r3, [r0, #1]
 800dcf2:	7801      	ldrb	r1, [r0, #0]
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	f003 000f 	and.w	r0, r3, #15
 800dcfa:	f88d 0006 	strb.w	r0, [sp, #6]
 800dcfe:	091b      	lsrs	r3, r3, #4
 800dd00:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800dd04:	2200      	movs	r2, #0
 800dd06:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800dd0a:	f363 020f 	bfi	r2, r3, #0, #16
 800dd0e:	f361 421f 	bfi	r2, r1, #16, #16
 800dd12:	4610      	mov	r0, r2
 800dd14:	b002      	add	sp, #8
 800dd16:	4770      	bx	lr

0800dd18 <uxr_object_id_to_raw>:
 800dd18:	4602      	mov	r2, r0
 800dd1a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800dd1e:	b082      	sub	sp, #8
 800dd20:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800dd24:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800dd28:	700a      	strb	r2, [r1, #0]
 800dd2a:	704b      	strb	r3, [r1, #1]
 800dd2c:	b002      	add	sp, #8
 800dd2e:	4770      	bx	lr

0800dd30 <uxr_buffer_cancel_data>:
 800dd30:	b530      	push	{r4, r5, lr}
 800dd32:	b095      	sub	sp, #84	; 0x54
 800dd34:	2400      	movs	r4, #0
 800dd36:	2308      	movs	r3, #8
 800dd38:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	9205      	str	r2, [sp, #20]
 800dd40:	2501      	movs	r5, #1
 800dd42:	ab0c      	add	r3, sp, #48	; 0x30
 800dd44:	2210      	movs	r2, #16
 800dd46:	f8ad 401c 	strh.w	r4, [sp, #28]
 800dd4a:	f88d 401e 	strb.w	r4, [sp, #30]
 800dd4e:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800dd52:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800dd56:	9103      	str	r1, [sp, #12]
 800dd58:	4604      	mov	r4, r0
 800dd5a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800dd5e:	f001 f80f 	bl	800ed80 <uxr_prepare_stream_to_write_submessage>
 800dd62:	b918      	cbnz	r0, 800dd6c <uxr_buffer_cancel_data+0x3c>
 800dd64:	4604      	mov	r4, r0
 800dd66:	4620      	mov	r0, r4
 800dd68:	b015      	add	sp, #84	; 0x54
 800dd6a:	bd30      	pop	{r4, r5, pc}
 800dd6c:	9905      	ldr	r1, [sp, #20]
 800dd6e:	aa06      	add	r2, sp, #24
 800dd70:	4620      	mov	r0, r4
 800dd72:	f001 f93f 	bl	800eff4 <uxr_init_base_object_request>
 800dd76:	a906      	add	r1, sp, #24
 800dd78:	4604      	mov	r4, r0
 800dd7a:	a80c      	add	r0, sp, #48	; 0x30
 800dd7c:	f002 fb38 	bl	80103f0 <uxr_serialize_READ_DATA_Payload>
 800dd80:	4620      	mov	r0, r4
 800dd82:	b015      	add	sp, #84	; 0x54
 800dd84:	bd30      	pop	{r4, r5, pc}
 800dd86:	bf00      	nop

0800dd88 <read_submessage_format>:
 800dd88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd8c:	b095      	sub	sp, #84	; 0x54
 800dd8e:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800dd92:	b113      	cbz	r3, 800dd9a <read_submessage_format+0x12>
 800dd94:	b015      	add	sp, #84	; 0x54
 800dd96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	4616      	mov	r6, r2
 800dd9e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800dda2:	461d      	mov	r5, r3
 800dda4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dda6:	9304      	str	r3, [sp, #16]
 800dda8:	1a52      	subs	r2, r2, r1
 800ddaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	4607      	mov	r7, r0
 800ddb0:	a80c      	add	r0, sp, #48	; 0x30
 800ddb2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800ddb6:	f7fd fac1 	bl	800b33c <ucdr_init_buffer>
 800ddba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ddbe:	a80c      	add	r0, sp, #48	; 0x30
 800ddc0:	f7fd fa92 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 800ddc4:	69e3      	ldr	r3, [r4, #28]
 800ddc6:	b193      	cbz	r3, 800ddee <read_submessage_format+0x66>
 800ddc8:	f1b8 0f07 	cmp.w	r8, #7
 800ddcc:	751d      	strb	r5, [r3, #20]
 800ddce:	d03e      	beq.n	800de4e <read_submessage_format+0xc6>
 800ddd0:	f1b8 0f08 	cmp.w	r8, #8
 800ddd4:	d02c      	beq.n	800de30 <read_submessage_format+0xa8>
 800ddd6:	f1b8 0f06 	cmp.w	r8, #6
 800ddda:	d011      	beq.n	800de00 <read_submessage_format+0x78>
 800dddc:	2201      	movs	r2, #1
 800ddde:	751a      	strb	r2, [r3, #20]
 800dde0:	4631      	mov	r1, r6
 800dde2:	4620      	mov	r0, r4
 800dde4:	f7fd fafa 	bl	800b3dc <ucdr_advance_buffer>
 800dde8:	b015      	add	sp, #84	; 0x54
 800ddea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddee:	f1b8 0f07 	cmp.w	r8, #7
 800ddf2:	d02c      	beq.n	800de4e <read_submessage_format+0xc6>
 800ddf4:	f1b8 0f08 	cmp.w	r8, #8
 800ddf8:	d01a      	beq.n	800de30 <read_submessage_format+0xa8>
 800ddfa:	f1b8 0f06 	cmp.w	r8, #6
 800ddfe:	d1ef      	bne.n	800dde0 <read_submessage_format+0x58>
 800de00:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800de04:	b18d      	cbz	r5, 800de2a <read_submessage_format+0xa2>
 800de06:	2306      	movs	r3, #6
 800de08:	f88d 3016 	strb.w	r3, [sp, #22]
 800de0c:	aa0c      	add	r2, sp, #48	; 0x30
 800de0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de12:	9302      	str	r3, [sp, #8]
 800de14:	9200      	str	r2, [sp, #0]
 800de16:	9b04      	ldr	r3, [sp, #16]
 800de18:	9905      	ldr	r1, [sp, #20]
 800de1a:	9601      	str	r6, [sp, #4]
 800de1c:	464a      	mov	r2, r9
 800de1e:	4638      	mov	r0, r7
 800de20:	47a8      	blx	r5
 800de22:	2301      	movs	r3, #1
 800de24:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800de28:	69e3      	ldr	r3, [r4, #28]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1d6      	bne.n	800dddc <read_submessage_format+0x54>
 800de2e:	e7d7      	b.n	800dde0 <read_submessage_format+0x58>
 800de30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800de34:	2a00      	cmp	r2, #0
 800de36:	d0f8      	beq.n	800de2a <read_submessage_format+0xa2>
 800de38:	a906      	add	r1, sp, #24
 800de3a:	a80c      	add	r0, sp, #48	; 0x30
 800de3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800de3e:	f002 fb9d 	bl	801057c <uxr_deserialize_SampleIdentity>
 800de42:	2800      	cmp	r0, #0
 800de44:	d13c      	bne.n	800dec0 <read_submessage_format+0x138>
 800de46:	69e3      	ldr	r3, [r4, #28]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1c7      	bne.n	800dddc <read_submessage_format+0x54>
 800de4c:	e7c8      	b.n	800dde0 <read_submessage_format+0x58>
 800de4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800de52:	b132      	cbz	r2, 800de62 <read_submessage_format+0xda>
 800de54:	a906      	add	r1, sp, #24
 800de56:	a80c      	add	r0, sp, #48	; 0x30
 800de58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800de5a:	f002 f84d 	bl	800fef8 <uxr_deserialize_BaseObjectRequest>
 800de5e:	b930      	cbnz	r0, 800de6e <read_submessage_format+0xe6>
 800de60:	69e3      	ldr	r3, [r4, #28]
 800de62:	68a2      	ldr	r2, [r4, #8]
 800de64:	4432      	add	r2, r6
 800de66:	60a2      	str	r2, [r4, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1b7      	bne.n	800dddc <read_submessage_format+0x54>
 800de6c:	e7b8      	b.n	800dde0 <read_submessage_format+0x58>
 800de6e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800de72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de74:	1a52      	subs	r2, r2, r1
 800de76:	a80c      	add	r0, sp, #48	; 0x30
 800de78:	1aed      	subs	r5, r5, r3
 800de7a:	f7fd fa5f 	bl	800b33c <ucdr_init_buffer>
 800de7e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800de82:	a80c      	add	r0, sp, #48	; 0x30
 800de84:	f7fd fa30 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 800de88:	4435      	add	r5, r6
 800de8a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800de8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800de92:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800de96:	9002      	str	r0, [sp, #8]
 800de98:	2207      	movs	r2, #7
 800de9a:	f88d 2016 	strb.w	r2, [sp, #22]
 800de9e:	b2ad      	uxth	r5, r5
 800dea0:	aa0c      	add	r2, sp, #48	; 0x30
 800dea2:	9200      	str	r2, [sp, #0]
 800dea4:	9501      	str	r5, [sp, #4]
 800dea6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800deaa:	b29b      	uxth	r3, r3
 800deac:	9905      	ldr	r1, [sp, #20]
 800deae:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800deb2:	464a      	mov	r2, r9
 800deb4:	4638      	mov	r0, r7
 800deb6:	47a8      	blx	r5
 800deb8:	2301      	movs	r3, #1
 800deba:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800debe:	e7cf      	b.n	800de60 <read_submessage_format+0xd8>
 800dec0:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800dec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dec6:	1a52      	subs	r2, r2, r1
 800dec8:	a80c      	add	r0, sp, #48	; 0x30
 800deca:	1aed      	subs	r5, r5, r3
 800decc:	f7fd fa36 	bl	800b33c <ucdr_init_buffer>
 800ded0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ded4:	a80c      	add	r0, sp, #48	; 0x30
 800ded6:	f7fd fa07 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 800deda:	4435      	add	r5, r6
 800dedc:	2308      	movs	r3, #8
 800dede:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800dee2:	f88d 3016 	strb.w	r3, [sp, #22]
 800dee6:	b2ad      	uxth	r5, r5
 800dee8:	ab0c      	add	r3, sp, #48	; 0x30
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	9002      	str	r0, [sp, #8]
 800deee:	9501      	str	r5, [sp, #4]
 800def0:	ab06      	add	r3, sp, #24
 800def2:	9905      	ldr	r1, [sp, #20]
 800def4:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800def8:	464a      	mov	r2, r9
 800defa:	4638      	mov	r0, r7
 800defc:	47a8      	blx	r5
 800defe:	2301      	movs	r3, #1
 800df00:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800df04:	e79f      	b.n	800de46 <read_submessage_format+0xbe>
 800df06:	bf00      	nop

0800df08 <on_get_fragmentation_info>:
 800df08:	b500      	push	{lr}
 800df0a:	b08b      	sub	sp, #44	; 0x2c
 800df0c:	4601      	mov	r1, r0
 800df0e:	2204      	movs	r2, #4
 800df10:	a802      	add	r0, sp, #8
 800df12:	f7fd fa13 	bl	800b33c <ucdr_init_buffer>
 800df16:	f10d 0305 	add.w	r3, sp, #5
 800df1a:	a802      	add	r0, sp, #8
 800df1c:	f10d 0206 	add.w	r2, sp, #6
 800df20:	a901      	add	r1, sp, #4
 800df22:	f001 f9eb 	bl	800f2fc <uxr_read_submessage_header>
 800df26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800df2a:	2b0d      	cmp	r3, #13
 800df2c:	d003      	beq.n	800df36 <on_get_fragmentation_info+0x2e>
 800df2e:	2000      	movs	r0, #0
 800df30:	b00b      	add	sp, #44	; 0x2c
 800df32:	f85d fb04 	ldr.w	pc, [sp], #4
 800df36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800df3a:	f013 0f02 	tst.w	r3, #2
 800df3e:	bf14      	ite	ne
 800df40:	2002      	movne	r0, #2
 800df42:	2001      	moveq	r0, #1
 800df44:	b00b      	add	sp, #44	; 0x2c
 800df46:	f85d fb04 	ldr.w	pc, [sp], #4
 800df4a:	bf00      	nop

0800df4c <read_submessage_get_info>:
 800df4c:	b570      	push	{r4, r5, r6, lr}
 800df4e:	2500      	movs	r5, #0
 800df50:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800df54:	4604      	mov	r4, r0
 800df56:	f44f 7224 	mov.w	r2, #656	; 0x290
 800df5a:	460e      	mov	r6, r1
 800df5c:	a810      	add	r0, sp, #64	; 0x40
 800df5e:	4629      	mov	r1, r5
 800df60:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800df64:	f007 fad6 	bl	8015514 <memset>
 800df68:	a903      	add	r1, sp, #12
 800df6a:	4630      	mov	r0, r6
 800df6c:	f002 f982 	bl	8010274 <uxr_deserialize_GET_INFO_Payload>
 800df70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800df74:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800df78:	4620      	mov	r0, r4
 800df7a:	f001 f833 	bl	800efe4 <uxr_session_header_offset>
 800df7e:	462b      	mov	r3, r5
 800df80:	9000      	str	r0, [sp, #0]
 800df82:	a905      	add	r1, sp, #20
 800df84:	a808      	add	r0, sp, #32
 800df86:	220c      	movs	r2, #12
 800df88:	f7fd f9c6 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800df8c:	a910      	add	r1, sp, #64	; 0x40
 800df8e:	a808      	add	r0, sp, #32
 800df90:	f002 f9e2 	bl	8010358 <uxr_serialize_INFO_Payload>
 800df94:	9b08      	ldr	r3, [sp, #32]
 800df96:	462a      	mov	r2, r5
 800df98:	4629      	mov	r1, r5
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 ffca 	bl	800ef34 <uxr_stamp_session_header>
 800dfa0:	a808      	add	r0, sp, #32
 800dfa2:	f7fd f9f7 	bl	800b394 <ucdr_buffer_length>
 800dfa6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	a905      	add	r1, sp, #20
 800dfac:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dfb0:	47a0      	blx	r4
 800dfb2:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}

0800dfb8 <write_submessage_acknack.isra.0>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	b092      	sub	sp, #72	; 0x48
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	460e      	mov	r6, r1
 800dfc0:	4614      	mov	r4, r2
 800dfc2:	f001 f80f 	bl	800efe4 <uxr_session_header_offset>
 800dfc6:	a905      	add	r1, sp, #20
 800dfc8:	9000      	str	r0, [sp, #0]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	a80a      	add	r0, sp, #40	; 0x28
 800dfce:	2211      	movs	r2, #17
 800dfd0:	f7fd f9a2 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800dfd4:	2218      	movs	r2, #24
 800dfd6:	fb02 5404 	mla	r4, r2, r4, r5
 800dfda:	2300      	movs	r3, #0
 800dfdc:	2205      	movs	r2, #5
 800dfde:	3450      	adds	r4, #80	; 0x50
 800dfe0:	a80a      	add	r0, sp, #40	; 0x28
 800dfe2:	210a      	movs	r1, #10
 800dfe4:	f001 f970 	bl	800f2c8 <uxr_buffer_submessage_header>
 800dfe8:	a903      	add	r1, sp, #12
 800dfea:	4620      	mov	r0, r4
 800dfec:	f006 f8c2 	bl	8014174 <uxr_compute_acknack>
 800dff0:	a903      	add	r1, sp, #12
 800dff2:	ba43      	rev16	r3, r0
 800dff4:	a80a      	add	r0, sp, #40	; 0x28
 800dff6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dffa:	f88d 6010 	strb.w	r6, [sp, #16]
 800dffe:	f002 fa1b 	bl	8010438 <uxr_serialize_ACKNACK_Payload>
 800e002:	2200      	movs	r2, #0
 800e004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e006:	4611      	mov	r1, r2
 800e008:	4628      	mov	r0, r5
 800e00a:	f000 ff93 	bl	800ef34 <uxr_stamp_session_header>
 800e00e:	a80a      	add	r0, sp, #40	; 0x28
 800e010:	f7fd f9c0 	bl	800b394 <ucdr_buffer_length>
 800e014:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e016:	4602      	mov	r2, r0
 800e018:	a905      	add	r1, sp, #20
 800e01a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e01e:	47a0      	blx	r4
 800e020:	b012      	add	sp, #72	; 0x48
 800e022:	bd70      	pop	{r4, r5, r6, pc}

0800e024 <uxr_init_session>:
 800e024:	b5d0      	push	{r4, r6, r7, lr}
 800e026:	2300      	movs	r3, #0
 800e028:	2600      	movs	r6, #0
 800e02a:	2700      	movs	r7, #0
 800e02c:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800e030:	4604      	mov	r4, r0
 800e032:	6701      	str	r1, [r0, #112]	; 0x70
 800e034:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800e038:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800e03c:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800e040:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800e044:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800e048:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800e04c:	2181      	movs	r1, #129	; 0x81
 800e04e:	f000 fedb 	bl	800ee08 <uxr_init_session_info>
 800e052:	f104 0008 	add.w	r0, r4, #8
 800e056:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800e05a:	f001 b851 	b.w	800f100 <uxr_init_stream_storage>
 800e05e:	bf00      	nop

0800e060 <uxr_set_status_callback>:
 800e060:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop

0800e068 <uxr_set_topic_callback>:
 800e068:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop

0800e070 <uxr_set_request_callback>:
 800e070:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop

0800e078 <uxr_set_reply_callback>:
 800e078:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop

0800e080 <uxr_create_output_best_effort_stream>:
 800e080:	b510      	push	{r4, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	e9cd 2100 	strd	r2, r1, [sp]
 800e088:	4604      	mov	r4, r0
 800e08a:	f000 ffab 	bl	800efe4 <uxr_session_header_offset>
 800e08e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e092:	4603      	mov	r3, r0
 800e094:	f104 0008 	add.w	r0, r4, #8
 800e098:	b004      	add	sp, #16
 800e09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e09e:	f001 b879 	b.w	800f194 <uxr_add_output_best_effort_buffer>
 800e0a2:	bf00      	nop

0800e0a4 <uxr_create_output_reliable_stream>:
 800e0a4:	b530      	push	{r4, r5, lr}
 800e0a6:	b089      	sub	sp, #36	; 0x24
 800e0a8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e0ac:	9303      	str	r3, [sp, #12]
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	f000 ff98 	bl	800efe4 <uxr_session_header_offset>
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e0ba:	9905      	ldr	r1, [sp, #20]
 800e0bc:	9500      	str	r5, [sp, #0]
 800e0be:	f104 0008 	add.w	r0, r4, #8
 800e0c2:	f001 f879 	bl	800f1b8 <uxr_add_output_reliable_buffer>
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	b2c3      	uxtb	r3, r0
 800e0ca:	f363 0207 	bfi	r2, r3, #0, #8
 800e0ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e0d2:	f363 220f 	bfi	r2, r3, #8, #8
 800e0d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e0da:	f363 4217 	bfi	r2, r3, #16, #8
 800e0de:	0e03      	lsrs	r3, r0, #24
 800e0e0:	f363 621f 	bfi	r2, r3, #24, #8
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	b009      	add	sp, #36	; 0x24
 800e0e8:	bd30      	pop	{r4, r5, pc}
 800e0ea:	bf00      	nop

0800e0ec <uxr_create_input_best_effort_stream>:
 800e0ec:	b082      	sub	sp, #8
 800e0ee:	3008      	adds	r0, #8
 800e0f0:	b002      	add	sp, #8
 800e0f2:	f001 b87b 	b.w	800f1ec <uxr_add_input_best_effort_buffer>
 800e0f6:	bf00      	nop

0800e0f8 <uxr_create_input_reliable_stream>:
 800e0f8:	b510      	push	{r4, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	4c0b      	ldr	r4, [pc, #44]	; (800e12c <uxr_create_input_reliable_stream+0x34>)
 800e0fe:	9400      	str	r4, [sp, #0]
 800e100:	3008      	adds	r0, #8
 800e102:	f001 f889 	bl	800f218 <uxr_add_input_reliable_buffer>
 800e106:	2200      	movs	r2, #0
 800e108:	b2c3      	uxtb	r3, r0
 800e10a:	f363 0207 	bfi	r2, r3, #0, #8
 800e10e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e112:	f363 220f 	bfi	r2, r3, #8, #8
 800e116:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e11a:	f363 4217 	bfi	r2, r3, #16, #8
 800e11e:	0e03      	lsrs	r3, r0, #24
 800e120:	f363 621f 	bfi	r2, r3, #24, #8
 800e124:	4610      	mov	r0, r2
 800e126:	b004      	add	sp, #16
 800e128:	bd10      	pop	{r4, pc}
 800e12a:	bf00      	nop
 800e12c:	0800df09 	.word	0x0800df09

0800e130 <uxr_epoch_nanos>:
 800e130:	b510      	push	{r4, lr}
 800e132:	4604      	mov	r4, r0
 800e134:	f001 f92a 	bl	800f38c <uxr_nanos>
 800e138:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800e13c:	1ac0      	subs	r0, r0, r3
 800e13e:	eb61 0102 	sbc.w	r1, r1, r2
 800e142:	bd10      	pop	{r4, pc}

0800e144 <uxr_flash_output_streams>:
 800e144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e148:	7e03      	ldrb	r3, [r0, #24]
 800e14a:	b084      	sub	sp, #16
 800e14c:	4604      	mov	r4, r0
 800e14e:	b1fb      	cbz	r3, 800e190 <uxr_flash_output_streams+0x4c>
 800e150:	f04f 0900 	mov.w	r9, #0
 800e154:	4648      	mov	r0, r9
 800e156:	f10d 0802 	add.w	r8, sp, #2
 800e15a:	af03      	add	r7, sp, #12
 800e15c:	ae02      	add	r6, sp, #8
 800e15e:	2201      	movs	r2, #1
 800e160:	4611      	mov	r1, r2
 800e162:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e166:	f000 ff75 	bl	800f054 <uxr_stream_id>
 800e16a:	3508      	adds	r5, #8
 800e16c:	4684      	mov	ip, r0
 800e16e:	4643      	mov	r3, r8
 800e170:	4628      	mov	r0, r5
 800e172:	463a      	mov	r2, r7
 800e174:	4631      	mov	r1, r6
 800e176:	f8cd c004 	str.w	ip, [sp, #4]
 800e17a:	f006 f883 	bl	8014284 <uxr_prepare_best_effort_buffer_to_send>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d13d      	bne.n	800e1fe <uxr_flash_output_streams+0xba>
 800e182:	7e23      	ldrb	r3, [r4, #24]
 800e184:	f109 0901 	add.w	r9, r9, #1
 800e188:	fa5f f089 	uxtb.w	r0, r9
 800e18c:	4283      	cmp	r3, r0
 800e18e:	d8e6      	bhi.n	800e15e <uxr_flash_output_streams+0x1a>
 800e190:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e194:	b383      	cbz	r3, 800e1f8 <uxr_flash_output_streams+0xb4>
 800e196:	f04f 0900 	mov.w	r9, #0
 800e19a:	4648      	mov	r0, r9
 800e19c:	f10d 0802 	add.w	r8, sp, #2
 800e1a0:	af03      	add	r7, sp, #12
 800e1a2:	ae02      	add	r6, sp, #8
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	2102      	movs	r1, #2
 800e1a8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e1ac:	f000 ff52 	bl	800f054 <uxr_stream_id>
 800e1b0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e1b4:	3520      	adds	r5, #32
 800e1b6:	9001      	str	r0, [sp, #4]
 800e1b8:	e00c      	b.n	800e1d4 <uxr_flash_output_streams+0x90>
 800e1ba:	9b02      	ldr	r3, [sp, #8]
 800e1bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e1c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e1c4:	f000 feb6 	bl	800ef34 <uxr_stamp_session_header>
 800e1c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e1ca:	9a03      	ldr	r2, [sp, #12]
 800e1cc:	9902      	ldr	r1, [sp, #8]
 800e1ce:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800e1d2:	47d0      	blx	sl
 800e1d4:	4643      	mov	r3, r8
 800e1d6:	463a      	mov	r2, r7
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f006 fa66 	bl	80146ac <uxr_prepare_next_reliable_buffer_to_send>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1e8      	bne.n	800e1ba <uxr_flash_output_streams+0x76>
 800e1e8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e1ec:	f109 0901 	add.w	r9, r9, #1
 800e1f0:	fa5f f089 	uxtb.w	r0, r9
 800e1f4:	4283      	cmp	r3, r0
 800e1f6:	d8d5      	bhi.n	800e1a4 <uxr_flash_output_streams+0x60>
 800e1f8:	b004      	add	sp, #16
 800e1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fe:	9b02      	ldr	r3, [sp, #8]
 800e200:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e204:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 fe93 	bl	800ef34 <uxr_stamp_session_header>
 800e20e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e210:	9a03      	ldr	r2, [sp, #12]
 800e212:	9902      	ldr	r1, [sp, #8]
 800e214:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e218:	47a8      	blx	r5
 800e21a:	f109 0901 	add.w	r9, r9, #1
 800e21e:	7e23      	ldrb	r3, [r4, #24]
 800e220:	fa5f f089 	uxtb.w	r0, r9
 800e224:	4283      	cmp	r3, r0
 800e226:	d89a      	bhi.n	800e15e <uxr_flash_output_streams+0x1a>
 800e228:	e7b2      	b.n	800e190 <uxr_flash_output_streams+0x4c>
 800e22a:	bf00      	nop

0800e22c <read_submessage_info>:
 800e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	460d      	mov	r5, r1
 800e232:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800e236:	4669      	mov	r1, sp
 800e238:	4607      	mov	r7, r0
 800e23a:	4628      	mov	r0, r5
 800e23c:	f001 ff20 	bl	8010080 <uxr_deserialize_BaseObjectReply>
 800e240:	a902      	add	r1, sp, #8
 800e242:	4604      	mov	r4, r0
 800e244:	4628      	mov	r0, r5
 800e246:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e24a:	f7fb ff1d 	bl	800a088 <ucdr_deserialize_bool>
 800e24e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e252:	4004      	ands	r4, r0
 800e254:	b2e4      	uxtb	r4, r4
 800e256:	b95b      	cbnz	r3, 800e270 <read_submessage_info+0x44>
 800e258:	a987      	add	r1, sp, #540	; 0x21c
 800e25a:	4628      	mov	r0, r5
 800e25c:	f7fb ff14 	bl	800a088 <ucdr_deserialize_bool>
 800e260:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800e264:	4606      	mov	r6, r0
 800e266:	b94b      	cbnz	r3, 800e27c <read_submessage_info+0x50>
 800e268:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e270:	a903      	add	r1, sp, #12
 800e272:	4628      	mov	r0, r5
 800e274:	f001 fd92 	bl	800fd9c <uxr_deserialize_ObjectVariant>
 800e278:	4004      	ands	r4, r0
 800e27a:	e7ed      	b.n	800e258 <read_submessage_info+0x2c>
 800e27c:	a988      	add	r1, sp, #544	; 0x220
 800e27e:	4628      	mov	r0, r5
 800e280:	f7fb ff32 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800e284:	4234      	tst	r4, r6
 800e286:	d0ef      	beq.n	800e268 <read_submessage_info+0x3c>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d0ed      	beq.n	800e268 <read_submessage_info+0x3c>
 800e28c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800e290:	2b0d      	cmp	r3, #13
 800e292:	d1e9      	bne.n	800e268 <read_submessage_info+0x3c>
 800e294:	4628      	mov	r0, r5
 800e296:	a98a      	add	r1, sp, #552	; 0x228
 800e298:	f7fc fccc 	bl	800ac34 <ucdr_deserialize_int16_t>
 800e29c:	b140      	cbz	r0, 800e2b0 <read_submessage_info+0x84>
 800e29e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	dd07      	ble.n	800e2b6 <read_submessage_info+0x8a>
 800e2a6:	f1b8 0f00 	cmp.w	r8, #0
 800e2aa:	bf14      	ite	ne
 800e2ac:	2001      	movne	r0, #1
 800e2ae:	2002      	moveq	r0, #2
 800e2b0:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800e2b4:	e7d8      	b.n	800e268 <read_submessage_info+0x3c>
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	e7fa      	b.n	800e2b0 <read_submessage_info+0x84>
 800e2ba:	bf00      	nop

0800e2bc <read_submessage_list>:
 800e2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c0:	b098      	sub	sp, #96	; 0x60
 800e2c2:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e5c8 <read_submessage_list+0x30c>
 800e2c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	4688      	mov	r8, r1
 800e2cc:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800e2d0:	aa0e      	add	r2, sp, #56	; 0x38
 800e2d2:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	f001 f810 	bl	800f2fc <uxr_read_submessage_header>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	f000 813d 	beq.w	800e55c <read_submessage_list+0x2a0>
 800e2e2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e2e6:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800e2ea:	3b02      	subs	r3, #2
 800e2ec:	2b0d      	cmp	r3, #13
 800e2ee:	d8ed      	bhi.n	800e2cc <read_submessage_list+0x10>
 800e2f0:	a101      	add	r1, pc, #4	; (adr r1, 800e2f8 <read_submessage_list+0x3c>)
 800e2f2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2f6:	bf00      	nop
 800e2f8:	0800e553 	.word	0x0800e553
 800e2fc:	0800e2cd 	.word	0x0800e2cd
 800e300:	0800e543 	.word	0x0800e543
 800e304:	0800e4e7 	.word	0x0800e4e7
 800e308:	0800e4dd 	.word	0x0800e4dd
 800e30c:	0800e2cd 	.word	0x0800e2cd
 800e310:	0800e2cd 	.word	0x0800e2cd
 800e314:	0800e43f 	.word	0x0800e43f
 800e318:	0800e3d1 	.word	0x0800e3d1
 800e31c:	0800e38f 	.word	0x0800e38f
 800e320:	0800e2cd 	.word	0x0800e2cd
 800e324:	0800e2cd 	.word	0x0800e2cd
 800e328:	0800e2cd 	.word	0x0800e2cd
 800e32c:	0800e331 	.word	0x0800e331
 800e330:	a912      	add	r1, sp, #72	; 0x48
 800e332:	4640      	mov	r0, r8
 800e334:	f002 f8d0 	bl	80104d8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e338:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	f000 8115 	beq.w	800e56c <read_submessage_list+0x2b0>
 800e342:	f001 f823 	bl	800f38c <uxr_nanos>
 800e346:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e348:	460b      	mov	r3, r1
 800e34a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e34c:	2700      	movs	r7, #0
 800e34e:	fbc9 6701 	smlal	r6, r7, r9, r1
 800e352:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e356:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e358:	4602      	mov	r2, r0
 800e35a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e35c:	460e      	mov	r6, r1
 800e35e:	2700      	movs	r7, #0
 800e360:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800e364:	9106      	str	r1, [sp, #24]
 800e366:	fbc9 6700 	smlal	r6, r7, r9, r0
 800e36a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e36c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e370:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800e372:	2700      	movs	r7, #0
 800e374:	4608      	mov	r0, r1
 800e376:	4639      	mov	r1, r7
 800e378:	fbc9 0106 	smlal	r0, r1, r9, r6
 800e37c:	e9cd 0100 	strd	r0, r1, [sp]
 800e380:	4620      	mov	r0, r4
 800e382:	47a8      	blx	r5
 800e384:	f04f 0301 	mov.w	r3, #1
 800e388:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800e38c:	e79e      	b.n	800e2cc <read_submessage_list+0x10>
 800e38e:	a912      	add	r1, sp, #72	; 0x48
 800e390:	4640      	mov	r0, r8
 800e392:	f002 f88f 	bl	80104b4 <uxr_deserialize_HEARTBEAT_Payload>
 800e396:	2100      	movs	r1, #0
 800e398:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800e39c:	f000 fe84 	bl	800f0a8 <uxr_stream_id_from_raw>
 800e3a0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f104 0008 	add.w	r0, r4, #8
 800e3ac:	9311      	str	r3, [sp, #68]	; 0x44
 800e3ae:	f000 ff69 	bl	800f284 <uxr_get_input_reliable_stream>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d08a      	beq.n	800e2cc <read_submessage_list+0x10>
 800e3b6:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800e3ba:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800e3be:	f005 fecd 	bl	801415c <uxr_process_heartbeat>
 800e3c2:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800e3c6:	462a      	mov	r2, r5
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f7ff fdf5 	bl	800dfb8 <write_submessage_acknack.isra.0>
 800e3ce:	e77d      	b.n	800e2cc <read_submessage_list+0x10>
 800e3d0:	a912      	add	r1, sp, #72	; 0x48
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	f002 f846 	bl	8010464 <uxr_deserialize_ACKNACK_Payload>
 800e3d8:	2100      	movs	r1, #0
 800e3da:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800e3de:	f000 fe63 	bl	800f0a8 <uxr_stream_id_from_raw>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e3e8:	f104 0008 	add.w	r0, r4, #8
 800e3ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3ee:	f000 ff33 	bl	800f258 <uxr_get_output_reliable_stream>
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	f43f af69 	beq.w	800e2cc <read_submessage_list+0x10>
 800e3fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800e3fe:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800e402:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800e406:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e40a:	b289      	uxth	r1, r1
 800e40c:	f006 f9f6 	bl	80147fc <uxr_process_acknack>
 800e410:	4628      	mov	r0, r5
 800e412:	f006 f9b9 	bl	8014788 <uxr_begin_output_nack_buffer_it>
 800e416:	af10      	add	r7, sp, #64	; 0x40
 800e418:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800e41c:	e005      	b.n	800e42a <read_submessage_list+0x16e>
 800e41e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e420:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e422:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e424:	e9d3 0600 	ldrd	r0, r6, [r3]
 800e428:	47b0      	blx	r6
 800e42a:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800e42e:	aa11      	add	r2, sp, #68	; 0x44
 800e430:	4639      	mov	r1, r7
 800e432:	4628      	mov	r0, r5
 800e434:	f006 f9aa 	bl	801478c <uxr_next_reliable_nack_buffer_to_send>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d1f0      	bne.n	800e41e <read_submessage_list+0x162>
 800e43c:	e746      	b.n	800e2cc <read_submessage_list+0x10>
 800e43e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800e442:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800e446:	af10      	add	r7, sp, #64	; 0x40
 800e448:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800e44c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800e450:	4639      	mov	r1, r7
 800e452:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e456:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800e45a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800e45e:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800e462:	4640      	mov	r0, r8
 800e464:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800e468:	f001 fd46 	bl	800fef8 <uxr_deserialize_BaseObjectRequest>
 800e46c:	4638      	mov	r0, r7
 800e46e:	a911      	add	r1, sp, #68	; 0x44
 800e470:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e474:	f000 fddc 	bl	800f030 <uxr_parse_base_object_request>
 800e478:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800e47c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e47e:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800e482:	9112      	str	r1, [sp, #72]	; 0x48
 800e484:	3d04      	subs	r5, #4
 800e486:	f006 060e 	and.w	r6, r6, #14
 800e48a:	b2ad      	uxth	r5, r5
 800e48c:	f1ba 0f00 	cmp.w	sl, #0
 800e490:	d006      	beq.n	800e4a0 <read_submessage_list+0x1e4>
 800e492:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	463a      	mov	r2, r7
 800e49a:	2300      	movs	r3, #0
 800e49c:	4620      	mov	r0, r4
 800e49e:	47d0      	blx	sl
 800e4a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e4a2:	b168      	cbz	r0, 800e4c0 <read_submessage_list+0x204>
 800e4a4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	3902      	subs	r1, #2
 800e4aa:	e002      	b.n	800e4b2 <read_submessage_list+0x1f6>
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	4283      	cmp	r3, r0
 800e4b0:	d006      	beq.n	800e4c0 <read_submessage_list+0x204>
 800e4b2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800e4b6:	42ba      	cmp	r2, r7
 800e4b8:	d1f8      	bne.n	800e4ac <read_submessage_list+0x1f0>
 800e4ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800e4bc:	2100      	movs	r1, #0
 800e4be:	54d1      	strb	r1, [r2, r3]
 800e4c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e4c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e4c4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800e4c8:	9302      	str	r3, [sp, #8]
 800e4ca:	e9cd 1000 	strd	r1, r0, [sp]
 800e4ce:	4633      	mov	r3, r6
 800e4d0:	462a      	mov	r2, r5
 800e4d2:	4641      	mov	r1, r8
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7ff fc57 	bl	800dd88 <read_submessage_format>
 800e4da:	e6f7      	b.n	800e2cc <read_submessage_list+0x10>
 800e4dc:	4641      	mov	r1, r8
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f7ff fea4 	bl	800e22c <read_submessage_info>
 800e4e4:	e6f2      	b.n	800e2cc <read_submessage_list+0x10>
 800e4e6:	2a00      	cmp	r2, #0
 800e4e8:	d03b      	beq.n	800e562 <read_submessage_list+0x2a6>
 800e4ea:	a912      	add	r1, sp, #72	; 0x48
 800e4ec:	4640      	mov	r0, r8
 800e4ee:	f001 ff15 	bl	801031c <uxr_deserialize_STATUS_Payload>
 800e4f2:	a910      	add	r1, sp, #64	; 0x40
 800e4f4:	aa0f      	add	r2, sp, #60	; 0x3c
 800e4f6:	a812      	add	r0, sp, #72	; 0x48
 800e4f8:	f000 fd9a 	bl	800f030 <uxr_parse_base_object_request>
 800e4fc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800e500:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e502:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800e506:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800e50a:	9111      	str	r1, [sp, #68]	; 0x44
 800e50c:	b135      	cbz	r5, 800e51c <read_submessage_list+0x260>
 800e50e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	4632      	mov	r2, r6
 800e516:	463b      	mov	r3, r7
 800e518:	4620      	mov	r0, r4
 800e51a:	47a8      	blx	r5
 800e51c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f43f aed4 	beq.w	800e2cc <read_submessage_list+0x10>
 800e524:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e526:	2100      	movs	r1, #0
 800e528:	3802      	subs	r0, #2
 800e52a:	e003      	b.n	800e534 <read_submessage_list+0x278>
 800e52c:	3101      	adds	r1, #1
 800e52e:	4299      	cmp	r1, r3
 800e530:	f43f aecc 	beq.w	800e2cc <read_submessage_list+0x10>
 800e534:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800e538:	42b2      	cmp	r2, r6
 800e53a:	d1f7      	bne.n	800e52c <read_submessage_list+0x270>
 800e53c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e53e:	545f      	strb	r7, [r3, r1]
 800e540:	e6c4      	b.n	800e2cc <read_submessage_list+0x10>
 800e542:	2a00      	cmp	r2, #0
 800e544:	f47f aec2 	bne.w	800e2cc <read_submessage_list+0x10>
 800e548:	4641      	mov	r1, r8
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 fcb4 	bl	800eeb8 <uxr_read_create_session_status>
 800e550:	e6bc      	b.n	800e2cc <read_submessage_list+0x10>
 800e552:	4641      	mov	r1, r8
 800e554:	4620      	mov	r0, r4
 800e556:	f7ff fcf9 	bl	800df4c <read_submessage_get_info>
 800e55a:	e6b7      	b.n	800e2cc <read_submessage_list+0x10>
 800e55c:	b018      	add	sp, #96	; 0x60
 800e55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e562:	4641      	mov	r1, r8
 800e564:	4620      	mov	r0, r4
 800e566:	f000 fcb3 	bl	800eed0 <uxr_read_delete_session_status>
 800e56a:	e6af      	b.n	800e2cc <read_submessage_list+0x10>
 800e56c:	f000 ff0e 	bl	800f38c <uxr_nanos>
 800e570:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e572:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e576:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e578:	2700      	movs	r7, #0
 800e57a:	fbc9 6703 	smlal	r6, r7, r9, r3
 800e57e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e580:	eb16 0c00 	adds.w	ip, r6, r0
 800e584:	4618      	mov	r0, r3
 800e586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e588:	eb47 0e01 	adc.w	lr, r7, r1
 800e58c:	461e      	mov	r6, r3
 800e58e:	2100      	movs	r1, #0
 800e590:	2700      	movs	r7, #0
 800e592:	fbc9 0105 	smlal	r0, r1, r9, r5
 800e596:	fbc9 6702 	smlal	r6, r7, r9, r2
 800e59a:	1983      	adds	r3, r0, r6
 800e59c:	eb41 0207 	adc.w	r2, r1, r7
 800e5a0:	ebbc 0303 	subs.w	r3, ip, r3
 800e5a4:	9308      	str	r3, [sp, #32]
 800e5a6:	eb6e 0302 	sbc.w	r3, lr, r2
 800e5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ac:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e5b0:	0fd3      	lsrs	r3, r2, #31
 800e5b2:	18c9      	adds	r1, r1, r3
 800e5b4:	f142 0200 	adc.w	r2, r2, #0
 800e5b8:	084b      	lsrs	r3, r1, #1
 800e5ba:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800e5be:	1052      	asrs	r2, r2, #1
 800e5c0:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800e5c4:	e6de      	b.n	800e384 <read_submessage_list+0xc8>
 800e5c6:	bf00      	nop
 800e5c8:	3b9aca00 	.word	0x3b9aca00

0800e5cc <listen_message_reliably>:
 800e5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d0:	1e0b      	subs	r3, r1, #0
 800e5d2:	b09d      	sub	sp, #116	; 0x74
 800e5d4:	bfb8      	it	lt
 800e5d6:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800e5da:	9305      	str	r3, [sp, #20]
 800e5dc:	4607      	mov	r7, r0
 800e5de:	f000 feb9 	bl	800f354 <uxr_millis>
 800e5e2:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e5e6:	4681      	mov	r9, r0
 800e5e8:	2a00      	cmp	r2, #0
 800e5ea:	f000 8095 	beq.w	800e718 <listen_message_reliably+0x14c>
 800e5ee:	2600      	movs	r6, #0
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5f4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e5f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	4688      	mov	r8, r1
 800e600:	46ca      	mov	sl, r9
 800e602:	e00f      	b.n	800e624 <listen_message_reliably+0x58>
 800e604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e608:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e60c:	42a2      	cmp	r2, r4
 800e60e:	eb73 0105 	sbcs.w	r1, r3, r5
 800e612:	bfb8      	it	lt
 800e614:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800e618:	3601      	adds	r6, #1
 800e61a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e61e:	b2f0      	uxtb	r0, r6
 800e620:	4283      	cmp	r3, r0
 800e622:	d951      	bls.n	800e6c8 <listen_message_reliably+0xfc>
 800e624:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e628:	2201      	movs	r2, #1
 800e62a:	2102      	movs	r1, #2
 800e62c:	f000 fd12 	bl	800f054 <uxr_stream_id>
 800e630:	00e4      	lsls	r4, r4, #3
 800e632:	f104 0520 	add.w	r5, r4, #32
 800e636:	443d      	add	r5, r7
 800e638:	4601      	mov	r1, r0
 800e63a:	4643      	mov	r3, r8
 800e63c:	4652      	mov	r2, sl
 800e63e:	4628      	mov	r0, r5
 800e640:	9109      	str	r1, [sp, #36]	; 0x24
 800e642:	f006 f875 	bl	8014730 <uxr_update_output_stream_heartbeat_timestamp>
 800e646:	193b      	adds	r3, r7, r4
 800e648:	2800      	cmp	r0, #0
 800e64a:	d0db      	beq.n	800e604 <listen_message_reliably+0x38>
 800e64c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800e650:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800e654:	4638      	mov	r0, r7
 800e656:	f000 fcc5 	bl	800efe4 <uxr_session_header_offset>
 800e65a:	3501      	adds	r5, #1
 800e65c:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800e660:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e664:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800e668:	9000      	str	r0, [sp, #0]
 800e66a:	2300      	movs	r3, #0
 800e66c:	4658      	mov	r0, fp
 800e66e:	2211      	movs	r2, #17
 800e670:	a90c      	add	r1, sp, #48	; 0x30
 800e672:	f7fc fe51 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800e676:	2300      	movs	r3, #0
 800e678:	2205      	movs	r2, #5
 800e67a:	210b      	movs	r1, #11
 800e67c:	4658      	mov	r0, fp
 800e67e:	f000 fe23 	bl	800f2c8 <uxr_buffer_submessage_header>
 800e682:	8968      	ldrh	r0, [r5, #10]
 800e684:	2101      	movs	r1, #1
 800e686:	f006 f911 	bl	80148ac <uxr_seq_num_add>
 800e68a:	892a      	ldrh	r2, [r5, #8]
 800e68c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e690:	4603      	mov	r3, r0
 800e692:	a90a      	add	r1, sp, #40	; 0x28
 800e694:	4658      	mov	r0, fp
 800e696:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800e69a:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800e69e:	f001 fef5 	bl	801048c <uxr_serialize_HEARTBEAT_Payload>
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f000 fc43 	bl	800ef34 <uxr_stamp_session_header>
 800e6ae:	4658      	mov	r0, fp
 800e6b0:	f7fc fe70 	bl	800b394 <ucdr_buffer_length>
 800e6b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	a90c      	add	r1, sp, #48	; 0x30
 800e6ba:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e6be:	443c      	add	r4, r7
 800e6c0:	47a8      	blx	r5
 800e6c2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800e6c6:	e79f      	b.n	800e608 <listen_message_reliably+0x3c>
 800e6c8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800e6cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e6d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e6d4:	4294      	cmp	r4, r2
 800e6d6:	bf08      	it	eq
 800e6d8:	428b      	cmpeq	r3, r1
 800e6da:	d01d      	beq.n	800e718 <listen_message_reliably+0x14c>
 800e6dc:	eba3 030a 	sub.w	r3, r3, sl
 800e6e0:	9905      	ldr	r1, [sp, #20]
 800e6e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bf08      	it	eq
 800e6e8:	2301      	moveq	r3, #1
 800e6ea:	4299      	cmp	r1, r3
 800e6ec:	bfa8      	it	ge
 800e6ee:	4619      	movge	r1, r3
 800e6f0:	6894      	ldr	r4, [r2, #8]
 800e6f2:	6810      	ldr	r0, [r2, #0]
 800e6f4:	4689      	mov	r9, r1
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	aa08      	add	r2, sp, #32
 800e6fa:	a907      	add	r1, sp, #28
 800e6fc:	47a0      	blx	r4
 800e6fe:	b968      	cbnz	r0, 800e71c <listen_message_reliably+0x150>
 800e700:	9b05      	ldr	r3, [sp, #20]
 800e702:	eba3 0309 	sub.w	r3, r3, r9
 800e706:	2b00      	cmp	r3, #0
 800e708:	9305      	str	r3, [sp, #20]
 800e70a:	f73f af68 	bgt.w	800e5de <listen_message_reliably+0x12>
 800e70e:	4604      	mov	r4, r0
 800e710:	4620      	mov	r0, r4
 800e712:	b01d      	add	sp, #116	; 0x74
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	9b05      	ldr	r3, [sp, #20]
 800e71a:	e7e1      	b.n	800e6e0 <listen_message_reliably+0x114>
 800e71c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e720:	4604      	mov	r4, r0
 800e722:	a80c      	add	r0, sp, #48	; 0x30
 800e724:	f7fc fe0a 	bl	800b33c <ucdr_init_buffer>
 800e728:	2500      	movs	r5, #0
 800e72a:	a90c      	add	r1, sp, #48	; 0x30
 800e72c:	f10d 031a 	add.w	r3, sp, #26
 800e730:	aa06      	add	r2, sp, #24
 800e732:	4638      	mov	r0, r7
 800e734:	f88d 5018 	strb.w	r5, [sp, #24]
 800e738:	f000 fc12 	bl	800ef60 <uxr_read_session_header>
 800e73c:	b918      	cbnz	r0, 800e746 <listen_message_reliably+0x17a>
 800e73e:	4620      	mov	r0, r4
 800e740:	b01d      	add	sp, #116	; 0x74
 800e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e746:	4629      	mov	r1, r5
 800e748:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e74c:	f000 fcac 	bl	800f0a8 <uxr_stream_id_from_raw>
 800e750:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e754:	2e01      	cmp	r6, #1
 800e756:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e75a:	900a      	str	r0, [sp, #40]	; 0x28
 800e75c:	fa5f fa80 	uxtb.w	sl, r0
 800e760:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e764:	d04b      	beq.n	800e7fe <listen_message_reliably+0x232>
 800e766:	2e02      	cmp	r6, #2
 800e768:	d00f      	beq.n	800e78a <listen_message_reliably+0x1be>
 800e76a:	2e00      	cmp	r6, #0
 800e76c:	d1e7      	bne.n	800e73e <listen_message_reliably+0x172>
 800e76e:	4631      	mov	r1, r6
 800e770:	4630      	mov	r0, r6
 800e772:	f000 fc99 	bl	800f0a8 <uxr_stream_id_from_raw>
 800e776:	a90c      	add	r1, sp, #48	; 0x30
 800e778:	4602      	mov	r2, r0
 800e77a:	4638      	mov	r0, r7
 800e77c:	920a      	str	r2, [sp, #40]	; 0x28
 800e77e:	f7ff fd9d 	bl	800e2bc <read_submessage_list>
 800e782:	4620      	mov	r0, r4
 800e784:	b01d      	add	sp, #116	; 0x74
 800e786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78a:	4629      	mov	r1, r5
 800e78c:	f107 0008 	add.w	r0, r7, #8
 800e790:	f000 fd78 	bl	800f284 <uxr_get_input_reliable_stream>
 800e794:	4680      	mov	r8, r0
 800e796:	b348      	cbz	r0, 800e7ec <listen_message_reliably+0x220>
 800e798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e79a:	9202      	str	r2, [sp, #8]
 800e79c:	a80c      	add	r0, sp, #48	; 0x30
 800e79e:	f7fc fdfd 	bl	800b39c <ucdr_buffer_remaining>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	f10d 0019 	add.w	r0, sp, #25
 800e7a8:	9000      	str	r0, [sp, #0]
 800e7aa:	9a02      	ldr	r2, [sp, #8]
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	f005 fbd6 	bl	8013f60 <uxr_receive_reliable_message>
 800e7b4:	b1d0      	cbz	r0, 800e7ec <listen_message_reliably+0x220>
 800e7b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d037      	beq.n	800e82e <listen_message_reliably+0x262>
 800e7be:	ae14      	add	r6, sp, #80	; 0x50
 800e7c0:	f04f 0902 	mov.w	r9, #2
 800e7c4:	e008      	b.n	800e7d8 <listen_message_reliably+0x20c>
 800e7c6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800e7ca:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e7ce:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800e7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7d4:	f7ff fd72 	bl	800e2bc <read_submessage_list>
 800e7d8:	4631      	mov	r1, r6
 800e7da:	2204      	movs	r2, #4
 800e7dc:	4640      	mov	r0, r8
 800e7de:	f005 fc3f 	bl	8014060 <uxr_next_input_reliable_buffer_available>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1ec      	bne.n	800e7c6 <listen_message_reliably+0x1fa>
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	462a      	mov	r2, r5
 800e7f0:	4651      	mov	r1, sl
 800e7f2:	f7ff fbe1 	bl	800dfb8 <write_submessage_acknack.isra.0>
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	b01d      	add	sp, #116	; 0x74
 800e7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fe:	4629      	mov	r1, r5
 800e800:	f107 0008 	add.w	r0, r7, #8
 800e804:	f000 fd34 	bl	800f270 <uxr_get_input_best_effort_stream>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d098      	beq.n	800e73e <listen_message_reliably+0x172>
 800e80c:	4649      	mov	r1, r9
 800e80e:	f005 fb23 	bl	8013e58 <uxr_receive_best_effort_message>
 800e812:	2800      	cmp	r0, #0
 800e814:	d093      	beq.n	800e73e <listen_message_reliably+0x172>
 800e816:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800e81a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e81e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e824:	a90c      	add	r1, sp, #48	; 0x30
 800e826:	4638      	mov	r0, r7
 800e828:	f7ff fd48 	bl	800e2bc <read_submessage_list>
 800e82c:	e787      	b.n	800e73e <listen_message_reliably+0x172>
 800e82e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800e832:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800e836:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e83a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e83c:	a90c      	add	r1, sp, #48	; 0x30
 800e83e:	4638      	mov	r0, r7
 800e840:	f7ff fd3c 	bl	800e2bc <read_submessage_list>
 800e844:	e7bb      	b.n	800e7be <listen_message_reliably+0x1f2>
 800e846:	bf00      	nop

0800e848 <uxr_run_session_timeout>:
 800e848:	b570      	push	{r4, r5, r6, lr}
 800e84a:	4604      	mov	r4, r0
 800e84c:	460d      	mov	r5, r1
 800e84e:	f000 fd81 	bl	800f354 <uxr_millis>
 800e852:	4606      	mov	r6, r0
 800e854:	4620      	mov	r0, r4
 800e856:	f7ff fc75 	bl	800e144 <uxr_flash_output_streams>
 800e85a:	4629      	mov	r1, r5
 800e85c:	4620      	mov	r0, r4
 800e85e:	f7ff feb5 	bl	800e5cc <listen_message_reliably>
 800e862:	f000 fd77 	bl	800f354 <uxr_millis>
 800e866:	1b83      	subs	r3, r0, r6
 800e868:	1ae9      	subs	r1, r5, r3
 800e86a:	2900      	cmp	r1, #0
 800e86c:	dcf6      	bgt.n	800e85c <uxr_run_session_timeout+0x14>
 800e86e:	f104 0008 	add.w	r0, r4, #8
 800e872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e876:	f000 bd11 	b.w	800f29c <uxr_output_streams_confirmed>
 800e87a:	bf00      	nop

0800e87c <uxr_run_session_until_data>:
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	4604      	mov	r4, r0
 800e880:	460d      	mov	r5, r1
 800e882:	f000 fd67 	bl	800f354 <uxr_millis>
 800e886:	4606      	mov	r6, r0
 800e888:	4620      	mov	r0, r4
 800e88a:	f7ff fc5b 	bl	800e144 <uxr_flash_output_streams>
 800e88e:	2300      	movs	r3, #0
 800e890:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800e894:	4629      	mov	r1, r5
 800e896:	e005      	b.n	800e8a4 <uxr_run_session_until_data+0x28>
 800e898:	f000 fd5c 	bl	800f354 <uxr_millis>
 800e89c:	1b83      	subs	r3, r0, r6
 800e89e:	1ae9      	subs	r1, r5, r3
 800e8a0:	2900      	cmp	r1, #0
 800e8a2:	dd07      	ble.n	800e8b4 <uxr_run_session_until_data+0x38>
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f7ff fe91 	bl	800e5cc <listen_message_reliably>
 800e8aa:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d0f2      	beq.n	800e898 <uxr_run_session_until_data+0x1c>
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ba:	bf00      	nop

0800e8bc <uxr_run_session_until_confirm_delivery>:
 800e8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	460d      	mov	r5, r1
 800e8c4:	f000 fd46 	bl	800f354 <uxr_millis>
 800e8c8:	4607      	mov	r7, r0
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7ff fc3a 	bl	800e144 <uxr_flash_output_streams>
 800e8d0:	2d00      	cmp	r5, #0
 800e8d2:	f106 0808 	add.w	r8, r6, #8
 800e8d6:	bfa8      	it	ge
 800e8d8:	462c      	movge	r4, r5
 800e8da:	da07      	bge.n	800e8ec <uxr_run_session_until_confirm_delivery+0x30>
 800e8dc:	e00e      	b.n	800e8fc <uxr_run_session_until_confirm_delivery+0x40>
 800e8de:	f7ff fe75 	bl	800e5cc <listen_message_reliably>
 800e8e2:	f000 fd37 	bl	800f354 <uxr_millis>
 800e8e6:	1bc3      	subs	r3, r0, r7
 800e8e8:	1aec      	subs	r4, r5, r3
 800e8ea:	d407      	bmi.n	800e8fc <uxr_run_session_until_confirm_delivery+0x40>
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	f000 fcd5 	bl	800f29c <uxr_output_streams_confirmed>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d0f0      	beq.n	800e8de <uxr_run_session_until_confirm_delivery+0x22>
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e902:	f000 bccb 	b.w	800f29c <uxr_output_streams_confirmed>
 800e906:	bf00      	nop

0800e908 <uxr_run_session_until_all_status>:
 800e908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e90c:	9d08      	ldr	r5, [sp, #32]
 800e90e:	460f      	mov	r7, r1
 800e910:	4692      	mov	sl, r2
 800e912:	461c      	mov	r4, r3
 800e914:	4606      	mov	r6, r0
 800e916:	f7ff fc15 	bl	800e144 <uxr_flash_output_streams>
 800e91a:	b125      	cbz	r5, 800e926 <uxr_run_session_until_all_status+0x1e>
 800e91c:	462a      	mov	r2, r5
 800e91e:	21ff      	movs	r1, #255	; 0xff
 800e920:	4620      	mov	r0, r4
 800e922:	f006 fdf7 	bl	8015514 <memset>
 800e926:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800e92a:	67f5      	str	r5, [r6, #124]	; 0x7c
 800e92c:	f000 fd12 	bl	800f354 <uxr_millis>
 800e930:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800e934:	f1aa 0a02 	sub.w	sl, sl, #2
 800e938:	4680      	mov	r8, r0
 800e93a:	4639      	mov	r1, r7
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7ff fe45 	bl	800e5cc <listen_message_reliably>
 800e942:	f000 fd07 	bl	800f354 <uxr_millis>
 800e946:	eba0 0008 	sub.w	r0, r0, r8
 800e94a:	1a39      	subs	r1, r7, r0
 800e94c:	b33d      	cbz	r5, 800e99e <uxr_run_session_until_all_status+0x96>
 800e94e:	46cc      	mov	ip, r9
 800e950:	464a      	mov	r2, r9
 800e952:	2301      	movs	r3, #1
 800e954:	e002      	b.n	800e95c <uxr_run_session_until_all_status+0x54>
 800e956:	42ab      	cmp	r3, r5
 800e958:	d20c      	bcs.n	800e974 <uxr_run_session_until_all_status+0x6c>
 800e95a:	3301      	adds	r3, #1
 800e95c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800e960:	2cff      	cmp	r4, #255	; 0xff
 800e962:	d1f8      	bne.n	800e956 <uxr_run_session_until_all_status+0x4e>
 800e964:	42ab      	cmp	r3, r5
 800e966:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800e96a:	d213      	bcs.n	800e994 <uxr_run_session_until_all_status+0x8c>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d0f4      	beq.n	800e95a <uxr_run_session_until_all_status+0x52>
 800e970:	2900      	cmp	r1, #0
 800e972:	dce3      	bgt.n	800e93c <uxr_run_session_until_all_status+0x34>
 800e974:	2300      	movs	r3, #0
 800e976:	444d      	add	r5, r9
 800e978:	67f3      	str	r3, [r6, #124]	; 0x7c
 800e97a:	e001      	b.n	800e980 <uxr_run_session_until_all_status+0x78>
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d812      	bhi.n	800e9a6 <uxr_run_session_until_all_status+0x9e>
 800e980:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e984:	4565      	cmp	r5, ip
 800e986:	d1f9      	bne.n	800e97c <uxr_run_session_until_all_status+0x74>
 800e988:	2b01      	cmp	r3, #1
 800e98a:	bf8c      	ite	hi
 800e98c:	2000      	movhi	r0, #0
 800e98e:	2001      	movls	r0, #1
 800e990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e994:	2900      	cmp	r1, #0
 800e996:	dded      	ble.n	800e974 <uxr_run_session_until_all_status+0x6c>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d1cf      	bne.n	800e93c <uxr_run_session_until_all_status+0x34>
 800e99c:	e7ea      	b.n	800e974 <uxr_run_session_until_all_status+0x6c>
 800e99e:	67f5      	str	r5, [r6, #124]	; 0x7c
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e9ac <uxr_create_session>:
 800e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	ed2d 8b02 	vpush	{d8}
 800e9b4:	f100 0808 	add.w	r8, r0, #8
 800e9b8:	b0a9      	sub	sp, #164	; 0xa4
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4640      	mov	r0, r8
 800e9be:	f000 fba9 	bl	800f114 <uxr_reset_stream_storage>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 fb0e 	bl	800efe4 <uxr_session_header_offset>
 800e9c8:	a909      	add	r1, sp, #36	; 0x24
 800e9ca:	9000      	str	r0, [sp, #0]
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	a810      	add	r0, sp, #64	; 0x40
 800e9d0:	221c      	movs	r2, #28
 800e9d2:	f7fc fca1 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800e9d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e9d8:	8a1a      	ldrh	r2, [r3, #16]
 800e9da:	3a04      	subs	r2, #4
 800e9dc:	b292      	uxth	r2, r2
 800e9de:	4620      	mov	r0, r4
 800e9e0:	a910      	add	r1, sp, #64	; 0x40
 800e9e2:	f000 fa23 	bl	800ee2c <uxr_buffer_create_session>
 800e9e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f000 fa8f 	bl	800ef0c <uxr_stamp_create_session_header>
 800e9ee:	a810      	add	r0, sp, #64	; 0x40
 800e9f0:	f7fc fcd0 	bl	800b394 <ucdr_buffer_length>
 800e9f4:	23ff      	movs	r3, #255	; 0xff
 800e9f6:	ee08 0a10 	vmov	s16, r0
 800e9fa:	7163      	strb	r3, [r4, #5]
 800e9fc:	f04f 090a 	mov.w	r9, #10
 800ea00:	46c2      	mov	sl, r8
 800ea02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ea04:	ee18 2a10 	vmov	r2, s16
 800ea08:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ea0c:	a909      	add	r1, sp, #36	; 0x24
 800ea0e:	47a8      	blx	r5
 800ea10:	f000 fca0 	bl	800f354 <uxr_millis>
 800ea14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea18:	9002      	str	r0, [sp, #8]
 800ea1a:	e00c      	b.n	800ea36 <uxr_create_session+0x8a>
 800ea1c:	f000 fc9a 	bl	800f354 <uxr_millis>
 800ea20:	9b02      	ldr	r3, [sp, #8]
 800ea22:	7962      	ldrb	r2, [r4, #5]
 800ea24:	1ac0      	subs	r0, r0, r3
 800ea26:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f340 8094 	ble.w	800eb58 <uxr_create_session+0x1ac>
 800ea30:	2aff      	cmp	r2, #255	; 0xff
 800ea32:	f040 8097 	bne.w	800eb64 <uxr_create_session+0x1b8>
 800ea36:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ea38:	a905      	add	r1, sp, #20
 800ea3a:	6895      	ldr	r5, [r2, #8]
 800ea3c:	6810      	ldr	r0, [r2, #0]
 800ea3e:	aa06      	add	r2, sp, #24
 800ea40:	47a8      	blx	r5
 800ea42:	2800      	cmp	r0, #0
 800ea44:	d0ea      	beq.n	800ea1c <uxr_create_session+0x70>
 800ea46:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800ea4a:	a818      	add	r0, sp, #96	; 0x60
 800ea4c:	f7fc fc76 	bl	800b33c <ucdr_init_buffer>
 800ea50:	2500      	movs	r5, #0
 800ea52:	f10d 0312 	add.w	r3, sp, #18
 800ea56:	aa04      	add	r2, sp, #16
 800ea58:	a918      	add	r1, sp, #96	; 0x60
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f88d 5010 	strb.w	r5, [sp, #16]
 800ea60:	f000 fa7e 	bl	800ef60 <uxr_read_session_header>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d0d9      	beq.n	800ea1c <uxr_create_session+0x70>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800ea6e:	f000 fb1b 	bl	800f0a8 <uxr_stream_id_from_raw>
 800ea72:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ea76:	2f01      	cmp	r7, #1
 800ea78:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800ea7c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800ea80:	fa5f f880 	uxtb.w	r8, r0
 800ea84:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800ea88:	d04d      	beq.n	800eb26 <uxr_create_session+0x17a>
 800ea8a:	2f02      	cmp	r7, #2
 800ea8c:	d00c      	beq.n	800eaa8 <uxr_create_session+0xfc>
 800ea8e:	2f00      	cmp	r7, #0
 800ea90:	d1c4      	bne.n	800ea1c <uxr_create_session+0x70>
 800ea92:	4639      	mov	r1, r7
 800ea94:	4638      	mov	r0, r7
 800ea96:	f000 fb07 	bl	800f0a8 <uxr_stream_id_from_raw>
 800ea9a:	a918      	add	r1, sp, #96	; 0x60
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	9208      	str	r2, [sp, #32]
 800eaa2:	f7ff fc0b 	bl	800e2bc <read_submessage_list>
 800eaa6:	e7b9      	b.n	800ea1c <uxr_create_session+0x70>
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	4650      	mov	r0, sl
 800eaac:	f000 fbea 	bl	800f284 <uxr_get_input_reliable_stream>
 800eab0:	4606      	mov	r6, r0
 800eab2:	b390      	cbz	r0, 800eb1a <uxr_create_session+0x16e>
 800eab4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eab6:	9203      	str	r2, [sp, #12]
 800eab8:	a818      	add	r0, sp, #96	; 0x60
 800eaba:	f7fc fc6f 	bl	800b39c <ucdr_buffer_remaining>
 800eabe:	4603      	mov	r3, r0
 800eac0:	f10d 0011 	add.w	r0, sp, #17
 800eac4:	9000      	str	r0, [sp, #0]
 800eac6:	9a03      	ldr	r2, [sp, #12]
 800eac8:	4659      	mov	r1, fp
 800eaca:	4630      	mov	r0, r6
 800eacc:	f005 fa48 	bl	8013f60 <uxr_receive_reliable_message>
 800ead0:	b318      	cbz	r0, 800eb1a <uxr_create_session+0x16e>
 800ead2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800ead6:	b9b3      	cbnz	r3, 800eb06 <uxr_create_session+0x15a>
 800ead8:	f88d 8020 	strb.w	r8, [sp, #32]
 800eadc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800eae0:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800eae4:	9a08      	ldr	r2, [sp, #32]
 800eae6:	a918      	add	r1, sp, #96	; 0x60
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7ff fbe7 	bl	800e2bc <read_submessage_list>
 800eaee:	e00a      	b.n	800eb06 <uxr_create_session+0x15a>
 800eaf0:	f04f 0302 	mov.w	r3, #2
 800eaf4:	f88d 8020 	strb.w	r8, [sp, #32]
 800eaf8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800eafc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800eb00:	9a08      	ldr	r2, [sp, #32]
 800eb02:	f7ff fbdb 	bl	800e2bc <read_submessage_list>
 800eb06:	a920      	add	r1, sp, #128	; 0x80
 800eb08:	2204      	movs	r2, #4
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f005 faa8 	bl	8014060 <uxr_next_input_reliable_buffer_available>
 800eb10:	4603      	mov	r3, r0
 800eb12:	a920      	add	r1, sp, #128	; 0x80
 800eb14:	4620      	mov	r0, r4
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1ea      	bne.n	800eaf0 <uxr_create_session+0x144>
 800eb1a:	462a      	mov	r2, r5
 800eb1c:	4641      	mov	r1, r8
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f7ff fa4a 	bl	800dfb8 <write_submessage_acknack.isra.0>
 800eb24:	e77a      	b.n	800ea1c <uxr_create_session+0x70>
 800eb26:	4629      	mov	r1, r5
 800eb28:	4650      	mov	r0, sl
 800eb2a:	f000 fba1 	bl	800f270 <uxr_get_input_best_effort_stream>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f43f af74 	beq.w	800ea1c <uxr_create_session+0x70>
 800eb34:	4659      	mov	r1, fp
 800eb36:	f005 f98f 	bl	8013e58 <uxr_receive_best_effort_message>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	f43f af6e 	beq.w	800ea1c <uxr_create_session+0x70>
 800eb40:	f88d 8020 	strb.w	r8, [sp, #32]
 800eb44:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800eb48:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800eb4c:	9a08      	ldr	r2, [sp, #32]
 800eb4e:	a918      	add	r1, sp, #96	; 0x60
 800eb50:	4620      	mov	r0, r4
 800eb52:	f7ff fbb3 	bl	800e2bc <read_submessage_list>
 800eb56:	e761      	b.n	800ea1c <uxr_create_session+0x70>
 800eb58:	f1b9 0901 	subs.w	r9, r9, #1
 800eb5c:	d002      	beq.n	800eb64 <uxr_create_session+0x1b8>
 800eb5e:	2aff      	cmp	r2, #255	; 0xff
 800eb60:	f43f af4f 	beq.w	800ea02 <uxr_create_session+0x56>
 800eb64:	b12a      	cbz	r2, 800eb72 <uxr_create_session+0x1c6>
 800eb66:	2000      	movs	r0, #0
 800eb68:	b029      	add	sp, #164	; 0xa4
 800eb6a:	ecbd 8b02 	vpop	{d8}
 800eb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb72:	4650      	mov	r0, sl
 800eb74:	f000 face 	bl	800f114 <uxr_reset_stream_storage>
 800eb78:	2001      	movs	r0, #1
 800eb7a:	b029      	add	sp, #164	; 0xa4
 800eb7c:	ecbd 8b02 	vpop	{d8}
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb84 <wait_session_status>:
 800eb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb88:	4604      	mov	r4, r0
 800eb8a:	b09d      	sub	sp, #116	; 0x74
 800eb8c:	20ff      	movs	r0, #255	; 0xff
 800eb8e:	7160      	strb	r0, [r4, #5]
 800eb90:	9304      	str	r3, [sp, #16]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f000 80b8 	beq.w	800ed08 <wait_session_status+0x184>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	468b      	mov	fp, r1
 800eb9c:	4692      	mov	sl, r2
 800eb9e:	9303      	str	r3, [sp, #12]
 800eba0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eba2:	4652      	mov	r2, sl
 800eba4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800eba8:	4659      	mov	r1, fp
 800ebaa:	47a8      	blx	r5
 800ebac:	f000 fbd2 	bl	800f354 <uxr_millis>
 800ebb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	e009      	b.n	800ebcc <wait_session_status+0x48>
 800ebb8:	f000 fbcc 	bl	800f354 <uxr_millis>
 800ebbc:	1b40      	subs	r0, r0, r5
 800ebbe:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	dd42      	ble.n	800ec4c <wait_session_status+0xc8>
 800ebc6:	7960      	ldrb	r0, [r4, #5]
 800ebc8:	28ff      	cmp	r0, #255	; 0xff
 800ebca:	d148      	bne.n	800ec5e <wait_session_status+0xda>
 800ebcc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ebce:	a908      	add	r1, sp, #32
 800ebd0:	6896      	ldr	r6, [r2, #8]
 800ebd2:	6810      	ldr	r0, [r2, #0]
 800ebd4:	aa09      	add	r2, sp, #36	; 0x24
 800ebd6:	47b0      	blx	r6
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d0ed      	beq.n	800ebb8 <wait_session_status+0x34>
 800ebdc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ebe0:	a80c      	add	r0, sp, #48	; 0x30
 800ebe2:	f7fc fbab 	bl	800b33c <ucdr_init_buffer>
 800ebe6:	2600      	movs	r6, #0
 800ebe8:	f10d 031e 	add.w	r3, sp, #30
 800ebec:	aa07      	add	r2, sp, #28
 800ebee:	a90c      	add	r1, sp, #48	; 0x30
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f88d 601c 	strb.w	r6, [sp, #28]
 800ebf6:	f000 f9b3 	bl	800ef60 <uxr_read_session_header>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0dc      	beq.n	800ebb8 <wait_session_status+0x34>
 800ebfe:	4631      	mov	r1, r6
 800ec00:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ec04:	f000 fa50 	bl	800f0a8 <uxr_stream_id_from_raw>
 800ec08:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ec0c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ec10:	9302      	str	r3, [sp, #8]
 800ec12:	2f01      	cmp	r7, #1
 800ec14:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800ec18:	fa5f f880 	uxtb.w	r8, r0
 800ec1c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ec20:	d058      	beq.n	800ecd4 <wait_session_status+0x150>
 800ec22:	2f02      	cmp	r7, #2
 800ec24:	d021      	beq.n	800ec6a <wait_session_status+0xe6>
 800ec26:	2f00      	cmp	r7, #0
 800ec28:	d1c6      	bne.n	800ebb8 <wait_session_status+0x34>
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	f000 fa3b 	bl	800f0a8 <uxr_stream_id_from_raw>
 800ec32:	a90c      	add	r1, sp, #48	; 0x30
 800ec34:	4602      	mov	r2, r0
 800ec36:	4620      	mov	r0, r4
 800ec38:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec3a:	f7ff fb3f 	bl	800e2bc <read_submessage_list>
 800ec3e:	f000 fb89 	bl	800f354 <uxr_millis>
 800ec42:	1b40      	subs	r0, r0, r5
 800ec44:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	dcbc      	bgt.n	800ebc6 <wait_session_status+0x42>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	9a04      	ldr	r2, [sp, #16]
 800ec50:	7960      	ldrb	r0, [r4, #5]
 800ec52:	3301      	adds	r3, #1
 800ec54:	429a      	cmp	r2, r3
 800ec56:	9303      	str	r3, [sp, #12]
 800ec58:	d001      	beq.n	800ec5e <wait_session_status+0xda>
 800ec5a:	28ff      	cmp	r0, #255	; 0xff
 800ec5c:	d0a0      	beq.n	800eba0 <wait_session_status+0x1c>
 800ec5e:	38ff      	subs	r0, #255	; 0xff
 800ec60:	bf18      	it	ne
 800ec62:	2001      	movne	r0, #1
 800ec64:	b01d      	add	sp, #116	; 0x74
 800ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	f104 0008 	add.w	r0, r4, #8
 800ec70:	f000 fb08 	bl	800f284 <uxr_get_input_reliable_stream>
 800ec74:	4681      	mov	r9, r0
 800ec76:	b338      	cbz	r0, 800ecc8 <wait_session_status+0x144>
 800ec78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec7a:	9205      	str	r2, [sp, #20]
 800ec7c:	a80c      	add	r0, sp, #48	; 0x30
 800ec7e:	f7fc fb8d 	bl	800b39c <ucdr_buffer_remaining>
 800ec82:	4603      	mov	r3, r0
 800ec84:	f10d 001d 	add.w	r0, sp, #29
 800ec88:	9000      	str	r0, [sp, #0]
 800ec8a:	9a05      	ldr	r2, [sp, #20]
 800ec8c:	9902      	ldr	r1, [sp, #8]
 800ec8e:	4648      	mov	r0, r9
 800ec90:	f005 f966 	bl	8013f60 <uxr_receive_reliable_message>
 800ec94:	b1c0      	cbz	r0, 800ecc8 <wait_session_status+0x144>
 800ec96:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ec9a:	b95b      	cbnz	r3, 800ecb4 <wait_session_status+0x130>
 800ec9c:	e03c      	b.n	800ed18 <wait_session_status+0x194>
 800ec9e:	f04f 0302 	mov.w	r3, #2
 800eca2:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800eca6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ecaa:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ecae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecb0:	f7ff fb04 	bl	800e2bc <read_submessage_list>
 800ecb4:	a914      	add	r1, sp, #80	; 0x50
 800ecb6:	2204      	movs	r2, #4
 800ecb8:	4648      	mov	r0, r9
 800ecba:	f005 f9d1 	bl	8014060 <uxr_next_input_reliable_buffer_available>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	a914      	add	r1, sp, #80	; 0x50
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1ea      	bne.n	800ec9e <wait_session_status+0x11a>
 800ecc8:	4632      	mov	r2, r6
 800ecca:	4641      	mov	r1, r8
 800eccc:	4620      	mov	r0, r4
 800ecce:	f7ff f973 	bl	800dfb8 <write_submessage_acknack.isra.0>
 800ecd2:	e771      	b.n	800ebb8 <wait_session_status+0x34>
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	f104 0008 	add.w	r0, r4, #8
 800ecda:	f000 fac9 	bl	800f270 <uxr_get_input_best_effort_stream>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f43f af6a 	beq.w	800ebb8 <wait_session_status+0x34>
 800ece4:	9902      	ldr	r1, [sp, #8]
 800ece6:	f005 f8b7 	bl	8013e58 <uxr_receive_best_effort_message>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	f43f af64 	beq.w	800ebb8 <wait_session_status+0x34>
 800ecf0:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800ecf4:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ecf8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ecfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecfe:	a90c      	add	r1, sp, #48	; 0x30
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7ff fadb 	bl	800e2bc <read_submessage_list>
 800ed06:	e757      	b.n	800ebb8 <wait_session_status+0x34>
 800ed08:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ed0a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ed0e:	47a0      	blx	r4
 800ed10:	2001      	movs	r0, #1
 800ed12:	b01d      	add	sp, #116	; 0x74
 800ed14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed18:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800ed1c:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ed20:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ed24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed26:	a90c      	add	r1, sp, #48	; 0x30
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f7ff fac7 	bl	800e2bc <read_submessage_list>
 800ed2e:	e7c1      	b.n	800ecb4 <wait_session_status+0x130>

0800ed30 <uxr_delete_session_retries>:
 800ed30:	b530      	push	{r4, r5, lr}
 800ed32:	b08f      	sub	sp, #60	; 0x3c
 800ed34:	4604      	mov	r4, r0
 800ed36:	460d      	mov	r5, r1
 800ed38:	f000 f954 	bl	800efe4 <uxr_session_header_offset>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2210      	movs	r2, #16
 800ed40:	9000      	str	r0, [sp, #0]
 800ed42:	a902      	add	r1, sp, #8
 800ed44:	a806      	add	r0, sp, #24
 800ed46:	f7fc fae7 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800ed4a:	a906      	add	r1, sp, #24
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f000 f897 	bl	800ee80 <uxr_buffer_delete_session>
 800ed52:	2200      	movs	r2, #0
 800ed54:	4611      	mov	r1, r2
 800ed56:	9b06      	ldr	r3, [sp, #24]
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 f8eb 	bl	800ef34 <uxr_stamp_session_header>
 800ed5e:	a806      	add	r0, sp, #24
 800ed60:	f7fc fb18 	bl	800b394 <ucdr_buffer_length>
 800ed64:	462b      	mov	r3, r5
 800ed66:	4602      	mov	r2, r0
 800ed68:	a902      	add	r1, sp, #8
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f7ff ff0a 	bl	800eb84 <wait_session_status>
 800ed70:	b118      	cbz	r0, 800ed7a <uxr_delete_session_retries+0x4a>
 800ed72:	7960      	ldrb	r0, [r4, #5]
 800ed74:	fab0 f080 	clz	r0, r0
 800ed78:	0940      	lsrs	r0, r0, #5
 800ed7a:	b00f      	add	sp, #60	; 0x3c
 800ed7c:	bd30      	pop	{r4, r5, pc}
 800ed7e:	bf00      	nop

0800ed80 <uxr_prepare_stream_to_write_submessage>:
 800ed80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed84:	b082      	sub	sp, #8
 800ed86:	4682      	mov	sl, r0
 800ed88:	4610      	mov	r0, r2
 800ed8a:	4615      	mov	r5, r2
 800ed8c:	461e      	mov	r6, r3
 800ed8e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800ed92:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800ed96:	9101      	str	r1, [sp, #4]
 800ed98:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ed9c:	f000 fad4 	bl	800f348 <uxr_submessage_padding>
 800eda0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eda4:	f105 0904 	add.w	r9, r5, #4
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	4481      	add	r9, r0
 800edac:	d01d      	beq.n	800edea <uxr_prepare_stream_to_write_submessage+0x6a>
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d116      	bne.n	800ede0 <uxr_prepare_stream_to_write_submessage+0x60>
 800edb2:	4621      	mov	r1, r4
 800edb4:	f10a 0008 	add.w	r0, sl, #8
 800edb8:	f000 fa4e 	bl	800f258 <uxr_get_output_reliable_stream>
 800edbc:	4604      	mov	r4, r0
 800edbe:	b158      	cbz	r0, 800edd8 <uxr_prepare_stream_to_write_submessage+0x58>
 800edc0:	4649      	mov	r1, r9
 800edc2:	4632      	mov	r2, r6
 800edc4:	f005 fb02 	bl	80143cc <uxr_prepare_reliable_buffer_to_write>
 800edc8:	4604      	mov	r4, r0
 800edca:	b12c      	cbz	r4, 800edd8 <uxr_prepare_stream_to_write_submessage+0x58>
 800edcc:	4643      	mov	r3, r8
 800edce:	b2aa      	uxth	r2, r5
 800edd0:	4639      	mov	r1, r7
 800edd2:	4630      	mov	r0, r6
 800edd4:	f000 fa78 	bl	800f2c8 <uxr_buffer_submessage_header>
 800edd8:	4620      	mov	r0, r4
 800edda:	b002      	add	sp, #8
 800eddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ede0:	2400      	movs	r4, #0
 800ede2:	4620      	mov	r0, r4
 800ede4:	b002      	add	sp, #8
 800ede6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edea:	4621      	mov	r1, r4
 800edec:	f10a 0008 	add.w	r0, sl, #8
 800edf0:	f000 fa2a 	bl	800f248 <uxr_get_output_best_effort_stream>
 800edf4:	4604      	mov	r4, r0
 800edf6:	2800      	cmp	r0, #0
 800edf8:	d0ee      	beq.n	800edd8 <uxr_prepare_stream_to_write_submessage+0x58>
 800edfa:	4649      	mov	r1, r9
 800edfc:	4632      	mov	r2, r6
 800edfe:	f005 fa21 	bl	8014244 <uxr_prepare_best_effort_buffer_to_write>
 800ee02:	4604      	mov	r4, r0
 800ee04:	e7e1      	b.n	800edca <uxr_prepare_stream_to_write_submessage+0x4a>
 800ee06:	bf00      	nop

0800ee08 <uxr_init_session_info>:
 800ee08:	b470      	push	{r4, r5, r6}
 800ee0a:	7102      	strb	r2, [r0, #4]
 800ee0c:	0e16      	lsrs	r6, r2, #24
 800ee0e:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800ee12:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800ee16:	23ff      	movs	r3, #255	; 0xff
 800ee18:	2209      	movs	r2, #9
 800ee1a:	7046      	strb	r6, [r0, #1]
 800ee1c:	7085      	strb	r5, [r0, #2]
 800ee1e:	70c4      	strb	r4, [r0, #3]
 800ee20:	7001      	strb	r1, [r0, #0]
 800ee22:	bc70      	pop	{r4, r5, r6}
 800ee24:	80c2      	strh	r2, [r0, #6]
 800ee26:	7143      	strb	r3, [r0, #5]
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop

0800ee2c <uxr_buffer_create_session>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	b088      	sub	sp, #32
 800ee30:	2300      	movs	r3, #0
 800ee32:	4d12      	ldr	r5, [pc, #72]	; (800ee7c <uxr_buffer_create_session+0x50>)
 800ee34:	9307      	str	r3, [sp, #28]
 800ee36:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ee3a:	7802      	ldrb	r2, [r0, #0]
 800ee3c:	9303      	str	r3, [sp, #12]
 800ee3e:	460c      	mov	r4, r1
 800ee40:	f88d 200c 	strb.w	r2, [sp, #12]
 800ee44:	2101      	movs	r1, #1
 800ee46:	682a      	ldr	r2, [r5, #0]
 800ee48:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800ee4c:	88ad      	ldrh	r5, [r5, #4]
 800ee4e:	80c1      	strh	r1, [r0, #6]
 800ee50:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ee54:	9200      	str	r2, [sp, #0]
 800ee56:	4619      	mov	r1, r3
 800ee58:	2210      	movs	r2, #16
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ee60:	9306      	str	r3, [sp, #24]
 800ee62:	f88d 300d 	strb.w	r3, [sp, #13]
 800ee66:	9602      	str	r6, [sp, #8]
 800ee68:	f8ad 5006 	strh.w	r5, [sp, #6]
 800ee6c:	f000 fa2c 	bl	800f2c8 <uxr_buffer_submessage_header>
 800ee70:	4620      	mov	r0, r4
 800ee72:	4669      	mov	r1, sp
 800ee74:	f001 f964 	bl	8010140 <uxr_serialize_CREATE_CLIENT_Payload>
 800ee78:	b008      	add	sp, #32
 800ee7a:	bd70      	pop	{r4, r5, r6, pc}
 800ee7c:	08016fc0 	.word	0x08016fc0

0800ee80 <uxr_buffer_delete_session>:
 800ee80:	b530      	push	{r4, r5, lr}
 800ee82:	4b0c      	ldr	r3, [pc, #48]	; (800eeb4 <uxr_buffer_delete_session+0x34>)
 800ee84:	b083      	sub	sp, #12
 800ee86:	891b      	ldrh	r3, [r3, #8]
 800ee88:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	460c      	mov	r4, r1
 800ee90:	80c2      	strh	r2, [r0, #6]
 800ee92:	2300      	movs	r3, #0
 800ee94:	2204      	movs	r2, #4
 800ee96:	4608      	mov	r0, r1
 800ee98:	f44f 7500 	mov.w	r5, #512	; 0x200
 800ee9c:	2103      	movs	r1, #3
 800ee9e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800eea2:	f000 fa11 	bl	800f2c8 <uxr_buffer_submessage_header>
 800eea6:	4620      	mov	r0, r4
 800eea8:	a901      	add	r1, sp, #4
 800eeaa:	f001 f9f7 	bl	801029c <uxr_serialize_DELETE_Payload>
 800eeae:	b003      	add	sp, #12
 800eeb0:	bd30      	pop	{r4, r5, pc}
 800eeb2:	bf00      	nop
 800eeb4:	08016fc0 	.word	0x08016fc0

0800eeb8 <uxr_read_create_session_status>:
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	b088      	sub	sp, #32
 800eebc:	4604      	mov	r4, r0
 800eebe:	4608      	mov	r0, r1
 800eec0:	a901      	add	r1, sp, #4
 800eec2:	f001 f9fb 	bl	80102bc <uxr_deserialize_STATUS_AGENT_Payload>
 800eec6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eeca:	7163      	strb	r3, [r4, #5]
 800eecc:	b008      	add	sp, #32
 800eece:	bd10      	pop	{r4, pc}

0800eed0 <uxr_read_delete_session_status>:
 800eed0:	b510      	push	{r4, lr}
 800eed2:	4604      	mov	r4, r0
 800eed4:	b084      	sub	sp, #16
 800eed6:	4608      	mov	r0, r1
 800eed8:	a902      	add	r1, sp, #8
 800eeda:	f001 fa1f 	bl	801031c <uxr_deserialize_STATUS_Payload>
 800eede:	88e3      	ldrh	r3, [r4, #6]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d001      	beq.n	800eee8 <uxr_read_delete_session_status+0x18>
 800eee4:	b004      	add	sp, #16
 800eee6:	bd10      	pop	{r4, pc}
 800eee8:	f10d 000a 	add.w	r0, sp, #10
 800eeec:	f7fe ff00 	bl	800dcf0 <uxr_object_id_from_raw>
 800eef0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800eef4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800eef8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	bf04      	itt	eq
 800ef02:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ef06:	7163      	strbeq	r3, [r4, #5]
 800ef08:	b004      	add	sp, #16
 800ef0a:	bd10      	pop	{r4, pc}

0800ef0c <uxr_stamp_create_session_header>:
 800ef0c:	b510      	push	{r4, lr}
 800ef0e:	4604      	mov	r4, r0
 800ef10:	b08a      	sub	sp, #40	; 0x28
 800ef12:	a802      	add	r0, sp, #8
 800ef14:	2208      	movs	r2, #8
 800ef16:	f7fc fa11 	bl	800b33c <ucdr_init_buffer>
 800ef1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1e:	9400      	str	r4, [sp, #0]
 800ef20:	2300      	movs	r3, #0
 800ef22:	a802      	add	r0, sp, #8
 800ef24:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ef28:	461a      	mov	r2, r3
 800ef2a:	f000 fbcb 	bl	800f6c4 <uxr_serialize_message_header>
 800ef2e:	b00a      	add	sp, #40	; 0x28
 800ef30:	bd10      	pop	{r4, pc}
 800ef32:	bf00      	nop

0800ef34 <uxr_stamp_session_header>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	4604      	mov	r4, r0
 800ef38:	b08c      	sub	sp, #48	; 0x30
 800ef3a:	460d      	mov	r5, r1
 800ef3c:	4616      	mov	r6, r2
 800ef3e:	4619      	mov	r1, r3
 800ef40:	a804      	add	r0, sp, #16
 800ef42:	2208      	movs	r2, #8
 800ef44:	9603      	str	r6, [sp, #12]
 800ef46:	f7fc f9f9 	bl	800b33c <ucdr_init_buffer>
 800ef4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef4e:	9b03      	ldr	r3, [sp, #12]
 800ef50:	9400      	str	r4, [sp, #0]
 800ef52:	462a      	mov	r2, r5
 800ef54:	a804      	add	r0, sp, #16
 800ef56:	f000 fbb5 	bl	800f6c4 <uxr_serialize_message_header>
 800ef5a:	b00c      	add	sp, #48	; 0x30
 800ef5c:	bd70      	pop	{r4, r5, r6, pc}
 800ef5e:	bf00      	nop

0800ef60 <uxr_read_session_header>:
 800ef60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef64:	4607      	mov	r7, r0
 800ef66:	b084      	sub	sp, #16
 800ef68:	4608      	mov	r0, r1
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	4615      	mov	r5, r2
 800ef6e:	461e      	mov	r6, r3
 800ef70:	f7fc fa14 	bl	800b39c <ucdr_buffer_remaining>
 800ef74:	2808      	cmp	r0, #8
 800ef76:	d803      	bhi.n	800ef80 <uxr_read_session_header+0x20>
 800ef78:	2000      	movs	r0, #0
 800ef7a:	b004      	add	sp, #16
 800ef7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef80:	f10d 080c 	add.w	r8, sp, #12
 800ef84:	4633      	mov	r3, r6
 800ef86:	462a      	mov	r2, r5
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f8cd 8000 	str.w	r8, [sp]
 800ef8e:	f10d 010b 	add.w	r1, sp, #11
 800ef92:	f000 fbb5 	bl	800f700 <uxr_deserialize_message_header>
 800ef96:	783a      	ldrb	r2, [r7, #0]
 800ef98:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d1eb      	bne.n	800ef78 <uxr_read_session_header+0x18>
 800efa0:	061b      	lsls	r3, r3, #24
 800efa2:	d41c      	bmi.n	800efde <uxr_read_session_header+0x7e>
 800efa4:	f898 2000 	ldrb.w	r2, [r8]
 800efa8:	787b      	ldrb	r3, [r7, #1]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d003      	beq.n	800efb6 <uxr_read_session_header+0x56>
 800efae:	2001      	movs	r0, #1
 800efb0:	f080 0001 	eor.w	r0, r0, #1
 800efb4:	e7e1      	b.n	800ef7a <uxr_read_session_header+0x1a>
 800efb6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800efba:	78bb      	ldrb	r3, [r7, #2]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	f107 0102 	add.w	r1, r7, #2
 800efc2:	d1f4      	bne.n	800efae <uxr_read_session_header+0x4e>
 800efc4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800efc8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800efcc:	429a      	cmp	r2, r3
 800efce:	d1ee      	bne.n	800efae <uxr_read_session_header+0x4e>
 800efd0:	784b      	ldrb	r3, [r1, #1]
 800efd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d1e9      	bne.n	800efae <uxr_read_session_header+0x4e>
 800efda:	2000      	movs	r0, #0
 800efdc:	e7e8      	b.n	800efb0 <uxr_read_session_header+0x50>
 800efde:	2001      	movs	r0, #1
 800efe0:	e7cb      	b.n	800ef7a <uxr_read_session_header+0x1a>
 800efe2:	bf00      	nop

0800efe4 <uxr_session_header_offset>:
 800efe4:	f990 3000 	ldrsb.w	r3, [r0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	bfac      	ite	ge
 800efec:	2008      	movge	r0, #8
 800efee:	2004      	movlt	r0, #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop

0800eff4 <uxr_init_base_object_request>:
 800eff4:	b530      	push	{r4, r5, lr}
 800eff6:	88c3      	ldrh	r3, [r0, #6]
 800eff8:	b083      	sub	sp, #12
 800effa:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800effe:	9101      	str	r1, [sp, #4]
 800f000:	f1a3 010a 	sub.w	r1, r3, #10
 800f004:	b289      	uxth	r1, r1
 800f006:	42a1      	cmp	r1, r4
 800f008:	d80e      	bhi.n	800f028 <uxr_init_base_object_request+0x34>
 800f00a:	3301      	adds	r3, #1
 800f00c:	b29c      	uxth	r4, r3
 800f00e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800f012:	b2db      	uxtb	r3, r3
 800f014:	80c4      	strh	r4, [r0, #6]
 800f016:	1c91      	adds	r1, r2, #2
 800f018:	9801      	ldr	r0, [sp, #4]
 800f01a:	7015      	strb	r5, [r2, #0]
 800f01c:	7053      	strb	r3, [r2, #1]
 800f01e:	f7fe fe7b 	bl	800dd18 <uxr_object_id_to_raw>
 800f022:	4620      	mov	r0, r4
 800f024:	b003      	add	sp, #12
 800f026:	bd30      	pop	{r4, r5, pc}
 800f028:	230a      	movs	r3, #10
 800f02a:	461c      	mov	r4, r3
 800f02c:	2500      	movs	r5, #0
 800f02e:	e7f1      	b.n	800f014 <uxr_init_base_object_request+0x20>

0800f030 <uxr_parse_base_object_request>:
 800f030:	b570      	push	{r4, r5, r6, lr}
 800f032:	4604      	mov	r4, r0
 800f034:	3002      	adds	r0, #2
 800f036:	460d      	mov	r5, r1
 800f038:	4616      	mov	r6, r2
 800f03a:	f7fe fe59 	bl	800dcf0 <uxr_object_id_from_raw>
 800f03e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f042:	8028      	strh	r0, [r5, #0]
 800f044:	806b      	strh	r3, [r5, #2]
 800f046:	7822      	ldrb	r2, [r4, #0]
 800f048:	7863      	ldrb	r3, [r4, #1]
 800f04a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f04e:	8033      	strh	r3, [r6, #0]
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	bf00      	nop

0800f054 <uxr_stream_id>:
 800f054:	b410      	push	{r4}
 800f056:	2901      	cmp	r1, #1
 800f058:	b083      	sub	sp, #12
 800f05a:	d01f      	beq.n	800f09c <uxr_stream_id+0x48>
 800f05c:	2902      	cmp	r1, #2
 800f05e:	f04f 0400 	mov.w	r4, #0
 800f062:	d01e      	beq.n	800f0a2 <uxr_stream_id+0x4e>
 800f064:	2300      	movs	r3, #0
 800f066:	f364 0307 	bfi	r3, r4, #0, #8
 800f06a:	f360 230f 	bfi	r3, r0, #8, #8
 800f06e:	f361 4317 	bfi	r3, r1, #16, #8
 800f072:	f362 631f 	bfi	r3, r2, #24, #8
 800f076:	b2da      	uxtb	r2, r3
 800f078:	2000      	movs	r0, #0
 800f07a:	f362 0007 	bfi	r0, r2, #0, #8
 800f07e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f082:	f362 200f 	bfi	r0, r2, #8, #8
 800f086:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f08a:	f362 4017 	bfi	r0, r2, #16, #8
 800f08e:	0e1b      	lsrs	r3, r3, #24
 800f090:	f363 601f 	bfi	r0, r3, #24, #8
 800f094:	b003      	add	sp, #12
 800f096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	1c44      	adds	r4, r0, #1
 800f09e:	b2e4      	uxtb	r4, r4
 800f0a0:	e7e0      	b.n	800f064 <uxr_stream_id+0x10>
 800f0a2:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800f0a6:	e7dd      	b.n	800f064 <uxr_stream_id+0x10>

0800f0a8 <uxr_stream_id_from_raw>:
 800f0a8:	b410      	push	{r4}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	b128      	cbz	r0, 800f0ba <uxr_stream_id_from_raw+0x12>
 800f0ae:	0603      	lsls	r3, r0, #24
 800f0b0:	d421      	bmi.n	800f0f6 <uxr_stream_id_from_raw+0x4e>
 800f0b2:	1e42      	subs	r2, r0, #1
 800f0b4:	b2d2      	uxtb	r2, r2
 800f0b6:	2401      	movs	r4, #1
 800f0b8:	e001      	b.n	800f0be <uxr_stream_id_from_raw+0x16>
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	4602      	mov	r2, r0
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f360 0307 	bfi	r3, r0, #0, #8
 800f0c4:	f362 230f 	bfi	r3, r2, #8, #8
 800f0c8:	f364 4317 	bfi	r3, r4, #16, #8
 800f0cc:	f361 631f 	bfi	r3, r1, #24, #8
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	f362 0007 	bfi	r0, r2, #0, #8
 800f0d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f0dc:	f362 200f 	bfi	r0, r2, #8, #8
 800f0e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f0e4:	f362 4017 	bfi	r0, r2, #16, #8
 800f0e8:	0e1b      	lsrs	r3, r3, #24
 800f0ea:	f363 601f 	bfi	r0, r3, #24, #8
 800f0ee:	b003      	add	sp, #12
 800f0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0f4:	4770      	bx	lr
 800f0f6:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800f0fa:	2402      	movs	r4, #2
 800f0fc:	e7df      	b.n	800f0be <uxr_stream_id_from_raw+0x16>
 800f0fe:	bf00      	nop

0800f100 <uxr_init_stream_storage>:
 800f100:	2300      	movs	r3, #0
 800f102:	7403      	strb	r3, [r0, #16]
 800f104:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f108:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800f10c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop

0800f114 <uxr_reset_stream_storage>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	7c03      	ldrb	r3, [r0, #16]
 800f118:	4604      	mov	r4, r0
 800f11a:	b153      	cbz	r3, 800f132 <uxr_reset_stream_storage+0x1e>
 800f11c:	4606      	mov	r6, r0
 800f11e:	2500      	movs	r5, #0
 800f120:	4630      	mov	r0, r6
 800f122:	f005 f889 	bl	8014238 <uxr_reset_output_best_effort_stream>
 800f126:	7c23      	ldrb	r3, [r4, #16]
 800f128:	3501      	adds	r5, #1
 800f12a:	42ab      	cmp	r3, r5
 800f12c:	f106 0610 	add.w	r6, r6, #16
 800f130:	d8f6      	bhi.n	800f120 <uxr_reset_stream_storage+0xc>
 800f132:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f136:	b163      	cbz	r3, 800f152 <uxr_reset_stream_storage+0x3e>
 800f138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f13c:	2500      	movs	r5, #0
 800f13e:	4630      	mov	r0, r6
 800f140:	f004 fe86 	bl	8013e50 <uxr_reset_input_best_effort_stream>
 800f144:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f148:	3501      	adds	r5, #1
 800f14a:	42ab      	cmp	r3, r5
 800f14c:	f106 0602 	add.w	r6, r6, #2
 800f150:	d8f5      	bhi.n	800f13e <uxr_reset_stream_storage+0x2a>
 800f152:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f156:	b163      	cbz	r3, 800f172 <uxr_reset_stream_storage+0x5e>
 800f158:	f104 0618 	add.w	r6, r4, #24
 800f15c:	2500      	movs	r5, #0
 800f15e:	4630      	mov	r0, r6
 800f160:	f005 f90a 	bl	8014378 <uxr_reset_output_reliable_stream>
 800f164:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f168:	3501      	adds	r5, #1
 800f16a:	42ab      	cmp	r3, r5
 800f16c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800f170:	d8f5      	bhi.n	800f15e <uxr_reset_stream_storage+0x4a>
 800f172:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f176:	b163      	cbz	r3, 800f192 <uxr_reset_stream_storage+0x7e>
 800f178:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800f17c:	2500      	movs	r5, #0
 800f17e:	4630      	mov	r0, r6
 800f180:	f004 fece 	bl	8013f20 <uxr_reset_input_reliable_stream>
 800f184:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f188:	3501      	adds	r5, #1
 800f18a:	42ab      	cmp	r3, r5
 800f18c:	f106 0618 	add.w	r6, r6, #24
 800f190:	d8f5      	bhi.n	800f17e <uxr_reset_stream_storage+0x6a>
 800f192:	bd70      	pop	{r4, r5, r6, pc}

0800f194 <uxr_add_output_best_effort_buffer>:
 800f194:	b530      	push	{r4, r5, lr}
 800f196:	7c04      	ldrb	r4, [r0, #16]
 800f198:	1c65      	adds	r5, r4, #1
 800f19a:	b083      	sub	sp, #12
 800f19c:	7405      	strb	r5, [r0, #16]
 800f19e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f1a2:	f005 f83d 	bl	8014220 <uxr_init_output_best_effort_stream>
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	b003      	add	sp, #12
 800f1ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b2:	f7ff bf4f 	b.w	800f054 <uxr_stream_id>
 800f1b6:	bf00      	nop

0800f1b8 <uxr_add_output_reliable_buffer>:
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800f1c0:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800f1c4:	9600      	str	r6, [sp, #0]
 800f1c6:	2528      	movs	r5, #40	; 0x28
 800f1c8:	1c66      	adds	r6, r4, #1
 800f1ca:	fb05 0504 	mla	r5, r5, r4, r0
 800f1ce:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800f1d2:	f105 0018 	add.w	r0, r5, #24
 800f1d6:	f005 f89d 	bl	8014314 <uxr_init_output_reliable_stream>
 800f1da:	4620      	mov	r0, r4
 800f1dc:	2201      	movs	r2, #1
 800f1de:	2102      	movs	r1, #2
 800f1e0:	b004      	add	sp, #16
 800f1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1e6:	f7ff bf35 	b.w	800f054 <uxr_stream_id>
 800f1ea:	bf00      	nop

0800f1ec <uxr_add_input_best_effort_buffer>:
 800f1ec:	b510      	push	{r4, lr}
 800f1ee:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800f1f2:	1c62      	adds	r2, r4, #1
 800f1f4:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800f1f8:	b082      	sub	sp, #8
 800f1fa:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800f1fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f202:	f004 fe21 	bl	8013e48 <uxr_init_input_best_effort_stream>
 800f206:	4620      	mov	r0, r4
 800f208:	2200      	movs	r2, #0
 800f20a:	2101      	movs	r1, #1
 800f20c:	b002      	add	sp, #8
 800f20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f212:	f7ff bf1f 	b.w	800f054 <uxr_stream_id>
 800f216:	bf00      	nop

0800f218 <uxr_add_input_reliable_buffer>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800f220:	9e08      	ldr	r6, [sp, #32]
 800f222:	9600      	str	r6, [sp, #0]
 800f224:	2518      	movs	r5, #24
 800f226:	1c66      	adds	r6, r4, #1
 800f228:	fb05 0504 	mla	r5, r5, r4, r0
 800f22c:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800f230:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f234:	f004 fe50 	bl	8013ed8 <uxr_init_input_reliable_stream>
 800f238:	4620      	mov	r0, r4
 800f23a:	2200      	movs	r2, #0
 800f23c:	2102      	movs	r1, #2
 800f23e:	b004      	add	sp, #16
 800f240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f244:	f7ff bf06 	b.w	800f054 <uxr_stream_id>

0800f248 <uxr_get_output_best_effort_stream>:
 800f248:	7c03      	ldrb	r3, [r0, #16]
 800f24a:	428b      	cmp	r3, r1
 800f24c:	bf8c      	ite	hi
 800f24e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f252:	2000      	movls	r0, #0
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop

0800f258 <uxr_get_output_reliable_stream>:
 800f258:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f25c:	428b      	cmp	r3, r1
 800f25e:	bf83      	ittte	hi
 800f260:	2328      	movhi	r3, #40	; 0x28
 800f262:	fb03 0101 	mlahi	r1, r3, r1, r0
 800f266:	f101 0018 	addhi.w	r0, r1, #24
 800f26a:	2000      	movls	r0, #0
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop

0800f270 <uxr_get_input_best_effort_stream>:
 800f270:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800f274:	428b      	cmp	r3, r1
 800f276:	bf86      	itte	hi
 800f278:	3121      	addhi	r1, #33	; 0x21
 800f27a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f27e:	2000      	movls	r0, #0
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop

0800f284 <uxr_get_input_reliable_stream>:
 800f284:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800f288:	428b      	cmp	r3, r1
 800f28a:	bf83      	ittte	hi
 800f28c:	2318      	movhi	r3, #24
 800f28e:	fb03 0101 	mlahi	r1, r3, r1, r0
 800f292:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800f296:	2000      	movls	r0, #0
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop

0800f29c <uxr_output_streams_confirmed>:
 800f29c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f2a0:	b183      	cbz	r3, 800f2c4 <uxr_output_streams_confirmed+0x28>
 800f2a2:	b570      	push	{r4, r5, r6, lr}
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	f100 0518 	add.w	r5, r0, #24
 800f2aa:	2400      	movs	r4, #0
 800f2ac:	e001      	b.n	800f2b2 <uxr_output_streams_confirmed+0x16>
 800f2ae:	3528      	adds	r5, #40	; 0x28
 800f2b0:	b138      	cbz	r0, 800f2c2 <uxr_output_streams_confirmed+0x26>
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f005 fad0 	bl	8014858 <uxr_is_output_up_to_date>
 800f2b8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800f2bc:	3401      	adds	r4, #1
 800f2be:	42a3      	cmp	r3, r4
 800f2c0:	d8f5      	bhi.n	800f2ae <uxr_output_streams_confirmed+0x12>
 800f2c2:	bd70      	pop	{r4, r5, r6, pc}
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	4770      	bx	lr

0800f2c8 <uxr_buffer_submessage_header>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	460e      	mov	r6, r1
 800f2ce:	2104      	movs	r1, #4
 800f2d0:	4615      	mov	r5, r2
 800f2d2:	461f      	mov	r7, r3
 800f2d4:	f7fc f84c 	bl	800b370 <ucdr_align_to>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	ea47 0203 	orr.w	r2, r7, r3
 800f2de:	4631      	mov	r1, r6
 800f2e0:	7523      	strb	r3, [r4, #20]
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	462b      	mov	r3, r5
 800f2e6:	f000 fa2b 	bl	800f740 <uxr_serialize_submessage_header>
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f7fc f856 	bl	800b39c <ucdr_buffer_remaining>
 800f2f0:	42a8      	cmp	r0, r5
 800f2f2:	bf34      	ite	cc
 800f2f4:	2000      	movcc	r0, #0
 800f2f6:	2001      	movcs	r0, #1
 800f2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2fa:	bf00      	nop

0800f2fc <uxr_read_submessage_header>:
 800f2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f300:	4604      	mov	r4, r0
 800f302:	460d      	mov	r5, r1
 800f304:	2104      	movs	r1, #4
 800f306:	4616      	mov	r6, r2
 800f308:	4698      	mov	r8, r3
 800f30a:	f7fc f831 	bl	800b370 <ucdr_align_to>
 800f30e:	4620      	mov	r0, r4
 800f310:	f7fc f844 	bl	800b39c <ucdr_buffer_remaining>
 800f314:	2803      	cmp	r0, #3
 800f316:	bf8c      	ite	hi
 800f318:	2701      	movhi	r7, #1
 800f31a:	2700      	movls	r7, #0
 800f31c:	d802      	bhi.n	800f324 <uxr_read_submessage_header+0x28>
 800f31e:	4638      	mov	r0, r7
 800f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f324:	4633      	mov	r3, r6
 800f326:	4642      	mov	r2, r8
 800f328:	4620      	mov	r0, r4
 800f32a:	4629      	mov	r1, r5
 800f32c:	f000 fa1c 	bl	800f768 <uxr_deserialize_submessage_header>
 800f330:	f898 3000 	ldrb.w	r3, [r8]
 800f334:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800f338:	f003 0301 	and.w	r3, r3, #1
 800f33c:	f888 2000 	strb.w	r2, [r8]
 800f340:	7523      	strb	r3, [r4, #20]
 800f342:	4638      	mov	r0, r7
 800f344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f348 <uxr_submessage_padding>:
 800f348:	f010 0003 	ands.w	r0, r0, #3
 800f34c:	bf18      	it	ne
 800f34e:	f1c0 0004 	rsbne	r0, r0, #4
 800f352:	4770      	bx	lr

0800f354 <uxr_millis>:
 800f354:	b510      	push	{r4, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	4669      	mov	r1, sp
 800f35a:	2001      	movs	r0, #1
 800f35c:	f7f3 f824 	bl	80023a8 <clock_gettime>
 800f360:	e9dd 2400 	ldrd	r2, r4, [sp]
 800f364:	4907      	ldr	r1, [pc, #28]	; (800f384 <uxr_millis+0x30>)
 800f366:	9802      	ldr	r0, [sp, #8]
 800f368:	fba2 2301 	umull	r2, r3, r2, r1
 800f36c:	fb01 3304 	mla	r3, r1, r4, r3
 800f370:	4604      	mov	r4, r0
 800f372:	1810      	adds	r0, r2, r0
 800f374:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800f378:	4a03      	ldr	r2, [pc, #12]	; (800f388 <uxr_millis+0x34>)
 800f37a:	2300      	movs	r3, #0
 800f37c:	f7f1 fbce 	bl	8000b1c <__aeabi_ldivmod>
 800f380:	b004      	add	sp, #16
 800f382:	bd10      	pop	{r4, pc}
 800f384:	3b9aca00 	.word	0x3b9aca00
 800f388:	000f4240 	.word	0x000f4240

0800f38c <uxr_nanos>:
 800f38c:	b510      	push	{r4, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	4669      	mov	r1, sp
 800f392:	2001      	movs	r0, #1
 800f394:	f7f3 f808 	bl	80023a8 <clock_gettime>
 800f398:	e9dd 2400 	ldrd	r2, r4, [sp]
 800f39c:	4905      	ldr	r1, [pc, #20]	; (800f3b4 <uxr_nanos+0x28>)
 800f39e:	9802      	ldr	r0, [sp, #8]
 800f3a0:	fba2 2301 	umull	r2, r3, r2, r1
 800f3a4:	fb01 3304 	mla	r3, r1, r4, r3
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	1810      	adds	r0, r2, r0
 800f3ac:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800f3b0:	b004      	add	sp, #16
 800f3b2:	bd10      	pop	{r4, pc}
 800f3b4:	3b9aca00 	.word	0x3b9aca00

0800f3b8 <on_full_output_buffer_fragmented>:
 800f3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3bc:	460c      	mov	r4, r1
 800f3be:	b08a      	sub	sp, #40	; 0x28
 800f3c0:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	f104 0008 	add.w	r0, r4, #8
 800f3ca:	f7ff ff45 	bl	800f258 <uxr_get_output_reliable_stream>
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	f005 fa4c 	bl	801486c <get_available_free_slots>
 800f3d4:	b968      	cbnz	r0, 800f3f2 <on_full_output_buffer_fragmented+0x3a>
 800f3d6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4798      	blx	r3
 800f3de:	b918      	cbnz	r0, 800f3e8 <on_full_output_buffer_fragmented+0x30>
 800f3e0:	2001      	movs	r0, #1
 800f3e2:	b00a      	add	sp, #40	; 0x28
 800f3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	f005 fa3f 	bl	801486c <get_available_free_slots>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d0f6      	beq.n	800f3e0 <on_full_output_buffer_fragmented+0x28>
 800f3f2:	8928      	ldrh	r0, [r5, #8]
 800f3f4:	89eb      	ldrh	r3, [r5, #14]
 800f3f6:	7b2a      	ldrb	r2, [r5, #12]
 800f3f8:	fbb3 f1f0 	udiv	r1, r3, r0
 800f3fc:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 800f400:	fb00 3111 	mls	r1, r0, r1, r3
 800f404:	b28b      	uxth	r3, r1
 800f406:	32fc      	adds	r2, #252	; 0xfc
 800f408:	6869      	ldr	r1, [r5, #4]
 800f40a:	fbb1 f1f0 	udiv	r1, r1, r0
 800f40e:	1f0f      	subs	r7, r1, #4
 800f410:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800f414:	fb01 f103 	mul.w	r1, r1, r3
 800f418:	443a      	add	r2, r7
 800f41a:	682b      	ldr	r3, [r5, #0]
 800f41c:	fa1f f882 	uxth.w	r8, r2
 800f420:	3104      	adds	r1, #4
 800f422:	4419      	add	r1, r3
 800f424:	eba0 0008 	sub.w	r0, r0, r8
 800f428:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800f42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	463a      	mov	r2, r7
 800f434:	2300      	movs	r3, #0
 800f436:	a802      	add	r0, sp, #8
 800f438:	f7fb ff6e 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800f43c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800f440:	f102 0308 	add.w	r3, r2, #8
 800f444:	42bb      	cmp	r3, r7
 800f446:	d927      	bls.n	800f498 <on_full_output_buffer_fragmented+0xe0>
 800f448:	4642      	mov	r2, r8
 800f44a:	2300      	movs	r3, #0
 800f44c:	210d      	movs	r1, #13
 800f44e:	a802      	add	r0, sp, #8
 800f450:	f7ff ff3a 	bl	800f2c8 <uxr_buffer_submessage_header>
 800f454:	8928      	ldrh	r0, [r5, #8]
 800f456:	89eb      	ldrh	r3, [r5, #14]
 800f458:	fbb3 f1f0 	udiv	r1, r3, r0
 800f45c:	fb00 3111 	mls	r1, r0, r1, r3
 800f460:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f464:	b289      	uxth	r1, r1
 800f466:	fbb3 f3f0 	udiv	r3, r3, r0
 800f46a:	fb03 f301 	mul.w	r3, r3, r1
 800f46e:	50d7      	str	r7, [r2, r3]
 800f470:	89e8      	ldrh	r0, [r5, #14]
 800f472:	2101      	movs	r1, #1
 800f474:	f005 fa1a 	bl	80148ac <uxr_seq_num_add>
 800f478:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f47c:	81e8      	strh	r0, [r5, #14]
 800f47e:	1a52      	subs	r2, r2, r1
 800f480:	4630      	mov	r0, r6
 800f482:	f7fb ff5b 	bl	800b33c <ucdr_init_buffer>
 800f486:	4630      	mov	r0, r6
 800f488:	490f      	ldr	r1, [pc, #60]	; (800f4c8 <on_full_output_buffer_fragmented+0x110>)
 800f48a:	4622      	mov	r2, r4
 800f48c:	f7fb ff2c 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 800f490:	2000      	movs	r0, #0
 800f492:	b00a      	add	sp, #40	; 0x28
 800f494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f498:	b292      	uxth	r2, r2
 800f49a:	2302      	movs	r3, #2
 800f49c:	210d      	movs	r1, #13
 800f49e:	a802      	add	r0, sp, #8
 800f4a0:	f7ff ff12 	bl	800f2c8 <uxr_buffer_submessage_header>
 800f4a4:	8928      	ldrh	r0, [r5, #8]
 800f4a6:	89eb      	ldrh	r3, [r5, #14]
 800f4a8:	fbb3 f2f0 	udiv	r2, r3, r0
 800f4ac:	fb00 3212 	mls	r2, r0, r2, r3
 800f4b0:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800f4b4:	686b      	ldr	r3, [r5, #4]
 800f4b6:	fbb3 f3f0 	udiv	r3, r3, r0
 800f4ba:	b292      	uxth	r2, r2
 800f4bc:	6828      	ldr	r0, [r5, #0]
 800f4be:	fb03 f302 	mul.w	r3, r3, r2
 800f4c2:	3108      	adds	r1, #8
 800f4c4:	50c1      	str	r1, [r0, r3]
 800f4c6:	e7d3      	b.n	800f470 <on_full_output_buffer_fragmented+0xb8>
 800f4c8:	0800f3b9 	.word	0x0800f3b9

0800f4cc <uxr_prepare_output_stream>:
 800f4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	2407      	movs	r4, #7
 800f4d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f4d4:	9202      	str	r2, [sp, #8]
 800f4d6:	2500      	movs	r5, #0
 800f4d8:	1d32      	adds	r2, r6, #4
 800f4da:	e9cd 4500 	strd	r4, r5, [sp]
 800f4de:	9103      	str	r1, [sp, #12]
 800f4e0:	461c      	mov	r4, r3
 800f4e2:	4606      	mov	r6, r0
 800f4e4:	f7ff fc4c 	bl	800ed80 <uxr_prepare_stream_to_write_submessage>
 800f4e8:	f080 0201 	eor.w	r2, r0, #1
 800f4ec:	b2d2      	uxtb	r2, r2
 800f4ee:	75a2      	strb	r2, [r4, #22]
 800f4f0:	b112      	cbz	r2, 800f4f8 <uxr_prepare_output_stream+0x2c>
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	b007      	add	sp, #28
 800f4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4f8:	aa05      	add	r2, sp, #20
 800f4fa:	9902      	ldr	r1, [sp, #8]
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f7ff fd79 	bl	800eff4 <uxr_init_base_object_request>
 800f502:	a905      	add	r1, sp, #20
 800f504:	4605      	mov	r5, r0
 800f506:	4620      	mov	r0, r4
 800f508:	f000 ff86 	bl	8010418 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f50c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f510:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800f514:	1a52      	subs	r2, r2, r1
 800f516:	4620      	mov	r0, r4
 800f518:	f7fb ff10 	bl	800b33c <ucdr_init_buffer>
 800f51c:	4620      	mov	r0, r4
 800f51e:	463a      	mov	r2, r7
 800f520:	4631      	mov	r1, r6
 800f522:	f7fb fee1 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 800f526:	4628      	mov	r0, r5
 800f528:	b007      	add	sp, #28
 800f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f52c <uxr_prepare_output_stream_fragmented>:
 800f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f530:	b093      	sub	sp, #76	; 0x4c
 800f532:	4605      	mov	r5, r0
 800f534:	9107      	str	r1, [sp, #28]
 800f536:	3008      	adds	r0, #8
 800f538:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f53c:	9303      	str	r3, [sp, #12]
 800f53e:	9206      	str	r2, [sp, #24]
 800f540:	f7ff fe8a 	bl	800f258 <uxr_get_output_reliable_stream>
 800f544:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	f000 8094 	beq.w	800f676 <uxr_prepare_output_stream_fragmented+0x14a>
 800f54e:	4604      	mov	r4, r0
 800f550:	2800      	cmp	r0, #0
 800f552:	f000 8090 	beq.w	800f676 <uxr_prepare_output_stream_fragmented+0x14a>
 800f556:	f005 f989 	bl	801486c <get_available_free_slots>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	f000 8086 	beq.w	800f66c <uxr_prepare_output_stream_fragmented+0x140>
 800f560:	8922      	ldrh	r2, [r4, #8]
 800f562:	89e7      	ldrh	r7, [r4, #14]
 800f564:	fbb7 f8f2 	udiv	r8, r7, r2
 800f568:	e9d4 3100 	ldrd	r3, r1, [r4]
 800f56c:	fb02 7818 	mls	r8, r2, r8, r7
 800f570:	fa1f f888 	uxth.w	r8, r8
 800f574:	fbb1 f2f2 	udiv	r2, r1, r2
 800f578:	fb02 f808 	mul.w	r8, r2, r8
 800f57c:	f108 0804 	add.w	r8, r8, #4
 800f580:	4498      	add	r8, r3
 800f582:	7b23      	ldrb	r3, [r4, #12]
 800f584:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800f588:	9204      	str	r2, [sp, #16]
 800f58a:	4553      	cmp	r3, sl
 800f58c:	f1a2 0b04 	sub.w	fp, r2, #4
 800f590:	d37d      	bcc.n	800f68e <uxr_prepare_output_stream_fragmented+0x162>
 800f592:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800f594:	f8cd a000 	str.w	sl, [sp]
 800f598:	f1ab 0904 	sub.w	r9, fp, #4
 800f59c:	eba9 0903 	sub.w	r9, r9, r3
 800f5a0:	3608      	adds	r6, #8
 800f5a2:	a80a      	add	r0, sp, #40	; 0x28
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	465a      	mov	r2, fp
 800f5a8:	4641      	mov	r1, r8
 800f5aa:	fa1f f989 	uxth.w	r9, r9
 800f5ae:	9605      	str	r6, [sp, #20]
 800f5b0:	f7fb feb2 	bl	800b318 <ucdr_init_buffer_origin_offset>
 800f5b4:	455e      	cmp	r6, fp
 800f5b6:	bf34      	ite	cc
 800f5b8:	2302      	movcc	r3, #2
 800f5ba:	2300      	movcs	r3, #0
 800f5bc:	464a      	mov	r2, r9
 800f5be:	210d      	movs	r1, #13
 800f5c0:	a80a      	add	r0, sp, #40	; 0x28
 800f5c2:	f7ff fe81 	bl	800f2c8 <uxr_buffer_submessage_header>
 800f5c6:	8920      	ldrh	r0, [r4, #8]
 800f5c8:	fbb7 f3f0 	udiv	r3, r7, r0
 800f5cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f5d0:	fb00 7313 	mls	r3, r0, r3, r7
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	fbb1 f1f0 	udiv	r1, r1, r0
 800f5da:	fb03 f301 	mul.w	r3, r3, r1
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f842 b003 	str.w	fp, [r2, r3]
 800f5e4:	2101      	movs	r1, #1
 800f5e6:	f005 f961 	bl	80148ac <uxr_seq_num_add>
 800f5ea:	9b04      	ldr	r3, [sp, #16]
 800f5ec:	9e03      	ldr	r6, [sp, #12]
 800f5ee:	f1a3 0208 	sub.w	r2, r3, #8
 800f5f2:	f10a 0104 	add.w	r1, sl, #4
 800f5f6:	4607      	mov	r7, r0
 800f5f8:	eba2 020a 	sub.w	r2, r2, sl
 800f5fc:	4441      	add	r1, r8
 800f5fe:	4630      	mov	r0, r6
 800f600:	f7fb fe9c 	bl	800b33c <ucdr_init_buffer>
 800f604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f606:	81e7      	strh	r7, [r4, #14]
 800f608:	1d1a      	adds	r2, r3, #4
 800f60a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f60e:	bf28      	it	cs
 800f610:	2200      	movcs	r2, #0
 800f612:	b292      	uxth	r2, r2
 800f614:	2300      	movs	r3, #0
 800f616:	2107      	movs	r1, #7
 800f618:	4630      	mov	r0, r6
 800f61a:	f7ff fe55 	bl	800f2c8 <uxr_buffer_submessage_header>
 800f61e:	9906      	ldr	r1, [sp, #24]
 800f620:	aa09      	add	r2, sp, #36	; 0x24
 800f622:	4628      	mov	r0, r5
 800f624:	f7ff fce6 	bl	800eff4 <uxr_init_base_object_request>
 800f628:	4604      	mov	r4, r0
 800f62a:	b328      	cbz	r0, 800f678 <uxr_prepare_output_stream_fragmented+0x14c>
 800f62c:	9e03      	ldr	r6, [sp, #12]
 800f62e:	a909      	add	r1, sp, #36	; 0x24
 800f630:	4630      	mov	r0, r6
 800f632:	f000 fef1 	bl	8010418 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f636:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f63a:	4630      	mov	r0, r6
 800f63c:	1a52      	subs	r2, r2, r1
 800f63e:	f7fb fe7d 	bl	800b33c <ucdr_init_buffer>
 800f642:	9a05      	ldr	r2, [sp, #20]
 800f644:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800f648:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f64a:	9b07      	ldr	r3, [sp, #28]
 800f64c:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 800f650:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f652:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 800f656:	4630      	mov	r0, r6
 800f658:	4919      	ldr	r1, [pc, #100]	; (800f6c0 <uxr_prepare_output_stream_fragmented+0x194>)
 800f65a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800f65e:	462a      	mov	r2, r5
 800f660:	f7fb fe42 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 800f664:	4620      	mov	r0, r4
 800f666:	b013      	add	sp, #76	; 0x4c
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f66e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f670:	4628      	mov	r0, r5
 800f672:	4798      	blx	r3
 800f674:	b920      	cbnz	r0, 800f680 <uxr_prepare_output_stream_fragmented+0x154>
 800f676:	2400      	movs	r4, #0
 800f678:	4620      	mov	r0, r4
 800f67a:	b013      	add	sp, #76	; 0x4c
 800f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	4620      	mov	r0, r4
 800f682:	f005 f8f3 	bl	801486c <get_available_free_slots>
 800f686:	2800      	cmp	r0, #0
 800f688:	f47f af6a 	bne.w	800f560 <uxr_prepare_output_stream_fragmented+0x34>
 800f68c:	e7f3      	b.n	800f676 <uxr_prepare_output_stream_fragmented+0x14a>
 800f68e:	4638      	mov	r0, r7
 800f690:	2101      	movs	r1, #1
 800f692:	f005 f90b 	bl	80148ac <uxr_seq_num_add>
 800f696:	8922      	ldrh	r2, [r4, #8]
 800f698:	fbb0 f8f2 	udiv	r8, r0, r2
 800f69c:	fb02 0818 	mls	r8, r2, r8, r0
 800f6a0:	fa1f f888 	uxth.w	r8, r8
 800f6a4:	6863      	ldr	r3, [r4, #4]
 800f6a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6aa:	6822      	ldr	r2, [r4, #0]
 800f6ac:	fb08 f803 	mul.w	r8, r8, r3
 800f6b0:	f108 0804 	add.w	r8, r8, #4
 800f6b4:	4490      	add	r8, r2
 800f6b6:	7b23      	ldrb	r3, [r4, #12]
 800f6b8:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800f6bc:	4607      	mov	r7, r0
 800f6be:	e768      	b.n	800f592 <uxr_prepare_output_stream_fragmented+0x66>
 800f6c0:	0800f3b9 	.word	0x0800f3b9

0800f6c4 <uxr_serialize_message_header>:
 800f6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	4616      	mov	r6, r2
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	9301      	str	r3, [sp, #4]
 800f6ce:	460d      	mov	r5, r1
 800f6d0:	9f08      	ldr	r7, [sp, #32]
 800f6d2:	f7fa fcf3 	bl	800a0bc <ucdr_serialize_uint8_t>
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f7fa fcef 	bl	800a0bc <ucdr_serialize_uint8_t>
 800f6de:	9a01      	ldr	r2, [sp, #4]
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	2101      	movs	r1, #1
 800f6e4:	f7fa fd96 	bl	800a214 <ucdr_serialize_endian_uint16_t>
 800f6e8:	062b      	lsls	r3, r5, #24
 800f6ea:	d501      	bpl.n	800f6f0 <uxr_serialize_message_header+0x2c>
 800f6ec:	b003      	add	sp, #12
 800f6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	2204      	movs	r2, #4
 800f6f6:	b003      	add	sp, #12
 800f6f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f6fc:	f004 b9ac 	b.w	8013a58 <ucdr_serialize_array_uint8_t>

0800f700 <uxr_deserialize_message_header>:
 800f700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f702:	b083      	sub	sp, #12
 800f704:	4616      	mov	r6, r2
 800f706:	4604      	mov	r4, r0
 800f708:	9301      	str	r3, [sp, #4]
 800f70a:	460d      	mov	r5, r1
 800f70c:	9f08      	ldr	r7, [sp, #32]
 800f70e:	f7fa fceb 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800f712:	4631      	mov	r1, r6
 800f714:	4620      	mov	r0, r4
 800f716:	f7fa fce7 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800f71a:	9a01      	ldr	r2, [sp, #4]
 800f71c:	4620      	mov	r0, r4
 800f71e:	2101      	movs	r1, #1
 800f720:	f7fa fe6c 	bl	800a3fc <ucdr_deserialize_endian_uint16_t>
 800f724:	f995 3000 	ldrsb.w	r3, [r5]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	da01      	bge.n	800f730 <uxr_deserialize_message_header+0x30>
 800f72c:	b003      	add	sp, #12
 800f72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f730:	4639      	mov	r1, r7
 800f732:	4620      	mov	r0, r4
 800f734:	2204      	movs	r2, #4
 800f736:	b003      	add	sp, #12
 800f738:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f73c:	f004 b9f0 	b.w	8013b20 <ucdr_deserialize_array_uint8_t>

0800f740 <uxr_serialize_submessage_header>:
 800f740:	b530      	push	{r4, r5, lr}
 800f742:	b083      	sub	sp, #12
 800f744:	4615      	mov	r5, r2
 800f746:	4604      	mov	r4, r0
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	f7fa fcb7 	bl	800a0bc <ucdr_serialize_uint8_t>
 800f74e:	4629      	mov	r1, r5
 800f750:	4620      	mov	r0, r4
 800f752:	f7fa fcb3 	bl	800a0bc <ucdr_serialize_uint8_t>
 800f756:	9a01      	ldr	r2, [sp, #4]
 800f758:	4620      	mov	r0, r4
 800f75a:	2101      	movs	r1, #1
 800f75c:	b003      	add	sp, #12
 800f75e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f762:	f7fa bd57 	b.w	800a214 <ucdr_serialize_endian_uint16_t>
 800f766:	bf00      	nop

0800f768 <uxr_deserialize_submessage_header>:
 800f768:	b530      	push	{r4, r5, lr}
 800f76a:	b083      	sub	sp, #12
 800f76c:	4615      	mov	r5, r2
 800f76e:	4604      	mov	r4, r0
 800f770:	9301      	str	r3, [sp, #4]
 800f772:	f7fa fcb9 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800f776:	4629      	mov	r1, r5
 800f778:	4620      	mov	r0, r4
 800f77a:	f7fa fcb5 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800f77e:	9a01      	ldr	r2, [sp, #4]
 800f780:	4620      	mov	r0, r4
 800f782:	2101      	movs	r1, #1
 800f784:	b003      	add	sp, #12
 800f786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f78a:	f7fa be37 	b.w	800a3fc <ucdr_deserialize_endian_uint16_t>
 800f78e:	bf00      	nop

0800f790 <uxr_serialize_CLIENT_Representation>:
 800f790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f794:	2204      	movs	r2, #4
 800f796:	460c      	mov	r4, r1
 800f798:	4605      	mov	r5, r0
 800f79a:	f004 f95d 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f79e:	1d21      	adds	r1, r4, #4
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f004 f957 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f7aa:	1da1      	adds	r1, r4, #6
 800f7ac:	4007      	ands	r7, r0
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	f004 f951 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f7b6:	fa5f f887 	uxtb.w	r8, r7
 800f7ba:	2204      	movs	r2, #4
 800f7bc:	4607      	mov	r7, r0
 800f7be:	f104 0108 	add.w	r1, r4, #8
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f004 f948 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f7c8:	ea08 0707 	and.w	r7, r8, r7
 800f7cc:	7b21      	ldrb	r1, [r4, #12]
 800f7ce:	4680      	mov	r8, r0
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f7fa fc73 	bl	800a0bc <ucdr_serialize_uint8_t>
 800f7d6:	ea08 0807 	and.w	r8, r8, r7
 800f7da:	7b61      	ldrb	r1, [r4, #13]
 800f7dc:	4607      	mov	r7, r0
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f7fa fc3c 	bl	800a05c <ucdr_serialize_bool>
 800f7e4:	7b63      	ldrb	r3, [r4, #13]
 800f7e6:	ea08 0707 	and.w	r7, r8, r7
 800f7ea:	ea07 0600 	and.w	r6, r7, r0
 800f7ee:	b933      	cbnz	r3, 800f7fe <uxr_serialize_CLIENT_Representation+0x6e>
 800f7f0:	8ba1      	ldrh	r1, [r4, #28]
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f7fa fc8e 	bl	800a114 <ucdr_serialize_uint16_t>
 800f7f8:	4030      	ands	r0, r6
 800f7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7fe:	6921      	ldr	r1, [r4, #16]
 800f800:	4628      	mov	r0, r5
 800f802:	f7fa fe71 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800f806:	6923      	ldr	r3, [r4, #16]
 800f808:	b1cb      	cbz	r3, 800f83e <uxr_serialize_CLIENT_Representation+0xae>
 800f80a:	b1d0      	cbz	r0, 800f842 <uxr_serialize_CLIENT_Representation+0xb2>
 800f80c:	46a0      	mov	r8, r4
 800f80e:	f04f 0900 	mov.w	r9, #0
 800f812:	e002      	b.n	800f81a <uxr_serialize_CLIENT_Representation+0x8a>
 800f814:	f108 0808 	add.w	r8, r8, #8
 800f818:	b198      	cbz	r0, 800f842 <uxr_serialize_CLIENT_Representation+0xb2>
 800f81a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f81e:	4628      	mov	r0, r5
 800f820:	f004 fa3a 	bl	8013c98 <ucdr_serialize_string>
 800f824:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f828:	4607      	mov	r7, r0
 800f82a:	4628      	mov	r0, r5
 800f82c:	f004 fa34 	bl	8013c98 <ucdr_serialize_string>
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	f109 0901 	add.w	r9, r9, #1
 800f836:	4038      	ands	r0, r7
 800f838:	4599      	cmp	r9, r3
 800f83a:	b2c0      	uxtb	r0, r0
 800f83c:	d3ea      	bcc.n	800f814 <uxr_serialize_CLIENT_Representation+0x84>
 800f83e:	4006      	ands	r6, r0
 800f840:	e7d6      	b.n	800f7f0 <uxr_serialize_CLIENT_Representation+0x60>
 800f842:	2600      	movs	r6, #0
 800f844:	e7d4      	b.n	800f7f0 <uxr_serialize_CLIENT_Representation+0x60>
 800f846:	bf00      	nop

0800f848 <uxr_deserialize_CLIENT_Representation>:
 800f848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f84c:	2204      	movs	r2, #4
 800f84e:	460c      	mov	r4, r1
 800f850:	4605      	mov	r5, r0
 800f852:	f004 f965 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800f856:	1d21      	adds	r1, r4, #4
 800f858:	4607      	mov	r7, r0
 800f85a:	2202      	movs	r2, #2
 800f85c:	4628      	mov	r0, r5
 800f85e:	f004 f95f 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800f862:	1da1      	adds	r1, r4, #6
 800f864:	4007      	ands	r7, r0
 800f866:	2202      	movs	r2, #2
 800f868:	4628      	mov	r0, r5
 800f86a:	f004 f959 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800f86e:	fa5f f887 	uxtb.w	r8, r7
 800f872:	2204      	movs	r2, #4
 800f874:	4607      	mov	r7, r0
 800f876:	f104 0108 	add.w	r1, r4, #8
 800f87a:	4628      	mov	r0, r5
 800f87c:	f004 f950 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800f880:	ea08 0707 	and.w	r7, r8, r7
 800f884:	f104 010c 	add.w	r1, r4, #12
 800f888:	4680      	mov	r8, r0
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7fa fc2c 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800f890:	ea08 0807 	and.w	r8, r8, r7
 800f894:	f104 010d 	add.w	r1, r4, #13
 800f898:	4607      	mov	r7, r0
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7fa fbf4 	bl	800a088 <ucdr_deserialize_bool>
 800f8a0:	7b63      	ldrb	r3, [r4, #13]
 800f8a2:	ea08 0707 	and.w	r7, r8, r7
 800f8a6:	ea07 0600 	and.w	r6, r7, r0
 800f8aa:	b93b      	cbnz	r3, 800f8bc <uxr_deserialize_CLIENT_Representation+0x74>
 800f8ac:	f104 011c 	add.w	r1, r4, #28
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	f7fa fd2f 	bl	800a314 <ucdr_deserialize_uint16_t>
 800f8b6:	4030      	ands	r0, r6
 800f8b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8bc:	f104 0110 	add.w	r1, r4, #16
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	f7fa ff41 	bl	800a748 <ucdr_deserialize_uint32_t>
 800f8c6:	6923      	ldr	r3, [r4, #16]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d903      	bls.n	800f8d4 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	75ab      	strb	r3, [r5, #22]
 800f8d0:	2600      	movs	r6, #0
 800f8d2:	e7eb      	b.n	800f8ac <uxr_deserialize_CLIENT_Representation+0x64>
 800f8d4:	b1fb      	cbz	r3, 800f916 <uxr_deserialize_CLIENT_Representation+0xce>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d0fa      	beq.n	800f8d0 <uxr_deserialize_CLIENT_Representation+0x88>
 800f8da:	46a0      	mov	r8, r4
 800f8dc:	f04f 0900 	mov.w	r9, #0
 800f8e0:	e003      	b.n	800f8ea <uxr_deserialize_CLIENT_Representation+0xa2>
 800f8e2:	f108 0808 	add.w	r8, r8, #8
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d0f2      	beq.n	800f8d0 <uxr_deserialize_CLIENT_Representation+0x88>
 800f8ea:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f8ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f004 f9e0 	bl	8013cb8 <ucdr_deserialize_string>
 800f8f8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f8fc:	4607      	mov	r7, r0
 800f8fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f902:	4628      	mov	r0, r5
 800f904:	f004 f9d8 	bl	8013cb8 <ucdr_deserialize_string>
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	f109 0901 	add.w	r9, r9, #1
 800f90e:	4038      	ands	r0, r7
 800f910:	4599      	cmp	r9, r3
 800f912:	b2c0      	uxtb	r0, r0
 800f914:	d3e5      	bcc.n	800f8e2 <uxr_deserialize_CLIENT_Representation+0x9a>
 800f916:	4006      	ands	r6, r0
 800f918:	e7c8      	b.n	800f8ac <uxr_deserialize_CLIENT_Representation+0x64>
 800f91a:	bf00      	nop

0800f91c <uxr_serialize_AGENT_Representation>:
 800f91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f920:	2204      	movs	r2, #4
 800f922:	460c      	mov	r4, r1
 800f924:	4605      	mov	r5, r0
 800f926:	f004 f897 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f92a:	1d21      	adds	r1, r4, #4
 800f92c:	4606      	mov	r6, r0
 800f92e:	2202      	movs	r2, #2
 800f930:	4628      	mov	r0, r5
 800f932:	f004 f891 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f936:	1da1      	adds	r1, r4, #6
 800f938:	4006      	ands	r6, r0
 800f93a:	2202      	movs	r2, #2
 800f93c:	4628      	mov	r0, r5
 800f93e:	f004 f88b 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800f942:	b2f6      	uxtb	r6, r6
 800f944:	4603      	mov	r3, r0
 800f946:	7a21      	ldrb	r1, [r4, #8]
 800f948:	4628      	mov	r0, r5
 800f94a:	401e      	ands	r6, r3
 800f94c:	f7fa fb86 	bl	800a05c <ucdr_serialize_bool>
 800f950:	7a23      	ldrb	r3, [r4, #8]
 800f952:	ea00 0706 	and.w	r7, r0, r6
 800f956:	b913      	cbnz	r3, 800f95e <uxr_serialize_AGENT_Representation+0x42>
 800f958:	4638      	mov	r0, r7
 800f95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f95e:	68e1      	ldr	r1, [r4, #12]
 800f960:	4628      	mov	r0, r5
 800f962:	f7fa fdc1 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800f966:	68e3      	ldr	r3, [r4, #12]
 800f968:	b313      	cbz	r3, 800f9b0 <uxr_serialize_AGENT_Representation+0x94>
 800f96a:	b1e8      	cbz	r0, 800f9a8 <uxr_serialize_AGENT_Representation+0x8c>
 800f96c:	46a0      	mov	r8, r4
 800f96e:	f04f 0900 	mov.w	r9, #0
 800f972:	e002      	b.n	800f97a <uxr_serialize_AGENT_Representation+0x5e>
 800f974:	f108 0808 	add.w	r8, r8, #8
 800f978:	b1b3      	cbz	r3, 800f9a8 <uxr_serialize_AGENT_Representation+0x8c>
 800f97a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f97e:	4628      	mov	r0, r5
 800f980:	f004 f98a 	bl	8013c98 <ucdr_serialize_string>
 800f984:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f988:	4606      	mov	r6, r0
 800f98a:	4628      	mov	r0, r5
 800f98c:	f004 f984 	bl	8013c98 <ucdr_serialize_string>
 800f990:	68e2      	ldr	r2, [r4, #12]
 800f992:	f109 0901 	add.w	r9, r9, #1
 800f996:	ea06 0300 	and.w	r3, r6, r0
 800f99a:	4591      	cmp	r9, r2
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	d3e9      	bcc.n	800f974 <uxr_serialize_AGENT_Representation+0x58>
 800f9a0:	401f      	ands	r7, r3
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9a8:	2700      	movs	r7, #0
 800f9aa:	4638      	mov	r0, r7
 800f9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b0:	4007      	ands	r7, r0
 800f9b2:	e7d1      	b.n	800f958 <uxr_serialize_AGENT_Representation+0x3c>

0800f9b4 <uxr_serialize_ObjectVariant.part.0>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	780b      	ldrb	r3, [r1, #0]
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	4605      	mov	r5, r0
 800f9be:	2b0d      	cmp	r3, #13
 800f9c0:	d869      	bhi.n	800fa96 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800f9c2:	e8df f003 	tbb	[pc, r3]
 800f9c6:	074a      	.short	0x074a
 800f9c8:	07073030 	.word	0x07073030
 800f9cc:	21680707 	.word	0x21680707
 800f9d0:	45632121 	.word	0x45632121
 800f9d4:	7909      	ldrb	r1, [r1, #4]
 800f9d6:	f7fa fb71 	bl	800a0bc <ucdr_serialize_uint8_t>
 800f9da:	4606      	mov	r6, r0
 800f9dc:	b158      	cbz	r0, 800f9f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800f9de:	7923      	ldrb	r3, [r4, #4]
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d003      	beq.n	800f9ec <uxr_serialize_ObjectVariant.part.0+0x38>
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d029      	beq.n	800fa3c <uxr_serialize_ObjectVariant.part.0+0x88>
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d104      	bne.n	800f9f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800f9ec:	68a1      	ldr	r1, [r4, #8]
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f004 f952 	bl	8013c98 <ucdr_serialize_string>
 800f9f4:	4606      	mov	r6, r0
 800f9f6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	f004 f82b 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800fa02:	4030      	ands	r0, r6
 800fa04:	b2c0      	uxtb	r0, r0
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	7909      	ldrb	r1, [r1, #4]
 800fa0a:	f7fa fb57 	bl	800a0bc <ucdr_serialize_uint8_t>
 800fa0e:	b1e8      	cbz	r0, 800fa4c <uxr_serialize_ObjectVariant.part.0+0x98>
 800fa10:	7923      	ldrb	r3, [r4, #4]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d001      	beq.n	800fa1a <uxr_serialize_ObjectVariant.part.0+0x66>
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d13d      	bne.n	800fa96 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800fa1a:	68a1      	ldr	r1, [r4, #8]
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa22:	f004 b939 	b.w	8013c98 <ucdr_serialize_string>
 800fa26:	7909      	ldrb	r1, [r1, #4]
 800fa28:	f7fa fb48 	bl	800a0bc <ucdr_serialize_uint8_t>
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d0e1      	beq.n	800f9f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800fa32:	7923      	ldrb	r3, [r4, #4]
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	d0d9      	beq.n	800f9ec <uxr_serialize_ObjectVariant.part.0+0x38>
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d1dc      	bne.n	800f9f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800fa3c:	68a2      	ldr	r2, [r4, #8]
 800fa3e:	f104 010c 	add.w	r1, r4, #12
 800fa42:	4628      	mov	r0, r5
 800fa44:	f004 f8fc 	bl	8013c40 <ucdr_serialize_sequence_uint8_t>
 800fa48:	4606      	mov	r6, r0
 800fa4a:	e7d4      	b.n	800f9f6 <uxr_serialize_ObjectVariant.part.0+0x42>
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}
 800fa50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa54:	3104      	adds	r1, #4
 800fa56:	f7ff be9b 	b.w	800f790 <uxr_serialize_CLIENT_Representation>
 800fa5a:	7909      	ldrb	r1, [r1, #4]
 800fa5c:	f7fa fb2e 	bl	800a0bc <ucdr_serialize_uint8_t>
 800fa60:	4606      	mov	r6, r0
 800fa62:	b158      	cbz	r0, 800fa7c <uxr_serialize_ObjectVariant.part.0+0xc8>
 800fa64:	7923      	ldrb	r3, [r4, #4]
 800fa66:	2b02      	cmp	r3, #2
 800fa68:	d003      	beq.n	800fa72 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	d015      	beq.n	800fa9a <uxr_serialize_ObjectVariant.part.0+0xe6>
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d104      	bne.n	800fa7c <uxr_serialize_ObjectVariant.part.0+0xc8>
 800fa72:	68a1      	ldr	r1, [r4, #8]
 800fa74:	4628      	mov	r0, r5
 800fa76:	f004 f90f 	bl	8013c98 <ucdr_serialize_string>
 800fa7a:	4606      	mov	r6, r0
 800fa7c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800fa80:	4628      	mov	r0, r5
 800fa82:	f7fb f857 	bl	800ab34 <ucdr_serialize_int16_t>
 800fa86:	4030      	ands	r0, r6
 800fa88:	b2c0      	uxtb	r0, r0
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
 800fa8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa90:	3104      	adds	r1, #4
 800fa92:	f7ff bf43 	b.w	800f91c <uxr_serialize_AGENT_Representation>
 800fa96:	2001      	movs	r0, #1
 800fa98:	bd70      	pop	{r4, r5, r6, pc}
 800fa9a:	68a2      	ldr	r2, [r4, #8]
 800fa9c:	f104 010c 	add.w	r1, r4, #12
 800faa0:	4628      	mov	r0, r5
 800faa2:	f004 f8cd 	bl	8013c40 <ucdr_serialize_sequence_uint8_t>
 800faa6:	4606      	mov	r6, r0
 800faa8:	e7e8      	b.n	800fa7c <uxr_serialize_ObjectVariant.part.0+0xc8>
 800faaa:	bf00      	nop

0800faac <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	460d      	mov	r5, r1
 800fab0:	7809      	ldrb	r1, [r1, #0]
 800fab2:	4606      	mov	r6, r0
 800fab4:	f7fa fad2 	bl	800a05c <ucdr_serialize_bool>
 800fab8:	782b      	ldrb	r3, [r5, #0]
 800faba:	4604      	mov	r4, r0
 800fabc:	b94b      	cbnz	r3, 800fad2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800fabe:	7a29      	ldrb	r1, [r5, #8]
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7fa facb 	bl	800a05c <ucdr_serialize_bool>
 800fac6:	7a2b      	ldrb	r3, [r5, #8]
 800fac8:	4004      	ands	r4, r0
 800faca:	b2e4      	uxtb	r4, r4
 800facc:	b943      	cbnz	r3, 800fae0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800face:	4620      	mov	r0, r4
 800fad0:	bd70      	pop	{r4, r5, r6, pc}
 800fad2:	6869      	ldr	r1, [r5, #4]
 800fad4:	4630      	mov	r0, r6
 800fad6:	f004 f8df 	bl	8013c98 <ucdr_serialize_string>
 800fada:	4004      	ands	r4, r0
 800fadc:	b2e4      	uxtb	r4, r4
 800fade:	e7ee      	b.n	800fabe <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800fae0:	68e9      	ldr	r1, [r5, #12]
 800fae2:	4630      	mov	r0, r6
 800fae4:	f004 f8d8 	bl	8013c98 <ucdr_serialize_string>
 800fae8:	4004      	ands	r4, r0
 800faea:	4620      	mov	r0, r4
 800faec:	bd70      	pop	{r4, r5, r6, pc}
 800faee:	bf00      	nop

0800faf0 <uxr_serialize_OBJK_Topic_Binary>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	460d      	mov	r5, r1
 800faf4:	6809      	ldr	r1, [r1, #0]
 800faf6:	4606      	mov	r6, r0
 800faf8:	f004 f8ce 	bl	8013c98 <ucdr_serialize_string>
 800fafc:	7929      	ldrb	r1, [r5, #4]
 800fafe:	4604      	mov	r4, r0
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7fa faab 	bl	800a05c <ucdr_serialize_bool>
 800fb06:	792b      	ldrb	r3, [r5, #4]
 800fb08:	4004      	ands	r4, r0
 800fb0a:	b2e4      	uxtb	r4, r4
 800fb0c:	b943      	cbnz	r3, 800fb20 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800fb0e:	7b29      	ldrb	r1, [r5, #12]
 800fb10:	4630      	mov	r0, r6
 800fb12:	f7fa faa3 	bl	800a05c <ucdr_serialize_bool>
 800fb16:	7b2b      	ldrb	r3, [r5, #12]
 800fb18:	4004      	ands	r4, r0
 800fb1a:	b93b      	cbnz	r3, 800fb2c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	68a9      	ldr	r1, [r5, #8]
 800fb22:	4630      	mov	r0, r6
 800fb24:	f004 f8b8 	bl	8013c98 <ucdr_serialize_string>
 800fb28:	4004      	ands	r4, r0
 800fb2a:	e7f0      	b.n	800fb0e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800fb2c:	6929      	ldr	r1, [r5, #16]
 800fb2e:	4630      	mov	r0, r6
 800fb30:	f004 f8b2 	bl	8013c98 <ucdr_serialize_string>
 800fb34:	4004      	ands	r4, r0
 800fb36:	b2e4      	uxtb	r4, r4
 800fb38:	4620      	mov	r0, r4
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}

0800fb3c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb40:	460c      	mov	r4, r1
 800fb42:	7809      	ldrb	r1, [r1, #0]
 800fb44:	4606      	mov	r6, r0
 800fb46:	f7fa fa89 	bl	800a05c <ucdr_serialize_bool>
 800fb4a:	7823      	ldrb	r3, [r4, #0]
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	b96b      	cbnz	r3, 800fb6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800fb50:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800fb54:	4630      	mov	r0, r6
 800fb56:	f7fa fa81 	bl	800a05c <ucdr_serialize_bool>
 800fb5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fb5e:	4005      	ands	r5, r0
 800fb60:	b2ed      	uxtb	r5, r5
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d169      	bne.n	800fc3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800fb66:	4628      	mov	r0, r5
 800fb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb6c:	6861      	ldr	r1, [r4, #4]
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f7fa fcba 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800fb74:	6863      	ldr	r3, [r4, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d06b      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	d067      	beq.n	800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fb7e:	68a1      	ldr	r1, [r4, #8]
 800fb80:	4630      	mov	r0, r6
 800fb82:	f004 f889 	bl	8013c98 <ucdr_serialize_string>
 800fb86:	6863      	ldr	r3, [r4, #4]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d953      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d05e      	beq.n	800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fb90:	68e1      	ldr	r1, [r4, #12]
 800fb92:	4630      	mov	r0, r6
 800fb94:	f004 f880 	bl	8013c98 <ucdr_serialize_string>
 800fb98:	6863      	ldr	r3, [r4, #4]
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d94a      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d055      	beq.n	800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fba2:	6921      	ldr	r1, [r4, #16]
 800fba4:	4630      	mov	r0, r6
 800fba6:	f004 f877 	bl	8013c98 <ucdr_serialize_string>
 800fbaa:	6863      	ldr	r3, [r4, #4]
 800fbac:	2b03      	cmp	r3, #3
 800fbae:	d941      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d04c      	beq.n	800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbb4:	6961      	ldr	r1, [r4, #20]
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f004 f86e 	bl	8013c98 <ucdr_serialize_string>
 800fbbc:	6863      	ldr	r3, [r4, #4]
 800fbbe:	2b04      	cmp	r3, #4
 800fbc0:	d938      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	d043      	beq.n	800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbc6:	69a1      	ldr	r1, [r4, #24]
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f004 f865 	bl	8013c98 <ucdr_serialize_string>
 800fbce:	6863      	ldr	r3, [r4, #4]
 800fbd0:	2b05      	cmp	r3, #5
 800fbd2:	d92f      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d03a      	beq.n	800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbd8:	69e1      	ldr	r1, [r4, #28]
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f004 f85c 	bl	8013c98 <ucdr_serialize_string>
 800fbe0:	6863      	ldr	r3, [r4, #4]
 800fbe2:	2b06      	cmp	r3, #6
 800fbe4:	d926      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbe6:	b390      	cbz	r0, 800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbe8:	6a21      	ldr	r1, [r4, #32]
 800fbea:	4630      	mov	r0, r6
 800fbec:	f004 f854 	bl	8013c98 <ucdr_serialize_string>
 800fbf0:	6863      	ldr	r3, [r4, #4]
 800fbf2:	2b07      	cmp	r3, #7
 800fbf4:	d91e      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbf6:	b350      	cbz	r0, 800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fbfa:	4630      	mov	r0, r6
 800fbfc:	f004 f84c 	bl	8013c98 <ucdr_serialize_string>
 800fc00:	6863      	ldr	r3, [r4, #4]
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	d916      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fc06:	b310      	cbz	r0, 800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fc08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	f004 f844 	bl	8013c98 <ucdr_serialize_string>
 800fc10:	6863      	ldr	r3, [r4, #4]
 800fc12:	2b09      	cmp	r3, #9
 800fc14:	d90e      	bls.n	800fc34 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fc16:	b1d0      	cbz	r0, 800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fc18:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800fc1c:	2709      	movs	r7, #9
 800fc1e:	e000      	b.n	800fc22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800fc20:	b1a8      	cbz	r0, 800fc4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fc22:	f858 1b04 	ldr.w	r1, [r8], #4
 800fc26:	4630      	mov	r0, r6
 800fc28:	f004 f836 	bl	8013c98 <ucdr_serialize_string>
 800fc2c:	6862      	ldr	r2, [r4, #4]
 800fc2e:	3701      	adds	r7, #1
 800fc30:	4297      	cmp	r7, r2
 800fc32:	d3f5      	bcc.n	800fc20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800fc34:	4005      	ands	r5, r0
 800fc36:	b2ed      	uxtb	r5, r5
 800fc38:	e78a      	b.n	800fb50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fc3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fc42:	f003 fffd 	bl	8013c40 <ucdr_serialize_sequence_uint8_t>
 800fc46:	4005      	ands	r5, r0
 800fc48:	4628      	mov	r0, r5
 800fc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4e:	2500      	movs	r5, #0
 800fc50:	e77e      	b.n	800fb50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fc52:	4028      	ands	r0, r5
 800fc54:	b2c5      	uxtb	r5, r0
 800fc56:	e77b      	b.n	800fb50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800fc58 <uxr_serialize_OBJK_Publisher_Binary>:
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	7809      	ldrb	r1, [r1, #0]
 800fc5e:	4606      	mov	r6, r0
 800fc60:	f7fa f9fc 	bl	800a05c <ucdr_serialize_bool>
 800fc64:	782b      	ldrb	r3, [r5, #0]
 800fc66:	4604      	mov	r4, r0
 800fc68:	b94b      	cbnz	r3, 800fc7e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800fc6a:	7a29      	ldrb	r1, [r5, #8]
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f7fa f9f5 	bl	800a05c <ucdr_serialize_bool>
 800fc72:	7a2b      	ldrb	r3, [r5, #8]
 800fc74:	4004      	ands	r4, r0
 800fc76:	b2e4      	uxtb	r4, r4
 800fc78:	b943      	cbnz	r3, 800fc8c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	bd70      	pop	{r4, r5, r6, pc}
 800fc7e:	6869      	ldr	r1, [r5, #4]
 800fc80:	4630      	mov	r0, r6
 800fc82:	f004 f809 	bl	8013c98 <ucdr_serialize_string>
 800fc86:	4004      	ands	r4, r0
 800fc88:	b2e4      	uxtb	r4, r4
 800fc8a:	e7ee      	b.n	800fc6a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800fc8c:	f105 010c 	add.w	r1, r5, #12
 800fc90:	4630      	mov	r0, r6
 800fc92:	f7ff ff53 	bl	800fb3c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800fc96:	4004      	ands	r4, r0
 800fc98:	4620      	mov	r0, r4
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}

0800fc9c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800fc9c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800fca0:	4688      	mov	r8, r1
 800fca2:	8809      	ldrh	r1, [r1, #0]
 800fca4:	4681      	mov	r9, r0
 800fca6:	f7fa fa35 	bl	800a114 <ucdr_serialize_uint16_t>
 800fcaa:	f898 1002 	ldrb.w	r1, [r8, #2]
 800fcae:	4606      	mov	r6, r0
 800fcb0:	4648      	mov	r0, r9
 800fcb2:	f7fa f9d3 	bl	800a05c <ucdr_serialize_bool>
 800fcb6:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fcba:	4030      	ands	r0, r6
 800fcbc:	b2c5      	uxtb	r5, r0
 800fcbe:	b9eb      	cbnz	r3, 800fcfc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800fcc0:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fcc4:	4648      	mov	r0, r9
 800fcc6:	f7fa f9c9 	bl	800a05c <ucdr_serialize_bool>
 800fcca:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fcce:	4005      	ands	r5, r0
 800fcd0:	bb7b      	cbnz	r3, 800fd32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800fcd2:	f898 100c 	ldrb.w	r1, [r8, #12]
 800fcd6:	4648      	mov	r0, r9
 800fcd8:	f7fa f9c0 	bl	800a05c <ucdr_serialize_bool>
 800fcdc:	f898 300c 	ldrb.w	r3, [r8, #12]
 800fce0:	4005      	ands	r5, r0
 800fce2:	b9f3      	cbnz	r3, 800fd22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800fce4:	f898 1014 	ldrb.w	r1, [r8, #20]
 800fce8:	4648      	mov	r0, r9
 800fcea:	f7fa f9b7 	bl	800a05c <ucdr_serialize_bool>
 800fcee:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fcf2:	4005      	ands	r5, r0
 800fcf4:	b94b      	cbnz	r3, 800fd0a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fcfc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800fd00:	4648      	mov	r0, r9
 800fd02:	f7fa fa07 	bl	800a114 <ucdr_serialize_uint16_t>
 800fd06:	4005      	ands	r5, r0
 800fd08:	e7da      	b.n	800fcc0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800fd0a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800fd0e:	4648      	mov	r0, r9
 800fd10:	f108 011c 	add.w	r1, r8, #28
 800fd14:	f003 ff94 	bl	8013c40 <ucdr_serialize_sequence_uint8_t>
 800fd18:	4028      	ands	r0, r5
 800fd1a:	b2c5      	uxtb	r5, r0
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fd22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fd26:	4648      	mov	r0, r9
 800fd28:	f7fa fbde 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800fd2c:	4028      	ands	r0, r5
 800fd2e:	b2c5      	uxtb	r5, r0
 800fd30:	e7d8      	b.n	800fce4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800fd32:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fd36:	4648      	mov	r0, r9
 800fd38:	f7fa fbd6 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800fd3c:	4028      	ands	r0, r5
 800fd3e:	b2c5      	uxtb	r5, r0
 800fd40:	e7c7      	b.n	800fcd2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800fd42:	bf00      	nop

0800fd44 <uxr_serialize_OBJK_DataWriter_Binary>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	2202      	movs	r2, #2
 800fd48:	460d      	mov	r5, r1
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	f003 fe84 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800fd50:	78a9      	ldrb	r1, [r5, #2]
 800fd52:	4604      	mov	r4, r0
 800fd54:	4630      	mov	r0, r6
 800fd56:	f7fa f981 	bl	800a05c <ucdr_serialize_bool>
 800fd5a:	78ab      	ldrb	r3, [r5, #2]
 800fd5c:	4004      	ands	r4, r0
 800fd5e:	b2e4      	uxtb	r4, r4
 800fd60:	b90b      	cbnz	r3, 800fd66 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fd62:	4620      	mov	r0, r4
 800fd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd66:	f105 0108 	add.w	r1, r5, #8
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f7ff ff96 	bl	800fc9c <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fd70:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800fd74:	4607      	mov	r7, r0
 800fd76:	4630      	mov	r0, r6
 800fd78:	f7fa f970 	bl	800a05c <ucdr_serialize_bool>
 800fd7c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800fd80:	4007      	ands	r7, r0
 800fd82:	b2ff      	uxtb	r7, r7
 800fd84:	b913      	cbnz	r3, 800fd8c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fd86:	403c      	ands	r4, r7
 800fd88:	4620      	mov	r0, r4
 800fd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd8c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800fd90:	4630      	mov	r0, r6
 800fd92:	f7fa fdff 	bl	800a994 <ucdr_serialize_uint64_t>
 800fd96:	4007      	ands	r7, r0
 800fd98:	e7f5      	b.n	800fd86 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fd9a:	bf00      	nop

0800fd9c <uxr_deserialize_ObjectVariant>:
 800fd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9e:	4605      	mov	r5, r0
 800fda0:	460e      	mov	r6, r1
 800fda2:	f7fa f9a1 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800fda6:	b320      	cbz	r0, 800fdf2 <uxr_deserialize_ObjectVariant+0x56>
 800fda8:	7833      	ldrb	r3, [r6, #0]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	4604      	mov	r4, r0
 800fdae:	2b0d      	cmp	r3, #13
 800fdb0:	d81d      	bhi.n	800fdee <uxr_deserialize_ObjectVariant+0x52>
 800fdb2:	e8df f003 	tbb	[pc, r3]
 800fdb6:	2107      	.short	0x2107
 800fdb8:	21214b4b 	.word	0x21214b4b
 800fdbc:	381c2121 	.word	0x381c2121
 800fdc0:	876a3838 	.word	0x876a3838
 800fdc4:	1d31      	adds	r1, r6, #4
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7fa f98e 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800fdcc:	4607      	mov	r7, r0
 800fdce:	b138      	cbz	r0, 800fde0 <uxr_deserialize_ObjectVariant+0x44>
 800fdd0:	7933      	ldrb	r3, [r6, #4]
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d07c      	beq.n	800fed0 <uxr_deserialize_ObjectVariant+0x134>
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	f000 8082 	beq.w	800fee0 <uxr_deserialize_ObjectVariant+0x144>
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d077      	beq.n	800fed0 <uxr_deserialize_ObjectVariant+0x134>
 800fde0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800fde4:	4628      	mov	r0, r5
 800fde6:	f7fa ff25 	bl	800ac34 <ucdr_deserialize_int16_t>
 800fdea:	4038      	ands	r0, r7
 800fdec:	b2c4      	uxtb	r4, r0
 800fdee:	4620      	mov	r0, r4
 800fdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf2:	2400      	movs	r4, #0
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf8:	1d31      	adds	r1, r6, #4
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f7fa f974 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800fe00:	4607      	mov	r7, r0
 800fe02:	b130      	cbz	r0, 800fe12 <uxr_deserialize_ObjectVariant+0x76>
 800fe04:	7933      	ldrb	r3, [r6, #4]
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	d037      	beq.n	800fe7a <uxr_deserialize_ObjectVariant+0xde>
 800fe0a:	2b03      	cmp	r3, #3
 800fe0c:	d02a      	beq.n	800fe64 <uxr_deserialize_ObjectVariant+0xc8>
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d033      	beq.n	800fe7a <uxr_deserialize_ObjectVariant+0xde>
 800fe12:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800fe16:	4628      	mov	r0, r5
 800fe18:	2202      	movs	r2, #2
 800fe1a:	f003 fe81 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800fe1e:	4038      	ands	r0, r7
 800fe20:	b2c4      	uxtb	r4, r0
 800fe22:	4620      	mov	r0, r4
 800fe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe26:	1d31      	adds	r1, r6, #4
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f7fa f95d 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0df      	beq.n	800fdf2 <uxr_deserialize_ObjectVariant+0x56>
 800fe32:	7933      	ldrb	r3, [r6, #4]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d001      	beq.n	800fe3c <uxr_deserialize_ObjectVariant+0xa0>
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d1d8      	bne.n	800fdee <uxr_deserialize_ObjectVariant+0x52>
 800fe3c:	68b1      	ldr	r1, [r6, #8]
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe48:	f003 bf36 	b.w	8013cb8 <ucdr_deserialize_string>
 800fe4c:	1d31      	adds	r1, r6, #4
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f7fa f94a 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 800fe54:	4607      	mov	r7, r0
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d0db      	beq.n	800fe12 <uxr_deserialize_ObjectVariant+0x76>
 800fe5a:	7933      	ldrb	r3, [r6, #4]
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	d00c      	beq.n	800fe7a <uxr_deserialize_ObjectVariant+0xde>
 800fe60:	2b03      	cmp	r3, #3
 800fe62:	d1d6      	bne.n	800fe12 <uxr_deserialize_ObjectVariant+0x76>
 800fe64:	f106 0308 	add.w	r3, r6, #8
 800fe68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe6c:	f106 010c 	add.w	r1, r6, #12
 800fe70:	4628      	mov	r0, r5
 800fe72:	f003 fef7 	bl	8013c64 <ucdr_deserialize_sequence_uint8_t>
 800fe76:	4607      	mov	r7, r0
 800fe78:	e7cb      	b.n	800fe12 <uxr_deserialize_ObjectVariant+0x76>
 800fe7a:	68b1      	ldr	r1, [r6, #8]
 800fe7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe80:	4628      	mov	r0, r5
 800fe82:	f003 ff19 	bl	8013cb8 <ucdr_deserialize_string>
 800fe86:	4607      	mov	r7, r0
 800fe88:	e7c3      	b.n	800fe12 <uxr_deserialize_ObjectVariant+0x76>
 800fe8a:	2204      	movs	r2, #4
 800fe8c:	18b1      	adds	r1, r6, r2
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f003 fe46 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800fe94:	2202      	movs	r2, #2
 800fe96:	4604      	mov	r4, r0
 800fe98:	f106 0108 	add.w	r1, r6, #8
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	f003 fe3f 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800fea2:	2202      	movs	r2, #2
 800fea4:	4004      	ands	r4, r0
 800fea6:	f106 010a 	add.w	r1, r6, #10
 800feaa:	4628      	mov	r0, r5
 800feac:	f003 fe38 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800feb0:	b2e4      	uxtb	r4, r4
 800feb2:	4603      	mov	r3, r0
 800feb4:	f106 010c 	add.w	r1, r6, #12
 800feb8:	4628      	mov	r0, r5
 800feba:	401c      	ands	r4, r3
 800febc:	f7fa f8e4 	bl	800a088 <ucdr_deserialize_bool>
 800fec0:	4004      	ands	r4, r0
 800fec2:	e794      	b.n	800fdee <uxr_deserialize_ObjectVariant+0x52>
 800fec4:	1d31      	adds	r1, r6, #4
 800fec6:	4628      	mov	r0, r5
 800fec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fecc:	f7ff bcbc 	b.w	800f848 <uxr_deserialize_CLIENT_Representation>
 800fed0:	68b1      	ldr	r1, [r6, #8]
 800fed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fed6:	4628      	mov	r0, r5
 800fed8:	f003 feee 	bl	8013cb8 <ucdr_deserialize_string>
 800fedc:	4607      	mov	r7, r0
 800fede:	e77f      	b.n	800fde0 <uxr_deserialize_ObjectVariant+0x44>
 800fee0:	f106 0308 	add.w	r3, r6, #8
 800fee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fee8:	f106 010c 	add.w	r1, r6, #12
 800feec:	4628      	mov	r0, r5
 800feee:	f003 feb9 	bl	8013c64 <ucdr_deserialize_sequence_uint8_t>
 800fef2:	4607      	mov	r7, r0
 800fef4:	e774      	b.n	800fde0 <uxr_deserialize_ObjectVariant+0x44>
 800fef6:	bf00      	nop

0800fef8 <uxr_deserialize_BaseObjectRequest>:
 800fef8:	b570      	push	{r4, r5, r6, lr}
 800fefa:	2202      	movs	r2, #2
 800fefc:	4605      	mov	r5, r0
 800fefe:	460e      	mov	r6, r1
 800ff00:	f003 fe0e 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800ff04:	1cb1      	adds	r1, r6, #2
 800ff06:	4604      	mov	r4, r0
 800ff08:	2202      	movs	r2, #2
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f003 fe08 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 800ff10:	4020      	ands	r0, r4
 800ff12:	b2c0      	uxtb	r0, r0
 800ff14:	bd70      	pop	{r4, r5, r6, pc}
 800ff16:	bf00      	nop

0800ff18 <uxr_serialize_AGENT_ActivityInfo>:
 800ff18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff1c:	460e      	mov	r6, r1
 800ff1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ff22:	4607      	mov	r7, r0
 800ff24:	f7fa fe06 	bl	800ab34 <ucdr_serialize_int16_t>
 800ff28:	6871      	ldr	r1, [r6, #4]
 800ff2a:	4680      	mov	r8, r0
 800ff2c:	4638      	mov	r0, r7
 800ff2e:	f7fa fadb 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800ff32:	6873      	ldr	r3, [r6, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d06a      	beq.n	801000e <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800ff38:	b318      	cbz	r0, 800ff82 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800ff3a:	f106 0904 	add.w	r9, r6, #4
 800ff3e:	2500      	movs	r5, #0
 800ff40:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800ff44:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800ff48:	7a21      	ldrb	r1, [r4, #8]
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	f7fa f8b6 	bl	800a0bc <ucdr_serialize_uint8_t>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d051      	beq.n	800fff8 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800ff54:	7a23      	ldrb	r3, [r4, #8]
 800ff56:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ff5a:	00c9      	lsls	r1, r1, #3
 800ff5c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800ff60:	2b03      	cmp	r3, #3
 800ff62:	d859      	bhi.n	8010018 <uxr_serialize_AGENT_ActivityInfo+0x100>
 800ff64:	e8df f003 	tbb	[pc, r3]
 800ff68:	02122436 	.word	0x02122436
 800ff6c:	4449      	add	r1, r9
 800ff6e:	4638      	mov	r0, r7
 800ff70:	6889      	ldr	r1, [r1, #8]
 800ff72:	f003 fe91 	bl	8013c98 <ucdr_serialize_string>
 800ff76:	6873      	ldr	r3, [r6, #4]
 800ff78:	3501      	adds	r5, #1
 800ff7a:	429d      	cmp	r5, r3
 800ff7c:	d240      	bcs.n	8010000 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	d1de      	bne.n	800ff40 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800ff82:	f04f 0800 	mov.w	r8, #0
 800ff86:	4640      	mov	r0, r8
 800ff88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff8c:	3108      	adds	r1, #8
 800ff8e:	4449      	add	r1, r9
 800ff90:	2210      	movs	r2, #16
 800ff92:	4638      	mov	r0, r7
 800ff94:	f003 fd60 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800ff98:	44aa      	add	sl, r5
 800ff9a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	f8da 101c 	ldr.w	r1, [sl, #28]
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f7fa fa9f 	bl	800a4e8 <ucdr_serialize_uint32_t>
 800ffaa:	4020      	ands	r0, r4
 800ffac:	b2c0      	uxtb	r0, r0
 800ffae:	e7e2      	b.n	800ff76 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800ffb0:	3108      	adds	r1, #8
 800ffb2:	4449      	add	r1, r9
 800ffb4:	2204      	movs	r2, #4
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	f003 fd4e 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800ffbc:	44aa      	add	sl, r5
 800ffbe:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800ffc8:	4638      	mov	r0, r7
 800ffca:	f7fa f8a3 	bl	800a114 <ucdr_serialize_uint16_t>
 800ffce:	4020      	ands	r0, r4
 800ffd0:	b2c0      	uxtb	r0, r0
 800ffd2:	e7d0      	b.n	800ff76 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800ffd4:	3108      	adds	r1, #8
 800ffd6:	4449      	add	r1, r9
 800ffd8:	2202      	movs	r2, #2
 800ffda:	4638      	mov	r0, r7
 800ffdc:	f003 fd3c 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 800ffe0:	44aa      	add	sl, r5
 800ffe2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800ffec:	4638      	mov	r0, r7
 800ffee:	f7fa f865 	bl	800a0bc <ucdr_serialize_uint8_t>
 800fff2:	4020      	ands	r0, r4
 800fff4:	b2c0      	uxtb	r0, r0
 800fff6:	e7be      	b.n	800ff76 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800fff8:	6873      	ldr	r3, [r6, #4]
 800fffa:	3501      	adds	r5, #1
 800fffc:	429d      	cmp	r5, r3
 800fffe:	d3c0      	bcc.n	800ff82 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8010000:	ea08 0000 	and.w	r0, r8, r0
 8010004:	fa5f f880 	uxtb.w	r8, r0
 8010008:	4640      	mov	r0, r8
 801000a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801000e:	ea08 0800 	and.w	r8, r8, r0
 8010012:	fa5f f888 	uxtb.w	r8, r8
 8010016:	e7b6      	b.n	800ff86 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8010018:	6873      	ldr	r3, [r6, #4]
 801001a:	3501      	adds	r5, #1
 801001c:	42ab      	cmp	r3, r5
 801001e:	f104 0418 	add.w	r4, r4, #24
 8010022:	d891      	bhi.n	800ff48 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8010024:	e7af      	b.n	800ff86 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8010026:	bf00      	nop

08010028 <uxr_serialize_ActivityInfoVariant>:
 8010028:	b570      	push	{r4, r5, r6, lr}
 801002a:	460d      	mov	r5, r1
 801002c:	7809      	ldrb	r1, [r1, #0]
 801002e:	4606      	mov	r6, r0
 8010030:	f7fa f844 	bl	800a0bc <ucdr_serialize_uint8_t>
 8010034:	b130      	cbz	r0, 8010044 <uxr_serialize_ActivityInfoVariant+0x1c>
 8010036:	782b      	ldrb	r3, [r5, #0]
 8010038:	2b06      	cmp	r3, #6
 801003a:	d019      	beq.n	8010070 <uxr_serialize_ActivityInfoVariant+0x48>
 801003c:	2b0d      	cmp	r3, #13
 801003e:	d010      	beq.n	8010062 <uxr_serialize_ActivityInfoVariant+0x3a>
 8010040:	2b05      	cmp	r3, #5
 8010042:	d000      	beq.n	8010046 <uxr_serialize_ActivityInfoVariant+0x1e>
 8010044:	bd70      	pop	{r4, r5, r6, pc}
 8010046:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801004a:	4630      	mov	r0, r6
 801004c:	f7fa fd72 	bl	800ab34 <ucdr_serialize_int16_t>
 8010050:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010054:	4604      	mov	r4, r0
 8010056:	4630      	mov	r0, r6
 8010058:	f7fa fc9c 	bl	800a994 <ucdr_serialize_uint64_t>
 801005c:	4020      	ands	r0, r4
 801005e:	b2c0      	uxtb	r0, r0
 8010060:	bd70      	pop	{r4, r5, r6, pc}
 8010062:	f105 0108 	add.w	r1, r5, #8
 8010066:	4630      	mov	r0, r6
 8010068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801006c:	f7ff bf54 	b.w	800ff18 <uxr_serialize_AGENT_ActivityInfo>
 8010070:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010074:	4630      	mov	r0, r6
 8010076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801007a:	f7fa bd5b 	b.w	800ab34 <ucdr_serialize_int16_t>
 801007e:	bf00      	nop

08010080 <uxr_deserialize_BaseObjectReply>:
 8010080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010084:	2202      	movs	r2, #2
 8010086:	4606      	mov	r6, r0
 8010088:	460f      	mov	r7, r1
 801008a:	f003 fd49 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801008e:	2202      	movs	r2, #2
 8010090:	1cb9      	adds	r1, r7, #2
 8010092:	4605      	mov	r5, r0
 8010094:	4630      	mov	r0, r6
 8010096:	f003 fd43 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801009a:	1d39      	adds	r1, r7, #4
 801009c:	4680      	mov	r8, r0
 801009e:	4630      	mov	r0, r6
 80100a0:	f7fa f822 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 80100a4:	1d79      	adds	r1, r7, #5
 80100a6:	4604      	mov	r4, r0
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7fa f81d 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 80100ae:	ea05 0508 	and.w	r5, r5, r8
 80100b2:	402c      	ands	r4, r5
 80100b4:	4020      	ands	r0, r4
 80100b6:	b2c0      	uxtb	r0, r0
 80100b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100bc <uxr_serialize_ReadSpecification>:
 80100bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c0:	460e      	mov	r6, r1
 80100c2:	7809      	ldrb	r1, [r1, #0]
 80100c4:	4607      	mov	r7, r0
 80100c6:	f7f9 fff9 	bl	800a0bc <ucdr_serialize_uint8_t>
 80100ca:	7871      	ldrb	r1, [r6, #1]
 80100cc:	4604      	mov	r4, r0
 80100ce:	4638      	mov	r0, r7
 80100d0:	f7f9 fff4 	bl	800a0bc <ucdr_serialize_uint8_t>
 80100d4:	78b1      	ldrb	r1, [r6, #2]
 80100d6:	4004      	ands	r4, r0
 80100d8:	4638      	mov	r0, r7
 80100da:	f7f9 ffbf 	bl	800a05c <ucdr_serialize_bool>
 80100de:	78b3      	ldrb	r3, [r6, #2]
 80100e0:	b2e4      	uxtb	r4, r4
 80100e2:	4004      	ands	r4, r0
 80100e4:	b94b      	cbnz	r3, 80100fa <uxr_serialize_ReadSpecification+0x3e>
 80100e6:	7a31      	ldrb	r1, [r6, #8]
 80100e8:	4638      	mov	r0, r7
 80100ea:	f7f9 ffb7 	bl	800a05c <ucdr_serialize_bool>
 80100ee:	7a33      	ldrb	r3, [r6, #8]
 80100f0:	4004      	ands	r4, r0
 80100f2:	b943      	cbnz	r3, 8010106 <uxr_serialize_ReadSpecification+0x4a>
 80100f4:	4620      	mov	r0, r4
 80100f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100fa:	6871      	ldr	r1, [r6, #4]
 80100fc:	4638      	mov	r0, r7
 80100fe:	f003 fdcb 	bl	8013c98 <ucdr_serialize_string>
 8010102:	4004      	ands	r4, r0
 8010104:	e7ef      	b.n	80100e6 <uxr_serialize_ReadSpecification+0x2a>
 8010106:	8971      	ldrh	r1, [r6, #10]
 8010108:	4638      	mov	r0, r7
 801010a:	f7fa f803 	bl	800a114 <ucdr_serialize_uint16_t>
 801010e:	89b1      	ldrh	r1, [r6, #12]
 8010110:	4605      	mov	r5, r0
 8010112:	4638      	mov	r0, r7
 8010114:	f7f9 fffe 	bl	800a114 <ucdr_serialize_uint16_t>
 8010118:	89f1      	ldrh	r1, [r6, #14]
 801011a:	4005      	ands	r5, r0
 801011c:	4638      	mov	r0, r7
 801011e:	f7f9 fff9 	bl	800a114 <ucdr_serialize_uint16_t>
 8010122:	8a31      	ldrh	r1, [r6, #16]
 8010124:	4680      	mov	r8, r0
 8010126:	4638      	mov	r0, r7
 8010128:	f7f9 fff4 	bl	800a114 <ucdr_serialize_uint16_t>
 801012c:	b2ed      	uxtb	r5, r5
 801012e:	4025      	ands	r5, r4
 8010130:	ea08 0505 	and.w	r5, r8, r5
 8010134:	ea00 0405 	and.w	r4, r0, r5
 8010138:	4620      	mov	r0, r4
 801013a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801013e:	bf00      	nop

08010140 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010140:	f7ff bb26 	b.w	800f790 <uxr_serialize_CLIENT_Representation>

08010144 <uxr_serialize_CREATE_Payload>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	2202      	movs	r2, #2
 8010148:	4606      	mov	r6, r0
 801014a:	460d      	mov	r5, r1
 801014c:	f003 fc84 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010150:	1ca9      	adds	r1, r5, #2
 8010152:	4604      	mov	r4, r0
 8010154:	2202      	movs	r2, #2
 8010156:	4630      	mov	r0, r6
 8010158:	f003 fc7e 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 801015c:	7929      	ldrb	r1, [r5, #4]
 801015e:	4607      	mov	r7, r0
 8010160:	4630      	mov	r0, r6
 8010162:	f7f9 ffab 	bl	800a0bc <ucdr_serialize_uint8_t>
 8010166:	b328      	cbz	r0, 80101b4 <uxr_serialize_CREATE_Payload+0x70>
 8010168:	792b      	ldrb	r3, [r5, #4]
 801016a:	403c      	ands	r4, r7
 801016c:	3b01      	subs	r3, #1
 801016e:	b2e4      	uxtb	r4, r4
 8010170:	2b0d      	cmp	r3, #13
 8010172:	d81d      	bhi.n	80101b0 <uxr_serialize_CREATE_Payload+0x6c>
 8010174:	e8df f003 	tbb	[pc, r3]
 8010178:	32320753 	.word	0x32320753
 801017c:	07070707 	.word	0x07070707
 8010180:	2121211c 	.word	0x2121211c
 8010184:	684c      	.short	0x684c
 8010186:	7a29      	ldrb	r1, [r5, #8]
 8010188:	4630      	mov	r0, r6
 801018a:	f7f9 ff97 	bl	800a0bc <ucdr_serialize_uint8_t>
 801018e:	4607      	mov	r7, r0
 8010190:	b130      	cbz	r0, 80101a0 <uxr_serialize_CREATE_Payload+0x5c>
 8010192:	7a2b      	ldrb	r3, [r5, #8]
 8010194:	2b02      	cmp	r3, #2
 8010196:	d035      	beq.n	8010204 <uxr_serialize_CREATE_Payload+0xc0>
 8010198:	2b03      	cmp	r3, #3
 801019a:	d02b      	beq.n	80101f4 <uxr_serialize_CREATE_Payload+0xb0>
 801019c:	2b01      	cmp	r3, #1
 801019e:	d031      	beq.n	8010204 <uxr_serialize_CREATE_Payload+0xc0>
 80101a0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80101a4:	4630      	mov	r0, r6
 80101a6:	2202      	movs	r2, #2
 80101a8:	f003 fc56 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 80101ac:	4038      	ands	r0, r7
 80101ae:	4004      	ands	r4, r0
 80101b0:	4620      	mov	r0, r4
 80101b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101b4:	2400      	movs	r4, #0
 80101b6:	4620      	mov	r0, r4
 80101b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ba:	7a29      	ldrb	r1, [r5, #8]
 80101bc:	4630      	mov	r0, r6
 80101be:	f7f9 ff7d 	bl	800a0bc <ucdr_serialize_uint8_t>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	d0f6      	beq.n	80101b4 <uxr_serialize_CREATE_Payload+0x70>
 80101c6:	7a2b      	ldrb	r3, [r5, #8]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d001      	beq.n	80101d0 <uxr_serialize_CREATE_Payload+0x8c>
 80101cc:	2b02      	cmp	r3, #2
 80101ce:	d1ef      	bne.n	80101b0 <uxr_serialize_CREATE_Payload+0x6c>
 80101d0:	68e9      	ldr	r1, [r5, #12]
 80101d2:	4630      	mov	r0, r6
 80101d4:	f003 fd60 	bl	8013c98 <ucdr_serialize_string>
 80101d8:	4004      	ands	r4, r0
 80101da:	e7e9      	b.n	80101b0 <uxr_serialize_CREATE_Payload+0x6c>
 80101dc:	7a29      	ldrb	r1, [r5, #8]
 80101de:	4630      	mov	r0, r6
 80101e0:	f7f9 ff6c 	bl	800a0bc <ucdr_serialize_uint8_t>
 80101e4:	4607      	mov	r7, r0
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d0da      	beq.n	80101a0 <uxr_serialize_CREATE_Payload+0x5c>
 80101ea:	7a2b      	ldrb	r3, [r5, #8]
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d009      	beq.n	8010204 <uxr_serialize_CREATE_Payload+0xc0>
 80101f0:	2b03      	cmp	r3, #3
 80101f2:	d1d5      	bne.n	80101a0 <uxr_serialize_CREATE_Payload+0x5c>
 80101f4:	68ea      	ldr	r2, [r5, #12]
 80101f6:	f105 0110 	add.w	r1, r5, #16
 80101fa:	4630      	mov	r0, r6
 80101fc:	f003 fd20 	bl	8013c40 <ucdr_serialize_sequence_uint8_t>
 8010200:	4607      	mov	r7, r0
 8010202:	e7cd      	b.n	80101a0 <uxr_serialize_CREATE_Payload+0x5c>
 8010204:	68e9      	ldr	r1, [r5, #12]
 8010206:	4630      	mov	r0, r6
 8010208:	f003 fd46 	bl	8013c98 <ucdr_serialize_string>
 801020c:	4607      	mov	r7, r0
 801020e:	e7c7      	b.n	80101a0 <uxr_serialize_CREATE_Payload+0x5c>
 8010210:	f105 0108 	add.w	r1, r5, #8
 8010214:	4630      	mov	r0, r6
 8010216:	f7ff fb81 	bl	800f91c <uxr_serialize_AGENT_Representation>
 801021a:	4004      	ands	r4, r0
 801021c:	e7c8      	b.n	80101b0 <uxr_serialize_CREATE_Payload+0x6c>
 801021e:	7a29      	ldrb	r1, [r5, #8]
 8010220:	4630      	mov	r0, r6
 8010222:	f7f9 ff4b 	bl	800a0bc <ucdr_serialize_uint8_t>
 8010226:	4607      	mov	r7, r0
 8010228:	b130      	cbz	r0, 8010238 <uxr_serialize_CREATE_Payload+0xf4>
 801022a:	7a2b      	ldrb	r3, [r5, #8]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d012      	beq.n	8010256 <uxr_serialize_CREATE_Payload+0x112>
 8010230:	2b03      	cmp	r3, #3
 8010232:	d016      	beq.n	8010262 <uxr_serialize_CREATE_Payload+0x11e>
 8010234:	2b01      	cmp	r3, #1
 8010236:	d00e      	beq.n	8010256 <uxr_serialize_CREATE_Payload+0x112>
 8010238:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 801023c:	4630      	mov	r0, r6
 801023e:	f7fa fc79 	bl	800ab34 <ucdr_serialize_int16_t>
 8010242:	4038      	ands	r0, r7
 8010244:	4004      	ands	r4, r0
 8010246:	e7b3      	b.n	80101b0 <uxr_serialize_CREATE_Payload+0x6c>
 8010248:	f105 0108 	add.w	r1, r5, #8
 801024c:	4630      	mov	r0, r6
 801024e:	f7ff fa9f 	bl	800f790 <uxr_serialize_CLIENT_Representation>
 8010252:	4004      	ands	r4, r0
 8010254:	e7ac      	b.n	80101b0 <uxr_serialize_CREATE_Payload+0x6c>
 8010256:	68e9      	ldr	r1, [r5, #12]
 8010258:	4630      	mov	r0, r6
 801025a:	f003 fd1d 	bl	8013c98 <ucdr_serialize_string>
 801025e:	4607      	mov	r7, r0
 8010260:	e7ea      	b.n	8010238 <uxr_serialize_CREATE_Payload+0xf4>
 8010262:	68ea      	ldr	r2, [r5, #12]
 8010264:	f105 0110 	add.w	r1, r5, #16
 8010268:	4630      	mov	r0, r6
 801026a:	f003 fce9 	bl	8013c40 <ucdr_serialize_sequence_uint8_t>
 801026e:	4607      	mov	r7, r0
 8010270:	e7e2      	b.n	8010238 <uxr_serialize_CREATE_Payload+0xf4>
 8010272:	bf00      	nop

08010274 <uxr_deserialize_GET_INFO_Payload>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	2202      	movs	r2, #2
 8010278:	4605      	mov	r5, r0
 801027a:	460e      	mov	r6, r1
 801027c:	f003 fc50 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 8010280:	1cb1      	adds	r1, r6, #2
 8010282:	2202      	movs	r2, #2
 8010284:	4604      	mov	r4, r0
 8010286:	4628      	mov	r0, r5
 8010288:	f003 fc4a 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801028c:	1d31      	adds	r1, r6, #4
 801028e:	4004      	ands	r4, r0
 8010290:	4628      	mov	r0, r5
 8010292:	f7fa fa59 	bl	800a748 <ucdr_deserialize_uint32_t>
 8010296:	b2e4      	uxtb	r4, r4
 8010298:	4020      	ands	r0, r4
 801029a:	bd70      	pop	{r4, r5, r6, pc}

0801029c <uxr_serialize_DELETE_Payload>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	2202      	movs	r2, #2
 80102a0:	4605      	mov	r5, r0
 80102a2:	460e      	mov	r6, r1
 80102a4:	f003 fbd8 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 80102a8:	1cb1      	adds	r1, r6, #2
 80102aa:	4604      	mov	r4, r0
 80102ac:	2202      	movs	r2, #2
 80102ae:	4628      	mov	r0, r5
 80102b0:	f003 fbd2 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 80102b4:	4020      	ands	r0, r4
 80102b6:	b2c0      	uxtb	r0, r0
 80102b8:	bd70      	pop	{r4, r5, r6, pc}
 80102ba:	bf00      	nop

080102bc <uxr_deserialize_STATUS_AGENT_Payload>:
 80102bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102c0:	4606      	mov	r6, r0
 80102c2:	460f      	mov	r7, r1
 80102c4:	f7f9 ff10 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 80102c8:	1c79      	adds	r1, r7, #1
 80102ca:	4605      	mov	r5, r0
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7f9 ff0b 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 80102d2:	1d39      	adds	r1, r7, #4
 80102d4:	4681      	mov	r9, r0
 80102d6:	2204      	movs	r2, #4
 80102d8:	4630      	mov	r0, r6
 80102da:	f003 fc21 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 80102de:	f107 0108 	add.w	r1, r7, #8
 80102e2:	4604      	mov	r4, r0
 80102e4:	2202      	movs	r2, #2
 80102e6:	4630      	mov	r0, r6
 80102e8:	f003 fc1a 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 80102ec:	f107 010a 	add.w	r1, r7, #10
 80102f0:	4680      	mov	r8, r0
 80102f2:	2202      	movs	r2, #2
 80102f4:	4630      	mov	r0, r6
 80102f6:	f003 fc13 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 80102fa:	ea05 0509 	and.w	r5, r5, r9
 80102fe:	b2ed      	uxtb	r5, r5
 8010300:	402c      	ands	r4, r5
 8010302:	f107 010c 	add.w	r1, r7, #12
 8010306:	4605      	mov	r5, r0
 8010308:	4630      	mov	r0, r6
 801030a:	f7f9 febd 	bl	800a088 <ucdr_deserialize_bool>
 801030e:	ea08 0404 	and.w	r4, r8, r4
 8010312:	4025      	ands	r5, r4
 8010314:	4028      	ands	r0, r5
 8010316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801031a:	bf00      	nop

0801031c <uxr_deserialize_STATUS_Payload>:
 801031c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010320:	2202      	movs	r2, #2
 8010322:	4606      	mov	r6, r0
 8010324:	460f      	mov	r7, r1
 8010326:	f003 fbfb 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801032a:	2202      	movs	r2, #2
 801032c:	1cb9      	adds	r1, r7, #2
 801032e:	4605      	mov	r5, r0
 8010330:	4630      	mov	r0, r6
 8010332:	f003 fbf5 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 8010336:	1d39      	adds	r1, r7, #4
 8010338:	4680      	mov	r8, r0
 801033a:	4630      	mov	r0, r6
 801033c:	f7f9 fed4 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 8010340:	1d79      	adds	r1, r7, #5
 8010342:	4604      	mov	r4, r0
 8010344:	4630      	mov	r0, r6
 8010346:	f7f9 fecf 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 801034a:	ea05 0508 	and.w	r5, r5, r8
 801034e:	402c      	ands	r4, r5
 8010350:	4020      	ands	r0, r4
 8010352:	b2c0      	uxtb	r0, r0
 8010354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010358 <uxr_serialize_INFO_Payload>:
 8010358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035c:	2202      	movs	r2, #2
 801035e:	460c      	mov	r4, r1
 8010360:	4605      	mov	r5, r0
 8010362:	f003 fb79 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010366:	2202      	movs	r2, #2
 8010368:	4680      	mov	r8, r0
 801036a:	1ca1      	adds	r1, r4, #2
 801036c:	4628      	mov	r0, r5
 801036e:	f003 fb73 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010372:	7921      	ldrb	r1, [r4, #4]
 8010374:	4607      	mov	r7, r0
 8010376:	4628      	mov	r0, r5
 8010378:	f7f9 fea0 	bl	800a0bc <ucdr_serialize_uint8_t>
 801037c:	7961      	ldrb	r1, [r4, #5]
 801037e:	4606      	mov	r6, r0
 8010380:	4628      	mov	r0, r5
 8010382:	f7f9 fe9b 	bl	800a0bc <ucdr_serialize_uint8_t>
 8010386:	ea08 0807 	and.w	r8, r8, r7
 801038a:	ea06 0608 	and.w	r6, r6, r8
 801038e:	4006      	ands	r6, r0
 8010390:	7a21      	ldrb	r1, [r4, #8]
 8010392:	4628      	mov	r0, r5
 8010394:	f7f9 fe62 	bl	800a05c <ucdr_serialize_bool>
 8010398:	7a23      	ldrb	r3, [r4, #8]
 801039a:	b2f7      	uxtb	r7, r6
 801039c:	4606      	mov	r6, r0
 801039e:	b96b      	cbnz	r3, 80103bc <uxr_serialize_INFO_Payload+0x64>
 80103a0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80103a4:	4628      	mov	r0, r5
 80103a6:	f7f9 fe59 	bl	800a05c <ucdr_serialize_bool>
 80103aa:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80103ae:	4030      	ands	r0, r6
 80103b0:	b2c6      	uxtb	r6, r0
 80103b2:	b983      	cbnz	r3, 80103d6 <uxr_serialize_INFO_Payload+0x7e>
 80103b4:	ea06 0007 	and.w	r0, r6, r7
 80103b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103bc:	7b21      	ldrb	r1, [r4, #12]
 80103be:	4628      	mov	r0, r5
 80103c0:	f7f9 fe7c 	bl	800a0bc <ucdr_serialize_uint8_t>
 80103c4:	b188      	cbz	r0, 80103ea <uxr_serialize_INFO_Payload+0x92>
 80103c6:	f104 010c 	add.w	r1, r4, #12
 80103ca:	4628      	mov	r0, r5
 80103cc:	f7ff faf2 	bl	800f9b4 <uxr_serialize_ObjectVariant.part.0>
 80103d0:	4030      	ands	r0, r6
 80103d2:	b2c6      	uxtb	r6, r0
 80103d4:	e7e4      	b.n	80103a0 <uxr_serialize_INFO_Payload+0x48>
 80103d6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80103da:	4628      	mov	r0, r5
 80103dc:	f7ff fe24 	bl	8010028 <uxr_serialize_ActivityInfoVariant>
 80103e0:	4006      	ands	r6, r0
 80103e2:	ea06 0007 	and.w	r0, r6, r7
 80103e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ea:	4606      	mov	r6, r0
 80103ec:	e7d8      	b.n	80103a0 <uxr_serialize_INFO_Payload+0x48>
 80103ee:	bf00      	nop

080103f0 <uxr_serialize_READ_DATA_Payload>:
 80103f0:	b570      	push	{r4, r5, r6, lr}
 80103f2:	2202      	movs	r2, #2
 80103f4:	4605      	mov	r5, r0
 80103f6:	460e      	mov	r6, r1
 80103f8:	f003 fb2e 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 80103fc:	1cb1      	adds	r1, r6, #2
 80103fe:	2202      	movs	r2, #2
 8010400:	4604      	mov	r4, r0
 8010402:	4628      	mov	r0, r5
 8010404:	f003 fb28 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010408:	1d31      	adds	r1, r6, #4
 801040a:	4004      	ands	r4, r0
 801040c:	4628      	mov	r0, r5
 801040e:	f7ff fe55 	bl	80100bc <uxr_serialize_ReadSpecification>
 8010412:	b2e4      	uxtb	r4, r4
 8010414:	4020      	ands	r0, r4
 8010416:	bd70      	pop	{r4, r5, r6, pc}

08010418 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	2202      	movs	r2, #2
 801041c:	4605      	mov	r5, r0
 801041e:	460e      	mov	r6, r1
 8010420:	f003 fb1a 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010424:	1cb1      	adds	r1, r6, #2
 8010426:	4604      	mov	r4, r0
 8010428:	2202      	movs	r2, #2
 801042a:	4628      	mov	r0, r5
 801042c:	f003 fb14 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010430:	4020      	ands	r0, r4
 8010432:	b2c0      	uxtb	r0, r0
 8010434:	bd70      	pop	{r4, r5, r6, pc}
 8010436:	bf00      	nop

08010438 <uxr_serialize_ACKNACK_Payload>:
 8010438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043a:	460f      	mov	r7, r1
 801043c:	460e      	mov	r6, r1
 801043e:	f837 1b02 	ldrh.w	r1, [r7], #2
 8010442:	4605      	mov	r5, r0
 8010444:	f7f9 fe66 	bl	800a114 <ucdr_serialize_uint16_t>
 8010448:	4639      	mov	r1, r7
 801044a:	2202      	movs	r2, #2
 801044c:	4604      	mov	r4, r0
 801044e:	4628      	mov	r0, r5
 8010450:	f003 fb02 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 8010454:	7931      	ldrb	r1, [r6, #4]
 8010456:	4004      	ands	r4, r0
 8010458:	4628      	mov	r0, r5
 801045a:	f7f9 fe2f 	bl	800a0bc <ucdr_serialize_uint8_t>
 801045e:	b2e4      	uxtb	r4, r4
 8010460:	4020      	ands	r0, r4
 8010462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010464 <uxr_deserialize_ACKNACK_Payload>:
 8010464:	b570      	push	{r4, r5, r6, lr}
 8010466:	4605      	mov	r5, r0
 8010468:	460e      	mov	r6, r1
 801046a:	f7f9 ff53 	bl	800a314 <ucdr_deserialize_uint16_t>
 801046e:	1cb1      	adds	r1, r6, #2
 8010470:	2202      	movs	r2, #2
 8010472:	4604      	mov	r4, r0
 8010474:	4628      	mov	r0, r5
 8010476:	f003 fb53 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801047a:	1d31      	adds	r1, r6, #4
 801047c:	4004      	ands	r4, r0
 801047e:	4628      	mov	r0, r5
 8010480:	f7f9 fe32 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 8010484:	b2e4      	uxtb	r4, r4
 8010486:	4020      	ands	r0, r4
 8010488:	bd70      	pop	{r4, r5, r6, pc}
 801048a:	bf00      	nop

0801048c <uxr_serialize_HEARTBEAT_Payload>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	460d      	mov	r5, r1
 8010490:	8809      	ldrh	r1, [r1, #0]
 8010492:	4606      	mov	r6, r0
 8010494:	f7f9 fe3e 	bl	800a114 <ucdr_serialize_uint16_t>
 8010498:	8869      	ldrh	r1, [r5, #2]
 801049a:	4604      	mov	r4, r0
 801049c:	4630      	mov	r0, r6
 801049e:	f7f9 fe39 	bl	800a114 <ucdr_serialize_uint16_t>
 80104a2:	7929      	ldrb	r1, [r5, #4]
 80104a4:	4004      	ands	r4, r0
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7f9 fe08 	bl	800a0bc <ucdr_serialize_uint8_t>
 80104ac:	b2e4      	uxtb	r4, r4
 80104ae:	4020      	ands	r0, r4
 80104b0:	bd70      	pop	{r4, r5, r6, pc}
 80104b2:	bf00      	nop

080104b4 <uxr_deserialize_HEARTBEAT_Payload>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	4605      	mov	r5, r0
 80104b8:	460e      	mov	r6, r1
 80104ba:	f7f9 ff2b 	bl	800a314 <ucdr_deserialize_uint16_t>
 80104be:	1cb1      	adds	r1, r6, #2
 80104c0:	4604      	mov	r4, r0
 80104c2:	4628      	mov	r0, r5
 80104c4:	f7f9 ff26 	bl	800a314 <ucdr_deserialize_uint16_t>
 80104c8:	1d31      	adds	r1, r6, #4
 80104ca:	4004      	ands	r4, r0
 80104cc:	4628      	mov	r0, r5
 80104ce:	f7f9 fe0b 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 80104d2:	b2e4      	uxtb	r4, r4
 80104d4:	4020      	ands	r0, r4
 80104d6:	bd70      	pop	{r4, r5, r6, pc}

080104d8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80104d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104dc:	4605      	mov	r5, r0
 80104de:	460e      	mov	r6, r1
 80104e0:	f7fa fcb4 	bl	800ae4c <ucdr_deserialize_int32_t>
 80104e4:	1d31      	adds	r1, r6, #4
 80104e6:	4607      	mov	r7, r0
 80104e8:	4628      	mov	r0, r5
 80104ea:	f7fa f92d 	bl	800a748 <ucdr_deserialize_uint32_t>
 80104ee:	f106 0108 	add.w	r1, r6, #8
 80104f2:	4680      	mov	r8, r0
 80104f4:	4628      	mov	r0, r5
 80104f6:	f7fa fca9 	bl	800ae4c <ucdr_deserialize_int32_t>
 80104fa:	f106 010c 	add.w	r1, r6, #12
 80104fe:	4604      	mov	r4, r0
 8010500:	4628      	mov	r0, r5
 8010502:	f7fa f921 	bl	800a748 <ucdr_deserialize_uint32_t>
 8010506:	ea07 0708 	and.w	r7, r7, r8
 801050a:	403c      	ands	r4, r7
 801050c:	f106 0110 	add.w	r1, r6, #16
 8010510:	4004      	ands	r4, r0
 8010512:	4628      	mov	r0, r5
 8010514:	f7fa fc9a 	bl	800ae4c <ucdr_deserialize_int32_t>
 8010518:	f106 0114 	add.w	r1, r6, #20
 801051c:	4603      	mov	r3, r0
 801051e:	4628      	mov	r0, r5
 8010520:	461d      	mov	r5, r3
 8010522:	f7fa f911 	bl	800a748 <ucdr_deserialize_uint32_t>
 8010526:	b2e4      	uxtb	r4, r4
 8010528:	402c      	ands	r4, r5
 801052a:	4020      	ands	r0, r4
 801052c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010530 <uxr_serialize_SampleIdentity>:
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	220c      	movs	r2, #12
 8010536:	4604      	mov	r4, r0
 8010538:	460d      	mov	r5, r1
 801053a:	f003 fa8d 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 801053e:	2203      	movs	r2, #3
 8010540:	f105 010c 	add.w	r1, r5, #12
 8010544:	4607      	mov	r7, r0
 8010546:	4620      	mov	r0, r4
 8010548:	f003 fa86 	bl	8013a58 <ucdr_serialize_array_uint8_t>
 801054c:	7be9      	ldrb	r1, [r5, #15]
 801054e:	4680      	mov	r8, r0
 8010550:	4620      	mov	r0, r4
 8010552:	f7f9 fdb3 	bl	800a0bc <ucdr_serialize_uint8_t>
 8010556:	6929      	ldr	r1, [r5, #16]
 8010558:	4606      	mov	r6, r0
 801055a:	4620      	mov	r0, r4
 801055c:	f7fa fbde 	bl	800ad1c <ucdr_serialize_int32_t>
 8010560:	6969      	ldr	r1, [r5, #20]
 8010562:	4603      	mov	r3, r0
 8010564:	4620      	mov	r0, r4
 8010566:	ea07 0708 	and.w	r7, r7, r8
 801056a:	461c      	mov	r4, r3
 801056c:	f7f9 ffbc 	bl	800a4e8 <ucdr_serialize_uint32_t>
 8010570:	403e      	ands	r6, r7
 8010572:	4034      	ands	r4, r6
 8010574:	4020      	ands	r0, r4
 8010576:	b2c0      	uxtb	r0, r0
 8010578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801057c <uxr_deserialize_SampleIdentity>:
 801057c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010580:	220c      	movs	r2, #12
 8010582:	4604      	mov	r4, r0
 8010584:	460d      	mov	r5, r1
 8010586:	f003 facb 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801058a:	2203      	movs	r2, #3
 801058c:	f105 010c 	add.w	r1, r5, #12
 8010590:	4607      	mov	r7, r0
 8010592:	4620      	mov	r0, r4
 8010594:	f003 fac4 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 8010598:	f105 010f 	add.w	r1, r5, #15
 801059c:	4680      	mov	r8, r0
 801059e:	4620      	mov	r0, r4
 80105a0:	f7f9 fda2 	bl	800a0e8 <ucdr_deserialize_uint8_t>
 80105a4:	f105 0110 	add.w	r1, r5, #16
 80105a8:	4606      	mov	r6, r0
 80105aa:	4620      	mov	r0, r4
 80105ac:	f7fa fc4e 	bl	800ae4c <ucdr_deserialize_int32_t>
 80105b0:	f105 0114 	add.w	r1, r5, #20
 80105b4:	4603      	mov	r3, r0
 80105b6:	4620      	mov	r0, r4
 80105b8:	ea07 0708 	and.w	r7, r7, r8
 80105bc:	461c      	mov	r4, r3
 80105be:	f7fa f8c3 	bl	800a748 <ucdr_deserialize_uint32_t>
 80105c2:	403e      	ands	r6, r7
 80105c4:	4034      	ands	r4, r6
 80105c6:	4020      	ands	r0, r4
 80105c8:	b2c0      	uxtb	r0, r0
 80105ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ce:	bf00      	nop

080105d0 <rcl_client_get_rmw_handle>:
 80105d0:	b110      	cbz	r0, 80105d8 <rcl_client_get_rmw_handle+0x8>
 80105d2:	6800      	ldr	r0, [r0, #0]
 80105d4:	b100      	cbz	r0, 80105d8 <rcl_client_get_rmw_handle+0x8>
 80105d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop

080105dc <rcl_take_response>:
 80105dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105de:	460e      	mov	r6, r1
 80105e0:	460c      	mov	r4, r1
 80105e2:	4607      	mov	r7, r0
 80105e4:	4694      	mov	ip, r2
 80105e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80105e8:	b08d      	sub	sp, #52	; 0x34
 80105ea:	ad06      	add	r5, sp, #24
 80105ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80105ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80105f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80105f6:	b337      	cbz	r7, 8010646 <rcl_take_response+0x6a>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	b323      	cbz	r3, 8010646 <rcl_take_response+0x6a>
 80105fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80105fe:	b310      	cbz	r0, 8010646 <rcl_take_response+0x6a>
 8010600:	4662      	mov	r2, ip
 8010602:	b31a      	cbz	r2, 801064c <rcl_take_response+0x70>
 8010604:	2300      	movs	r3, #0
 8010606:	2600      	movs	r6, #0
 8010608:	2700      	movs	r7, #0
 801060a:	f88d 3007 	strb.w	r3, [sp, #7]
 801060e:	a902      	add	r1, sp, #8
 8010610:	f10d 0307 	add.w	r3, sp, #7
 8010614:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010618:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801061c:	f002 ff44 	bl	80134a8 <rmw_take_response>
 8010620:	4606      	mov	r6, r0
 8010622:	b9a8      	cbnz	r0, 8010650 <rcl_take_response+0x74>
 8010624:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010628:	f240 13f5 	movw	r3, #501	; 0x1f5
 801062c:	2a00      	cmp	r2, #0
 801062e:	bf08      	it	eq
 8010630:	461e      	moveq	r6, r3
 8010632:	ad06      	add	r5, sp, #24
 8010634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010638:	e895 0003 	ldmia.w	r5, {r0, r1}
 801063c:	e884 0003 	stmia.w	r4, {r0, r1}
 8010640:	4630      	mov	r0, r6
 8010642:	b00d      	add	sp, #52	; 0x34
 8010644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010646:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801064a:	e7f2      	b.n	8010632 <rcl_take_response+0x56>
 801064c:	260b      	movs	r6, #11
 801064e:	e7f0      	b.n	8010632 <rcl_take_response+0x56>
 8010650:	2601      	movs	r6, #1
 8010652:	e7ee      	b.n	8010632 <rcl_take_response+0x56>

08010654 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010654:	280b      	cmp	r0, #11
 8010656:	dc0d      	bgt.n	8010674 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010658:	2800      	cmp	r0, #0
 801065a:	db09      	blt.n	8010670 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801065c:	280b      	cmp	r0, #11
 801065e:	d807      	bhi.n	8010670 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010660:	e8df f000 	tbb	[pc, r0]
 8010664:	07060607 	.word	0x07060607
 8010668:	06060606 	.word	0x06060606
 801066c:	07070606 	.word	0x07070606
 8010670:	2001      	movs	r0, #1
 8010672:	4770      	bx	lr
 8010674:	28cb      	cmp	r0, #203	; 0xcb
 8010676:	bf18      	it	ne
 8010678:	2001      	movne	r0, #1
 801067a:	4770      	bx	lr

0801067c <rcl_get_zero_initialized_context>:
 801067c:	4a03      	ldr	r2, [pc, #12]	; (801068c <rcl_get_zero_initialized_context+0x10>)
 801067e:	4603      	mov	r3, r0
 8010680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010684:	e883 0003 	stmia.w	r3, {r0, r1}
 8010688:	4618      	mov	r0, r3
 801068a:	4770      	bx	lr
 801068c:	08017528 	.word	0x08017528

08010690 <rcl_context_is_valid>:
 8010690:	b118      	cbz	r0, 801069a <rcl_context_is_valid+0xa>
 8010692:	6840      	ldr	r0, [r0, #4]
 8010694:	3800      	subs	r0, #0
 8010696:	bf18      	it	ne
 8010698:	2001      	movne	r0, #1
 801069a:	4770      	bx	lr

0801069c <__cleanup_context>:
 801069c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a0:	4606      	mov	r6, r0
 80106a2:	6800      	ldr	r0, [r0, #0]
 80106a4:	2300      	movs	r3, #0
 80106a6:	6073      	str	r3, [r6, #4]
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d04d      	beq.n	8010748 <__cleanup_context+0xac>
 80106ac:	6947      	ldr	r7, [r0, #20]
 80106ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80106b2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80106b6:	b137      	cbz	r7, 80106c6 <__cleanup_context+0x2a>
 80106b8:	3014      	adds	r0, #20
 80106ba:	f000 fc63 	bl	8010f84 <rcl_init_options_fini>
 80106be:	4607      	mov	r7, r0
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d148      	bne.n	8010756 <__cleanup_context+0xba>
 80106c4:	6830      	ldr	r0, [r6, #0]
 80106c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80106c8:	b143      	cbz	r3, 80106dc <__cleanup_context+0x40>
 80106ca:	3028      	adds	r0, #40	; 0x28
 80106cc:	f002 fd8c 	bl	80131e8 <rmw_context_fini>
 80106d0:	b118      	cbz	r0, 80106da <__cleanup_context+0x3e>
 80106d2:	2f00      	cmp	r7, #0
 80106d4:	d042      	beq.n	801075c <__cleanup_context+0xc0>
 80106d6:	f7fb fed1 	bl	800c47c <rcutils_reset_error>
 80106da:	6830      	ldr	r0, [r6, #0]
 80106dc:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80106e0:	f1bc 0f00 	cmp.w	ip, #0
 80106e4:	d01c      	beq.n	8010720 <__cleanup_context+0x84>
 80106e6:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80106ea:	2a01      	cmp	r2, #1
 80106ec:	f173 0100 	sbcs.w	r1, r3, #0
 80106f0:	db12      	blt.n	8010718 <__cleanup_context+0x7c>
 80106f2:	2400      	movs	r4, #0
 80106f4:	2500      	movs	r5, #0
 80106f6:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80106fa:	4649      	mov	r1, r9
 80106fc:	b1c0      	cbz	r0, 8010730 <__cleanup_context+0x94>
 80106fe:	47c0      	blx	r8
 8010700:	6831      	ldr	r1, [r6, #0]
 8010702:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8010706:	3401      	adds	r4, #1
 8010708:	f145 0500 	adc.w	r5, r5, #0
 801070c:	4294      	cmp	r4, r2
 801070e:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8010712:	eb75 0103 	sbcs.w	r1, r5, r3
 8010716:	dbee      	blt.n	80106f6 <__cleanup_context+0x5a>
 8010718:	4660      	mov	r0, ip
 801071a:	4649      	mov	r1, r9
 801071c:	47c0      	blx	r8
 801071e:	6830      	ldr	r0, [r6, #0]
 8010720:	4649      	mov	r1, r9
 8010722:	47c0      	blx	r8
 8010724:	2300      	movs	r3, #0
 8010726:	e9c6 3300 	strd	r3, r3, [r6]
 801072a:	4638      	mov	r0, r7
 801072c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010730:	3401      	adds	r4, #1
 8010732:	f145 0500 	adc.w	r5, r5, #0
 8010736:	4294      	cmp	r4, r2
 8010738:	eb75 0103 	sbcs.w	r1, r5, r3
 801073c:	dbdb      	blt.n	80106f6 <__cleanup_context+0x5a>
 801073e:	4660      	mov	r0, ip
 8010740:	4649      	mov	r1, r9
 8010742:	47c0      	blx	r8
 8010744:	6830      	ldr	r0, [r6, #0]
 8010746:	e7eb      	b.n	8010720 <__cleanup_context+0x84>
 8010748:	4607      	mov	r7, r0
 801074a:	2300      	movs	r3, #0
 801074c:	e9c6 3300 	strd	r3, r3, [r6]
 8010750:	4638      	mov	r0, r7
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010756:	f7fb fe91 	bl	800c47c <rcutils_reset_error>
 801075a:	e7b3      	b.n	80106c4 <__cleanup_context+0x28>
 801075c:	f7ff ff7a 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010760:	4607      	mov	r7, r0
 8010762:	e7b8      	b.n	80106d6 <__cleanup_context+0x3a>

08010764 <rcl_get_default_domain_id>:
 8010764:	b530      	push	{r4, r5, lr}
 8010766:	b083      	sub	sp, #12
 8010768:	2300      	movs	r3, #0
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	b1d0      	cbz	r0, 80107a4 <rcl_get_default_domain_id+0x40>
 801076e:	4604      	mov	r4, r0
 8010770:	4669      	mov	r1, sp
 8010772:	4815      	ldr	r0, [pc, #84]	; (80107c8 <rcl_get_default_domain_id+0x64>)
 8010774:	f002 fa4a 	bl	8012c0c <rcutils_get_env>
 8010778:	4602      	mov	r2, r0
 801077a:	b110      	cbz	r0, 8010782 <rcl_get_default_domain_id+0x1e>
 801077c:	2001      	movs	r0, #1
 801077e:	b003      	add	sp, #12
 8010780:	bd30      	pop	{r4, r5, pc}
 8010782:	9b00      	ldr	r3, [sp, #0]
 8010784:	b18b      	cbz	r3, 80107aa <rcl_get_default_domain_id+0x46>
 8010786:	7818      	ldrb	r0, [r3, #0]
 8010788:	2800      	cmp	r0, #0
 801078a:	d0f8      	beq.n	801077e <rcl_get_default_domain_id+0x1a>
 801078c:	4618      	mov	r0, r3
 801078e:	a901      	add	r1, sp, #4
 8010790:	9201      	str	r2, [sp, #4]
 8010792:	f005 f9b5 	bl	8015b00 <strtoul>
 8010796:	4605      	mov	r5, r0
 8010798:	b150      	cbz	r0, 80107b0 <rcl_get_default_domain_id+0x4c>
 801079a:	1c43      	adds	r3, r0, #1
 801079c:	d00d      	beq.n	80107ba <rcl_get_default_domain_id+0x56>
 801079e:	6025      	str	r5, [r4, #0]
 80107a0:	2000      	movs	r0, #0
 80107a2:	e7ec      	b.n	801077e <rcl_get_default_domain_id+0x1a>
 80107a4:	200b      	movs	r0, #11
 80107a6:	b003      	add	sp, #12
 80107a8:	bd30      	pop	{r4, r5, pc}
 80107aa:	4618      	mov	r0, r3
 80107ac:	b003      	add	sp, #12
 80107ae:	bd30      	pop	{r4, r5, pc}
 80107b0:	9b01      	ldr	r3, [sp, #4]
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d0f2      	beq.n	801079e <rcl_get_default_domain_id+0x3a>
 80107b8:	e7e0      	b.n	801077c <rcl_get_default_domain_id+0x18>
 80107ba:	f004 fe01 	bl	80153c0 <__errno>
 80107be:	6803      	ldr	r3, [r0, #0]
 80107c0:	2b22      	cmp	r3, #34	; 0x22
 80107c2:	d1ec      	bne.n	801079e <rcl_get_default_domain_id+0x3a>
 80107c4:	e7da      	b.n	801077c <rcl_get_default_domain_id+0x18>
 80107c6:	bf00      	nop
 80107c8:	08017530 	.word	0x08017530

080107cc <rcl_expand_topic_name>:
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	b08b      	sub	sp, #44	; 0x2c
 80107d2:	9306      	str	r3, [sp, #24]
 80107d4:	2800      	cmp	r0, #0
 80107d6:	f000 80d2 	beq.w	801097e <rcl_expand_topic_name+0x1b2>
 80107da:	460e      	mov	r6, r1
 80107dc:	2900      	cmp	r1, #0
 80107de:	f000 80ce 	beq.w	801097e <rcl_expand_topic_name+0x1b2>
 80107e2:	4617      	mov	r7, r2
 80107e4:	2a00      	cmp	r2, #0
 80107e6:	f000 80ca 	beq.w	801097e <rcl_expand_topic_name+0x1b2>
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 80c7 	beq.w	801097e <rcl_expand_topic_name+0x1b2>
 80107f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f000 80c3 	beq.w	801097e <rcl_expand_topic_name+0x1b2>
 80107f8:	a909      	add	r1, sp, #36	; 0x24
 80107fa:	2200      	movs	r2, #0
 80107fc:	4680      	mov	r8, r0
 80107fe:	f001 fa75 	bl	8011cec <rcl_validate_topic_name>
 8010802:	4604      	mov	r4, r0
 8010804:	2800      	cmp	r0, #0
 8010806:	f040 80b6 	bne.w	8010976 <rcl_expand_topic_name+0x1aa>
 801080a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801080c:	2b00      	cmp	r3, #0
 801080e:	f040 80bf 	bne.w	8010990 <rcl_expand_topic_name+0x1c4>
 8010812:	4602      	mov	r2, r0
 8010814:	a909      	add	r1, sp, #36	; 0x24
 8010816:	4630      	mov	r0, r6
 8010818:	f7fc fa0c 	bl	800cc34 <rmw_validate_node_name>
 801081c:	2800      	cmp	r0, #0
 801081e:	f040 80b3 	bne.w	8010988 <rcl_expand_topic_name+0x1bc>
 8010822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010824:	2a00      	cmp	r2, #0
 8010826:	f040 80b8 	bne.w	801099a <rcl_expand_topic_name+0x1ce>
 801082a:	a909      	add	r1, sp, #36	; 0x24
 801082c:	4638      	mov	r0, r7
 801082e:	f7fc f9e3 	bl	800cbf8 <rmw_validate_namespace>
 8010832:	2800      	cmp	r0, #0
 8010834:	f040 80a8 	bne.w	8010988 <rcl_expand_topic_name+0x1bc>
 8010838:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801083a:	2c00      	cmp	r4, #0
 801083c:	f040 80f6 	bne.w	8010a2c <rcl_expand_topic_name+0x260>
 8010840:	217b      	movs	r1, #123	; 0x7b
 8010842:	4640      	mov	r0, r8
 8010844:	f005 f8aa 	bl	801599c <strchr>
 8010848:	f898 3000 	ldrb.w	r3, [r8]
 801084c:	2b2f      	cmp	r3, #47	; 0x2f
 801084e:	4605      	mov	r5, r0
 8010850:	f000 80c4 	beq.w	80109dc <rcl_expand_topic_name+0x210>
 8010854:	2b7e      	cmp	r3, #126	; 0x7e
 8010856:	d16f      	bne.n	8010938 <rcl_expand_topic_name+0x16c>
 8010858:	4638      	mov	r0, r7
 801085a:	f7ef fce3 	bl	8000224 <strlen>
 801085e:	4b87      	ldr	r3, [pc, #540]	; (8010a7c <rcl_expand_topic_name+0x2b0>)
 8010860:	4987      	ldr	r1, [pc, #540]	; (8010a80 <rcl_expand_topic_name+0x2b4>)
 8010862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010864:	9604      	str	r6, [sp, #16]
 8010866:	2801      	cmp	r0, #1
 8010868:	bf0c      	ite	eq
 801086a:	4618      	moveq	r0, r3
 801086c:	4608      	movne	r0, r1
 801086e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010872:	e9cd 2300 	strd	r2, r3, [sp]
 8010876:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801087a:	f108 0101 	add.w	r1, r8, #1
 801087e:	9105      	str	r1, [sp, #20]
 8010880:	ab14      	add	r3, sp, #80	; 0x50
 8010882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010884:	f7fb fe12 	bl	800c4ac <rcutils_format_string_limit>
 8010888:	4682      	mov	sl, r0
 801088a:	2800      	cmp	r0, #0
 801088c:	f000 80d0 	beq.w	8010a30 <rcl_expand_topic_name+0x264>
 8010890:	2d00      	cmp	r5, #0
 8010892:	f000 80aa 	beq.w	80109ea <rcl_expand_topic_name+0x21e>
 8010896:	217b      	movs	r1, #123	; 0x7b
 8010898:	f005 f880 	bl	801599c <strchr>
 801089c:	46d1      	mov	r9, sl
 801089e:	4605      	mov	r5, r0
 80108a0:	9407      	str	r4, [sp, #28]
 80108a2:	46d3      	mov	fp, sl
 80108a4:	464c      	mov	r4, r9
 80108a6:	2d00      	cmp	r5, #0
 80108a8:	f000 80c7 	beq.w	8010a3a <rcl_expand_topic_name+0x26e>
 80108ac:	217d      	movs	r1, #125	; 0x7d
 80108ae:	4620      	mov	r0, r4
 80108b0:	f005 f874 	bl	801599c <strchr>
 80108b4:	eba0 0905 	sub.w	r9, r0, r5
 80108b8:	f109 0a01 	add.w	sl, r9, #1
 80108bc:	4871      	ldr	r0, [pc, #452]	; (8010a84 <rcl_expand_topic_name+0x2b8>)
 80108be:	4652      	mov	r2, sl
 80108c0:	4629      	mov	r1, r5
 80108c2:	f005 f880 	bl	80159c6 <strncmp>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f000 808d 	beq.w	80109e6 <rcl_expand_topic_name+0x21a>
 80108cc:	486e      	ldr	r0, [pc, #440]	; (8010a88 <rcl_expand_topic_name+0x2bc>)
 80108ce:	4652      	mov	r2, sl
 80108d0:	4629      	mov	r1, r5
 80108d2:	f005 f878 	bl	80159c6 <strncmp>
 80108d6:	b130      	cbz	r0, 80108e6 <rcl_expand_topic_name+0x11a>
 80108d8:	486c      	ldr	r0, [pc, #432]	; (8010a8c <rcl_expand_topic_name+0x2c0>)
 80108da:	4652      	mov	r2, sl
 80108dc:	4629      	mov	r1, r5
 80108de:	f005 f872 	bl	80159c6 <strncmp>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d15b      	bne.n	801099e <rcl_expand_topic_name+0x1d2>
 80108e6:	46b9      	mov	r9, r7
 80108e8:	ab16      	add	r3, sp, #88	; 0x58
 80108ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80108ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80108f2:	ab14      	add	r3, sp, #80	; 0x50
 80108f4:	4628      	mov	r0, r5
 80108f6:	cb0c      	ldmia	r3, {r2, r3}
 80108f8:	4651      	mov	r1, sl
 80108fa:	f7fb ff0b 	bl	800c714 <rcutils_strndup>
 80108fe:	4605      	mov	r5, r0
 8010900:	2800      	cmp	r0, #0
 8010902:	f000 80a4 	beq.w	8010a4e <rcl_expand_topic_name+0x282>
 8010906:	464a      	mov	r2, r9
 8010908:	4620      	mov	r0, r4
 801090a:	ab14      	add	r3, sp, #80	; 0x50
 801090c:	4629      	mov	r1, r5
 801090e:	f7fb fe07 	bl	800c520 <rcutils_repl_str>
 8010912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010914:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010916:	4604      	mov	r4, r0
 8010918:	4628      	mov	r0, r5
 801091a:	4798      	blx	r3
 801091c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801091e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010920:	4658      	mov	r0, fp
 8010922:	4798      	blx	r3
 8010924:	2c00      	cmp	r4, #0
 8010926:	f000 8083 	beq.w	8010a30 <rcl_expand_topic_name+0x264>
 801092a:	217b      	movs	r1, #123	; 0x7b
 801092c:	4620      	mov	r0, r4
 801092e:	f005 f835 	bl	801599c <strchr>
 8010932:	46a3      	mov	fp, r4
 8010934:	4605      	mov	r5, r0
 8010936:	e7b6      	b.n	80108a6 <rcl_expand_topic_name+0xda>
 8010938:	2800      	cmp	r0, #0
 801093a:	d151      	bne.n	80109e0 <rcl_expand_topic_name+0x214>
 801093c:	4638      	mov	r0, r7
 801093e:	f7ef fc71 	bl	8000224 <strlen>
 8010942:	4b53      	ldr	r3, [pc, #332]	; (8010a90 <rcl_expand_topic_name+0x2c4>)
 8010944:	4a53      	ldr	r2, [pc, #332]	; (8010a94 <rcl_expand_topic_name+0x2c8>)
 8010946:	f8cd 8010 	str.w	r8, [sp, #16]
 801094a:	2801      	cmp	r0, #1
 801094c:	bf0c      	ite	eq
 801094e:	4618      	moveq	r0, r3
 8010950:	4610      	movne	r0, r2
 8010952:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010958:	e9cd 3200 	strd	r3, r2, [sp]
 801095c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8010960:	ab14      	add	r3, sp, #80	; 0x50
 8010962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010964:	f7fb fda2 	bl	800c4ac <rcutils_format_string_limit>
 8010968:	4682      	mov	sl, r0
 801096a:	4653      	mov	r3, sl
 801096c:	2b00      	cmp	r3, #0
 801096e:	d05f      	beq.n	8010a30 <rcl_expand_topic_name+0x264>
 8010970:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010972:	f8c3 a000 	str.w	sl, [r3]
 8010976:	4620      	mov	r0, r4
 8010978:	b00b      	add	sp, #44	; 0x2c
 801097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097e:	240b      	movs	r4, #11
 8010980:	4620      	mov	r0, r4
 8010982:	b00b      	add	sp, #44	; 0x2c
 8010984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010988:	f7ff fe64 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 801098c:	4604      	mov	r4, r0
 801098e:	e7f2      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 8010990:	2467      	movs	r4, #103	; 0x67
 8010992:	4620      	mov	r0, r4
 8010994:	b00b      	add	sp, #44	; 0x2c
 8010996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099a:	24c9      	movs	r4, #201	; 0xc9
 801099c:	e7eb      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 801099e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80109a2:	9806      	ldr	r0, [sp, #24]
 80109a4:	1c69      	adds	r1, r5, #1
 80109a6:	f7fb ffcf 	bl	800c948 <rcutils_string_map_getn>
 80109aa:	4681      	mov	r9, r0
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d19b      	bne.n	80108e8 <rcl_expand_topic_name+0x11c>
 80109b0:	aa16      	add	r2, sp, #88	; 0x58
 80109b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80109b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80109b6:	f8c3 9000 	str.w	r9, [r3]
 80109ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80109be:	ab14      	add	r3, sp, #80	; 0x50
 80109c0:	cb0c      	ldmia	r3, {r2, r3}
 80109c2:	4651      	mov	r1, sl
 80109c4:	4628      	mov	r0, r5
 80109c6:	f7fb fea5 	bl	800c714 <rcutils_strndup>
 80109ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80109ce:	4798      	blx	r3
 80109d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80109d4:	4658      	mov	r0, fp
 80109d6:	4798      	blx	r3
 80109d8:	2469      	movs	r4, #105	; 0x69
 80109da:	e7cc      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d03e      	beq.n	8010a5e <rcl_expand_topic_name+0x292>
 80109e0:	46c1      	mov	r9, r8
 80109e2:	46a2      	mov	sl, r4
 80109e4:	e75c      	b.n	80108a0 <rcl_expand_topic_name+0xd4>
 80109e6:	46b1      	mov	r9, r6
 80109e8:	e77e      	b.n	80108e8 <rcl_expand_topic_name+0x11c>
 80109ea:	f89a 3000 	ldrb.w	r3, [sl]
 80109ee:	2b2f      	cmp	r3, #47	; 0x2f
 80109f0:	d0be      	beq.n	8010970 <rcl_expand_topic_name+0x1a4>
 80109f2:	4638      	mov	r0, r7
 80109f4:	f7ef fc16 	bl	8000224 <strlen>
 80109f8:	4b25      	ldr	r3, [pc, #148]	; (8010a90 <rcl_expand_topic_name+0x2c4>)
 80109fa:	4926      	ldr	r1, [pc, #152]	; (8010a94 <rcl_expand_topic_name+0x2c8>)
 80109fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80109fe:	f8cd a010 	str.w	sl, [sp, #16]
 8010a02:	2801      	cmp	r0, #1
 8010a04:	bf0c      	ite	eq
 8010a06:	4618      	moveq	r0, r3
 8010a08:	4608      	movne	r0, r1
 8010a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8010a12:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8010a16:	ab14      	add	r3, sp, #80	; 0x50
 8010a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a1a:	f7fb fd47 	bl	800c4ac <rcutils_format_string_limit>
 8010a1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010a20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a22:	4603      	mov	r3, r0
 8010a24:	4650      	mov	r0, sl
 8010a26:	469a      	mov	sl, r3
 8010a28:	4790      	blx	r2
 8010a2a:	e79e      	b.n	801096a <rcl_expand_topic_name+0x19e>
 8010a2c:	24ca      	movs	r4, #202	; 0xca
 8010a2e:	e7a2      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 8010a30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010a32:	2300      	movs	r3, #0
 8010a34:	6013      	str	r3, [r2, #0]
 8010a36:	240a      	movs	r4, #10
 8010a38:	e79d      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 8010a3a:	465b      	mov	r3, fp
 8010a3c:	9c07      	ldr	r4, [sp, #28]
 8010a3e:	46da      	mov	sl, fp
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1d2      	bne.n	80109ea <rcl_expand_topic_name+0x21e>
 8010a44:	f898 3000 	ldrb.w	r3, [r8]
 8010a48:	2b2f      	cmp	r3, #47	; 0x2f
 8010a4a:	d091      	beq.n	8010970 <rcl_expand_topic_name+0x1a4>
 8010a4c:	e776      	b.n	801093c <rcl_expand_topic_name+0x170>
 8010a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a50:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a52:	601d      	str	r5, [r3, #0]
 8010a54:	4658      	mov	r0, fp
 8010a56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a58:	4798      	blx	r3
 8010a5a:	240a      	movs	r4, #10
 8010a5c:	e78b      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 8010a5e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8010a62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010a66:	ab14      	add	r3, sp, #80	; 0x50
 8010a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a6a:	4640      	mov	r0, r8
 8010a6c:	f7fb fe30 	bl	800c6d0 <rcutils_strdup>
 8010a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a72:	2800      	cmp	r0, #0
 8010a74:	bf08      	it	eq
 8010a76:	240a      	moveq	r4, #10
 8010a78:	6018      	str	r0, [r3, #0]
 8010a7a:	e77c      	b.n	8010976 <rcl_expand_topic_name+0x1aa>
 8010a7c:	08017514 	.word	0x08017514
 8010a80:	08017540 	.word	0x08017540
 8010a84:	08017548 	.word	0x08017548
 8010a88:	08017550 	.word	0x08017550
 8010a8c:	08017558 	.word	0x08017558
 8010a90:	08017098 	.word	0x08017098
 8010a94:	080170a0 	.word	0x080170a0

08010a98 <rcl_get_default_topic_name_substitutions>:
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	bf0c      	ite	eq
 8010a9c:	200b      	moveq	r0, #11
 8010a9e:	2000      	movne	r0, #0
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop

08010aa4 <rcl_get_zero_initialized_guard_condition>:
 8010aa4:	4a03      	ldr	r2, [pc, #12]	; (8010ab4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	4770      	bx	lr
 8010ab4:	08017564 	.word	0x08017564

08010ab8 <rcl_guard_condition_init>:
 8010ab8:	b082      	sub	sp, #8
 8010aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010abc:	b087      	sub	sp, #28
 8010abe:	ac0c      	add	r4, sp, #48	; 0x30
 8010ac0:	e884 000c 	stmia.w	r4, {r2, r3}
 8010ac4:	4625      	mov	r5, r4
 8010ac6:	4607      	mov	r7, r0
 8010ac8:	460e      	mov	r6, r1
 8010aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010acc:	ac01      	add	r4, sp, #4
 8010ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ad0:	682b      	ldr	r3, [r5, #0]
 8010ad2:	6023      	str	r3, [r4, #0]
 8010ad4:	a801      	add	r0, sp, #4
 8010ad6:	f7fb fcad 	bl	800c434 <rcutils_allocator_is_valid>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d034      	beq.n	8010b48 <rcl_guard_condition_init+0x90>
 8010ade:	463c      	mov	r4, r7
 8010ae0:	2f00      	cmp	r7, #0
 8010ae2:	d031      	beq.n	8010b48 <rcl_guard_condition_init+0x90>
 8010ae4:	4635      	mov	r5, r6
 8010ae6:	687e      	ldr	r6, [r7, #4]
 8010ae8:	bb46      	cbnz	r6, 8010b3c <rcl_guard_condition_init+0x84>
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	d02c      	beq.n	8010b48 <rcl_guard_condition_init+0x90>
 8010aee:	4628      	mov	r0, r5
 8010af0:	f7ff fdce 	bl	8010690 <rcl_context_is_valid>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d02d      	beq.n	8010b54 <rcl_guard_condition_init+0x9c>
 8010af8:	9b01      	ldr	r3, [sp, #4]
 8010afa:	9905      	ldr	r1, [sp, #20]
 8010afc:	201c      	movs	r0, #28
 8010afe:	4798      	blx	r3
 8010b00:	4607      	mov	r7, r0
 8010b02:	6060      	str	r0, [r4, #4]
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d02e      	beq.n	8010b66 <rcl_guard_condition_init+0xae>
 8010b08:	6828      	ldr	r0, [r5, #0]
 8010b0a:	3028      	adds	r0, #40	; 0x28
 8010b0c:	f002 f932 	bl	8012d74 <rmw_create_guard_condition>
 8010b10:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8010b14:	6038      	str	r0, [r7, #0]
 8010b16:	f8dc 5000 	ldr.w	r5, [ip]
 8010b1a:	b1ed      	cbz	r5, 8010b58 <rcl_guard_condition_init+0xa0>
 8010b1c:	ac01      	add	r4, sp, #4
 8010b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b20:	2701      	movs	r7, #1
 8010b22:	f10c 0508 	add.w	r5, ip, #8
 8010b26:	f88c 7004 	strb.w	r7, [ip, #4]
 8010b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b2c:	6823      	ldr	r3, [r4, #0]
 8010b2e:	602b      	str	r3, [r5, #0]
 8010b30:	4630      	mov	r0, r6
 8010b32:	b007      	add	sp, #28
 8010b34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b38:	b002      	add	sp, #8
 8010b3a:	4770      	bx	lr
 8010b3c:	2064      	movs	r0, #100	; 0x64
 8010b3e:	b007      	add	sp, #28
 8010b40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b44:	b002      	add	sp, #8
 8010b46:	4770      	bx	lr
 8010b48:	200b      	movs	r0, #11
 8010b4a:	b007      	add	sp, #28
 8010b4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b50:	b002      	add	sp, #8
 8010b52:	4770      	bx	lr
 8010b54:	2065      	movs	r0, #101	; 0x65
 8010b56:	e7f2      	b.n	8010b3e <rcl_guard_condition_init+0x86>
 8010b58:	4660      	mov	r0, ip
 8010b5a:	9b02      	ldr	r3, [sp, #8]
 8010b5c:	9905      	ldr	r1, [sp, #20]
 8010b5e:	4798      	blx	r3
 8010b60:	6065      	str	r5, [r4, #4]
 8010b62:	2001      	movs	r0, #1
 8010b64:	e7eb      	b.n	8010b3e <rcl_guard_condition_init+0x86>
 8010b66:	200a      	movs	r0, #10
 8010b68:	e7e9      	b.n	8010b3e <rcl_guard_condition_init+0x86>
 8010b6a:	bf00      	nop

08010b6c <rcl_guard_condition_init_from_rmw>:
 8010b6c:	b082      	sub	sp, #8
 8010b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	ac0c      	add	r4, sp, #48	; 0x30
 8010b76:	4684      	mov	ip, r0
 8010b78:	f844 3f04 	str.w	r3, [r4, #4]!
 8010b7c:	460f      	mov	r7, r1
 8010b7e:	4690      	mov	r8, r2
 8010b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b82:	ad01      	add	r5, sp, #4
 8010b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	602b      	str	r3, [r5, #0]
 8010b8a:	a801      	add	r0, sp, #4
 8010b8c:	4664      	mov	r4, ip
 8010b8e:	f7fb fc51 	bl	800c434 <rcutils_allocator_is_valid>
 8010b92:	b328      	cbz	r0, 8010be0 <rcl_guard_condition_init_from_rmw+0x74>
 8010b94:	b324      	cbz	r4, 8010be0 <rcl_guard_condition_init_from_rmw+0x74>
 8010b96:	6866      	ldr	r6, [r4, #4]
 8010b98:	b9e6      	cbnz	r6, 8010bd4 <rcl_guard_condition_init_from_rmw+0x68>
 8010b9a:	f1b8 0f00 	cmp.w	r8, #0
 8010b9e:	d01f      	beq.n	8010be0 <rcl_guard_condition_init_from_rmw+0x74>
 8010ba0:	4640      	mov	r0, r8
 8010ba2:	f7ff fd75 	bl	8010690 <rcl_context_is_valid>
 8010ba6:	b308      	cbz	r0, 8010bec <rcl_guard_condition_init_from_rmw+0x80>
 8010ba8:	9b01      	ldr	r3, [sp, #4]
 8010baa:	9905      	ldr	r1, [sp, #20]
 8010bac:	201c      	movs	r0, #28
 8010bae:	4798      	blx	r3
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	6060      	str	r0, [r4, #4]
 8010bb4:	b340      	cbz	r0, 8010c08 <rcl_guard_condition_init_from_rmw+0x9c>
 8010bb6:	b1df      	cbz	r7, 8010bf0 <rcl_guard_condition_init_from_rmw+0x84>
 8010bb8:	6007      	str	r7, [r0, #0]
 8010bba:	7106      	strb	r6, [r0, #4]
 8010bbc:	ac01      	add	r4, sp, #4
 8010bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bc0:	3508      	adds	r5, #8
 8010bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	602b      	str	r3, [r5, #0]
 8010bc8:	2000      	movs	r0, #0
 8010bca:	b006      	add	sp, #24
 8010bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd0:	b002      	add	sp, #8
 8010bd2:	4770      	bx	lr
 8010bd4:	2064      	movs	r0, #100	; 0x64
 8010bd6:	b006      	add	sp, #24
 8010bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bdc:	b002      	add	sp, #8
 8010bde:	4770      	bx	lr
 8010be0:	200b      	movs	r0, #11
 8010be2:	b006      	add	sp, #24
 8010be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010be8:	b002      	add	sp, #8
 8010bea:	4770      	bx	lr
 8010bec:	2065      	movs	r0, #101	; 0x65
 8010bee:	e7f2      	b.n	8010bd6 <rcl_guard_condition_init_from_rmw+0x6a>
 8010bf0:	f8d8 0000 	ldr.w	r0, [r8]
 8010bf4:	3028      	adds	r0, #40	; 0x28
 8010bf6:	f002 f8bd 	bl	8012d74 <rmw_create_guard_condition>
 8010bfa:	6028      	str	r0, [r5, #0]
 8010bfc:	6865      	ldr	r5, [r4, #4]
 8010bfe:	682e      	ldr	r6, [r5, #0]
 8010c00:	b126      	cbz	r6, 8010c0c <rcl_guard_condition_init_from_rmw+0xa0>
 8010c02:	2301      	movs	r3, #1
 8010c04:	712b      	strb	r3, [r5, #4]
 8010c06:	e7d9      	b.n	8010bbc <rcl_guard_condition_init_from_rmw+0x50>
 8010c08:	200a      	movs	r0, #10
 8010c0a:	e7e4      	b.n	8010bd6 <rcl_guard_condition_init_from_rmw+0x6a>
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	9b02      	ldr	r3, [sp, #8]
 8010c10:	9905      	ldr	r1, [sp, #20]
 8010c12:	4798      	blx	r3
 8010c14:	6066      	str	r6, [r4, #4]
 8010c16:	2001      	movs	r0, #1
 8010c18:	e7dd      	b.n	8010bd6 <rcl_guard_condition_init_from_rmw+0x6a>
 8010c1a:	bf00      	nop

08010c1c <rcl_guard_condition_fini>:
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	b1f0      	cbz	r0, 8010c60 <rcl_guard_condition_fini+0x44>
 8010c22:	4604      	mov	r4, r0
 8010c24:	6840      	ldr	r0, [r0, #4]
 8010c26:	b158      	cbz	r0, 8010c40 <rcl_guard_condition_fini+0x24>
 8010c28:	6803      	ldr	r3, [r0, #0]
 8010c2a:	68c6      	ldr	r6, [r0, #12]
 8010c2c:	6981      	ldr	r1, [r0, #24]
 8010c2e:	b15b      	cbz	r3, 8010c48 <rcl_guard_condition_fini+0x2c>
 8010c30:	7905      	ldrb	r5, [r0, #4]
 8010c32:	b95d      	cbnz	r5, 8010c4c <rcl_guard_condition_fini+0x30>
 8010c34:	47b0      	blx	r6
 8010c36:	2300      	movs	r3, #0
 8010c38:	4628      	mov	r0, r5
 8010c3a:	6063      	str	r3, [r4, #4]
 8010c3c:	b002      	add	sp, #8
 8010c3e:	bd70      	pop	{r4, r5, r6, pc}
 8010c40:	4605      	mov	r5, r0
 8010c42:	4628      	mov	r0, r5
 8010c44:	b002      	add	sp, #8
 8010c46:	bd70      	pop	{r4, r5, r6, pc}
 8010c48:	461d      	mov	r5, r3
 8010c4a:	e7f3      	b.n	8010c34 <rcl_guard_condition_fini+0x18>
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	9101      	str	r1, [sp, #4]
 8010c50:	f002 f8a4 	bl	8012d9c <rmw_destroy_guard_condition>
 8010c54:	1e05      	subs	r5, r0, #0
 8010c56:	9901      	ldr	r1, [sp, #4]
 8010c58:	6860      	ldr	r0, [r4, #4]
 8010c5a:	bf18      	it	ne
 8010c5c:	2501      	movne	r5, #1
 8010c5e:	e7e9      	b.n	8010c34 <rcl_guard_condition_fini+0x18>
 8010c60:	250b      	movs	r5, #11
 8010c62:	4628      	mov	r0, r5
 8010c64:	b002      	add	sp, #8
 8010c66:	bd70      	pop	{r4, r5, r6, pc}

08010c68 <rcl_guard_condition_get_default_options>:
 8010c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	4607      	mov	r7, r0
 8010c6e:	466c      	mov	r4, sp
 8010c70:	4668      	mov	r0, sp
 8010c72:	f7fb fbd1 	bl	800c418 <rcutils_get_default_allocator>
 8010c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c78:	4d07      	ldr	r5, [pc, #28]	; (8010c98 <rcl_guard_condition_get_default_options+0x30>)
 8010c7a:	f8d4 c000 	ldr.w	ip, [r4]
 8010c7e:	462e      	mov	r6, r5
 8010c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010c82:	462c      	mov	r4, r5
 8010c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c86:	463c      	mov	r4, r7
 8010c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c8a:	4638      	mov	r0, r7
 8010c8c:	f8c6 c000 	str.w	ip, [r6]
 8010c90:	f8c4 c000 	str.w	ip, [r4]
 8010c94:	b007      	add	sp, #28
 8010c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c98:	2000c10c 	.word	0x2000c10c

08010c9c <rcl_trigger_guard_condition>:
 8010c9c:	b148      	cbz	r0, 8010cb2 <rcl_trigger_guard_condition+0x16>
 8010c9e:	b508      	push	{r3, lr}
 8010ca0:	6843      	ldr	r3, [r0, #4]
 8010ca2:	b143      	cbz	r3, 8010cb6 <rcl_trigger_guard_condition+0x1a>
 8010ca4:	6818      	ldr	r0, [r3, #0]
 8010ca6:	f002 fc9f 	bl	80135e8 <rmw_trigger_guard_condition>
 8010caa:	3800      	subs	r0, #0
 8010cac:	bf18      	it	ne
 8010cae:	2001      	movne	r0, #1
 8010cb0:	bd08      	pop	{r3, pc}
 8010cb2:	200b      	movs	r0, #11
 8010cb4:	4770      	bx	lr
 8010cb6:	200b      	movs	r0, #11
 8010cb8:	bd08      	pop	{r3, pc}
 8010cba:	bf00      	nop

08010cbc <rcl_guard_condition_get_rmw_handle>:
 8010cbc:	b110      	cbz	r0, 8010cc4 <rcl_guard_condition_get_rmw_handle+0x8>
 8010cbe:	6840      	ldr	r0, [r0, #4]
 8010cc0:	b100      	cbz	r0, 8010cc4 <rcl_guard_condition_get_rmw_handle+0x8>
 8010cc2:	6800      	ldr	r0, [r0, #0]
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop

08010cc8 <rcl_init>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	1e07      	subs	r7, r0, #0
 8010cce:	b09f      	sub	sp, #124	; 0x7c
 8010cd0:	4688      	mov	r8, r1
 8010cd2:	4692      	mov	sl, r2
 8010cd4:	4699      	mov	r9, r3
 8010cd6:	f340 8097 	ble.w	8010e08 <rcl_init+0x140>
 8010cda:	2900      	cmp	r1, #0
 8010cdc:	f000 8097 	beq.w	8010e0e <rcl_init+0x146>
 8010ce0:	1f0d      	subs	r5, r1, #4
 8010ce2:	2400      	movs	r4, #0
 8010ce4:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8010ce8:	3401      	adds	r4, #1
 8010cea:	2e00      	cmp	r6, #0
 8010cec:	f000 808f 	beq.w	8010e0e <rcl_init+0x146>
 8010cf0:	42a7      	cmp	r7, r4
 8010cf2:	d1f7      	bne.n	8010ce4 <rcl_init+0x1c>
 8010cf4:	f1ba 0f00 	cmp.w	sl, #0
 8010cf8:	f000 8089 	beq.w	8010e0e <rcl_init+0x146>
 8010cfc:	f8da 4000 	ldr.w	r4, [sl]
 8010d00:	2c00      	cmp	r4, #0
 8010d02:	f000 8084 	beq.w	8010e0e <rcl_init+0x146>
 8010d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d08:	ad19      	add	r5, sp, #100	; 0x64
 8010d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d0c:	6823      	ldr	r3, [r4, #0]
 8010d0e:	602b      	str	r3, [r5, #0]
 8010d10:	a819      	add	r0, sp, #100	; 0x64
 8010d12:	f7fb fb8f 	bl	800c434 <rcutils_allocator_is_valid>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d079      	beq.n	8010e0e <rcl_init+0x146>
 8010d1a:	f1b9 0f00 	cmp.w	r9, #0
 8010d1e:	d076      	beq.n	8010e0e <rcl_init+0x146>
 8010d20:	f8d9 3000 	ldr.w	r3, [r9]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d177      	bne.n	8010e18 <rcl_init+0x150>
 8010d28:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010d2c:	2178      	movs	r1, #120	; 0x78
 8010d2e:	2001      	movs	r0, #1
 8010d30:	4798      	blx	r3
 8010d32:	4604      	mov	r4, r0
 8010d34:	f8c9 0000 	str.w	r0, [r9]
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	f000 80ba 	beq.w	8010eb2 <rcl_init+0x1ea>
 8010d3e:	a802      	add	r0, sp, #8
 8010d40:	f001 ff7c 	bl	8012c3c <rmw_get_zero_initialized_context>
 8010d44:	a902      	add	r1, sp, #8
 8010d46:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010d4a:	2250      	movs	r2, #80	; 0x50
 8010d4c:	ac19      	add	r4, sp, #100	; 0x64
 8010d4e:	f004 fbb9 	bl	80154c4 <memcpy>
 8010d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d54:	f8d9 5000 	ldr.w	r5, [r9]
 8010d58:	6826      	ldr	r6, [r4, #0]
 8010d5a:	462c      	mov	r4, r5
 8010d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d5e:	f105 0114 	add.w	r1, r5, #20
 8010d62:	6026      	str	r6, [r4, #0]
 8010d64:	4650      	mov	r0, sl
 8010d66:	f000 f931 	bl	8010fcc <rcl_init_options_copy>
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	d144      	bne.n	8010dfa <rcl_init+0x132>
 8010d70:	f8d9 a000 	ldr.w	sl, [r9]
 8010d74:	463c      	mov	r4, r7
 8010d76:	17fd      	asrs	r5, r7, #31
 8010d78:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8010d7c:	f8ca 0020 	str.w	r0, [sl, #32]
 8010d80:	2f00      	cmp	r7, #0
 8010d82:	d050      	beq.n	8010e26 <rcl_init+0x15e>
 8010d84:	f1b8 0f00 	cmp.w	r8, #0
 8010d88:	d04d      	beq.n	8010e26 <rcl_init+0x15e>
 8010d8a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010d8e:	4638      	mov	r0, r7
 8010d90:	2104      	movs	r1, #4
 8010d92:	4798      	blx	r3
 8010d94:	f8ca 0020 	str.w	r0, [sl, #32]
 8010d98:	f8d9 a000 	ldr.w	sl, [r9]
 8010d9c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8010da0:	46d3      	mov	fp, sl
 8010da2:	b34b      	cbz	r3, 8010df8 <rcl_init+0x130>
 8010da4:	2f01      	cmp	r7, #1
 8010da6:	f175 0300 	sbcs.w	r3, r5, #0
 8010daa:	db3c      	blt.n	8010e26 <rcl_init+0x15e>
 8010dac:	f1a8 0804 	sub.w	r8, r8, #4
 8010db0:	2600      	movs	r6, #0
 8010db2:	2700      	movs	r7, #0
 8010db4:	e00c      	b.n	8010dd0 <rcl_init+0x108>
 8010db6:	f8d8 1000 	ldr.w	r1, [r8]
 8010dba:	f004 fb83 	bl	80154c4 <memcpy>
 8010dbe:	3601      	adds	r6, #1
 8010dc0:	f147 0700 	adc.w	r7, r7, #0
 8010dc4:	42bd      	cmp	r5, r7
 8010dc6:	bf08      	it	eq
 8010dc8:	42b4      	cmpeq	r4, r6
 8010dca:	d02a      	beq.n	8010e22 <rcl_init+0x15a>
 8010dcc:	f8d9 b000 	ldr.w	fp, [r9]
 8010dd0:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8010dd4:	f7ef fa26 	bl	8000224 <strlen>
 8010dd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010dda:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010ddc:	f8db a020 	ldr.w	sl, [fp, #32]
 8010de0:	9001      	str	r0, [sp, #4]
 8010de2:	4798      	blx	r3
 8010de4:	f8d9 1000 	ldr.w	r1, [r9]
 8010de8:	9a01      	ldr	r2, [sp, #4]
 8010dea:	6a09      	ldr	r1, [r1, #32]
 8010dec:	00b3      	lsls	r3, r6, #2
 8010dee:	f84a 0003 	str.w	r0, [sl, r3]
 8010df2:	58c8      	ldr	r0, [r1, r3]
 8010df4:	2800      	cmp	r0, #0
 8010df6:	d1de      	bne.n	8010db6 <rcl_init+0xee>
 8010df8:	260a      	movs	r6, #10
 8010dfa:	4648      	mov	r0, r9
 8010dfc:	f7ff fc4e 	bl	801069c <__cleanup_context>
 8010e00:	4630      	mov	r0, r6
 8010e02:	b01f      	add	sp, #124	; 0x7c
 8010e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e08:	2900      	cmp	r1, #0
 8010e0a:	f43f af73 	beq.w	8010cf4 <rcl_init+0x2c>
 8010e0e:	260b      	movs	r6, #11
 8010e10:	4630      	mov	r0, r6
 8010e12:	b01f      	add	sp, #124	; 0x7c
 8010e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e18:	2664      	movs	r6, #100	; 0x64
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	b01f      	add	sp, #124	; 0x7c
 8010e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e22:	f8d9 a000 	ldr.w	sl, [r9]
 8010e26:	4a2c      	ldr	r2, [pc, #176]	; (8010ed8 <rcl_init+0x210>)
 8010e28:	6813      	ldr	r3, [r2, #0]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	d03b      	beq.n	8010ea6 <rcl_init+0x1de>
 8010e2e:	6013      	str	r3, [r2, #0]
 8010e30:	4619      	mov	r1, r3
 8010e32:	2000      	movs	r0, #0
 8010e34:	f8da 4014 	ldr.w	r4, [sl, #20]
 8010e38:	f8c9 3004 	str.w	r3, [r9, #4]
 8010e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e3e:	3301      	adds	r3, #1
 8010e40:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8010e44:	d039      	beq.n	8010eba <rcl_init+0x1f2>
 8010e46:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8010e4a:	b94b      	cbnz	r3, 8010e60 <rcl_init+0x198>
 8010e4c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8010e50:	f000 f962 	bl	8011118 <rcl_get_localhost_only>
 8010e54:	4606      	mov	r6, r0
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d1cf      	bne.n	8010dfa <rcl_init+0x132>
 8010e5a:	f8d9 3000 	ldr.w	r3, [r9]
 8010e5e:	695c      	ldr	r4, [r3, #20]
 8010e60:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8010e62:	aa18      	add	r2, sp, #96	; 0x60
 8010e64:	a917      	add	r1, sp, #92	; 0x5c
 8010e66:	f000 ff2f 	bl	8011cc8 <rcl_validate_enclave_name>
 8010e6a:	4606      	mov	r6, r0
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d1c4      	bne.n	8010dfa <rcl_init+0x132>
 8010e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e72:	bb03      	cbnz	r3, 8010eb6 <rcl_init+0x1ee>
 8010e74:	f8d9 1000 	ldr.w	r1, [r9]
 8010e78:	694b      	ldr	r3, [r1, #20]
 8010e7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010e7c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010e80:	f000 fa16 	bl	80112b0 <rcl_get_security_options_from_environment>
 8010e84:	4606      	mov	r6, r0
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d1b7      	bne.n	8010dfa <rcl_init+0x132>
 8010e8a:	f8d9 1000 	ldr.w	r1, [r9]
 8010e8e:	6948      	ldr	r0, [r1, #20]
 8010e90:	3128      	adds	r1, #40	; 0x28
 8010e92:	3018      	adds	r0, #24
 8010e94:	f002 f870 	bl	8012f78 <rmw_init>
 8010e98:	4606      	mov	r6, r0
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d0b8      	beq.n	8010e10 <rcl_init+0x148>
 8010e9e:	f7ff fbd9 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	e7a9      	b.n	8010dfa <rcl_init+0x132>
 8010ea6:	2401      	movs	r4, #1
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	4621      	mov	r1, r4
 8010eac:	6014      	str	r4, [r2, #0]
 8010eae:	4623      	mov	r3, r4
 8010eb0:	e7c0      	b.n	8010e34 <rcl_init+0x16c>
 8010eb2:	260a      	movs	r6, #10
 8010eb4:	e7ac      	b.n	8010e10 <rcl_init+0x148>
 8010eb6:	2601      	movs	r6, #1
 8010eb8:	e79f      	b.n	8010dfa <rcl_init+0x132>
 8010eba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010ebe:	f7ff fc51 	bl	8010764 <rcl_get_default_domain_id>
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d198      	bne.n	8010dfa <rcl_init+0x132>
 8010ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010eca:	3301      	adds	r3, #1
 8010ecc:	f8d9 3000 	ldr.w	r3, [r9]
 8010ed0:	bf08      	it	eq
 8010ed2:	6260      	streq	r0, [r4, #36]	; 0x24
 8010ed4:	695c      	ldr	r4, [r3, #20]
 8010ed6:	e7b6      	b.n	8010e46 <rcl_init+0x17e>
 8010ed8:	2000c120 	.word	0x2000c120

08010edc <rcl_get_zero_initialized_init_options>:
 8010edc:	2000      	movs	r0, #0
 8010ede:	4770      	bx	lr

08010ee0 <rcl_init_options_init>:
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee4:	b091      	sub	sp, #68	; 0x44
 8010ee6:	af17      	add	r7, sp, #92	; 0x5c
 8010ee8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d044      	beq.n	8010f7a <rcl_init_options_init+0x9a>
 8010ef0:	6803      	ldr	r3, [r0, #0]
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	b133      	cbz	r3, 8010f04 <rcl_init_options_init+0x24>
 8010ef6:	2464      	movs	r4, #100	; 0x64
 8010ef8:	4620      	mov	r0, r4
 8010efa:	b011      	add	sp, #68	; 0x44
 8010efc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f00:	b004      	add	sp, #16
 8010f02:	4770      	bx	lr
 8010f04:	4638      	mov	r0, r7
 8010f06:	f7fb fa95 	bl	800c434 <rcutils_allocator_is_valid>
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d035      	beq.n	8010f7a <rcl_init_options_init+0x9a>
 8010f0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f10:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010f12:	2050      	movs	r0, #80	; 0x50
 8010f14:	4798      	blx	r3
 8010f16:	4604      	mov	r4, r0
 8010f18:	6030      	str	r0, [r6, #0]
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d02f      	beq.n	8010f7e <rcl_init_options_init+0x9e>
 8010f1e:	46bc      	mov	ip, r7
 8010f20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f24:	4625      	mov	r5, r4
 8010f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f28:	f8dc 3000 	ldr.w	r3, [ip]
 8010f2c:	602b      	str	r3, [r5, #0]
 8010f2e:	a802      	add	r0, sp, #8
 8010f30:	ad02      	add	r5, sp, #8
 8010f32:	f001 fe8b 	bl	8012c4c <rmw_get_zero_initialized_init_options>
 8010f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f38:	3418      	adds	r4, #24
 8010f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010f48:	6833      	ldr	r3, [r6, #0]
 8010f4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8010f4e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8010f52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010f56:	f103 0018 	add.w	r0, r3, #24
 8010f5a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8010f5e:	f001 ff31 	bl	8012dc4 <rmw_init_options_init>
 8010f62:	4604      	mov	r4, r0
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d0c7      	beq.n	8010ef8 <rcl_init_options_init+0x18>
 8010f68:	6830      	ldr	r0, [r6, #0]
 8010f6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010f6c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010f6e:	4798      	blx	r3
 8010f70:	4620      	mov	r0, r4
 8010f72:	f7ff fb6f 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010f76:	4604      	mov	r4, r0
 8010f78:	e7be      	b.n	8010ef8 <rcl_init_options_init+0x18>
 8010f7a:	240b      	movs	r4, #11
 8010f7c:	e7bc      	b.n	8010ef8 <rcl_init_options_init+0x18>
 8010f7e:	240a      	movs	r4, #10
 8010f80:	e7ba      	b.n	8010ef8 <rcl_init_options_init+0x18>
 8010f82:	bf00      	nop

08010f84 <rcl_init_options_fini>:
 8010f84:	b570      	push	{r4, r5, r6, lr}
 8010f86:	b086      	sub	sp, #24
 8010f88:	b1c0      	cbz	r0, 8010fbc <rcl_init_options_fini+0x38>
 8010f8a:	6804      	ldr	r4, [r0, #0]
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	b1ac      	cbz	r4, 8010fbc <rcl_init_options_fini+0x38>
 8010f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f92:	ad01      	add	r5, sp, #4
 8010f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	602b      	str	r3, [r5, #0]
 8010f9a:	a801      	add	r0, sp, #4
 8010f9c:	f7fb fa4a 	bl	800c434 <rcutils_allocator_is_valid>
 8010fa0:	b160      	cbz	r0, 8010fbc <rcl_init_options_fini+0x38>
 8010fa2:	6830      	ldr	r0, [r6, #0]
 8010fa4:	3018      	adds	r0, #24
 8010fa6:	f001 ffa7 	bl	8012ef8 <rmw_init_options_fini>
 8010faa:	4604      	mov	r4, r0
 8010fac:	b950      	cbnz	r0, 8010fc4 <rcl_init_options_fini+0x40>
 8010fae:	6830      	ldr	r0, [r6, #0]
 8010fb0:	9b02      	ldr	r3, [sp, #8]
 8010fb2:	9905      	ldr	r1, [sp, #20]
 8010fb4:	4798      	blx	r3
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	b006      	add	sp, #24
 8010fba:	bd70      	pop	{r4, r5, r6, pc}
 8010fbc:	240b      	movs	r4, #11
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	b006      	add	sp, #24
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}
 8010fc4:	f7ff fb46 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010fc8:	4604      	mov	r4, r0
 8010fca:	e7f8      	b.n	8010fbe <rcl_init_options_fini+0x3a>

08010fcc <rcl_init_options_copy>:
 8010fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd0:	b096      	sub	sp, #88	; 0x58
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d063      	beq.n	801109e <rcl_init_options_copy+0xd2>
 8010fd6:	6806      	ldr	r6, [r0, #0]
 8010fd8:	4605      	mov	r5, r0
 8010fda:	2e00      	cmp	r6, #0
 8010fdc:	d05f      	beq.n	801109e <rcl_init_options_copy+0xd2>
 8010fde:	460c      	mov	r4, r1
 8010fe0:	2900      	cmp	r1, #0
 8010fe2:	d05c      	beq.n	801109e <rcl_init_options_copy+0xd2>
 8010fe4:	680b      	ldr	r3, [r1, #0]
 8010fe6:	b123      	cbz	r3, 8010ff2 <rcl_init_options_copy+0x26>
 8010fe8:	2664      	movs	r6, #100	; 0x64
 8010fea:	4630      	mov	r0, r6
 8010fec:	b016      	add	sp, #88	; 0x58
 8010fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010ff4:	af11      	add	r7, sp, #68	; 0x44
 8010ff6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010ff8:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8010ffc:	6833      	ldr	r3, [r6, #0]
 8010ffe:	603b      	str	r3, [r7, #0]
 8011000:	4640      	mov	r0, r8
 8011002:	f7fb fa17 	bl	800c434 <rcutils_allocator_is_valid>
 8011006:	2800      	cmp	r0, #0
 8011008:	d049      	beq.n	801109e <rcl_init_options_copy+0xd2>
 801100a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801100c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801100e:	2050      	movs	r0, #80	; 0x50
 8011010:	4798      	blx	r3
 8011012:	4606      	mov	r6, r0
 8011014:	6020      	str	r0, [r4, #0]
 8011016:	2800      	cmp	r0, #0
 8011018:	d077      	beq.n	801110a <rcl_init_options_copy+0x13e>
 801101a:	46c4      	mov	ip, r8
 801101c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011020:	4637      	mov	r7, r6
 8011022:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011024:	f8dc 3000 	ldr.w	r3, [ip]
 8011028:	603b      	str	r3, [r7, #0]
 801102a:	a802      	add	r0, sp, #8
 801102c:	af02      	add	r7, sp, #8
 801102e:	f001 fe0d 	bl	8012c4c <rmw_get_zero_initialized_init_options>
 8011032:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011034:	3618      	adds	r6, #24
 8011036:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011038:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801103a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801103c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801103e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011040:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011044:	ab16      	add	r3, sp, #88	; 0x58
 8011046:	e886 0003 	stmia.w	r6, {r0, r1}
 801104a:	e913 0003 	ldmdb	r3, {r0, r1}
 801104e:	6823      	ldr	r3, [r4, #0]
 8011050:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011054:	f103 0018 	add.w	r0, r3, #24
 8011058:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 801105c:	f001 feb2 	bl	8012dc4 <rmw_init_options_init>
 8011060:	4606      	mov	r6, r0
 8011062:	bb08      	cbnz	r0, 80110a8 <rcl_init_options_copy+0xdc>
 8011064:	682f      	ldr	r7, [r5, #0]
 8011066:	f8d4 c000 	ldr.w	ip, [r4]
 801106a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801106c:	4666      	mov	r6, ip
 801106e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	6033      	str	r3, [r6, #0]
 8011074:	f10c 0018 	add.w	r0, ip, #24
 8011078:	f001 ff3e 	bl	8012ef8 <rmw_init_options_fini>
 801107c:	4607      	mov	r7, r0
 801107e:	b1f0      	cbz	r0, 80110be <rcl_init_options_copy+0xf2>
 8011080:	f7fb f9e6 	bl	800c450 <rcutils_get_error_string>
 8011084:	f7fb f9fa 	bl	800c47c <rcutils_reset_error>
 8011088:	4620      	mov	r0, r4
 801108a:	f7ff ff7b 	bl	8010f84 <rcl_init_options_fini>
 801108e:	4606      	mov	r6, r0
 8011090:	2800      	cmp	r0, #0
 8011092:	d1aa      	bne.n	8010fea <rcl_init_options_copy+0x1e>
 8011094:	4638      	mov	r0, r7
 8011096:	f7ff fadd 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 801109a:	4606      	mov	r6, r0
 801109c:	e7a5      	b.n	8010fea <rcl_init_options_copy+0x1e>
 801109e:	260b      	movs	r6, #11
 80110a0:	4630      	mov	r0, r6
 80110a2:	b016      	add	sp, #88	; 0x58
 80110a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80110ac:	6820      	ldr	r0, [r4, #0]
 80110ae:	4798      	blx	r3
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7ff facf 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 80110b6:	4606      	mov	r6, r0
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d0d3      	beq.n	8011064 <rcl_init_options_copy+0x98>
 80110bc:	e795      	b.n	8010fea <rcl_init_options_copy+0x1e>
 80110be:	a802      	add	r0, sp, #8
 80110c0:	ae02      	add	r6, sp, #8
 80110c2:	6827      	ldr	r7, [r4, #0]
 80110c4:	f001 fdc2 	bl	8012c4c <rmw_get_zero_initialized_init_options>
 80110c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80110ca:	3718      	adds	r7, #24
 80110cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80110ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80110d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80110d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80110d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80110d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80110da:	682a      	ldr	r2, [r5, #0]
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	e887 0003 	stmia.w	r7, {r0, r1}
 80110e2:	f102 0018 	add.w	r0, r2, #24
 80110e6:	f103 0118 	add.w	r1, r3, #24
 80110ea:	f001 fec3 	bl	8012e74 <rmw_init_options_copy>
 80110ee:	4606      	mov	r6, r0
 80110f0:	2800      	cmp	r0, #0
 80110f2:	f43f af7a 	beq.w	8010fea <rcl_init_options_copy+0x1e>
 80110f6:	f7fb f9ab 	bl	800c450 <rcutils_get_error_string>
 80110fa:	f7fb f9bf 	bl	800c47c <rcutils_reset_error>
 80110fe:	4620      	mov	r0, r4
 8011100:	f7ff ff40 	bl	8010f84 <rcl_init_options_fini>
 8011104:	b118      	cbz	r0, 801110e <rcl_init_options_copy+0x142>
 8011106:	4606      	mov	r6, r0
 8011108:	e76f      	b.n	8010fea <rcl_init_options_copy+0x1e>
 801110a:	260a      	movs	r6, #10
 801110c:	e76d      	b.n	8010fea <rcl_init_options_copy+0x1e>
 801110e:	4630      	mov	r0, r6
 8011110:	f7ff faa0 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8011114:	4606      	mov	r6, r0
 8011116:	e768      	b.n	8010fea <rcl_init_options_copy+0x1e>

08011118 <rcl_get_localhost_only>:
 8011118:	b510      	push	{r4, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	2300      	movs	r3, #0
 801111e:	9301      	str	r3, [sp, #4]
 8011120:	b1b8      	cbz	r0, 8011152 <rcl_get_localhost_only+0x3a>
 8011122:	4604      	mov	r4, r0
 8011124:	a901      	add	r1, sp, #4
 8011126:	480c      	ldr	r0, [pc, #48]	; (8011158 <rcl_get_localhost_only+0x40>)
 8011128:	f001 fd70 	bl	8012c0c <rcutils_get_env>
 801112c:	b110      	cbz	r0, 8011134 <rcl_get_localhost_only+0x1c>
 801112e:	2001      	movs	r0, #1
 8011130:	b002      	add	sp, #8
 8011132:	bd10      	pop	{r4, pc}
 8011134:	9b01      	ldr	r3, [sp, #4]
 8011136:	b113      	cbz	r3, 801113e <rcl_get_localhost_only+0x26>
 8011138:	781a      	ldrb	r2, [r3, #0]
 801113a:	2a31      	cmp	r2, #49	; 0x31
 801113c:	d004      	beq.n	8011148 <rcl_get_localhost_only+0x30>
 801113e:	2302      	movs	r3, #2
 8011140:	2000      	movs	r0, #0
 8011142:	7023      	strb	r3, [r4, #0]
 8011144:	b002      	add	sp, #8
 8011146:	bd10      	pop	{r4, pc}
 8011148:	785b      	ldrb	r3, [r3, #1]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1f7      	bne.n	801113e <rcl_get_localhost_only+0x26>
 801114e:	2301      	movs	r3, #1
 8011150:	e7f6      	b.n	8011140 <rcl_get_localhost_only+0x28>
 8011152:	200b      	movs	r0, #11
 8011154:	b002      	add	sp, #8
 8011156:	bd10      	pop	{r4, pc}
 8011158:	0801756c 	.word	0x0801756c

0801115c <exact_match_lookup>:
 801115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801115e:	f102 0708 	add.w	r7, r2, #8
 8011162:	460b      	mov	r3, r1
 8011164:	4614      	mov	r4, r2
 8011166:	4606      	mov	r6, r0
 8011168:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801116c:	b085      	sub	sp, #20
 801116e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011172:	4618      	mov	r0, r3
 8011174:	4918      	ldr	r1, [pc, #96]	; (80111d8 <exact_match_lookup+0x7c>)
 8011176:	e894 000c 	ldmia.w	r4, {r2, r3}
 801117a:	f001 fd39 	bl	8012bf0 <rcutils_join_path>
 801117e:	7833      	ldrb	r3, [r6, #0]
 8011180:	2b2f      	cmp	r3, #47	; 0x2f
 8011182:	4605      	mov	r5, r0
 8011184:	d021      	beq.n	80111ca <exact_match_lookup+0x6e>
 8011186:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801118a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801118e:	1c70      	adds	r0, r6, #1
 8011190:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011194:	f001 fd32 	bl	8012bfc <rcutils_to_native_path>
 8011198:	4606      	mov	r6, r0
 801119a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801119e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80111a2:	4631      	mov	r1, r6
 80111a4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80111a8:	4628      	mov	r0, r5
 80111aa:	f001 fd21 	bl	8012bf0 <rcutils_join_path>
 80111ae:	6862      	ldr	r2, [r4, #4]
 80111b0:	6921      	ldr	r1, [r4, #16]
 80111b2:	4603      	mov	r3, r0
 80111b4:	4630      	mov	r0, r6
 80111b6:	461e      	mov	r6, r3
 80111b8:	4790      	blx	r2
 80111ba:	4628      	mov	r0, r5
 80111bc:	6863      	ldr	r3, [r4, #4]
 80111be:	6921      	ldr	r1, [r4, #16]
 80111c0:	4798      	blx	r3
 80111c2:	4635      	mov	r5, r6
 80111c4:	4628      	mov	r0, r5
 80111c6:	b005      	add	sp, #20
 80111c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ca:	7873      	ldrb	r3, [r6, #1]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d1da      	bne.n	8011186 <exact_match_lookup+0x2a>
 80111d0:	4628      	mov	r0, r5
 80111d2:	b005      	add	sp, #20
 80111d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d6:	bf00      	nop
 80111d8:	080175bc 	.word	0x080175bc

080111dc <rcl_get_secure_root>:
 80111dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111e0:	b085      	sub	sp, #20
 80111e2:	b168      	cbz	r0, 8011200 <rcl_get_secure_root+0x24>
 80111e4:	4607      	mov	r7, r0
 80111e6:	4608      	mov	r0, r1
 80111e8:	460c      	mov	r4, r1
 80111ea:	f7fb f923 	bl	800c434 <rcutils_allocator_is_valid>
 80111ee:	b138      	cbz	r0, 8011200 <rcl_get_secure_root+0x24>
 80111f0:	2300      	movs	r3, #0
 80111f2:	482d      	ldr	r0, [pc, #180]	; (80112a8 <rcl_get_secure_root+0xcc>)
 80111f4:	9303      	str	r3, [sp, #12]
 80111f6:	a903      	add	r1, sp, #12
 80111f8:	f001 fd08 	bl	8012c0c <rcutils_get_env>
 80111fc:	4605      	mov	r5, r0
 80111fe:	b120      	cbz	r0, 801120a <rcl_get_secure_root+0x2e>
 8011200:	2500      	movs	r5, #0
 8011202:	4628      	mov	r0, r5
 8011204:	b005      	add	sp, #20
 8011206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120a:	9b03      	ldr	r3, [sp, #12]
 801120c:	781a      	ldrb	r2, [r3, #0]
 801120e:	2a00      	cmp	r2, #0
 8011210:	d0f6      	beq.n	8011200 <rcl_get_secure_root+0x24>
 8011212:	f104 090c 	add.w	r9, r4, #12
 8011216:	e899 0003 	ldmia.w	r9, {r0, r1}
 801121a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801121e:	4618      	mov	r0, r3
 8011220:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011224:	f7fb fa54 	bl	800c6d0 <rcutils_strdup>
 8011228:	4680      	mov	r8, r0
 801122a:	2800      	cmp	r0, #0
 801122c:	d0e8      	beq.n	8011200 <rcl_get_secure_root+0x24>
 801122e:	481f      	ldr	r0, [pc, #124]	; (80112ac <rcl_get_secure_root+0xd0>)
 8011230:	9503      	str	r5, [sp, #12]
 8011232:	a903      	add	r1, sp, #12
 8011234:	f001 fcea 	bl	8012c0c <rcutils_get_env>
 8011238:	b160      	cbz	r0, 8011254 <rcl_get_secure_root+0x78>
 801123a:	2600      	movs	r6, #0
 801123c:	6863      	ldr	r3, [r4, #4]
 801123e:	6921      	ldr	r1, [r4, #16]
 8011240:	4630      	mov	r0, r6
 8011242:	4798      	blx	r3
 8011244:	4640      	mov	r0, r8
 8011246:	6863      	ldr	r3, [r4, #4]
 8011248:	6921      	ldr	r1, [r4, #16]
 801124a:	4798      	blx	r3
 801124c:	4628      	mov	r0, r5
 801124e:	b005      	add	sp, #20
 8011250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011254:	9b03      	ldr	r3, [sp, #12]
 8011256:	781e      	ldrb	r6, [r3, #0]
 8011258:	b1f6      	cbz	r6, 8011298 <rcl_get_secure_root+0xbc>
 801125a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801125e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011262:	4618      	mov	r0, r3
 8011264:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011268:	f7fb fa32 	bl	800c6d0 <rcutils_strdup>
 801126c:	4606      	mov	r6, r0
 801126e:	2800      	cmp	r0, #0
 8011270:	d0e3      	beq.n	801123a <rcl_get_secure_root+0x5e>
 8011272:	4622      	mov	r2, r4
 8011274:	4641      	mov	r1, r8
 8011276:	f7ff ff71 	bl	801115c <exact_match_lookup>
 801127a:	4605      	mov	r5, r0
 801127c:	2d00      	cmp	r5, #0
 801127e:	d0dd      	beq.n	801123c <rcl_get_secure_root+0x60>
 8011280:	4628      	mov	r0, r5
 8011282:	f001 fcb3 	bl	8012bec <rcutils_is_directory>
 8011286:	4607      	mov	r7, r0
 8011288:	2800      	cmp	r0, #0
 801128a:	d1d7      	bne.n	801123c <rcl_get_secure_root+0x60>
 801128c:	4628      	mov	r0, r5
 801128e:	6863      	ldr	r3, [r4, #4]
 8011290:	6921      	ldr	r1, [r4, #16]
 8011292:	4798      	blx	r3
 8011294:	463d      	mov	r5, r7
 8011296:	e7d1      	b.n	801123c <rcl_get_secure_root+0x60>
 8011298:	4638      	mov	r0, r7
 801129a:	4622      	mov	r2, r4
 801129c:	4641      	mov	r1, r8
 801129e:	f7ff ff5d 	bl	801115c <exact_match_lookup>
 80112a2:	4605      	mov	r5, r0
 80112a4:	e7ea      	b.n	801127c <rcl_get_secure_root+0xa0>
 80112a6:	bf00      	nop
 80112a8:	080175c8 	.word	0x080175c8
 80112ac:	080175e0 	.word	0x080175e0

080112b0 <rcl_get_security_options_from_environment>:
 80112b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b4:	b082      	sub	sp, #8
 80112b6:	4607      	mov	r7, r0
 80112b8:	4688      	mov	r8, r1
 80112ba:	2400      	movs	r4, #0
 80112bc:	481d      	ldr	r0, [pc, #116]	; (8011334 <rcl_get_security_options_from_environment+0x84>)
 80112be:	9401      	str	r4, [sp, #4]
 80112c0:	a901      	add	r1, sp, #4
 80112c2:	4616      	mov	r6, r2
 80112c4:	f001 fca2 	bl	8012c0c <rcutils_get_env>
 80112c8:	b120      	cbz	r0, 80112d4 <rcl_get_security_options_from_environment+0x24>
 80112ca:	2501      	movs	r5, #1
 80112cc:	4628      	mov	r0, r5
 80112ce:	b002      	add	sp, #8
 80112d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d4:	4918      	ldr	r1, [pc, #96]	; (8011338 <rcl_get_security_options_from_environment+0x88>)
 80112d6:	4604      	mov	r4, r0
 80112d8:	9801      	ldr	r0, [sp, #4]
 80112da:	f7ee ff99 	bl	8000210 <strcmp>
 80112de:	4605      	mov	r5, r0
 80112e0:	b9c8      	cbnz	r0, 8011316 <rcl_get_security_options_from_environment+0x66>
 80112e2:	9001      	str	r0, [sp, #4]
 80112e4:	b1ee      	cbz	r6, 8011322 <rcl_get_security_options_from_environment+0x72>
 80112e6:	4815      	ldr	r0, [pc, #84]	; (801133c <rcl_get_security_options_from_environment+0x8c>)
 80112e8:	a901      	add	r1, sp, #4
 80112ea:	f001 fc8f 	bl	8012c0c <rcutils_get_env>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d1eb      	bne.n	80112ca <rcl_get_security_options_from_environment+0x1a>
 80112f2:	4913      	ldr	r1, [pc, #76]	; (8011340 <rcl_get_security_options_from_environment+0x90>)
 80112f4:	9801      	ldr	r0, [sp, #4]
 80112f6:	f7ee ff8b 	bl	8000210 <strcmp>
 80112fa:	fab0 f080 	clz	r0, r0
 80112fe:	0940      	lsrs	r0, r0, #5
 8011300:	7030      	strb	r0, [r6, #0]
 8011302:	4641      	mov	r1, r8
 8011304:	4638      	mov	r0, r7
 8011306:	f7ff ff69 	bl	80111dc <rcl_get_secure_root>
 801130a:	b160      	cbz	r0, 8011326 <rcl_get_security_options_from_environment+0x76>
 801130c:	6070      	str	r0, [r6, #4]
 801130e:	4628      	mov	r0, r5
 8011310:	b002      	add	sp, #8
 8011312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011316:	4625      	mov	r5, r4
 8011318:	4628      	mov	r0, r5
 801131a:	7034      	strb	r4, [r6, #0]
 801131c:	b002      	add	sp, #8
 801131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011322:	250b      	movs	r5, #11
 8011324:	e7d2      	b.n	80112cc <rcl_get_security_options_from_environment+0x1c>
 8011326:	7835      	ldrb	r5, [r6, #0]
 8011328:	f1a5 0501 	sub.w	r5, r5, #1
 801132c:	fab5 f585 	clz	r5, r5
 8011330:	096d      	lsrs	r5, r5, #5
 8011332:	e7cb      	b.n	80112cc <rcl_get_security_options_from_environment+0x1c>
 8011334:	08017580 	.word	0x08017580
 8011338:	08017594 	.word	0x08017594
 801133c:	0801759c 	.word	0x0801759c
 8011340:	080175b4 	.word	0x080175b4

08011344 <rcl_service_get_rmw_handle>:
 8011344:	b110      	cbz	r0, 801134c <rcl_service_get_rmw_handle+0x8>
 8011346:	6800      	ldr	r0, [r0, #0]
 8011348:	b100      	cbz	r0, 801134c <rcl_service_get_rmw_handle+0x8>
 801134a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop

08011350 <rcl_take_request>:
 8011350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011352:	460e      	mov	r6, r1
 8011354:	460c      	mov	r4, r1
 8011356:	4607      	mov	r7, r0
 8011358:	4694      	mov	ip, r2
 801135a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801135c:	b08d      	sub	sp, #52	; 0x34
 801135e:	ad06      	add	r5, sp, #24
 8011360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011362:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011366:	e885 0003 	stmia.w	r5, {r0, r1}
 801136a:	b1e7      	cbz	r7, 80113a6 <rcl_take_request+0x56>
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	b1d3      	cbz	r3, 80113a6 <rcl_take_request+0x56>
 8011370:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8011372:	b1c0      	cbz	r0, 80113a6 <rcl_take_request+0x56>
 8011374:	4662      	mov	r2, ip
 8011376:	b30a      	cbz	r2, 80113bc <rcl_take_request+0x6c>
 8011378:	2500      	movs	r5, #0
 801137a:	f10d 0307 	add.w	r3, sp, #7
 801137e:	a902      	add	r1, sp, #8
 8011380:	f88d 5007 	strb.w	r5, [sp, #7]
 8011384:	f001 ffd4 	bl	8013330 <rmw_take_request>
 8011388:	4606      	mov	r6, r0
 801138a:	b178      	cbz	r0, 80113ac <rcl_take_request+0x5c>
 801138c:	280a      	cmp	r0, #10
 801138e:	bf18      	it	ne
 8011390:	2601      	movne	r6, #1
 8011392:	ad06      	add	r5, sp, #24
 8011394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011398:	e895 0003 	ldmia.w	r5, {r0, r1}
 801139c:	e884 0003 	stmia.w	r4, {r0, r1}
 80113a0:	4630      	mov	r0, r6
 80113a2:	b00d      	add	sp, #52	; 0x34
 80113a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a6:	f44f 7616 	mov.w	r6, #600	; 0x258
 80113aa:	e7f2      	b.n	8011392 <rcl_take_request+0x42>
 80113ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80113b0:	f240 2359 	movw	r3, #601	; 0x259
 80113b4:	2a00      	cmp	r2, #0
 80113b6:	bf08      	it	eq
 80113b8:	461e      	moveq	r6, r3
 80113ba:	e7ea      	b.n	8011392 <rcl_take_request+0x42>
 80113bc:	260b      	movs	r6, #11
 80113be:	e7e8      	b.n	8011392 <rcl_take_request+0x42>

080113c0 <rcl_send_response>:
 80113c0:	b160      	cbz	r0, 80113dc <rcl_send_response+0x1c>
 80113c2:	6800      	ldr	r0, [r0, #0]
 80113c4:	b150      	cbz	r0, 80113dc <rcl_send_response+0x1c>
 80113c6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80113c8:	b140      	cbz	r0, 80113dc <rcl_send_response+0x1c>
 80113ca:	b151      	cbz	r1, 80113e2 <rcl_send_response+0x22>
 80113cc:	b510      	push	{r4, lr}
 80113ce:	b152      	cbz	r2, 80113e6 <rcl_send_response+0x26>
 80113d0:	f002 f80c 	bl	80133ec <rmw_send_response>
 80113d4:	3800      	subs	r0, #0
 80113d6:	bf18      	it	ne
 80113d8:	2001      	movne	r0, #1
 80113da:	bd10      	pop	{r4, pc}
 80113dc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80113e0:	4770      	bx	lr
 80113e2:	200b      	movs	r0, #11
 80113e4:	4770      	bx	lr
 80113e6:	200b      	movs	r0, #11
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	bf00      	nop

080113ec <rcl_take>:
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d03f      	beq.n	8011470 <rcl_take+0x84>
 80113f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113f4:	4617      	mov	r7, r2
 80113f6:	6802      	ldr	r2, [r0, #0]
 80113f8:	b09d      	sub	sp, #116	; 0x74
 80113fa:	4606      	mov	r6, r0
 80113fc:	b382      	cbz	r2, 8011460 <rcl_take+0x74>
 80113fe:	4699      	mov	r9, r3
 8011400:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8011404:	b363      	cbz	r3, 8011460 <rcl_take+0x74>
 8011406:	4688      	mov	r8, r1
 8011408:	b381      	cbz	r1, 801146c <rcl_take+0x80>
 801140a:	2f00      	cmp	r7, #0
 801140c:	d034      	beq.n	8011478 <rcl_take+0x8c>
 801140e:	a802      	add	r0, sp, #8
 8011410:	ac02      	add	r4, sp, #8
 8011412:	f001 fc2f 	bl	8012c74 <rmw_get_zero_initialized_message_info>
 8011416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011418:	463d      	mov	r5, r7
 801141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011420:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011424:	6834      	ldr	r4, [r6, #0]
 8011426:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 801142a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801142e:	2400      	movs	r4, #0
 8011430:	463b      	mov	r3, r7
 8011432:	4630      	mov	r0, r6
 8011434:	f8cd 9000 	str.w	r9, [sp]
 8011438:	4641      	mov	r1, r8
 801143a:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 801143e:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 8011442:	f002 f87d 	bl	8013540 <rmw_take_with_info>
 8011446:	4603      	mov	r3, r0
 8011448:	b9c0      	cbnz	r0, 801147c <rcl_take+0x90>
 801144a:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 801144e:	f240 1291 	movw	r2, #401	; 0x191
 8011452:	2900      	cmp	r1, #0
 8011454:	bf08      	it	eq
 8011456:	4613      	moveq	r3, r2
 8011458:	4618      	mov	r0, r3
 801145a:	b01d      	add	sp, #116	; 0x74
 801145c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011460:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011464:	4618      	mov	r0, r3
 8011466:	b01d      	add	sp, #116	; 0x74
 8011468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801146c:	230b      	movs	r3, #11
 801146e:	e7f3      	b.n	8011458 <rcl_take+0x6c>
 8011470:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011474:	4618      	mov	r0, r3
 8011476:	4770      	bx	lr
 8011478:	af10      	add	r7, sp, #64	; 0x40
 801147a:	e7c8      	b.n	801140e <rcl_take+0x22>
 801147c:	f7ff f8ea 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8011480:	4603      	mov	r3, r0
 8011482:	e7e9      	b.n	8011458 <rcl_take+0x6c>

08011484 <rcl_subscription_get_rmw_handle>:
 8011484:	b118      	cbz	r0, 801148e <rcl_subscription_get_rmw_handle+0xa>
 8011486:	6800      	ldr	r0, [r0, #0]
 8011488:	b108      	cbz	r0, 801148e <rcl_subscription_get_rmw_handle+0xa>
 801148a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801148e:	4770      	bx	lr

08011490 <rcl_get_system_time>:
 8011490:	4608      	mov	r0, r1
 8011492:	f7fb ba8b 	b.w	800c9ac <rcutils_system_time_now>
 8011496:	bf00      	nop

08011498 <rcl_get_steady_time>:
 8011498:	4608      	mov	r0, r1
 801149a:	f7fb baaf 	b.w	800c9fc <rcutils_steady_time_now>
 801149e:	bf00      	nop

080114a0 <rcl_get_ros_time>:
 80114a0:	7a03      	ldrb	r3, [r0, #8]
 80114a2:	b510      	push	{r4, lr}
 80114a4:	460c      	mov	r4, r1
 80114a6:	b133      	cbz	r3, 80114b6 <rcl_get_ros_time+0x16>
 80114a8:	2105      	movs	r1, #5
 80114aa:	f001 fafd 	bl	8012aa8 <__atomic_load_8>
 80114ae:	e9c4 0100 	strd	r0, r1, [r4]
 80114b2:	2000      	movs	r0, #0
 80114b4:	bd10      	pop	{r4, pc}
 80114b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114ba:	4608      	mov	r0, r1
 80114bc:	f7fb ba76 	b.w	800c9ac <rcutils_system_time_now>

080114c0 <rcl_clock_init>:
 80114c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c4:	4606      	mov	r6, r0
 80114c6:	4610      	mov	r0, r2
 80114c8:	4614      	mov	r4, r2
 80114ca:	460d      	mov	r5, r1
 80114cc:	f7fa ffb2 	bl	800c434 <rcutils_allocator_is_valid>
 80114d0:	b128      	cbz	r0, 80114de <rcl_clock_init+0x1e>
 80114d2:	2e03      	cmp	r6, #3
 80114d4:	d803      	bhi.n	80114de <rcl_clock_init+0x1e>
 80114d6:	e8df f006 	tbb	[pc, r6]
 80114da:	2c1b      	.short	0x2c1b
 80114dc:	0554      	.short	0x0554
 80114de:	200b      	movs	r0, #11
 80114e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114e4:	2d00      	cmp	r5, #0
 80114e6:	d0fa      	beq.n	80114de <rcl_clock_init+0x1e>
 80114e8:	2c00      	cmp	r4, #0
 80114ea:	d0f8      	beq.n	80114de <rcl_clock_init+0x1e>
 80114ec:	2600      	movs	r6, #0
 80114ee:	702e      	strb	r6, [r5, #0]
 80114f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80114f2:	f105 0714 	add.w	r7, r5, #20
 80114f6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80114fa:	612e      	str	r6, [r5, #16]
 80114fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	603b      	str	r3, [r7, #0]
 8011502:	2303      	movs	r3, #3
 8011504:	4a2b      	ldr	r2, [pc, #172]	; (80115b4 <rcl_clock_init+0xf4>)
 8011506:	702b      	strb	r3, [r5, #0]
 8011508:	4630      	mov	r0, r6
 801150a:	60ea      	str	r2, [r5, #12]
 801150c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011510:	2d00      	cmp	r5, #0
 8011512:	d0e4      	beq.n	80114de <rcl_clock_init+0x1e>
 8011514:	2600      	movs	r6, #0
 8011516:	702e      	strb	r6, [r5, #0]
 8011518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801151a:	f105 0714 	add.w	r7, r5, #20
 801151e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011522:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8011526:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011528:	6823      	ldr	r3, [r4, #0]
 801152a:	603b      	str	r3, [r7, #0]
 801152c:	4630      	mov	r0, r6
 801152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011532:	2d00      	cmp	r5, #0
 8011534:	d0d3      	beq.n	80114de <rcl_clock_init+0x1e>
 8011536:	2c00      	cmp	r4, #0
 8011538:	d0d1      	beq.n	80114de <rcl_clock_init+0x1e>
 801153a:	2600      	movs	r6, #0
 801153c:	702e      	strb	r6, [r5, #0]
 801153e:	46a4      	mov	ip, r4
 8011540:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011544:	f105 0714 	add.w	r7, r5, #20
 8011548:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801154c:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8011550:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011552:	f8dc 3000 	ldr.w	r3, [ip]
 8011556:	603b      	str	r3, [r7, #0]
 8011558:	6921      	ldr	r1, [r4, #16]
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	2010      	movs	r0, #16
 801155e:	4798      	blx	r3
 8011560:	4603      	mov	r3, r0
 8011562:	6128      	str	r0, [r5, #16]
 8011564:	b318      	cbz	r0, 80115ae <rcl_clock_init+0xee>
 8011566:	f04f 0800 	mov.w	r8, #0
 801156a:	f04f 0900 	mov.w	r9, #0
 801156e:	7206      	strb	r6, [r0, #8]
 8011570:	e9c3 8900 	strd	r8, r9, [r3]
 8011574:	2301      	movs	r3, #1
 8011576:	4a10      	ldr	r2, [pc, #64]	; (80115b8 <rcl_clock_init+0xf8>)
 8011578:	702b      	strb	r3, [r5, #0]
 801157a:	4630      	mov	r0, r6
 801157c:	60ea      	str	r2, [r5, #12]
 801157e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011582:	2d00      	cmp	r5, #0
 8011584:	d0ab      	beq.n	80114de <rcl_clock_init+0x1e>
 8011586:	2c00      	cmp	r4, #0
 8011588:	d0a9      	beq.n	80114de <rcl_clock_init+0x1e>
 801158a:	2600      	movs	r6, #0
 801158c:	702e      	strb	r6, [r5, #0]
 801158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011590:	f105 0714 	add.w	r7, r5, #20
 8011594:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011598:	612e      	str	r6, [r5, #16]
 801159a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801159c:	6823      	ldr	r3, [r4, #0]
 801159e:	603b      	str	r3, [r7, #0]
 80115a0:	2302      	movs	r3, #2
 80115a2:	4a06      	ldr	r2, [pc, #24]	; (80115bc <rcl_clock_init+0xfc>)
 80115a4:	702b      	strb	r3, [r5, #0]
 80115a6:	4630      	mov	r0, r6
 80115a8:	60ea      	str	r2, [r5, #12]
 80115aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ae:	200a      	movs	r0, #10
 80115b0:	e796      	b.n	80114e0 <rcl_clock_init+0x20>
 80115b2:	bf00      	nop
 80115b4:	08011499 	.word	0x08011499
 80115b8:	080114a1 	.word	0x080114a1
 80115bc:	08011491 	.word	0x08011491

080115c0 <rcl_clock_get_now>:
 80115c0:	b140      	cbz	r0, 80115d4 <rcl_clock_get_now+0x14>
 80115c2:	b139      	cbz	r1, 80115d4 <rcl_clock_get_now+0x14>
 80115c4:	7803      	ldrb	r3, [r0, #0]
 80115c6:	b11b      	cbz	r3, 80115d0 <rcl_clock_get_now+0x10>
 80115c8:	68c3      	ldr	r3, [r0, #12]
 80115ca:	b10b      	cbz	r3, 80115d0 <rcl_clock_get_now+0x10>
 80115cc:	6900      	ldr	r0, [r0, #16]
 80115ce:	4718      	bx	r3
 80115d0:	2001      	movs	r0, #1
 80115d2:	4770      	bx	lr
 80115d4:	200b      	movs	r0, #11
 80115d6:	4770      	bx	lr

080115d8 <rcl_clock_add_jump_callback>:
 80115d8:	b082      	sub	sp, #8
 80115da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115de:	a908      	add	r1, sp, #32
 80115e0:	e881 000c 	stmia.w	r1, {r2, r3}
 80115e4:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
 80115e8:	b340      	cbz	r0, 801163c <rcl_clock_add_jump_callback+0x64>
 80115ea:	4604      	mov	r4, r0
 80115ec:	3014      	adds	r0, #20
 80115ee:	f7fa ff21 	bl	800c434 <rcutils_allocator_is_valid>
 80115f2:	b318      	cbz	r0, 801163c <rcl_clock_add_jump_callback+0x64>
 80115f4:	b315      	cbz	r5, 801163c <rcl_clock_add_jump_callback+0x64>
 80115f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	f173 0300 	sbcs.w	r3, r3, #0
 8011600:	db1c      	blt.n	801163c <rcl_clock_add_jump_callback+0x64>
 8011602:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011606:	2a01      	cmp	r2, #1
 8011608:	f173 0300 	sbcs.w	r3, r3, #0
 801160c:	da16      	bge.n	801163c <rcl_clock_add_jump_callback+0x64>
 801160e:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8011612:	2f00      	cmp	r7, #0
 8011614:	d03e      	beq.n	8011694 <rcl_clock_add_jump_callback+0xbc>
 8011616:	2300      	movs	r3, #0
 8011618:	f100 0220 	add.w	r2, r0, #32
 801161c:	e003      	b.n	8011626 <rcl_clock_add_jump_callback+0x4e>
 801161e:	42bb      	cmp	r3, r7
 8011620:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8011624:	d00f      	beq.n	8011646 <rcl_clock_add_jump_callback+0x6e>
 8011626:	f852 1c20 	ldr.w	r1, [r2, #-32]
 801162a:	42a9      	cmp	r1, r5
 801162c:	f103 0301 	add.w	r3, r3, #1
 8011630:	d1f5      	bne.n	801161e <rcl_clock_add_jump_callback+0x46>
 8011632:	6811      	ldr	r1, [r2, #0]
 8011634:	42b1      	cmp	r1, r6
 8011636:	d1f2      	bne.n	801161e <rcl_clock_add_jump_callback+0x46>
 8011638:	2001      	movs	r0, #1
 801163a:	e000      	b.n	801163e <rcl_clock_add_jump_callback+0x66>
 801163c:	200b      	movs	r0, #11
 801163e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011642:	b002      	add	sp, #8
 8011644:	4770      	bx	lr
 8011646:	3301      	adds	r3, #1
 8011648:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801164c:	00d9      	lsls	r1, r3, #3
 801164e:	69e3      	ldr	r3, [r4, #28]
 8011650:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011652:	4798      	blx	r3
 8011654:	4684      	mov	ip, r0
 8011656:	b1d8      	cbz	r0, 8011690 <rcl_clock_add_jump_callback+0xb8>
 8011658:	af08      	add	r7, sp, #32
 801165a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 801165e:	6060      	str	r0, [r4, #4]
 8011660:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011662:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8011666:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 801166a:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 801166e:	f108 0508 	add.w	r5, r8, #8
 8011672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011674:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011678:	f10e 0301 	add.w	r3, lr, #1
 801167c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011680:	f8c8 6020 	str.w	r6, [r8, #32]
 8011684:	60a3      	str	r3, [r4, #8]
 8011686:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801168a:	2000      	movs	r0, #0
 801168c:	b002      	add	sp, #8
 801168e:	4770      	bx	lr
 8011690:	200a      	movs	r0, #10
 8011692:	e7d4      	b.n	801163e <rcl_clock_add_jump_callback+0x66>
 8011694:	2128      	movs	r1, #40	; 0x28
 8011696:	e7da      	b.n	801164e <rcl_clock_add_jump_callback+0x76>

08011698 <rcl_clock_remove_jump_callback>:
 8011698:	2800      	cmp	r0, #0
 801169a:	d057      	beq.n	801174c <rcl_clock_remove_jump_callback+0xb4>
 801169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116a0:	4607      	mov	r7, r0
 80116a2:	3014      	adds	r0, #20
 80116a4:	460c      	mov	r4, r1
 80116a6:	4615      	mov	r5, r2
 80116a8:	f7fa fec4 	bl	800c434 <rcutils_allocator_is_valid>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d03a      	beq.n	8011726 <rcl_clock_remove_jump_callback+0x8e>
 80116b0:	2c00      	cmp	r4, #0
 80116b2:	d038      	beq.n	8011726 <rcl_clock_remove_jump_callback+0x8e>
 80116b4:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80116b8:	f1b8 0f00 	cmp.w	r8, #0
 80116bc:	d00c      	beq.n	80116d8 <rcl_clock_remove_jump_callback+0x40>
 80116be:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80116c2:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 80116c6:	4676      	mov	r6, lr
 80116c8:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 80116cc:	6833      	ldr	r3, [r6, #0]
 80116ce:	42a3      	cmp	r3, r4
 80116d0:	d005      	beq.n	80116de <rcl_clock_remove_jump_callback+0x46>
 80116d2:	3628      	adds	r6, #40	; 0x28
 80116d4:	45b4      	cmp	ip, r6
 80116d6:	d1f9      	bne.n	80116cc <rcl_clock_remove_jump_callback+0x34>
 80116d8:	2001      	movs	r0, #1
 80116da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116de:	6a33      	ldr	r3, [r6, #32]
 80116e0:	3628      	adds	r6, #40	; 0x28
 80116e2:	4566      	cmp	r6, ip
 80116e4:	d02a      	beq.n	801173c <rcl_clock_remove_jump_callback+0xa4>
 80116e6:	42ab      	cmp	r3, r5
 80116e8:	d1f0      	bne.n	80116cc <rcl_clock_remove_jump_callback+0x34>
 80116ea:	4635      	mov	r5, r6
 80116ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116ee:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 80116f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80116fc:	3628      	adds	r6, #40	; 0x28
 80116fe:	4566      	cmp	r6, ip
 8011700:	e884 0003 	stmia.w	r4, {r0, r1}
 8011704:	d1f1      	bne.n	80116ea <rcl_clock_remove_jump_callback+0x52>
 8011706:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801170a:	60bc      	str	r4, [r7, #8]
 801170c:	b174      	cbz	r4, 801172c <rcl_clock_remove_jump_callback+0x94>
 801170e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011716:	00e1      	lsls	r1, r4, #3
 8011718:	4670      	mov	r0, lr
 801171a:	4798      	blx	r3
 801171c:	b1c0      	cbz	r0, 8011750 <rcl_clock_remove_jump_callback+0xb8>
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	2000      	movs	r0, #0
 8011722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011726:	200b      	movs	r0, #11
 8011728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172c:	4670      	mov	r0, lr
 801172e:	69bb      	ldr	r3, [r7, #24]
 8011730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011732:	4798      	blx	r3
 8011734:	607c      	str	r4, [r7, #4]
 8011736:	4620      	mov	r0, r4
 8011738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801173c:	42ab      	cmp	r3, r5
 801173e:	d1cb      	bne.n	80116d8 <rcl_clock_remove_jump_callback+0x40>
 8011740:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8011744:	60bc      	str	r4, [r7, #8]
 8011746:	2c00      	cmp	r4, #0
 8011748:	d1e1      	bne.n	801170e <rcl_clock_remove_jump_callback+0x76>
 801174a:	e7ef      	b.n	801172c <rcl_clock_remove_jump_callback+0x94>
 801174c:	200b      	movs	r0, #11
 801174e:	4770      	bx	lr
 8011750:	200a      	movs	r0, #10
 8011752:	e7e9      	b.n	8011728 <rcl_clock_remove_jump_callback+0x90>

08011754 <_rcl_timer_time_jump>:
 8011754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011758:	4682      	mov	sl, r0
 801175a:	b087      	sub	sp, #28
 801175c:	4614      	mov	r4, r2
 801175e:	b131      	cbz	r1, 801176e <_rcl_timer_time_jump+0x1a>
 8011760:	7803      	ldrb	r3, [r0, #0]
 8011762:	3b02      	subs	r3, #2
 8011764:	2b01      	cmp	r3, #1
 8011766:	d944      	bls.n	80117f2 <_rcl_timer_time_jump+0x9e>
 8011768:	b007      	add	sp, #28
 801176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801176e:	6813      	ldr	r3, [r2, #0]
 8011770:	a904      	add	r1, sp, #16
 8011772:	6818      	ldr	r0, [r3, #0]
 8011774:	f7ff ff24 	bl	80115c0 <rcl_clock_get_now>
 8011778:	2800      	cmp	r0, #0
 801177a:	d1f5      	bne.n	8011768 <_rcl_timer_time_jump+0x14>
 801177c:	6820      	ldr	r0, [r4, #0]
 801177e:	2105      	movs	r1, #5
 8011780:	3020      	adds	r0, #32
 8011782:	f001 f991 	bl	8012aa8 <__atomic_load_8>
 8011786:	4602      	mov	r2, r0
 8011788:	6820      	ldr	r0, [r4, #0]
 801178a:	460b      	mov	r3, r1
 801178c:	3028      	adds	r0, #40	; 0x28
 801178e:	2105      	movs	r1, #5
 8011790:	4690      	mov	r8, r2
 8011792:	4699      	mov	r9, r3
 8011794:	f001 f988 	bl	8012aa8 <__atomic_load_8>
 8011798:	4602      	mov	r2, r0
 801179a:	6820      	ldr	r0, [r4, #0]
 801179c:	460b      	mov	r3, r1
 801179e:	3018      	adds	r0, #24
 80117a0:	2105      	movs	r1, #5
 80117a2:	461f      	mov	r7, r3
 80117a4:	4616      	mov	r6, r2
 80117a6:	f001 f97f 	bl	8012aa8 <__atomic_load_8>
 80117aa:	f89a 3000 	ldrb.w	r3, [sl]
 80117ae:	9103      	str	r1, [sp, #12]
 80117b0:	3b02      	subs	r3, #2
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	4605      	mov	r5, r0
 80117b6:	d93a      	bls.n	801182e <_rcl_timer_time_jump+0xda>
 80117b8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80117bc:	45b2      	cmp	sl, r6
 80117be:	eb7b 0307 	sbcs.w	r3, fp, r7
 80117c2:	da64      	bge.n	801188e <_rcl_timer_time_jump+0x13a>
 80117c4:	45c2      	cmp	sl, r8
 80117c6:	eb7b 0309 	sbcs.w	r3, fp, r9
 80117ca:	dacd      	bge.n	8011768 <_rcl_timer_time_jump+0x14>
 80117cc:	6820      	ldr	r0, [r4, #0]
 80117ce:	eb15 020a 	adds.w	r2, r5, sl
 80117d2:	f04f 0505 	mov.w	r5, #5
 80117d6:	eb41 030b 	adc.w	r3, r1, fp
 80117da:	3028      	adds	r0, #40	; 0x28
 80117dc:	9500      	str	r5, [sp, #0]
 80117de:	f001 f997 	bl	8012b10 <__atomic_store_8>
 80117e2:	6820      	ldr	r0, [r4, #0]
 80117e4:	9500      	str	r5, [sp, #0]
 80117e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117ea:	3020      	adds	r0, #32
 80117ec:	f001 f990 	bl	8012b10 <__atomic_store_8>
 80117f0:	e7ba      	b.n	8011768 <_rcl_timer_time_jump+0x14>
 80117f2:	6813      	ldr	r3, [r2, #0]
 80117f4:	a904      	add	r1, sp, #16
 80117f6:	6818      	ldr	r0, [r3, #0]
 80117f8:	f7ff fee2 	bl	80115c0 <rcl_clock_get_now>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d1b3      	bne.n	8011768 <_rcl_timer_time_jump+0x14>
 8011800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011804:	4313      	orrs	r3, r2
 8011806:	d0af      	beq.n	8011768 <_rcl_timer_time_jump+0x14>
 8011808:	6820      	ldr	r0, [r4, #0]
 801180a:	2105      	movs	r1, #5
 801180c:	3028      	adds	r0, #40	; 0x28
 801180e:	f001 f94b 	bl	8012aa8 <__atomic_load_8>
 8011812:	9a04      	ldr	r2, [sp, #16]
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	9e05      	ldr	r6, [sp, #20]
 8011818:	1a82      	subs	r2, r0, r2
 801181a:	f04f 0405 	mov.w	r4, #5
 801181e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011822:	9400      	str	r4, [sp, #0]
 8011824:	eb61 0306 	sbc.w	r3, r1, r6
 8011828:	f001 f972 	bl	8012b10 <__atomic_store_8>
 801182c:	e79c      	b.n	8011768 <_rcl_timer_time_jump+0x14>
 801182e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011832:	4313      	orrs	r3, r2
 8011834:	d098      	beq.n	8011768 <_rcl_timer_time_jump+0x14>
 8011836:	6820      	ldr	r0, [r4, #0]
 8011838:	f04f 0805 	mov.w	r8, #5
 801183c:	2300      	movs	r3, #0
 801183e:	3030      	adds	r0, #48	; 0x30
 8011840:	f8cd 8000 	str.w	r8, [sp]
 8011844:	2200      	movs	r2, #0
 8011846:	f001 f997 	bl	8012b78 <__atomic_exchange_8>
 801184a:	4606      	mov	r6, r0
 801184c:	460f      	mov	r7, r1
 801184e:	ea56 0307 	orrs.w	r3, r6, r7
 8011852:	d089      	beq.n	8011768 <_rcl_timer_time_jump+0x14>
 8011854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011858:	1b92      	subs	r2, r2, r6
 801185a:	eb63 0301 	sbc.w	r3, r3, r1
 801185e:	9903      	ldr	r1, [sp, #12]
 8011860:	6820      	ldr	r0, [r4, #0]
 8011862:	f8cd 8000 	str.w	r8, [sp]
 8011866:	1952      	adds	r2, r2, r5
 8011868:	eb43 0101 	adc.w	r1, r3, r1
 801186c:	460b      	mov	r3, r1
 801186e:	3028      	adds	r0, #40	; 0x28
 8011870:	f001 f94e 	bl	8012b10 <__atomic_store_8>
 8011874:	9a04      	ldr	r2, [sp, #16]
 8011876:	6820      	ldr	r0, [r4, #0]
 8011878:	9b05      	ldr	r3, [sp, #20]
 801187a:	f8cd 8000 	str.w	r8, [sp]
 801187e:	1b92      	subs	r2, r2, r6
 8011880:	f100 0020 	add.w	r0, r0, #32
 8011884:	eb63 0307 	sbc.w	r3, r3, r7
 8011888:	f001 f942 	bl	8012b10 <__atomic_store_8>
 801188c:	e76c      	b.n	8011768 <_rcl_timer_time_jump+0x14>
 801188e:	6820      	ldr	r0, [r4, #0]
 8011890:	3008      	adds	r0, #8
 8011892:	f7ff fa03 	bl	8010c9c <rcl_trigger_guard_condition>
 8011896:	e767      	b.n	8011768 <_rcl_timer_time_jump+0x14>

08011898 <rcl_get_zero_initialized_timer>:
 8011898:	4b01      	ldr	r3, [pc, #4]	; (80118a0 <rcl_get_zero_initialized_timer+0x8>)
 801189a:	6818      	ldr	r0, [r3, #0]
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	08017600 	.word	0x08017600

080118a4 <rcl_timer_init>:
 80118a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a8:	b0ad      	sub	sp, #180	; 0xb4
 80118aa:	4604      	mov	r4, r0
 80118ac:	a839      	add	r0, sp, #228	; 0xe4
 80118ae:	460d      	mov	r5, r1
 80118b0:	4690      	mov	r8, r2
 80118b2:	f7fa fdbf 	bl	800c434 <rcutils_allocator_is_valid>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	d072      	beq.n	80119a0 <rcl_timer_init+0xfc>
 80118ba:	2c00      	cmp	r4, #0
 80118bc:	d070      	beq.n	80119a0 <rcl_timer_init+0xfc>
 80118be:	2d00      	cmp	r5, #0
 80118c0:	d06e      	beq.n	80119a0 <rcl_timer_init+0xfc>
 80118c2:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 80118c6:	2a00      	cmp	r2, #0
 80118c8:	f173 0300 	sbcs.w	r3, r3, #0
 80118cc:	db68      	blt.n	80119a0 <rcl_timer_init+0xfc>
 80118ce:	6823      	ldr	r3, [r4, #0]
 80118d0:	b12b      	cbz	r3, 80118de <rcl_timer_init+0x3a>
 80118d2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80118d6:	4650      	mov	r0, sl
 80118d8:	b02d      	add	sp, #180	; 0xb4
 80118da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118de:	a90a      	add	r1, sp, #40	; 0x28
 80118e0:	4628      	mov	r0, r5
 80118e2:	f7ff fe6d 	bl	80115c0 <rcl_clock_get_now>
 80118e6:	4682      	mov	sl, r0
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d1f4      	bne.n	80118d6 <rcl_timer_init+0x32>
 80118ec:	f10d 0920 	add.w	r9, sp, #32
 80118f0:	4648      	mov	r0, r9
 80118f2:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
 80118f6:	f7ff f8d5 	bl	8010aa4 <rcl_get_zero_initialized_guard_condition>
 80118fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80118fe:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8011902:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 8011906:	e88b 0003 	stmia.w	fp, {r0, r1}
 801190a:	4648      	mov	r0, r9
 801190c:	f7ff f9ac 	bl	8010c68 <rcl_guard_condition_get_default_options>
 8011910:	ab0f      	add	r3, sp, #60	; 0x3c
 8011912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011916:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801191a:	4641      	mov	r1, r8
 801191c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011920:	4658      	mov	r0, fp
 8011922:	f7ff f8c9 	bl	8010ab8 <rcl_guard_condition_init>
 8011926:	4682      	mov	sl, r0
 8011928:	2800      	cmp	r0, #0
 801192a:	d1d4      	bne.n	80118d6 <rcl_timer_init+0x32>
 801192c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801192e:	f893 c000 	ldrb.w	ip, [r3]
 8011932:	f1bc 0f01 	cmp.w	ip, #1
 8011936:	d039      	beq.n	80119ac <rcl_timer_init+0x108>
 8011938:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 801193c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011940:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8011944:	9e36      	ldr	r6, [sp, #216]	; 0xd8
 8011946:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 801194a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801194e:	eb18 0606 	adds.w	r6, r8, r6
 8011952:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8011954:	9606      	str	r6, [sp, #24]
 8011956:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 801195a:	eb49 0303 	adc.w	r3, r9, r3
 801195e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8011960:	9307      	str	r3, [sp, #28]
 8011962:	921c      	str	r2, [sp, #112]	; 0x70
 8011964:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8011968:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801196c:	f8dc 3000 	ldr.w	r3, [ip]
 8011970:	f8ce 3000 	str.w	r3, [lr]
 8011974:	2000      	movs	r0, #0
 8011976:	2100      	movs	r1, #0
 8011978:	2200      	movs	r2, #0
 801197a:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 801197e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8011980:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8011982:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8011986:	2050      	movs	r0, #80	; 0x50
 8011988:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 801198c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8011990:	4798      	blx	r3
 8011992:	6020      	str	r0, [r4, #0]
 8011994:	b360      	cbz	r0, 80119f0 <rcl_timer_init+0x14c>
 8011996:	2250      	movs	r2, #80	; 0x50
 8011998:	a918      	add	r1, sp, #96	; 0x60
 801199a:	f003 fd93 	bl	80154c4 <memcpy>
 801199e:	e79a      	b.n	80118d6 <rcl_timer_init+0x32>
 80119a0:	f04f 0a0b 	mov.w	sl, #11
 80119a4:	4650      	mov	r0, sl
 80119a6:	b02d      	add	sp, #180	; 0xb4
 80119a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ac:	2201      	movs	r2, #1
 80119ae:	2300      	movs	r3, #0
 80119b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80119b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80119bc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80119c0:	ab14      	add	r3, sp, #80	; 0x50
 80119c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119c4:	f88d c048 	strb.w	ip, [sp, #72]	; 0x48
 80119c8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8011a08 <rcl_timer_init+0x164>
 80119cc:	9405      	str	r4, [sp, #20]
 80119ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80119d2:	f8cd c010 	str.w	ip, [sp, #16]
 80119d6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80119da:	4628      	mov	r0, r5
 80119dc:	f7ff fdfc 	bl	80115d8 <rcl_clock_add_jump_callback>
 80119e0:	4680      	mov	r8, r0
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d0a8      	beq.n	8011938 <rcl_timer_init+0x94>
 80119e6:	4658      	mov	r0, fp
 80119e8:	f7ff f918 	bl	8010c1c <rcl_guard_condition_fini>
 80119ec:	46c2      	mov	sl, r8
 80119ee:	e772      	b.n	80118d6 <rcl_timer_init+0x32>
 80119f0:	4658      	mov	r0, fp
 80119f2:	f7ff f913 	bl	8010c1c <rcl_guard_condition_fini>
 80119f6:	4904      	ldr	r1, [pc, #16]	; (8011a08 <rcl_timer_init+0x164>)
 80119f8:	4622      	mov	r2, r4
 80119fa:	4628      	mov	r0, r5
 80119fc:	f7ff fe4c 	bl	8011698 <rcl_clock_remove_jump_callback>
 8011a00:	f04f 0a0a 	mov.w	sl, #10
 8011a04:	e767      	b.n	80118d6 <rcl_timer_init+0x32>
 8011a06:	bf00      	nop
 8011a08:	08011755 	.word	0x08011755

08011a0c <rcl_timer_call>:
 8011a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a10:	b08b      	sub	sp, #44	; 0x2c
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d06e      	beq.n	8011af4 <rcl_timer_call+0xe8>
 8011a16:	6803      	ldr	r3, [r0, #0]
 8011a18:	f3bf 8f5b 	dmb	ish
 8011a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011a20:	f3bf 8f5b 	dmb	ish
 8011a24:	4604      	mov	r4, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d159      	bne.n	8011ade <rcl_timer_call+0xd2>
 8011a2a:	6803      	ldr	r3, [r0, #0]
 8011a2c:	a908      	add	r1, sp, #32
 8011a2e:	6818      	ldr	r0, [r3, #0]
 8011a30:	f7ff fdc6 	bl	80115c0 <rcl_clock_get_now>
 8011a34:	4605      	mov	r5, r0
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d14d      	bne.n	8011ad6 <rcl_timer_call+0xca>
 8011a3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011a3e:	2a00      	cmp	r2, #0
 8011a40:	f173 0100 	sbcs.w	r1, r3, #0
 8011a44:	db51      	blt.n	8011aea <rcl_timer_call+0xde>
 8011a46:	6820      	ldr	r0, [r4, #0]
 8011a48:	2605      	movs	r6, #5
 8011a4a:	9600      	str	r6, [sp, #0]
 8011a4c:	3020      	adds	r0, #32
 8011a4e:	f001 f893 	bl	8012b78 <__atomic_exchange_8>
 8011a52:	6822      	ldr	r2, [r4, #0]
 8011a54:	f3bf 8f5b 	dmb	ish
 8011a58:	4682      	mov	sl, r0
 8011a5a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8011a5e:	f3bf 8f5b 	dmb	ish
 8011a62:	6820      	ldr	r0, [r4, #0]
 8011a64:	460b      	mov	r3, r1
 8011a66:	3028      	adds	r0, #40	; 0x28
 8011a68:	4631      	mov	r1, r6
 8011a6a:	9305      	str	r3, [sp, #20]
 8011a6c:	f001 f81c 	bl	8012aa8 <__atomic_load_8>
 8011a70:	4603      	mov	r3, r0
 8011a72:	6820      	ldr	r0, [r4, #0]
 8011a74:	460a      	mov	r2, r1
 8011a76:	3018      	adds	r0, #24
 8011a78:	4631      	mov	r1, r6
 8011a7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8011a7e:	f001 f813 	bl	8012aa8 <__atomic_load_8>
 8011a82:	9b04      	ldr	r3, [sp, #16]
 8011a84:	9a03      	ldr	r2, [sp, #12]
 8011a86:	4606      	mov	r6, r0
 8011a88:	460f      	mov	r7, r1
 8011a8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011a8e:	eb13 0806 	adds.w	r8, r3, r6
 8011a92:	eb42 0907 	adc.w	r9, r2, r7
 8011a96:	4580      	cmp	r8, r0
 8011a98:	eb79 0301 	sbcs.w	r3, r9, r1
 8011a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011aa0:	460a      	mov	r2, r1
 8011aa2:	da04      	bge.n	8011aae <rcl_timer_call+0xa2>
 8011aa4:	ea56 0307 	orrs.w	r3, r6, r7
 8011aa8:	d129      	bne.n	8011afe <rcl_timer_call+0xf2>
 8011aaa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8011aae:	6820      	ldr	r0, [r4, #0]
 8011ab0:	2105      	movs	r1, #5
 8011ab2:	4642      	mov	r2, r8
 8011ab4:	464b      	mov	r3, r9
 8011ab6:	3028      	adds	r0, #40	; 0x28
 8011ab8:	9100      	str	r1, [sp, #0]
 8011aba:	f001 f829 	bl	8012b10 <__atomic_store_8>
 8011abe:	f1bb 0f00 	cmp.w	fp, #0
 8011ac2:	d008      	beq.n	8011ad6 <rcl_timer_call+0xca>
 8011ac4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011ac8:	9905      	ldr	r1, [sp, #20]
 8011aca:	ebb2 020a 	subs.w	r2, r2, sl
 8011ace:	4620      	mov	r0, r4
 8011ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8011ad4:	47d8      	blx	fp
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	b00b      	add	sp, #44	; 0x2c
 8011ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ade:	f240 3521 	movw	r5, #801	; 0x321
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	b00b      	add	sp, #44	; 0x2c
 8011ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aea:	2501      	movs	r5, #1
 8011aec:	4628      	mov	r0, r5
 8011aee:	b00b      	add	sp, #44	; 0x2c
 8011af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af4:	250b      	movs	r5, #11
 8011af6:	4628      	mov	r0, r5
 8011af8:	b00b      	add	sp, #44	; 0x2c
 8011afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011afe:	ebb0 0008 	subs.w	r0, r0, r8
 8011b02:	eb62 0109 	sbc.w	r1, r2, r9
 8011b06:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8011b0a:	463b      	mov	r3, r7
 8011b0c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8011b10:	4632      	mov	r2, r6
 8011b12:	f7ef f803 	bl	8000b1c <__aeabi_ldivmod>
 8011b16:	1c43      	adds	r3, r0, #1
 8011b18:	f141 0100 	adc.w	r1, r1, #0
 8011b1c:	fb00 7007 	mla	r0, r0, r7, r7
 8011b20:	fb06 0001 	mla	r0, r6, r1, r0
 8011b24:	fba3 6706 	umull	r6, r7, r3, r6
 8011b28:	4407      	add	r7, r0
 8011b2a:	eb18 0806 	adds.w	r8, r8, r6
 8011b2e:	eb49 0907 	adc.w	r9, r9, r7
 8011b32:	e7bc      	b.n	8011aae <rcl_timer_call+0xa2>

08011b34 <rcl_timer_is_ready>:
 8011b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b38:	b082      	sub	sp, #8
 8011b3a:	b310      	cbz	r0, 8011b82 <rcl_timer_is_ready+0x4e>
 8011b3c:	4688      	mov	r8, r1
 8011b3e:	b301      	cbz	r1, 8011b82 <rcl_timer_is_ready+0x4e>
 8011b40:	6803      	ldr	r3, [r0, #0]
 8011b42:	4604      	mov	r4, r0
 8011b44:	4669      	mov	r1, sp
 8011b46:	6818      	ldr	r0, [r3, #0]
 8011b48:	f7ff fd3a 	bl	80115c0 <rcl_clock_get_now>
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	b118      	cbz	r0, 8011b58 <rcl_timer_is_ready+0x24>
 8011b50:	4628      	mov	r0, r5
 8011b52:	b002      	add	sp, #8
 8011b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b58:	6820      	ldr	r0, [r4, #0]
 8011b5a:	2105      	movs	r1, #5
 8011b5c:	3028      	adds	r0, #40	; 0x28
 8011b5e:	f000 ffa3 	bl	8012aa8 <__atomic_load_8>
 8011b62:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b66:	1ac6      	subs	r6, r0, r3
 8011b68:	eb61 0702 	sbc.w	r7, r1, r2
 8011b6c:	2e01      	cmp	r6, #1
 8011b6e:	f177 0300 	sbcs.w	r3, r7, #0
 8011b72:	db0b      	blt.n	8011b8c <rcl_timer_is_ready+0x58>
 8011b74:	462b      	mov	r3, r5
 8011b76:	4628      	mov	r0, r5
 8011b78:	f888 3000 	strb.w	r3, [r8]
 8011b7c:	b002      	add	sp, #8
 8011b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b82:	250b      	movs	r5, #11
 8011b84:	4628      	mov	r0, r5
 8011b86:	b002      	add	sp, #8
 8011b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b8c:	6823      	ldr	r3, [r4, #0]
 8011b8e:	f3bf 8f5b 	dmb	ish
 8011b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011b96:	f3bf 8f5b 	dmb	ish
 8011b9a:	fab3 f383 	clz	r3, r3
 8011b9e:	095b      	lsrs	r3, r3, #5
 8011ba0:	e7e9      	b.n	8011b76 <rcl_timer_is_ready+0x42>
 8011ba2:	bf00      	nop

08011ba4 <rcl_timer_get_time_until_next_call>:
 8011ba4:	b570      	push	{r4, r5, r6, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	b1d8      	cbz	r0, 8011be2 <rcl_timer_get_time_until_next_call+0x3e>
 8011baa:	460d      	mov	r5, r1
 8011bac:	b1c9      	cbz	r1, 8011be2 <rcl_timer_get_time_until_next_call+0x3e>
 8011bae:	6803      	ldr	r3, [r0, #0]
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	4669      	mov	r1, sp
 8011bb4:	6818      	ldr	r0, [r3, #0]
 8011bb6:	f7ff fd03 	bl	80115c0 <rcl_clock_get_now>
 8011bba:	4606      	mov	r6, r0
 8011bbc:	b110      	cbz	r0, 8011bc4 <rcl_timer_get_time_until_next_call+0x20>
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	b002      	add	sp, #8
 8011bc2:	bd70      	pop	{r4, r5, r6, pc}
 8011bc4:	6820      	ldr	r0, [r4, #0]
 8011bc6:	2105      	movs	r1, #5
 8011bc8:	3028      	adds	r0, #40	; 0x28
 8011bca:	f000 ff6d 	bl	8012aa8 <__atomic_load_8>
 8011bce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011bd2:	1ac0      	subs	r0, r0, r3
 8011bd4:	eb61 0102 	sbc.w	r1, r1, r2
 8011bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8011bdc:	4630      	mov	r0, r6
 8011bde:	b002      	add	sp, #8
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	260b      	movs	r6, #11
 8011be4:	4630      	mov	r0, r6
 8011be6:	b002      	add	sp, #8
 8011be8:	bd70      	pop	{r4, r5, r6, pc}
 8011bea:	bf00      	nop

08011bec <rcl_timer_is_canceled>:
 8011bec:	b168      	cbz	r0, 8011c0a <rcl_timer_is_canceled+0x1e>
 8011bee:	b161      	cbz	r1, 8011c0a <rcl_timer_is_canceled+0x1e>
 8011bf0:	6803      	ldr	r3, [r0, #0]
 8011bf2:	f3bf 8f5b 	dmb	ish
 8011bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011bfa:	f3bf 8f5b 	dmb	ish
 8011bfe:	3b00      	subs	r3, #0
 8011c00:	bf18      	it	ne
 8011c02:	2301      	movne	r3, #1
 8011c04:	700b      	strb	r3, [r1, #0]
 8011c06:	2000      	movs	r0, #0
 8011c08:	4770      	bx	lr
 8011c0a:	200b      	movs	r0, #11
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop

08011c10 <rcl_timer_get_guard_condition>:
 8011c10:	b130      	cbz	r0, 8011c20 <rcl_timer_get_guard_condition+0x10>
 8011c12:	6800      	ldr	r0, [r0, #0]
 8011c14:	b120      	cbz	r0, 8011c20 <rcl_timer_get_guard_condition+0x10>
 8011c16:	68c3      	ldr	r3, [r0, #12]
 8011c18:	b10b      	cbz	r3, 8011c1e <rcl_timer_get_guard_condition+0xe>
 8011c1a:	3008      	adds	r0, #8
 8011c1c:	4770      	bx	lr
 8011c1e:	4618      	mov	r0, r3
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop

08011c24 <rcl_validate_enclave_name_with_size>:
 8011c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c26:	b0c3      	sub	sp, #268	; 0x10c
 8011c28:	b1d0      	cbz	r0, 8011c60 <rcl_validate_enclave_name_with_size+0x3c>
 8011c2a:	4615      	mov	r5, r2
 8011c2c:	b1c2      	cbz	r2, 8011c60 <rcl_validate_enclave_name_with_size+0x3c>
 8011c2e:	461f      	mov	r7, r3
 8011c30:	466a      	mov	r2, sp
 8011c32:	ab01      	add	r3, sp, #4
 8011c34:	460e      	mov	r6, r1
 8011c36:	f7fa ff91 	bl	800cb5c <rmw_validate_namespace_with_size>
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	b9e0      	cbnz	r0, 8011c78 <rcl_validate_enclave_name_with_size+0x54>
 8011c3e:	9b00      	ldr	r3, [sp, #0]
 8011c40:	b923      	cbnz	r3, 8011c4c <rcl_validate_enclave_name_with_size+0x28>
 8011c42:	2300      	movs	r3, #0
 8011c44:	602b      	str	r3, [r5, #0]
 8011c46:	4620      	mov	r0, r4
 8011c48:	b043      	add	sp, #268	; 0x10c
 8011c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c4c:	2b07      	cmp	r3, #7
 8011c4e:	d00b      	beq.n	8011c68 <rcl_validate_enclave_name_with_size+0x44>
 8011c50:	1e5a      	subs	r2, r3, #1
 8011c52:	2a05      	cmp	r2, #5
 8011c54:	d82e      	bhi.n	8011cb4 <rcl_validate_enclave_name_with_size+0x90>
 8011c56:	e8df f002 	tbb	[pc, r2]
 8011c5a:	211e      	.short	0x211e
 8011c5c:	152a2724 	.word	0x152a2724
 8011c60:	240b      	movs	r4, #11
 8011c62:	4620      	mov	r0, r4
 8011c64:	b043      	add	sp, #268	; 0x10c
 8011c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c68:	2eff      	cmp	r6, #255	; 0xff
 8011c6a:	d9ea      	bls.n	8011c42 <rcl_validate_enclave_name_with_size+0x1e>
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	2f00      	cmp	r7, #0
 8011c70:	d0e9      	beq.n	8011c46 <rcl_validate_enclave_name_with_size+0x22>
 8011c72:	23fe      	movs	r3, #254	; 0xfe
 8011c74:	603b      	str	r3, [r7, #0]
 8011c76:	e7e6      	b.n	8011c46 <rcl_validate_enclave_name_with_size+0x22>
 8011c78:	f7fe fcec 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	4620      	mov	r0, r4
 8011c80:	b043      	add	sp, #268	; 0x10c
 8011c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c84:	2306      	movs	r3, #6
 8011c86:	602b      	str	r3, [r5, #0]
 8011c88:	2f00      	cmp	r7, #0
 8011c8a:	d0dc      	beq.n	8011c46 <rcl_validate_enclave_name_with_size+0x22>
 8011c8c:	9b01      	ldr	r3, [sp, #4]
 8011c8e:	603b      	str	r3, [r7, #0]
 8011c90:	4620      	mov	r0, r4
 8011c92:	b043      	add	sp, #268	; 0x10c
 8011c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c96:	2301      	movs	r3, #1
 8011c98:	602b      	str	r3, [r5, #0]
 8011c9a:	e7f5      	b.n	8011c88 <rcl_validate_enclave_name_with_size+0x64>
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	602b      	str	r3, [r5, #0]
 8011ca0:	e7f2      	b.n	8011c88 <rcl_validate_enclave_name_with_size+0x64>
 8011ca2:	2303      	movs	r3, #3
 8011ca4:	602b      	str	r3, [r5, #0]
 8011ca6:	e7ef      	b.n	8011c88 <rcl_validate_enclave_name_with_size+0x64>
 8011ca8:	2304      	movs	r3, #4
 8011caa:	602b      	str	r3, [r5, #0]
 8011cac:	e7ec      	b.n	8011c88 <rcl_validate_enclave_name_with_size+0x64>
 8011cae:	2305      	movs	r3, #5
 8011cb0:	602b      	str	r3, [r5, #0]
 8011cb2:	e7e9      	b.n	8011c88 <rcl_validate_enclave_name_with_size+0x64>
 8011cb4:	4a03      	ldr	r2, [pc, #12]	; (8011cc4 <rcl_validate_enclave_name_with_size+0xa0>)
 8011cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011cba:	a802      	add	r0, sp, #8
 8011cbc:	f7fa fcdc 	bl	800c678 <rcutils_snprintf>
 8011cc0:	2401      	movs	r4, #1
 8011cc2:	e7c0      	b.n	8011c46 <rcl_validate_enclave_name_with_size+0x22>
 8011cc4:	08017604 	.word	0x08017604

08011cc8 <rcl_validate_enclave_name>:
 8011cc8:	b168      	cbz	r0, 8011ce6 <rcl_validate_enclave_name+0x1e>
 8011cca:	b570      	push	{r4, r5, r6, lr}
 8011ccc:	460d      	mov	r5, r1
 8011cce:	4616      	mov	r6, r2
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	f7ee faa7 	bl	8000224 <strlen>
 8011cd6:	4633      	mov	r3, r6
 8011cd8:	4601      	mov	r1, r0
 8011cda:	462a      	mov	r2, r5
 8011cdc:	4620      	mov	r0, r4
 8011cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ce2:	f7ff bf9f 	b.w	8011c24 <rcl_validate_enclave_name_with_size>
 8011ce6:	200b      	movs	r0, #11
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop

08011cec <rcl_validate_topic_name>:
 8011cec:	2800      	cmp	r0, #0
 8011cee:	f000 808b 	beq.w	8011e08 <rcl_validate_topic_name+0x11c>
 8011cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cf6:	460e      	mov	r6, r1
 8011cf8:	2900      	cmp	r1, #0
 8011cfa:	f000 808c 	beq.w	8011e16 <rcl_validate_topic_name+0x12a>
 8011cfe:	4617      	mov	r7, r2
 8011d00:	4605      	mov	r5, r0
 8011d02:	f7ee fa8f 	bl	8000224 <strlen>
 8011d06:	b1b0      	cbz	r0, 8011d36 <rcl_validate_topic_name+0x4a>
 8011d08:	f895 9000 	ldrb.w	r9, [r5]
 8011d0c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8011ebc <rcl_validate_topic_name+0x1d0>
 8011d10:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011d14:	f013 0304 	ands.w	r3, r3, #4
 8011d18:	d178      	bne.n	8011e0c <rcl_validate_topic_name+0x120>
 8011d1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8011d1e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8011d22:	2a2f      	cmp	r2, #47	; 0x2f
 8011d24:	d10e      	bne.n	8011d44 <rcl_validate_topic_name+0x58>
 8011d26:	2202      	movs	r2, #2
 8011d28:	6032      	str	r2, [r6, #0]
 8011d2a:	b36f      	cbz	r7, 8011d88 <rcl_validate_topic_name+0x9c>
 8011d2c:	f8c7 8000 	str.w	r8, [r7]
 8011d30:	4618      	mov	r0, r3
 8011d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d36:	2301      	movs	r3, #1
 8011d38:	6033      	str	r3, [r6, #0]
 8011d3a:	b32f      	cbz	r7, 8011d88 <rcl_validate_topic_name+0x9c>
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	6038      	str	r0, [r7, #0]
 8011d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d44:	461c      	mov	r4, r3
 8011d46:	4619      	mov	r1, r3
 8011d48:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8011d4c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8011d50:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011d54:	f1be 0f09 	cmp.w	lr, #9
 8011d58:	d946      	bls.n	8011de8 <rcl_validate_topic_name+0xfc>
 8011d5a:	f022 0e20 	bic.w	lr, r2, #32
 8011d5e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8011d62:	f1be 0f19 	cmp.w	lr, #25
 8011d66:	d93f      	bls.n	8011de8 <rcl_validate_topic_name+0xfc>
 8011d68:	2a5f      	cmp	r2, #95	; 0x5f
 8011d6a:	d014      	beq.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011d6c:	2a2f      	cmp	r2, #47	; 0x2f
 8011d6e:	d05b      	beq.n	8011e28 <rcl_validate_topic_name+0x13c>
 8011d70:	2a7e      	cmp	r2, #126	; 0x7e
 8011d72:	d052      	beq.n	8011e1a <rcl_validate_topic_name+0x12e>
 8011d74:	2a7b      	cmp	r2, #123	; 0x7b
 8011d76:	d00a      	beq.n	8011d8e <rcl_validate_topic_name+0xa2>
 8011d78:	2a7d      	cmp	r2, #125	; 0x7d
 8011d7a:	d16f      	bne.n	8011e5c <rcl_validate_topic_name+0x170>
 8011d7c:	2c00      	cmp	r4, #0
 8011d7e:	d15e      	bne.n	8011e3e <rcl_validate_topic_name+0x152>
 8011d80:	2305      	movs	r3, #5
 8011d82:	6033      	str	r3, [r6, #0]
 8011d84:	b107      	cbz	r7, 8011d88 <rcl_validate_topic_name+0x9c>
 8011d86:	6039      	str	r1, [r7, #0]
 8011d88:	2000      	movs	r0, #0
 8011d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d8e:	2c00      	cmp	r4, #0
 8011d90:	d14c      	bne.n	8011e2c <rcl_validate_topic_name+0x140>
 8011d92:	460b      	mov	r3, r1
 8011d94:	2401      	movs	r4, #1
 8011d96:	3101      	adds	r1, #1
 8011d98:	4288      	cmp	r0, r1
 8011d9a:	d1d7      	bne.n	8011d4c <rcl_validate_topic_name+0x60>
 8011d9c:	2c00      	cmp	r4, #0
 8011d9e:	d156      	bne.n	8011e4e <rcl_validate_topic_name+0x162>
 8011da0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8011da4:	4620      	mov	r0, r4
 8011da6:	d061      	beq.n	8011e6c <rcl_validate_topic_name+0x180>
 8011da8:	f108 0e01 	add.w	lr, r8, #1
 8011dac:	e007      	b.n	8011dbe <rcl_validate_topic_name+0xd2>
 8011dae:	2801      	cmp	r0, #1
 8011db0:	d047      	beq.n	8011e42 <rcl_validate_topic_name+0x156>
 8011db2:	461a      	mov	r2, r3
 8011db4:	4291      	cmp	r1, r2
 8011db6:	4618      	mov	r0, r3
 8011db8:	f105 0501 	add.w	r5, r5, #1
 8011dbc:	d944      	bls.n	8011e48 <rcl_validate_topic_name+0x15c>
 8011dbe:	4580      	cmp	r8, r0
 8011dc0:	f100 0301 	add.w	r3, r0, #1
 8011dc4:	d037      	beq.n	8011e36 <rcl_validate_topic_name+0x14a>
 8011dc6:	782a      	ldrb	r2, [r5, #0]
 8011dc8:	2a2f      	cmp	r2, #47	; 0x2f
 8011dca:	d1f0      	bne.n	8011dae <rcl_validate_topic_name+0xc2>
 8011dcc:	786b      	ldrb	r3, [r5, #1]
 8011dce:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8011dd2:	1c43      	adds	r3, r0, #1
 8011dd4:	0760      	lsls	r0, r4, #29
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	d5ec      	bpl.n	8011db4 <rcl_validate_topic_name+0xc8>
 8011dda:	2304      	movs	r3, #4
 8011ddc:	6033      	str	r3, [r6, #0]
 8011dde:	2f00      	cmp	r7, #0
 8011de0:	d0d2      	beq.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011de2:	603a      	str	r2, [r7, #0]
 8011de4:	2000      	movs	r0, #0
 8011de6:	e7ab      	b.n	8011d40 <rcl_validate_topic_name+0x54>
 8011de8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011dec:	0752      	lsls	r2, r2, #29
 8011dee:	d5d2      	bpl.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011df0:	2c00      	cmp	r4, #0
 8011df2:	d0d0      	beq.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011df4:	2900      	cmp	r1, #0
 8011df6:	d0ce      	beq.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011df8:	1e4a      	subs	r2, r1, #1
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d1cb      	bne.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011dfe:	2309      	movs	r3, #9
 8011e00:	6033      	str	r3, [r6, #0]
 8011e02:	2f00      	cmp	r7, #0
 8011e04:	d1bf      	bne.n	8011d86 <rcl_validate_topic_name+0x9a>
 8011e06:	e7bf      	b.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011e08:	200b      	movs	r0, #11
 8011e0a:	4770      	bx	lr
 8011e0c:	2304      	movs	r3, #4
 8011e0e:	6033      	str	r3, [r6, #0]
 8011e10:	2f00      	cmp	r7, #0
 8011e12:	d193      	bne.n	8011d3c <rcl_validate_topic_name+0x50>
 8011e14:	e7b8      	b.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011e16:	200b      	movs	r0, #11
 8011e18:	e792      	b.n	8011d40 <rcl_validate_topic_name+0x54>
 8011e1a:	2900      	cmp	r1, #0
 8011e1c:	d0bb      	beq.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011e1e:	2306      	movs	r3, #6
 8011e20:	6033      	str	r3, [r6, #0]
 8011e22:	2f00      	cmp	r7, #0
 8011e24:	d1af      	bne.n	8011d86 <rcl_validate_topic_name+0x9a>
 8011e26:	e7af      	b.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011e28:	2c00      	cmp	r4, #0
 8011e2a:	d0b4      	beq.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011e2c:	2308      	movs	r3, #8
 8011e2e:	6033      	str	r3, [r6, #0]
 8011e30:	2f00      	cmp	r7, #0
 8011e32:	d1a8      	bne.n	8011d86 <rcl_validate_topic_name+0x9a>
 8011e34:	e7a8      	b.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011e36:	4672      	mov	r2, lr
 8011e38:	f108 0301 	add.w	r3, r8, #1
 8011e3c:	e7ba      	b.n	8011db4 <rcl_validate_topic_name+0xc8>
 8011e3e:	2400      	movs	r4, #0
 8011e40:	e7a9      	b.n	8011d96 <rcl_validate_topic_name+0xaa>
 8011e42:	2202      	movs	r2, #2
 8011e44:	4613      	mov	r3, r2
 8011e46:	e7b5      	b.n	8011db4 <rcl_validate_topic_name+0xc8>
 8011e48:	2000      	movs	r0, #0
 8011e4a:	6030      	str	r0, [r6, #0]
 8011e4c:	e778      	b.n	8011d40 <rcl_validate_topic_name+0x54>
 8011e4e:	2205      	movs	r2, #5
 8011e50:	6032      	str	r2, [r6, #0]
 8011e52:	2f00      	cmp	r7, #0
 8011e54:	d098      	beq.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011e56:	603b      	str	r3, [r7, #0]
 8011e58:	2000      	movs	r0, #0
 8011e5a:	e771      	b.n	8011d40 <rcl_validate_topic_name+0x54>
 8011e5c:	2c00      	cmp	r4, #0
 8011e5e:	bf14      	ite	ne
 8011e60:	2308      	movne	r3, #8
 8011e62:	2303      	moveq	r3, #3
 8011e64:	6033      	str	r3, [r6, #0]
 8011e66:	2f00      	cmp	r7, #0
 8011e68:	d18d      	bne.n	8011d86 <rcl_validate_topic_name+0x9a>
 8011e6a:	e78d      	b.n	8011d88 <rcl_validate_topic_name+0x9c>
 8011e6c:	f108 0401 	add.w	r4, r8, #1
 8011e70:	e007      	b.n	8011e82 <rcl_validate_topic_name+0x196>
 8011e72:	2801      	cmp	r0, #1
 8011e74:	d019      	beq.n	8011eaa <rcl_validate_topic_name+0x1be>
 8011e76:	461a      	mov	r2, r3
 8011e78:	4291      	cmp	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f105 0501 	add.w	r5, r5, #1
 8011e80:	d9e2      	bls.n	8011e48 <rcl_validate_topic_name+0x15c>
 8011e82:	4580      	cmp	r8, r0
 8011e84:	f100 0301 	add.w	r3, r0, #1
 8011e88:	d00b      	beq.n	8011ea2 <rcl_validate_topic_name+0x1b6>
 8011e8a:	782a      	ldrb	r2, [r5, #0]
 8011e8c:	2a2f      	cmp	r2, #47	; 0x2f
 8011e8e:	d1f0      	bne.n	8011e72 <rcl_validate_topic_name+0x186>
 8011e90:	786b      	ldrb	r3, [r5, #1]
 8011e92:	f81c e003 	ldrb.w	lr, [ip, r3]
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	f01e 0f04 	tst.w	lr, #4
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	d0eb      	beq.n	8011e78 <rcl_validate_topic_name+0x18c>
 8011ea0:	e79b      	b.n	8011dda <rcl_validate_topic_name+0xee>
 8011ea2:	4622      	mov	r2, r4
 8011ea4:	f108 0301 	add.w	r3, r8, #1
 8011ea8:	e7e6      	b.n	8011e78 <rcl_validate_topic_name+0x18c>
 8011eaa:	2307      	movs	r3, #7
 8011eac:	6033      	str	r3, [r6, #0]
 8011eae:	2f00      	cmp	r7, #0
 8011eb0:	f43f af6a 	beq.w	8011d88 <rcl_validate_topic_name+0x9c>
 8011eb4:	6038      	str	r0, [r7, #0]
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	e742      	b.n	8011d40 <rcl_validate_topic_name+0x54>
 8011eba:	bf00      	nop
 8011ebc:	080178ed 	.word	0x080178ed

08011ec0 <rcl_get_zero_initialized_wait_set>:
 8011ec0:	b470      	push	{r4, r5, r6}
 8011ec2:	4d07      	ldr	r5, [pc, #28]	; (8011ee0 <rcl_get_zero_initialized_wait_set+0x20>)
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ec8:	4634      	mov	r4, r6
 8011eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ed4:	682b      	ldr	r3, [r5, #0]
 8011ed6:	6023      	str	r3, [r4, #0]
 8011ed8:	4630      	mov	r0, r6
 8011eda:	bc70      	pop	{r4, r5, r6}
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop
 8011ee0:	08017664 	.word	0x08017664

08011ee4 <rcl_wait_set_is_valid>:
 8011ee4:	b118      	cbz	r0, 8011eee <rcl_wait_set_is_valid+0xa>
 8011ee6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011ee8:	3800      	subs	r0, #0
 8011eea:	bf18      	it	ne
 8011eec:	2001      	movne	r0, #1
 8011eee:	4770      	bx	lr

08011ef0 <rcl_wait_set_fini>:
 8011ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef4:	b082      	sub	sp, #8
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	f000 8095 	beq.w	8012026 <rcl_wait_set_fini+0x136>
 8011efc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011efe:	4604      	mov	r4, r0
 8011f00:	2e00      	cmp	r6, #0
 8011f02:	f000 808c 	beq.w	801201e <rcl_wait_set_fini+0x12e>
 8011f06:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8011f08:	f001 fd20 	bl	801394c <rmw_destroy_wait_set>
 8011f0c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f0e:	1e06      	subs	r6, r0, #0
 8011f10:	bf18      	it	ne
 8011f12:	f44f 7661 	movne.w	r6, #900	; 0x384
 8011f16:	2d00      	cmp	r5, #0
 8011f18:	f000 8081 	beq.w	801201e <rcl_wait_set_fini+0x12e>
 8011f1c:	6820      	ldr	r0, [r4, #0]
 8011f1e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011f22:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f24:	2700      	movs	r7, #0
 8011f26:	6067      	str	r7, [r4, #4]
 8011f28:	602f      	str	r7, [r5, #0]
 8011f2a:	b120      	cbz	r0, 8011f36 <rcl_wait_set_fini+0x46>
 8011f2c:	9101      	str	r1, [sp, #4]
 8011f2e:	47c0      	blx	r8
 8011f30:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f32:	9901      	ldr	r1, [sp, #4]
 8011f34:	6027      	str	r7, [r4, #0]
 8011f36:	68a8      	ldr	r0, [r5, #8]
 8011f38:	b120      	cbz	r0, 8011f44 <rcl_wait_set_fini+0x54>
 8011f3a:	47c0      	blx	r8
 8011f3c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f3e:	2300      	movs	r3, #0
 8011f40:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011f44:	68a0      	ldr	r0, [r4, #8]
 8011f46:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011f48:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f4a:	f04f 0800 	mov.w	r8, #0
 8011f4e:	f8c4 800c 	str.w	r8, [r4, #12]
 8011f52:	f8c5 800c 	str.w	r8, [r5, #12]
 8011f56:	b128      	cbz	r0, 8011f64 <rcl_wait_set_fini+0x74>
 8011f58:	47b8      	blx	r7
 8011f5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f5c:	f8c4 8008 	str.w	r8, [r4, #8]
 8011f60:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011f62:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f64:	6968      	ldr	r0, [r5, #20]
 8011f66:	f04f 0800 	mov.w	r8, #0
 8011f6a:	f8c5 8010 	str.w	r8, [r5, #16]
 8011f6e:	b128      	cbz	r0, 8011f7c <rcl_wait_set_fini+0x8c>
 8011f70:	47b8      	blx	r7
 8011f72:	f8c5 8014 	str.w	r8, [r5, #20]
 8011f76:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f78:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011f7a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f7c:	6920      	ldr	r0, [r4, #16]
 8011f7e:	f04f 0800 	mov.w	r8, #0
 8011f82:	f8c4 8014 	str.w	r8, [r4, #20]
 8011f86:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8011f8a:	b128      	cbz	r0, 8011f98 <rcl_wait_set_fini+0xa8>
 8011f8c:	47b8      	blx	r7
 8011f8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011f90:	f8c4 8010 	str.w	r8, [r4, #16]
 8011f94:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011f96:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011f98:	69a0      	ldr	r0, [r4, #24]
 8011f9a:	f04f 0800 	mov.w	r8, #0
 8011f9e:	f8c4 801c 	str.w	r8, [r4, #28]
 8011fa2:	f8c5 8018 	str.w	r8, [r5, #24]
 8011fa6:	b128      	cbz	r0, 8011fb4 <rcl_wait_set_fini+0xc4>
 8011fa8:	9101      	str	r1, [sp, #4]
 8011faa:	47b8      	blx	r7
 8011fac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fae:	9901      	ldr	r1, [sp, #4]
 8011fb0:	f8c4 8018 	str.w	r8, [r4, #24]
 8011fb4:	6a28      	ldr	r0, [r5, #32]
 8011fb6:	b120      	cbz	r0, 8011fc2 <rcl_wait_set_fini+0xd2>
 8011fb8:	47b8      	blx	r7
 8011fba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011fc2:	6a20      	ldr	r0, [r4, #32]
 8011fc4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011fc8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011fca:	2700      	movs	r7, #0
 8011fcc:	6267      	str	r7, [r4, #36]	; 0x24
 8011fce:	626f      	str	r7, [r5, #36]	; 0x24
 8011fd0:	b120      	cbz	r0, 8011fdc <rcl_wait_set_fini+0xec>
 8011fd2:	9101      	str	r1, [sp, #4]
 8011fd4:	47c0      	blx	r8
 8011fd6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fd8:	9901      	ldr	r1, [sp, #4]
 8011fda:	6227      	str	r7, [r4, #32]
 8011fdc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8011fde:	b120      	cbz	r0, 8011fea <rcl_wait_set_fini+0xfa>
 8011fe0:	47c0      	blx	r8
 8011fe2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8011fea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011fec:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011ff0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011ff2:	2700      	movs	r7, #0
 8011ff4:	62e7      	str	r7, [r4, #44]	; 0x2c
 8011ff6:	632f      	str	r7, [r5, #48]	; 0x30
 8011ff8:	b120      	cbz	r0, 8012004 <rcl_wait_set_fini+0x114>
 8011ffa:	9101      	str	r1, [sp, #4]
 8011ffc:	47c0      	blx	r8
 8011ffe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012000:	9901      	ldr	r1, [sp, #4]
 8012002:	62a7      	str	r7, [r4, #40]	; 0x28
 8012004:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012006:	b120      	cbz	r0, 8012012 <rcl_wait_set_fini+0x122>
 8012008:	47c0      	blx	r8
 801200a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801200c:	2300      	movs	r3, #0
 801200e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8012012:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8012014:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012016:	4628      	mov	r0, r5
 8012018:	4798      	blx	r3
 801201a:	2300      	movs	r3, #0
 801201c:	6323      	str	r3, [r4, #48]	; 0x30
 801201e:	4630      	mov	r0, r6
 8012020:	b002      	add	sp, #8
 8012022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012026:	260b      	movs	r6, #11
 8012028:	4630      	mov	r0, r6
 801202a:	b002      	add	sp, #8
 801202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012030 <rcl_wait_set_add_subscription>:
 8012030:	b320      	cbz	r0, 801207c <rcl_wait_set_add_subscription+0x4c>
 8012032:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012034:	b570      	push	{r4, r5, r6, lr}
 8012036:	4604      	mov	r4, r0
 8012038:	b1d3      	cbz	r3, 8012070 <rcl_wait_set_add_subscription+0x40>
 801203a:	b319      	cbz	r1, 8012084 <rcl_wait_set_add_subscription+0x54>
 801203c:	681d      	ldr	r5, [r3, #0]
 801203e:	6860      	ldr	r0, [r4, #4]
 8012040:	4285      	cmp	r5, r0
 8012042:	d218      	bcs.n	8012076 <rcl_wait_set_add_subscription+0x46>
 8012044:	6820      	ldr	r0, [r4, #0]
 8012046:	1c6e      	adds	r6, r5, #1
 8012048:	601e      	str	r6, [r3, #0]
 801204a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801204e:	b102      	cbz	r2, 8012052 <rcl_wait_set_add_subscription+0x22>
 8012050:	6015      	str	r5, [r2, #0]
 8012052:	4608      	mov	r0, r1
 8012054:	f7ff fa16 	bl	8011484 <rcl_subscription_get_rmw_handle>
 8012058:	b190      	cbz	r0, 8012080 <rcl_wait_set_add_subscription+0x50>
 801205a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801205c:	6842      	ldr	r2, [r0, #4]
 801205e:	689b      	ldr	r3, [r3, #8]
 8012060:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012064:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012066:	6853      	ldr	r3, [r2, #4]
 8012068:	3301      	adds	r3, #1
 801206a:	6053      	str	r3, [r2, #4]
 801206c:	2000      	movs	r0, #0
 801206e:	bd70      	pop	{r4, r5, r6, pc}
 8012070:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012074:	bd70      	pop	{r4, r5, r6, pc}
 8012076:	f240 3086 	movw	r0, #902	; 0x386
 801207a:	bd70      	pop	{r4, r5, r6, pc}
 801207c:	200b      	movs	r0, #11
 801207e:	4770      	bx	lr
 8012080:	2001      	movs	r0, #1
 8012082:	bd70      	pop	{r4, r5, r6, pc}
 8012084:	200b      	movs	r0, #11
 8012086:	bd70      	pop	{r4, r5, r6, pc}

08012088 <rcl_wait_set_clear>:
 8012088:	2800      	cmp	r0, #0
 801208a:	d073      	beq.n	8012174 <rcl_wait_set_clear+0xec>
 801208c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801208e:	b510      	push	{r4, lr}
 8012090:	4604      	mov	r4, r0
 8012092:	2b00      	cmp	r3, #0
 8012094:	d070      	beq.n	8012178 <rcl_wait_set_clear+0xf0>
 8012096:	6800      	ldr	r0, [r0, #0]
 8012098:	b138      	cbz	r0, 80120aa <rcl_wait_set_clear+0x22>
 801209a:	6862      	ldr	r2, [r4, #4]
 801209c:	2100      	movs	r1, #0
 801209e:	0092      	lsls	r2, r2, #2
 80120a0:	f003 fa38 	bl	8015514 <memset>
 80120a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120a6:	2200      	movs	r2, #0
 80120a8:	601a      	str	r2, [r3, #0]
 80120aa:	68a0      	ldr	r0, [r4, #8]
 80120ac:	b138      	cbz	r0, 80120be <rcl_wait_set_clear+0x36>
 80120ae:	68e2      	ldr	r2, [r4, #12]
 80120b0:	2100      	movs	r1, #0
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	f003 fa2e 	bl	8015514 <memset>
 80120b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120ba:	2200      	movs	r2, #0
 80120bc:	60da      	str	r2, [r3, #12]
 80120be:	69a0      	ldr	r0, [r4, #24]
 80120c0:	b138      	cbz	r0, 80120d2 <rcl_wait_set_clear+0x4a>
 80120c2:	69e2      	ldr	r2, [r4, #28]
 80120c4:	2100      	movs	r1, #0
 80120c6:	0092      	lsls	r2, r2, #2
 80120c8:	f003 fa24 	bl	8015514 <memset>
 80120cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120ce:	2200      	movs	r2, #0
 80120d0:	619a      	str	r2, [r3, #24]
 80120d2:	6a20      	ldr	r0, [r4, #32]
 80120d4:	b138      	cbz	r0, 80120e6 <rcl_wait_set_clear+0x5e>
 80120d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80120d8:	2100      	movs	r1, #0
 80120da:	0092      	lsls	r2, r2, #2
 80120dc:	f003 fa1a 	bl	8015514 <memset>
 80120e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120e2:	2200      	movs	r2, #0
 80120e4:	625a      	str	r2, [r3, #36]	; 0x24
 80120e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80120e8:	b138      	cbz	r0, 80120fa <rcl_wait_set_clear+0x72>
 80120ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80120ec:	2100      	movs	r1, #0
 80120ee:	0092      	lsls	r2, r2, #2
 80120f0:	f003 fa10 	bl	8015514 <memset>
 80120f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120f6:	2200      	movs	r2, #0
 80120f8:	631a      	str	r2, [r3, #48]	; 0x30
 80120fa:	6920      	ldr	r0, [r4, #16]
 80120fc:	b138      	cbz	r0, 801210e <rcl_wait_set_clear+0x86>
 80120fe:	6962      	ldr	r2, [r4, #20]
 8012100:	2100      	movs	r1, #0
 8012102:	0092      	lsls	r2, r2, #2
 8012104:	f003 fa06 	bl	8015514 <memset>
 8012108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801210a:	2200      	movs	r2, #0
 801210c:	641a      	str	r2, [r3, #64]	; 0x40
 801210e:	6898      	ldr	r0, [r3, #8]
 8012110:	b138      	cbz	r0, 8012122 <rcl_wait_set_clear+0x9a>
 8012112:	685a      	ldr	r2, [r3, #4]
 8012114:	2100      	movs	r1, #0
 8012116:	0092      	lsls	r2, r2, #2
 8012118:	f003 f9fc 	bl	8015514 <memset>
 801211c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801211e:	2200      	movs	r2, #0
 8012120:	605a      	str	r2, [r3, #4]
 8012122:	6958      	ldr	r0, [r3, #20]
 8012124:	b138      	cbz	r0, 8012136 <rcl_wait_set_clear+0xae>
 8012126:	691a      	ldr	r2, [r3, #16]
 8012128:	2100      	movs	r1, #0
 801212a:	0092      	lsls	r2, r2, #2
 801212c:	f003 f9f2 	bl	8015514 <memset>
 8012130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012132:	2200      	movs	r2, #0
 8012134:	611a      	str	r2, [r3, #16]
 8012136:	6a18      	ldr	r0, [r3, #32]
 8012138:	b138      	cbz	r0, 801214a <rcl_wait_set_clear+0xc2>
 801213a:	69da      	ldr	r2, [r3, #28]
 801213c:	2100      	movs	r1, #0
 801213e:	0092      	lsls	r2, r2, #2
 8012140:	f003 f9e8 	bl	8015514 <memset>
 8012144:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012146:	2200      	movs	r2, #0
 8012148:	61da      	str	r2, [r3, #28]
 801214a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801214c:	b138      	cbz	r0, 801215e <rcl_wait_set_clear+0xd6>
 801214e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012150:	2100      	movs	r1, #0
 8012152:	0092      	lsls	r2, r2, #2
 8012154:	f003 f9de 	bl	8015514 <memset>
 8012158:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801215a:	2200      	movs	r2, #0
 801215c:	629a      	str	r2, [r3, #40]	; 0x28
 801215e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8012160:	b138      	cbz	r0, 8012172 <rcl_wait_set_clear+0xea>
 8012162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012164:	2100      	movs	r1, #0
 8012166:	0092      	lsls	r2, r2, #2
 8012168:	f003 f9d4 	bl	8015514 <memset>
 801216c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801216e:	2000      	movs	r0, #0
 8012170:	6358      	str	r0, [r3, #52]	; 0x34
 8012172:	bd10      	pop	{r4, pc}
 8012174:	200b      	movs	r0, #11
 8012176:	4770      	bx	lr
 8012178:	f44f 7061 	mov.w	r0, #900	; 0x384
 801217c:	bd10      	pop	{r4, pc}
 801217e:	bf00      	nop

08012180 <rcl_wait_set_resize>:
 8012180:	2800      	cmp	r0, #0
 8012182:	f000 81a6 	beq.w	80124d2 <rcl_wait_set_resize+0x352>
 8012186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801218a:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 801218e:	b083      	sub	sp, #12
 8012190:	4604      	mov	r4, r0
 8012192:	f1ba 0f00 	cmp.w	sl, #0
 8012196:	f000 819e 	beq.w	80124d6 <rcl_wait_set_resize+0x356>
 801219a:	461e      	mov	r6, r3
 801219c:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80121a0:	f04f 0800 	mov.w	r8, #0
 80121a4:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	f8c0 8004 	str.w	r8, [r0, #4]
 80121ae:	460f      	mov	r7, r1
 80121b0:	4615      	mov	r5, r2
 80121b2:	f8ca 8000 	str.w	r8, [sl]
 80121b6:	2900      	cmp	r1, #0
 80121b8:	f000 80c9 	beq.w	801234e <rcl_wait_set_resize+0x1ce>
 80121bc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80121c0:	6800      	ldr	r0, [r0, #0]
 80121c2:	4651      	mov	r1, sl
 80121c4:	464a      	mov	r2, r9
 80121c6:	4798      	blx	r3
 80121c8:	6020      	str	r0, [r4, #0]
 80121ca:	2800      	cmp	r0, #0
 80121cc:	f000 80d8 	beq.w	8012380 <rcl_wait_set_resize+0x200>
 80121d0:	4652      	mov	r2, sl
 80121d2:	4641      	mov	r1, r8
 80121d4:	f003 f99e 	bl	8015514 <memset>
 80121d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80121da:	6067      	str	r7, [r4, #4]
 80121dc:	6898      	ldr	r0, [r3, #8]
 80121de:	f8c3 8004 	str.w	r8, [r3, #4]
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	464a      	mov	r2, r9
 80121e6:	9b00      	ldr	r3, [sp, #0]
 80121e8:	4651      	mov	r1, sl
 80121ea:	4798      	blx	r3
 80121ec:	9b01      	ldr	r3, [sp, #4]
 80121ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80121f0:	6098      	str	r0, [r3, #8]
 80121f2:	6897      	ldr	r7, [r2, #8]
 80121f4:	2f00      	cmp	r7, #0
 80121f6:	f000 80be 	beq.w	8012376 <rcl_wait_set_resize+0x1f6>
 80121fa:	4652      	mov	r2, sl
 80121fc:	4641      	mov	r1, r8
 80121fe:	4638      	mov	r0, r7
 8012200:	f003 f988 	bl	8015514 <memset>
 8012204:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012208:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801220c:	2700      	movs	r7, #0
 801220e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8012212:	60e7      	str	r7, [r4, #12]
 8012214:	f8ca 700c 	str.w	r7, [sl, #12]
 8012218:	2d00      	cmp	r5, #0
 801221a:	f040 80b5 	bne.w	8012388 <rcl_wait_set_resize+0x208>
 801221e:	68a0      	ldr	r0, [r4, #8]
 8012220:	b130      	cbz	r0, 8012230 <rcl_wait_set_resize+0xb0>
 8012222:	4641      	mov	r1, r8
 8012224:	4790      	blx	r2
 8012226:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801222a:	60a5      	str	r5, [r4, #8]
 801222c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8012230:	2700      	movs	r7, #0
 8012232:	19ad      	adds	r5, r5, r6
 8012234:	f8ca 7010 	str.w	r7, [sl, #16]
 8012238:	f040 80be 	bne.w	80123b8 <rcl_wait_set_resize+0x238>
 801223c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8012240:	b148      	cbz	r0, 8012256 <rcl_wait_set_resize+0xd6>
 8012242:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8012246:	4641      	mov	r1, r8
 8012248:	4798      	blx	r3
 801224a:	f8ca 5014 	str.w	r5, [sl, #20]
 801224e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012252:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8012256:	2500      	movs	r5, #0
 8012258:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801225c:	6165      	str	r5, [r4, #20]
 801225e:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8012262:	2e00      	cmp	r6, #0
 8012264:	f040 80bf 	bne.w	80123e6 <rcl_wait_set_resize+0x266>
 8012268:	6920      	ldr	r0, [r4, #16]
 801226a:	b140      	cbz	r0, 801227e <rcl_wait_set_resize+0xfe>
 801226c:	4641      	mov	r1, r8
 801226e:	47c8      	blx	r9
 8012270:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012274:	6126      	str	r6, [r4, #16]
 8012276:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801227a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801227e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012280:	2500      	movs	r5, #0
 8012282:	61e5      	str	r5, [r4, #28]
 8012284:	f8ca 5018 	str.w	r5, [sl, #24]
 8012288:	2b00      	cmp	r3, #0
 801228a:	f040 80c1 	bne.w	8012410 <rcl_wait_set_resize+0x290>
 801228e:	69a0      	ldr	r0, [r4, #24]
 8012290:	b128      	cbz	r0, 801229e <rcl_wait_set_resize+0x11e>
 8012292:	4641      	mov	r1, r8
 8012294:	47c8      	blx	r9
 8012296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012298:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801229c:	61a3      	str	r3, [r4, #24]
 801229e:	f8da 0020 	ldr.w	r0, [sl, #32]
 80122a2:	b130      	cbz	r0, 80122b2 <rcl_wait_set_resize+0x132>
 80122a4:	4641      	mov	r1, r8
 80122a6:	47c8      	blx	r9
 80122a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80122ac:	2300      	movs	r3, #0
 80122ae:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80122b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122b4:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 80122b8:	2600      	movs	r6, #0
 80122ba:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 80122be:	6266      	str	r6, [r4, #36]	; 0x24
 80122c0:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f000 80c8 	beq.w	801245a <rcl_wait_set_resize+0x2da>
 80122ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80122ce:	6a20      	ldr	r0, [r4, #32]
 80122d0:	4651      	mov	r1, sl
 80122d2:	463a      	mov	r2, r7
 80122d4:	47c8      	blx	r9
 80122d6:	6220      	str	r0, [r4, #32]
 80122d8:	2800      	cmp	r0, #0
 80122da:	d051      	beq.n	8012380 <rcl_wait_set_resize+0x200>
 80122dc:	4652      	mov	r2, sl
 80122de:	4631      	mov	r1, r6
 80122e0:	f003 f918 	bl	8015514 <memset>
 80122e4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80122e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122e8:	6263      	str	r3, [r4, #36]	; 0x24
 80122ea:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80122ec:	62ae      	str	r6, [r5, #40]	; 0x28
 80122ee:	463a      	mov	r2, r7
 80122f0:	4651      	mov	r1, sl
 80122f2:	47c8      	blx	r9
 80122f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122f6:	62e8      	str	r0, [r5, #44]	; 0x2c
 80122f8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80122fa:	2d00      	cmp	r5, #0
 80122fc:	f000 8105 	beq.w	801250a <rcl_wait_set_resize+0x38a>
 8012300:	4652      	mov	r2, sl
 8012302:	4631      	mov	r1, r6
 8012304:	4628      	mov	r0, r5
 8012306:	f003 f905 	bl	8015514 <memset>
 801230a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801230e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012310:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8012314:	2500      	movs	r5, #0
 8012316:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801231a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801231c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8012320:	2b00      	cmp	r3, #0
 8012322:	f040 80af 	bne.w	8012484 <rcl_wait_set_resize+0x304>
 8012326:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012328:	b128      	cbz	r0, 8012336 <rcl_wait_set_resize+0x1b6>
 801232a:	4631      	mov	r1, r6
 801232c:	47b8      	blx	r7
 801232e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012330:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012334:	62a3      	str	r3, [r4, #40]	; 0x28
 8012336:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801233a:	b310      	cbz	r0, 8012382 <rcl_wait_set_resize+0x202>
 801233c:	4631      	mov	r1, r6
 801233e:	47b8      	blx	r7
 8012340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012342:	2000      	movs	r0, #0
 8012344:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8012348:	b003      	add	sp, #12
 801234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234e:	6800      	ldr	r0, [r0, #0]
 8012350:	b120      	cbz	r0, 801235c <rcl_wait_set_resize+0x1dc>
 8012352:	4649      	mov	r1, r9
 8012354:	47d8      	blx	fp
 8012356:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801235a:	6027      	str	r7, [r4, #0]
 801235c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012360:	2800      	cmp	r0, #0
 8012362:	f43f af51 	beq.w	8012208 <rcl_wait_set_resize+0x88>
 8012366:	4649      	mov	r1, r9
 8012368:	47d8      	blx	fp
 801236a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801236e:	2300      	movs	r3, #0
 8012370:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8012374:	e748      	b.n	8012208 <rcl_wait_set_resize+0x88>
 8012376:	6820      	ldr	r0, [r4, #0]
 8012378:	4649      	mov	r1, r9
 801237a:	47d8      	blx	fp
 801237c:	e9c4 7700 	strd	r7, r7, [r4]
 8012380:	200a      	movs	r0, #10
 8012382:	b003      	add	sp, #12
 8012384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012388:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801238c:	68a0      	ldr	r0, [r4, #8]
 801238e:	4642      	mov	r2, r8
 8012390:	4649      	mov	r1, r9
 8012392:	4798      	blx	r3
 8012394:	60a0      	str	r0, [r4, #8]
 8012396:	2800      	cmp	r0, #0
 8012398:	d0f2      	beq.n	8012380 <rcl_wait_set_resize+0x200>
 801239a:	4639      	mov	r1, r7
 801239c:	464a      	mov	r2, r9
 801239e:	f003 f8b9 	bl	8015514 <memset>
 80123a2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80123a6:	60e5      	str	r5, [r4, #12]
 80123a8:	2700      	movs	r7, #0
 80123aa:	19ad      	adds	r5, r5, r6
 80123ac:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80123b0:	f8ca 7010 	str.w	r7, [sl, #16]
 80123b4:	f43f af42 	beq.w	801223c <rcl_wait_set_resize+0xbc>
 80123b8:	00ad      	lsls	r5, r5, #2
 80123ba:	4642      	mov	r2, r8
 80123bc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80123c0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80123c4:	4629      	mov	r1, r5
 80123c6:	4798      	blx	r3
 80123c8:	4680      	mov	r8, r0
 80123ca:	f8ca 0014 	str.w	r0, [sl, #20]
 80123ce:	2800      	cmp	r0, #0
 80123d0:	f000 8084 	beq.w	80124dc <rcl_wait_set_resize+0x35c>
 80123d4:	462a      	mov	r2, r5
 80123d6:	4639      	mov	r1, r7
 80123d8:	f003 f89c 	bl	8015514 <memset>
 80123dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80123e0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80123e4:	e737      	b.n	8012256 <rcl_wait_set_resize+0xd6>
 80123e6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80123ea:	6920      	ldr	r0, [r4, #16]
 80123ec:	4642      	mov	r2, r8
 80123ee:	4649      	mov	r1, r9
 80123f0:	47b8      	blx	r7
 80123f2:	6120      	str	r0, [r4, #16]
 80123f4:	2800      	cmp	r0, #0
 80123f6:	d0c3      	beq.n	8012380 <rcl_wait_set_resize+0x200>
 80123f8:	464a      	mov	r2, r9
 80123fa:	4629      	mov	r1, r5
 80123fc:	f003 f88a 	bl	8015514 <memset>
 8012400:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012404:	6166      	str	r6, [r4, #20]
 8012406:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801240a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801240e:	e736      	b.n	801227e <rcl_wait_set_resize+0xfe>
 8012410:	009e      	lsls	r6, r3, #2
 8012412:	69a0      	ldr	r0, [r4, #24]
 8012414:	4631      	mov	r1, r6
 8012416:	4642      	mov	r2, r8
 8012418:	47b8      	blx	r7
 801241a:	61a0      	str	r0, [r4, #24]
 801241c:	2800      	cmp	r0, #0
 801241e:	d0af      	beq.n	8012380 <rcl_wait_set_resize+0x200>
 8012420:	4632      	mov	r2, r6
 8012422:	4629      	mov	r1, r5
 8012424:	f003 f876 	bl	8015514 <memset>
 8012428:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801242c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801242e:	61e3      	str	r3, [r4, #28]
 8012430:	f8da 0020 	ldr.w	r0, [sl, #32]
 8012434:	f8ca 501c 	str.w	r5, [sl, #28]
 8012438:	4642      	mov	r2, r8
 801243a:	4631      	mov	r1, r6
 801243c:	47b8      	blx	r7
 801243e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012440:	f8ca 0020 	str.w	r0, [sl, #32]
 8012444:	6a1f      	ldr	r7, [r3, #32]
 8012446:	2f00      	cmp	r7, #0
 8012448:	d058      	beq.n	80124fc <rcl_wait_set_resize+0x37c>
 801244a:	4632      	mov	r2, r6
 801244c:	4629      	mov	r1, r5
 801244e:	4638      	mov	r0, r7
 8012450:	f003 f860 	bl	8015514 <memset>
 8012454:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012458:	e72b      	b.n	80122b2 <rcl_wait_set_resize+0x132>
 801245a:	6a20      	ldr	r0, [r4, #32]
 801245c:	b128      	cbz	r0, 801246a <rcl_wait_set_resize+0x2ea>
 801245e:	4639      	mov	r1, r7
 8012460:	47c0      	blx	r8
 8012462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012464:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8012468:	6223      	str	r3, [r4, #32]
 801246a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 801246e:	2800      	cmp	r0, #0
 8012470:	f43f af4d 	beq.w	801230e <rcl_wait_set_resize+0x18e>
 8012474:	4639      	mov	r1, r7
 8012476:	47c0      	blx	r8
 8012478:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801247c:	2300      	movs	r3, #0
 801247e:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8012482:	e744      	b.n	801230e <rcl_wait_set_resize+0x18e>
 8012484:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8012488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801248a:	4641      	mov	r1, r8
 801248c:	4632      	mov	r2, r6
 801248e:	47c8      	blx	r9
 8012490:	62a0      	str	r0, [r4, #40]	; 0x28
 8012492:	2800      	cmp	r0, #0
 8012494:	f43f af74 	beq.w	8012380 <rcl_wait_set_resize+0x200>
 8012498:	4642      	mov	r2, r8
 801249a:	4629      	mov	r1, r5
 801249c:	f003 f83a 	bl	8015514 <memset>
 80124a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80124a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124a8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80124ac:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80124b0:	4632      	mov	r2, r6
 80124b2:	4641      	mov	r1, r8
 80124b4:	47c8      	blx	r9
 80124b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80124b8:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80124bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124be:	b35b      	cbz	r3, 8012518 <rcl_wait_set_resize+0x398>
 80124c0:	4642      	mov	r2, r8
 80124c2:	4618      	mov	r0, r3
 80124c4:	4629      	mov	r1, r5
 80124c6:	f003 f825 	bl	8015514 <memset>
 80124ca:	4628      	mov	r0, r5
 80124cc:	b003      	add	sp, #12
 80124ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d2:	200b      	movs	r0, #11
 80124d4:	4770      	bx	lr
 80124d6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80124da:	e752      	b.n	8012382 <rcl_wait_set_resize+0x202>
 80124dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80124de:	68a0      	ldr	r0, [r4, #8]
 80124e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80124e4:	4790      	blx	r2
 80124e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80124e8:	6920      	ldr	r0, [r4, #16]
 80124ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124ec:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80124ee:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80124f2:	4790      	blx	r2
 80124f4:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80124f8:	200a      	movs	r0, #10
 80124fa:	e742      	b.n	8012382 <rcl_wait_set_resize+0x202>
 80124fc:	69a0      	ldr	r0, [r4, #24]
 80124fe:	4641      	mov	r1, r8
 8012500:	47c8      	blx	r9
 8012502:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8012506:	200a      	movs	r0, #10
 8012508:	e73b      	b.n	8012382 <rcl_wait_set_resize+0x202>
 801250a:	6a20      	ldr	r0, [r4, #32]
 801250c:	4639      	mov	r1, r7
 801250e:	47c0      	blx	r8
 8012510:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8012514:	200a      	movs	r0, #10
 8012516:	e734      	b.n	8012382 <rcl_wait_set_resize+0x202>
 8012518:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	4631      	mov	r1, r6
 801251e:	47b8      	blx	r7
 8012520:	9b00      	ldr	r3, [sp, #0]
 8012522:	200a      	movs	r0, #10
 8012524:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8012528:	e72b      	b.n	8012382 <rcl_wait_set_resize+0x202>
 801252a:	bf00      	nop

0801252c <rcl_wait_set_init>:
 801252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012530:	b084      	sub	sp, #16
 8012532:	4604      	mov	r4, r0
 8012534:	a810      	add	r0, sp, #64	; 0x40
 8012536:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801253a:	460f      	mov	r7, r1
 801253c:	4690      	mov	r8, r2
 801253e:	4699      	mov	r9, r3
 8012540:	f7f9 ff78 	bl	800c434 <rcutils_allocator_is_valid>
 8012544:	2800      	cmp	r0, #0
 8012546:	d06b      	beq.n	8012620 <rcl_wait_set_init+0xf4>
 8012548:	2c00      	cmp	r4, #0
 801254a:	d069      	beq.n	8012620 <rcl_wait_set_init+0xf4>
 801254c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801254e:	b125      	cbz	r5, 801255a <rcl_wait_set_init+0x2e>
 8012550:	2564      	movs	r5, #100	; 0x64
 8012552:	4628      	mov	r0, r5
 8012554:	b004      	add	sp, #16
 8012556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801255a:	f1ba 0f00 	cmp.w	sl, #0
 801255e:	d05f      	beq.n	8012620 <rcl_wait_set_init+0xf4>
 8012560:	4650      	mov	r0, sl
 8012562:	f7fe f895 	bl	8010690 <rcl_context_is_valid>
 8012566:	2800      	cmp	r0, #0
 8012568:	d067      	beq.n	801263a <rcl_wait_set_init+0x10e>
 801256a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801256c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801256e:	205c      	movs	r0, #92	; 0x5c
 8012570:	4798      	blx	r3
 8012572:	6320      	str	r0, [r4, #48]	; 0x30
 8012574:	2800      	cmp	r0, #0
 8012576:	d062      	beq.n	801263e <rcl_wait_set_init+0x112>
 8012578:	225c      	movs	r2, #92	; 0x5c
 801257a:	4629      	mov	r1, r5
 801257c:	f002 ffca 	bl	8015514 <memset>
 8012580:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8012584:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012588:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801258a:	f8dc e000 	ldr.w	lr, [ip]
 801258e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8012592:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8012596:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801259a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801259e:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80125a2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80125a6:	60b5      	str	r5, [r6, #8]
 80125a8:	6075      	str	r5, [r6, #4]
 80125aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80125b2:	1899      	adds	r1, r3, r2
 80125b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125b6:	f8da 0000 	ldr.w	r0, [sl]
 80125ba:	f8cc e000 	str.w	lr, [ip]
 80125be:	4419      	add	r1, r3
 80125c0:	4441      	add	r1, r8
 80125c2:	3028      	adds	r0, #40	; 0x28
 80125c4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80125c8:	f001 f9b6 	bl	8013938 <rmw_create_wait_set>
 80125cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80125ce:	63f0      	str	r0, [r6, #60]	; 0x3c
 80125d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80125d2:	b350      	cbz	r0, 801262a <rcl_wait_set_init+0xfe>
 80125d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125d6:	9302      	str	r3, [sp, #8]
 80125d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125da:	9301      	str	r3, [sp, #4]
 80125dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125de:	9300      	str	r3, [sp, #0]
 80125e0:	4642      	mov	r2, r8
 80125e2:	464b      	mov	r3, r9
 80125e4:	4639      	mov	r1, r7
 80125e6:	4620      	mov	r0, r4
 80125e8:	f7ff fdca 	bl	8012180 <rcl_wait_set_resize>
 80125ec:	4605      	mov	r5, r0
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d0af      	beq.n	8012552 <rcl_wait_set_init+0x26>
 80125f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80125f4:	bb2b      	cbnz	r3, 8012642 <rcl_wait_set_init+0x116>
 80125f6:	2600      	movs	r6, #0
 80125f8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80125fc:	9600      	str	r6, [sp, #0]
 80125fe:	4633      	mov	r3, r6
 8012600:	4632      	mov	r2, r6
 8012602:	4631      	mov	r1, r6
 8012604:	4620      	mov	r0, r4
 8012606:	f7ff fdbb 	bl	8012180 <rcl_wait_set_resize>
 801260a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801260c:	2800      	cmp	r0, #0
 801260e:	d0a0      	beq.n	8012552 <rcl_wait_set_init+0x26>
 8012610:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012612:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8012614:	4798      	blx	r3
 8012616:	4628      	mov	r0, r5
 8012618:	6326      	str	r6, [r4, #48]	; 0x30
 801261a:	b004      	add	sp, #16
 801261c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012620:	250b      	movs	r5, #11
 8012622:	4628      	mov	r0, r5
 8012624:	b004      	add	sp, #16
 8012626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262a:	2501      	movs	r5, #1
 801262c:	f001 f98e 	bl	801394c <rmw_destroy_wait_set>
 8012630:	2800      	cmp	r0, #0
 8012632:	bf18      	it	ne
 8012634:	f44f 7561 	movne.w	r5, #900	; 0x384
 8012638:	e7dd      	b.n	80125f6 <rcl_wait_set_init+0xca>
 801263a:	2565      	movs	r5, #101	; 0x65
 801263c:	e789      	b.n	8012552 <rcl_wait_set_init+0x26>
 801263e:	250a      	movs	r5, #10
 8012640:	e787      	b.n	8012552 <rcl_wait_set_init+0x26>
 8012642:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012644:	e7f2      	b.n	801262c <rcl_wait_set_init+0x100>
 8012646:	bf00      	nop

08012648 <rcl_wait_set_add_guard_condition>:
 8012648:	b320      	cbz	r0, 8012694 <rcl_wait_set_add_guard_condition+0x4c>
 801264a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801264c:	b570      	push	{r4, r5, r6, lr}
 801264e:	4604      	mov	r4, r0
 8012650:	b1d3      	cbz	r3, 8012688 <rcl_wait_set_add_guard_condition+0x40>
 8012652:	b319      	cbz	r1, 801269c <rcl_wait_set_add_guard_condition+0x54>
 8012654:	68dd      	ldr	r5, [r3, #12]
 8012656:	68e0      	ldr	r0, [r4, #12]
 8012658:	4285      	cmp	r5, r0
 801265a:	d218      	bcs.n	801268e <rcl_wait_set_add_guard_condition+0x46>
 801265c:	68a0      	ldr	r0, [r4, #8]
 801265e:	1c6e      	adds	r6, r5, #1
 8012660:	60de      	str	r6, [r3, #12]
 8012662:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012666:	b102      	cbz	r2, 801266a <rcl_wait_set_add_guard_condition+0x22>
 8012668:	6015      	str	r5, [r2, #0]
 801266a:	4608      	mov	r0, r1
 801266c:	f7fe fb26 	bl	8010cbc <rcl_guard_condition_get_rmw_handle>
 8012670:	b190      	cbz	r0, 8012698 <rcl_wait_set_add_guard_condition+0x50>
 8012672:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012674:	6842      	ldr	r2, [r0, #4]
 8012676:	695b      	ldr	r3, [r3, #20]
 8012678:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801267c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801267e:	6913      	ldr	r3, [r2, #16]
 8012680:	3301      	adds	r3, #1
 8012682:	6113      	str	r3, [r2, #16]
 8012684:	2000      	movs	r0, #0
 8012686:	bd70      	pop	{r4, r5, r6, pc}
 8012688:	f44f 7061 	mov.w	r0, #900	; 0x384
 801268c:	bd70      	pop	{r4, r5, r6, pc}
 801268e:	f240 3086 	movw	r0, #902	; 0x386
 8012692:	bd70      	pop	{r4, r5, r6, pc}
 8012694:	200b      	movs	r0, #11
 8012696:	4770      	bx	lr
 8012698:	2001      	movs	r0, #1
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	200b      	movs	r0, #11
 801269e:	bd70      	pop	{r4, r5, r6, pc}

080126a0 <rcl_wait_set_add_timer>:
 80126a0:	b340      	cbz	r0, 80126f4 <rcl_wait_set_add_timer+0x54>
 80126a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80126a4:	b570      	push	{r4, r5, r6, lr}
 80126a6:	4604      	mov	r4, r0
 80126a8:	b1f3      	cbz	r3, 80126e8 <rcl_wait_set_add_timer+0x48>
 80126aa:	b329      	cbz	r1, 80126f8 <rcl_wait_set_add_timer+0x58>
 80126ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80126ae:	6965      	ldr	r5, [r4, #20]
 80126b0:	42a8      	cmp	r0, r5
 80126b2:	d21c      	bcs.n	80126ee <rcl_wait_set_add_timer+0x4e>
 80126b4:	6925      	ldr	r5, [r4, #16]
 80126b6:	1c46      	adds	r6, r0, #1
 80126b8:	641e      	str	r6, [r3, #64]	; 0x40
 80126ba:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80126be:	b102      	cbz	r2, 80126c2 <rcl_wait_set_add_timer+0x22>
 80126c0:	6010      	str	r0, [r2, #0]
 80126c2:	4608      	mov	r0, r1
 80126c4:	f7ff faa4 	bl	8011c10 <rcl_timer_get_guard_condition>
 80126c8:	b168      	cbz	r0, 80126e6 <rcl_wait_set_add_timer+0x46>
 80126ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80126cc:	68e3      	ldr	r3, [r4, #12]
 80126ce:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80126d0:	3b01      	subs	r3, #1
 80126d2:	441d      	add	r5, r3
 80126d4:	f7fe faf2 	bl	8010cbc <rcl_guard_condition_get_rmw_handle>
 80126d8:	b180      	cbz	r0, 80126fc <rcl_wait_set_add_timer+0x5c>
 80126da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80126dc:	6842      	ldr	r2, [r0, #4]
 80126de:	695b      	ldr	r3, [r3, #20]
 80126e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80126e4:	2000      	movs	r0, #0
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
 80126e8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80126ec:	bd70      	pop	{r4, r5, r6, pc}
 80126ee:	f240 3086 	movw	r0, #902	; 0x386
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
 80126f4:	200b      	movs	r0, #11
 80126f6:	4770      	bx	lr
 80126f8:	200b      	movs	r0, #11
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	2001      	movs	r0, #1
 80126fe:	bd70      	pop	{r4, r5, r6, pc}

08012700 <rcl_wait_set_add_client>:
 8012700:	b320      	cbz	r0, 801274c <rcl_wait_set_add_client+0x4c>
 8012702:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012704:	b570      	push	{r4, r5, r6, lr}
 8012706:	4604      	mov	r4, r0
 8012708:	b1d3      	cbz	r3, 8012740 <rcl_wait_set_add_client+0x40>
 801270a:	b319      	cbz	r1, 8012754 <rcl_wait_set_add_client+0x54>
 801270c:	699d      	ldr	r5, [r3, #24]
 801270e:	69e0      	ldr	r0, [r4, #28]
 8012710:	4285      	cmp	r5, r0
 8012712:	d218      	bcs.n	8012746 <rcl_wait_set_add_client+0x46>
 8012714:	69a0      	ldr	r0, [r4, #24]
 8012716:	1c6e      	adds	r6, r5, #1
 8012718:	619e      	str	r6, [r3, #24]
 801271a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801271e:	b102      	cbz	r2, 8012722 <rcl_wait_set_add_client+0x22>
 8012720:	6015      	str	r5, [r2, #0]
 8012722:	4608      	mov	r0, r1
 8012724:	f7fd ff54 	bl	80105d0 <rcl_client_get_rmw_handle>
 8012728:	b190      	cbz	r0, 8012750 <rcl_wait_set_add_client+0x50>
 801272a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801272c:	6842      	ldr	r2, [r0, #4]
 801272e:	6a1b      	ldr	r3, [r3, #32]
 8012730:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012734:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012736:	69d3      	ldr	r3, [r2, #28]
 8012738:	3301      	adds	r3, #1
 801273a:	61d3      	str	r3, [r2, #28]
 801273c:	2000      	movs	r0, #0
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012744:	bd70      	pop	{r4, r5, r6, pc}
 8012746:	f240 3086 	movw	r0, #902	; 0x386
 801274a:	bd70      	pop	{r4, r5, r6, pc}
 801274c:	200b      	movs	r0, #11
 801274e:	4770      	bx	lr
 8012750:	2001      	movs	r0, #1
 8012752:	bd70      	pop	{r4, r5, r6, pc}
 8012754:	200b      	movs	r0, #11
 8012756:	bd70      	pop	{r4, r5, r6, pc}

08012758 <rcl_wait_set_add_service>:
 8012758:	b320      	cbz	r0, 80127a4 <rcl_wait_set_add_service+0x4c>
 801275a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801275c:	b570      	push	{r4, r5, r6, lr}
 801275e:	4604      	mov	r4, r0
 8012760:	b1d3      	cbz	r3, 8012798 <rcl_wait_set_add_service+0x40>
 8012762:	b319      	cbz	r1, 80127ac <rcl_wait_set_add_service+0x54>
 8012764:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012768:	4285      	cmp	r5, r0
 801276a:	d218      	bcs.n	801279e <rcl_wait_set_add_service+0x46>
 801276c:	6a20      	ldr	r0, [r4, #32]
 801276e:	1c6e      	adds	r6, r5, #1
 8012770:	625e      	str	r6, [r3, #36]	; 0x24
 8012772:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012776:	b102      	cbz	r2, 801277a <rcl_wait_set_add_service+0x22>
 8012778:	6015      	str	r5, [r2, #0]
 801277a:	4608      	mov	r0, r1
 801277c:	f7fe fde2 	bl	8011344 <rcl_service_get_rmw_handle>
 8012780:	b190      	cbz	r0, 80127a8 <rcl_wait_set_add_service+0x50>
 8012782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012784:	6842      	ldr	r2, [r0, #4]
 8012786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012788:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801278c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801278e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012790:	3301      	adds	r3, #1
 8012792:	6293      	str	r3, [r2, #40]	; 0x28
 8012794:	2000      	movs	r0, #0
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	f44f 7061 	mov.w	r0, #900	; 0x384
 801279c:	bd70      	pop	{r4, r5, r6, pc}
 801279e:	f240 3086 	movw	r0, #902	; 0x386
 80127a2:	bd70      	pop	{r4, r5, r6, pc}
 80127a4:	200b      	movs	r0, #11
 80127a6:	4770      	bx	lr
 80127a8:	2001      	movs	r0, #1
 80127aa:	bd70      	pop	{r4, r5, r6, pc}
 80127ac:	200b      	movs	r0, #11
 80127ae:	bd70      	pop	{r4, r5, r6, pc}

080127b0 <rcl_wait>:
 80127b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b4:	b08f      	sub	sp, #60	; 0x3c
 80127b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80127ba:	2800      	cmp	r0, #0
 80127bc:	f000 814c 	beq.w	8012a58 <rcl_wait+0x2a8>
 80127c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80127c2:	4604      	mov	r4, r0
 80127c4:	2d00      	cmp	r5, #0
 80127c6:	f000 80bc 	beq.w	8012942 <rcl_wait+0x192>
 80127ca:	6843      	ldr	r3, [r0, #4]
 80127cc:	b973      	cbnz	r3, 80127ec <rcl_wait+0x3c>
 80127ce:	68e3      	ldr	r3, [r4, #12]
 80127d0:	b963      	cbnz	r3, 80127ec <rcl_wait+0x3c>
 80127d2:	6963      	ldr	r3, [r4, #20]
 80127d4:	b953      	cbnz	r3, 80127ec <rcl_wait+0x3c>
 80127d6:	69e3      	ldr	r3, [r4, #28]
 80127d8:	b943      	cbnz	r3, 80127ec <rcl_wait+0x3c>
 80127da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127dc:	b933      	cbnz	r3, 80127ec <rcl_wait+0x3c>
 80127de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80127e0:	b923      	cbnz	r3, 80127ec <rcl_wait+0x3c>
 80127e2:	f240 3085 	movw	r0, #901	; 0x385
 80127e6:	b00f      	add	sp, #60	; 0x3c
 80127e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127f0:	2a01      	cmp	r2, #1
 80127f2:	f173 0300 	sbcs.w	r3, r3, #0
 80127f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80127f8:	db56      	blt.n	80128a8 <rcl_wait+0xf8>
 80127fa:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80127fe:	2900      	cmp	r1, #0
 8012800:	f000 8149 	beq.w	8012a96 <rcl_wait+0x2e6>
 8012804:	2300      	movs	r3, #0
 8012806:	9307      	str	r3, [sp, #28]
 8012808:	469b      	mov	fp, r3
 801280a:	f04f 0800 	mov.w	r8, #0
 801280e:	f04f 0900 	mov.w	r9, #0
 8012812:	e00d      	b.n	8012830 <rcl_wait+0x80>
 8012814:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012816:	6922      	ldr	r2, [r4, #16]
 8012818:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801281a:	f842 000a 	str.w	r0, [r2, sl]
 801281e:	f118 0801 	adds.w	r8, r8, #1
 8012822:	f149 0900 	adc.w	r9, r9, #0
 8012826:	2300      	movs	r3, #0
 8012828:	4599      	cmp	r9, r3
 801282a:	bf08      	it	eq
 801282c:	4588      	cmpeq	r8, r1
 801282e:	d243      	bcs.n	80128b8 <rcl_wait+0x108>
 8012830:	6922      	ldr	r2, [r4, #16]
 8012832:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8012836:	f852 000a 	ldr.w	r0, [r2, sl]
 801283a:	2800      	cmp	r0, #0
 801283c:	d0ef      	beq.n	801281e <rcl_wait+0x6e>
 801283e:	68e2      	ldr	r2, [r4, #12]
 8012840:	6969      	ldr	r1, [r5, #20]
 8012842:	4442      	add	r2, r8
 8012844:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8012848:	b13b      	cbz	r3, 801285a <rcl_wait+0xaa>
 801284a:	692a      	ldr	r2, [r5, #16]
 801284c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012850:	6921      	ldr	r1, [r4, #16]
 8012852:	3201      	adds	r2, #1
 8012854:	f851 000a 	ldr.w	r0, [r1, sl]
 8012858:	612a      	str	r2, [r5, #16]
 801285a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801285e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8012862:	f7ff f9c3 	bl	8011bec <rcl_timer_is_canceled>
 8012866:	2800      	cmp	r0, #0
 8012868:	d1bd      	bne.n	80127e6 <rcl_wait+0x36>
 801286a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801286e:	2a00      	cmp	r2, #0
 8012870:	d1d0      	bne.n	8012814 <rcl_wait+0x64>
 8012872:	6922      	ldr	r2, [r4, #16]
 8012874:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012878:	f852 000a 	ldr.w	r0, [r2, sl]
 801287c:	a90a      	add	r1, sp, #40	; 0x28
 801287e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012882:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012886:	f7ff f98d 	bl	8011ba4 <rcl_timer_get_time_until_next_call>
 801288a:	2800      	cmp	r0, #0
 801288c:	d1ab      	bne.n	80127e6 <rcl_wait+0x36>
 801288e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012892:	42b2      	cmp	r2, r6
 8012894:	eb73 0107 	sbcs.w	r1, r3, r7
 8012898:	da03      	bge.n	80128a2 <rcl_wait+0xf2>
 801289a:	461f      	mov	r7, r3
 801289c:	2301      	movs	r3, #1
 801289e:	4616      	mov	r6, r2
 80128a0:	9307      	str	r3, [sp, #28]
 80128a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80128a4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80128a6:	e7ba      	b.n	801281e <rcl_wait+0x6e>
 80128a8:	2900      	cmp	r1, #0
 80128aa:	f000 80de 	beq.w	8012a6a <rcl_wait+0x2ba>
 80128ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80128b2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80128b6:	e7a5      	b.n	8012804 <rcl_wait+0x54>
 80128b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128bc:	4313      	orrs	r3, r2
 80128be:	d145      	bne.n	801294c <rcl_wait+0x19c>
 80128c0:	2300      	movs	r3, #0
 80128c2:	2200      	movs	r2, #0
 80128c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80128c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80128cc:	ab0a      	add	r3, sp, #40	; 0x28
 80128ce:	9302      	str	r3, [sp, #8]
 80128d0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80128d2:	9301      	str	r3, [sp, #4]
 80128d4:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80128de:	f105 031c 	add.w	r3, r5, #28
 80128e2:	f105 0110 	add.w	r1, r5, #16
 80128e6:	1d28      	adds	r0, r5, #4
 80128e8:	f000 fea6 	bl	8013638 <rmw_wait>
 80128ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80128ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128f0:	4680      	mov	r8, r0
 80128f2:	b30a      	cbz	r2, 8012938 <rcl_wait+0x188>
 80128f4:	2500      	movs	r5, #0
 80128f6:	462f      	mov	r7, r5
 80128f8:	e004      	b.n	8012904 <rcl_wait+0x154>
 80128fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80128fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128fe:	3501      	adds	r5, #1
 8012900:	42aa      	cmp	r2, r5
 8012902:	d919      	bls.n	8012938 <rcl_wait+0x188>
 8012904:	6922      	ldr	r2, [r4, #16]
 8012906:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801290a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801290e:	00ae      	lsls	r6, r5, #2
 8012910:	2800      	cmp	r0, #0
 8012912:	d0f3      	beq.n	80128fc <rcl_wait+0x14c>
 8012914:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8012918:	f7ff f90c 	bl	8011b34 <rcl_timer_is_ready>
 801291c:	2800      	cmp	r0, #0
 801291e:	f47f af62 	bne.w	80127e6 <rcl_wait+0x36>
 8012922:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8012926:	2a00      	cmp	r2, #0
 8012928:	d1e7      	bne.n	80128fa <rcl_wait+0x14a>
 801292a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801292c:	6921      	ldr	r1, [r4, #16]
 801292e:	518a      	str	r2, [r1, r6]
 8012930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012932:	3501      	adds	r5, #1
 8012934:	42aa      	cmp	r2, r5
 8012936:	d8e5      	bhi.n	8012904 <rcl_wait+0x154>
 8012938:	f038 0002 	bics.w	r0, r8, #2
 801293c:	d029      	beq.n	8012992 <rcl_wait+0x1e2>
 801293e:	2001      	movs	r0, #1
 8012940:	e751      	b.n	80127e6 <rcl_wait+0x36>
 8012942:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012946:	b00f      	add	sp, #60	; 0x3c
 8012948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012950:	2a01      	cmp	r2, #1
 8012952:	f173 0300 	sbcs.w	r3, r3, #0
 8012956:	f2c0 8083 	blt.w	8012a60 <rcl_wait+0x2b0>
 801295a:	2e00      	cmp	r6, #0
 801295c:	f177 0300 	sbcs.w	r3, r7, #0
 8012960:	bfbc      	itt	lt
 8012962:	2600      	movlt	r6, #0
 8012964:	2700      	movlt	r7, #0
 8012966:	a34e      	add	r3, pc, #312	; (adr r3, 8012aa0 <rcl_wait+0x2f0>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	4630      	mov	r0, r6
 801296e:	4639      	mov	r1, r7
 8012970:	f7ee f8d4 	bl	8000b1c <__aeabi_ldivmod>
 8012974:	a34a      	add	r3, pc, #296	; (adr r3, 8012aa0 <rcl_wait+0x2f0>)
 8012976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297a:	4680      	mov	r8, r0
 801297c:	4689      	mov	r9, r1
 801297e:	4630      	mov	r0, r6
 8012980:	4639      	mov	r1, r7
 8012982:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8012986:	f7ee f8c9 	bl	8000b1c <__aeabi_ldivmod>
 801298a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801298e:	ab0a      	add	r3, sp, #40	; 0x28
 8012990:	e79d      	b.n	80128ce <rcl_wait+0x11e>
 8012992:	6866      	ldr	r6, [r4, #4]
 8012994:	4602      	mov	r2, r0
 8012996:	b91e      	cbnz	r6, 80129a0 <rcl_wait+0x1f0>
 8012998:	e00d      	b.n	80129b6 <rcl_wait+0x206>
 801299a:	3201      	adds	r2, #1
 801299c:	42b2      	cmp	r2, r6
 801299e:	d00a      	beq.n	80129b6 <rcl_wait+0x206>
 80129a0:	6899      	ldr	r1, [r3, #8]
 80129a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80129a6:	2900      	cmp	r1, #0
 80129a8:	d1f7      	bne.n	801299a <rcl_wait+0x1ea>
 80129aa:	6825      	ldr	r5, [r4, #0]
 80129ac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80129b0:	3201      	adds	r2, #1
 80129b2:	42b2      	cmp	r2, r6
 80129b4:	d1f4      	bne.n	80129a0 <rcl_wait+0x1f0>
 80129b6:	68e6      	ldr	r6, [r4, #12]
 80129b8:	2200      	movs	r2, #0
 80129ba:	b91e      	cbnz	r6, 80129c4 <rcl_wait+0x214>
 80129bc:	e00d      	b.n	80129da <rcl_wait+0x22a>
 80129be:	3201      	adds	r2, #1
 80129c0:	42b2      	cmp	r2, r6
 80129c2:	d00a      	beq.n	80129da <rcl_wait+0x22a>
 80129c4:	6959      	ldr	r1, [r3, #20]
 80129c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80129ca:	2900      	cmp	r1, #0
 80129cc:	d1f7      	bne.n	80129be <rcl_wait+0x20e>
 80129ce:	68a5      	ldr	r5, [r4, #8]
 80129d0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80129d4:	3201      	adds	r2, #1
 80129d6:	42b2      	cmp	r2, r6
 80129d8:	d1f4      	bne.n	80129c4 <rcl_wait+0x214>
 80129da:	69e6      	ldr	r6, [r4, #28]
 80129dc:	2200      	movs	r2, #0
 80129de:	b91e      	cbnz	r6, 80129e8 <rcl_wait+0x238>
 80129e0:	e00d      	b.n	80129fe <rcl_wait+0x24e>
 80129e2:	3201      	adds	r2, #1
 80129e4:	42b2      	cmp	r2, r6
 80129e6:	d00a      	beq.n	80129fe <rcl_wait+0x24e>
 80129e8:	6a19      	ldr	r1, [r3, #32]
 80129ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80129ee:	2900      	cmp	r1, #0
 80129f0:	d1f7      	bne.n	80129e2 <rcl_wait+0x232>
 80129f2:	69a5      	ldr	r5, [r4, #24]
 80129f4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80129f8:	3201      	adds	r2, #1
 80129fa:	42b2      	cmp	r2, r6
 80129fc:	d1f4      	bne.n	80129e8 <rcl_wait+0x238>
 80129fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a00:	2200      	movs	r2, #0
 8012a02:	b91e      	cbnz	r6, 8012a0c <rcl_wait+0x25c>
 8012a04:	e00d      	b.n	8012a22 <rcl_wait+0x272>
 8012a06:	3201      	adds	r2, #1
 8012a08:	4296      	cmp	r6, r2
 8012a0a:	d00a      	beq.n	8012a22 <rcl_wait+0x272>
 8012a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012a0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012a12:	2900      	cmp	r1, #0
 8012a14:	d1f7      	bne.n	8012a06 <rcl_wait+0x256>
 8012a16:	6a25      	ldr	r5, [r4, #32]
 8012a18:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012a1c:	3201      	adds	r2, #1
 8012a1e:	4296      	cmp	r6, r2
 8012a20:	d1f4      	bne.n	8012a0c <rcl_wait+0x25c>
 8012a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a24:	2200      	movs	r2, #0
 8012a26:	b91e      	cbnz	r6, 8012a30 <rcl_wait+0x280>
 8012a28:	e00d      	b.n	8012a46 <rcl_wait+0x296>
 8012a2a:	3201      	adds	r2, #1
 8012a2c:	42b2      	cmp	r2, r6
 8012a2e:	d00a      	beq.n	8012a46 <rcl_wait+0x296>
 8012a30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012a32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012a36:	2900      	cmp	r1, #0
 8012a38:	d1f7      	bne.n	8012a2a <rcl_wait+0x27a>
 8012a3a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8012a3c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012a40:	3201      	adds	r2, #1
 8012a42:	42b2      	cmp	r2, r6
 8012a44:	d1f4      	bne.n	8012a30 <rcl_wait+0x280>
 8012a46:	f1b8 0f02 	cmp.w	r8, #2
 8012a4a:	f47f aecc 	bne.w	80127e6 <rcl_wait+0x36>
 8012a4e:	9b07      	ldr	r3, [sp, #28]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	bf08      	it	eq
 8012a54:	2002      	moveq	r0, #2
 8012a56:	e6c6      	b.n	80127e6 <rcl_wait+0x36>
 8012a58:	200b      	movs	r0, #11
 8012a5a:	b00f      	add	sp, #60	; 0x3c
 8012a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a60:	9b07      	ldr	r3, [sp, #28]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f47f af79 	bne.w	801295a <rcl_wait+0x1aa>
 8012a68:	e731      	b.n	80128ce <rcl_wait+0x11e>
 8012a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	bf08      	it	eq
 8012a72:	9107      	streq	r1, [sp, #28]
 8012a74:	f43f af24 	beq.w	80128c0 <rcl_wait+0x110>
 8012a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012a80:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012a84:	2a01      	cmp	r2, #1
 8012a86:	f173 0300 	sbcs.w	r3, r3, #0
 8012a8a:	f04f 0300 	mov.w	r3, #0
 8012a8e:	9307      	str	r3, [sp, #28]
 8012a90:	f6bf af63 	bge.w	801295a <rcl_wait+0x1aa>
 8012a94:	e71b      	b.n	80128ce <rcl_wait+0x11e>
 8012a96:	4632      	mov	r2, r6
 8012a98:	463b      	mov	r3, r7
 8012a9a:	e7f3      	b.n	8012a84 <rcl_wait+0x2d4>
 8012a9c:	f3af 8000 	nop.w
 8012aa0:	3b9aca00 	.word	0x3b9aca00
 8012aa4:	00000000 	.word	0x00000000

08012aa8 <__atomic_load_8>:
 8012aa8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012aac:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012ab0:	4b14      	ldr	r3, [pc, #80]	; (8012b04 <__atomic_load_8+0x5c>)
 8012ab2:	4a15      	ldr	r2, [pc, #84]	; (8012b08 <__atomic_load_8+0x60>)
 8012ab4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012ab8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012abc:	fb03 f301 	mul.w	r3, r3, r1
 8012ac0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8012ac4:	fba2 1203 	umull	r1, r2, r2, r3
 8012ac8:	0912      	lsrs	r2, r2, #4
 8012aca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8012ace:	b430      	push	{r4, r5}
 8012ad0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8012ad4:	4c0d      	ldr	r4, [pc, #52]	; (8012b0c <__atomic_load_8+0x64>)
 8012ad6:	1a9b      	subs	r3, r3, r2
 8012ad8:	18e1      	adds	r1, r4, r3
 8012ada:	f04f 0501 	mov.w	r5, #1
 8012ade:	e8d1 2f4f 	ldrexb	r2, [r1]
 8012ae2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8012ae6:	f1bc 0f00 	cmp.w	ip, #0
 8012aea:	d1f8      	bne.n	8012ade <__atomic_load_8+0x36>
 8012aec:	f3bf 8f5b 	dmb	ish
 8012af0:	b2d2      	uxtb	r2, r2
 8012af2:	2a00      	cmp	r2, #0
 8012af4:	d1f3      	bne.n	8012ade <__atomic_load_8+0x36>
 8012af6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012afa:	f3bf 8f5b 	dmb	ish
 8012afe:	54e2      	strb	r2, [r4, r3]
 8012b00:	bc30      	pop	{r4, r5}
 8012b02:	4770      	bx	lr
 8012b04:	27d4eb2d 	.word	0x27d4eb2d
 8012b08:	b21642c9 	.word	0xb21642c9
 8012b0c:	2000c124 	.word	0x2000c124

08012b10 <__atomic_store_8>:
 8012b10:	b4f0      	push	{r4, r5, r6, r7}
 8012b12:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8012b16:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8012b1a:	4914      	ldr	r1, [pc, #80]	; (8012b6c <__atomic_store_8+0x5c>)
 8012b1c:	4c14      	ldr	r4, [pc, #80]	; (8012b70 <__atomic_store_8+0x60>)
 8012b1e:	4e15      	ldr	r6, [pc, #84]	; (8012b74 <__atomic_store_8+0x64>)
 8012b20:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8012b24:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8012b28:	fb01 f105 	mul.w	r1, r1, r5
 8012b2c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012b30:	fba4 5401 	umull	r5, r4, r4, r1
 8012b34:	0924      	lsrs	r4, r4, #4
 8012b36:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012b3a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8012b3e:	1b09      	subs	r1, r1, r4
 8012b40:	1875      	adds	r5, r6, r1
 8012b42:	f04f 0701 	mov.w	r7, #1
 8012b46:	e8d5 4f4f 	ldrexb	r4, [r5]
 8012b4a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8012b4e:	f1bc 0f00 	cmp.w	ip, #0
 8012b52:	d1f8      	bne.n	8012b46 <__atomic_store_8+0x36>
 8012b54:	f3bf 8f5b 	dmb	ish
 8012b58:	b2e4      	uxtb	r4, r4
 8012b5a:	2c00      	cmp	r4, #0
 8012b5c:	d1f3      	bne.n	8012b46 <__atomic_store_8+0x36>
 8012b5e:	e9c0 2300 	strd	r2, r3, [r0]
 8012b62:	f3bf 8f5b 	dmb	ish
 8012b66:	5474      	strb	r4, [r6, r1]
 8012b68:	bcf0      	pop	{r4, r5, r6, r7}
 8012b6a:	4770      	bx	lr
 8012b6c:	27d4eb2d 	.word	0x27d4eb2d
 8012b70:	b21642c9 	.word	0xb21642c9
 8012b74:	2000c124 	.word	0x2000c124

08012b78 <__atomic_exchange_8>:
 8012b78:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8012b7c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8012b80:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8012b84:	4c16      	ldr	r4, [pc, #88]	; (8012be0 <__atomic_exchange_8+0x68>)
 8012b86:	4917      	ldr	r1, [pc, #92]	; (8012be4 <__atomic_exchange_8+0x6c>)
 8012b88:	4e17      	ldr	r6, [pc, #92]	; (8012be8 <__atomic_exchange_8+0x70>)
 8012b8a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8012b8e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8012b92:	fb04 f505 	mul.w	r5, r4, r5
 8012b96:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8012b9a:	fba1 4105 	umull	r4, r1, r1, r5
 8012b9e:	0909      	lsrs	r1, r1, #4
 8012ba0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8012ba4:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8012ba8:	1a6c      	subs	r4, r5, r1
 8012baa:	1931      	adds	r1, r6, r4
 8012bac:	f04f 0701 	mov.w	r7, #1
 8012bb0:	e8d1 5f4f 	ldrexb	r5, [r1]
 8012bb4:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8012bb8:	f1bc 0f00 	cmp.w	ip, #0
 8012bbc:	d1f8      	bne.n	8012bb0 <__atomic_exchange_8+0x38>
 8012bbe:	f3bf 8f5b 	dmb	ish
 8012bc2:	b2ed      	uxtb	r5, r5
 8012bc4:	2d00      	cmp	r5, #0
 8012bc6:	d1f3      	bne.n	8012bb0 <__atomic_exchange_8+0x38>
 8012bc8:	e9d0 8900 	ldrd	r8, r9, [r0]
 8012bcc:	e9c0 2300 	strd	r2, r3, [r0]
 8012bd0:	f3bf 8f5b 	dmb	ish
 8012bd4:	5535      	strb	r5, [r6, r4]
 8012bd6:	4640      	mov	r0, r8
 8012bd8:	4649      	mov	r1, r9
 8012bda:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8012bde:	4770      	bx	lr
 8012be0:	27d4eb2d 	.word	0x27d4eb2d
 8012be4:	b21642c9 	.word	0xb21642c9
 8012be8:	2000c124 	.word	0x2000c124

08012bec <rcutils_is_directory>:
 8012bec:	2000      	movs	r0, #0
 8012bee:	4770      	bx	lr

08012bf0 <rcutils_join_path>:
 8012bf0:	b082      	sub	sp, #8
 8012bf2:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	b002      	add	sp, #8
 8012bfa:	4770      	bx	lr

08012bfc <rcutils_to_native_path>:
 8012bfc:	b084      	sub	sp, #16
 8012bfe:	a801      	add	r0, sp, #4
 8012c00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012c04:	b004      	add	sp, #16
 8012c06:	2000      	movs	r0, #0
 8012c08:	4770      	bx	lr
 8012c0a:	bf00      	nop

08012c0c <rcutils_get_env>:
 8012c0c:	b168      	cbz	r0, 8012c2a <rcutils_get_env+0x1e>
 8012c0e:	b510      	push	{r4, lr}
 8012c10:	460c      	mov	r4, r1
 8012c12:	b129      	cbz	r1, 8012c20 <rcutils_get_env+0x14>
 8012c14:	f002 fbda 	bl	80153cc <getenv>
 8012c18:	b120      	cbz	r0, 8012c24 <rcutils_get_env+0x18>
 8012c1a:	6020      	str	r0, [r4, #0]
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	bd10      	pop	{r4, pc}
 8012c20:	4803      	ldr	r0, [pc, #12]	; (8012c30 <rcutils_get_env+0x24>)
 8012c22:	bd10      	pop	{r4, pc}
 8012c24:	4b03      	ldr	r3, [pc, #12]	; (8012c34 <rcutils_get_env+0x28>)
 8012c26:	6023      	str	r3, [r4, #0]
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	4803      	ldr	r0, [pc, #12]	; (8012c38 <rcutils_get_env+0x2c>)
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop
 8012c30:	080176b4 	.word	0x080176b4
 8012c34:	080172f8 	.word	0x080172f8
 8012c38:	08017698 	.word	0x08017698

08012c3c <rmw_get_zero_initialized_context>:
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	2250      	movs	r2, #80	; 0x50
 8012c40:	4604      	mov	r4, r0
 8012c42:	2100      	movs	r1, #0
 8012c44:	f002 fc66 	bl	8015514 <memset>
 8012c48:	4620      	mov	r0, r4
 8012c4a:	bd10      	pop	{r4, pc}

08012c4c <rmw_get_zero_initialized_init_options>:
 8012c4c:	b510      	push	{r4, lr}
 8012c4e:	2238      	movs	r2, #56	; 0x38
 8012c50:	4604      	mov	r4, r0
 8012c52:	2100      	movs	r1, #0
 8012c54:	f002 fc5e 	bl	8015514 <memset>
 8012c58:	f104 0010 	add.w	r0, r4, #16
 8012c5c:	f000 f806 	bl	8012c6c <rmw_get_default_security_options>
 8012c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c64:	60e3      	str	r3, [r4, #12]
 8012c66:	4620      	mov	r0, r4
 8012c68:	bd10      	pop	{r4, pc}
 8012c6a:	bf00      	nop

08012c6c <rmw_get_default_security_options>:
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	7002      	strb	r2, [r0, #0]
 8012c70:	6042      	str	r2, [r0, #4]
 8012c72:	4770      	bx	lr

08012c74 <rmw_get_zero_initialized_message_info>:
 8012c74:	b470      	push	{r4, r5, r6}
 8012c76:	4d07      	ldr	r5, [pc, #28]	; (8012c94 <rmw_get_zero_initialized_message_info+0x20>)
 8012c78:	4606      	mov	r6, r0
 8012c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c7c:	4634      	mov	r4, r6
 8012c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	bc70      	pop	{r4, r5, r6}
 8012c90:	4770      	bx	lr
 8012c92:	bf00      	nop
 8012c94:	08016fd0 	.word	0x08016fd0

08012c98 <get_memory>:
 8012c98:	4603      	mov	r3, r0
 8012c9a:	6840      	ldr	r0, [r0, #4]
 8012c9c:	b158      	cbz	r0, 8012cb6 <get_memory+0x1e>
 8012c9e:	6882      	ldr	r2, [r0, #8]
 8012ca0:	605a      	str	r2, [r3, #4]
 8012ca2:	b10a      	cbz	r2, 8012ca8 <get_memory+0x10>
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	6051      	str	r1, [r2, #4]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	6082      	str	r2, [r0, #8]
 8012cac:	b102      	cbz	r2, 8012cb0 <get_memory+0x18>
 8012cae:	6050      	str	r0, [r2, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	6042      	str	r2, [r0, #4]
 8012cb4:	6018      	str	r0, [r3, #0]
 8012cb6:	4770      	bx	lr

08012cb8 <put_memory>:
 8012cb8:	684b      	ldr	r3, [r1, #4]
 8012cba:	b10b      	cbz	r3, 8012cc0 <put_memory+0x8>
 8012cbc:	688a      	ldr	r2, [r1, #8]
 8012cbe:	609a      	str	r2, [r3, #8]
 8012cc0:	688a      	ldr	r2, [r1, #8]
 8012cc2:	b102      	cbz	r2, 8012cc6 <put_memory+0xe>
 8012cc4:	6053      	str	r3, [r2, #4]
 8012cc6:	6803      	ldr	r3, [r0, #0]
 8012cc8:	428b      	cmp	r3, r1
 8012cca:	6843      	ldr	r3, [r0, #4]
 8012ccc:	bf08      	it	eq
 8012cce:	6002      	streq	r2, [r0, #0]
 8012cd0:	608b      	str	r3, [r1, #8]
 8012cd2:	b103      	cbz	r3, 8012cd6 <put_memory+0x1e>
 8012cd4:	6059      	str	r1, [r3, #4]
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	604b      	str	r3, [r1, #4]
 8012cda:	6041      	str	r1, [r0, #4]
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop

08012ce0 <rmw_destroy_client>:
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	b128      	cbz	r0, 8012cf0 <rmw_destroy_client+0x10>
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	6800      	ldr	r0, [r0, #0]
 8012ce8:	460d      	mov	r5, r1
 8012cea:	f7fa fe81 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 8012cee:	b910      	cbnz	r0, 8012cf6 <rmw_destroy_client+0x16>
 8012cf0:	2401      	movs	r4, #1
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	bd70      	pop	{r4, r5, r6, pc}
 8012cf6:	6863      	ldr	r3, [r4, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d0f9      	beq.n	8012cf0 <rmw_destroy_client+0x10>
 8012cfc:	2d00      	cmp	r5, #0
 8012cfe:	d0f7      	beq.n	8012cf0 <rmw_destroy_client+0x10>
 8012d00:	6828      	ldr	r0, [r5, #0]
 8012d02:	f7fa fe75 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d0f2      	beq.n	8012cf0 <rmw_destroy_client+0x10>
 8012d0a:	686e      	ldr	r6, [r5, #4]
 8012d0c:	2e00      	cmp	r6, #0
 8012d0e:	d0ef      	beq.n	8012cf0 <rmw_destroy_client+0x10>
 8012d10:	6864      	ldr	r4, [r4, #4]
 8012d12:	6932      	ldr	r2, [r6, #16]
 8012d14:	6920      	ldr	r0, [r4, #16]
 8012d16:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d1e:	6819      	ldr	r1, [r3, #0]
 8012d20:	f7fb f806 	bl	800dd30 <uxr_buffer_cancel_data>
 8012d24:	4602      	mov	r2, r0
 8012d26:	6920      	ldr	r0, [r4, #16]
 8012d28:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d30:	f7fa fdde 	bl	800d8f0 <run_xrce_session>
 8012d34:	6920      	ldr	r0, [r4, #16]
 8012d36:	6932      	ldr	r2, [r6, #16]
 8012d38:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d3c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d40:	6819      	ldr	r1, [r3, #0]
 8012d42:	f7fa fe6f 	bl	800da24 <uxr_buffer_delete_entity>
 8012d46:	4602      	mov	r2, r0
 8012d48:	6920      	ldr	r0, [r4, #16]
 8012d4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d52:	f7fa fdcd 	bl	800d8f0 <run_xrce_session>
 8012d56:	2800      	cmp	r0, #0
 8012d58:	4628      	mov	r0, r5
 8012d5a:	bf14      	ite	ne
 8012d5c:	2400      	movne	r4, #0
 8012d5e:	2402      	moveq	r4, #2
 8012d60:	f7fa fcb8 	bl	800d6d4 <rmw_uxrce_fini_client_memory>
 8012d64:	e7c5      	b.n	8012cf2 <rmw_destroy_client+0x12>
 8012d66:	bf00      	nop

08012d68 <rmw_get_implementation_identifier>:
 8012d68:	4b01      	ldr	r3, [pc, #4]	; (8012d70 <rmw_get_implementation_identifier+0x8>)
 8012d6a:	6818      	ldr	r0, [r3, #0]
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop
 8012d70:	080176e8 	.word	0x080176e8

08012d74 <rmw_create_guard_condition>:
 8012d74:	b538      	push	{r3, r4, r5, lr}
 8012d76:	4605      	mov	r5, r0
 8012d78:	4807      	ldr	r0, [pc, #28]	; (8012d98 <rmw_create_guard_condition+0x24>)
 8012d7a:	f7ff ff8d 	bl	8012c98 <get_memory>
 8012d7e:	b148      	cbz	r0, 8012d94 <rmw_create_guard_condition+0x20>
 8012d80:	68c4      	ldr	r4, [r0, #12]
 8012d82:	2300      	movs	r3, #0
 8012d84:	61e5      	str	r5, [r4, #28]
 8012d86:	7423      	strb	r3, [r4, #16]
 8012d88:	f7ff ffee 	bl	8012d68 <rmw_get_implementation_identifier>
 8012d8c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012d90:	f104 0014 	add.w	r0, r4, #20
 8012d94:	bd38      	pop	{r3, r4, r5, pc}
 8012d96:	bf00      	nop
 8012d98:	2000f3b0 	.word	0x2000f3b0

08012d9c <rmw_destroy_guard_condition>:
 8012d9c:	b508      	push	{r3, lr}
 8012d9e:	4b08      	ldr	r3, [pc, #32]	; (8012dc0 <rmw_destroy_guard_condition+0x24>)
 8012da0:	6819      	ldr	r1, [r3, #0]
 8012da2:	b911      	cbnz	r1, 8012daa <rmw_destroy_guard_condition+0xe>
 8012da4:	e00a      	b.n	8012dbc <rmw_destroy_guard_condition+0x20>
 8012da6:	6889      	ldr	r1, [r1, #8]
 8012da8:	b141      	cbz	r1, 8012dbc <rmw_destroy_guard_condition+0x20>
 8012daa:	68cb      	ldr	r3, [r1, #12]
 8012dac:	3314      	adds	r3, #20
 8012dae:	4298      	cmp	r0, r3
 8012db0:	d1f9      	bne.n	8012da6 <rmw_destroy_guard_condition+0xa>
 8012db2:	4803      	ldr	r0, [pc, #12]	; (8012dc0 <rmw_destroy_guard_condition+0x24>)
 8012db4:	f7ff ff80 	bl	8012cb8 <put_memory>
 8012db8:	2000      	movs	r0, #0
 8012dba:	bd08      	pop	{r3, pc}
 8012dbc:	2001      	movs	r0, #1
 8012dbe:	bd08      	pop	{r3, pc}
 8012dc0:	2000f3b0 	.word	0x2000f3b0

08012dc4 <rmw_init_options_init>:
 8012dc4:	b084      	sub	sp, #16
 8012dc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dca:	ad09      	add	r5, sp, #36	; 0x24
 8012dcc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012dd0:	b130      	cbz	r0, 8012de0 <rmw_init_options_init+0x1c>
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	f7f9 fb2d 	bl	800c434 <rcutils_allocator_is_valid>
 8012dda:	b108      	cbz	r0, 8012de0 <rmw_init_options_init+0x1c>
 8012ddc:	68a3      	ldr	r3, [r4, #8]
 8012dde:	b123      	cbz	r3, 8012dea <rmw_init_options_init+0x26>
 8012de0:	200b      	movs	r0, #11
 8012de2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de6:	b004      	add	sp, #16
 8012de8:	4770      	bx	lr
 8012dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dec:	4f1c      	ldr	r7, [pc, #112]	; (8012e60 <rmw_init_options_init+0x9c>)
 8012dee:	682e      	ldr	r6, [r5, #0]
 8012df0:	683d      	ldr	r5, [r7, #0]
 8012df2:	60a5      	str	r5, [r4, #8]
 8012df4:	f04f 0800 	mov.w	r8, #0
 8012df8:	f04f 0900 	mov.w	r9, #0
 8012dfc:	f104 0520 	add.w	r5, r4, #32
 8012e00:	e9c4 8900 	strd	r8, r9, [r4]
 8012e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e06:	4b17      	ldr	r3, [pc, #92]	; (8012e64 <rmw_init_options_init+0xa0>)
 8012e08:	4817      	ldr	r0, [pc, #92]	; (8012e68 <rmw_init_options_init+0xa4>)
 8012e0a:	602e      	str	r6, [r5, #0]
 8012e0c:	4917      	ldr	r1, [pc, #92]	; (8012e6c <rmw_init_options_init+0xa8>)
 8012e0e:	61e3      	str	r3, [r4, #28]
 8012e10:	2203      	movs	r2, #3
 8012e12:	f7fa fbaf 	bl	800d574 <rmw_uxrce_init_init_options_impl_memory>
 8012e16:	4814      	ldr	r0, [pc, #80]	; (8012e68 <rmw_init_options_init+0xa4>)
 8012e18:	f7ff ff3e 	bl	8012c98 <get_memory>
 8012e1c:	b1e8      	cbz	r0, 8012e5a <rmw_init_options_init+0x96>
 8012e1e:	4a14      	ldr	r2, [pc, #80]	; (8012e70 <rmw_init_options_init+0xac>)
 8012e20:	68c3      	ldr	r3, [r0, #12]
 8012e22:	6851      	ldr	r1, [r2, #4]
 8012e24:	7810      	ldrb	r0, [r2, #0]
 8012e26:	6363      	str	r3, [r4, #52]	; 0x34
 8012e28:	7418      	strb	r0, [r3, #16]
 8012e2a:	6159      	str	r1, [r3, #20]
 8012e2c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8012e30:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8012e34:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8012e38:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8012e3c:	f7fc faa6 	bl	800f38c <uxr_nanos>
 8012e40:	f002 fcf4 	bl	801582c <srand>
 8012e44:	f002 fd20 	bl	8015888 <rand>
 8012e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e4a:	6298      	str	r0, [r3, #40]	; 0x28
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d0f9      	beq.n	8012e44 <rmw_init_options_init+0x80>
 8012e50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e54:	2000      	movs	r0, #0
 8012e56:	b004      	add	sp, #16
 8012e58:	4770      	bx	lr
 8012e5a:	2001      	movs	r0, #1
 8012e5c:	e7c1      	b.n	8012de2 <rmw_init_options_init+0x1e>
 8012e5e:	bf00      	nop
 8012e60:	080176e8 	.word	0x080176e8
 8012e64:	08017090 	.word	0x08017090
 8012e68:	2000f524 	.word	0x2000f524
 8012e6c:	2000f178 	.word	0x2000f178
 8012e70:	2000c208 	.word	0x2000c208

08012e74 <rmw_init_options_copy>:
 8012e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e76:	b158      	cbz	r0, 8012e90 <rmw_init_options_copy+0x1c>
 8012e78:	460e      	mov	r6, r1
 8012e7a:	b149      	cbz	r1, 8012e90 <rmw_init_options_copy+0x1c>
 8012e7c:	4604      	mov	r4, r0
 8012e7e:	6880      	ldr	r0, [r0, #8]
 8012e80:	b120      	cbz	r0, 8012e8c <rmw_init_options_copy+0x18>
 8012e82:	4b1b      	ldr	r3, [pc, #108]	; (8012ef0 <rmw_init_options_copy+0x7c>)
 8012e84:	6819      	ldr	r1, [r3, #0]
 8012e86:	f7ed f9c3 	bl	8000210 <strcmp>
 8012e8a:	bb60      	cbnz	r0, 8012ee6 <rmw_init_options_copy+0x72>
 8012e8c:	68b3      	ldr	r3, [r6, #8]
 8012e8e:	b113      	cbz	r3, 8012e96 <rmw_init_options_copy+0x22>
 8012e90:	230b      	movs	r3, #11
 8012e92:	4618      	mov	r0, r3
 8012e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e96:	4623      	mov	r3, r4
 8012e98:	4632      	mov	r2, r6
 8012e9a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8012e9e:	681d      	ldr	r5, [r3, #0]
 8012ea0:	6858      	ldr	r0, [r3, #4]
 8012ea2:	6899      	ldr	r1, [r3, #8]
 8012ea4:	68df      	ldr	r7, [r3, #12]
 8012ea6:	60d7      	str	r7, [r2, #12]
 8012ea8:	3310      	adds	r3, #16
 8012eaa:	4563      	cmp	r3, ip
 8012eac:	6015      	str	r5, [r2, #0]
 8012eae:	6050      	str	r0, [r2, #4]
 8012eb0:	6091      	str	r1, [r2, #8]
 8012eb2:	f102 0210 	add.w	r2, r2, #16
 8012eb6:	d1f2      	bne.n	8012e9e <rmw_init_options_copy+0x2a>
 8012eb8:	6819      	ldr	r1, [r3, #0]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	480d      	ldr	r0, [pc, #52]	; (8012ef4 <rmw_init_options_copy+0x80>)
 8012ebe:	6053      	str	r3, [r2, #4]
 8012ec0:	6011      	str	r1, [r2, #0]
 8012ec2:	f7ff fee9 	bl	8012c98 <get_memory>
 8012ec6:	b188      	cbz	r0, 8012eec <rmw_init_options_copy+0x78>
 8012ec8:	68c5      	ldr	r5, [r0, #12]
 8012eca:	6375      	str	r5, [r6, #52]	; 0x34
 8012ecc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8012ece:	3610      	adds	r6, #16
 8012ed0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012ed2:	f105 0410 	add.w	r4, r5, #16
 8012ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ed8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012edc:	2300      	movs	r3, #0
 8012ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee6:	230c      	movs	r3, #12
 8012ee8:	4618      	mov	r0, r3
 8012eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eec:	2301      	movs	r3, #1
 8012eee:	e7d0      	b.n	8012e92 <rmw_init_options_copy+0x1e>
 8012ef0:	080176e8 	.word	0x080176e8
 8012ef4:	2000f524 	.word	0x2000f524

08012ef8 <rmw_init_options_fini>:
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d036      	beq.n	8012f6a <rmw_init_options_fini+0x72>
 8012efc:	b530      	push	{r4, r5, lr}
 8012efe:	4604      	mov	r4, r0
 8012f00:	b08f      	sub	sp, #60	; 0x3c
 8012f02:	3020      	adds	r0, #32
 8012f04:	f7f9 fa96 	bl	800c434 <rcutils_allocator_is_valid>
 8012f08:	b328      	cbz	r0, 8012f56 <rmw_init_options_fini+0x5e>
 8012f0a:	68a0      	ldr	r0, [r4, #8]
 8012f0c:	b120      	cbz	r0, 8012f18 <rmw_init_options_fini+0x20>
 8012f0e:	4b18      	ldr	r3, [pc, #96]	; (8012f70 <rmw_init_options_fini+0x78>)
 8012f10:	6819      	ldr	r1, [r3, #0]
 8012f12:	f7ed f97d 	bl	8000210 <strcmp>
 8012f16:	bb30      	cbnz	r0, 8012f66 <rmw_init_options_fini+0x6e>
 8012f18:	4b16      	ldr	r3, [pc, #88]	; (8012f74 <rmw_init_options_fini+0x7c>)
 8012f1a:	6819      	ldr	r1, [r3, #0]
 8012f1c:	b1f9      	cbz	r1, 8012f5e <rmw_init_options_fini+0x66>
 8012f1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012f20:	e001      	b.n	8012f26 <rmw_init_options_fini+0x2e>
 8012f22:	6889      	ldr	r1, [r1, #8]
 8012f24:	b1d9      	cbz	r1, 8012f5e <rmw_init_options_fini+0x66>
 8012f26:	68cb      	ldr	r3, [r1, #12]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d1fa      	bne.n	8012f22 <rmw_init_options_fini+0x2a>
 8012f2c:	4811      	ldr	r0, [pc, #68]	; (8012f74 <rmw_init_options_fini+0x7c>)
 8012f2e:	f7ff fec3 	bl	8012cb8 <put_memory>
 8012f32:	466d      	mov	r5, sp
 8012f34:	4668      	mov	r0, sp
 8012f36:	f7ff fe89 	bl	8012c4c <rmw_get_zero_initialized_init_options>
 8012f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012f4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8012f4e:	2300      	movs	r3, #0
 8012f50:	4618      	mov	r0, r3
 8012f52:	b00f      	add	sp, #60	; 0x3c
 8012f54:	bd30      	pop	{r4, r5, pc}
 8012f56:	230b      	movs	r3, #11
 8012f58:	4618      	mov	r0, r3
 8012f5a:	b00f      	add	sp, #60	; 0x3c
 8012f5c:	bd30      	pop	{r4, r5, pc}
 8012f5e:	2301      	movs	r3, #1
 8012f60:	4618      	mov	r0, r3
 8012f62:	b00f      	add	sp, #60	; 0x3c
 8012f64:	bd30      	pop	{r4, r5, pc}
 8012f66:	230c      	movs	r3, #12
 8012f68:	e7f2      	b.n	8012f50 <rmw_init_options_fini+0x58>
 8012f6a:	230b      	movs	r3, #11
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	4770      	bx	lr
 8012f70:	080176e8 	.word	0x080176e8
 8012f74:	2000f524 	.word	0x2000f524

08012f78 <rmw_init>:
 8012f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f7c:	b082      	sub	sp, #8
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	f000 80d6 	beq.w	8013130 <rmw_init+0x1b8>
 8012f84:	460e      	mov	r6, r1
 8012f86:	2900      	cmp	r1, #0
 8012f88:	f000 80d2 	beq.w	8013130 <rmw_init+0x1b8>
 8012f8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012f8e:	4605      	mov	r5, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f000 80cd 	beq.w	8013130 <rmw_init+0x1b8>
 8012f96:	4b79      	ldr	r3, [pc, #484]	; (801317c <rmw_init+0x204>)
 8012f98:	6880      	ldr	r0, [r0, #8]
 8012f9a:	f8d3 9000 	ldr.w	r9, [r3]
 8012f9e:	b128      	cbz	r0, 8012fac <rmw_init+0x34>
 8012fa0:	4649      	mov	r1, r9
 8012fa2:	f7ed f935 	bl	8000210 <strcmp>
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	f040 80cc 	bne.w	8013144 <rmw_init+0x1cc>
 8012fac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012fb0:	68eb      	ldr	r3, [r5, #12]
 8012fb2:	61f3      	str	r3, [r6, #28]
 8012fb4:	e9c6 0100 	strd	r0, r1, [r6]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	4971      	ldr	r1, [pc, #452]	; (8013180 <rmw_init+0x208>)
 8012fbc:	4871      	ldr	r0, [pc, #452]	; (8013184 <rmw_init+0x20c>)
 8012fbe:	f8c6 9008 	str.w	r9, [r6, #8]
 8012fc2:	f7fa fa7f 	bl	800d4c4 <rmw_uxrce_init_session_memory>
 8012fc6:	4870      	ldr	r0, [pc, #448]	; (8013188 <rmw_init+0x210>)
 8012fc8:	4970      	ldr	r1, [pc, #448]	; (801318c <rmw_init+0x214>)
 8012fca:	2204      	movs	r2, #4
 8012fcc:	f7fa fab4 	bl	800d538 <rmw_uxrce_init_static_input_buffer_memory>
 8012fd0:	486c      	ldr	r0, [pc, #432]	; (8013184 <rmw_init+0x20c>)
 8012fd2:	f7ff fe61 	bl	8012c98 <get_memory>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f000 80af 	beq.w	801313a <rmw_init+0x1c2>
 8012fdc:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8012fde:	68c4      	ldr	r4, [r0, #12]
 8012fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fe2:	7c39      	ldrb	r1, [r7, #16]
 8012fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012fe8:	9001      	str	r0, [sp, #4]
 8012fea:	6a38      	ldr	r0, [r7, #32]
 8012fec:	9000      	str	r0, [sp, #0]
 8012fee:	f104 0a10 	add.w	sl, r4, #16
 8012ff2:	4650      	mov	r0, sl
 8012ff4:	f000 fee4 	bl	8013dc0 <uxr_set_custom_transport_callbacks>
 8012ff8:	f241 5294 	movw	r2, #5524	; 0x1594
 8012ffc:	f241 5398 	movw	r3, #5528	; 0x1598
 8013000:	f04f 0800 	mov.w	r8, #0
 8013004:	f241 509c 	movw	r0, #5532	; 0x159c
 8013008:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 801300c:	f844 8002 	str.w	r8, [r4, r2]
 8013010:	f844 8003 	str.w	r8, [r4, r3]
 8013014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013018:	f504 735e 	add.w	r3, r4, #888	; 0x378
 801301c:	f844 8000 	str.w	r8, [r4, r0]
 8013020:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8013024:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8013028:	4859      	ldr	r0, [pc, #356]	; (8013190 <rmw_init+0x218>)
 801302a:	f8c1 8000 	str.w	r8, [r1]
 801302e:	2201      	movs	r2, #1
 8013030:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8013034:	4957      	ldr	r1, [pc, #348]	; (8013194 <rmw_init+0x21c>)
 8013036:	64b4      	str	r4, [r6, #72]	; 0x48
 8013038:	f7fa fa2a 	bl	800d490 <rmw_uxrce_init_node_memory>
 801303c:	4956      	ldr	r1, [pc, #344]	; (8013198 <rmw_init+0x220>)
 801303e:	4857      	ldr	r0, [pc, #348]	; (801319c <rmw_init+0x224>)
 8013040:	2205      	movs	r2, #5
 8013042:	f7fa fa0b 	bl	800d45c <rmw_uxrce_init_subscription_memory>
 8013046:	4956      	ldr	r1, [pc, #344]	; (80131a0 <rmw_init+0x228>)
 8013048:	4856      	ldr	r0, [pc, #344]	; (80131a4 <rmw_init+0x22c>)
 801304a:	220a      	movs	r2, #10
 801304c:	f7fa f9ec 	bl	800d428 <rmw_uxrce_init_publisher_memory>
 8013050:	4955      	ldr	r1, [pc, #340]	; (80131a8 <rmw_init+0x230>)
 8013052:	4856      	ldr	r0, [pc, #344]	; (80131ac <rmw_init+0x234>)
 8013054:	2201      	movs	r2, #1
 8013056:	f7fa f9b3 	bl	800d3c0 <rmw_uxrce_init_service_memory>
 801305a:	4955      	ldr	r1, [pc, #340]	; (80131b0 <rmw_init+0x238>)
 801305c:	4855      	ldr	r0, [pc, #340]	; (80131b4 <rmw_init+0x23c>)
 801305e:	2201      	movs	r2, #1
 8013060:	f7fa f9c8 	bl	800d3f4 <rmw_uxrce_init_client_memory>
 8013064:	4954      	ldr	r1, [pc, #336]	; (80131b8 <rmw_init+0x240>)
 8013066:	4855      	ldr	r0, [pc, #340]	; (80131bc <rmw_init+0x244>)
 8013068:	220f      	movs	r2, #15
 801306a:	f7fa fa49 	bl	800d500 <rmw_uxrce_init_topic_memory>
 801306e:	4954      	ldr	r1, [pc, #336]	; (80131c0 <rmw_init+0x248>)
 8013070:	4854      	ldr	r0, [pc, #336]	; (80131c4 <rmw_init+0x24c>)
 8013072:	2203      	movs	r2, #3
 8013074:	f7fa fa7e 	bl	800d574 <rmw_uxrce_init_init_options_impl_memory>
 8013078:	4953      	ldr	r1, [pc, #332]	; (80131c8 <rmw_init+0x250>)
 801307a:	4854      	ldr	r0, [pc, #336]	; (80131cc <rmw_init+0x254>)
 801307c:	2204      	movs	r2, #4
 801307e:	f7fa fa93 	bl	800d5a8 <rmw_uxrce_init_wait_set_memory>
 8013082:	4953      	ldr	r1, [pc, #332]	; (80131d0 <rmw_init+0x258>)
 8013084:	4853      	ldr	r0, [pc, #332]	; (80131d4 <rmw_init+0x25c>)
 8013086:	2204      	movs	r2, #4
 8013088:	f7fa faaa 	bl	800d5e0 <rmw_uxrce_init_guard_condition_memory>
 801308c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801308e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8013090:	4642      	mov	r2, r8
 8013092:	f000 fab9 	bl	8013608 <rmw_uxrce_transport_init>
 8013096:	4607      	mov	r7, r0
 8013098:	2800      	cmp	r0, #0
 801309a:	d158      	bne.n	801314e <rmw_init+0x1d6>
 801309c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801309e:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80130a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80130a4:	4628      	mov	r0, r5
 80130a6:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80130aa:	f7fa ffbb 	bl	800e024 <uxr_init_session>
 80130ae:	494a      	ldr	r1, [pc, #296]	; (80131d8 <rmw_init+0x260>)
 80130b0:	4622      	mov	r2, r4
 80130b2:	4628      	mov	r0, r5
 80130b4:	f7fa ffd8 	bl	800e068 <uxr_set_topic_callback>
 80130b8:	4948      	ldr	r1, [pc, #288]	; (80131dc <rmw_init+0x264>)
 80130ba:	463a      	mov	r2, r7
 80130bc:	4628      	mov	r0, r5
 80130be:	f7fa ffcf 	bl	800e060 <uxr_set_status_callback>
 80130c2:	4947      	ldr	r1, [pc, #284]	; (80131e0 <rmw_init+0x268>)
 80130c4:	463a      	mov	r2, r7
 80130c6:	4628      	mov	r0, r5
 80130c8:	f7fa ffd2 	bl	800e070 <uxr_set_request_callback>
 80130cc:	4945      	ldr	r1, [pc, #276]	; (80131e4 <rmw_init+0x26c>)
 80130ce:	463a      	mov	r2, r7
 80130d0:	4628      	mov	r0, r5
 80130d2:	f7fa ffd1 	bl	800e078 <uxr_set_reply_callback>
 80130d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80130da:	2304      	movs	r3, #4
 80130dc:	0092      	lsls	r2, r2, #2
 80130de:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80130e2:	4628      	mov	r0, r5
 80130e4:	f7fb f808 	bl	800e0f8 <uxr_create_input_reliable_stream>
 80130e8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80130ec:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80130f0:	0092      	lsls	r2, r2, #2
 80130f2:	2304      	movs	r3, #4
 80130f4:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80130f8:	4628      	mov	r0, r5
 80130fa:	f7fa ffd3 	bl	800e0a4 <uxr_create_output_reliable_stream>
 80130fe:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8013102:	4628      	mov	r0, r5
 8013104:	f7fa fff2 	bl	800e0ec <uxr_create_input_best_effort_stream>
 8013108:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801310c:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8013110:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013114:	4628      	mov	r0, r5
 8013116:	3114      	adds	r1, #20
 8013118:	f7fa ffb2 	bl	800e080 <uxr_create_output_best_effort_stream>
 801311c:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8013120:	4628      	mov	r0, r5
 8013122:	f7fb fc43 	bl	800e9ac <uxr_create_session>
 8013126:	b1f8      	cbz	r0, 8013168 <rmw_init+0x1f0>
 8013128:	4638      	mov	r0, r7
 801312a:	b002      	add	sp, #8
 801312c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013130:	270b      	movs	r7, #11
 8013132:	4638      	mov	r0, r7
 8013134:	b002      	add	sp, #8
 8013136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801313a:	2701      	movs	r7, #1
 801313c:	4638      	mov	r0, r7
 801313e:	b002      	add	sp, #8
 8013140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013144:	270c      	movs	r7, #12
 8013146:	4638      	mov	r0, r7
 8013148:	b002      	add	sp, #8
 801314a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801314e:	4650      	mov	r0, sl
 8013150:	f000 fe76 	bl	8013e40 <uxr_close_custom_transport>
 8013154:	480b      	ldr	r0, [pc, #44]	; (8013184 <rmw_init+0x20c>)
 8013156:	4621      	mov	r1, r4
 8013158:	f7ff fdae 	bl	8012cb8 <put_memory>
 801315c:	4638      	mov	r0, r7
 801315e:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8013162:	b002      	add	sp, #8
 8013164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013168:	4650      	mov	r0, sl
 801316a:	f000 fe69 	bl	8013e40 <uxr_close_custom_transport>
 801316e:	4805      	ldr	r0, [pc, #20]	; (8013184 <rmw_init+0x20c>)
 8013170:	4621      	mov	r1, r4
 8013172:	f7ff fda1 	bl	8012cb8 <put_memory>
 8013176:	64b7      	str	r7, [r6, #72]	; 0x48
 8013178:	2701      	movs	r7, #1
 801317a:	e7d5      	b.n	8013128 <rmw_init+0x1b0>
 801317c:	080176e8 	.word	0x080176e8
 8013180:	2000f600 	.word	0x2000f600
 8013184:	2000f3d0 	.word	0x2000f3d0
 8013188:	2000c228 	.word	0x2000c228
 801318c:	2000d008 	.word	0x2000d008
 8013190:	2000f1fc 	.word	0x2000f1fc
 8013194:	2000f3e0 	.word	0x2000f3e0
 8013198:	2000cb30 	.word	0x2000cb30
 801319c:	2000f494 	.word	0x2000f494
 80131a0:	2000c248 	.word	0x2000c248
 80131a4:	2000c238 	.word	0x2000c238
 80131a8:	2000f538 	.word	0x2000f538
 80131ac:	2000f484 	.word	0x2000f484
 80131b0:	2000cf40 	.word	0x2000cf40
 80131b4:	2000cab8 	.word	0x2000cab8
 80131b8:	2000f20c 	.word	0x2000f20c
 80131bc:	2000f3c0 	.word	0x2000f3c0
 80131c0:	2000f178 	.word	0x2000f178
 80131c4:	2000f524 	.word	0x2000f524
 80131c8:	2000f108 	.word	0x2000f108
 80131cc:	20010ba8 	.word	0x20010ba8
 80131d0:	2000f4a4 	.word	0x2000f4a4
 80131d4:	2000f3b0 	.word	0x2000f3b0
 80131d8:	080151f1 	.word	0x080151f1
 80131dc:	080151e9 	.word	0x080151e9
 80131e0:	08015285 	.word	0x08015285
 80131e4:	0801531d 	.word	0x0801531d

080131e8 <rmw_context_fini>:
 80131e8:	4b17      	ldr	r3, [pc, #92]	; (8013248 <rmw_context_fini+0x60>)
 80131ea:	b570      	push	{r4, r5, r6, lr}
 80131ec:	681c      	ldr	r4, [r3, #0]
 80131ee:	4605      	mov	r5, r0
 80131f0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80131f2:	b33c      	cbz	r4, 8013244 <rmw_context_fini+0x5c>
 80131f4:	2600      	movs	r6, #0
 80131f6:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 80131fa:	691a      	ldr	r2, [r3, #16]
 80131fc:	4282      	cmp	r2, r0
 80131fe:	d018      	beq.n	8013232 <rmw_context_fini+0x4a>
 8013200:	2c00      	cmp	r4, #0
 8013202:	d1f8      	bne.n	80131f6 <rmw_context_fini+0xe>
 8013204:	b188      	cbz	r0, 801322a <rmw_context_fini+0x42>
 8013206:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801320a:	789b      	ldrb	r3, [r3, #2]
 801320c:	2b01      	cmp	r3, #1
 801320e:	bf14      	ite	ne
 8013210:	210a      	movne	r1, #10
 8013212:	2100      	moveq	r1, #0
 8013214:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013218:	f7fb fd8a 	bl	800ed30 <uxr_delete_session_retries>
 801321c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801321e:	f7fa f9f9 	bl	800d614 <rmw_uxrce_fini_session_memory>
 8013222:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8013224:	3010      	adds	r0, #16
 8013226:	f000 fe0b 	bl	8013e40 <uxr_close_custom_transport>
 801322a:	2300      	movs	r3, #0
 801322c:	4630      	mov	r0, r6
 801322e:	64ab      	str	r3, [r5, #72]	; 0x48
 8013230:	bd70      	pop	{r4, r5, r6, pc}
 8013232:	f103 0018 	add.w	r0, r3, #24
 8013236:	f7f9 fe03 	bl	800ce40 <rmw_destroy_node>
 801323a:	4606      	mov	r6, r0
 801323c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801323e:	2c00      	cmp	r4, #0
 8013240:	d1d9      	bne.n	80131f6 <rmw_context_fini+0xe>
 8013242:	e7df      	b.n	8013204 <rmw_context_fini+0x1c>
 8013244:	4626      	mov	r6, r4
 8013246:	e7dd      	b.n	8013204 <rmw_context_fini+0x1c>
 8013248:	2000f1fc 	.word	0x2000f1fc

0801324c <create_topic>:
 801324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013250:	4607      	mov	r7, r0
 8013252:	b084      	sub	sp, #16
 8013254:	4822      	ldr	r0, [pc, #136]	; (80132e0 <create_topic+0x94>)
 8013256:	4689      	mov	r9, r1
 8013258:	4690      	mov	r8, r2
 801325a:	f7ff fd1d 	bl	8012c98 <get_memory>
 801325e:	4604      	mov	r4, r0
 8013260:	2800      	cmp	r0, #0
 8013262:	d038      	beq.n	80132d6 <create_topic+0x8a>
 8013264:	693e      	ldr	r6, [r7, #16]
 8013266:	68c4      	ldr	r4, [r0, #12]
 8013268:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80132e8 <create_topic+0x9c>
 801326c:	61a7      	str	r7, [r4, #24]
 801326e:	f241 5596 	movw	r5, #5526	; 0x1596
 8013272:	f8c4 8014 	str.w	r8, [r4, #20]
 8013276:	5b70      	ldrh	r0, [r6, r5]
 8013278:	1c42      	adds	r2, r0, #1
 801327a:	5372      	strh	r2, [r6, r5]
 801327c:	2102      	movs	r1, #2
 801327e:	f7fa fd29 	bl	800dcd4 <uxr_object_id>
 8013282:	4651      	mov	r1, sl
 8013284:	6120      	str	r0, [r4, #16]
 8013286:	223c      	movs	r2, #60	; 0x3c
 8013288:	4648      	mov	r0, r9
 801328a:	f7fa fb97 	bl	800d9bc <generate_topic_name>
 801328e:	b1f0      	cbz	r0, 80132ce <create_topic+0x82>
 8013290:	4d14      	ldr	r5, [pc, #80]	; (80132e4 <create_topic+0x98>)
 8013292:	4640      	mov	r0, r8
 8013294:	4629      	mov	r1, r5
 8013296:	2264      	movs	r2, #100	; 0x64
 8013298:	f7fa fb60 	bl	800d95c <generate_type_name>
 801329c:	b1b8      	cbz	r0, 80132ce <create_topic+0x82>
 801329e:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 80132a2:	2106      	movs	r1, #6
 80132a4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80132a8:	9501      	str	r5, [sp, #4]
 80132aa:	f8cd a000 	str.w	sl, [sp]
 80132ae:	9102      	str	r1, [sp, #8]
 80132b0:	6811      	ldr	r1, [r2, #0]
 80132b2:	6922      	ldr	r2, [r4, #16]
 80132b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80132b8:	f7fa fc32 	bl	800db20 <uxr_buffer_create_topic_bin>
 80132bc:	4602      	mov	r2, r0
 80132be:	6938      	ldr	r0, [r7, #16]
 80132c0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80132c4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80132c8:	f7fa fb12 	bl	800d8f0 <run_xrce_session>
 80132cc:	b918      	cbnz	r0, 80132d6 <create_topic+0x8a>
 80132ce:	4620      	mov	r0, r4
 80132d0:	f7fa fa16 	bl	800d700 <rmw_uxrce_fini_topic_memory>
 80132d4:	2400      	movs	r4, #0
 80132d6:	4620      	mov	r0, r4
 80132d8:	b004      	add	sp, #16
 80132da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132de:	bf00      	nop
 80132e0:	2000f3c0 	.word	0x2000f3c0
 80132e4:	2000c178 	.word	0x2000c178
 80132e8:	2000c13c 	.word	0x2000c13c

080132ec <destroy_topic>:
 80132ec:	b538      	push	{r3, r4, r5, lr}
 80132ee:	6985      	ldr	r5, [r0, #24]
 80132f0:	b1d5      	cbz	r5, 8013328 <destroy_topic+0x3c>
 80132f2:	4604      	mov	r4, r0
 80132f4:	6928      	ldr	r0, [r5, #16]
 80132f6:	6922      	ldr	r2, [r4, #16]
 80132f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80132fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013300:	6819      	ldr	r1, [r3, #0]
 8013302:	f7fa fb8f 	bl	800da24 <uxr_buffer_delete_entity>
 8013306:	4602      	mov	r2, r0
 8013308:	6928      	ldr	r0, [r5, #16]
 801330a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801330e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013312:	f7fa faed 	bl	800d8f0 <run_xrce_session>
 8013316:	2800      	cmp	r0, #0
 8013318:	4620      	mov	r0, r4
 801331a:	bf14      	ite	ne
 801331c:	2400      	movne	r4, #0
 801331e:	2402      	moveq	r4, #2
 8013320:	f7fa f9ee 	bl	800d700 <rmw_uxrce_fini_topic_memory>
 8013324:	4620      	mov	r0, r4
 8013326:	bd38      	pop	{r3, r4, r5, pc}
 8013328:	2401      	movs	r4, #1
 801332a:	4620      	mov	r0, r4
 801332c:	bd38      	pop	{r3, r4, r5, pc}
 801332e:	bf00      	nop

08013330 <rmw_take_request>:
 8013330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013334:	4605      	mov	r5, r0
 8013336:	6800      	ldr	r0, [r0, #0]
 8013338:	b089      	sub	sp, #36	; 0x24
 801333a:	460c      	mov	r4, r1
 801333c:	4690      	mov	r8, r2
 801333e:	461e      	mov	r6, r3
 8013340:	b128      	cbz	r0, 801334e <rmw_take_request+0x1e>
 8013342:	4b28      	ldr	r3, [pc, #160]	; (80133e4 <rmw_take_request+0xb4>)
 8013344:	6819      	ldr	r1, [r3, #0]
 8013346:	f7ec ff63 	bl	8000210 <strcmp>
 801334a:	2800      	cmp	r0, #0
 801334c:	d146      	bne.n	80133dc <rmw_take_request+0xac>
 801334e:	b10e      	cbz	r6, 8013354 <rmw_take_request+0x24>
 8013350:	2300      	movs	r3, #0
 8013352:	7033      	strb	r3, [r6, #0]
 8013354:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013358:	f7fa fa52 	bl	800d800 <rmw_uxrce_clean_expired_static_input_buffer>
 801335c:	4648      	mov	r0, r9
 801335e:	f7fa fa27 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013362:	4607      	mov	r7, r0
 8013364:	b3b0      	cbz	r0, 80133d4 <rmw_take_request+0xa4>
 8013366:	68c5      	ldr	r5, [r0, #12]
 8013368:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801336c:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8013370:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8013374:	7423      	strb	r3, [r4, #16]
 8013376:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801337a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801337e:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8013382:	74e2      	strb	r2, [r4, #19]
 8013384:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013388:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801338c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8013390:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8013394:	61e1      	str	r1, [r4, #28]
 8013396:	6162      	str	r2, [r4, #20]
 8013398:	61a3      	str	r3, [r4, #24]
 801339a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	4798      	blx	r3
 80133a2:	6844      	ldr	r4, [r0, #4]
 80133a4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80133a8:	f105 0110 	add.w	r1, r5, #16
 80133ac:	4668      	mov	r0, sp
 80133ae:	f7f7 ffc5 	bl	800b33c <ucdr_init_buffer>
 80133b2:	68e3      	ldr	r3, [r4, #12]
 80133b4:	4641      	mov	r1, r8
 80133b6:	4668      	mov	r0, sp
 80133b8:	4798      	blx	r3
 80133ba:	4639      	mov	r1, r7
 80133bc:	4604      	mov	r4, r0
 80133be:	480a      	ldr	r0, [pc, #40]	; (80133e8 <rmw_take_request+0xb8>)
 80133c0:	f7ff fc7a 	bl	8012cb8 <put_memory>
 80133c4:	b106      	cbz	r6, 80133c8 <rmw_take_request+0x98>
 80133c6:	7034      	strb	r4, [r6, #0]
 80133c8:	f084 0001 	eor.w	r0, r4, #1
 80133cc:	b2c0      	uxtb	r0, r0
 80133ce:	b009      	add	sp, #36	; 0x24
 80133d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133d4:	2001      	movs	r0, #1
 80133d6:	b009      	add	sp, #36	; 0x24
 80133d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133dc:	200c      	movs	r0, #12
 80133de:	b009      	add	sp, #36	; 0x24
 80133e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133e4:	080176e8 	.word	0x080176e8
 80133e8:	2000c228 	.word	0x2000c228

080133ec <rmw_send_response>:
 80133ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ee:	4605      	mov	r5, r0
 80133f0:	6800      	ldr	r0, [r0, #0]
 80133f2:	b091      	sub	sp, #68	; 0x44
 80133f4:	460c      	mov	r4, r1
 80133f6:	4617      	mov	r7, r2
 80133f8:	b128      	cbz	r0, 8013406 <rmw_send_response+0x1a>
 80133fa:	4b2a      	ldr	r3, [pc, #168]	; (80134a4 <rmw_send_response+0xb8>)
 80133fc:	6819      	ldr	r1, [r3, #0]
 80133fe:	f7ec ff07 	bl	8000210 <strcmp>
 8013402:	2800      	cmp	r0, #0
 8013404:	d143      	bne.n	801348e <rmw_send_response+0xa2>
 8013406:	4623      	mov	r3, r4
 8013408:	4626      	mov	r6, r4
 801340a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 801340e:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8013412:	6859      	ldr	r1, [r3, #4]
 8013414:	686d      	ldr	r5, [r5, #4]
 8013416:	689a      	ldr	r2, [r3, #8]
 8013418:	78b3      	ldrb	r3, [r6, #2]
 801341a:	f894 c000 	ldrb.w	ip, [r4]
 801341e:	6966      	ldr	r6, [r4, #20]
 8013420:	f88d 3016 	strb.w	r3, [sp, #22]
 8013424:	ab02      	add	r3, sp, #8
 8013426:	f8ad e014 	strh.w	lr, [sp, #20]
 801342a:	f88d c017 	strb.w	ip, [sp, #23]
 801342e:	9606      	str	r6, [sp, #24]
 8013430:	c307      	stmia	r3!, {r0, r1, r2}
 8013432:	696b      	ldr	r3, [r5, #20]
 8013434:	6922      	ldr	r2, [r4, #16]
 8013436:	9207      	str	r2, [sp, #28]
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	6fae      	ldr	r6, [r5, #120]	; 0x78
 801343c:	4798      	blx	r3
 801343e:	4603      	mov	r3, r0
 8013440:	4638      	mov	r0, r7
 8013442:	685c      	ldr	r4, [r3, #4]
 8013444:	6923      	ldr	r3, [r4, #16]
 8013446:	4798      	blx	r3
 8013448:	6933      	ldr	r3, [r6, #16]
 801344a:	3018      	adds	r0, #24
 801344c:	9000      	str	r0, [sp, #0]
 801344e:	692a      	ldr	r2, [r5, #16]
 8013450:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013452:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8013456:	ab08      	add	r3, sp, #32
 8013458:	f7fc f838 	bl	800f4cc <uxr_prepare_output_stream>
 801345c:	b910      	cbnz	r0, 8013464 <rmw_send_response+0x78>
 801345e:	2001      	movs	r0, #1
 8013460:	b011      	add	sp, #68	; 0x44
 8013462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013464:	a902      	add	r1, sp, #8
 8013466:	a808      	add	r0, sp, #32
 8013468:	f7fd f862 	bl	8010530 <uxr_serialize_SampleIdentity>
 801346c:	68a3      	ldr	r3, [r4, #8]
 801346e:	a908      	add	r1, sp, #32
 8013470:	4638      	mov	r0, r7
 8013472:	4798      	blx	r3
 8013474:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013478:	6930      	ldr	r0, [r6, #16]
 801347a:	2b01      	cmp	r3, #1
 801347c:	d00a      	beq.n	8013494 <rmw_send_response+0xa8>
 801347e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013480:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013484:	f7fb fa1a 	bl	800e8bc <uxr_run_session_until_confirm_delivery>
 8013488:	2000      	movs	r0, #0
 801348a:	b011      	add	sp, #68	; 0x44
 801348c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801348e:	200c      	movs	r0, #12
 8013490:	b011      	add	sp, #68	; 0x44
 8013492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013494:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013498:	f7fa fe54 	bl	800e144 <uxr_flash_output_streams>
 801349c:	2000      	movs	r0, #0
 801349e:	b011      	add	sp, #68	; 0x44
 80134a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a2:	bf00      	nop
 80134a4:	080176e8 	.word	0x080176e8

080134a8 <rmw_take_response>:
 80134a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134ac:	4604      	mov	r4, r0
 80134ae:	6800      	ldr	r0, [r0, #0]
 80134b0:	b089      	sub	sp, #36	; 0x24
 80134b2:	4688      	mov	r8, r1
 80134b4:	4617      	mov	r7, r2
 80134b6:	461d      	mov	r5, r3
 80134b8:	b120      	cbz	r0, 80134c4 <rmw_take_response+0x1c>
 80134ba:	4b1f      	ldr	r3, [pc, #124]	; (8013538 <rmw_take_response+0x90>)
 80134bc:	6819      	ldr	r1, [r3, #0]
 80134be:	f7ec fea7 	bl	8000210 <strcmp>
 80134c2:	bb88      	cbnz	r0, 8013528 <rmw_take_response+0x80>
 80134c4:	b10d      	cbz	r5, 80134ca <rmw_take_response+0x22>
 80134c6:	2300      	movs	r3, #0
 80134c8:	702b      	strb	r3, [r5, #0]
 80134ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80134ce:	f7fa f997 	bl	800d800 <rmw_uxrce_clean_expired_static_input_buffer>
 80134d2:	4648      	mov	r0, r9
 80134d4:	f7fa f96c 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80134d8:	4606      	mov	r6, r0
 80134da:	b348      	cbz	r0, 8013530 <rmw_take_response+0x88>
 80134dc:	68c4      	ldr	r4, [r0, #12]
 80134de:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80134e2:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80134e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ea:	68c9      	ldr	r1, [r1, #12]
 80134ec:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80134f0:	4788      	blx	r1
 80134f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80134f6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80134fa:	f104 0110 	add.w	r1, r4, #16
 80134fe:	4668      	mov	r0, sp
 8013500:	f7f7 ff1c 	bl	800b33c <ucdr_init_buffer>
 8013504:	4639      	mov	r1, r7
 8013506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801350a:	4668      	mov	r0, sp
 801350c:	4798      	blx	r3
 801350e:	4631      	mov	r1, r6
 8013510:	4604      	mov	r4, r0
 8013512:	480a      	ldr	r0, [pc, #40]	; (801353c <rmw_take_response+0x94>)
 8013514:	f7ff fbd0 	bl	8012cb8 <put_memory>
 8013518:	b105      	cbz	r5, 801351c <rmw_take_response+0x74>
 801351a:	702c      	strb	r4, [r5, #0]
 801351c:	f084 0001 	eor.w	r0, r4, #1
 8013520:	b2c0      	uxtb	r0, r0
 8013522:	b009      	add	sp, #36	; 0x24
 8013524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013528:	200c      	movs	r0, #12
 801352a:	b009      	add	sp, #36	; 0x24
 801352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013530:	2001      	movs	r0, #1
 8013532:	b009      	add	sp, #36	; 0x24
 8013534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013538:	080176e8 	.word	0x080176e8
 801353c:	2000c228 	.word	0x2000c228

08013540 <rmw_take_with_info>:
 8013540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013542:	4604      	mov	r4, r0
 8013544:	6800      	ldr	r0, [r0, #0]
 8013546:	b089      	sub	sp, #36	; 0x24
 8013548:	460f      	mov	r7, r1
 801354a:	4615      	mov	r5, r2
 801354c:	b128      	cbz	r0, 801355a <rmw_take_with_info+0x1a>
 801354e:	4b24      	ldr	r3, [pc, #144]	; (80135e0 <rmw_take_with_info+0xa0>)
 8013550:	6819      	ldr	r1, [r3, #0]
 8013552:	f7ec fe5d 	bl	8000210 <strcmp>
 8013556:	2800      	cmp	r0, #0
 8013558:	d13e      	bne.n	80135d8 <rmw_take_with_info+0x98>
 801355a:	b305      	cbz	r5, 801359e <rmw_take_with_info+0x5e>
 801355c:	6864      	ldr	r4, [r4, #4]
 801355e:	2300      	movs	r3, #0
 8013560:	702b      	strb	r3, [r5, #0]
 8013562:	f7fa f94d 	bl	800d800 <rmw_uxrce_clean_expired_static_input_buffer>
 8013566:	4620      	mov	r0, r4
 8013568:	f7fa f922 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801356c:	4606      	mov	r6, r0
 801356e:	b1f0      	cbz	r0, 80135ae <rmw_take_with_info+0x6e>
 8013570:	68c1      	ldr	r1, [r0, #12]
 8013572:	4668      	mov	r0, sp
 8013574:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013578:	3110      	adds	r1, #16
 801357a:	f7f7 fedf 	bl	800b33c <ucdr_init_buffer>
 801357e:	69a3      	ldr	r3, [r4, #24]
 8013580:	4639      	mov	r1, r7
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	4668      	mov	r0, sp
 8013586:	4798      	blx	r3
 8013588:	4631      	mov	r1, r6
 801358a:	4604      	mov	r4, r0
 801358c:	4815      	ldr	r0, [pc, #84]	; (80135e4 <rmw_take_with_info+0xa4>)
 801358e:	f7ff fb93 	bl	8012cb8 <put_memory>
 8013592:	702c      	strb	r4, [r5, #0]
 8013594:	f084 0001 	eor.w	r0, r4, #1
 8013598:	b2c0      	uxtb	r0, r0
 801359a:	b009      	add	sp, #36	; 0x24
 801359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801359e:	6864      	ldr	r4, [r4, #4]
 80135a0:	f7fa f92e 	bl	800d800 <rmw_uxrce_clean_expired_static_input_buffer>
 80135a4:	4620      	mov	r0, r4
 80135a6:	f7fa f903 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80135aa:	4605      	mov	r5, r0
 80135ac:	b910      	cbnz	r0, 80135b4 <rmw_take_with_info+0x74>
 80135ae:	2001      	movs	r0, #1
 80135b0:	b009      	add	sp, #36	; 0x24
 80135b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135b4:	68e9      	ldr	r1, [r5, #12]
 80135b6:	4668      	mov	r0, sp
 80135b8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80135bc:	3110      	adds	r1, #16
 80135be:	f7f7 febd 	bl	800b33c <ucdr_init_buffer>
 80135c2:	69a3      	ldr	r3, [r4, #24]
 80135c4:	4639      	mov	r1, r7
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	4668      	mov	r0, sp
 80135ca:	4798      	blx	r3
 80135cc:	4629      	mov	r1, r5
 80135ce:	4604      	mov	r4, r0
 80135d0:	4804      	ldr	r0, [pc, #16]	; (80135e4 <rmw_take_with_info+0xa4>)
 80135d2:	f7ff fb71 	bl	8012cb8 <put_memory>
 80135d6:	e7dd      	b.n	8013594 <rmw_take_with_info+0x54>
 80135d8:	200c      	movs	r0, #12
 80135da:	b009      	add	sp, #36	; 0x24
 80135dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135de:	bf00      	nop
 80135e0:	080176e8 	.word	0x080176e8
 80135e4:	2000c228 	.word	0x2000c228

080135e8 <rmw_trigger_guard_condition>:
 80135e8:	b160      	cbz	r0, 8013604 <rmw_trigger_guard_condition+0x1c>
 80135ea:	b510      	push	{r4, lr}
 80135ec:	4604      	mov	r4, r0
 80135ee:	6800      	ldr	r0, [r0, #0]
 80135f0:	f7fa f9fe 	bl	800d9f0 <is_uxrce_rmw_identifier_valid>
 80135f4:	b908      	cbnz	r0, 80135fa <rmw_trigger_guard_condition+0x12>
 80135f6:	2001      	movs	r0, #1
 80135f8:	bd10      	pop	{r4, pc}
 80135fa:	6863      	ldr	r3, [r4, #4]
 80135fc:	2201      	movs	r2, #1
 80135fe:	741a      	strb	r2, [r3, #16]
 8013600:	2000      	movs	r0, #0
 8013602:	bd10      	pop	{r4, pc}
 8013604:	2001      	movs	r0, #1
 8013606:	4770      	bx	lr

08013608 <rmw_uxrce_transport_init>:
 8013608:	b508      	push	{r3, lr}
 801360a:	b108      	cbz	r0, 8013610 <rmw_uxrce_transport_init+0x8>
 801360c:	f100 0210 	add.w	r2, r0, #16
 8013610:	b139      	cbz	r1, 8013622 <rmw_uxrce_transport_init+0x1a>
 8013612:	6949      	ldr	r1, [r1, #20]
 8013614:	4610      	mov	r0, r2
 8013616:	f000 fbdf 	bl	8013dd8 <uxr_init_custom_transport>
 801361a:	f080 0001 	eor.w	r0, r0, #1
 801361e:	b2c0      	uxtb	r0, r0
 8013620:	bd08      	pop	{r3, pc}
 8013622:	4b04      	ldr	r3, [pc, #16]	; (8013634 <rmw_uxrce_transport_init+0x2c>)
 8013624:	4610      	mov	r0, r2
 8013626:	6859      	ldr	r1, [r3, #4]
 8013628:	f000 fbd6 	bl	8013dd8 <uxr_init_custom_transport>
 801362c:	f080 0001 	eor.w	r0, r0, #1
 8013630:	b2c0      	uxtb	r0, r0
 8013632:	bd08      	pop	{r3, pc}
 8013634:	2000c208 	.word	0x2000c208

08013638 <rmw_wait>:
 8013638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801363c:	460f      	mov	r7, r1
 801363e:	4606      	mov	r6, r0
 8013640:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013642:	469a      	mov	sl, r3
 8013644:	4615      	mov	r5, r2
 8013646:	2a00      	cmp	r2, #0
 8013648:	f000 8122 	beq.w	8013890 <rmw_wait+0x258>
 801364c:	2900      	cmp	r1, #0
 801364e:	f000 812a 	beq.w	80138a6 <rmw_wait+0x26e>
 8013652:	e9d1 2300 	ldrd	r2, r3, [r1]
 8013656:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 801365a:	015c      	lsls	r4, r3, #5
 801365c:	ebbb 0b02 	subs.w	fp, fp, r2
 8013660:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8013664:	eb64 0403 	sbc.w	r4, r4, r3
 8013668:	ea4f 008b 	mov.w	r0, fp, lsl #2
 801366c:	00a4      	lsls	r4, r4, #2
 801366e:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8013672:	eb10 0b02 	adds.w	fp, r0, r2
 8013676:	eb43 0404 	adc.w	r4, r3, r4
 801367a:	4aad      	ldr	r2, [pc, #692]	; (8013930 <rmw_wait+0x2f8>)
 801367c:	2300      	movs	r3, #0
 801367e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8013682:	f7ed fa9b 	bl	8000bbc <__aeabi_uldivmod>
 8013686:	00e4      	lsls	r4, r4, #3
 8013688:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 801368c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013690:	eb1b 0800 	adds.w	r8, fp, r0
 8013694:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8013698:	eb44 0901 	adc.w	r9, r4, r1
 801369c:	2300      	movs	r3, #0
 801369e:	4542      	cmp	r2, r8
 80136a0:	eb73 0109 	sbcs.w	r1, r3, r9
 80136a4:	f2c0 80f2 	blt.w	801388c <rmw_wait+0x254>
 80136a8:	f7fa f8aa 	bl	800d800 <rmw_uxrce_clean_expired_static_input_buffer>
 80136ac:	4ba1      	ldr	r3, [pc, #644]	; (8013934 <rmw_wait+0x2fc>)
 80136ae:	681c      	ldr	r4, [r3, #0]
 80136b0:	b144      	cbz	r4, 80136c4 <rmw_wait+0x8c>
 80136b2:	4623      	mov	r3, r4
 80136b4:	f241 50a4 	movw	r0, #5540	; 0x15a4
 80136b8:	2100      	movs	r1, #0
 80136ba:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80136be:	5411      	strb	r1, [r2, r0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d1fa      	bne.n	80136ba <rmw_wait+0x82>
 80136c4:	b185      	cbz	r5, 80136e8 <rmw_wait+0xb0>
 80136c6:	6829      	ldr	r1, [r5, #0]
 80136c8:	b171      	cbz	r1, 80136e8 <rmw_wait+0xb0>
 80136ca:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80136ce:	2300      	movs	r3, #0
 80136d0:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80136d4:	2001      	movs	r0, #1
 80136d6:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80136da:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80136dc:	3301      	adds	r3, #1
 80136de:	6912      	ldr	r2, [r2, #16]
 80136e0:	4299      	cmp	r1, r3
 80136e2:	f802 000c 	strb.w	r0, [r2, ip]
 80136e6:	d1f6      	bne.n	80136d6 <rmw_wait+0x9e>
 80136e8:	f1ba 0f00 	cmp.w	sl, #0
 80136ec:	d011      	beq.n	8013712 <rmw_wait+0xda>
 80136ee:	f8da 1000 	ldr.w	r1, [sl]
 80136f2:	b171      	cbz	r1, 8013712 <rmw_wait+0xda>
 80136f4:	f8da e004 	ldr.w	lr, [sl, #4]
 80136f8:	2300      	movs	r3, #0
 80136fa:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80136fe:	2001      	movs	r0, #1
 8013700:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8013704:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013706:	3301      	adds	r3, #1
 8013708:	6912      	ldr	r2, [r2, #16]
 801370a:	4299      	cmp	r1, r3
 801370c:	f802 000c 	strb.w	r0, [r2, ip]
 8013710:	d1f6      	bne.n	8013700 <rmw_wait+0xc8>
 8013712:	b186      	cbz	r6, 8013736 <rmw_wait+0xfe>
 8013714:	6831      	ldr	r1, [r6, #0]
 8013716:	b171      	cbz	r1, 8013736 <rmw_wait+0xfe>
 8013718:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801371c:	2300      	movs	r3, #0
 801371e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8013722:	2001      	movs	r0, #1
 8013724:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8013728:	6a12      	ldr	r2, [r2, #32]
 801372a:	3301      	adds	r3, #1
 801372c:	6912      	ldr	r2, [r2, #16]
 801372e:	4299      	cmp	r1, r3
 8013730:	f802 000c 	strb.w	r0, [r2, ip]
 8013734:	d1f6      	bne.n	8013724 <rmw_wait+0xec>
 8013736:	b34c      	cbz	r4, 801378c <rmw_wait+0x154>
 8013738:	4622      	mov	r2, r4
 801373a:	2300      	movs	r3, #0
 801373c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8013740:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8013744:	5c09      	ldrb	r1, [r1, r0]
 8013746:	440b      	add	r3, r1
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2a00      	cmp	r2, #0
 801374c:	d1f8      	bne.n	8013740 <rmw_wait+0x108>
 801374e:	2b00      	cmp	r3, #0
 8013750:	f000 8082 	beq.w	8013858 <rmw_wait+0x220>
 8013754:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8013758:	d00d      	beq.n	8013776 <rmw_wait+0x13e>
 801375a:	ee07 8a90 	vmov	s15, r8
 801375e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013762:	ee07 3a90 	vmov	s15, r3
 8013766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801376e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013772:	ee17 8a90 	vmov	r8, s15
 8013776:	f241 59a4 	movw	r9, #5540	; 0x15a4
 801377a:	68e0      	ldr	r0, [r4, #12]
 801377c:	f810 3009 	ldrb.w	r3, [r0, r9]
 8013780:	2b00      	cmp	r3, #0
 8013782:	f040 8093 	bne.w	80138ac <rmw_wait+0x274>
 8013786:	68a4      	ldr	r4, [r4, #8]
 8013788:	2c00      	cmp	r4, #0
 801378a:	d1f6      	bne.n	801377a <rmw_wait+0x142>
 801378c:	2d00      	cmp	r5, #0
 801378e:	f000 80ac 	beq.w	80138ea <rmw_wait+0x2b2>
 8013792:	682b      	ldr	r3, [r5, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	f000 8093 	beq.w	80138c0 <rmw_wait+0x288>
 801379a:	2400      	movs	r4, #0
 801379c:	46a0      	mov	r8, r4
 801379e:	686b      	ldr	r3, [r5, #4]
 80137a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137a4:	f7fa f804 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137a8:	2800      	cmp	r0, #0
 80137aa:	d05f      	beq.n	801386c <rmw_wait+0x234>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	3401      	adds	r4, #1
 80137b0:	42a3      	cmp	r3, r4
 80137b2:	f04f 0801 	mov.w	r8, #1
 80137b6:	d8f2      	bhi.n	801379e <rmw_wait+0x166>
 80137b8:	f1ba 0f00 	cmp.w	sl, #0
 80137bc:	d012      	beq.n	80137e4 <rmw_wait+0x1ac>
 80137be:	f8da 3000 	ldr.w	r3, [sl]
 80137c2:	b17b      	cbz	r3, 80137e4 <rmw_wait+0x1ac>
 80137c4:	2400      	movs	r4, #0
 80137c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80137ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137ce:	f7f9 ffef 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d052      	beq.n	801387c <rmw_wait+0x244>
 80137d6:	f8da 3000 	ldr.w	r3, [sl]
 80137da:	3401      	adds	r4, #1
 80137dc:	42a3      	cmp	r3, r4
 80137de:	f04f 0801 	mov.w	r8, #1
 80137e2:	d8f0      	bhi.n	80137c6 <rmw_wait+0x18e>
 80137e4:	b1e6      	cbz	r6, 8013820 <rmw_wait+0x1e8>
 80137e6:	6833      	ldr	r3, [r6, #0]
 80137e8:	b1d3      	cbz	r3, 8013820 <rmw_wait+0x1e8>
 80137ea:	2400      	movs	r4, #0
 80137ec:	6873      	ldr	r3, [r6, #4]
 80137ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137f2:	f7f9 ffdd 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137f6:	b160      	cbz	r0, 8013812 <rmw_wait+0x1da>
 80137f8:	6833      	ldr	r3, [r6, #0]
 80137fa:	3401      	adds	r4, #1
 80137fc:	42a3      	cmp	r3, r4
 80137fe:	d96c      	bls.n	80138da <rmw_wait+0x2a2>
 8013800:	6873      	ldr	r3, [r6, #4]
 8013802:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013806:	f04f 0801 	mov.w	r8, #1
 801380a:	f7f9 ffd1 	bl	800d7b0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801380e:	2800      	cmp	r0, #0
 8013810:	d1f2      	bne.n	80137f8 <rmw_wait+0x1c0>
 8013812:	e9d6 3200 	ldrd	r3, r2, [r6]
 8013816:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801381a:	3401      	adds	r4, #1
 801381c:	42a3      	cmp	r3, r4
 801381e:	d8e5      	bhi.n	80137ec <rmw_wait+0x1b4>
 8013820:	b1a7      	cbz	r7, 801384c <rmw_wait+0x214>
 8013822:	683c      	ldr	r4, [r7, #0]
 8013824:	b194      	cbz	r4, 801384c <rmw_wait+0x214>
 8013826:	2300      	movs	r3, #0
 8013828:	461d      	mov	r5, r3
 801382a:	e004      	b.n	8013836 <rmw_wait+0x1fe>
 801382c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013830:	3301      	adds	r3, #1
 8013832:	42a3      	cmp	r3, r4
 8013834:	d00a      	beq.n	801384c <rmw_wait+0x214>
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801383c:	7c0a      	ldrb	r2, [r1, #16]
 801383e:	2a00      	cmp	r2, #0
 8013840:	d0f4      	beq.n	801382c <rmw_wait+0x1f4>
 8013842:	3301      	adds	r3, #1
 8013844:	42a3      	cmp	r3, r4
 8013846:	740d      	strb	r5, [r1, #16]
 8013848:	4690      	mov	r8, r2
 801384a:	d1f4      	bne.n	8013836 <rmw_wait+0x1fe>
 801384c:	f1b8 0f00 	cmp.w	r8, #0
 8013850:	d040      	beq.n	80138d4 <rmw_wait+0x29c>
 8013852:	2000      	movs	r0, #0
 8013854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013858:	68e0      	ldr	r0, [r4, #12]
 801385a:	2100      	movs	r1, #0
 801385c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013860:	f7fa fff2 	bl	800e848 <uxr_run_session_timeout>
 8013864:	68a4      	ldr	r4, [r4, #8]
 8013866:	2c00      	cmp	r4, #0
 8013868:	d1f6      	bne.n	8013858 <rmw_wait+0x220>
 801386a:	e78f      	b.n	801378c <rmw_wait+0x154>
 801386c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013870:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013874:	3401      	adds	r4, #1
 8013876:	42a3      	cmp	r3, r4
 8013878:	d891      	bhi.n	801379e <rmw_wait+0x166>
 801387a:	e79d      	b.n	80137b8 <rmw_wait+0x180>
 801387c:	e9da 3200 	ldrd	r3, r2, [sl]
 8013880:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013884:	3401      	adds	r4, #1
 8013886:	429c      	cmp	r4, r3
 8013888:	d39d      	bcc.n	80137c6 <rmw_wait+0x18e>
 801388a:	e7ab      	b.n	80137e4 <rmw_wait+0x1ac>
 801388c:	4690      	mov	r8, r2
 801388e:	e70b      	b.n	80136a8 <rmw_wait+0x70>
 8013890:	2b00      	cmp	r3, #0
 8013892:	f47f aedb 	bne.w	801364c <rmw_wait+0x14>
 8013896:	2800      	cmp	r0, #0
 8013898:	f47f aed8 	bne.w	801364c <rmw_wait+0x14>
 801389c:	2f00      	cmp	r7, #0
 801389e:	d0d8      	beq.n	8013852 <rmw_wait+0x21a>
 80138a0:	2900      	cmp	r1, #0
 80138a2:	f47f aed6 	bne.w	8013652 <rmw_wait+0x1a>
 80138a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80138aa:	e6fd      	b.n	80136a8 <rmw_wait+0x70>
 80138ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80138b0:	4641      	mov	r1, r8
 80138b2:	f7fa ffe3 	bl	800e87c <uxr_run_session_until_data>
 80138b6:	68a4      	ldr	r4, [r4, #8]
 80138b8:	2c00      	cmp	r4, #0
 80138ba:	f47f af5e 	bne.w	801377a <rmw_wait+0x142>
 80138be:	e765      	b.n	801378c <rmw_wait+0x154>
 80138c0:	f1ba 0f00 	cmp.w	sl, #0
 80138c4:	d11e      	bne.n	8013904 <rmw_wait+0x2cc>
 80138c6:	b35e      	cbz	r6, 8013920 <rmw_wait+0x2e8>
 80138c8:	6833      	ldr	r3, [r6, #0]
 80138ca:	46d0      	mov	r8, sl
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d18c      	bne.n	80137ea <rmw_wait+0x1b2>
 80138d0:	2f00      	cmp	r7, #0
 80138d2:	d1a6      	bne.n	8013822 <rmw_wait+0x1ea>
 80138d4:	2002      	movs	r0, #2
 80138d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138da:	2f00      	cmp	r7, #0
 80138dc:	d0b9      	beq.n	8013852 <rmw_wait+0x21a>
 80138de:	683c      	ldr	r4, [r7, #0]
 80138e0:	f04f 0801 	mov.w	r8, #1
 80138e4:	2c00      	cmp	r4, #0
 80138e6:	d19e      	bne.n	8013826 <rmw_wait+0x1ee>
 80138e8:	e7b3      	b.n	8013852 <rmw_wait+0x21a>
 80138ea:	f1ba 0f00 	cmp.w	sl, #0
 80138ee:	d0ea      	beq.n	80138c6 <rmw_wait+0x28e>
 80138f0:	f8da 3000 	ldr.w	r3, [sl]
 80138f4:	46a8      	mov	r8, r5
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f47f af64 	bne.w	80137c4 <rmw_wait+0x18c>
 80138fc:	2e00      	cmp	r6, #0
 80138fe:	f47f af72 	bne.w	80137e6 <rmw_wait+0x1ae>
 8013902:	e009      	b.n	8013918 <rmw_wait+0x2e0>
 8013904:	f8da 2000 	ldr.w	r2, [sl]
 8013908:	4698      	mov	r8, r3
 801390a:	2a00      	cmp	r2, #0
 801390c:	f47f af5a 	bne.w	80137c4 <rmw_wait+0x18c>
 8013910:	4690      	mov	r8, r2
 8013912:	2e00      	cmp	r6, #0
 8013914:	f47f af67 	bne.w	80137e6 <rmw_wait+0x1ae>
 8013918:	46b0      	mov	r8, r6
 801391a:	2f00      	cmp	r7, #0
 801391c:	d181      	bne.n	8013822 <rmw_wait+0x1ea>
 801391e:	e7d9      	b.n	80138d4 <rmw_wait+0x29c>
 8013920:	2f00      	cmp	r7, #0
 8013922:	d0d7      	beq.n	80138d4 <rmw_wait+0x29c>
 8013924:	683c      	ldr	r4, [r7, #0]
 8013926:	46b0      	mov	r8, r6
 8013928:	2c00      	cmp	r4, #0
 801392a:	f47f af7c 	bne.w	8013826 <rmw_wait+0x1ee>
 801392e:	e7d1      	b.n	80138d4 <rmw_wait+0x29c>
 8013930:	000f4240 	.word	0x000f4240
 8013934:	2000f3d0 	.word	0x2000f3d0

08013938 <rmw_create_wait_set>:
 8013938:	b508      	push	{r3, lr}
 801393a:	4803      	ldr	r0, [pc, #12]	; (8013948 <rmw_create_wait_set+0x10>)
 801393c:	f7ff f9ac 	bl	8012c98 <get_memory>
 8013940:	b108      	cbz	r0, 8013946 <rmw_create_wait_set+0xe>
 8013942:	68c0      	ldr	r0, [r0, #12]
 8013944:	3010      	adds	r0, #16
 8013946:	bd08      	pop	{r3, pc}
 8013948:	20010ba8 	.word	0x20010ba8

0801394c <rmw_destroy_wait_set>:
 801394c:	b508      	push	{r3, lr}
 801394e:	4b08      	ldr	r3, [pc, #32]	; (8013970 <rmw_destroy_wait_set+0x24>)
 8013950:	6819      	ldr	r1, [r3, #0]
 8013952:	b911      	cbnz	r1, 801395a <rmw_destroy_wait_set+0xe>
 8013954:	e00a      	b.n	801396c <rmw_destroy_wait_set+0x20>
 8013956:	6889      	ldr	r1, [r1, #8]
 8013958:	b141      	cbz	r1, 801396c <rmw_destroy_wait_set+0x20>
 801395a:	68cb      	ldr	r3, [r1, #12]
 801395c:	3310      	adds	r3, #16
 801395e:	4298      	cmp	r0, r3
 8013960:	d1f9      	bne.n	8013956 <rmw_destroy_wait_set+0xa>
 8013962:	4803      	ldr	r0, [pc, #12]	; (8013970 <rmw_destroy_wait_set+0x24>)
 8013964:	f7ff f9a8 	bl	8012cb8 <put_memory>
 8013968:	2000      	movs	r0, #0
 801396a:	bd08      	pop	{r3, pc}
 801396c:	2001      	movs	r0, #1
 801396e:	bd08      	pop	{r3, pc}
 8013970:	20010ba8 	.word	0x20010ba8

08013974 <rmw_uros_epoch_nanos>:
 8013974:	4b05      	ldr	r3, [pc, #20]	; (801398c <rmw_uros_epoch_nanos+0x18>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	b123      	cbz	r3, 8013984 <rmw_uros_epoch_nanos+0x10>
 801397a:	68d8      	ldr	r0, [r3, #12]
 801397c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013980:	f7fa bbd6 	b.w	800e130 <uxr_epoch_nanos>
 8013984:	2000      	movs	r0, #0
 8013986:	2100      	movs	r1, #0
 8013988:	4770      	bx	lr
 801398a:	bf00      	nop
 801398c:	2000f3d0 	.word	0x2000f3d0

08013990 <ucdr_serialize_endian_array_char>:
 8013990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013994:	4619      	mov	r1, r3
 8013996:	461e      	mov	r6, r3
 8013998:	4690      	mov	r8, r2
 801399a:	4604      	mov	r4, r0
 801399c:	f7f7 fc7c 	bl	800b298 <ucdr_check_buffer_available_for>
 80139a0:	b9e0      	cbnz	r0, 80139dc <ucdr_serialize_endian_array_char+0x4c>
 80139a2:	4637      	mov	r7, r6
 80139a4:	e009      	b.n	80139ba <ucdr_serialize_endian_array_char+0x2a>
 80139a6:	68a0      	ldr	r0, [r4, #8]
 80139a8:	f001 fd8c 	bl	80154c4 <memcpy>
 80139ac:	68a2      	ldr	r2, [r4, #8]
 80139ae:	6923      	ldr	r3, [r4, #16]
 80139b0:	442a      	add	r2, r5
 80139b2:	442b      	add	r3, r5
 80139b4:	1b7f      	subs	r7, r7, r5
 80139b6:	60a2      	str	r2, [r4, #8]
 80139b8:	6123      	str	r3, [r4, #16]
 80139ba:	2201      	movs	r2, #1
 80139bc:	4639      	mov	r1, r7
 80139be:	4620      	mov	r0, r4
 80139c0:	f7f7 fcf0 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 80139c4:	1bf1      	subs	r1, r6, r7
 80139c6:	4441      	add	r1, r8
 80139c8:	4605      	mov	r5, r0
 80139ca:	4602      	mov	r2, r0
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d1ea      	bne.n	80139a6 <ucdr_serialize_endian_array_char+0x16>
 80139d0:	2301      	movs	r3, #1
 80139d2:	7da0      	ldrb	r0, [r4, #22]
 80139d4:	7563      	strb	r3, [r4, #21]
 80139d6:	4058      	eors	r0, r3
 80139d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139dc:	4632      	mov	r2, r6
 80139de:	68a0      	ldr	r0, [r4, #8]
 80139e0:	4641      	mov	r1, r8
 80139e2:	f001 fd6f 	bl	80154c4 <memcpy>
 80139e6:	68a2      	ldr	r2, [r4, #8]
 80139e8:	6923      	ldr	r3, [r4, #16]
 80139ea:	4432      	add	r2, r6
 80139ec:	4433      	add	r3, r6
 80139ee:	60a2      	str	r2, [r4, #8]
 80139f0:	6123      	str	r3, [r4, #16]
 80139f2:	e7ed      	b.n	80139d0 <ucdr_serialize_endian_array_char+0x40>

080139f4 <ucdr_deserialize_endian_array_char>:
 80139f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f8:	4619      	mov	r1, r3
 80139fa:	461e      	mov	r6, r3
 80139fc:	4690      	mov	r8, r2
 80139fe:	4604      	mov	r4, r0
 8013a00:	f7f7 fc4a 	bl	800b298 <ucdr_check_buffer_available_for>
 8013a04:	b9e0      	cbnz	r0, 8013a40 <ucdr_deserialize_endian_array_char+0x4c>
 8013a06:	4637      	mov	r7, r6
 8013a08:	e009      	b.n	8013a1e <ucdr_deserialize_endian_array_char+0x2a>
 8013a0a:	68a1      	ldr	r1, [r4, #8]
 8013a0c:	f001 fd5a 	bl	80154c4 <memcpy>
 8013a10:	68a2      	ldr	r2, [r4, #8]
 8013a12:	6923      	ldr	r3, [r4, #16]
 8013a14:	442a      	add	r2, r5
 8013a16:	442b      	add	r3, r5
 8013a18:	1b7f      	subs	r7, r7, r5
 8013a1a:	60a2      	str	r2, [r4, #8]
 8013a1c:	6123      	str	r3, [r4, #16]
 8013a1e:	2201      	movs	r2, #1
 8013a20:	4639      	mov	r1, r7
 8013a22:	4620      	mov	r0, r4
 8013a24:	f7f7 fcbe 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 8013a28:	4605      	mov	r5, r0
 8013a2a:	1bf0      	subs	r0, r6, r7
 8013a2c:	4440      	add	r0, r8
 8013a2e:	462a      	mov	r2, r5
 8013a30:	2d00      	cmp	r5, #0
 8013a32:	d1ea      	bne.n	8013a0a <ucdr_deserialize_endian_array_char+0x16>
 8013a34:	2301      	movs	r3, #1
 8013a36:	7da0      	ldrb	r0, [r4, #22]
 8013a38:	7563      	strb	r3, [r4, #21]
 8013a3a:	4058      	eors	r0, r3
 8013a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a40:	4632      	mov	r2, r6
 8013a42:	68a1      	ldr	r1, [r4, #8]
 8013a44:	4640      	mov	r0, r8
 8013a46:	f001 fd3d 	bl	80154c4 <memcpy>
 8013a4a:	68a2      	ldr	r2, [r4, #8]
 8013a4c:	6923      	ldr	r3, [r4, #16]
 8013a4e:	4432      	add	r2, r6
 8013a50:	4433      	add	r3, r6
 8013a52:	60a2      	str	r2, [r4, #8]
 8013a54:	6123      	str	r3, [r4, #16]
 8013a56:	e7ed      	b.n	8013a34 <ucdr_deserialize_endian_array_char+0x40>

08013a58 <ucdr_serialize_array_uint8_t>:
 8013a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a5c:	4688      	mov	r8, r1
 8013a5e:	4611      	mov	r1, r2
 8013a60:	4616      	mov	r6, r2
 8013a62:	4604      	mov	r4, r0
 8013a64:	f7f7 fc18 	bl	800b298 <ucdr_check_buffer_available_for>
 8013a68:	b9e0      	cbnz	r0, 8013aa4 <ucdr_serialize_array_uint8_t+0x4c>
 8013a6a:	4637      	mov	r7, r6
 8013a6c:	e009      	b.n	8013a82 <ucdr_serialize_array_uint8_t+0x2a>
 8013a6e:	68a0      	ldr	r0, [r4, #8]
 8013a70:	f001 fd28 	bl	80154c4 <memcpy>
 8013a74:	68a2      	ldr	r2, [r4, #8]
 8013a76:	6923      	ldr	r3, [r4, #16]
 8013a78:	442a      	add	r2, r5
 8013a7a:	442b      	add	r3, r5
 8013a7c:	1b7f      	subs	r7, r7, r5
 8013a7e:	60a2      	str	r2, [r4, #8]
 8013a80:	6123      	str	r3, [r4, #16]
 8013a82:	2201      	movs	r2, #1
 8013a84:	4639      	mov	r1, r7
 8013a86:	4620      	mov	r0, r4
 8013a88:	f7f7 fc8c 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 8013a8c:	1bf1      	subs	r1, r6, r7
 8013a8e:	4441      	add	r1, r8
 8013a90:	4605      	mov	r5, r0
 8013a92:	4602      	mov	r2, r0
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d1ea      	bne.n	8013a6e <ucdr_serialize_array_uint8_t+0x16>
 8013a98:	2301      	movs	r3, #1
 8013a9a:	7da0      	ldrb	r0, [r4, #22]
 8013a9c:	7563      	strb	r3, [r4, #21]
 8013a9e:	4058      	eors	r0, r3
 8013aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa4:	4632      	mov	r2, r6
 8013aa6:	68a0      	ldr	r0, [r4, #8]
 8013aa8:	4641      	mov	r1, r8
 8013aaa:	f001 fd0b 	bl	80154c4 <memcpy>
 8013aae:	68a3      	ldr	r3, [r4, #8]
 8013ab0:	6922      	ldr	r2, [r4, #16]
 8013ab2:	4433      	add	r3, r6
 8013ab4:	4432      	add	r2, r6
 8013ab6:	60a3      	str	r3, [r4, #8]
 8013ab8:	6122      	str	r2, [r4, #16]
 8013aba:	e7ed      	b.n	8013a98 <ucdr_serialize_array_uint8_t+0x40>

08013abc <ucdr_serialize_endian_array_uint8_t>:
 8013abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	461e      	mov	r6, r3
 8013ac4:	4690      	mov	r8, r2
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	f7f7 fbe6 	bl	800b298 <ucdr_check_buffer_available_for>
 8013acc:	b9e0      	cbnz	r0, 8013b08 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013ace:	4637      	mov	r7, r6
 8013ad0:	e009      	b.n	8013ae6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013ad2:	68a0      	ldr	r0, [r4, #8]
 8013ad4:	f001 fcf6 	bl	80154c4 <memcpy>
 8013ad8:	68a2      	ldr	r2, [r4, #8]
 8013ada:	6923      	ldr	r3, [r4, #16]
 8013adc:	442a      	add	r2, r5
 8013ade:	442b      	add	r3, r5
 8013ae0:	1b7f      	subs	r7, r7, r5
 8013ae2:	60a2      	str	r2, [r4, #8]
 8013ae4:	6123      	str	r3, [r4, #16]
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	4639      	mov	r1, r7
 8013aea:	4620      	mov	r0, r4
 8013aec:	f7f7 fc5a 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 8013af0:	1bf1      	subs	r1, r6, r7
 8013af2:	4441      	add	r1, r8
 8013af4:	4605      	mov	r5, r0
 8013af6:	4602      	mov	r2, r0
 8013af8:	2800      	cmp	r0, #0
 8013afa:	d1ea      	bne.n	8013ad2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013afc:	2301      	movs	r3, #1
 8013afe:	7da0      	ldrb	r0, [r4, #22]
 8013b00:	7563      	strb	r3, [r4, #21]
 8013b02:	4058      	eors	r0, r3
 8013b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b08:	4632      	mov	r2, r6
 8013b0a:	68a0      	ldr	r0, [r4, #8]
 8013b0c:	4641      	mov	r1, r8
 8013b0e:	f001 fcd9 	bl	80154c4 <memcpy>
 8013b12:	68a2      	ldr	r2, [r4, #8]
 8013b14:	6923      	ldr	r3, [r4, #16]
 8013b16:	4432      	add	r2, r6
 8013b18:	4433      	add	r3, r6
 8013b1a:	60a2      	str	r2, [r4, #8]
 8013b1c:	6123      	str	r3, [r4, #16]
 8013b1e:	e7ed      	b.n	8013afc <ucdr_serialize_endian_array_uint8_t+0x40>

08013b20 <ucdr_deserialize_array_uint8_t>:
 8013b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b24:	4688      	mov	r8, r1
 8013b26:	4611      	mov	r1, r2
 8013b28:	4616      	mov	r6, r2
 8013b2a:	4604      	mov	r4, r0
 8013b2c:	f7f7 fbb4 	bl	800b298 <ucdr_check_buffer_available_for>
 8013b30:	b9e0      	cbnz	r0, 8013b6c <ucdr_deserialize_array_uint8_t+0x4c>
 8013b32:	4637      	mov	r7, r6
 8013b34:	e009      	b.n	8013b4a <ucdr_deserialize_array_uint8_t+0x2a>
 8013b36:	68a1      	ldr	r1, [r4, #8]
 8013b38:	f001 fcc4 	bl	80154c4 <memcpy>
 8013b3c:	68a2      	ldr	r2, [r4, #8]
 8013b3e:	6923      	ldr	r3, [r4, #16]
 8013b40:	442a      	add	r2, r5
 8013b42:	442b      	add	r3, r5
 8013b44:	1b7f      	subs	r7, r7, r5
 8013b46:	60a2      	str	r2, [r4, #8]
 8013b48:	6123      	str	r3, [r4, #16]
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f7f7 fc28 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 8013b54:	4605      	mov	r5, r0
 8013b56:	1bf0      	subs	r0, r6, r7
 8013b58:	4440      	add	r0, r8
 8013b5a:	462a      	mov	r2, r5
 8013b5c:	2d00      	cmp	r5, #0
 8013b5e:	d1ea      	bne.n	8013b36 <ucdr_deserialize_array_uint8_t+0x16>
 8013b60:	2301      	movs	r3, #1
 8013b62:	7da0      	ldrb	r0, [r4, #22]
 8013b64:	7563      	strb	r3, [r4, #21]
 8013b66:	4058      	eors	r0, r3
 8013b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b6c:	4632      	mov	r2, r6
 8013b6e:	68a1      	ldr	r1, [r4, #8]
 8013b70:	4640      	mov	r0, r8
 8013b72:	f001 fca7 	bl	80154c4 <memcpy>
 8013b76:	68a3      	ldr	r3, [r4, #8]
 8013b78:	6922      	ldr	r2, [r4, #16]
 8013b7a:	4433      	add	r3, r6
 8013b7c:	4432      	add	r2, r6
 8013b7e:	60a3      	str	r3, [r4, #8]
 8013b80:	6122      	str	r2, [r4, #16]
 8013b82:	e7ed      	b.n	8013b60 <ucdr_deserialize_array_uint8_t+0x40>

08013b84 <ucdr_deserialize_endian_array_uint8_t>:
 8013b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b88:	4619      	mov	r1, r3
 8013b8a:	461e      	mov	r6, r3
 8013b8c:	4690      	mov	r8, r2
 8013b8e:	4604      	mov	r4, r0
 8013b90:	f7f7 fb82 	bl	800b298 <ucdr_check_buffer_available_for>
 8013b94:	b9e0      	cbnz	r0, 8013bd0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013b96:	4637      	mov	r7, r6
 8013b98:	e009      	b.n	8013bae <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013b9a:	68a1      	ldr	r1, [r4, #8]
 8013b9c:	f001 fc92 	bl	80154c4 <memcpy>
 8013ba0:	68a2      	ldr	r2, [r4, #8]
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	442a      	add	r2, r5
 8013ba6:	442b      	add	r3, r5
 8013ba8:	1b7f      	subs	r7, r7, r5
 8013baa:	60a2      	str	r2, [r4, #8]
 8013bac:	6123      	str	r3, [r4, #16]
 8013bae:	2201      	movs	r2, #1
 8013bb0:	4639      	mov	r1, r7
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	f7f7 fbf6 	bl	800b3a4 <ucdr_check_final_buffer_behavior_array>
 8013bb8:	4605      	mov	r5, r0
 8013bba:	1bf0      	subs	r0, r6, r7
 8013bbc:	4440      	add	r0, r8
 8013bbe:	462a      	mov	r2, r5
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	d1ea      	bne.n	8013b9a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	7da0      	ldrb	r0, [r4, #22]
 8013bc8:	7563      	strb	r3, [r4, #21]
 8013bca:	4058      	eors	r0, r3
 8013bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd0:	4632      	mov	r2, r6
 8013bd2:	68a1      	ldr	r1, [r4, #8]
 8013bd4:	4640      	mov	r0, r8
 8013bd6:	f001 fc75 	bl	80154c4 <memcpy>
 8013bda:	68a2      	ldr	r2, [r4, #8]
 8013bdc:	6923      	ldr	r3, [r4, #16]
 8013bde:	4432      	add	r2, r6
 8013be0:	4433      	add	r3, r6
 8013be2:	60a2      	str	r2, [r4, #8]
 8013be4:	6123      	str	r3, [r4, #16]
 8013be6:	e7ed      	b.n	8013bc4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013be8 <ucdr_serialize_sequence_char>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	460e      	mov	r6, r1
 8013bec:	4615      	mov	r5, r2
 8013bee:	7d01      	ldrb	r1, [r0, #20]
 8013bf0:	4604      	mov	r4, r0
 8013bf2:	f7f6 fd11 	bl	800a618 <ucdr_serialize_endian_uint32_t>
 8013bf6:	b90d      	cbnz	r5, 8013bfc <ucdr_serialize_sequence_char+0x14>
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	bd70      	pop	{r4, r5, r6, pc}
 8013bfc:	7d21      	ldrb	r1, [r4, #20]
 8013bfe:	462b      	mov	r3, r5
 8013c00:	4632      	mov	r2, r6
 8013c02:	4620      	mov	r0, r4
 8013c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c08:	f7ff bec2 	b.w	8013990 <ucdr_serialize_endian_array_char>

08013c0c <ucdr_deserialize_sequence_char>:
 8013c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c10:	461d      	mov	r5, r3
 8013c12:	4616      	mov	r6, r2
 8013c14:	460f      	mov	r7, r1
 8013c16:	461a      	mov	r2, r3
 8013c18:	7d01      	ldrb	r1, [r0, #20]
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	f7f6 fe24 	bl	800a868 <ucdr_deserialize_endian_uint32_t>
 8013c20:	682b      	ldr	r3, [r5, #0]
 8013c22:	429e      	cmp	r6, r3
 8013c24:	bf3c      	itt	cc
 8013c26:	2201      	movcc	r2, #1
 8013c28:	75a2      	strbcc	r2, [r4, #22]
 8013c2a:	b913      	cbnz	r3, 8013c32 <ucdr_deserialize_sequence_char+0x26>
 8013c2c:	2001      	movs	r0, #1
 8013c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c32:	7d21      	ldrb	r1, [r4, #20]
 8013c34:	463a      	mov	r2, r7
 8013c36:	4620      	mov	r0, r4
 8013c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3c:	f7ff beda 	b.w	80139f4 <ucdr_deserialize_endian_array_char>

08013c40 <ucdr_serialize_sequence_uint8_t>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	460e      	mov	r6, r1
 8013c44:	4615      	mov	r5, r2
 8013c46:	7d01      	ldrb	r1, [r0, #20]
 8013c48:	4604      	mov	r4, r0
 8013c4a:	f7f6 fce5 	bl	800a618 <ucdr_serialize_endian_uint32_t>
 8013c4e:	b90d      	cbnz	r5, 8013c54 <ucdr_serialize_sequence_uint8_t+0x14>
 8013c50:	2001      	movs	r0, #1
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	7d21      	ldrb	r1, [r4, #20]
 8013c56:	462b      	mov	r3, r5
 8013c58:	4632      	mov	r2, r6
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c60:	f7ff bf2c 	b.w	8013abc <ucdr_serialize_endian_array_uint8_t>

08013c64 <ucdr_deserialize_sequence_uint8_t>:
 8013c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c68:	461d      	mov	r5, r3
 8013c6a:	4616      	mov	r6, r2
 8013c6c:	460f      	mov	r7, r1
 8013c6e:	461a      	mov	r2, r3
 8013c70:	7d01      	ldrb	r1, [r0, #20]
 8013c72:	4604      	mov	r4, r0
 8013c74:	f7f6 fdf8 	bl	800a868 <ucdr_deserialize_endian_uint32_t>
 8013c78:	682b      	ldr	r3, [r5, #0]
 8013c7a:	429e      	cmp	r6, r3
 8013c7c:	bf3c      	itt	cc
 8013c7e:	2201      	movcc	r2, #1
 8013c80:	75a2      	strbcc	r2, [r4, #22]
 8013c82:	b913      	cbnz	r3, 8013c8a <ucdr_deserialize_sequence_uint8_t+0x26>
 8013c84:	2001      	movs	r0, #1
 8013c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c8a:	7d21      	ldrb	r1, [r4, #20]
 8013c8c:	463a      	mov	r2, r7
 8013c8e:	4620      	mov	r0, r4
 8013c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c94:	f7ff bf76 	b.w	8013b84 <ucdr_deserialize_endian_array_uint8_t>

08013c98 <ucdr_serialize_string>:
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	4608      	mov	r0, r1
 8013ca0:	9101      	str	r1, [sp, #4]
 8013ca2:	f7ec fabf 	bl	8000224 <strlen>
 8013ca6:	9901      	ldr	r1, [sp, #4]
 8013ca8:	4602      	mov	r2, r0
 8013caa:	3201      	adds	r2, #1
 8013cac:	4620      	mov	r0, r4
 8013cae:	b002      	add	sp, #8
 8013cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cb4:	f7ff bf98 	b.w	8013be8 <ucdr_serialize_sequence_char>

08013cb8 <ucdr_deserialize_string>:
 8013cb8:	b500      	push	{lr}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	ab01      	add	r3, sp, #4
 8013cbe:	f7ff ffa5 	bl	8013c0c <ucdr_deserialize_sequence_char>
 8013cc2:	b003      	add	sp, #12
 8013cc4:	f85d fb04 	ldr.w	pc, [sp], #4

08013cc8 <get_custom_error>:
 8013cc8:	4b01      	ldr	r3, [pc, #4]	; (8013cd0 <get_custom_error+0x8>)
 8013cca:	7818      	ldrb	r0, [r3, #0]
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop
 8013cd0:	2000c1dc 	.word	0x2000c1dc

08013cd4 <recv_custom_msg>:
 8013cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd8:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8013cdc:	b089      	sub	sp, #36	; 0x24
 8013cde:	2600      	movs	r6, #0
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	9305      	str	r3, [sp, #20]
 8013ce4:	468a      	mov	sl, r1
 8013ce6:	4693      	mov	fp, r2
 8013ce8:	f88d 601e 	strb.w	r6, [sp, #30]
 8013cec:	b325      	cbz	r5, 8013d38 <recv_custom_msg+0x64>
 8013cee:	f200 2902 	addw	r9, r0, #514	; 0x202
 8013cf2:	f10d 081f 	add.w	r8, sp, #31
 8013cf6:	af05      	add	r7, sp, #20
 8013cf8:	f10d 061e 	add.w	r6, sp, #30
 8013cfc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013d00:	e002      	b.n	8013d08 <recv_custom_msg+0x34>
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	dd0f      	ble.n	8013d28 <recv_custom_msg+0x54>
 8013d08:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013d0c:	e9cd 5600 	strd	r5, r6, [sp]
 8013d10:	4623      	mov	r3, r4
 8013d12:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8013d16:	4622      	mov	r2, r4
 8013d18:	4648      	mov	r0, r9
 8013d1a:	f000 ffd5 	bl	8014cc8 <uxr_read_framed_msg>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d0ef      	beq.n	8013d02 <recv_custom_msg+0x2e>
 8013d22:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013d26:	b1b3      	cbz	r3, 8013d56 <recv_custom_msg+0x82>
 8013d28:	4b0f      	ldr	r3, [pc, #60]	; (8013d68 <recv_custom_msg+0x94>)
 8013d2a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013d2e:	701a      	strb	r2, [r3, #0]
 8013d30:	2000      	movs	r0, #0
 8013d32:	b009      	add	sp, #36	; 0x24
 8013d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d38:	f10d 021f 	add.w	r2, sp, #31
 8013d3c:	9200      	str	r2, [sp, #0]
 8013d3e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8013d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d46:	4601      	mov	r1, r0
 8013d48:	47a8      	blx	r5
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d0ec      	beq.n	8013d28 <recv_custom_msg+0x54>
 8013d4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d1e8      	bne.n	8013d28 <recv_custom_msg+0x54>
 8013d56:	f8cb 0000 	str.w	r0, [fp]
 8013d5a:	2001      	movs	r0, #1
 8013d5c:	f8ca 4000 	str.w	r4, [sl]
 8013d60:	b009      	add	sp, #36	; 0x24
 8013d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d66:	bf00      	nop
 8013d68:	2000c1dc 	.word	0x2000c1dc

08013d6c <send_custom_msg>:
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8013d72:	b086      	sub	sp, #24
 8013d74:	4616      	mov	r6, r2
 8013d76:	b975      	cbnz	r5, 8013d96 <send_custom_msg+0x2a>
 8013d78:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8013d7c:	f10d 0317 	add.w	r3, sp, #23
 8013d80:	47a0      	blx	r4
 8013d82:	b108      	cbz	r0, 8013d88 <send_custom_msg+0x1c>
 8013d84:	42b0      	cmp	r0, r6
 8013d86:	d015      	beq.n	8013db4 <send_custom_msg+0x48>
 8013d88:	4b0c      	ldr	r3, [pc, #48]	; (8013dbc <send_custom_msg+0x50>)
 8013d8a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013d8e:	701a      	strb	r2, [r3, #0]
 8013d90:	2000      	movs	r0, #0
 8013d92:	b006      	add	sp, #24
 8013d94:	bd70      	pop	{r4, r5, r6, pc}
 8013d96:	460b      	mov	r3, r1
 8013d98:	2200      	movs	r2, #0
 8013d9a:	f10d 0117 	add.w	r1, sp, #23
 8013d9e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013da2:	9600      	str	r6, [sp, #0]
 8013da4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8013da8:	4602      	mov	r2, r0
 8013daa:	f200 2002 	addw	r0, r0, #514	; 0x202
 8013dae:	f000 fda3 	bl	80148f8 <uxr_write_framed_msg>
 8013db2:	e7e6      	b.n	8013d82 <send_custom_msg+0x16>
 8013db4:	2001      	movs	r0, #1
 8013db6:	b006      	add	sp, #24
 8013db8:	bd70      	pop	{r4, r5, r6, pc}
 8013dba:	bf00      	nop
 8013dbc:	2000c1dc 	.word	0x2000c1dc

08013dc0 <uxr_set_custom_transport_callbacks>:
 8013dc0:	b430      	push	{r4, r5}
 8013dc2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8013dc6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8013dca:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 8013dce:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8013dd2:	bc30      	pop	{r4, r5}
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop

08013dd8 <uxr_init_custom_transport>:
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8013dde:	b303      	cbz	r3, 8013e22 <uxr_init_custom_transport+0x4a>
 8013de0:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8013de4:	4604      	mov	r4, r0
 8013de6:	b1e2      	cbz	r2, 8013e22 <uxr_init_custom_transport+0x4a>
 8013de8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8013dec:	b1ca      	cbz	r2, 8013e22 <uxr_init_custom_transport+0x4a>
 8013dee:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8013df2:	b1b2      	cbz	r2, 8013e22 <uxr_init_custom_transport+0x4a>
 8013df4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8013df8:	4798      	blx	r3
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	b188      	cbz	r0, 8013e22 <uxr_init_custom_transport+0x4a>
 8013dfe:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8013e02:	b98b      	cbnz	r3, 8013e28 <uxr_init_custom_transport+0x50>
 8013e04:	480b      	ldr	r0, [pc, #44]	; (8013e34 <uxr_init_custom_transport+0x5c>)
 8013e06:	490c      	ldr	r1, [pc, #48]	; (8013e38 <uxr_init_custom_transport+0x60>)
 8013e08:	4a0c      	ldr	r2, [pc, #48]	; (8013e3c <uxr_init_custom_transport+0x64>)
 8013e0a:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8013e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e12:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8013e16:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8013e1a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8013e1e:	4628      	mov	r0, r5
 8013e20:	bd38      	pop	{r3, r4, r5, pc}
 8013e22:	2500      	movs	r5, #0
 8013e24:	4628      	mov	r0, r5
 8013e26:	bd38      	pop	{r3, r4, r5, pc}
 8013e28:	2100      	movs	r1, #0
 8013e2a:	f204 2002 	addw	r0, r4, #514	; 0x202
 8013e2e:	f000 fd5d 	bl	80148ec <uxr_init_framing_io>
 8013e32:	e7e7      	b.n	8013e04 <uxr_init_custom_transport+0x2c>
 8013e34:	08013d6d 	.word	0x08013d6d
 8013e38:	08013cd5 	.word	0x08013cd5
 8013e3c:	08013cc9 	.word	0x08013cc9

08013e40 <uxr_close_custom_transport>:
 8013e40:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8013e44:	4718      	bx	r3
 8013e46:	bf00      	nop

08013e48 <uxr_init_input_best_effort_stream>:
 8013e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e4c:	8003      	strh	r3, [r0, #0]
 8013e4e:	4770      	bx	lr

08013e50 <uxr_reset_input_best_effort_stream>:
 8013e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e54:	8003      	strh	r3, [r0, #0]
 8013e56:	4770      	bx	lr

08013e58 <uxr_receive_best_effort_message>:
 8013e58:	b538      	push	{r3, r4, r5, lr}
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	8800      	ldrh	r0, [r0, #0]
 8013e5e:	460d      	mov	r5, r1
 8013e60:	f000 fd2c 	bl	80148bc <uxr_seq_num_cmp>
 8013e64:	4603      	mov	r3, r0
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013e6c:	bfb8      	it	lt
 8013e6e:	8025      	strhlt	r5, [r4, #0]
 8013e70:	bd38      	pop	{r3, r4, r5, pc}
 8013e72:	bf00      	nop

08013e74 <on_full_input_buffer>:
 8013e74:	b570      	push	{r4, r5, r6, lr}
 8013e76:	6802      	ldr	r2, [r0, #0]
 8013e78:	460d      	mov	r5, r1
 8013e7a:	6809      	ldr	r1, [r1, #0]
 8013e7c:	686c      	ldr	r4, [r5, #4]
 8013e7e:	1a53      	subs	r3, r2, r1
 8013e80:	4606      	mov	r6, r0
 8013e82:	8928      	ldrh	r0, [r5, #8]
 8013e84:	fbb4 f4f0 	udiv	r4, r4, r0
 8013e88:	fbb3 f3f4 	udiv	r3, r3, r4
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	fbb3 f2f0 	udiv	r2, r3, r0
 8013e94:	fb00 3312 	mls	r3, r0, r2, r3
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	fb04 f403 	mul.w	r4, r4, r3
 8013e9e:	1d23      	adds	r3, r4, #4
 8013ea0:	440b      	add	r3, r1
 8013ea2:	7d28      	ldrb	r0, [r5, #20]
 8013ea4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8013ea8:	b110      	cbz	r0, 8013eb0 <on_full_input_buffer+0x3c>
 8013eaa:	2000      	movs	r0, #0
 8013eac:	f843 0c04 	str.w	r0, [r3, #-4]
 8013eb0:	2a03      	cmp	r2, #3
 8013eb2:	d801      	bhi.n	8013eb8 <on_full_input_buffer+0x44>
 8013eb4:	2001      	movs	r0, #1
 8013eb6:	bd70      	pop	{r4, r5, r6, pc}
 8013eb8:	3408      	adds	r4, #8
 8013eba:	6933      	ldr	r3, [r6, #16]
 8013ebc:	4421      	add	r1, r4
 8013ebe:	4630      	mov	r0, r6
 8013ec0:	3a04      	subs	r2, #4
 8013ec2:	f7f7 fa33 	bl	800b32c <ucdr_init_buffer_origin>
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	4902      	ldr	r1, [pc, #8]	; (8013ed4 <on_full_input_buffer+0x60>)
 8013eca:	462a      	mov	r2, r5
 8013ecc:	f7f7 fa0c 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 8013ed0:	2000      	movs	r0, #0
 8013ed2:	bd70      	pop	{r4, r5, r6, pc}
 8013ed4:	08013e75 	.word	0x08013e75

08013ed8 <uxr_init_input_reliable_stream>:
 8013ed8:	b470      	push	{r4, r5, r6}
 8013eda:	9c03      	ldr	r4, [sp, #12]
 8013edc:	6001      	str	r1, [r0, #0]
 8013ede:	2600      	movs	r6, #0
 8013ee0:	8103      	strh	r3, [r0, #8]
 8013ee2:	6042      	str	r2, [r0, #4]
 8013ee4:	6104      	str	r4, [r0, #16]
 8013ee6:	7506      	strb	r6, [r0, #20]
 8013ee8:	b1ab      	cbz	r3, 8013f16 <uxr_init_input_reliable_stream+0x3e>
 8013eea:	600e      	str	r6, [r1, #0]
 8013eec:	8901      	ldrh	r1, [r0, #8]
 8013eee:	2901      	cmp	r1, #1
 8013ef0:	d911      	bls.n	8013f16 <uxr_init_input_reliable_stream+0x3e>
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	e9d0 5400 	ldrd	r5, r4, [r0]
 8013ef8:	fbb2 f3f1 	udiv	r3, r2, r1
 8013efc:	fb01 2313 	mls	r3, r1, r3, r2
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	fbb4 f1f1 	udiv	r1, r4, r1
 8013f06:	fb03 f301 	mul.w	r3, r3, r1
 8013f0a:	3201      	adds	r2, #1
 8013f0c:	50ee      	str	r6, [r5, r3]
 8013f0e:	8901      	ldrh	r1, [r0, #8]
 8013f10:	b292      	uxth	r2, r2
 8013f12:	4291      	cmp	r1, r2
 8013f14:	d8ee      	bhi.n	8013ef4 <uxr_init_input_reliable_stream+0x1c>
 8013f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f1a:	bc70      	pop	{r4, r5, r6}
 8013f1c:	60c3      	str	r3, [r0, #12]
 8013f1e:	4770      	bx	lr

08013f20 <uxr_reset_input_reliable_stream>:
 8013f20:	8902      	ldrh	r2, [r0, #8]
 8013f22:	b1ca      	cbz	r2, 8013f58 <uxr_reset_input_reliable_stream+0x38>
 8013f24:	b470      	push	{r4, r5, r6}
 8013f26:	2400      	movs	r4, #0
 8013f28:	4621      	mov	r1, r4
 8013f2a:	4626      	mov	r6, r4
 8013f2c:	fbb1 f3f2 	udiv	r3, r1, r2
 8013f30:	fb02 1313 	mls	r3, r2, r3, r1
 8013f34:	e9d0 5100 	ldrd	r5, r1, [r0]
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	fbb1 f2f2 	udiv	r2, r1, r2
 8013f3e:	fb03 f302 	mul.w	r3, r3, r2
 8013f42:	3401      	adds	r4, #1
 8013f44:	50ee      	str	r6, [r5, r3]
 8013f46:	8902      	ldrh	r2, [r0, #8]
 8013f48:	b2a1      	uxth	r1, r4
 8013f4a:	428a      	cmp	r2, r1
 8013f4c:	d8ee      	bhi.n	8013f2c <uxr_reset_input_reliable_stream+0xc>
 8013f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f52:	bc70      	pop	{r4, r5, r6}
 8013f54:	60c3      	str	r3, [r0, #12]
 8013f56:	4770      	bx	lr
 8013f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f5c:	60c3      	str	r3, [r0, #12]
 8013f5e:	4770      	bx	lr

08013f60 <uxr_receive_reliable_message>:
 8013f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f64:	4604      	mov	r4, r0
 8013f66:	460d      	mov	r5, r1
 8013f68:	8901      	ldrh	r1, [r0, #8]
 8013f6a:	8980      	ldrh	r0, [r0, #12]
 8013f6c:	4690      	mov	r8, r2
 8013f6e:	461f      	mov	r7, r3
 8013f70:	f000 fc9c 	bl	80148ac <uxr_seq_num_add>
 8013f74:	4629      	mov	r1, r5
 8013f76:	4606      	mov	r6, r0
 8013f78:	89a0      	ldrh	r0, [r4, #12]
 8013f7a:	f000 fc9f 	bl	80148bc <uxr_seq_num_cmp>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	db0a      	blt.n	8013f98 <uxr_receive_reliable_message+0x38>
 8013f82:	2600      	movs	r6, #0
 8013f84:	89e0      	ldrh	r0, [r4, #14]
 8013f86:	4629      	mov	r1, r5
 8013f88:	f000 fc98 	bl	80148bc <uxr_seq_num_cmp>
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	bfb8      	it	lt
 8013f90:	81e5      	strhlt	r5, [r4, #14]
 8013f92:	4630      	mov	r0, r6
 8013f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f98:	4630      	mov	r0, r6
 8013f9a:	4629      	mov	r1, r5
 8013f9c:	f000 fc8e 	bl	80148bc <uxr_seq_num_cmp>
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	dbee      	blt.n	8013f82 <uxr_receive_reliable_message+0x22>
 8013fa4:	6923      	ldr	r3, [r4, #16]
 8013fa6:	4640      	mov	r0, r8
 8013fa8:	4798      	blx	r3
 8013faa:	2101      	movs	r1, #1
 8013fac:	4681      	mov	r9, r0
 8013fae:	89a0      	ldrh	r0, [r4, #12]
 8013fb0:	f000 fc7c 	bl	80148ac <uxr_seq_num_add>
 8013fb4:	f1b9 0f00 	cmp.w	r9, #0
 8013fb8:	d101      	bne.n	8013fbe <uxr_receive_reliable_message+0x5e>
 8013fba:	4285      	cmp	r5, r0
 8013fbc:	d049      	beq.n	8014052 <uxr_receive_reliable_message+0xf2>
 8013fbe:	8921      	ldrh	r1, [r4, #8]
 8013fc0:	fbb5 f3f1 	udiv	r3, r5, r1
 8013fc4:	fb01 5313 	mls	r3, r1, r3, r5
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	6862      	ldr	r2, [r4, #4]
 8013fcc:	6820      	ldr	r0, [r4, #0]
 8013fce:	fbb2 f2f1 	udiv	r2, r2, r1
 8013fd2:	fb03 f302 	mul.w	r3, r3, r2
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	4418      	add	r0, r3
 8013fda:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d1cf      	bne.n	8013f82 <uxr_receive_reliable_message+0x22>
 8013fe2:	4641      	mov	r1, r8
 8013fe4:	463a      	mov	r2, r7
 8013fe6:	f001 fa6d 	bl	80154c4 <memcpy>
 8013fea:	8921      	ldrh	r1, [r4, #8]
 8013fec:	fbb5 f3f1 	udiv	r3, r5, r1
 8013ff0:	fb01 5313 	mls	r3, r1, r3, r5
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	6862      	ldr	r2, [r4, #4]
 8013ff8:	fbb2 f2f1 	udiv	r2, r2, r1
 8013ffc:	6821      	ldr	r1, [r4, #0]
 8013ffe:	fb03 f302 	mul.w	r3, r3, r2
 8014002:	2201      	movs	r2, #1
 8014004:	50cf      	str	r7, [r1, r3]
 8014006:	9b08      	ldr	r3, [sp, #32]
 8014008:	701a      	strb	r2, [r3, #0]
 801400a:	f1b9 0f00 	cmp.w	r9, #0
 801400e:	d0b8      	beq.n	8013f82 <uxr_receive_reliable_message+0x22>
 8014010:	89a6      	ldrh	r6, [r4, #12]
 8014012:	e001      	b.n	8014018 <uxr_receive_reliable_message+0xb8>
 8014014:	2801      	cmp	r0, #1
 8014016:	d1b4      	bne.n	8013f82 <uxr_receive_reliable_message+0x22>
 8014018:	4630      	mov	r0, r6
 801401a:	2101      	movs	r1, #1
 801401c:	f000 fc46 	bl	80148ac <uxr_seq_num_add>
 8014020:	8921      	ldrh	r1, [r4, #8]
 8014022:	fbb0 f3f1 	udiv	r3, r0, r1
 8014026:	fb01 0313 	mls	r3, r1, r3, r0
 801402a:	b29b      	uxth	r3, r3
 801402c:	6862      	ldr	r2, [r4, #4]
 801402e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014032:	4606      	mov	r6, r0
 8014034:	fb03 f302 	mul.w	r3, r3, r2
 8014038:	6820      	ldr	r0, [r4, #0]
 801403a:	3304      	adds	r3, #4
 801403c:	4418      	add	r0, r3
 801403e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d09d      	beq.n	8013f82 <uxr_receive_reliable_message+0x22>
 8014046:	6923      	ldr	r3, [r4, #16]
 8014048:	4798      	blx	r3
 801404a:	2802      	cmp	r0, #2
 801404c:	d1e2      	bne.n	8014014 <uxr_receive_reliable_message+0xb4>
 801404e:	2601      	movs	r6, #1
 8014050:	e798      	b.n	8013f84 <uxr_receive_reliable_message+0x24>
 8014052:	9b08      	ldr	r3, [sp, #32]
 8014054:	81a5      	strh	r5, [r4, #12]
 8014056:	2601      	movs	r6, #1
 8014058:	f883 9000 	strb.w	r9, [r3]
 801405c:	e792      	b.n	8013f84 <uxr_receive_reliable_message+0x24>
 801405e:	bf00      	nop

08014060 <uxr_next_input_reliable_buffer_available>:
 8014060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014064:	4604      	mov	r4, r0
 8014066:	460e      	mov	r6, r1
 8014068:	8980      	ldrh	r0, [r0, #12]
 801406a:	2101      	movs	r1, #1
 801406c:	4617      	mov	r7, r2
 801406e:	f000 fc1d 	bl	80148ac <uxr_seq_num_add>
 8014072:	8921      	ldrh	r1, [r4, #8]
 8014074:	fbb0 f3f1 	udiv	r3, r0, r1
 8014078:	fb01 0313 	mls	r3, r1, r3, r0
 801407c:	b29b      	uxth	r3, r3
 801407e:	6862      	ldr	r2, [r4, #4]
 8014080:	fbb2 f2f1 	udiv	r2, r2, r1
 8014084:	fb03 f302 	mul.w	r3, r3, r2
 8014088:	6822      	ldr	r2, [r4, #0]
 801408a:	3304      	adds	r3, #4
 801408c:	eb02 0803 	add.w	r8, r2, r3
 8014090:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8014094:	f1b9 0f00 	cmp.w	r9, #0
 8014098:	d025      	beq.n	80140e6 <uxr_next_input_reliable_buffer_available+0x86>
 801409a:	6923      	ldr	r3, [r4, #16]
 801409c:	4605      	mov	r5, r0
 801409e:	4640      	mov	r0, r8
 80140a0:	4798      	blx	r3
 80140a2:	4682      	mov	sl, r0
 80140a4:	b310      	cbz	r0, 80140ec <uxr_next_input_reliable_buffer_available+0x8c>
 80140a6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80140aa:	e005      	b.n	80140b8 <uxr_next_input_reliable_buffer_available+0x58>
 80140ac:	6923      	ldr	r3, [r4, #16]
 80140ae:	4798      	blx	r3
 80140b0:	2802      	cmp	r0, #2
 80140b2:	d032      	beq.n	801411a <uxr_next_input_reliable_buffer_available+0xba>
 80140b4:	2801      	cmp	r0, #1
 80140b6:	d116      	bne.n	80140e6 <uxr_next_input_reliable_buffer_available+0x86>
 80140b8:	4650      	mov	r0, sl
 80140ba:	2101      	movs	r1, #1
 80140bc:	f000 fbf6 	bl	80148ac <uxr_seq_num_add>
 80140c0:	8921      	ldrh	r1, [r4, #8]
 80140c2:	fbb0 f3f1 	udiv	r3, r0, r1
 80140c6:	fb01 0313 	mls	r3, r1, r3, r0
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	6862      	ldr	r2, [r4, #4]
 80140ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80140d2:	4682      	mov	sl, r0
 80140d4:	fb03 f302 	mul.w	r3, r3, r2
 80140d8:	6820      	ldr	r0, [r4, #0]
 80140da:	3304      	adds	r3, #4
 80140dc:	4418      	add	r0, r3
 80140de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d1e2      	bne.n	80140ac <uxr_next_input_reliable_buffer_available+0x4c>
 80140e6:	2000      	movs	r0, #0
 80140e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ec:	464a      	mov	r2, r9
 80140ee:	4641      	mov	r1, r8
 80140f0:	4630      	mov	r0, r6
 80140f2:	f7f7 f923 	bl	800b33c <ucdr_init_buffer>
 80140f6:	8921      	ldrh	r1, [r4, #8]
 80140f8:	fbb5 f3f1 	udiv	r3, r5, r1
 80140fc:	fb01 5313 	mls	r3, r1, r3, r5
 8014100:	b29b      	uxth	r3, r3
 8014102:	6862      	ldr	r2, [r4, #4]
 8014104:	fbb2 f2f1 	udiv	r2, r2, r1
 8014108:	6821      	ldr	r1, [r4, #0]
 801410a:	fb03 f302 	mul.w	r3, r3, r2
 801410e:	2001      	movs	r0, #1
 8014110:	f841 a003 	str.w	sl, [r1, r3]
 8014114:	81a5      	strh	r5, [r4, #12]
 8014116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801411a:	8922      	ldrh	r2, [r4, #8]
 801411c:	fbb5 f0f2 	udiv	r0, r5, r2
 8014120:	fb02 5510 	mls	r5, r2, r0, r5
 8014124:	b2ad      	uxth	r5, r5
 8014126:	6863      	ldr	r3, [r4, #4]
 8014128:	fbb3 f3f2 	udiv	r3, r3, r2
 801412c:	fb05 f503 	mul.w	r5, r5, r3
 8014130:	6823      	ldr	r3, [r4, #0]
 8014132:	2000      	movs	r0, #0
 8014134:	5158      	str	r0, [r3, r5]
 8014136:	eba9 0207 	sub.w	r2, r9, r7
 801413a:	eb08 0107 	add.w	r1, r8, r7
 801413e:	4630      	mov	r0, r6
 8014140:	f7f7 f8fc 	bl	800b33c <ucdr_init_buffer>
 8014144:	4630      	mov	r0, r6
 8014146:	4904      	ldr	r1, [pc, #16]	; (8014158 <uxr_next_input_reliable_buffer_available+0xf8>)
 8014148:	4622      	mov	r2, r4
 801414a:	f7f7 f8cd 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 801414e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014152:	2001      	movs	r0, #1
 8014154:	e7c8      	b.n	80140e8 <uxr_next_input_reliable_buffer_available+0x88>
 8014156:	bf00      	nop
 8014158:	08013e75 	.word	0x08013e75

0801415c <uxr_process_heartbeat>:
 801415c:	b538      	push	{r3, r4, r5, lr}
 801415e:	4611      	mov	r1, r2
 8014160:	4604      	mov	r4, r0
 8014162:	89c0      	ldrh	r0, [r0, #14]
 8014164:	4615      	mov	r5, r2
 8014166:	f000 fba9 	bl	80148bc <uxr_seq_num_cmp>
 801416a:	2800      	cmp	r0, #0
 801416c:	bfb8      	it	lt
 801416e:	81e5      	strhlt	r5, [r4, #14]
 8014170:	bd38      	pop	{r3, r4, r5, pc}
 8014172:	bf00      	nop

08014174 <uxr_compute_acknack>:
 8014174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014178:	8903      	ldrh	r3, [r0, #8]
 801417a:	8986      	ldrh	r6, [r0, #12]
 801417c:	4604      	mov	r4, r0
 801417e:	460d      	mov	r5, r1
 8014180:	b1d3      	cbz	r3, 80141b8 <uxr_compute_acknack+0x44>
 8014182:	4630      	mov	r0, r6
 8014184:	2701      	movs	r7, #1
 8014186:	e003      	b.n	8014190 <uxr_compute_acknack+0x1c>
 8014188:	4567      	cmp	r7, ip
 801418a:	d215      	bcs.n	80141b8 <uxr_compute_acknack+0x44>
 801418c:	89a0      	ldrh	r0, [r4, #12]
 801418e:	3701      	adds	r7, #1
 8014190:	b2b9      	uxth	r1, r7
 8014192:	f000 fb8b 	bl	80148ac <uxr_seq_num_add>
 8014196:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801419a:	fbb0 f2fc 	udiv	r2, r0, ip
 801419e:	e9d4 1300 	ldrd	r1, r3, [r4]
 80141a2:	fb0c 0212 	mls	r2, ip, r2, r0
 80141a6:	b292      	uxth	r2, r2
 80141a8:	fbb3 f3fc 	udiv	r3, r3, ip
 80141ac:	fb02 1303 	mla	r3, r2, r3, r1
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d1e8      	bne.n	8014188 <uxr_compute_acknack+0x14>
 80141b6:	4606      	mov	r6, r0
 80141b8:	802e      	strh	r6, [r5, #0]
 80141ba:	4630      	mov	r0, r6
 80141bc:	2101      	movs	r1, #1
 80141be:	89e6      	ldrh	r6, [r4, #14]
 80141c0:	f000 fb78 	bl	80148b4 <uxr_seq_num_sub>
 80141c4:	4601      	mov	r1, r0
 80141c6:	4630      	mov	r0, r6
 80141c8:	f000 fb74 	bl	80148b4 <uxr_seq_num_sub>
 80141cc:	4606      	mov	r6, r0
 80141ce:	b318      	cbz	r0, 8014218 <uxr_compute_acknack+0xa4>
 80141d0:	f04f 0900 	mov.w	r9, #0
 80141d4:	464f      	mov	r7, r9
 80141d6:	f04f 0801 	mov.w	r8, #1
 80141da:	fa1f f189 	uxth.w	r1, r9
 80141de:	8828      	ldrh	r0, [r5, #0]
 80141e0:	f000 fb64 	bl	80148ac <uxr_seq_num_add>
 80141e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80141e8:	6822      	ldr	r2, [r4, #0]
 80141ea:	fbb0 f1fc 	udiv	r1, r0, ip
 80141ee:	fb01 011c 	mls	r1, r1, ip, r0
 80141f2:	b289      	uxth	r1, r1
 80141f4:	6863      	ldr	r3, [r4, #4]
 80141f6:	fbb3 f3fc 	udiv	r3, r3, ip
 80141fa:	fb01 2303 	mla	r3, r1, r3, r2
 80141fe:	fa08 f209 	lsl.w	r2, r8, r9
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f109 0901 	add.w	r9, r9, #1
 8014208:	b90b      	cbnz	r3, 801420e <uxr_compute_acknack+0x9a>
 801420a:	4317      	orrs	r7, r2
 801420c:	b2bf      	uxth	r7, r7
 801420e:	454e      	cmp	r6, r9
 8014210:	d1e3      	bne.n	80141da <uxr_compute_acknack+0x66>
 8014212:	4638      	mov	r0, r7
 8014214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014218:	4607      	mov	r7, r0
 801421a:	4638      	mov	r0, r7
 801421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014220 <uxr_init_output_best_effort_stream>:
 8014220:	b410      	push	{r4}
 8014222:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8014226:	81c4      	strh	r4, [r0, #14]
 8014228:	e9c0 1300 	strd	r1, r3, [r0]
 801422c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014230:	7303      	strb	r3, [r0, #12]
 8014232:	6082      	str	r2, [r0, #8]
 8014234:	4770      	bx	lr
 8014236:	bf00      	nop

08014238 <uxr_reset_output_best_effort_stream>:
 8014238:	7b02      	ldrb	r2, [r0, #12]
 801423a:	6042      	str	r2, [r0, #4]
 801423c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014240:	81c3      	strh	r3, [r0, #14]
 8014242:	4770      	bx	lr

08014244 <uxr_prepare_best_effort_buffer_to_write>:
 8014244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014246:	4604      	mov	r4, r0
 8014248:	b083      	sub	sp, #12
 801424a:	6840      	ldr	r0, [r0, #4]
 801424c:	460d      	mov	r5, r1
 801424e:	4616      	mov	r6, r2
 8014250:	f7fb f87a 	bl	800f348 <uxr_submessage_padding>
 8014254:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8014258:	4410      	add	r0, r2
 801425a:	1942      	adds	r2, r0, r5
 801425c:	4293      	cmp	r3, r2
 801425e:	bf2c      	ite	cs
 8014260:	2701      	movcs	r7, #1
 8014262:	2700      	movcc	r7, #0
 8014264:	d202      	bcs.n	801426c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014266:	4638      	mov	r0, r7
 8014268:	b003      	add	sp, #12
 801426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801426c:	9000      	str	r0, [sp, #0]
 801426e:	6821      	ldr	r1, [r4, #0]
 8014270:	4630      	mov	r0, r6
 8014272:	2300      	movs	r3, #0
 8014274:	f7f7 f850 	bl	800b318 <ucdr_init_buffer_origin_offset>
 8014278:	6861      	ldr	r1, [r4, #4]
 801427a:	4638      	mov	r0, r7
 801427c:	4429      	add	r1, r5
 801427e:	6061      	str	r1, [r4, #4]
 8014280:	b003      	add	sp, #12
 8014282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014284 <uxr_prepare_best_effort_buffer_to_send>:
 8014284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014288:	6845      	ldr	r5, [r0, #4]
 801428a:	4604      	mov	r4, r0
 801428c:	7b00      	ldrb	r0, [r0, #12]
 801428e:	4285      	cmp	r5, r0
 8014290:	bf8c      	ite	hi
 8014292:	2701      	movhi	r7, #1
 8014294:	2700      	movls	r7, #0
 8014296:	d802      	bhi.n	801429e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8014298:	4638      	mov	r0, r7
 801429a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801429e:	4688      	mov	r8, r1
 80142a0:	89e0      	ldrh	r0, [r4, #14]
 80142a2:	2101      	movs	r1, #1
 80142a4:	4615      	mov	r5, r2
 80142a6:	461e      	mov	r6, r3
 80142a8:	f000 fb00 	bl	80148ac <uxr_seq_num_add>
 80142ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80142b0:	81e0      	strh	r0, [r4, #14]
 80142b2:	8030      	strh	r0, [r6, #0]
 80142b4:	f8c8 2000 	str.w	r2, [r8]
 80142b8:	602b      	str	r3, [r5, #0]
 80142ba:	7b23      	ldrb	r3, [r4, #12]
 80142bc:	6063      	str	r3, [r4, #4]
 80142be:	4638      	mov	r0, r7
 80142c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142c4 <on_full_output_buffer>:
 80142c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c6:	6802      	ldr	r2, [r0, #0]
 80142c8:	460d      	mov	r5, r1
 80142ca:	6809      	ldr	r1, [r1, #0]
 80142cc:	892f      	ldrh	r7, [r5, #8]
 80142ce:	686c      	ldr	r4, [r5, #4]
 80142d0:	fbb4 f4f7 	udiv	r4, r4, r7
 80142d4:	1a53      	subs	r3, r2, r1
 80142d6:	fbb3 f3f4 	udiv	r3, r3, r4
 80142da:	3301      	adds	r3, #1
 80142dc:	b29b      	uxth	r3, r3
 80142de:	fbb3 f2f7 	udiv	r2, r3, r7
 80142e2:	fb07 3312 	mls	r3, r7, r2, r3
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	fb04 f403 	mul.w	r4, r4, r3
 80142ec:	7b2f      	ldrb	r7, [r5, #12]
 80142ee:	590a      	ldr	r2, [r1, r4]
 80142f0:	6903      	ldr	r3, [r0, #16]
 80142f2:	443c      	add	r4, r7
 80142f4:	3408      	adds	r4, #8
 80142f6:	1bd2      	subs	r2, r2, r7
 80142f8:	4606      	mov	r6, r0
 80142fa:	4421      	add	r1, r4
 80142fc:	3a04      	subs	r2, #4
 80142fe:	f7f7 f815 	bl	800b32c <ucdr_init_buffer_origin>
 8014302:	4630      	mov	r0, r6
 8014304:	4902      	ldr	r1, [pc, #8]	; (8014310 <on_full_output_buffer+0x4c>)
 8014306:	462a      	mov	r2, r5
 8014308:	f7f6 ffee 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 801430c:	2000      	movs	r0, #0
 801430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014310:	080142c5 	.word	0x080142c5

08014314 <uxr_init_output_reliable_stream>:
 8014314:	b430      	push	{r4, r5}
 8014316:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801431a:	6001      	str	r1, [r0, #0]
 801431c:	8103      	strh	r3, [r0, #8]
 801431e:	6042      	str	r2, [r0, #4]
 8014320:	7304      	strb	r4, [r0, #12]
 8014322:	b1b3      	cbz	r3, 8014352 <uxr_init_output_reliable_stream+0x3e>
 8014324:	600c      	str	r4, [r1, #0]
 8014326:	8901      	ldrh	r1, [r0, #8]
 8014328:	2901      	cmp	r1, #1
 801432a:	d912      	bls.n	8014352 <uxr_init_output_reliable_stream+0x3e>
 801432c:	2201      	movs	r2, #1
 801432e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8014332:	fbb2 f3f1 	udiv	r3, r2, r1
 8014336:	fb01 2313 	mls	r3, r1, r3, r2
 801433a:	b29b      	uxth	r3, r3
 801433c:	fbb4 f1f1 	udiv	r1, r4, r1
 8014340:	fb03 f301 	mul.w	r3, r3, r1
 8014344:	7b01      	ldrb	r1, [r0, #12]
 8014346:	50e9      	str	r1, [r5, r3]
 8014348:	3201      	adds	r2, #1
 801434a:	8901      	ldrh	r1, [r0, #8]
 801434c:	b292      	uxth	r2, r2
 801434e:	4291      	cmp	r1, r2
 8014350:	d8ed      	bhi.n	801432e <uxr_init_output_reliable_stream+0x1a>
 8014352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014356:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801435a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801435e:	4b05      	ldr	r3, [pc, #20]	; (8014374 <uxr_init_output_reliable_stream+0x60>)
 8014360:	f8c0 300e 	str.w	r3, [r0, #14]
 8014364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014368:	2300      	movs	r3, #0
 801436a:	bc30      	pop	{r4, r5}
 801436c:	8242      	strh	r2, [r0, #18]
 801436e:	8403      	strh	r3, [r0, #32]
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop
 8014374:	ffff0000 	.word	0xffff0000

08014378 <uxr_reset_output_reliable_stream>:
 8014378:	8902      	ldrh	r2, [r0, #8]
 801437a:	b430      	push	{r4, r5}
 801437c:	b19a      	cbz	r2, 80143a6 <uxr_reset_output_reliable_stream+0x2e>
 801437e:	2400      	movs	r4, #0
 8014380:	4621      	mov	r1, r4
 8014382:	fbb1 f3f2 	udiv	r3, r1, r2
 8014386:	fb02 1313 	mls	r3, r2, r3, r1
 801438a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801438e:	b29b      	uxth	r3, r3
 8014390:	fbb1 f2f2 	udiv	r2, r1, r2
 8014394:	fb03 f302 	mul.w	r3, r3, r2
 8014398:	7b02      	ldrb	r2, [r0, #12]
 801439a:	50ea      	str	r2, [r5, r3]
 801439c:	3401      	adds	r4, #1
 801439e:	8902      	ldrh	r2, [r0, #8]
 80143a0:	b2a1      	uxth	r1, r4
 80143a2:	428a      	cmp	r2, r1
 80143a4:	d8ed      	bhi.n	8014382 <uxr_reset_output_reliable_stream+0xa>
 80143a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80143ae:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80143b2:	4b05      	ldr	r3, [pc, #20]	; (80143c8 <uxr_reset_output_reliable_stream+0x50>)
 80143b4:	f8c0 300e 	str.w	r3, [r0, #14]
 80143b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143bc:	2300      	movs	r3, #0
 80143be:	bc30      	pop	{r4, r5}
 80143c0:	8242      	strh	r2, [r0, #18]
 80143c2:	8403      	strh	r3, [r0, #32]
 80143c4:	4770      	bx	lr
 80143c6:	bf00      	nop
 80143c8:	ffff0000 	.word	0xffff0000

080143cc <uxr_prepare_reliable_buffer_to_write>:
 80143cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d0:	4604      	mov	r4, r0
 80143d2:	89c6      	ldrh	r6, [r0, #14]
 80143d4:	8900      	ldrh	r0, [r0, #8]
 80143d6:	f8d4 c000 	ldr.w	ip, [r4]
 80143da:	fbb6 f3f0 	udiv	r3, r6, r0
 80143de:	fb00 6313 	mls	r3, r0, r3, r6
 80143e2:	b091      	sub	sp, #68	; 0x44
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	6865      	ldr	r5, [r4, #4]
 80143e8:	fbb5 f5f0 	udiv	r5, r5, r0
 80143ec:	fb05 c303 	mla	r3, r5, r3, ip
 80143f0:	9204      	str	r2, [sp, #16]
 80143f2:	1d1a      	adds	r2, r3, #4
 80143f4:	f8d3 8000 	ldr.w	r8, [r3]
 80143f8:	f894 900c 	ldrb.w	r9, [r4, #12]
 80143fc:	9203      	str	r2, [sp, #12]
 80143fe:	468b      	mov	fp, r1
 8014400:	1f2f      	subs	r7, r5, #4
 8014402:	2800      	cmp	r0, #0
 8014404:	f000 814e 	beq.w	80146a4 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 8014408:	f04f 0e00 	mov.w	lr, #0
 801440c:	46f2      	mov	sl, lr
 801440e:	4672      	mov	r2, lr
 8014410:	fbb2 f3f0 	udiv	r3, r2, r0
 8014414:	fb00 2313 	mls	r3, r0, r3, r2
 8014418:	b29b      	uxth	r3, r3
 801441a:	fb05 c303 	mla	r3, r5, r3, ip
 801441e:	f10e 0e01 	add.w	lr, lr, #1
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	454b      	cmp	r3, r9
 8014426:	bf08      	it	eq
 8014428:	f10a 0a01 	addeq.w	sl, sl, #1
 801442c:	fa1f f28e 	uxth.w	r2, lr
 8014430:	bf08      	it	eq
 8014432:	fa1f fa8a 	uxtheq.w	sl, sl
 8014436:	4282      	cmp	r2, r0
 8014438:	d3ea      	bcc.n	8014410 <uxr_prepare_reliable_buffer_to_write+0x44>
 801443a:	4640      	mov	r0, r8
 801443c:	2104      	movs	r1, #4
 801443e:	f8cd a014 	str.w	sl, [sp, #20]
 8014442:	f7f6 ff7f 	bl	800b344 <ucdr_alignment>
 8014446:	4480      	add	r8, r0
 8014448:	eb08 020b 	add.w	r2, r8, fp
 801444c:	42ba      	cmp	r2, r7
 801444e:	f240 80cf 	bls.w	80145f0 <uxr_prepare_reliable_buffer_to_write+0x224>
 8014452:	7b22      	ldrb	r2, [r4, #12]
 8014454:	445a      	add	r2, fp
 8014456:	42ba      	cmp	r2, r7
 8014458:	f240 80b7 	bls.w	80145ca <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801445c:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8014460:	33fc      	adds	r3, #252	; 0xfc
 8014462:	b2ba      	uxth	r2, r7
 8014464:	4413      	add	r3, r2
 8014466:	b29b      	uxth	r3, r3
 8014468:	fb0a f903 	mul.w	r9, sl, r3
 801446c:	45d9      	cmp	r9, fp
 801446e:	9305      	str	r3, [sp, #20]
 8014470:	9306      	str	r3, [sp, #24]
 8014472:	f0c0 80b9 	bcc.w	80145e8 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8014476:	f108 0304 	add.w	r3, r8, #4
 801447a:	42bb      	cmp	r3, r7
 801447c:	f080 80dd 	bcs.w	801463a <uxr_prepare_reliable_buffer_to_write+0x26e>
 8014480:	f1a2 0904 	sub.w	r9, r2, #4
 8014484:	eba9 0908 	sub.w	r9, r9, r8
 8014488:	9b05      	ldr	r3, [sp, #20]
 801448a:	fa1f f989 	uxth.w	r9, r9
 801448e:	ebab 0b09 	sub.w	fp, fp, r9
 8014492:	fbbb f2f3 	udiv	r2, fp, r3
 8014496:	fb03 b312 	mls	r3, r3, r2, fp
 801449a:	2b00      	cmp	r3, #0
 801449c:	f000 80ca 	beq.w	8014634 <uxr_prepare_reliable_buffer_to_write+0x268>
 80144a0:	3201      	adds	r2, #1
 80144a2:	b292      	uxth	r2, r2
 80144a4:	4611      	mov	r1, r2
 80144a6:	9306      	str	r3, [sp, #24]
 80144a8:	4551      	cmp	r1, sl
 80144aa:	f200 809d 	bhi.w	80145e8 <uxr_prepare_reliable_buffer_to_write+0x21c>
 80144ae:	f10d 0b20 	add.w	fp, sp, #32
 80144b2:	2900      	cmp	r1, #0
 80144b4:	d042      	beq.n	801453c <uxr_prepare_reliable_buffer_to_write+0x170>
 80144b6:	f8cd 801c 	str.w	r8, [sp, #28]
 80144ba:	f04f 0a00 	mov.w	sl, #0
 80144be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80144c2:	9505      	str	r5, [sp, #20]
 80144c4:	f10d 0b20 	add.w	fp, sp, #32
 80144c8:	460d      	mov	r5, r1
 80144ca:	e000      	b.n	80144ce <uxr_prepare_reliable_buffer_to_write+0x102>
 80144cc:	46c1      	mov	r9, r8
 80144ce:	8920      	ldrh	r0, [r4, #8]
 80144d0:	fbb6 f1f0 	udiv	r1, r6, r0
 80144d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80144d8:	fb00 6111 	mls	r1, r0, r1, r6
 80144dc:	b289      	uxth	r1, r1
 80144de:	fbb2 f2f0 	udiv	r2, r2, r0
 80144e2:	fb01 f102 	mul.w	r1, r1, r2
 80144e6:	3104      	adds	r1, #4
 80144e8:	4419      	add	r1, r3
 80144ea:	463a      	mov	r2, r7
 80144ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	4658      	mov	r0, fp
 80144f4:	2300      	movs	r3, #0
 80144f6:	f7f6 ff0f 	bl	800b318 <ucdr_init_buffer_origin_offset>
 80144fa:	464a      	mov	r2, r9
 80144fc:	2300      	movs	r3, #0
 80144fe:	210d      	movs	r1, #13
 8014500:	4658      	mov	r0, fp
 8014502:	f7fa fee1 	bl	800f2c8 <uxr_buffer_submessage_header>
 8014506:	8920      	ldrh	r0, [r4, #8]
 8014508:	fbb6 f3f0 	udiv	r3, r6, r0
 801450c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014510:	fb00 6313 	mls	r3, r0, r3, r6
 8014514:	b29b      	uxth	r3, r3
 8014516:	fbb1 f1f0 	udiv	r1, r1, r0
 801451a:	fb03 f301 	mul.w	r3, r3, r1
 801451e:	4630      	mov	r0, r6
 8014520:	50d7      	str	r7, [r2, r3]
 8014522:	2101      	movs	r1, #1
 8014524:	f000 f9c2 	bl	80148ac <uxr_seq_num_add>
 8014528:	f10a 0a01 	add.w	sl, sl, #1
 801452c:	fa1f f38a 	uxth.w	r3, sl
 8014530:	429d      	cmp	r5, r3
 8014532:	4606      	mov	r6, r0
 8014534:	d8ca      	bhi.n	80144cc <uxr_prepare_reliable_buffer_to_write+0x100>
 8014536:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801453a:	9d05      	ldr	r5, [sp, #20]
 801453c:	8921      	ldrh	r1, [r4, #8]
 801453e:	fbb6 f3f1 	udiv	r3, r6, r1
 8014542:	fb01 6313 	mls	r3, r1, r3, r6
 8014546:	b29b      	uxth	r3, r3
 8014548:	6862      	ldr	r2, [r4, #4]
 801454a:	fbb2 f2f1 	udiv	r2, r2, r1
 801454e:	6821      	ldr	r1, [r4, #0]
 8014550:	fb03 f302 	mul.w	r3, r3, r2
 8014554:	3304      	adds	r3, #4
 8014556:	4419      	add	r1, r3
 8014558:	463a      	mov	r2, r7
 801455a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801455e:	9300      	str	r3, [sp, #0]
 8014560:	4658      	mov	r0, fp
 8014562:	2300      	movs	r3, #0
 8014564:	f7f6 fed8 	bl	800b318 <ucdr_init_buffer_origin_offset>
 8014568:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801456c:	4658      	mov	r0, fp
 801456e:	fa1f f289 	uxth.w	r2, r9
 8014572:	2302      	movs	r3, #2
 8014574:	210d      	movs	r1, #13
 8014576:	f7fa fea7 	bl	800f2c8 <uxr_buffer_submessage_header>
 801457a:	8921      	ldrh	r1, [r4, #8]
 801457c:	7b27      	ldrb	r7, [r4, #12]
 801457e:	fbb6 f0f1 	udiv	r0, r6, r1
 8014582:	e9d4 3200 	ldrd	r3, r2, [r4]
 8014586:	fb01 6010 	mls	r0, r1, r0, r6
 801458a:	b280      	uxth	r0, r0
 801458c:	fbb2 f2f1 	udiv	r2, r2, r1
 8014590:	3704      	adds	r7, #4
 8014592:	fb00 f002 	mul.w	r0, r0, r2
 8014596:	f1a5 0208 	sub.w	r2, r5, #8
 801459a:	464d      	mov	r5, r9
 801459c:	443d      	add	r5, r7
 801459e:	9f03      	ldr	r7, [sp, #12]
 80145a0:	501d      	str	r5, [r3, r0]
 80145a2:	f108 0104 	add.w	r1, r8, #4
 80145a6:	9d04      	ldr	r5, [sp, #16]
 80145a8:	440f      	add	r7, r1
 80145aa:	eba2 0208 	sub.w	r2, r2, r8
 80145ae:	4639      	mov	r1, r7
 80145b0:	4628      	mov	r0, r5
 80145b2:	f7f6 fec3 	bl	800b33c <ucdr_init_buffer>
 80145b6:	4628      	mov	r0, r5
 80145b8:	493b      	ldr	r1, [pc, #236]	; (80146a8 <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 80145ba:	4622      	mov	r2, r4
 80145bc:	f7f6 fe94 	bl	800b2e8 <ucdr_set_on_full_buffer_callback>
 80145c0:	2001      	movs	r0, #1
 80145c2:	81e6      	strh	r6, [r4, #14]
 80145c4:	b011      	add	sp, #68	; 0x44
 80145c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ca:	2101      	movs	r1, #1
 80145cc:	89e0      	ldrh	r0, [r4, #14]
 80145ce:	f000 f96d 	bl	80148ac <uxr_seq_num_add>
 80145d2:	8921      	ldrh	r1, [r4, #8]
 80145d4:	4605      	mov	r5, r0
 80145d6:	8a60      	ldrh	r0, [r4, #18]
 80145d8:	f000 f968 	bl	80148ac <uxr_seq_num_add>
 80145dc:	4601      	mov	r1, r0
 80145de:	4628      	mov	r0, r5
 80145e0:	f000 f96c 	bl	80148bc <uxr_seq_num_cmp>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	dd42      	ble.n	801466e <uxr_prepare_reliable_buffer_to_write+0x2a2>
 80145e8:	2000      	movs	r0, #0
 80145ea:	b011      	add	sp, #68	; 0x44
 80145ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f0:	8921      	ldrh	r1, [r4, #8]
 80145f2:	8a60      	ldrh	r0, [r4, #18]
 80145f4:	9205      	str	r2, [sp, #20]
 80145f6:	f000 f959 	bl	80148ac <uxr_seq_num_add>
 80145fa:	4601      	mov	r1, r0
 80145fc:	4630      	mov	r0, r6
 80145fe:	f000 f95d 	bl	80148bc <uxr_seq_num_cmp>
 8014602:	2800      	cmp	r0, #0
 8014604:	9a05      	ldr	r2, [sp, #20]
 8014606:	dcef      	bgt.n	80145e8 <uxr_prepare_reliable_buffer_to_write+0x21c>
 8014608:	8920      	ldrh	r0, [r4, #8]
 801460a:	fbb6 f3f0 	udiv	r3, r6, r0
 801460e:	e9d4 4100 	ldrd	r4, r1, [r4]
 8014612:	fb00 6313 	mls	r3, r0, r3, r6
 8014616:	b29b      	uxth	r3, r3
 8014618:	fbb1 f1f0 	udiv	r1, r1, r0
 801461c:	fb03 f301 	mul.w	r3, r3, r1
 8014620:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014624:	50e2      	str	r2, [r4, r3]
 8014626:	f8cd 8000 	str.w	r8, [sp]
 801462a:	2300      	movs	r3, #0
 801462c:	f7f6 fe74 	bl	800b318 <ucdr_init_buffer_origin_offset>
 8014630:	2001      	movs	r0, #1
 8014632:	e7da      	b.n	80145ea <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014634:	b293      	uxth	r3, r2
 8014636:	4619      	mov	r1, r3
 8014638:	e736      	b.n	80144a8 <uxr_prepare_reliable_buffer_to_write+0xdc>
 801463a:	4630      	mov	r0, r6
 801463c:	2101      	movs	r1, #1
 801463e:	9207      	str	r2, [sp, #28]
 8014640:	f000 f934 	bl	80148ac <uxr_seq_num_add>
 8014644:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014648:	fbb0 f1fc 	udiv	r1, r0, ip
 801464c:	fb0c 0111 	mls	r1, ip, r1, r0
 8014650:	b289      	uxth	r1, r1
 8014652:	6863      	ldr	r3, [r4, #4]
 8014654:	fbb3 f3fc 	udiv	r3, r3, ip
 8014658:	fb01 f103 	mul.w	r1, r1, r3
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	9a07      	ldr	r2, [sp, #28]
 8014660:	3104      	adds	r1, #4
 8014662:	440b      	add	r3, r1
 8014664:	4606      	mov	r6, r0
 8014666:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801466a:	9303      	str	r3, [sp, #12]
 801466c:	e708      	b.n	8014480 <uxr_prepare_reliable_buffer_to_write+0xb4>
 801466e:	8920      	ldrh	r0, [r4, #8]
 8014670:	fbb5 f3f0 	udiv	r3, r5, r0
 8014674:	fb00 5313 	mls	r3, r0, r3, r5
 8014678:	b29b      	uxth	r3, r3
 801467a:	6862      	ldr	r2, [r4, #4]
 801467c:	6821      	ldr	r1, [r4, #0]
 801467e:	fbb2 f0f0 	udiv	r0, r2, r0
 8014682:	fb03 f300 	mul.w	r3, r3, r0
 8014686:	7b22      	ldrb	r2, [r4, #12]
 8014688:	9804      	ldr	r0, [sp, #16]
 801468a:	3304      	adds	r3, #4
 801468c:	4419      	add	r1, r3
 801468e:	445a      	add	r2, fp
 8014690:	f841 2c04 	str.w	r2, [r1, #-4]
 8014694:	7b23      	ldrb	r3, [r4, #12]
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	2300      	movs	r3, #0
 801469a:	f7f6 fe3d 	bl	800b318 <ucdr_init_buffer_origin_offset>
 801469e:	81e5      	strh	r5, [r4, #14]
 80146a0:	2001      	movs	r0, #1
 80146a2:	e7a2      	b.n	80145ea <uxr_prepare_reliable_buffer_to_write+0x21e>
 80146a4:	4682      	mov	sl, r0
 80146a6:	e6c8      	b.n	801443a <uxr_prepare_reliable_buffer_to_write+0x6e>
 80146a8:	080142c5 	.word	0x080142c5

080146ac <uxr_prepare_next_reliable_buffer_to_send>:
 80146ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b0:	4605      	mov	r5, r0
 80146b2:	4688      	mov	r8, r1
 80146b4:	8a00      	ldrh	r0, [r0, #16]
 80146b6:	2101      	movs	r1, #1
 80146b8:	4617      	mov	r7, r2
 80146ba:	461e      	mov	r6, r3
 80146bc:	f000 f8f6 	bl	80148ac <uxr_seq_num_add>
 80146c0:	8030      	strh	r0, [r6, #0]
 80146c2:	892a      	ldrh	r2, [r5, #8]
 80146c4:	fbb0 f3f2 	udiv	r3, r0, r2
 80146c8:	fb02 0413 	mls	r4, r2, r3, r0
 80146cc:	b2a4      	uxth	r4, r4
 80146ce:	686b      	ldr	r3, [r5, #4]
 80146d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80146d4:	682b      	ldr	r3, [r5, #0]
 80146d6:	89e9      	ldrh	r1, [r5, #14]
 80146d8:	fb04 f402 	mul.w	r4, r4, r2
 80146dc:	3404      	adds	r4, #4
 80146de:	4423      	add	r3, r4
 80146e0:	f8c8 3000 	str.w	r3, [r8]
 80146e4:	682b      	ldr	r3, [r5, #0]
 80146e6:	441c      	add	r4, r3
 80146e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80146ec:	603b      	str	r3, [r7, #0]
 80146ee:	f000 f8e5 	bl	80148bc <uxr_seq_num_cmp>
 80146f2:	2800      	cmp	r0, #0
 80146f4:	dd02      	ble.n	80146fc <uxr_prepare_next_reliable_buffer_to_send+0x50>
 80146f6:	2000      	movs	r0, #0
 80146f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	7b2b      	ldrb	r3, [r5, #12]
 8014700:	429a      	cmp	r2, r3
 8014702:	d9f8      	bls.n	80146f6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014704:	8a69      	ldrh	r1, [r5, #18]
 8014706:	8a28      	ldrh	r0, [r5, #16]
 8014708:	f000 f8d4 	bl	80148b4 <uxr_seq_num_sub>
 801470c:	892b      	ldrh	r3, [r5, #8]
 801470e:	4283      	cmp	r3, r0
 8014710:	d0f1      	beq.n	80146f6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014712:	8830      	ldrh	r0, [r6, #0]
 8014714:	89eb      	ldrh	r3, [r5, #14]
 8014716:	8228      	strh	r0, [r5, #16]
 8014718:	4298      	cmp	r0, r3
 801471a:	d002      	beq.n	8014722 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 801471c:	2001      	movs	r0, #1
 801471e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014722:	2101      	movs	r1, #1
 8014724:	f000 f8c2 	bl	80148ac <uxr_seq_num_add>
 8014728:	81e8      	strh	r0, [r5, #14]
 801472a:	2001      	movs	r0, #1
 801472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014730 <uxr_update_output_stream_heartbeat_timestamp>:
 8014730:	b5d0      	push	{r4, r6, r7, lr}
 8014732:	8a01      	ldrh	r1, [r0, #16]
 8014734:	4604      	mov	r4, r0
 8014736:	8a40      	ldrh	r0, [r0, #18]
 8014738:	4616      	mov	r6, r2
 801473a:	461f      	mov	r7, r3
 801473c:	f000 f8be 	bl	80148bc <uxr_seq_num_cmp>
 8014740:	2800      	cmp	r0, #0
 8014742:	db07      	blt.n	8014754 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014748:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801474c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014750:	2000      	movs	r0, #0
 8014752:	bdd0      	pop	{r4, r6, r7, pc}
 8014754:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014758:	b948      	cbnz	r0, 801476e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801475a:	2301      	movs	r3, #1
 801475c:	f884 3020 	strb.w	r3, [r4, #32]
 8014760:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8014764:	f147 0200 	adc.w	r2, r7, #0
 8014768:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801476c:	bdd0      	pop	{r4, r6, r7, pc}
 801476e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014772:	4296      	cmp	r6, r2
 8014774:	eb77 0303 	sbcs.w	r3, r7, r3
 8014778:	bfa5      	ittet	ge
 801477a:	3001      	addge	r0, #1
 801477c:	f884 0020 	strbge.w	r0, [r4, #32]
 8014780:	2000      	movlt	r0, #0
 8014782:	2001      	movge	r0, #1
 8014784:	e7ec      	b.n	8014760 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014786:	bf00      	nop

08014788 <uxr_begin_output_nack_buffer_it>:
 8014788:	8a40      	ldrh	r0, [r0, #18]
 801478a:	4770      	bx	lr

0801478c <uxr_next_reliable_nack_buffer_to_send>:
 801478c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014790:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8014794:	f1b9 0f00 	cmp.w	r9, #0
 8014798:	d011      	beq.n	80147be <uxr_next_reliable_nack_buffer_to_send+0x32>
 801479a:	4605      	mov	r5, r0
 801479c:	8818      	ldrh	r0, [r3, #0]
 801479e:	460f      	mov	r7, r1
 80147a0:	4690      	mov	r8, r2
 80147a2:	461e      	mov	r6, r3
 80147a4:	2101      	movs	r1, #1
 80147a6:	f000 f881 	bl	80148ac <uxr_seq_num_add>
 80147aa:	8030      	strh	r0, [r6, #0]
 80147ac:	8a29      	ldrh	r1, [r5, #16]
 80147ae:	f000 f885 	bl	80148bc <uxr_seq_num_cmp>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	dd06      	ble.n	80147c4 <uxr_next_reliable_nack_buffer_to_send+0x38>
 80147b6:	f04f 0900 	mov.w	r9, #0
 80147ba:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 80147be:	4648      	mov	r0, r9
 80147c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147c4:	892a      	ldrh	r2, [r5, #8]
 80147c6:	8830      	ldrh	r0, [r6, #0]
 80147c8:	fbb0 f4f2 	udiv	r4, r0, r2
 80147cc:	fb02 0414 	mls	r4, r2, r4, r0
 80147d0:	b2a4      	uxth	r4, r4
 80147d2:	686b      	ldr	r3, [r5, #4]
 80147d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80147d8:	682b      	ldr	r3, [r5, #0]
 80147da:	fb04 f402 	mul.w	r4, r4, r2
 80147de:	3404      	adds	r4, #4
 80147e0:	4423      	add	r3, r4
 80147e2:	603b      	str	r3, [r7, #0]
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	441c      	add	r4, r3
 80147e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80147ec:	f8c8 3000 	str.w	r3, [r8]
 80147f0:	7b2a      	ldrb	r2, [r5, #12]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d0d6      	beq.n	80147a4 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80147f6:	4648      	mov	r0, r9
 80147f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080147fc <uxr_process_acknack>:
 80147fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147fe:	4604      	mov	r4, r0
 8014800:	460e      	mov	r6, r1
 8014802:	4610      	mov	r0, r2
 8014804:	2101      	movs	r1, #1
 8014806:	f000 f855 	bl	80148b4 <uxr_seq_num_sub>
 801480a:	8a61      	ldrh	r1, [r4, #18]
 801480c:	f000 f852 	bl	80148b4 <uxr_seq_num_sub>
 8014810:	b1c0      	cbz	r0, 8014844 <uxr_process_acknack+0x48>
 8014812:	4605      	mov	r5, r0
 8014814:	2700      	movs	r7, #0
 8014816:	2101      	movs	r1, #1
 8014818:	8a60      	ldrh	r0, [r4, #18]
 801481a:	f000 f847 	bl	80148ac <uxr_seq_num_add>
 801481e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014822:	fbb0 f3fc 	udiv	r3, r0, ip
 8014826:	e9d4 2100 	ldrd	r2, r1, [r4]
 801482a:	fb0c 0313 	mls	r3, ip, r3, r0
 801482e:	b29b      	uxth	r3, r3
 8014830:	fbb1 f1fc 	udiv	r1, r1, ip
 8014834:	3701      	adds	r7, #1
 8014836:	fb03 f301 	mul.w	r3, r3, r1
 801483a:	42bd      	cmp	r5, r7
 801483c:	7b21      	ldrb	r1, [r4, #12]
 801483e:	8260      	strh	r0, [r4, #18]
 8014840:	50d1      	str	r1, [r2, r3]
 8014842:	d1e8      	bne.n	8014816 <uxr_process_acknack+0x1a>
 8014844:	3e00      	subs	r6, #0
 8014846:	f04f 0300 	mov.w	r3, #0
 801484a:	bf18      	it	ne
 801484c:	2601      	movne	r6, #1
 801484e:	f884 3020 	strb.w	r3, [r4, #32]
 8014852:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8014856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014858 <uxr_is_output_up_to_date>:
 8014858:	8a01      	ldrh	r1, [r0, #16]
 801485a:	8a40      	ldrh	r0, [r0, #18]
 801485c:	b508      	push	{r3, lr}
 801485e:	f000 f82d 	bl	80148bc <uxr_seq_num_cmp>
 8014862:	fab0 f080 	clz	r0, r0
 8014866:	0940      	lsrs	r0, r0, #5
 8014868:	bd08      	pop	{r3, pc}
 801486a:	bf00      	nop

0801486c <get_available_free_slots>:
 801486c:	8901      	ldrh	r1, [r0, #8]
 801486e:	b1d9      	cbz	r1, 80148a8 <get_available_free_slots+0x3c>
 8014870:	b4f0      	push	{r4, r5, r6, r7}
 8014872:	2400      	movs	r4, #0
 8014874:	6845      	ldr	r5, [r0, #4]
 8014876:	6807      	ldr	r7, [r0, #0]
 8014878:	7b06      	ldrb	r6, [r0, #12]
 801487a:	fbb5 f5f1 	udiv	r5, r5, r1
 801487e:	4620      	mov	r0, r4
 8014880:	4622      	mov	r2, r4
 8014882:	fbb2 f3f1 	udiv	r3, r2, r1
 8014886:	fb01 2313 	mls	r3, r1, r3, r2
 801488a:	b29b      	uxth	r3, r3
 801488c:	fb05 7303 	mla	r3, r5, r3, r7
 8014890:	3401      	adds	r4, #1
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	429e      	cmp	r6, r3
 8014896:	bf08      	it	eq
 8014898:	3001      	addeq	r0, #1
 801489a:	b2a2      	uxth	r2, r4
 801489c:	bf08      	it	eq
 801489e:	b280      	uxtheq	r0, r0
 80148a0:	428a      	cmp	r2, r1
 80148a2:	d3ee      	bcc.n	8014882 <get_available_free_slots+0x16>
 80148a4:	bcf0      	pop	{r4, r5, r6, r7}
 80148a6:	4770      	bx	lr
 80148a8:	4608      	mov	r0, r1
 80148aa:	4770      	bx	lr

080148ac <uxr_seq_num_add>:
 80148ac:	4408      	add	r0, r1
 80148ae:	b280      	uxth	r0, r0
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop

080148b4 <uxr_seq_num_sub>:
 80148b4:	1a40      	subs	r0, r0, r1
 80148b6:	b280      	uxth	r0, r0
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop

080148bc <uxr_seq_num_cmp>:
 80148bc:	4288      	cmp	r0, r1
 80148be:	d011      	beq.n	80148e4 <uxr_seq_num_cmp+0x28>
 80148c0:	d309      	bcc.n	80148d6 <uxr_seq_num_cmp+0x1a>
 80148c2:	4288      	cmp	r0, r1
 80148c4:	d910      	bls.n	80148e8 <uxr_seq_num_cmp+0x2c>
 80148c6:	1a40      	subs	r0, r0, r1
 80148c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80148cc:	bfd4      	ite	le
 80148ce:	2001      	movle	r0, #1
 80148d0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80148d4:	4770      	bx	lr
 80148d6:	1a0b      	subs	r3, r1, r0
 80148d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148dc:	daf1      	bge.n	80148c2 <uxr_seq_num_cmp+0x6>
 80148de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148e2:	4770      	bx	lr
 80148e4:	2000      	movs	r0, #0
 80148e6:	4770      	bx	lr
 80148e8:	2001      	movs	r0, #1
 80148ea:	4770      	bx	lr

080148ec <uxr_init_framing_io>:
 80148ec:	2300      	movs	r3, #0
 80148ee:	7041      	strb	r1, [r0, #1]
 80148f0:	7003      	strb	r3, [r0, #0]
 80148f2:	8583      	strh	r3, [r0, #44]	; 0x2c
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop

080148f8 <uxr_write_framed_msg>:
 80148f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148fc:	7845      	ldrb	r5, [r0, #1]
 80148fe:	b085      	sub	sp, #20
 8014900:	4604      	mov	r4, r0
 8014902:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8014906:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 801490a:	f1bc 0f01 	cmp.w	ip, #1
 801490e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8014912:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014916:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 801491a:	460e      	mov	r6, r1
 801491c:	4617      	mov	r7, r2
 801491e:	469b      	mov	fp, r3
 8014920:	f240 8116 	bls.w	8014b50 <uxr_write_framed_msg+0x258>
 8014924:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014928:	2302      	movs	r3, #2
 801492a:	2a01      	cmp	r2, #1
 801492c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014930:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014934:	f240 8091 	bls.w	8014a5a <uxr_write_framed_msg+0x162>
 8014938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801493a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801493e:	b2d9      	uxtb	r1, r3
 8014940:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014944:	2203      	movs	r2, #3
 8014946:	2b01      	cmp	r3, #1
 8014948:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801494c:	f240 809a 	bls.w	8014a84 <uxr_write_framed_msg+0x18c>
 8014950:	18a3      	adds	r3, r4, r2
 8014952:	3201      	adds	r2, #1
 8014954:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8014958:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801495c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801495e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014962:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014966:	2901      	cmp	r1, #1
 8014968:	eb04 0102 	add.w	r1, r4, r2
 801496c:	f240 8101 	bls.w	8014b72 <uxr_write_framed_msg+0x27a>
 8014970:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8014974:	3201      	adds	r2, #1
 8014976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014978:	b2d2      	uxtb	r2, r2
 801497a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801497e:	2b00      	cmp	r3, #0
 8014980:	f000 8106 	beq.w	8014b90 <uxr_write_framed_msg+0x298>
 8014984:	f04f 0a00 	mov.w	sl, #0
 8014988:	46d1      	mov	r9, sl
 801498a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801498e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014992:	2901      	cmp	r1, #1
 8014994:	f240 80a3 	bls.w	8014ade <uxr_write_framed_msg+0x1e6>
 8014998:	2a29      	cmp	r2, #41	; 0x29
 801499a:	d87f      	bhi.n	8014a9c <uxr_write_framed_msg+0x1a4>
 801499c:	18a1      	adds	r1, r4, r2
 801499e:	3201      	adds	r2, #1
 80149a0:	b2d2      	uxtb	r2, r2
 80149a2:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80149a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80149aa:	ea8a 0303 	eor.w	r3, sl, r3
 80149ae:	4984      	ldr	r1, [pc, #528]	; (8014bc0 <uxr_write_framed_msg+0x2c8>)
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	f109 0901 	add.w	r9, r9, #1
 80149b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149ba:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80149be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149c0:	454b      	cmp	r3, r9
 80149c2:	d8e2      	bhi.n	801498a <uxr_write_framed_msg+0x92>
 80149c4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80149c8:	fa5f f98a 	uxtb.w	r9, sl
 80149cc:	9301      	str	r3, [sp, #4]
 80149ce:	f04f 0b00 	mov.w	fp, #0
 80149d2:	f88d 900c 	strb.w	r9, [sp, #12]
 80149d6:	f88d 300d 	strb.w	r3, [sp, #13]
 80149da:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80149de:	fa5f f18a 	uxtb.w	r1, sl
 80149e2:	2901      	cmp	r1, #1
 80149e4:	d920      	bls.n	8014a28 <uxr_write_framed_msg+0x130>
 80149e6:	2a29      	cmp	r2, #41	; 0x29
 80149e8:	f240 808b 	bls.w	8014b02 <uxr_write_framed_msg+0x20a>
 80149ec:	2500      	movs	r5, #0
 80149ee:	e000      	b.n	80149f2 <uxr_write_framed_msg+0xfa>
 80149f0:	b160      	cbz	r0, 8014a0c <uxr_write_framed_msg+0x114>
 80149f2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80149f6:	1b52      	subs	r2, r2, r5
 80149f8:	4421      	add	r1, r4
 80149fa:	4643      	mov	r3, r8
 80149fc:	4638      	mov	r0, r7
 80149fe:	47b0      	blx	r6
 8014a00:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014a04:	4405      	add	r5, r0
 8014a06:	4295      	cmp	r5, r2
 8014a08:	d3f2      	bcc.n	80149f0 <uxr_write_framed_msg+0xf8>
 8014a0a:	d003      	beq.n	8014a14 <uxr_write_framed_msg+0x11c>
 8014a0c:	2000      	movs	r0, #0
 8014a0e:	b005      	add	sp, #20
 8014a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a14:	fa5f f18a 	uxtb.w	r1, sl
 8014a18:	f04f 0300 	mov.w	r3, #0
 8014a1c:	2901      	cmp	r1, #1
 8014a1e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014a22:	f04f 0200 	mov.w	r2, #0
 8014a26:	d86c      	bhi.n	8014b02 <uxr_write_framed_msg+0x20a>
 8014a28:	1c51      	adds	r1, r2, #1
 8014a2a:	b2c9      	uxtb	r1, r1
 8014a2c:	2929      	cmp	r1, #41	; 0x29
 8014a2e:	d8dd      	bhi.n	80149ec <uxr_write_framed_msg+0xf4>
 8014a30:	18a0      	adds	r0, r4, r2
 8014a32:	3202      	adds	r2, #2
 8014a34:	f089 0920 	eor.w	r9, r9, #32
 8014a38:	b2d2      	uxtb	r2, r2
 8014a3a:	4659      	mov	r1, fp
 8014a3c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014a40:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8014a44:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014a48:	f04f 0b01 	mov.w	fp, #1
 8014a4c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014a50:	2900      	cmp	r1, #0
 8014a52:	d162      	bne.n	8014b1a <uxr_write_framed_msg+0x222>
 8014a54:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014a58:	e7bf      	b.n	80149da <uxr_write_framed_msg+0xe2>
 8014a5a:	2204      	movs	r2, #4
 8014a5c:	2503      	movs	r5, #3
 8014a5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014a60:	4423      	add	r3, r4
 8014a62:	b2c9      	uxtb	r1, r1
 8014a64:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8014a68:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8014a6c:	4425      	add	r5, r4
 8014a6e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014a72:	f080 0020 	eor.w	r0, r0, #32
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8014a7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014a80:	f63f af66 	bhi.w	8014950 <uxr_write_framed_msg+0x58>
 8014a84:	18a3      	adds	r3, r4, r2
 8014a86:	f081 0120 	eor.w	r1, r1, #32
 8014a8a:	3202      	adds	r2, #2
 8014a8c:	207d      	movs	r0, #125	; 0x7d
 8014a8e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8014a92:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8014a96:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014a9a:	e75f      	b.n	801495c <uxr_write_framed_msg+0x64>
 8014a9c:	2500      	movs	r5, #0
 8014a9e:	e001      	b.n	8014aa4 <uxr_write_framed_msg+0x1ac>
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d0b3      	beq.n	8014a0c <uxr_write_framed_msg+0x114>
 8014aa4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014aa8:	1b52      	subs	r2, r2, r5
 8014aaa:	4421      	add	r1, r4
 8014aac:	4643      	mov	r3, r8
 8014aae:	4638      	mov	r0, r7
 8014ab0:	47b0      	blx	r6
 8014ab2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014ab6:	4405      	add	r5, r0
 8014ab8:	4295      	cmp	r5, r2
 8014aba:	d3f1      	bcc.n	8014aa0 <uxr_write_framed_msg+0x1a8>
 8014abc:	d1a6      	bne.n	8014a0c <uxr_write_framed_msg+0x114>
 8014abe:	f04f 0300 	mov.w	r3, #0
 8014ac2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ac8:	454b      	cmp	r3, r9
 8014aca:	d971      	bls.n	8014bb0 <uxr_write_framed_msg+0x2b8>
 8014acc:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8014ad0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014ad4:	2901      	cmp	r1, #1
 8014ad6:	f04f 0200 	mov.w	r2, #0
 8014ada:	f63f af5d 	bhi.w	8014998 <uxr_write_framed_msg+0xa0>
 8014ade:	1c51      	adds	r1, r2, #1
 8014ae0:	b2c9      	uxtb	r1, r1
 8014ae2:	2929      	cmp	r1, #41	; 0x29
 8014ae4:	d8da      	bhi.n	8014a9c <uxr_write_framed_msg+0x1a4>
 8014ae6:	18a0      	adds	r0, r4, r2
 8014ae8:	3202      	adds	r2, #2
 8014aea:	b2d2      	uxtb	r2, r2
 8014aec:	f083 0120 	eor.w	r1, r3, #32
 8014af0:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8014af4:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8014af8:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8014afc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014b00:	e753      	b.n	80149aa <uxr_write_framed_msg+0xb2>
 8014b02:	18a0      	adds	r0, r4, r2
 8014b04:	3201      	adds	r2, #1
 8014b06:	b2d2      	uxtb	r2, r2
 8014b08:	4659      	mov	r1, fp
 8014b0a:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8014b0e:	f04f 0b01 	mov.w	fp, #1
 8014b12:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014b16:	2900      	cmp	r1, #0
 8014b18:	d09c      	beq.n	8014a54 <uxr_write_framed_msg+0x15c>
 8014b1a:	2500      	movs	r5, #0
 8014b1c:	e002      	b.n	8014b24 <uxr_write_framed_msg+0x22c>
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	f43f af74 	beq.w	8014a0c <uxr_write_framed_msg+0x114>
 8014b24:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014b28:	1b52      	subs	r2, r2, r5
 8014b2a:	4421      	add	r1, r4
 8014b2c:	4643      	mov	r3, r8
 8014b2e:	4638      	mov	r0, r7
 8014b30:	47b0      	blx	r6
 8014b32:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014b36:	4405      	add	r5, r0
 8014b38:	4295      	cmp	r5, r2
 8014b3a:	d3f0      	bcc.n	8014b1e <uxr_write_framed_msg+0x226>
 8014b3c:	f47f af66 	bne.w	8014a0c <uxr_write_framed_msg+0x114>
 8014b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b42:	2300      	movs	r3, #0
 8014b44:	b290      	uxth	r0, r2
 8014b46:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014b4a:	b005      	add	sp, #20
 8014b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b50:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014b54:	f085 0520 	eor.w	r5, r5, #32
 8014b58:	2303      	movs	r3, #3
 8014b5a:	217d      	movs	r1, #125	; 0x7d
 8014b5c:	2a01      	cmp	r2, #1
 8014b5e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8014b62:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014b66:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8014b6a:	d814      	bhi.n	8014b96 <uxr_write_framed_msg+0x29e>
 8014b6c:	2205      	movs	r2, #5
 8014b6e:	2504      	movs	r5, #4
 8014b70:	e775      	b.n	8014a5e <uxr_write_framed_msg+0x166>
 8014b72:	f083 0320 	eor.w	r3, r3, #32
 8014b76:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8014b7a:	3202      	adds	r2, #2
 8014b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b7e:	b2d2      	uxtb	r2, r2
 8014b80:	207d      	movs	r0, #125	; 0x7d
 8014b82:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8014b86:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	f47f aefa 	bne.w	8014984 <uxr_write_framed_msg+0x8c>
 8014b90:	9301      	str	r3, [sp, #4]
 8014b92:	4699      	mov	r9, r3
 8014b94:	e71b      	b.n	80149ce <uxr_write_framed_msg+0xd6>
 8014b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b98:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8014b9c:	b2d9      	uxtb	r1, r3
 8014b9e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014ba2:	2204      	movs	r2, #4
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014baa:	f63f aed1 	bhi.w	8014950 <uxr_write_framed_msg+0x58>
 8014bae:	e769      	b.n	8014a84 <uxr_write_framed_msg+0x18c>
 8014bb0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014bb4:	fa5f f98a 	uxtb.w	r9, sl
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	e707      	b.n	80149ce <uxr_write_framed_msg+0xd6>
 8014bbe:	bf00      	nop
 8014bc0:	080176ec 	.word	0x080176ec

08014bc4 <uxr_framing_read_transport>:
 8014bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc8:	4604      	mov	r4, r0
 8014bca:	b083      	sub	sp, #12
 8014bcc:	461f      	mov	r7, r3
 8014bce:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8014bd2:	4689      	mov	r9, r1
 8014bd4:	4692      	mov	sl, r2
 8014bd6:	f7fa fbbd 	bl	800f354 <uxr_millis>
 8014bda:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014bde:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8014be2:	42b3      	cmp	r3, r6
 8014be4:	4680      	mov	r8, r0
 8014be6:	d05f      	beq.n	8014ca8 <uxr_framing_read_transport+0xe4>
 8014be8:	d81b      	bhi.n	8014c22 <uxr_framing_read_transport+0x5e>
 8014bea:	1e75      	subs	r5, r6, #1
 8014bec:	1aed      	subs	r5, r5, r3
 8014bee:	b2ed      	uxtb	r5, r5
 8014bf0:	2600      	movs	r6, #0
 8014bf2:	455d      	cmp	r5, fp
 8014bf4:	d81e      	bhi.n	8014c34 <uxr_framing_read_transport+0x70>
 8014bf6:	19ab      	adds	r3, r5, r6
 8014bf8:	455b      	cmp	r3, fp
 8014bfa:	bf84      	itt	hi
 8014bfc:	ebab 0605 	subhi.w	r6, fp, r5
 8014c00:	b2f6      	uxtbhi	r6, r6
 8014c02:	b9e5      	cbnz	r5, 8014c3e <uxr_framing_read_transport+0x7a>
 8014c04:	f04f 0b00 	mov.w	fp, #0
 8014c08:	f7fa fba4 	bl	800f354 <uxr_millis>
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	eba0 0008 	sub.w	r0, r0, r8
 8014c12:	1a1b      	subs	r3, r3, r0
 8014c14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c18:	4658      	mov	r0, fp
 8014c1a:	603b      	str	r3, [r7, #0]
 8014c1c:	b003      	add	sp, #12
 8014c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c22:	2e00      	cmp	r6, #0
 8014c24:	d048      	beq.n	8014cb8 <uxr_framing_read_transport+0xf4>
 8014c26:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8014c2a:	b2ed      	uxtb	r5, r5
 8014c2c:	3e01      	subs	r6, #1
 8014c2e:	455d      	cmp	r5, fp
 8014c30:	b2f6      	uxtb	r6, r6
 8014c32:	d9e0      	bls.n	8014bf6 <uxr_framing_read_transport+0x32>
 8014c34:	fa5f f58b 	uxtb.w	r5, fp
 8014c38:	2600      	movs	r6, #0
 8014c3a:	2d00      	cmp	r5, #0
 8014c3c:	d0e2      	beq.n	8014c04 <uxr_framing_read_transport+0x40>
 8014c3e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014c42:	3102      	adds	r1, #2
 8014c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c46:	9300      	str	r3, [sp, #0]
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	4421      	add	r1, r4
 8014c4c:	462a      	mov	r2, r5
 8014c4e:	4650      	mov	r0, sl
 8014c50:	47c8      	blx	r9
 8014c52:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014c56:	4a1b      	ldr	r2, [pc, #108]	; (8014cc4 <uxr_framing_read_transport+0x100>)
 8014c58:	4403      	add	r3, r0
 8014c5a:	0859      	lsrs	r1, r3, #1
 8014c5c:	fba2 2101 	umull	r2, r1, r2, r1
 8014c60:	0889      	lsrs	r1, r1, #2
 8014c62:	222a      	movs	r2, #42	; 0x2a
 8014c64:	fb02 3111 	mls	r1, r2, r1, r3
 8014c68:	4683      	mov	fp, r0
 8014c6a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d0c8      	beq.n	8014c04 <uxr_framing_read_transport+0x40>
 8014c72:	42a8      	cmp	r0, r5
 8014c74:	d1c8      	bne.n	8014c08 <uxr_framing_read_transport+0x44>
 8014c76:	b31e      	cbz	r6, 8014cc0 <uxr_framing_read_transport+0xfc>
 8014c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c7a:	9300      	str	r3, [sp, #0]
 8014c7c:	3102      	adds	r1, #2
 8014c7e:	4421      	add	r1, r4
 8014c80:	4632      	mov	r2, r6
 8014c82:	2300      	movs	r3, #0
 8014c84:	4650      	mov	r0, sl
 8014c86:	47c8      	blx	r9
 8014c88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014c8c:	490d      	ldr	r1, [pc, #52]	; (8014cc4 <uxr_framing_read_transport+0x100>)
 8014c8e:	181a      	adds	r2, r3, r0
 8014c90:	0853      	lsrs	r3, r2, #1
 8014c92:	fba1 1303 	umull	r1, r3, r1, r3
 8014c96:	089b      	lsrs	r3, r3, #2
 8014c98:	212a      	movs	r1, #42	; 0x2a
 8014c9a:	fb01 2313 	mls	r3, r1, r3, r2
 8014c9e:	eb00 0b05 	add.w	fp, r0, r5
 8014ca2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8014ca6:	e7af      	b.n	8014c08 <uxr_framing_read_transport+0x44>
 8014ca8:	2600      	movs	r6, #0
 8014caa:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8014cae:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8014cb0:	d9c0      	bls.n	8014c34 <uxr_framing_read_transport+0x70>
 8014cb2:	2102      	movs	r1, #2
 8014cb4:	2529      	movs	r5, #41	; 0x29
 8014cb6:	e7c5      	b.n	8014c44 <uxr_framing_read_transport+0x80>
 8014cb8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8014cbc:	b2ed      	uxtb	r5, r5
 8014cbe:	e798      	b.n	8014bf2 <uxr_framing_read_transport+0x2e>
 8014cc0:	46ab      	mov	fp, r5
 8014cc2:	e7a1      	b.n	8014c08 <uxr_framing_read_transport+0x44>
 8014cc4:	30c30c31 	.word	0x30c30c31

08014cc8 <uxr_read_framed_msg>:
 8014cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ccc:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8014cd0:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8014cd4:	42ae      	cmp	r6, r5
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	4604      	mov	r4, r0
 8014cda:	461f      	mov	r7, r3
 8014cdc:	4689      	mov	r9, r1
 8014cde:	4692      	mov	sl, r2
 8014ce0:	f000 817d 	beq.w	8014fde <uxr_read_framed_msg+0x316>
 8014ce4:	7823      	ldrb	r3, [r4, #0]
 8014ce6:	4ecc      	ldr	r6, [pc, #816]	; (8015018 <uxr_read_framed_msg+0x350>)
 8014ce8:	f8df 8330 	ldr.w	r8, [pc, #816]	; 801501c <uxr_read_framed_msg+0x354>
 8014cec:	2b07      	cmp	r3, #7
 8014cee:	d8fd      	bhi.n	8014cec <uxr_read_framed_msg+0x24>
 8014cf0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014cf4:	00f40113 	.word	0x00f40113
 8014cf8:	00b700d4 	.word	0x00b700d4
 8014cfc:	004d008e 	.word	0x004d008e
 8014d00:	00080030 	.word	0x00080030
 8014d04:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014d08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014d0c:	4298      	cmp	r0, r3
 8014d0e:	f000 8141 	beq.w	8014f94 <uxr_read_framed_msg+0x2cc>
 8014d12:	18e2      	adds	r2, r4, r3
 8014d14:	7891      	ldrb	r1, [r2, #2]
 8014d16:	297d      	cmp	r1, #125	; 0x7d
 8014d18:	f000 81a2 	beq.w	8015060 <uxr_read_framed_msg+0x398>
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	085a      	lsrs	r2, r3, #1
 8014d20:	fba6 0202 	umull	r0, r2, r6, r2
 8014d24:	0892      	lsrs	r2, r2, #2
 8014d26:	202a      	movs	r0, #42	; 0x2a
 8014d28:	fb00 3312 	mls	r3, r0, r2, r3
 8014d2c:	297e      	cmp	r1, #126	; 0x7e
 8014d2e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014d32:	f000 8251 	beq.w	80151d8 <uxr_read_framed_msg+0x510>
 8014d36:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014d38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014d3a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	2100      	movs	r1, #0
 8014d42:	429a      	cmp	r2, r3
 8014d44:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014d46:	7021      	strb	r1, [r4, #0]
 8014d48:	f000 8182 	beq.w	8015050 <uxr_read_framed_msg+0x388>
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	b003      	add	sp, #12
 8014d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d54:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014d58:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014d5c:	4298      	cmp	r0, r3
 8014d5e:	f000 8128 	beq.w	8014fb2 <uxr_read_framed_msg+0x2ea>
 8014d62:	18e2      	adds	r2, r4, r3
 8014d64:	7891      	ldrb	r1, [r2, #2]
 8014d66:	297d      	cmp	r1, #125	; 0x7d
 8014d68:	f000 8196 	beq.w	8015098 <uxr_read_framed_msg+0x3d0>
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	085a      	lsrs	r2, r3, #1
 8014d70:	fba6 0202 	umull	r0, r2, r6, r2
 8014d74:	0892      	lsrs	r2, r2, #2
 8014d76:	202a      	movs	r0, #42	; 0x2a
 8014d78:	fb00 3312 	mls	r3, r0, r2, r3
 8014d7c:	297e      	cmp	r1, #126	; 0x7e
 8014d7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014d82:	f000 8219 	beq.w	80151b8 <uxr_read_framed_msg+0x4f0>
 8014d86:	2307      	movs	r3, #7
 8014d88:	86a1      	strh	r1, [r4, #52]	; 0x34
 8014d8a:	7023      	strb	r3, [r4, #0]
 8014d8c:	e7ae      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014d8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014d90:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8014d92:	429d      	cmp	r5, r3
 8014d94:	d937      	bls.n	8014e06 <uxr_read_framed_msg+0x13e>
 8014d96:	ee07 9a90 	vmov	s15, r9
 8014d9a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014d9e:	e01e      	b.n	8014dde <uxr_read_framed_msg+0x116>
 8014da0:	f89e e002 	ldrb.w	lr, [lr, #2]
 8014da4:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8014da8:	f000 80d2 	beq.w	8014f50 <uxr_read_framed_msg+0x288>
 8014dac:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8014db0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014db4:	f000 8214 	beq.w	80151e0 <uxr_read_framed_msg+0x518>
 8014db8:	f807 e003 	strb.w	lr, [r7, r3]
 8014dbc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8014dbe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014dc0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8014dc2:	ea80 010e 	eor.w	r1, r0, lr
 8014dc6:	b2c9      	uxtb	r1, r1
 8014dc8:	3301      	adds	r3, #1
 8014dca:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8014dd4:	42ab      	cmp	r3, r5
 8014dd6:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014dd8:	8663      	strh	r3, [r4, #50]	; 0x32
 8014dda:	f080 8121 	bcs.w	8015020 <uxr_read_framed_msg+0x358>
 8014dde:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8014de2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014de6:	f101 0b01 	add.w	fp, r1, #1
 8014dea:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8014dee:	fba6 9202 	umull	r9, r2, r6, r2
 8014df2:	0892      	lsrs	r2, r2, #2
 8014df4:	4288      	cmp	r0, r1
 8014df6:	eb04 0e01 	add.w	lr, r4, r1
 8014dfa:	fb0c b212 	mls	r2, ip, r2, fp
 8014dfe:	d1cf      	bne.n	8014da0 <uxr_read_framed_msg+0xd8>
 8014e00:	ee17 9a90 	vmov	r9, s15
 8014e04:	429d      	cmp	r5, r3
 8014e06:	f040 8112 	bne.w	801502e <uxr_read_framed_msg+0x366>
 8014e0a:	2306      	movs	r3, #6
 8014e0c:	7023      	strb	r3, [r4, #0]
 8014e0e:	e76d      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014e10:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014e14:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014e18:	4298      	cmp	r0, r3
 8014e1a:	f000 80bb 	beq.w	8014f94 <uxr_read_framed_msg+0x2cc>
 8014e1e:	18e2      	adds	r2, r4, r3
 8014e20:	7891      	ldrb	r1, [r2, #2]
 8014e22:	297d      	cmp	r1, #125	; 0x7d
 8014e24:	f000 8153 	beq.w	80150ce <uxr_read_framed_msg+0x406>
 8014e28:	3301      	adds	r3, #1
 8014e2a:	085a      	lsrs	r2, r3, #1
 8014e2c:	fba6 0202 	umull	r0, r2, r6, r2
 8014e30:	0892      	lsrs	r2, r2, #2
 8014e32:	202a      	movs	r0, #42	; 0x2a
 8014e34:	fb00 3212 	mls	r2, r0, r2, r3
 8014e38:	297e      	cmp	r1, #126	; 0x7e
 8014e3a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014e3e:	f000 81cb 	beq.w	80151d8 <uxr_read_framed_msg+0x510>
 8014e42:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014e44:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014e48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	428b      	cmp	r3, r1
 8014e50:	8623      	strh	r3, [r4, #48]	; 0x30
 8014e52:	8660      	strh	r0, [r4, #50]	; 0x32
 8014e54:	86e0      	strh	r0, [r4, #54]	; 0x36
 8014e56:	f240 80db 	bls.w	8015010 <uxr_read_framed_msg+0x348>
 8014e5a:	7020      	strb	r0, [r4, #0]
 8014e5c:	b003      	add	sp, #12
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e62:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014e66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014e6a:	4298      	cmp	r0, r3
 8014e6c:	f000 80a1 	beq.w	8014fb2 <uxr_read_framed_msg+0x2ea>
 8014e70:	18e2      	adds	r2, r4, r3
 8014e72:	7891      	ldrb	r1, [r2, #2]
 8014e74:	297d      	cmp	r1, #125	; 0x7d
 8014e76:	f000 8167 	beq.w	8015148 <uxr_read_framed_msg+0x480>
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	085a      	lsrs	r2, r3, #1
 8014e7e:	fba6 0202 	umull	r0, r2, r6, r2
 8014e82:	0892      	lsrs	r2, r2, #2
 8014e84:	202a      	movs	r0, #42	; 0x2a
 8014e86:	fb00 3312 	mls	r3, r0, r2, r3
 8014e8a:	297e      	cmp	r1, #126	; 0x7e
 8014e8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014e90:	f000 8192 	beq.w	80151b8 <uxr_read_framed_msg+0x4f0>
 8014e94:	2304      	movs	r3, #4
 8014e96:	8621      	strh	r1, [r4, #48]	; 0x30
 8014e98:	7023      	strb	r3, [r4, #0]
 8014e9a:	e727      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014e9c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014ea0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014ea4:	4290      	cmp	r0, r2
 8014ea6:	f000 80b1 	beq.w	801500c <uxr_read_framed_msg+0x344>
 8014eaa:	18a3      	adds	r3, r4, r2
 8014eac:	7899      	ldrb	r1, [r3, #2]
 8014eae:	297d      	cmp	r1, #125	; 0x7d
 8014eb0:	f000 8166 	beq.w	8015180 <uxr_read_framed_msg+0x4b8>
 8014eb4:	3201      	adds	r2, #1
 8014eb6:	0850      	lsrs	r0, r2, #1
 8014eb8:	fba6 3000 	umull	r3, r0, r6, r0
 8014ebc:	0880      	lsrs	r0, r0, #2
 8014ebe:	232a      	movs	r3, #42	; 0x2a
 8014ec0:	fb03 2210 	mls	r2, r3, r0, r2
 8014ec4:	297e      	cmp	r1, #126	; 0x7e
 8014ec6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014eca:	f000 8187 	beq.w	80151dc <uxr_read_framed_msg+0x514>
 8014ece:	7863      	ldrb	r3, [r4, #1]
 8014ed0:	428b      	cmp	r3, r1
 8014ed2:	bf0c      	ite	eq
 8014ed4:	2303      	moveq	r3, #3
 8014ed6:	2300      	movne	r3, #0
 8014ed8:	7023      	strb	r3, [r4, #0]
 8014eda:	e707      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014edc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014ee0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	4299      	cmp	r1, r3
 8014ee8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014eec:	d063      	beq.n	8014fb6 <uxr_read_framed_msg+0x2ee>
 8014eee:	18e2      	adds	r2, r4, r3
 8014ef0:	7892      	ldrb	r2, [r2, #2]
 8014ef2:	2a7d      	cmp	r2, #125	; 0x7d
 8014ef4:	f000 8107 	beq.w	8015106 <uxr_read_framed_msg+0x43e>
 8014ef8:	1c59      	adds	r1, r3, #1
 8014efa:	084b      	lsrs	r3, r1, #1
 8014efc:	fba6 0303 	umull	r0, r3, r6, r3
 8014f00:	089b      	lsrs	r3, r3, #2
 8014f02:	202a      	movs	r0, #42	; 0x2a
 8014f04:	fb00 1313 	mls	r3, r0, r3, r1
 8014f08:	2a7e      	cmp	r2, #126	; 0x7e
 8014f0a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014f0e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014f12:	d050      	beq.n	8014fb6 <uxr_read_framed_msg+0x2ee>
 8014f14:	2302      	movs	r3, #2
 8014f16:	7023      	strb	r3, [r4, #0]
 8014f18:	e6e8      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014f1a:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8014f1e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014f22:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014f26:	1c51      	adds	r1, r2, #1
 8014f28:	084b      	lsrs	r3, r1, #1
 8014f2a:	fba6 5303 	umull	r5, r3, r6, r3
 8014f2e:	089b      	lsrs	r3, r3, #2
 8014f30:	fb0c 1313 	mls	r3, ip, r3, r1
 8014f34:	4596      	cmp	lr, r2
 8014f36:	eb04 0002 	add.w	r0, r4, r2
 8014f3a:	b2da      	uxtb	r2, r3
 8014f3c:	f43f af06 	beq.w	8014d4c <uxr_read_framed_msg+0x84>
 8014f40:	7883      	ldrb	r3, [r0, #2]
 8014f42:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014f46:	2b7e      	cmp	r3, #126	; 0x7e
 8014f48:	d1ed      	bne.n	8014f26 <uxr_read_framed_msg+0x25e>
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	7023      	strb	r3, [r4, #0]
 8014f4e:	e6cd      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014f50:	f101 0b01 	add.w	fp, r1, #1
 8014f54:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8014f58:	fba6 e202 	umull	lr, r2, r6, r2
 8014f5c:	3102      	adds	r1, #2
 8014f5e:	0892      	lsrs	r2, r2, #2
 8014f60:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8014f64:	fb0c b212 	mls	r2, ip, r2, fp
 8014f68:	fba6 9e0e 	umull	r9, lr, r6, lr
 8014f6c:	eb04 0b02 	add.w	fp, r4, r2
 8014f70:	b2d2      	uxtb	r2, r2
 8014f72:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8014f76:	4290      	cmp	r0, r2
 8014f78:	fb0c 111e 	mls	r1, ip, lr, r1
 8014f7c:	f43f af40 	beq.w	8014e00 <uxr_read_framed_msg+0x138>
 8014f80:	f89b e002 	ldrb.w	lr, [fp, #2]
 8014f84:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8014f88:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8014f8c:	d036      	beq.n	8014ffc <uxr_read_framed_msg+0x334>
 8014f8e:	f08e 0e20 	eor.w	lr, lr, #32
 8014f92:	e711      	b.n	8014db8 <uxr_read_framed_msg+0xf0>
 8014f94:	2301      	movs	r3, #1
 8014f96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f98:	4649      	mov	r1, r9
 8014f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fa2:	4652      	mov	r2, sl
 8014fa4:	f7ff fe0e 	bl	8014bc4 <uxr_framing_read_transport>
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	f43f aecf 	beq.w	8014d4c <uxr_read_framed_msg+0x84>
 8014fae:	7823      	ldrb	r3, [r4, #0]
 8014fb0:	e69c      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8014fb2:	2302      	movs	r3, #2
 8014fb4:	e7ef      	b.n	8014f96 <uxr_read_framed_msg+0x2ce>
 8014fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fb8:	2304      	movs	r3, #4
 8014fba:	e9cd 2300 	strd	r2, r3, [sp]
 8014fbe:	4649      	mov	r1, r9
 8014fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fc2:	4652      	mov	r2, sl
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f7ff fdfd 	bl	8014bc4 <uxr_framing_read_transport>
 8014fca:	2800      	cmp	r0, #0
 8014fcc:	d1ef      	bne.n	8014fae <uxr_read_framed_msg+0x2e6>
 8014fce:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8014fd2:	387e      	subs	r0, #126	; 0x7e
 8014fd4:	bf18      	it	ne
 8014fd6:	2001      	movne	r0, #1
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	d0e8      	beq.n	8014fae <uxr_read_framed_msg+0x2e6>
 8014fdc:	e6b6      	b.n	8014d4c <uxr_read_framed_msg+0x84>
 8014fde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014fe0:	2305      	movs	r3, #5
 8014fe2:	e9cd 5300 	strd	r5, r3, [sp]
 8014fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fe8:	f7ff fdec 	bl	8014bc4 <uxr_framing_read_transport>
 8014fec:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014ff0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	f43f aea9 	beq.w	8014d4c <uxr_read_framed_msg+0x84>
 8014ffa:	e673      	b.n	8014ce4 <uxr_read_framed_msg+0x1c>
 8014ffc:	429d      	cmp	r5, r3
 8014ffe:	ee17 9a90 	vmov	r9, s15
 8015002:	f43f af02 	beq.w	8014e0a <uxr_read_framed_msg+0x142>
 8015006:	2301      	movs	r3, #1
 8015008:	7023      	strb	r3, [r4, #0]
 801500a:	e66f      	b.n	8014cec <uxr_read_framed_msg+0x24>
 801500c:	2303      	movs	r3, #3
 801500e:	e7c2      	b.n	8014f96 <uxr_read_framed_msg+0x2ce>
 8015010:	2305      	movs	r3, #5
 8015012:	7023      	strb	r3, [r4, #0]
 8015014:	e66a      	b.n	8014cec <uxr_read_framed_msg+0x24>
 8015016:	bf00      	nop
 8015018:	30c30c31 	.word	0x30c30c31
 801501c:	080176ec 	.word	0x080176ec
 8015020:	ee17 9a90 	vmov	r9, s15
 8015024:	f43f aef1 	beq.w	8014e0a <uxr_read_framed_msg+0x142>
 8015028:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801502c:	d08d      	beq.n	8014f4a <uxr_read_framed_msg+0x282>
 801502e:	1aeb      	subs	r3, r5, r3
 8015030:	3302      	adds	r3, #2
 8015032:	9301      	str	r3, [sp, #4]
 8015034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015036:	9300      	str	r3, [sp, #0]
 8015038:	4652      	mov	r2, sl
 801503a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801503c:	4649      	mov	r1, r9
 801503e:	4620      	mov	r0, r4
 8015040:	f7ff fdc0 	bl	8014bc4 <uxr_framing_read_transport>
 8015044:	fab0 f080 	clz	r0, r0
 8015048:	0940      	lsrs	r0, r0, #5
 801504a:	2800      	cmp	r0, #0
 801504c:	d0af      	beq.n	8014fae <uxr_read_framed_msg+0x2e6>
 801504e:	e67d      	b.n	8014d4c <uxr_read_framed_msg+0x84>
 8015050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015052:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015056:	7013      	strb	r3, [r2, #0]
 8015058:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801505a:	b003      	add	sp, #12
 801505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015060:	1c59      	adds	r1, r3, #1
 8015062:	084a      	lsrs	r2, r1, #1
 8015064:	fba6 5202 	umull	r5, r2, r6, r2
 8015068:	0892      	lsrs	r2, r2, #2
 801506a:	252a      	movs	r5, #42	; 0x2a
 801506c:	fb05 1212 	mls	r2, r5, r2, r1
 8015070:	b2d1      	uxtb	r1, r2
 8015072:	4288      	cmp	r0, r1
 8015074:	d08e      	beq.n	8014f94 <uxr_read_framed_msg+0x2cc>
 8015076:	3302      	adds	r3, #2
 8015078:	4422      	add	r2, r4
 801507a:	0858      	lsrs	r0, r3, #1
 801507c:	fba6 1000 	umull	r1, r0, r6, r0
 8015080:	7891      	ldrb	r1, [r2, #2]
 8015082:	0882      	lsrs	r2, r0, #2
 8015084:	fb05 3312 	mls	r3, r5, r2, r3
 8015088:	297e      	cmp	r1, #126	; 0x7e
 801508a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801508e:	f000 80a3 	beq.w	80151d8 <uxr_read_framed_msg+0x510>
 8015092:	f081 0120 	eor.w	r1, r1, #32
 8015096:	e64e      	b.n	8014d36 <uxr_read_framed_msg+0x6e>
 8015098:	1c59      	adds	r1, r3, #1
 801509a:	084a      	lsrs	r2, r1, #1
 801509c:	fba6 5202 	umull	r5, r2, r6, r2
 80150a0:	0892      	lsrs	r2, r2, #2
 80150a2:	252a      	movs	r5, #42	; 0x2a
 80150a4:	fb05 1212 	mls	r2, r5, r2, r1
 80150a8:	b2d1      	uxtb	r1, r2
 80150aa:	4288      	cmp	r0, r1
 80150ac:	d081      	beq.n	8014fb2 <uxr_read_framed_msg+0x2ea>
 80150ae:	3302      	adds	r3, #2
 80150b0:	4422      	add	r2, r4
 80150b2:	0858      	lsrs	r0, r3, #1
 80150b4:	fba6 1000 	umull	r1, r0, r6, r0
 80150b8:	7891      	ldrb	r1, [r2, #2]
 80150ba:	0882      	lsrs	r2, r0, #2
 80150bc:	fb05 3312 	mls	r3, r5, r2, r3
 80150c0:	297e      	cmp	r1, #126	; 0x7e
 80150c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80150c6:	d077      	beq.n	80151b8 <uxr_read_framed_msg+0x4f0>
 80150c8:	f081 0120 	eor.w	r1, r1, #32
 80150cc:	e65b      	b.n	8014d86 <uxr_read_framed_msg+0xbe>
 80150ce:	1c59      	adds	r1, r3, #1
 80150d0:	084a      	lsrs	r2, r1, #1
 80150d2:	fba6 5202 	umull	r5, r2, r6, r2
 80150d6:	0892      	lsrs	r2, r2, #2
 80150d8:	252a      	movs	r5, #42	; 0x2a
 80150da:	fb05 1212 	mls	r2, r5, r2, r1
 80150de:	b2d1      	uxtb	r1, r2
 80150e0:	4288      	cmp	r0, r1
 80150e2:	f43f af57 	beq.w	8014f94 <uxr_read_framed_msg+0x2cc>
 80150e6:	3302      	adds	r3, #2
 80150e8:	4422      	add	r2, r4
 80150ea:	0858      	lsrs	r0, r3, #1
 80150ec:	fba6 1000 	umull	r1, r0, r6, r0
 80150f0:	7891      	ldrb	r1, [r2, #2]
 80150f2:	0882      	lsrs	r2, r0, #2
 80150f4:	fb05 3312 	mls	r3, r5, r2, r3
 80150f8:	297e      	cmp	r1, #126	; 0x7e
 80150fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80150fe:	d06b      	beq.n	80151d8 <uxr_read_framed_msg+0x510>
 8015100:	f081 0120 	eor.w	r1, r1, #32
 8015104:	e69d      	b.n	8014e42 <uxr_read_framed_msg+0x17a>
 8015106:	1c5d      	adds	r5, r3, #1
 8015108:	086a      	lsrs	r2, r5, #1
 801510a:	fba6 0202 	umull	r0, r2, r6, r2
 801510e:	0892      	lsrs	r2, r2, #2
 8015110:	202a      	movs	r0, #42	; 0x2a
 8015112:	fb00 5212 	mls	r2, r0, r2, r5
 8015116:	b2d5      	uxtb	r5, r2
 8015118:	42a9      	cmp	r1, r5
 801511a:	f43f af4c 	beq.w	8014fb6 <uxr_read_framed_msg+0x2ee>
 801511e:	3302      	adds	r3, #2
 8015120:	4422      	add	r2, r4
 8015122:	0859      	lsrs	r1, r3, #1
 8015124:	fba6 5101 	umull	r5, r1, r6, r1
 8015128:	7895      	ldrb	r5, [r2, #2]
 801512a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801512e:	088a      	lsrs	r2, r1, #2
 8015130:	fb00 3312 	mls	r3, r0, r2, r3
 8015134:	2d7e      	cmp	r5, #126	; 0x7e
 8015136:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801513a:	f43f af3c 	beq.w	8014fb6 <uxr_read_framed_msg+0x2ee>
 801513e:	f085 0520 	eor.w	r5, r5, #32
 8015142:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8015146:	e6e5      	b.n	8014f14 <uxr_read_framed_msg+0x24c>
 8015148:	1c59      	adds	r1, r3, #1
 801514a:	084a      	lsrs	r2, r1, #1
 801514c:	fba6 5202 	umull	r5, r2, r6, r2
 8015150:	0892      	lsrs	r2, r2, #2
 8015152:	252a      	movs	r5, #42	; 0x2a
 8015154:	fb05 1212 	mls	r2, r5, r2, r1
 8015158:	b2d1      	uxtb	r1, r2
 801515a:	4288      	cmp	r0, r1
 801515c:	f43f af29 	beq.w	8014fb2 <uxr_read_framed_msg+0x2ea>
 8015160:	3302      	adds	r3, #2
 8015162:	4422      	add	r2, r4
 8015164:	0858      	lsrs	r0, r3, #1
 8015166:	fba6 1000 	umull	r1, r0, r6, r0
 801516a:	7891      	ldrb	r1, [r2, #2]
 801516c:	0882      	lsrs	r2, r0, #2
 801516e:	fb05 3312 	mls	r3, r5, r2, r3
 8015172:	297e      	cmp	r1, #126	; 0x7e
 8015174:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015178:	d01e      	beq.n	80151b8 <uxr_read_framed_msg+0x4f0>
 801517a:	f081 0120 	eor.w	r1, r1, #32
 801517e:	e689      	b.n	8014e94 <uxr_read_framed_msg+0x1cc>
 8015180:	1c51      	adds	r1, r2, #1
 8015182:	084b      	lsrs	r3, r1, #1
 8015184:	fba6 5303 	umull	r5, r3, r6, r3
 8015188:	089b      	lsrs	r3, r3, #2
 801518a:	252a      	movs	r5, #42	; 0x2a
 801518c:	fb05 1313 	mls	r3, r5, r3, r1
 8015190:	b2d9      	uxtb	r1, r3
 8015192:	4288      	cmp	r0, r1
 8015194:	f43f af3a 	beq.w	801500c <uxr_read_framed_msg+0x344>
 8015198:	3202      	adds	r2, #2
 801519a:	4423      	add	r3, r4
 801519c:	0850      	lsrs	r0, r2, #1
 801519e:	789b      	ldrb	r3, [r3, #2]
 80151a0:	fba6 1000 	umull	r1, r0, r6, r0
 80151a4:	0880      	lsrs	r0, r0, #2
 80151a6:	fb05 2210 	mls	r2, r5, r0, r2
 80151aa:	2b7e      	cmp	r3, #126	; 0x7e
 80151ac:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80151b0:	d014      	beq.n	80151dc <uxr_read_framed_msg+0x514>
 80151b2:	f083 0120 	eor.w	r1, r3, #32
 80151b6:	e68a      	b.n	8014ece <uxr_read_framed_msg+0x206>
 80151b8:	2302      	movs	r3, #2
 80151ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151bc:	4649      	mov	r1, r9
 80151be:	e9cd 2300 	strd	r2, r3, [sp]
 80151c2:	4620      	mov	r0, r4
 80151c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151c6:	4652      	mov	r2, sl
 80151c8:	f7ff fcfc 	bl	8014bc4 <uxr_framing_read_transport>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	f47f aeee 	bne.w	8014fae <uxr_read_framed_msg+0x2e6>
 80151d2:	2301      	movs	r3, #1
 80151d4:	7023      	strb	r3, [r4, #0]
 80151d6:	e589      	b.n	8014cec <uxr_read_framed_msg+0x24>
 80151d8:	2301      	movs	r3, #1
 80151da:	e7ee      	b.n	80151ba <uxr_read_framed_msg+0x4f2>
 80151dc:	2303      	movs	r3, #3
 80151de:	e7ec      	b.n	80151ba <uxr_read_framed_msg+0x4f2>
 80151e0:	ee17 9a90 	vmov	r9, s15
 80151e4:	e6b1      	b.n	8014f4a <uxr_read_framed_msg+0x282>
 80151e6:	bf00      	nop

080151e8 <on_status>:
 80151e8:	b082      	sub	sp, #8
 80151ea:	b002      	add	sp, #8
 80151ec:	4770      	bx	lr
 80151ee:	bf00      	nop

080151f0 <on_topic>:
 80151f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f4:	4a21      	ldr	r2, [pc, #132]	; (801527c <on_topic+0x8c>)
 80151f6:	b094      	sub	sp, #80	; 0x50
 80151f8:	6812      	ldr	r2, [r2, #0]
 80151fa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80151fc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8015200:	9113      	str	r1, [sp, #76]	; 0x4c
 8015202:	9312      	str	r3, [sp, #72]	; 0x48
 8015204:	b3ba      	cbz	r2, 8015276 <on_topic+0x86>
 8015206:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801520a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801520e:	e001      	b.n	8015214 <on_topic+0x24>
 8015210:	6892      	ldr	r2, [r2, #8]
 8015212:	b382      	cbz	r2, 8015276 <on_topic+0x86>
 8015214:	68d4      	ldr	r4, [r2, #12]
 8015216:	8aa3      	ldrh	r3, [r4, #20]
 8015218:	428b      	cmp	r3, r1
 801521a:	d1f9      	bne.n	8015210 <on_topic+0x20>
 801521c:	7da3      	ldrb	r3, [r4, #22]
 801521e:	4283      	cmp	r3, r0
 8015220:	d1f6      	bne.n	8015210 <on_topic+0x20>
 8015222:	2248      	movs	r2, #72	; 0x48
 8015224:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015228:	4668      	mov	r0, sp
 801522a:	f000 f94b 	bl	80154c4 <memcpy>
 801522e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8015232:	4620      	mov	r0, r4
 8015234:	f7f8 fa70 	bl	800d718 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015238:	4607      	mov	r7, r0
 801523a:	b1e0      	cbz	r0, 8015276 <on_topic+0x86>
 801523c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015240:	462a      	mov	r2, r5
 8015242:	4630      	mov	r0, r6
 8015244:	f108 0110 	add.w	r1, r8, #16
 8015248:	f7fe fc6a 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801524c:	b930      	cbnz	r0, 801525c <on_topic+0x6c>
 801524e:	480c      	ldr	r0, [pc, #48]	; (8015280 <on_topic+0x90>)
 8015250:	4639      	mov	r1, r7
 8015252:	b014      	add	sp, #80	; 0x50
 8015254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015258:	f7fd bd2e 	b.w	8012cb8 <put_memory>
 801525c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8015260:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8015264:	f7fe fb86 	bl	8013974 <rmw_uros_epoch_nanos>
 8015268:	f608 0218 	addw	r2, r8, #2072	; 0x818
 801526c:	2305      	movs	r3, #5
 801526e:	e9c2 0100 	strd	r0, r1, [r2]
 8015272:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8015276:	b014      	add	sp, #80	; 0x50
 8015278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801527c:	2000f494 	.word	0x2000f494
 8015280:	2000c228 	.word	0x2000c228

08015284 <on_request>:
 8015284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015288:	4822      	ldr	r0, [pc, #136]	; (8015314 <on_request+0x90>)
 801528a:	b095      	sub	sp, #84	; 0x54
 801528c:	9113      	str	r1, [sp, #76]	; 0x4c
 801528e:	6801      	ldr	r1, [r0, #0]
 8015290:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8015292:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8015296:	2900      	cmp	r1, #0
 8015298:	d039      	beq.n	801530e <on_request+0x8a>
 801529a:	461d      	mov	r5, r3
 801529c:	e001      	b.n	80152a2 <on_request+0x1e>
 801529e:	6889      	ldr	r1, [r1, #8]
 80152a0:	b3a9      	cbz	r1, 801530e <on_request+0x8a>
 80152a2:	68cc      	ldr	r4, [r1, #12]
 80152a4:	8b20      	ldrh	r0, [r4, #24]
 80152a6:	4290      	cmp	r0, r2
 80152a8:	d1f9      	bne.n	801529e <on_request+0x1a>
 80152aa:	2248      	movs	r2, #72	; 0x48
 80152ac:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80152b0:	4668      	mov	r0, sp
 80152b2:	f000 f907 	bl	80154c4 <memcpy>
 80152b6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80152ba:	4620      	mov	r0, r4
 80152bc:	f7f8 fa2c 	bl	800d718 <rmw_uxrce_get_static_input_buffer_for_entity>
 80152c0:	4680      	mov	r8, r0
 80152c2:	b320      	cbz	r0, 801530e <on_request+0x8a>
 80152c4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80152c8:	4632      	mov	r2, r6
 80152ca:	4638      	mov	r0, r7
 80152cc:	f109 0110 	add.w	r1, r9, #16
 80152d0:	f7fe fc26 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 80152d4:	b930      	cbnz	r0, 80152e4 <on_request+0x60>
 80152d6:	4810      	ldr	r0, [pc, #64]	; (8015318 <on_request+0x94>)
 80152d8:	4641      	mov	r1, r8
 80152da:	b015      	add	sp, #84	; 0x54
 80152dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152e0:	f7fd bcea 	b.w	8012cb8 <put_memory>
 80152e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152e6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80152ea:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80152ee:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80152f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80152f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80152fc:	f7fe fb3a 	bl	8013974 <rmw_uros_epoch_nanos>
 8015300:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015304:	2303      	movs	r3, #3
 8015306:	e9c2 0100 	strd	r0, r1, [r2]
 801530a:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801530e:	b015      	add	sp, #84	; 0x54
 8015310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015314:	2000f484 	.word	0x2000f484
 8015318:	2000c228 	.word	0x2000c228

0801531c <on_reply>:
 801531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015320:	4821      	ldr	r0, [pc, #132]	; (80153a8 <on_reply+0x8c>)
 8015322:	b095      	sub	sp, #84	; 0x54
 8015324:	9113      	str	r1, [sp, #76]	; 0x4c
 8015326:	6801      	ldr	r1, [r0, #0]
 8015328:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801532a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801532e:	b3b9      	cbz	r1, 80153a0 <on_reply+0x84>
 8015330:	461d      	mov	r5, r3
 8015332:	e001      	b.n	8015338 <on_reply+0x1c>
 8015334:	6889      	ldr	r1, [r1, #8]
 8015336:	b399      	cbz	r1, 80153a0 <on_reply+0x84>
 8015338:	68cc      	ldr	r4, [r1, #12]
 801533a:	8b20      	ldrh	r0, [r4, #24]
 801533c:	4290      	cmp	r0, r2
 801533e:	d1f9      	bne.n	8015334 <on_reply+0x18>
 8015340:	2248      	movs	r2, #72	; 0x48
 8015342:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015346:	4668      	mov	r0, sp
 8015348:	f000 f8bc 	bl	80154c4 <memcpy>
 801534c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8015350:	4620      	mov	r0, r4
 8015352:	f7f8 f9e1 	bl	800d718 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015356:	4680      	mov	r8, r0
 8015358:	b310      	cbz	r0, 80153a0 <on_reply+0x84>
 801535a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801535e:	4632      	mov	r2, r6
 8015360:	4638      	mov	r0, r7
 8015362:	f109 0110 	add.w	r1, r9, #16
 8015366:	f7fe fbdb 	bl	8013b20 <ucdr_deserialize_array_uint8_t>
 801536a:	b930      	cbnz	r0, 801537a <on_reply+0x5e>
 801536c:	480f      	ldr	r0, [pc, #60]	; (80153ac <on_reply+0x90>)
 801536e:	4641      	mov	r1, r8
 8015370:	b015      	add	sp, #84	; 0x54
 8015372:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015376:	f7fd bc9f 	b.w	8012cb8 <put_memory>
 801537a:	b2aa      	uxth	r2, r5
 801537c:	2300      	movs	r3, #0
 801537e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8015382:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8015386:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801538a:	e9c1 2300 	strd	r2, r3, [r1]
 801538e:	f7fe faf1 	bl	8013974 <rmw_uros_epoch_nanos>
 8015392:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015396:	2304      	movs	r3, #4
 8015398:	e9c2 0100 	strd	r0, r1, [r2]
 801539c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80153a0:	b015      	add	sp, #84	; 0x54
 80153a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153a6:	bf00      	nop
 80153a8:	2000cab8 	.word	0x2000cab8
 80153ac:	2000c228 	.word	0x2000c228

080153b0 <calloc>:
 80153b0:	4b02      	ldr	r3, [pc, #8]	; (80153bc <calloc+0xc>)
 80153b2:	460a      	mov	r2, r1
 80153b4:	4601      	mov	r1, r0
 80153b6:	6818      	ldr	r0, [r3, #0]
 80153b8:	f000 b8b4 	b.w	8015524 <_calloc_r>
 80153bc:	200000a0 	.word	0x200000a0

080153c0 <__errno>:
 80153c0:	4b01      	ldr	r3, [pc, #4]	; (80153c8 <__errno+0x8>)
 80153c2:	6818      	ldr	r0, [r3, #0]
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	200000a0 	.word	0x200000a0

080153cc <getenv>:
 80153cc:	b507      	push	{r0, r1, r2, lr}
 80153ce:	4b04      	ldr	r3, [pc, #16]	; (80153e0 <getenv+0x14>)
 80153d0:	4601      	mov	r1, r0
 80153d2:	aa01      	add	r2, sp, #4
 80153d4:	6818      	ldr	r0, [r3, #0]
 80153d6:	f000 f805 	bl	80153e4 <_findenv_r>
 80153da:	b003      	add	sp, #12
 80153dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80153e0:	200000a0 	.word	0x200000a0

080153e4 <_findenv_r>:
 80153e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015458 <_findenv_r+0x74>
 80153ec:	4607      	mov	r7, r0
 80153ee:	4689      	mov	r9, r1
 80153f0:	4616      	mov	r6, r2
 80153f2:	f000 fca7 	bl	8015d44 <__env_lock>
 80153f6:	f8da 4000 	ldr.w	r4, [sl]
 80153fa:	b134      	cbz	r4, 801540a <_findenv_r+0x26>
 80153fc:	464b      	mov	r3, r9
 80153fe:	4698      	mov	r8, r3
 8015400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015404:	b13a      	cbz	r2, 8015416 <_findenv_r+0x32>
 8015406:	2a3d      	cmp	r2, #61	; 0x3d
 8015408:	d1f9      	bne.n	80153fe <_findenv_r+0x1a>
 801540a:	4638      	mov	r0, r7
 801540c:	f000 fca0 	bl	8015d50 <__env_unlock>
 8015410:	2000      	movs	r0, #0
 8015412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015416:	eba8 0809 	sub.w	r8, r8, r9
 801541a:	46a3      	mov	fp, r4
 801541c:	f854 0b04 	ldr.w	r0, [r4], #4
 8015420:	2800      	cmp	r0, #0
 8015422:	d0f2      	beq.n	801540a <_findenv_r+0x26>
 8015424:	4642      	mov	r2, r8
 8015426:	4649      	mov	r1, r9
 8015428:	f000 facd 	bl	80159c6 <strncmp>
 801542c:	2800      	cmp	r0, #0
 801542e:	d1f4      	bne.n	801541a <_findenv_r+0x36>
 8015430:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015434:	eb03 0508 	add.w	r5, r3, r8
 8015438:	f813 3008 	ldrb.w	r3, [r3, r8]
 801543c:	2b3d      	cmp	r3, #61	; 0x3d
 801543e:	d1ec      	bne.n	801541a <_findenv_r+0x36>
 8015440:	f8da 3000 	ldr.w	r3, [sl]
 8015444:	ebab 0303 	sub.w	r3, fp, r3
 8015448:	109b      	asrs	r3, r3, #2
 801544a:	4638      	mov	r0, r7
 801544c:	6033      	str	r3, [r6, #0]
 801544e:	f000 fc7f 	bl	8015d50 <__env_unlock>
 8015452:	1c68      	adds	r0, r5, #1
 8015454:	e7dd      	b.n	8015412 <_findenv_r+0x2e>
 8015456:	bf00      	nop
 8015458:	2000000c 	.word	0x2000000c

0801545c <__libc_init_array>:
 801545c:	b570      	push	{r4, r5, r6, lr}
 801545e:	4d0d      	ldr	r5, [pc, #52]	; (8015494 <__libc_init_array+0x38>)
 8015460:	4c0d      	ldr	r4, [pc, #52]	; (8015498 <__libc_init_array+0x3c>)
 8015462:	1b64      	subs	r4, r4, r5
 8015464:	10a4      	asrs	r4, r4, #2
 8015466:	2600      	movs	r6, #0
 8015468:	42a6      	cmp	r6, r4
 801546a:	d109      	bne.n	8015480 <__libc_init_array+0x24>
 801546c:	4d0b      	ldr	r5, [pc, #44]	; (801549c <__libc_init_array+0x40>)
 801546e:	4c0c      	ldr	r4, [pc, #48]	; (80154a0 <__libc_init_array+0x44>)
 8015470:	f001 fc2a 	bl	8016cc8 <_init>
 8015474:	1b64      	subs	r4, r4, r5
 8015476:	10a4      	asrs	r4, r4, #2
 8015478:	2600      	movs	r6, #0
 801547a:	42a6      	cmp	r6, r4
 801547c:	d105      	bne.n	801548a <__libc_init_array+0x2e>
 801547e:	bd70      	pop	{r4, r5, r6, pc}
 8015480:	f855 3b04 	ldr.w	r3, [r5], #4
 8015484:	4798      	blx	r3
 8015486:	3601      	adds	r6, #1
 8015488:	e7ee      	b.n	8015468 <__libc_init_array+0xc>
 801548a:	f855 3b04 	ldr.w	r3, [r5], #4
 801548e:	4798      	blx	r3
 8015490:	3601      	adds	r6, #1
 8015492:	e7f2      	b.n	801547a <__libc_init_array+0x1e>
 8015494:	08017b40 	.word	0x08017b40
 8015498:	08017b40 	.word	0x08017b40
 801549c:	08017b40 	.word	0x08017b40
 80154a0:	08017b44 	.word	0x08017b44

080154a4 <malloc>:
 80154a4:	4b02      	ldr	r3, [pc, #8]	; (80154b0 <malloc+0xc>)
 80154a6:	4601      	mov	r1, r0
 80154a8:	6818      	ldr	r0, [r3, #0]
 80154aa:	f000 b8bd 	b.w	8015628 <_malloc_r>
 80154ae:	bf00      	nop
 80154b0:	200000a0 	.word	0x200000a0

080154b4 <free>:
 80154b4:	4b02      	ldr	r3, [pc, #8]	; (80154c0 <free+0xc>)
 80154b6:	4601      	mov	r1, r0
 80154b8:	6818      	ldr	r0, [r3, #0]
 80154ba:	f000 b849 	b.w	8015550 <_free_r>
 80154be:	bf00      	nop
 80154c0:	200000a0 	.word	0x200000a0

080154c4 <memcpy>:
 80154c4:	440a      	add	r2, r1
 80154c6:	4291      	cmp	r1, r2
 80154c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80154cc:	d100      	bne.n	80154d0 <memcpy+0xc>
 80154ce:	4770      	bx	lr
 80154d0:	b510      	push	{r4, lr}
 80154d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80154d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80154da:	4291      	cmp	r1, r2
 80154dc:	d1f9      	bne.n	80154d2 <memcpy+0xe>
 80154de:	bd10      	pop	{r4, pc}

080154e0 <memmove>:
 80154e0:	4288      	cmp	r0, r1
 80154e2:	b510      	push	{r4, lr}
 80154e4:	eb01 0402 	add.w	r4, r1, r2
 80154e8:	d902      	bls.n	80154f0 <memmove+0x10>
 80154ea:	4284      	cmp	r4, r0
 80154ec:	4623      	mov	r3, r4
 80154ee:	d807      	bhi.n	8015500 <memmove+0x20>
 80154f0:	1e43      	subs	r3, r0, #1
 80154f2:	42a1      	cmp	r1, r4
 80154f4:	d008      	beq.n	8015508 <memmove+0x28>
 80154f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80154fe:	e7f8      	b.n	80154f2 <memmove+0x12>
 8015500:	4402      	add	r2, r0
 8015502:	4601      	mov	r1, r0
 8015504:	428a      	cmp	r2, r1
 8015506:	d100      	bne.n	801550a <memmove+0x2a>
 8015508:	bd10      	pop	{r4, pc}
 801550a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801550e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015512:	e7f7      	b.n	8015504 <memmove+0x24>

08015514 <memset>:
 8015514:	4402      	add	r2, r0
 8015516:	4603      	mov	r3, r0
 8015518:	4293      	cmp	r3, r2
 801551a:	d100      	bne.n	801551e <memset+0xa>
 801551c:	4770      	bx	lr
 801551e:	f803 1b01 	strb.w	r1, [r3], #1
 8015522:	e7f9      	b.n	8015518 <memset+0x4>

08015524 <_calloc_r>:
 8015524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015526:	fba1 2402 	umull	r2, r4, r1, r2
 801552a:	b94c      	cbnz	r4, 8015540 <_calloc_r+0x1c>
 801552c:	4611      	mov	r1, r2
 801552e:	9201      	str	r2, [sp, #4]
 8015530:	f000 f87a 	bl	8015628 <_malloc_r>
 8015534:	9a01      	ldr	r2, [sp, #4]
 8015536:	4605      	mov	r5, r0
 8015538:	b930      	cbnz	r0, 8015548 <_calloc_r+0x24>
 801553a:	4628      	mov	r0, r5
 801553c:	b003      	add	sp, #12
 801553e:	bd30      	pop	{r4, r5, pc}
 8015540:	220c      	movs	r2, #12
 8015542:	6002      	str	r2, [r0, #0]
 8015544:	2500      	movs	r5, #0
 8015546:	e7f8      	b.n	801553a <_calloc_r+0x16>
 8015548:	4621      	mov	r1, r4
 801554a:	f7ff ffe3 	bl	8015514 <memset>
 801554e:	e7f4      	b.n	801553a <_calloc_r+0x16>

08015550 <_free_r>:
 8015550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015552:	2900      	cmp	r1, #0
 8015554:	d044      	beq.n	80155e0 <_free_r+0x90>
 8015556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801555a:	9001      	str	r0, [sp, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	f1a1 0404 	sub.w	r4, r1, #4
 8015562:	bfb8      	it	lt
 8015564:	18e4      	addlt	r4, r4, r3
 8015566:	f000 fe2b 	bl	80161c0 <__malloc_lock>
 801556a:	4a1e      	ldr	r2, [pc, #120]	; (80155e4 <_free_r+0x94>)
 801556c:	9801      	ldr	r0, [sp, #4]
 801556e:	6813      	ldr	r3, [r2, #0]
 8015570:	b933      	cbnz	r3, 8015580 <_free_r+0x30>
 8015572:	6063      	str	r3, [r4, #4]
 8015574:	6014      	str	r4, [r2, #0]
 8015576:	b003      	add	sp, #12
 8015578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801557c:	f000 be26 	b.w	80161cc <__malloc_unlock>
 8015580:	42a3      	cmp	r3, r4
 8015582:	d908      	bls.n	8015596 <_free_r+0x46>
 8015584:	6825      	ldr	r5, [r4, #0]
 8015586:	1961      	adds	r1, r4, r5
 8015588:	428b      	cmp	r3, r1
 801558a:	bf01      	itttt	eq
 801558c:	6819      	ldreq	r1, [r3, #0]
 801558e:	685b      	ldreq	r3, [r3, #4]
 8015590:	1949      	addeq	r1, r1, r5
 8015592:	6021      	streq	r1, [r4, #0]
 8015594:	e7ed      	b.n	8015572 <_free_r+0x22>
 8015596:	461a      	mov	r2, r3
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	b10b      	cbz	r3, 80155a0 <_free_r+0x50>
 801559c:	42a3      	cmp	r3, r4
 801559e:	d9fa      	bls.n	8015596 <_free_r+0x46>
 80155a0:	6811      	ldr	r1, [r2, #0]
 80155a2:	1855      	adds	r5, r2, r1
 80155a4:	42a5      	cmp	r5, r4
 80155a6:	d10b      	bne.n	80155c0 <_free_r+0x70>
 80155a8:	6824      	ldr	r4, [r4, #0]
 80155aa:	4421      	add	r1, r4
 80155ac:	1854      	adds	r4, r2, r1
 80155ae:	42a3      	cmp	r3, r4
 80155b0:	6011      	str	r1, [r2, #0]
 80155b2:	d1e0      	bne.n	8015576 <_free_r+0x26>
 80155b4:	681c      	ldr	r4, [r3, #0]
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	6053      	str	r3, [r2, #4]
 80155ba:	4421      	add	r1, r4
 80155bc:	6011      	str	r1, [r2, #0]
 80155be:	e7da      	b.n	8015576 <_free_r+0x26>
 80155c0:	d902      	bls.n	80155c8 <_free_r+0x78>
 80155c2:	230c      	movs	r3, #12
 80155c4:	6003      	str	r3, [r0, #0]
 80155c6:	e7d6      	b.n	8015576 <_free_r+0x26>
 80155c8:	6825      	ldr	r5, [r4, #0]
 80155ca:	1961      	adds	r1, r4, r5
 80155cc:	428b      	cmp	r3, r1
 80155ce:	bf04      	itt	eq
 80155d0:	6819      	ldreq	r1, [r3, #0]
 80155d2:	685b      	ldreq	r3, [r3, #4]
 80155d4:	6063      	str	r3, [r4, #4]
 80155d6:	bf04      	itt	eq
 80155d8:	1949      	addeq	r1, r1, r5
 80155da:	6021      	streq	r1, [r4, #0]
 80155dc:	6054      	str	r4, [r2, #4]
 80155de:	e7ca      	b.n	8015576 <_free_r+0x26>
 80155e0:	b003      	add	sp, #12
 80155e2:	bd30      	pop	{r4, r5, pc}
 80155e4:	2000c1e0 	.word	0x2000c1e0

080155e8 <sbrk_aligned>:
 80155e8:	b570      	push	{r4, r5, r6, lr}
 80155ea:	4e0e      	ldr	r6, [pc, #56]	; (8015624 <sbrk_aligned+0x3c>)
 80155ec:	460c      	mov	r4, r1
 80155ee:	6831      	ldr	r1, [r6, #0]
 80155f0:	4605      	mov	r5, r0
 80155f2:	b911      	cbnz	r1, 80155fa <sbrk_aligned+0x12>
 80155f4:	f000 f98e 	bl	8015914 <_sbrk_r>
 80155f8:	6030      	str	r0, [r6, #0]
 80155fa:	4621      	mov	r1, r4
 80155fc:	4628      	mov	r0, r5
 80155fe:	f000 f989 	bl	8015914 <_sbrk_r>
 8015602:	1c43      	adds	r3, r0, #1
 8015604:	d00a      	beq.n	801561c <sbrk_aligned+0x34>
 8015606:	1cc4      	adds	r4, r0, #3
 8015608:	f024 0403 	bic.w	r4, r4, #3
 801560c:	42a0      	cmp	r0, r4
 801560e:	d007      	beq.n	8015620 <sbrk_aligned+0x38>
 8015610:	1a21      	subs	r1, r4, r0
 8015612:	4628      	mov	r0, r5
 8015614:	f000 f97e 	bl	8015914 <_sbrk_r>
 8015618:	3001      	adds	r0, #1
 801561a:	d101      	bne.n	8015620 <sbrk_aligned+0x38>
 801561c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015620:	4620      	mov	r0, r4
 8015622:	bd70      	pop	{r4, r5, r6, pc}
 8015624:	2000c1e4 	.word	0x2000c1e4

08015628 <_malloc_r>:
 8015628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801562c:	1ccd      	adds	r5, r1, #3
 801562e:	f025 0503 	bic.w	r5, r5, #3
 8015632:	3508      	adds	r5, #8
 8015634:	2d0c      	cmp	r5, #12
 8015636:	bf38      	it	cc
 8015638:	250c      	movcc	r5, #12
 801563a:	2d00      	cmp	r5, #0
 801563c:	4607      	mov	r7, r0
 801563e:	db01      	blt.n	8015644 <_malloc_r+0x1c>
 8015640:	42a9      	cmp	r1, r5
 8015642:	d905      	bls.n	8015650 <_malloc_r+0x28>
 8015644:	230c      	movs	r3, #12
 8015646:	603b      	str	r3, [r7, #0]
 8015648:	2600      	movs	r6, #0
 801564a:	4630      	mov	r0, r6
 801564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015650:	4e2e      	ldr	r6, [pc, #184]	; (801570c <_malloc_r+0xe4>)
 8015652:	f000 fdb5 	bl	80161c0 <__malloc_lock>
 8015656:	6833      	ldr	r3, [r6, #0]
 8015658:	461c      	mov	r4, r3
 801565a:	bb34      	cbnz	r4, 80156aa <_malloc_r+0x82>
 801565c:	4629      	mov	r1, r5
 801565e:	4638      	mov	r0, r7
 8015660:	f7ff ffc2 	bl	80155e8 <sbrk_aligned>
 8015664:	1c43      	adds	r3, r0, #1
 8015666:	4604      	mov	r4, r0
 8015668:	d14d      	bne.n	8015706 <_malloc_r+0xde>
 801566a:	6834      	ldr	r4, [r6, #0]
 801566c:	4626      	mov	r6, r4
 801566e:	2e00      	cmp	r6, #0
 8015670:	d140      	bne.n	80156f4 <_malloc_r+0xcc>
 8015672:	6823      	ldr	r3, [r4, #0]
 8015674:	4631      	mov	r1, r6
 8015676:	4638      	mov	r0, r7
 8015678:	eb04 0803 	add.w	r8, r4, r3
 801567c:	f000 f94a 	bl	8015914 <_sbrk_r>
 8015680:	4580      	cmp	r8, r0
 8015682:	d13a      	bne.n	80156fa <_malloc_r+0xd2>
 8015684:	6821      	ldr	r1, [r4, #0]
 8015686:	3503      	adds	r5, #3
 8015688:	1a6d      	subs	r5, r5, r1
 801568a:	f025 0503 	bic.w	r5, r5, #3
 801568e:	3508      	adds	r5, #8
 8015690:	2d0c      	cmp	r5, #12
 8015692:	bf38      	it	cc
 8015694:	250c      	movcc	r5, #12
 8015696:	4629      	mov	r1, r5
 8015698:	4638      	mov	r0, r7
 801569a:	f7ff ffa5 	bl	80155e8 <sbrk_aligned>
 801569e:	3001      	adds	r0, #1
 80156a0:	d02b      	beq.n	80156fa <_malloc_r+0xd2>
 80156a2:	6823      	ldr	r3, [r4, #0]
 80156a4:	442b      	add	r3, r5
 80156a6:	6023      	str	r3, [r4, #0]
 80156a8:	e00e      	b.n	80156c8 <_malloc_r+0xa0>
 80156aa:	6822      	ldr	r2, [r4, #0]
 80156ac:	1b52      	subs	r2, r2, r5
 80156ae:	d41e      	bmi.n	80156ee <_malloc_r+0xc6>
 80156b0:	2a0b      	cmp	r2, #11
 80156b2:	d916      	bls.n	80156e2 <_malloc_r+0xba>
 80156b4:	1961      	adds	r1, r4, r5
 80156b6:	42a3      	cmp	r3, r4
 80156b8:	6025      	str	r5, [r4, #0]
 80156ba:	bf18      	it	ne
 80156bc:	6059      	strne	r1, [r3, #4]
 80156be:	6863      	ldr	r3, [r4, #4]
 80156c0:	bf08      	it	eq
 80156c2:	6031      	streq	r1, [r6, #0]
 80156c4:	5162      	str	r2, [r4, r5]
 80156c6:	604b      	str	r3, [r1, #4]
 80156c8:	4638      	mov	r0, r7
 80156ca:	f104 060b 	add.w	r6, r4, #11
 80156ce:	f000 fd7d 	bl	80161cc <__malloc_unlock>
 80156d2:	f026 0607 	bic.w	r6, r6, #7
 80156d6:	1d23      	adds	r3, r4, #4
 80156d8:	1af2      	subs	r2, r6, r3
 80156da:	d0b6      	beq.n	801564a <_malloc_r+0x22>
 80156dc:	1b9b      	subs	r3, r3, r6
 80156de:	50a3      	str	r3, [r4, r2]
 80156e0:	e7b3      	b.n	801564a <_malloc_r+0x22>
 80156e2:	6862      	ldr	r2, [r4, #4]
 80156e4:	42a3      	cmp	r3, r4
 80156e6:	bf0c      	ite	eq
 80156e8:	6032      	streq	r2, [r6, #0]
 80156ea:	605a      	strne	r2, [r3, #4]
 80156ec:	e7ec      	b.n	80156c8 <_malloc_r+0xa0>
 80156ee:	4623      	mov	r3, r4
 80156f0:	6864      	ldr	r4, [r4, #4]
 80156f2:	e7b2      	b.n	801565a <_malloc_r+0x32>
 80156f4:	4634      	mov	r4, r6
 80156f6:	6876      	ldr	r6, [r6, #4]
 80156f8:	e7b9      	b.n	801566e <_malloc_r+0x46>
 80156fa:	230c      	movs	r3, #12
 80156fc:	603b      	str	r3, [r7, #0]
 80156fe:	4638      	mov	r0, r7
 8015700:	f000 fd64 	bl	80161cc <__malloc_unlock>
 8015704:	e7a1      	b.n	801564a <_malloc_r+0x22>
 8015706:	6025      	str	r5, [r4, #0]
 8015708:	e7de      	b.n	80156c8 <_malloc_r+0xa0>
 801570a:	bf00      	nop
 801570c:	2000c1e0 	.word	0x2000c1e0

08015710 <iprintf>:
 8015710:	b40f      	push	{r0, r1, r2, r3}
 8015712:	4b0a      	ldr	r3, [pc, #40]	; (801573c <iprintf+0x2c>)
 8015714:	b513      	push	{r0, r1, r4, lr}
 8015716:	681c      	ldr	r4, [r3, #0]
 8015718:	b124      	cbz	r4, 8015724 <iprintf+0x14>
 801571a:	69a3      	ldr	r3, [r4, #24]
 801571c:	b913      	cbnz	r3, 8015724 <iprintf+0x14>
 801571e:	4620      	mov	r0, r4
 8015720:	f000 fc36 	bl	8015f90 <__sinit>
 8015724:	ab05      	add	r3, sp, #20
 8015726:	9a04      	ldr	r2, [sp, #16]
 8015728:	68a1      	ldr	r1, [r4, #8]
 801572a:	9301      	str	r3, [sp, #4]
 801572c:	4620      	mov	r0, r4
 801572e:	f000 ff07 	bl	8016540 <_vfiprintf_r>
 8015732:	b002      	add	sp, #8
 8015734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015738:	b004      	add	sp, #16
 801573a:	4770      	bx	lr
 801573c:	200000a0 	.word	0x200000a0

08015740 <_puts_r>:
 8015740:	b570      	push	{r4, r5, r6, lr}
 8015742:	460e      	mov	r6, r1
 8015744:	4605      	mov	r5, r0
 8015746:	b118      	cbz	r0, 8015750 <_puts_r+0x10>
 8015748:	6983      	ldr	r3, [r0, #24]
 801574a:	b90b      	cbnz	r3, 8015750 <_puts_r+0x10>
 801574c:	f000 fc20 	bl	8015f90 <__sinit>
 8015750:	69ab      	ldr	r3, [r5, #24]
 8015752:	68ac      	ldr	r4, [r5, #8]
 8015754:	b913      	cbnz	r3, 801575c <_puts_r+0x1c>
 8015756:	4628      	mov	r0, r5
 8015758:	f000 fc1a 	bl	8015f90 <__sinit>
 801575c:	4b2c      	ldr	r3, [pc, #176]	; (8015810 <_puts_r+0xd0>)
 801575e:	429c      	cmp	r4, r3
 8015760:	d120      	bne.n	80157a4 <_puts_r+0x64>
 8015762:	686c      	ldr	r4, [r5, #4]
 8015764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015766:	07db      	lsls	r3, r3, #31
 8015768:	d405      	bmi.n	8015776 <_puts_r+0x36>
 801576a:	89a3      	ldrh	r3, [r4, #12]
 801576c:	0598      	lsls	r0, r3, #22
 801576e:	d402      	bmi.n	8015776 <_puts_r+0x36>
 8015770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015772:	f000 fcbd 	bl	80160f0 <__retarget_lock_acquire_recursive>
 8015776:	89a3      	ldrh	r3, [r4, #12]
 8015778:	0719      	lsls	r1, r3, #28
 801577a:	d51d      	bpl.n	80157b8 <_puts_r+0x78>
 801577c:	6923      	ldr	r3, [r4, #16]
 801577e:	b1db      	cbz	r3, 80157b8 <_puts_r+0x78>
 8015780:	3e01      	subs	r6, #1
 8015782:	68a3      	ldr	r3, [r4, #8]
 8015784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015788:	3b01      	subs	r3, #1
 801578a:	60a3      	str	r3, [r4, #8]
 801578c:	bb39      	cbnz	r1, 80157de <_puts_r+0x9e>
 801578e:	2b00      	cmp	r3, #0
 8015790:	da38      	bge.n	8015804 <_puts_r+0xc4>
 8015792:	4622      	mov	r2, r4
 8015794:	210a      	movs	r1, #10
 8015796:	4628      	mov	r0, r5
 8015798:	f000 f9f6 	bl	8015b88 <__swbuf_r>
 801579c:	3001      	adds	r0, #1
 801579e:	d011      	beq.n	80157c4 <_puts_r+0x84>
 80157a0:	250a      	movs	r5, #10
 80157a2:	e011      	b.n	80157c8 <_puts_r+0x88>
 80157a4:	4b1b      	ldr	r3, [pc, #108]	; (8015814 <_puts_r+0xd4>)
 80157a6:	429c      	cmp	r4, r3
 80157a8:	d101      	bne.n	80157ae <_puts_r+0x6e>
 80157aa:	68ac      	ldr	r4, [r5, #8]
 80157ac:	e7da      	b.n	8015764 <_puts_r+0x24>
 80157ae:	4b1a      	ldr	r3, [pc, #104]	; (8015818 <_puts_r+0xd8>)
 80157b0:	429c      	cmp	r4, r3
 80157b2:	bf08      	it	eq
 80157b4:	68ec      	ldreq	r4, [r5, #12]
 80157b6:	e7d5      	b.n	8015764 <_puts_r+0x24>
 80157b8:	4621      	mov	r1, r4
 80157ba:	4628      	mov	r0, r5
 80157bc:	f000 fa36 	bl	8015c2c <__swsetup_r>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d0dd      	beq.n	8015780 <_puts_r+0x40>
 80157c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80157c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157ca:	07da      	lsls	r2, r3, #31
 80157cc:	d405      	bmi.n	80157da <_puts_r+0x9a>
 80157ce:	89a3      	ldrh	r3, [r4, #12]
 80157d0:	059b      	lsls	r3, r3, #22
 80157d2:	d402      	bmi.n	80157da <_puts_r+0x9a>
 80157d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157d6:	f000 fc8c 	bl	80160f2 <__retarget_lock_release_recursive>
 80157da:	4628      	mov	r0, r5
 80157dc:	bd70      	pop	{r4, r5, r6, pc}
 80157de:	2b00      	cmp	r3, #0
 80157e0:	da04      	bge.n	80157ec <_puts_r+0xac>
 80157e2:	69a2      	ldr	r2, [r4, #24]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	dc06      	bgt.n	80157f6 <_puts_r+0xb6>
 80157e8:	290a      	cmp	r1, #10
 80157ea:	d004      	beq.n	80157f6 <_puts_r+0xb6>
 80157ec:	6823      	ldr	r3, [r4, #0]
 80157ee:	1c5a      	adds	r2, r3, #1
 80157f0:	6022      	str	r2, [r4, #0]
 80157f2:	7019      	strb	r1, [r3, #0]
 80157f4:	e7c5      	b.n	8015782 <_puts_r+0x42>
 80157f6:	4622      	mov	r2, r4
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 f9c5 	bl	8015b88 <__swbuf_r>
 80157fe:	3001      	adds	r0, #1
 8015800:	d1bf      	bne.n	8015782 <_puts_r+0x42>
 8015802:	e7df      	b.n	80157c4 <_puts_r+0x84>
 8015804:	6823      	ldr	r3, [r4, #0]
 8015806:	250a      	movs	r5, #10
 8015808:	1c5a      	adds	r2, r3, #1
 801580a:	6022      	str	r2, [r4, #0]
 801580c:	701d      	strb	r5, [r3, #0]
 801580e:	e7db      	b.n	80157c8 <_puts_r+0x88>
 8015810:	08017ac4 	.word	0x08017ac4
 8015814:	08017ae4 	.word	0x08017ae4
 8015818:	08017aa4 	.word	0x08017aa4

0801581c <puts>:
 801581c:	4b02      	ldr	r3, [pc, #8]	; (8015828 <puts+0xc>)
 801581e:	4601      	mov	r1, r0
 8015820:	6818      	ldr	r0, [r3, #0]
 8015822:	f7ff bf8d 	b.w	8015740 <_puts_r>
 8015826:	bf00      	nop
 8015828:	200000a0 	.word	0x200000a0

0801582c <srand>:
 801582c:	b538      	push	{r3, r4, r5, lr}
 801582e:	4b10      	ldr	r3, [pc, #64]	; (8015870 <srand+0x44>)
 8015830:	681d      	ldr	r5, [r3, #0]
 8015832:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8015834:	4604      	mov	r4, r0
 8015836:	b9b3      	cbnz	r3, 8015866 <srand+0x3a>
 8015838:	2018      	movs	r0, #24
 801583a:	f7ff fe33 	bl	80154a4 <malloc>
 801583e:	4602      	mov	r2, r0
 8015840:	63a8      	str	r0, [r5, #56]	; 0x38
 8015842:	b920      	cbnz	r0, 801584e <srand+0x22>
 8015844:	4b0b      	ldr	r3, [pc, #44]	; (8015874 <srand+0x48>)
 8015846:	480c      	ldr	r0, [pc, #48]	; (8015878 <srand+0x4c>)
 8015848:	2142      	movs	r1, #66	; 0x42
 801584a:	f000 fa5d 	bl	8015d08 <__assert_func>
 801584e:	490b      	ldr	r1, [pc, #44]	; (801587c <srand+0x50>)
 8015850:	4b0b      	ldr	r3, [pc, #44]	; (8015880 <srand+0x54>)
 8015852:	e9c0 1300 	strd	r1, r3, [r0]
 8015856:	4b0b      	ldr	r3, [pc, #44]	; (8015884 <srand+0x58>)
 8015858:	6083      	str	r3, [r0, #8]
 801585a:	230b      	movs	r3, #11
 801585c:	8183      	strh	r3, [r0, #12]
 801585e:	2100      	movs	r1, #0
 8015860:	2001      	movs	r0, #1
 8015862:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015866:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8015868:	2200      	movs	r2, #0
 801586a:	611c      	str	r4, [r3, #16]
 801586c:	615a      	str	r2, [r3, #20]
 801586e:	bd38      	pop	{r3, r4, r5, pc}
 8015870:	200000a0 	.word	0x200000a0
 8015874:	080179f4 	.word	0x080179f4
 8015878:	08017a0b 	.word	0x08017a0b
 801587c:	abcd330e 	.word	0xabcd330e
 8015880:	e66d1234 	.word	0xe66d1234
 8015884:	0005deec 	.word	0x0005deec

08015888 <rand>:
 8015888:	4b16      	ldr	r3, [pc, #88]	; (80158e4 <rand+0x5c>)
 801588a:	b510      	push	{r4, lr}
 801588c:	681c      	ldr	r4, [r3, #0]
 801588e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015890:	b9b3      	cbnz	r3, 80158c0 <rand+0x38>
 8015892:	2018      	movs	r0, #24
 8015894:	f7ff fe06 	bl	80154a4 <malloc>
 8015898:	63a0      	str	r0, [r4, #56]	; 0x38
 801589a:	b928      	cbnz	r0, 80158a8 <rand+0x20>
 801589c:	4602      	mov	r2, r0
 801589e:	4b12      	ldr	r3, [pc, #72]	; (80158e8 <rand+0x60>)
 80158a0:	4812      	ldr	r0, [pc, #72]	; (80158ec <rand+0x64>)
 80158a2:	214e      	movs	r1, #78	; 0x4e
 80158a4:	f000 fa30 	bl	8015d08 <__assert_func>
 80158a8:	4a11      	ldr	r2, [pc, #68]	; (80158f0 <rand+0x68>)
 80158aa:	4b12      	ldr	r3, [pc, #72]	; (80158f4 <rand+0x6c>)
 80158ac:	e9c0 2300 	strd	r2, r3, [r0]
 80158b0:	4b11      	ldr	r3, [pc, #68]	; (80158f8 <rand+0x70>)
 80158b2:	6083      	str	r3, [r0, #8]
 80158b4:	230b      	movs	r3, #11
 80158b6:	8183      	strh	r3, [r0, #12]
 80158b8:	2201      	movs	r2, #1
 80158ba:	2300      	movs	r3, #0
 80158bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80158c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80158c2:	4a0e      	ldr	r2, [pc, #56]	; (80158fc <rand+0x74>)
 80158c4:	6920      	ldr	r0, [r4, #16]
 80158c6:	6963      	ldr	r3, [r4, #20]
 80158c8:	490d      	ldr	r1, [pc, #52]	; (8015900 <rand+0x78>)
 80158ca:	4342      	muls	r2, r0
 80158cc:	fb01 2203 	mla	r2, r1, r3, r2
 80158d0:	fba0 0101 	umull	r0, r1, r0, r1
 80158d4:	1c43      	adds	r3, r0, #1
 80158d6:	eb42 0001 	adc.w	r0, r2, r1
 80158da:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80158de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80158e2:	bd10      	pop	{r4, pc}
 80158e4:	200000a0 	.word	0x200000a0
 80158e8:	080179f4 	.word	0x080179f4
 80158ec:	08017a0b 	.word	0x08017a0b
 80158f0:	abcd330e 	.word	0xabcd330e
 80158f4:	e66d1234 	.word	0xe66d1234
 80158f8:	0005deec 	.word	0x0005deec
 80158fc:	5851f42d 	.word	0x5851f42d
 8015900:	4c957f2d 	.word	0x4c957f2d

08015904 <realloc>:
 8015904:	4b02      	ldr	r3, [pc, #8]	; (8015910 <realloc+0xc>)
 8015906:	460a      	mov	r2, r1
 8015908:	4601      	mov	r1, r0
 801590a:	6818      	ldr	r0, [r3, #0]
 801590c:	f000 bc64 	b.w	80161d8 <_realloc_r>
 8015910:	200000a0 	.word	0x200000a0

08015914 <_sbrk_r>:
 8015914:	b538      	push	{r3, r4, r5, lr}
 8015916:	4d06      	ldr	r5, [pc, #24]	; (8015930 <_sbrk_r+0x1c>)
 8015918:	2300      	movs	r3, #0
 801591a:	4604      	mov	r4, r0
 801591c:	4608      	mov	r0, r1
 801591e:	602b      	str	r3, [r5, #0]
 8015920:	f7ec ff32 	bl	8002788 <_sbrk>
 8015924:	1c43      	adds	r3, r0, #1
 8015926:	d102      	bne.n	801592e <_sbrk_r+0x1a>
 8015928:	682b      	ldr	r3, [r5, #0]
 801592a:	b103      	cbz	r3, 801592e <_sbrk_r+0x1a>
 801592c:	6023      	str	r3, [r4, #0]
 801592e:	bd38      	pop	{r3, r4, r5, pc}
 8015930:	2000c1ec 	.word	0x2000c1ec

08015934 <sniprintf>:
 8015934:	b40c      	push	{r2, r3}
 8015936:	b530      	push	{r4, r5, lr}
 8015938:	4b17      	ldr	r3, [pc, #92]	; (8015998 <sniprintf+0x64>)
 801593a:	1e0c      	subs	r4, r1, #0
 801593c:	681d      	ldr	r5, [r3, #0]
 801593e:	b09d      	sub	sp, #116	; 0x74
 8015940:	da08      	bge.n	8015954 <sniprintf+0x20>
 8015942:	238b      	movs	r3, #139	; 0x8b
 8015944:	602b      	str	r3, [r5, #0]
 8015946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801594a:	b01d      	add	sp, #116	; 0x74
 801594c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015950:	b002      	add	sp, #8
 8015952:	4770      	bx	lr
 8015954:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015958:	f8ad 3014 	strh.w	r3, [sp, #20]
 801595c:	bf14      	ite	ne
 801595e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015962:	4623      	moveq	r3, r4
 8015964:	9304      	str	r3, [sp, #16]
 8015966:	9307      	str	r3, [sp, #28]
 8015968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801596c:	9002      	str	r0, [sp, #8]
 801596e:	9006      	str	r0, [sp, #24]
 8015970:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015974:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015976:	ab21      	add	r3, sp, #132	; 0x84
 8015978:	a902      	add	r1, sp, #8
 801597a:	4628      	mov	r0, r5
 801597c:	9301      	str	r3, [sp, #4]
 801597e:	f000 fcb5 	bl	80162ec <_svfiprintf_r>
 8015982:	1c43      	adds	r3, r0, #1
 8015984:	bfbc      	itt	lt
 8015986:	238b      	movlt	r3, #139	; 0x8b
 8015988:	602b      	strlt	r3, [r5, #0]
 801598a:	2c00      	cmp	r4, #0
 801598c:	d0dd      	beq.n	801594a <sniprintf+0x16>
 801598e:	9b02      	ldr	r3, [sp, #8]
 8015990:	2200      	movs	r2, #0
 8015992:	701a      	strb	r2, [r3, #0]
 8015994:	e7d9      	b.n	801594a <sniprintf+0x16>
 8015996:	bf00      	nop
 8015998:	200000a0 	.word	0x200000a0

0801599c <strchr>:
 801599c:	b2c9      	uxtb	r1, r1
 801599e:	4603      	mov	r3, r0
 80159a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159a4:	b11a      	cbz	r2, 80159ae <strchr+0x12>
 80159a6:	428a      	cmp	r2, r1
 80159a8:	d1f9      	bne.n	801599e <strchr+0x2>
 80159aa:	4618      	mov	r0, r3
 80159ac:	4770      	bx	lr
 80159ae:	2900      	cmp	r1, #0
 80159b0:	bf18      	it	ne
 80159b2:	2300      	movne	r3, #0
 80159b4:	e7f9      	b.n	80159aa <strchr+0xe>

080159b6 <strcpy>:
 80159b6:	4603      	mov	r3, r0
 80159b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159bc:	f803 2b01 	strb.w	r2, [r3], #1
 80159c0:	2a00      	cmp	r2, #0
 80159c2:	d1f9      	bne.n	80159b8 <strcpy+0x2>
 80159c4:	4770      	bx	lr

080159c6 <strncmp>:
 80159c6:	b510      	push	{r4, lr}
 80159c8:	b17a      	cbz	r2, 80159ea <strncmp+0x24>
 80159ca:	4603      	mov	r3, r0
 80159cc:	3901      	subs	r1, #1
 80159ce:	1884      	adds	r4, r0, r2
 80159d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80159d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80159d8:	4290      	cmp	r0, r2
 80159da:	d101      	bne.n	80159e0 <strncmp+0x1a>
 80159dc:	42a3      	cmp	r3, r4
 80159de:	d101      	bne.n	80159e4 <strncmp+0x1e>
 80159e0:	1a80      	subs	r0, r0, r2
 80159e2:	bd10      	pop	{r4, pc}
 80159e4:	2800      	cmp	r0, #0
 80159e6:	d1f3      	bne.n	80159d0 <strncmp+0xa>
 80159e8:	e7fa      	b.n	80159e0 <strncmp+0x1a>
 80159ea:	4610      	mov	r0, r2
 80159ec:	e7f9      	b.n	80159e2 <strncmp+0x1c>

080159ee <strstr>:
 80159ee:	780a      	ldrb	r2, [r1, #0]
 80159f0:	b570      	push	{r4, r5, r6, lr}
 80159f2:	b96a      	cbnz	r2, 8015a10 <strstr+0x22>
 80159f4:	bd70      	pop	{r4, r5, r6, pc}
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d109      	bne.n	8015a0e <strstr+0x20>
 80159fa:	460c      	mov	r4, r1
 80159fc:	4605      	mov	r5, r0
 80159fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d0f6      	beq.n	80159f4 <strstr+0x6>
 8015a06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015a0a:	429e      	cmp	r6, r3
 8015a0c:	d0f7      	beq.n	80159fe <strstr+0x10>
 8015a0e:	3001      	adds	r0, #1
 8015a10:	7803      	ldrb	r3, [r0, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1ef      	bne.n	80159f6 <strstr+0x8>
 8015a16:	4618      	mov	r0, r3
 8015a18:	e7ec      	b.n	80159f4 <strstr+0x6>
	...

08015a1c <_strtoul_l.constprop.0>:
 8015a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a20:	4f36      	ldr	r7, [pc, #216]	; (8015afc <_strtoul_l.constprop.0+0xe0>)
 8015a22:	4686      	mov	lr, r0
 8015a24:	460d      	mov	r5, r1
 8015a26:	4628      	mov	r0, r5
 8015a28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a2c:	5de6      	ldrb	r6, [r4, r7]
 8015a2e:	f016 0608 	ands.w	r6, r6, #8
 8015a32:	d1f8      	bne.n	8015a26 <_strtoul_l.constprop.0+0xa>
 8015a34:	2c2d      	cmp	r4, #45	; 0x2d
 8015a36:	d12f      	bne.n	8015a98 <_strtoul_l.constprop.0+0x7c>
 8015a38:	782c      	ldrb	r4, [r5, #0]
 8015a3a:	2601      	movs	r6, #1
 8015a3c:	1c85      	adds	r5, r0, #2
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d057      	beq.n	8015af2 <_strtoul_l.constprop.0+0xd6>
 8015a42:	2b10      	cmp	r3, #16
 8015a44:	d109      	bne.n	8015a5a <_strtoul_l.constprop.0+0x3e>
 8015a46:	2c30      	cmp	r4, #48	; 0x30
 8015a48:	d107      	bne.n	8015a5a <_strtoul_l.constprop.0+0x3e>
 8015a4a:	7828      	ldrb	r0, [r5, #0]
 8015a4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015a50:	2858      	cmp	r0, #88	; 0x58
 8015a52:	d149      	bne.n	8015ae8 <_strtoul_l.constprop.0+0xcc>
 8015a54:	786c      	ldrb	r4, [r5, #1]
 8015a56:	2310      	movs	r3, #16
 8015a58:	3502      	adds	r5, #2
 8015a5a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015a5e:	2700      	movs	r7, #0
 8015a60:	fbb8 f8f3 	udiv	r8, r8, r3
 8015a64:	fb03 f908 	mul.w	r9, r3, r8
 8015a68:	ea6f 0909 	mvn.w	r9, r9
 8015a6c:	4638      	mov	r0, r7
 8015a6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015a72:	f1bc 0f09 	cmp.w	ip, #9
 8015a76:	d814      	bhi.n	8015aa2 <_strtoul_l.constprop.0+0x86>
 8015a78:	4664      	mov	r4, ip
 8015a7a:	42a3      	cmp	r3, r4
 8015a7c:	dd22      	ble.n	8015ac4 <_strtoul_l.constprop.0+0xa8>
 8015a7e:	2f00      	cmp	r7, #0
 8015a80:	db1d      	blt.n	8015abe <_strtoul_l.constprop.0+0xa2>
 8015a82:	4580      	cmp	r8, r0
 8015a84:	d31b      	bcc.n	8015abe <_strtoul_l.constprop.0+0xa2>
 8015a86:	d101      	bne.n	8015a8c <_strtoul_l.constprop.0+0x70>
 8015a88:	45a1      	cmp	r9, r4
 8015a8a:	db18      	blt.n	8015abe <_strtoul_l.constprop.0+0xa2>
 8015a8c:	fb00 4003 	mla	r0, r0, r3, r4
 8015a90:	2701      	movs	r7, #1
 8015a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a96:	e7ea      	b.n	8015a6e <_strtoul_l.constprop.0+0x52>
 8015a98:	2c2b      	cmp	r4, #43	; 0x2b
 8015a9a:	bf04      	itt	eq
 8015a9c:	782c      	ldrbeq	r4, [r5, #0]
 8015a9e:	1c85      	addeq	r5, r0, #2
 8015aa0:	e7cd      	b.n	8015a3e <_strtoul_l.constprop.0+0x22>
 8015aa2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015aa6:	f1bc 0f19 	cmp.w	ip, #25
 8015aaa:	d801      	bhi.n	8015ab0 <_strtoul_l.constprop.0+0x94>
 8015aac:	3c37      	subs	r4, #55	; 0x37
 8015aae:	e7e4      	b.n	8015a7a <_strtoul_l.constprop.0+0x5e>
 8015ab0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015ab4:	f1bc 0f19 	cmp.w	ip, #25
 8015ab8:	d804      	bhi.n	8015ac4 <_strtoul_l.constprop.0+0xa8>
 8015aba:	3c57      	subs	r4, #87	; 0x57
 8015abc:	e7dd      	b.n	8015a7a <_strtoul_l.constprop.0+0x5e>
 8015abe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015ac2:	e7e6      	b.n	8015a92 <_strtoul_l.constprop.0+0x76>
 8015ac4:	2f00      	cmp	r7, #0
 8015ac6:	da07      	bge.n	8015ad8 <_strtoul_l.constprop.0+0xbc>
 8015ac8:	2322      	movs	r3, #34	; 0x22
 8015aca:	f8ce 3000 	str.w	r3, [lr]
 8015ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ad2:	b932      	cbnz	r2, 8015ae2 <_strtoul_l.constprop.0+0xc6>
 8015ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ad8:	b106      	cbz	r6, 8015adc <_strtoul_l.constprop.0+0xc0>
 8015ada:	4240      	negs	r0, r0
 8015adc:	2a00      	cmp	r2, #0
 8015ade:	d0f9      	beq.n	8015ad4 <_strtoul_l.constprop.0+0xb8>
 8015ae0:	b107      	cbz	r7, 8015ae4 <_strtoul_l.constprop.0+0xc8>
 8015ae2:	1e69      	subs	r1, r5, #1
 8015ae4:	6011      	str	r1, [r2, #0]
 8015ae6:	e7f5      	b.n	8015ad4 <_strtoul_l.constprop.0+0xb8>
 8015ae8:	2430      	movs	r4, #48	; 0x30
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d1b5      	bne.n	8015a5a <_strtoul_l.constprop.0+0x3e>
 8015aee:	2308      	movs	r3, #8
 8015af0:	e7b3      	b.n	8015a5a <_strtoul_l.constprop.0+0x3e>
 8015af2:	2c30      	cmp	r4, #48	; 0x30
 8015af4:	d0a9      	beq.n	8015a4a <_strtoul_l.constprop.0+0x2e>
 8015af6:	230a      	movs	r3, #10
 8015af8:	e7af      	b.n	8015a5a <_strtoul_l.constprop.0+0x3e>
 8015afa:	bf00      	nop
 8015afc:	080178ed 	.word	0x080178ed

08015b00 <strtoul>:
 8015b00:	4613      	mov	r3, r2
 8015b02:	460a      	mov	r2, r1
 8015b04:	4601      	mov	r1, r0
 8015b06:	4802      	ldr	r0, [pc, #8]	; (8015b10 <strtoul+0x10>)
 8015b08:	6800      	ldr	r0, [r0, #0]
 8015b0a:	f7ff bf87 	b.w	8015a1c <_strtoul_l.constprop.0>
 8015b0e:	bf00      	nop
 8015b10:	200000a0 	.word	0x200000a0

08015b14 <_vsniprintf_r>:
 8015b14:	b530      	push	{r4, r5, lr}
 8015b16:	4614      	mov	r4, r2
 8015b18:	2c00      	cmp	r4, #0
 8015b1a:	b09b      	sub	sp, #108	; 0x6c
 8015b1c:	4605      	mov	r5, r0
 8015b1e:	461a      	mov	r2, r3
 8015b20:	da05      	bge.n	8015b2e <_vsniprintf_r+0x1a>
 8015b22:	238b      	movs	r3, #139	; 0x8b
 8015b24:	6003      	str	r3, [r0, #0]
 8015b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b2a:	b01b      	add	sp, #108	; 0x6c
 8015b2c:	bd30      	pop	{r4, r5, pc}
 8015b2e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015b32:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015b36:	bf14      	ite	ne
 8015b38:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015b3c:	4623      	moveq	r3, r4
 8015b3e:	9302      	str	r3, [sp, #8]
 8015b40:	9305      	str	r3, [sp, #20]
 8015b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b46:	9100      	str	r1, [sp, #0]
 8015b48:	9104      	str	r1, [sp, #16]
 8015b4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015b4e:	4669      	mov	r1, sp
 8015b50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015b52:	f000 fbcb 	bl	80162ec <_svfiprintf_r>
 8015b56:	1c43      	adds	r3, r0, #1
 8015b58:	bfbc      	itt	lt
 8015b5a:	238b      	movlt	r3, #139	; 0x8b
 8015b5c:	602b      	strlt	r3, [r5, #0]
 8015b5e:	2c00      	cmp	r4, #0
 8015b60:	d0e3      	beq.n	8015b2a <_vsniprintf_r+0x16>
 8015b62:	9b00      	ldr	r3, [sp, #0]
 8015b64:	2200      	movs	r2, #0
 8015b66:	701a      	strb	r2, [r3, #0]
 8015b68:	e7df      	b.n	8015b2a <_vsniprintf_r+0x16>
	...

08015b6c <vsniprintf>:
 8015b6c:	b507      	push	{r0, r1, r2, lr}
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	4613      	mov	r3, r2
 8015b72:	460a      	mov	r2, r1
 8015b74:	4601      	mov	r1, r0
 8015b76:	4803      	ldr	r0, [pc, #12]	; (8015b84 <vsniprintf+0x18>)
 8015b78:	6800      	ldr	r0, [r0, #0]
 8015b7a:	f7ff ffcb 	bl	8015b14 <_vsniprintf_r>
 8015b7e:	b003      	add	sp, #12
 8015b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b84:	200000a0 	.word	0x200000a0

08015b88 <__swbuf_r>:
 8015b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b8a:	460e      	mov	r6, r1
 8015b8c:	4614      	mov	r4, r2
 8015b8e:	4605      	mov	r5, r0
 8015b90:	b118      	cbz	r0, 8015b9a <__swbuf_r+0x12>
 8015b92:	6983      	ldr	r3, [r0, #24]
 8015b94:	b90b      	cbnz	r3, 8015b9a <__swbuf_r+0x12>
 8015b96:	f000 f9fb 	bl	8015f90 <__sinit>
 8015b9a:	4b21      	ldr	r3, [pc, #132]	; (8015c20 <__swbuf_r+0x98>)
 8015b9c:	429c      	cmp	r4, r3
 8015b9e:	d12b      	bne.n	8015bf8 <__swbuf_r+0x70>
 8015ba0:	686c      	ldr	r4, [r5, #4]
 8015ba2:	69a3      	ldr	r3, [r4, #24]
 8015ba4:	60a3      	str	r3, [r4, #8]
 8015ba6:	89a3      	ldrh	r3, [r4, #12]
 8015ba8:	071a      	lsls	r2, r3, #28
 8015baa:	d52f      	bpl.n	8015c0c <__swbuf_r+0x84>
 8015bac:	6923      	ldr	r3, [r4, #16]
 8015bae:	b36b      	cbz	r3, 8015c0c <__swbuf_r+0x84>
 8015bb0:	6923      	ldr	r3, [r4, #16]
 8015bb2:	6820      	ldr	r0, [r4, #0]
 8015bb4:	1ac0      	subs	r0, r0, r3
 8015bb6:	6963      	ldr	r3, [r4, #20]
 8015bb8:	b2f6      	uxtb	r6, r6
 8015bba:	4283      	cmp	r3, r0
 8015bbc:	4637      	mov	r7, r6
 8015bbe:	dc04      	bgt.n	8015bca <__swbuf_r+0x42>
 8015bc0:	4621      	mov	r1, r4
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f000 f950 	bl	8015e68 <_fflush_r>
 8015bc8:	bb30      	cbnz	r0, 8015c18 <__swbuf_r+0x90>
 8015bca:	68a3      	ldr	r3, [r4, #8]
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	60a3      	str	r3, [r4, #8]
 8015bd0:	6823      	ldr	r3, [r4, #0]
 8015bd2:	1c5a      	adds	r2, r3, #1
 8015bd4:	6022      	str	r2, [r4, #0]
 8015bd6:	701e      	strb	r6, [r3, #0]
 8015bd8:	6963      	ldr	r3, [r4, #20]
 8015bda:	3001      	adds	r0, #1
 8015bdc:	4283      	cmp	r3, r0
 8015bde:	d004      	beq.n	8015bea <__swbuf_r+0x62>
 8015be0:	89a3      	ldrh	r3, [r4, #12]
 8015be2:	07db      	lsls	r3, r3, #31
 8015be4:	d506      	bpl.n	8015bf4 <__swbuf_r+0x6c>
 8015be6:	2e0a      	cmp	r6, #10
 8015be8:	d104      	bne.n	8015bf4 <__swbuf_r+0x6c>
 8015bea:	4621      	mov	r1, r4
 8015bec:	4628      	mov	r0, r5
 8015bee:	f000 f93b 	bl	8015e68 <_fflush_r>
 8015bf2:	b988      	cbnz	r0, 8015c18 <__swbuf_r+0x90>
 8015bf4:	4638      	mov	r0, r7
 8015bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bf8:	4b0a      	ldr	r3, [pc, #40]	; (8015c24 <__swbuf_r+0x9c>)
 8015bfa:	429c      	cmp	r4, r3
 8015bfc:	d101      	bne.n	8015c02 <__swbuf_r+0x7a>
 8015bfe:	68ac      	ldr	r4, [r5, #8]
 8015c00:	e7cf      	b.n	8015ba2 <__swbuf_r+0x1a>
 8015c02:	4b09      	ldr	r3, [pc, #36]	; (8015c28 <__swbuf_r+0xa0>)
 8015c04:	429c      	cmp	r4, r3
 8015c06:	bf08      	it	eq
 8015c08:	68ec      	ldreq	r4, [r5, #12]
 8015c0a:	e7ca      	b.n	8015ba2 <__swbuf_r+0x1a>
 8015c0c:	4621      	mov	r1, r4
 8015c0e:	4628      	mov	r0, r5
 8015c10:	f000 f80c 	bl	8015c2c <__swsetup_r>
 8015c14:	2800      	cmp	r0, #0
 8015c16:	d0cb      	beq.n	8015bb0 <__swbuf_r+0x28>
 8015c18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015c1c:	e7ea      	b.n	8015bf4 <__swbuf_r+0x6c>
 8015c1e:	bf00      	nop
 8015c20:	08017ac4 	.word	0x08017ac4
 8015c24:	08017ae4 	.word	0x08017ae4
 8015c28:	08017aa4 	.word	0x08017aa4

08015c2c <__swsetup_r>:
 8015c2c:	4b32      	ldr	r3, [pc, #200]	; (8015cf8 <__swsetup_r+0xcc>)
 8015c2e:	b570      	push	{r4, r5, r6, lr}
 8015c30:	681d      	ldr	r5, [r3, #0]
 8015c32:	4606      	mov	r6, r0
 8015c34:	460c      	mov	r4, r1
 8015c36:	b125      	cbz	r5, 8015c42 <__swsetup_r+0x16>
 8015c38:	69ab      	ldr	r3, [r5, #24]
 8015c3a:	b913      	cbnz	r3, 8015c42 <__swsetup_r+0x16>
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	f000 f9a7 	bl	8015f90 <__sinit>
 8015c42:	4b2e      	ldr	r3, [pc, #184]	; (8015cfc <__swsetup_r+0xd0>)
 8015c44:	429c      	cmp	r4, r3
 8015c46:	d10f      	bne.n	8015c68 <__swsetup_r+0x3c>
 8015c48:	686c      	ldr	r4, [r5, #4]
 8015c4a:	89a3      	ldrh	r3, [r4, #12]
 8015c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c50:	0719      	lsls	r1, r3, #28
 8015c52:	d42c      	bmi.n	8015cae <__swsetup_r+0x82>
 8015c54:	06dd      	lsls	r5, r3, #27
 8015c56:	d411      	bmi.n	8015c7c <__swsetup_r+0x50>
 8015c58:	2309      	movs	r3, #9
 8015c5a:	6033      	str	r3, [r6, #0]
 8015c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015c60:	81a3      	strh	r3, [r4, #12]
 8015c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c66:	e03e      	b.n	8015ce6 <__swsetup_r+0xba>
 8015c68:	4b25      	ldr	r3, [pc, #148]	; (8015d00 <__swsetup_r+0xd4>)
 8015c6a:	429c      	cmp	r4, r3
 8015c6c:	d101      	bne.n	8015c72 <__swsetup_r+0x46>
 8015c6e:	68ac      	ldr	r4, [r5, #8]
 8015c70:	e7eb      	b.n	8015c4a <__swsetup_r+0x1e>
 8015c72:	4b24      	ldr	r3, [pc, #144]	; (8015d04 <__swsetup_r+0xd8>)
 8015c74:	429c      	cmp	r4, r3
 8015c76:	bf08      	it	eq
 8015c78:	68ec      	ldreq	r4, [r5, #12]
 8015c7a:	e7e6      	b.n	8015c4a <__swsetup_r+0x1e>
 8015c7c:	0758      	lsls	r0, r3, #29
 8015c7e:	d512      	bpl.n	8015ca6 <__swsetup_r+0x7a>
 8015c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c82:	b141      	cbz	r1, 8015c96 <__swsetup_r+0x6a>
 8015c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c88:	4299      	cmp	r1, r3
 8015c8a:	d002      	beq.n	8015c92 <__swsetup_r+0x66>
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	f7ff fc5f 	bl	8015550 <_free_r>
 8015c92:	2300      	movs	r3, #0
 8015c94:	6363      	str	r3, [r4, #52]	; 0x34
 8015c96:	89a3      	ldrh	r3, [r4, #12]
 8015c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015c9c:	81a3      	strh	r3, [r4, #12]
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	6063      	str	r3, [r4, #4]
 8015ca2:	6923      	ldr	r3, [r4, #16]
 8015ca4:	6023      	str	r3, [r4, #0]
 8015ca6:	89a3      	ldrh	r3, [r4, #12]
 8015ca8:	f043 0308 	orr.w	r3, r3, #8
 8015cac:	81a3      	strh	r3, [r4, #12]
 8015cae:	6923      	ldr	r3, [r4, #16]
 8015cb0:	b94b      	cbnz	r3, 8015cc6 <__swsetup_r+0x9a>
 8015cb2:	89a3      	ldrh	r3, [r4, #12]
 8015cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cbc:	d003      	beq.n	8015cc6 <__swsetup_r+0x9a>
 8015cbe:	4621      	mov	r1, r4
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f000 fa3d 	bl	8016140 <__smakebuf_r>
 8015cc6:	89a0      	ldrh	r0, [r4, #12]
 8015cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ccc:	f010 0301 	ands.w	r3, r0, #1
 8015cd0:	d00a      	beq.n	8015ce8 <__swsetup_r+0xbc>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	60a3      	str	r3, [r4, #8]
 8015cd6:	6963      	ldr	r3, [r4, #20]
 8015cd8:	425b      	negs	r3, r3
 8015cda:	61a3      	str	r3, [r4, #24]
 8015cdc:	6923      	ldr	r3, [r4, #16]
 8015cde:	b943      	cbnz	r3, 8015cf2 <__swsetup_r+0xc6>
 8015ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ce4:	d1ba      	bne.n	8015c5c <__swsetup_r+0x30>
 8015ce6:	bd70      	pop	{r4, r5, r6, pc}
 8015ce8:	0781      	lsls	r1, r0, #30
 8015cea:	bf58      	it	pl
 8015cec:	6963      	ldrpl	r3, [r4, #20]
 8015cee:	60a3      	str	r3, [r4, #8]
 8015cf0:	e7f4      	b.n	8015cdc <__swsetup_r+0xb0>
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	e7f7      	b.n	8015ce6 <__swsetup_r+0xba>
 8015cf6:	bf00      	nop
 8015cf8:	200000a0 	.word	0x200000a0
 8015cfc:	08017ac4 	.word	0x08017ac4
 8015d00:	08017ae4 	.word	0x08017ae4
 8015d04:	08017aa4 	.word	0x08017aa4

08015d08 <__assert_func>:
 8015d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015d0a:	4614      	mov	r4, r2
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	4b09      	ldr	r3, [pc, #36]	; (8015d34 <__assert_func+0x2c>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	4605      	mov	r5, r0
 8015d14:	68d8      	ldr	r0, [r3, #12]
 8015d16:	b14c      	cbz	r4, 8015d2c <__assert_func+0x24>
 8015d18:	4b07      	ldr	r3, [pc, #28]	; (8015d38 <__assert_func+0x30>)
 8015d1a:	9100      	str	r1, [sp, #0]
 8015d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d20:	4906      	ldr	r1, [pc, #24]	; (8015d3c <__assert_func+0x34>)
 8015d22:	462b      	mov	r3, r5
 8015d24:	f000 f9b2 	bl	801608c <fiprintf>
 8015d28:	f000 ff24 	bl	8016b74 <abort>
 8015d2c:	4b04      	ldr	r3, [pc, #16]	; (8015d40 <__assert_func+0x38>)
 8015d2e:	461c      	mov	r4, r3
 8015d30:	e7f3      	b.n	8015d1a <__assert_func+0x12>
 8015d32:	bf00      	nop
 8015d34:	200000a0 	.word	0x200000a0
 8015d38:	08017a66 	.word	0x08017a66
 8015d3c:	08017a73 	.word	0x08017a73
 8015d40:	08017aa1 	.word	0x08017aa1

08015d44 <__env_lock>:
 8015d44:	4801      	ldr	r0, [pc, #4]	; (8015d4c <__env_lock+0x8>)
 8015d46:	f000 b9d3 	b.w	80160f0 <__retarget_lock_acquire_recursive>
 8015d4a:	bf00      	nop
 8015d4c:	2000c1e8 	.word	0x2000c1e8

08015d50 <__env_unlock>:
 8015d50:	4801      	ldr	r0, [pc, #4]	; (8015d58 <__env_unlock+0x8>)
 8015d52:	f000 b9ce 	b.w	80160f2 <__retarget_lock_release_recursive>
 8015d56:	bf00      	nop
 8015d58:	2000c1e8 	.word	0x2000c1e8

08015d5c <__sflush_r>:
 8015d5c:	898a      	ldrh	r2, [r1, #12]
 8015d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d62:	4605      	mov	r5, r0
 8015d64:	0710      	lsls	r0, r2, #28
 8015d66:	460c      	mov	r4, r1
 8015d68:	d458      	bmi.n	8015e1c <__sflush_r+0xc0>
 8015d6a:	684b      	ldr	r3, [r1, #4]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	dc05      	bgt.n	8015d7c <__sflush_r+0x20>
 8015d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	dc02      	bgt.n	8015d7c <__sflush_r+0x20>
 8015d76:	2000      	movs	r0, #0
 8015d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d7e:	2e00      	cmp	r6, #0
 8015d80:	d0f9      	beq.n	8015d76 <__sflush_r+0x1a>
 8015d82:	2300      	movs	r3, #0
 8015d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d88:	682f      	ldr	r7, [r5, #0]
 8015d8a:	602b      	str	r3, [r5, #0]
 8015d8c:	d032      	beq.n	8015df4 <__sflush_r+0x98>
 8015d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d90:	89a3      	ldrh	r3, [r4, #12]
 8015d92:	075a      	lsls	r2, r3, #29
 8015d94:	d505      	bpl.n	8015da2 <__sflush_r+0x46>
 8015d96:	6863      	ldr	r3, [r4, #4]
 8015d98:	1ac0      	subs	r0, r0, r3
 8015d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d9c:	b10b      	cbz	r3, 8015da2 <__sflush_r+0x46>
 8015d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015da0:	1ac0      	subs	r0, r0, r3
 8015da2:	2300      	movs	r3, #0
 8015da4:	4602      	mov	r2, r0
 8015da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015da8:	6a21      	ldr	r1, [r4, #32]
 8015daa:	4628      	mov	r0, r5
 8015dac:	47b0      	blx	r6
 8015dae:	1c43      	adds	r3, r0, #1
 8015db0:	89a3      	ldrh	r3, [r4, #12]
 8015db2:	d106      	bne.n	8015dc2 <__sflush_r+0x66>
 8015db4:	6829      	ldr	r1, [r5, #0]
 8015db6:	291d      	cmp	r1, #29
 8015db8:	d82c      	bhi.n	8015e14 <__sflush_r+0xb8>
 8015dba:	4a2a      	ldr	r2, [pc, #168]	; (8015e64 <__sflush_r+0x108>)
 8015dbc:	40ca      	lsrs	r2, r1
 8015dbe:	07d6      	lsls	r6, r2, #31
 8015dc0:	d528      	bpl.n	8015e14 <__sflush_r+0xb8>
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	6062      	str	r2, [r4, #4]
 8015dc6:	04d9      	lsls	r1, r3, #19
 8015dc8:	6922      	ldr	r2, [r4, #16]
 8015dca:	6022      	str	r2, [r4, #0]
 8015dcc:	d504      	bpl.n	8015dd8 <__sflush_r+0x7c>
 8015dce:	1c42      	adds	r2, r0, #1
 8015dd0:	d101      	bne.n	8015dd6 <__sflush_r+0x7a>
 8015dd2:	682b      	ldr	r3, [r5, #0]
 8015dd4:	b903      	cbnz	r3, 8015dd8 <__sflush_r+0x7c>
 8015dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8015dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015dda:	602f      	str	r7, [r5, #0]
 8015ddc:	2900      	cmp	r1, #0
 8015dde:	d0ca      	beq.n	8015d76 <__sflush_r+0x1a>
 8015de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015de4:	4299      	cmp	r1, r3
 8015de6:	d002      	beq.n	8015dee <__sflush_r+0x92>
 8015de8:	4628      	mov	r0, r5
 8015dea:	f7ff fbb1 	bl	8015550 <_free_r>
 8015dee:	2000      	movs	r0, #0
 8015df0:	6360      	str	r0, [r4, #52]	; 0x34
 8015df2:	e7c1      	b.n	8015d78 <__sflush_r+0x1c>
 8015df4:	6a21      	ldr	r1, [r4, #32]
 8015df6:	2301      	movs	r3, #1
 8015df8:	4628      	mov	r0, r5
 8015dfa:	47b0      	blx	r6
 8015dfc:	1c41      	adds	r1, r0, #1
 8015dfe:	d1c7      	bne.n	8015d90 <__sflush_r+0x34>
 8015e00:	682b      	ldr	r3, [r5, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d0c4      	beq.n	8015d90 <__sflush_r+0x34>
 8015e06:	2b1d      	cmp	r3, #29
 8015e08:	d001      	beq.n	8015e0e <__sflush_r+0xb2>
 8015e0a:	2b16      	cmp	r3, #22
 8015e0c:	d101      	bne.n	8015e12 <__sflush_r+0xb6>
 8015e0e:	602f      	str	r7, [r5, #0]
 8015e10:	e7b1      	b.n	8015d76 <__sflush_r+0x1a>
 8015e12:	89a3      	ldrh	r3, [r4, #12]
 8015e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e18:	81a3      	strh	r3, [r4, #12]
 8015e1a:	e7ad      	b.n	8015d78 <__sflush_r+0x1c>
 8015e1c:	690f      	ldr	r7, [r1, #16]
 8015e1e:	2f00      	cmp	r7, #0
 8015e20:	d0a9      	beq.n	8015d76 <__sflush_r+0x1a>
 8015e22:	0793      	lsls	r3, r2, #30
 8015e24:	680e      	ldr	r6, [r1, #0]
 8015e26:	bf08      	it	eq
 8015e28:	694b      	ldreq	r3, [r1, #20]
 8015e2a:	600f      	str	r7, [r1, #0]
 8015e2c:	bf18      	it	ne
 8015e2e:	2300      	movne	r3, #0
 8015e30:	eba6 0807 	sub.w	r8, r6, r7
 8015e34:	608b      	str	r3, [r1, #8]
 8015e36:	f1b8 0f00 	cmp.w	r8, #0
 8015e3a:	dd9c      	ble.n	8015d76 <__sflush_r+0x1a>
 8015e3c:	6a21      	ldr	r1, [r4, #32]
 8015e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e40:	4643      	mov	r3, r8
 8015e42:	463a      	mov	r2, r7
 8015e44:	4628      	mov	r0, r5
 8015e46:	47b0      	blx	r6
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	dc06      	bgt.n	8015e5a <__sflush_r+0xfe>
 8015e4c:	89a3      	ldrh	r3, [r4, #12]
 8015e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e52:	81a3      	strh	r3, [r4, #12]
 8015e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e58:	e78e      	b.n	8015d78 <__sflush_r+0x1c>
 8015e5a:	4407      	add	r7, r0
 8015e5c:	eba8 0800 	sub.w	r8, r8, r0
 8015e60:	e7e9      	b.n	8015e36 <__sflush_r+0xda>
 8015e62:	bf00      	nop
 8015e64:	20400001 	.word	0x20400001

08015e68 <_fflush_r>:
 8015e68:	b538      	push	{r3, r4, r5, lr}
 8015e6a:	690b      	ldr	r3, [r1, #16]
 8015e6c:	4605      	mov	r5, r0
 8015e6e:	460c      	mov	r4, r1
 8015e70:	b913      	cbnz	r3, 8015e78 <_fflush_r+0x10>
 8015e72:	2500      	movs	r5, #0
 8015e74:	4628      	mov	r0, r5
 8015e76:	bd38      	pop	{r3, r4, r5, pc}
 8015e78:	b118      	cbz	r0, 8015e82 <_fflush_r+0x1a>
 8015e7a:	6983      	ldr	r3, [r0, #24]
 8015e7c:	b90b      	cbnz	r3, 8015e82 <_fflush_r+0x1a>
 8015e7e:	f000 f887 	bl	8015f90 <__sinit>
 8015e82:	4b14      	ldr	r3, [pc, #80]	; (8015ed4 <_fflush_r+0x6c>)
 8015e84:	429c      	cmp	r4, r3
 8015e86:	d11b      	bne.n	8015ec0 <_fflush_r+0x58>
 8015e88:	686c      	ldr	r4, [r5, #4]
 8015e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d0ef      	beq.n	8015e72 <_fflush_r+0xa>
 8015e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e94:	07d0      	lsls	r0, r2, #31
 8015e96:	d404      	bmi.n	8015ea2 <_fflush_r+0x3a>
 8015e98:	0599      	lsls	r1, r3, #22
 8015e9a:	d402      	bmi.n	8015ea2 <_fflush_r+0x3a>
 8015e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e9e:	f000 f927 	bl	80160f0 <__retarget_lock_acquire_recursive>
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	4621      	mov	r1, r4
 8015ea6:	f7ff ff59 	bl	8015d5c <__sflush_r>
 8015eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015eac:	07da      	lsls	r2, r3, #31
 8015eae:	4605      	mov	r5, r0
 8015eb0:	d4e0      	bmi.n	8015e74 <_fflush_r+0xc>
 8015eb2:	89a3      	ldrh	r3, [r4, #12]
 8015eb4:	059b      	lsls	r3, r3, #22
 8015eb6:	d4dd      	bmi.n	8015e74 <_fflush_r+0xc>
 8015eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eba:	f000 f91a 	bl	80160f2 <__retarget_lock_release_recursive>
 8015ebe:	e7d9      	b.n	8015e74 <_fflush_r+0xc>
 8015ec0:	4b05      	ldr	r3, [pc, #20]	; (8015ed8 <_fflush_r+0x70>)
 8015ec2:	429c      	cmp	r4, r3
 8015ec4:	d101      	bne.n	8015eca <_fflush_r+0x62>
 8015ec6:	68ac      	ldr	r4, [r5, #8]
 8015ec8:	e7df      	b.n	8015e8a <_fflush_r+0x22>
 8015eca:	4b04      	ldr	r3, [pc, #16]	; (8015edc <_fflush_r+0x74>)
 8015ecc:	429c      	cmp	r4, r3
 8015ece:	bf08      	it	eq
 8015ed0:	68ec      	ldreq	r4, [r5, #12]
 8015ed2:	e7da      	b.n	8015e8a <_fflush_r+0x22>
 8015ed4:	08017ac4 	.word	0x08017ac4
 8015ed8:	08017ae4 	.word	0x08017ae4
 8015edc:	08017aa4 	.word	0x08017aa4

08015ee0 <std>:
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	b510      	push	{r4, lr}
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8015eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015eee:	6083      	str	r3, [r0, #8]
 8015ef0:	8181      	strh	r1, [r0, #12]
 8015ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8015ef4:	81c2      	strh	r2, [r0, #14]
 8015ef6:	6183      	str	r3, [r0, #24]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	2208      	movs	r2, #8
 8015efc:	305c      	adds	r0, #92	; 0x5c
 8015efe:	f7ff fb09 	bl	8015514 <memset>
 8015f02:	4b05      	ldr	r3, [pc, #20]	; (8015f18 <std+0x38>)
 8015f04:	6263      	str	r3, [r4, #36]	; 0x24
 8015f06:	4b05      	ldr	r3, [pc, #20]	; (8015f1c <std+0x3c>)
 8015f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f0a:	4b05      	ldr	r3, [pc, #20]	; (8015f20 <std+0x40>)
 8015f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f0e:	4b05      	ldr	r3, [pc, #20]	; (8015f24 <std+0x44>)
 8015f10:	6224      	str	r4, [r4, #32]
 8015f12:	6323      	str	r3, [r4, #48]	; 0x30
 8015f14:	bd10      	pop	{r4, pc}
 8015f16:	bf00      	nop
 8015f18:	08016ac9 	.word	0x08016ac9
 8015f1c:	08016aeb 	.word	0x08016aeb
 8015f20:	08016b23 	.word	0x08016b23
 8015f24:	08016b47 	.word	0x08016b47

08015f28 <_cleanup_r>:
 8015f28:	4901      	ldr	r1, [pc, #4]	; (8015f30 <_cleanup_r+0x8>)
 8015f2a:	f000 b8c1 	b.w	80160b0 <_fwalk_reent>
 8015f2e:	bf00      	nop
 8015f30:	08015e69 	.word	0x08015e69

08015f34 <__sfmoreglue>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	2268      	movs	r2, #104	; 0x68
 8015f38:	1e4d      	subs	r5, r1, #1
 8015f3a:	4355      	muls	r5, r2
 8015f3c:	460e      	mov	r6, r1
 8015f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f42:	f7ff fb71 	bl	8015628 <_malloc_r>
 8015f46:	4604      	mov	r4, r0
 8015f48:	b140      	cbz	r0, 8015f5c <__sfmoreglue+0x28>
 8015f4a:	2100      	movs	r1, #0
 8015f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8015f50:	300c      	adds	r0, #12
 8015f52:	60a0      	str	r0, [r4, #8]
 8015f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f58:	f7ff fadc 	bl	8015514 <memset>
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	bd70      	pop	{r4, r5, r6, pc}

08015f60 <__sfp_lock_acquire>:
 8015f60:	4801      	ldr	r0, [pc, #4]	; (8015f68 <__sfp_lock_acquire+0x8>)
 8015f62:	f000 b8c5 	b.w	80160f0 <__retarget_lock_acquire_recursive>
 8015f66:	bf00      	nop
 8015f68:	2000c1ea 	.word	0x2000c1ea

08015f6c <__sfp_lock_release>:
 8015f6c:	4801      	ldr	r0, [pc, #4]	; (8015f74 <__sfp_lock_release+0x8>)
 8015f6e:	f000 b8c0 	b.w	80160f2 <__retarget_lock_release_recursive>
 8015f72:	bf00      	nop
 8015f74:	2000c1ea 	.word	0x2000c1ea

08015f78 <__sinit_lock_acquire>:
 8015f78:	4801      	ldr	r0, [pc, #4]	; (8015f80 <__sinit_lock_acquire+0x8>)
 8015f7a:	f000 b8b9 	b.w	80160f0 <__retarget_lock_acquire_recursive>
 8015f7e:	bf00      	nop
 8015f80:	2000c1eb 	.word	0x2000c1eb

08015f84 <__sinit_lock_release>:
 8015f84:	4801      	ldr	r0, [pc, #4]	; (8015f8c <__sinit_lock_release+0x8>)
 8015f86:	f000 b8b4 	b.w	80160f2 <__retarget_lock_release_recursive>
 8015f8a:	bf00      	nop
 8015f8c:	2000c1eb 	.word	0x2000c1eb

08015f90 <__sinit>:
 8015f90:	b510      	push	{r4, lr}
 8015f92:	4604      	mov	r4, r0
 8015f94:	f7ff fff0 	bl	8015f78 <__sinit_lock_acquire>
 8015f98:	69a3      	ldr	r3, [r4, #24]
 8015f9a:	b11b      	cbz	r3, 8015fa4 <__sinit+0x14>
 8015f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fa0:	f7ff bff0 	b.w	8015f84 <__sinit_lock_release>
 8015fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8015faa:	4b13      	ldr	r3, [pc, #76]	; (8015ff8 <__sinit+0x68>)
 8015fac:	4a13      	ldr	r2, [pc, #76]	; (8015ffc <__sinit+0x6c>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fb2:	42a3      	cmp	r3, r4
 8015fb4:	bf04      	itt	eq
 8015fb6:	2301      	moveq	r3, #1
 8015fb8:	61a3      	streq	r3, [r4, #24]
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f000 f820 	bl	8016000 <__sfp>
 8015fc0:	6060      	str	r0, [r4, #4]
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	f000 f81c 	bl	8016000 <__sfp>
 8015fc8:	60a0      	str	r0, [r4, #8]
 8015fca:	4620      	mov	r0, r4
 8015fcc:	f000 f818 	bl	8016000 <__sfp>
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	60e0      	str	r0, [r4, #12]
 8015fd4:	2104      	movs	r1, #4
 8015fd6:	6860      	ldr	r0, [r4, #4]
 8015fd8:	f7ff ff82 	bl	8015ee0 <std>
 8015fdc:	68a0      	ldr	r0, [r4, #8]
 8015fde:	2201      	movs	r2, #1
 8015fe0:	2109      	movs	r1, #9
 8015fe2:	f7ff ff7d 	bl	8015ee0 <std>
 8015fe6:	68e0      	ldr	r0, [r4, #12]
 8015fe8:	2202      	movs	r2, #2
 8015fea:	2112      	movs	r1, #18
 8015fec:	f7ff ff78 	bl	8015ee0 <std>
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	61a3      	str	r3, [r4, #24]
 8015ff4:	e7d2      	b.n	8015f9c <__sinit+0xc>
 8015ff6:	bf00      	nop
 8015ff8:	080179f0 	.word	0x080179f0
 8015ffc:	08015f29 	.word	0x08015f29

08016000 <__sfp>:
 8016000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016002:	4607      	mov	r7, r0
 8016004:	f7ff ffac 	bl	8015f60 <__sfp_lock_acquire>
 8016008:	4b1e      	ldr	r3, [pc, #120]	; (8016084 <__sfp+0x84>)
 801600a:	681e      	ldr	r6, [r3, #0]
 801600c:	69b3      	ldr	r3, [r6, #24]
 801600e:	b913      	cbnz	r3, 8016016 <__sfp+0x16>
 8016010:	4630      	mov	r0, r6
 8016012:	f7ff ffbd 	bl	8015f90 <__sinit>
 8016016:	3648      	adds	r6, #72	; 0x48
 8016018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801601c:	3b01      	subs	r3, #1
 801601e:	d503      	bpl.n	8016028 <__sfp+0x28>
 8016020:	6833      	ldr	r3, [r6, #0]
 8016022:	b30b      	cbz	r3, 8016068 <__sfp+0x68>
 8016024:	6836      	ldr	r6, [r6, #0]
 8016026:	e7f7      	b.n	8016018 <__sfp+0x18>
 8016028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801602c:	b9d5      	cbnz	r5, 8016064 <__sfp+0x64>
 801602e:	4b16      	ldr	r3, [pc, #88]	; (8016088 <__sfp+0x88>)
 8016030:	60e3      	str	r3, [r4, #12]
 8016032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016036:	6665      	str	r5, [r4, #100]	; 0x64
 8016038:	f000 f859 	bl	80160ee <__retarget_lock_init_recursive>
 801603c:	f7ff ff96 	bl	8015f6c <__sfp_lock_release>
 8016040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016048:	6025      	str	r5, [r4, #0]
 801604a:	61a5      	str	r5, [r4, #24]
 801604c:	2208      	movs	r2, #8
 801604e:	4629      	mov	r1, r5
 8016050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016054:	f7ff fa5e 	bl	8015514 <memset>
 8016058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801605c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016060:	4620      	mov	r0, r4
 8016062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016064:	3468      	adds	r4, #104	; 0x68
 8016066:	e7d9      	b.n	801601c <__sfp+0x1c>
 8016068:	2104      	movs	r1, #4
 801606a:	4638      	mov	r0, r7
 801606c:	f7ff ff62 	bl	8015f34 <__sfmoreglue>
 8016070:	4604      	mov	r4, r0
 8016072:	6030      	str	r0, [r6, #0]
 8016074:	2800      	cmp	r0, #0
 8016076:	d1d5      	bne.n	8016024 <__sfp+0x24>
 8016078:	f7ff ff78 	bl	8015f6c <__sfp_lock_release>
 801607c:	230c      	movs	r3, #12
 801607e:	603b      	str	r3, [r7, #0]
 8016080:	e7ee      	b.n	8016060 <__sfp+0x60>
 8016082:	bf00      	nop
 8016084:	080179f0 	.word	0x080179f0
 8016088:	ffff0001 	.word	0xffff0001

0801608c <fiprintf>:
 801608c:	b40e      	push	{r1, r2, r3}
 801608e:	b503      	push	{r0, r1, lr}
 8016090:	4601      	mov	r1, r0
 8016092:	ab03      	add	r3, sp, #12
 8016094:	4805      	ldr	r0, [pc, #20]	; (80160ac <fiprintf+0x20>)
 8016096:	f853 2b04 	ldr.w	r2, [r3], #4
 801609a:	6800      	ldr	r0, [r0, #0]
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	f000 fa4f 	bl	8016540 <_vfiprintf_r>
 80160a2:	b002      	add	sp, #8
 80160a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80160a8:	b003      	add	sp, #12
 80160aa:	4770      	bx	lr
 80160ac:	200000a0 	.word	0x200000a0

080160b0 <_fwalk_reent>:
 80160b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160b4:	4606      	mov	r6, r0
 80160b6:	4688      	mov	r8, r1
 80160b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160bc:	2700      	movs	r7, #0
 80160be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160c2:	f1b9 0901 	subs.w	r9, r9, #1
 80160c6:	d505      	bpl.n	80160d4 <_fwalk_reent+0x24>
 80160c8:	6824      	ldr	r4, [r4, #0]
 80160ca:	2c00      	cmp	r4, #0
 80160cc:	d1f7      	bne.n	80160be <_fwalk_reent+0xe>
 80160ce:	4638      	mov	r0, r7
 80160d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160d4:	89ab      	ldrh	r3, [r5, #12]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d907      	bls.n	80160ea <_fwalk_reent+0x3a>
 80160da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160de:	3301      	adds	r3, #1
 80160e0:	d003      	beq.n	80160ea <_fwalk_reent+0x3a>
 80160e2:	4629      	mov	r1, r5
 80160e4:	4630      	mov	r0, r6
 80160e6:	47c0      	blx	r8
 80160e8:	4307      	orrs	r7, r0
 80160ea:	3568      	adds	r5, #104	; 0x68
 80160ec:	e7e9      	b.n	80160c2 <_fwalk_reent+0x12>

080160ee <__retarget_lock_init_recursive>:
 80160ee:	4770      	bx	lr

080160f0 <__retarget_lock_acquire_recursive>:
 80160f0:	4770      	bx	lr

080160f2 <__retarget_lock_release_recursive>:
 80160f2:	4770      	bx	lr

080160f4 <__swhatbuf_r>:
 80160f4:	b570      	push	{r4, r5, r6, lr}
 80160f6:	460e      	mov	r6, r1
 80160f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160fc:	2900      	cmp	r1, #0
 80160fe:	b096      	sub	sp, #88	; 0x58
 8016100:	4614      	mov	r4, r2
 8016102:	461d      	mov	r5, r3
 8016104:	da08      	bge.n	8016118 <__swhatbuf_r+0x24>
 8016106:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801610a:	2200      	movs	r2, #0
 801610c:	602a      	str	r2, [r5, #0]
 801610e:	061a      	lsls	r2, r3, #24
 8016110:	d410      	bmi.n	8016134 <__swhatbuf_r+0x40>
 8016112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016116:	e00e      	b.n	8016136 <__swhatbuf_r+0x42>
 8016118:	466a      	mov	r2, sp
 801611a:	f000 fd43 	bl	8016ba4 <_fstat_r>
 801611e:	2800      	cmp	r0, #0
 8016120:	dbf1      	blt.n	8016106 <__swhatbuf_r+0x12>
 8016122:	9a01      	ldr	r2, [sp, #4]
 8016124:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016128:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801612c:	425a      	negs	r2, r3
 801612e:	415a      	adcs	r2, r3
 8016130:	602a      	str	r2, [r5, #0]
 8016132:	e7ee      	b.n	8016112 <__swhatbuf_r+0x1e>
 8016134:	2340      	movs	r3, #64	; 0x40
 8016136:	2000      	movs	r0, #0
 8016138:	6023      	str	r3, [r4, #0]
 801613a:	b016      	add	sp, #88	; 0x58
 801613c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016140 <__smakebuf_r>:
 8016140:	898b      	ldrh	r3, [r1, #12]
 8016142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016144:	079d      	lsls	r5, r3, #30
 8016146:	4606      	mov	r6, r0
 8016148:	460c      	mov	r4, r1
 801614a:	d507      	bpl.n	801615c <__smakebuf_r+0x1c>
 801614c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016150:	6023      	str	r3, [r4, #0]
 8016152:	6123      	str	r3, [r4, #16]
 8016154:	2301      	movs	r3, #1
 8016156:	6163      	str	r3, [r4, #20]
 8016158:	b002      	add	sp, #8
 801615a:	bd70      	pop	{r4, r5, r6, pc}
 801615c:	ab01      	add	r3, sp, #4
 801615e:	466a      	mov	r2, sp
 8016160:	f7ff ffc8 	bl	80160f4 <__swhatbuf_r>
 8016164:	9900      	ldr	r1, [sp, #0]
 8016166:	4605      	mov	r5, r0
 8016168:	4630      	mov	r0, r6
 801616a:	f7ff fa5d 	bl	8015628 <_malloc_r>
 801616e:	b948      	cbnz	r0, 8016184 <__smakebuf_r+0x44>
 8016170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016174:	059a      	lsls	r2, r3, #22
 8016176:	d4ef      	bmi.n	8016158 <__smakebuf_r+0x18>
 8016178:	f023 0303 	bic.w	r3, r3, #3
 801617c:	f043 0302 	orr.w	r3, r3, #2
 8016180:	81a3      	strh	r3, [r4, #12]
 8016182:	e7e3      	b.n	801614c <__smakebuf_r+0xc>
 8016184:	4b0d      	ldr	r3, [pc, #52]	; (80161bc <__smakebuf_r+0x7c>)
 8016186:	62b3      	str	r3, [r6, #40]	; 0x28
 8016188:	89a3      	ldrh	r3, [r4, #12]
 801618a:	6020      	str	r0, [r4, #0]
 801618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016190:	81a3      	strh	r3, [r4, #12]
 8016192:	9b00      	ldr	r3, [sp, #0]
 8016194:	6163      	str	r3, [r4, #20]
 8016196:	9b01      	ldr	r3, [sp, #4]
 8016198:	6120      	str	r0, [r4, #16]
 801619a:	b15b      	cbz	r3, 80161b4 <__smakebuf_r+0x74>
 801619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161a0:	4630      	mov	r0, r6
 80161a2:	f000 fd11 	bl	8016bc8 <_isatty_r>
 80161a6:	b128      	cbz	r0, 80161b4 <__smakebuf_r+0x74>
 80161a8:	89a3      	ldrh	r3, [r4, #12]
 80161aa:	f023 0303 	bic.w	r3, r3, #3
 80161ae:	f043 0301 	orr.w	r3, r3, #1
 80161b2:	81a3      	strh	r3, [r4, #12]
 80161b4:	89a0      	ldrh	r0, [r4, #12]
 80161b6:	4305      	orrs	r5, r0
 80161b8:	81a5      	strh	r5, [r4, #12]
 80161ba:	e7cd      	b.n	8016158 <__smakebuf_r+0x18>
 80161bc:	08015f29 	.word	0x08015f29

080161c0 <__malloc_lock>:
 80161c0:	4801      	ldr	r0, [pc, #4]	; (80161c8 <__malloc_lock+0x8>)
 80161c2:	f7ff bf95 	b.w	80160f0 <__retarget_lock_acquire_recursive>
 80161c6:	bf00      	nop
 80161c8:	2000c1e9 	.word	0x2000c1e9

080161cc <__malloc_unlock>:
 80161cc:	4801      	ldr	r0, [pc, #4]	; (80161d4 <__malloc_unlock+0x8>)
 80161ce:	f7ff bf90 	b.w	80160f2 <__retarget_lock_release_recursive>
 80161d2:	bf00      	nop
 80161d4:	2000c1e9 	.word	0x2000c1e9

080161d8 <_realloc_r>:
 80161d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161dc:	4680      	mov	r8, r0
 80161de:	4614      	mov	r4, r2
 80161e0:	460e      	mov	r6, r1
 80161e2:	b921      	cbnz	r1, 80161ee <_realloc_r+0x16>
 80161e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161e8:	4611      	mov	r1, r2
 80161ea:	f7ff ba1d 	b.w	8015628 <_malloc_r>
 80161ee:	b92a      	cbnz	r2, 80161fc <_realloc_r+0x24>
 80161f0:	f7ff f9ae 	bl	8015550 <_free_r>
 80161f4:	4625      	mov	r5, r4
 80161f6:	4628      	mov	r0, r5
 80161f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161fc:	f000 fd06 	bl	8016c0c <_malloc_usable_size_r>
 8016200:	4284      	cmp	r4, r0
 8016202:	4607      	mov	r7, r0
 8016204:	d802      	bhi.n	801620c <_realloc_r+0x34>
 8016206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801620a:	d812      	bhi.n	8016232 <_realloc_r+0x5a>
 801620c:	4621      	mov	r1, r4
 801620e:	4640      	mov	r0, r8
 8016210:	f7ff fa0a 	bl	8015628 <_malloc_r>
 8016214:	4605      	mov	r5, r0
 8016216:	2800      	cmp	r0, #0
 8016218:	d0ed      	beq.n	80161f6 <_realloc_r+0x1e>
 801621a:	42bc      	cmp	r4, r7
 801621c:	4622      	mov	r2, r4
 801621e:	4631      	mov	r1, r6
 8016220:	bf28      	it	cs
 8016222:	463a      	movcs	r2, r7
 8016224:	f7ff f94e 	bl	80154c4 <memcpy>
 8016228:	4631      	mov	r1, r6
 801622a:	4640      	mov	r0, r8
 801622c:	f7ff f990 	bl	8015550 <_free_r>
 8016230:	e7e1      	b.n	80161f6 <_realloc_r+0x1e>
 8016232:	4635      	mov	r5, r6
 8016234:	e7df      	b.n	80161f6 <_realloc_r+0x1e>

08016236 <__ssputs_r>:
 8016236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801623a:	688e      	ldr	r6, [r1, #8]
 801623c:	429e      	cmp	r6, r3
 801623e:	4682      	mov	sl, r0
 8016240:	460c      	mov	r4, r1
 8016242:	4690      	mov	r8, r2
 8016244:	461f      	mov	r7, r3
 8016246:	d838      	bhi.n	80162ba <__ssputs_r+0x84>
 8016248:	898a      	ldrh	r2, [r1, #12]
 801624a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801624e:	d032      	beq.n	80162b6 <__ssputs_r+0x80>
 8016250:	6825      	ldr	r5, [r4, #0]
 8016252:	6909      	ldr	r1, [r1, #16]
 8016254:	eba5 0901 	sub.w	r9, r5, r1
 8016258:	6965      	ldr	r5, [r4, #20]
 801625a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801625e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016262:	3301      	adds	r3, #1
 8016264:	444b      	add	r3, r9
 8016266:	106d      	asrs	r5, r5, #1
 8016268:	429d      	cmp	r5, r3
 801626a:	bf38      	it	cc
 801626c:	461d      	movcc	r5, r3
 801626e:	0553      	lsls	r3, r2, #21
 8016270:	d531      	bpl.n	80162d6 <__ssputs_r+0xa0>
 8016272:	4629      	mov	r1, r5
 8016274:	f7ff f9d8 	bl	8015628 <_malloc_r>
 8016278:	4606      	mov	r6, r0
 801627a:	b950      	cbnz	r0, 8016292 <__ssputs_r+0x5c>
 801627c:	230c      	movs	r3, #12
 801627e:	f8ca 3000 	str.w	r3, [sl]
 8016282:	89a3      	ldrh	r3, [r4, #12]
 8016284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016288:	81a3      	strh	r3, [r4, #12]
 801628a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016292:	6921      	ldr	r1, [r4, #16]
 8016294:	464a      	mov	r2, r9
 8016296:	f7ff f915 	bl	80154c4 <memcpy>
 801629a:	89a3      	ldrh	r3, [r4, #12]
 801629c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80162a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162a4:	81a3      	strh	r3, [r4, #12]
 80162a6:	6126      	str	r6, [r4, #16]
 80162a8:	6165      	str	r5, [r4, #20]
 80162aa:	444e      	add	r6, r9
 80162ac:	eba5 0509 	sub.w	r5, r5, r9
 80162b0:	6026      	str	r6, [r4, #0]
 80162b2:	60a5      	str	r5, [r4, #8]
 80162b4:	463e      	mov	r6, r7
 80162b6:	42be      	cmp	r6, r7
 80162b8:	d900      	bls.n	80162bc <__ssputs_r+0x86>
 80162ba:	463e      	mov	r6, r7
 80162bc:	6820      	ldr	r0, [r4, #0]
 80162be:	4632      	mov	r2, r6
 80162c0:	4641      	mov	r1, r8
 80162c2:	f7ff f90d 	bl	80154e0 <memmove>
 80162c6:	68a3      	ldr	r3, [r4, #8]
 80162c8:	1b9b      	subs	r3, r3, r6
 80162ca:	60a3      	str	r3, [r4, #8]
 80162cc:	6823      	ldr	r3, [r4, #0]
 80162ce:	4433      	add	r3, r6
 80162d0:	6023      	str	r3, [r4, #0]
 80162d2:	2000      	movs	r0, #0
 80162d4:	e7db      	b.n	801628e <__ssputs_r+0x58>
 80162d6:	462a      	mov	r2, r5
 80162d8:	f7ff ff7e 	bl	80161d8 <_realloc_r>
 80162dc:	4606      	mov	r6, r0
 80162de:	2800      	cmp	r0, #0
 80162e0:	d1e1      	bne.n	80162a6 <__ssputs_r+0x70>
 80162e2:	6921      	ldr	r1, [r4, #16]
 80162e4:	4650      	mov	r0, sl
 80162e6:	f7ff f933 	bl	8015550 <_free_r>
 80162ea:	e7c7      	b.n	801627c <__ssputs_r+0x46>

080162ec <_svfiprintf_r>:
 80162ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f0:	4698      	mov	r8, r3
 80162f2:	898b      	ldrh	r3, [r1, #12]
 80162f4:	061b      	lsls	r3, r3, #24
 80162f6:	b09d      	sub	sp, #116	; 0x74
 80162f8:	4607      	mov	r7, r0
 80162fa:	460d      	mov	r5, r1
 80162fc:	4614      	mov	r4, r2
 80162fe:	d50e      	bpl.n	801631e <_svfiprintf_r+0x32>
 8016300:	690b      	ldr	r3, [r1, #16]
 8016302:	b963      	cbnz	r3, 801631e <_svfiprintf_r+0x32>
 8016304:	2140      	movs	r1, #64	; 0x40
 8016306:	f7ff f98f 	bl	8015628 <_malloc_r>
 801630a:	6028      	str	r0, [r5, #0]
 801630c:	6128      	str	r0, [r5, #16]
 801630e:	b920      	cbnz	r0, 801631a <_svfiprintf_r+0x2e>
 8016310:	230c      	movs	r3, #12
 8016312:	603b      	str	r3, [r7, #0]
 8016314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016318:	e0d1      	b.n	80164be <_svfiprintf_r+0x1d2>
 801631a:	2340      	movs	r3, #64	; 0x40
 801631c:	616b      	str	r3, [r5, #20]
 801631e:	2300      	movs	r3, #0
 8016320:	9309      	str	r3, [sp, #36]	; 0x24
 8016322:	2320      	movs	r3, #32
 8016324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016328:	f8cd 800c 	str.w	r8, [sp, #12]
 801632c:	2330      	movs	r3, #48	; 0x30
 801632e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80164d8 <_svfiprintf_r+0x1ec>
 8016332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016336:	f04f 0901 	mov.w	r9, #1
 801633a:	4623      	mov	r3, r4
 801633c:	469a      	mov	sl, r3
 801633e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016342:	b10a      	cbz	r2, 8016348 <_svfiprintf_r+0x5c>
 8016344:	2a25      	cmp	r2, #37	; 0x25
 8016346:	d1f9      	bne.n	801633c <_svfiprintf_r+0x50>
 8016348:	ebba 0b04 	subs.w	fp, sl, r4
 801634c:	d00b      	beq.n	8016366 <_svfiprintf_r+0x7a>
 801634e:	465b      	mov	r3, fp
 8016350:	4622      	mov	r2, r4
 8016352:	4629      	mov	r1, r5
 8016354:	4638      	mov	r0, r7
 8016356:	f7ff ff6e 	bl	8016236 <__ssputs_r>
 801635a:	3001      	adds	r0, #1
 801635c:	f000 80aa 	beq.w	80164b4 <_svfiprintf_r+0x1c8>
 8016360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016362:	445a      	add	r2, fp
 8016364:	9209      	str	r2, [sp, #36]	; 0x24
 8016366:	f89a 3000 	ldrb.w	r3, [sl]
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 80a2 	beq.w	80164b4 <_svfiprintf_r+0x1c8>
 8016370:	2300      	movs	r3, #0
 8016372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801637a:	f10a 0a01 	add.w	sl, sl, #1
 801637e:	9304      	str	r3, [sp, #16]
 8016380:	9307      	str	r3, [sp, #28]
 8016382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016386:	931a      	str	r3, [sp, #104]	; 0x68
 8016388:	4654      	mov	r4, sl
 801638a:	2205      	movs	r2, #5
 801638c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016390:	4851      	ldr	r0, [pc, #324]	; (80164d8 <_svfiprintf_r+0x1ec>)
 8016392:	f7e9 ff55 	bl	8000240 <memchr>
 8016396:	9a04      	ldr	r2, [sp, #16]
 8016398:	b9d8      	cbnz	r0, 80163d2 <_svfiprintf_r+0xe6>
 801639a:	06d0      	lsls	r0, r2, #27
 801639c:	bf44      	itt	mi
 801639e:	2320      	movmi	r3, #32
 80163a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80163a4:	0711      	lsls	r1, r2, #28
 80163a6:	bf44      	itt	mi
 80163a8:	232b      	movmi	r3, #43	; 0x2b
 80163aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80163ae:	f89a 3000 	ldrb.w	r3, [sl]
 80163b2:	2b2a      	cmp	r3, #42	; 0x2a
 80163b4:	d015      	beq.n	80163e2 <_svfiprintf_r+0xf6>
 80163b6:	9a07      	ldr	r2, [sp, #28]
 80163b8:	4654      	mov	r4, sl
 80163ba:	2000      	movs	r0, #0
 80163bc:	f04f 0c0a 	mov.w	ip, #10
 80163c0:	4621      	mov	r1, r4
 80163c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163c6:	3b30      	subs	r3, #48	; 0x30
 80163c8:	2b09      	cmp	r3, #9
 80163ca:	d94e      	bls.n	801646a <_svfiprintf_r+0x17e>
 80163cc:	b1b0      	cbz	r0, 80163fc <_svfiprintf_r+0x110>
 80163ce:	9207      	str	r2, [sp, #28]
 80163d0:	e014      	b.n	80163fc <_svfiprintf_r+0x110>
 80163d2:	eba0 0308 	sub.w	r3, r0, r8
 80163d6:	fa09 f303 	lsl.w	r3, r9, r3
 80163da:	4313      	orrs	r3, r2
 80163dc:	9304      	str	r3, [sp, #16]
 80163de:	46a2      	mov	sl, r4
 80163e0:	e7d2      	b.n	8016388 <_svfiprintf_r+0x9c>
 80163e2:	9b03      	ldr	r3, [sp, #12]
 80163e4:	1d19      	adds	r1, r3, #4
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	9103      	str	r1, [sp, #12]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	bfbb      	ittet	lt
 80163ee:	425b      	neglt	r3, r3
 80163f0:	f042 0202 	orrlt.w	r2, r2, #2
 80163f4:	9307      	strge	r3, [sp, #28]
 80163f6:	9307      	strlt	r3, [sp, #28]
 80163f8:	bfb8      	it	lt
 80163fa:	9204      	strlt	r2, [sp, #16]
 80163fc:	7823      	ldrb	r3, [r4, #0]
 80163fe:	2b2e      	cmp	r3, #46	; 0x2e
 8016400:	d10c      	bne.n	801641c <_svfiprintf_r+0x130>
 8016402:	7863      	ldrb	r3, [r4, #1]
 8016404:	2b2a      	cmp	r3, #42	; 0x2a
 8016406:	d135      	bne.n	8016474 <_svfiprintf_r+0x188>
 8016408:	9b03      	ldr	r3, [sp, #12]
 801640a:	1d1a      	adds	r2, r3, #4
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	9203      	str	r2, [sp, #12]
 8016410:	2b00      	cmp	r3, #0
 8016412:	bfb8      	it	lt
 8016414:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016418:	3402      	adds	r4, #2
 801641a:	9305      	str	r3, [sp, #20]
 801641c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80164e8 <_svfiprintf_r+0x1fc>
 8016420:	7821      	ldrb	r1, [r4, #0]
 8016422:	2203      	movs	r2, #3
 8016424:	4650      	mov	r0, sl
 8016426:	f7e9 ff0b 	bl	8000240 <memchr>
 801642a:	b140      	cbz	r0, 801643e <_svfiprintf_r+0x152>
 801642c:	2340      	movs	r3, #64	; 0x40
 801642e:	eba0 000a 	sub.w	r0, r0, sl
 8016432:	fa03 f000 	lsl.w	r0, r3, r0
 8016436:	9b04      	ldr	r3, [sp, #16]
 8016438:	4303      	orrs	r3, r0
 801643a:	3401      	adds	r4, #1
 801643c:	9304      	str	r3, [sp, #16]
 801643e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016442:	4826      	ldr	r0, [pc, #152]	; (80164dc <_svfiprintf_r+0x1f0>)
 8016444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016448:	2206      	movs	r2, #6
 801644a:	f7e9 fef9 	bl	8000240 <memchr>
 801644e:	2800      	cmp	r0, #0
 8016450:	d038      	beq.n	80164c4 <_svfiprintf_r+0x1d8>
 8016452:	4b23      	ldr	r3, [pc, #140]	; (80164e0 <_svfiprintf_r+0x1f4>)
 8016454:	bb1b      	cbnz	r3, 801649e <_svfiprintf_r+0x1b2>
 8016456:	9b03      	ldr	r3, [sp, #12]
 8016458:	3307      	adds	r3, #7
 801645a:	f023 0307 	bic.w	r3, r3, #7
 801645e:	3308      	adds	r3, #8
 8016460:	9303      	str	r3, [sp, #12]
 8016462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016464:	4433      	add	r3, r6
 8016466:	9309      	str	r3, [sp, #36]	; 0x24
 8016468:	e767      	b.n	801633a <_svfiprintf_r+0x4e>
 801646a:	fb0c 3202 	mla	r2, ip, r2, r3
 801646e:	460c      	mov	r4, r1
 8016470:	2001      	movs	r0, #1
 8016472:	e7a5      	b.n	80163c0 <_svfiprintf_r+0xd4>
 8016474:	2300      	movs	r3, #0
 8016476:	3401      	adds	r4, #1
 8016478:	9305      	str	r3, [sp, #20]
 801647a:	4619      	mov	r1, r3
 801647c:	f04f 0c0a 	mov.w	ip, #10
 8016480:	4620      	mov	r0, r4
 8016482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016486:	3a30      	subs	r2, #48	; 0x30
 8016488:	2a09      	cmp	r2, #9
 801648a:	d903      	bls.n	8016494 <_svfiprintf_r+0x1a8>
 801648c:	2b00      	cmp	r3, #0
 801648e:	d0c5      	beq.n	801641c <_svfiprintf_r+0x130>
 8016490:	9105      	str	r1, [sp, #20]
 8016492:	e7c3      	b.n	801641c <_svfiprintf_r+0x130>
 8016494:	fb0c 2101 	mla	r1, ip, r1, r2
 8016498:	4604      	mov	r4, r0
 801649a:	2301      	movs	r3, #1
 801649c:	e7f0      	b.n	8016480 <_svfiprintf_r+0x194>
 801649e:	ab03      	add	r3, sp, #12
 80164a0:	9300      	str	r3, [sp, #0]
 80164a2:	462a      	mov	r2, r5
 80164a4:	4b0f      	ldr	r3, [pc, #60]	; (80164e4 <_svfiprintf_r+0x1f8>)
 80164a6:	a904      	add	r1, sp, #16
 80164a8:	4638      	mov	r0, r7
 80164aa:	f3af 8000 	nop.w
 80164ae:	1c42      	adds	r2, r0, #1
 80164b0:	4606      	mov	r6, r0
 80164b2:	d1d6      	bne.n	8016462 <_svfiprintf_r+0x176>
 80164b4:	89ab      	ldrh	r3, [r5, #12]
 80164b6:	065b      	lsls	r3, r3, #25
 80164b8:	f53f af2c 	bmi.w	8016314 <_svfiprintf_r+0x28>
 80164bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164be:	b01d      	add	sp, #116	; 0x74
 80164c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c4:	ab03      	add	r3, sp, #12
 80164c6:	9300      	str	r3, [sp, #0]
 80164c8:	462a      	mov	r2, r5
 80164ca:	4b06      	ldr	r3, [pc, #24]	; (80164e4 <_svfiprintf_r+0x1f8>)
 80164cc:	a904      	add	r1, sp, #16
 80164ce:	4638      	mov	r0, r7
 80164d0:	f000 f9d4 	bl	801687c <_printf_i>
 80164d4:	e7eb      	b.n	80164ae <_svfiprintf_r+0x1c2>
 80164d6:	bf00      	nop
 80164d8:	08017b04 	.word	0x08017b04
 80164dc:	08017b0e 	.word	0x08017b0e
 80164e0:	00000000 	.word	0x00000000
 80164e4:	08016237 	.word	0x08016237
 80164e8:	08017b0a 	.word	0x08017b0a

080164ec <__sfputc_r>:
 80164ec:	6893      	ldr	r3, [r2, #8]
 80164ee:	3b01      	subs	r3, #1
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	b410      	push	{r4}
 80164f4:	6093      	str	r3, [r2, #8]
 80164f6:	da08      	bge.n	801650a <__sfputc_r+0x1e>
 80164f8:	6994      	ldr	r4, [r2, #24]
 80164fa:	42a3      	cmp	r3, r4
 80164fc:	db01      	blt.n	8016502 <__sfputc_r+0x16>
 80164fe:	290a      	cmp	r1, #10
 8016500:	d103      	bne.n	801650a <__sfputc_r+0x1e>
 8016502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016506:	f7ff bb3f 	b.w	8015b88 <__swbuf_r>
 801650a:	6813      	ldr	r3, [r2, #0]
 801650c:	1c58      	adds	r0, r3, #1
 801650e:	6010      	str	r0, [r2, #0]
 8016510:	7019      	strb	r1, [r3, #0]
 8016512:	4608      	mov	r0, r1
 8016514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016518:	4770      	bx	lr

0801651a <__sfputs_r>:
 801651a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801651c:	4606      	mov	r6, r0
 801651e:	460f      	mov	r7, r1
 8016520:	4614      	mov	r4, r2
 8016522:	18d5      	adds	r5, r2, r3
 8016524:	42ac      	cmp	r4, r5
 8016526:	d101      	bne.n	801652c <__sfputs_r+0x12>
 8016528:	2000      	movs	r0, #0
 801652a:	e007      	b.n	801653c <__sfputs_r+0x22>
 801652c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016530:	463a      	mov	r2, r7
 8016532:	4630      	mov	r0, r6
 8016534:	f7ff ffda 	bl	80164ec <__sfputc_r>
 8016538:	1c43      	adds	r3, r0, #1
 801653a:	d1f3      	bne.n	8016524 <__sfputs_r+0xa>
 801653c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016540 <_vfiprintf_r>:
 8016540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016544:	460d      	mov	r5, r1
 8016546:	b09d      	sub	sp, #116	; 0x74
 8016548:	4614      	mov	r4, r2
 801654a:	4698      	mov	r8, r3
 801654c:	4606      	mov	r6, r0
 801654e:	b118      	cbz	r0, 8016558 <_vfiprintf_r+0x18>
 8016550:	6983      	ldr	r3, [r0, #24]
 8016552:	b90b      	cbnz	r3, 8016558 <_vfiprintf_r+0x18>
 8016554:	f7ff fd1c 	bl	8015f90 <__sinit>
 8016558:	4b89      	ldr	r3, [pc, #548]	; (8016780 <_vfiprintf_r+0x240>)
 801655a:	429d      	cmp	r5, r3
 801655c:	d11b      	bne.n	8016596 <_vfiprintf_r+0x56>
 801655e:	6875      	ldr	r5, [r6, #4]
 8016560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016562:	07d9      	lsls	r1, r3, #31
 8016564:	d405      	bmi.n	8016572 <_vfiprintf_r+0x32>
 8016566:	89ab      	ldrh	r3, [r5, #12]
 8016568:	059a      	lsls	r2, r3, #22
 801656a:	d402      	bmi.n	8016572 <_vfiprintf_r+0x32>
 801656c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801656e:	f7ff fdbf 	bl	80160f0 <__retarget_lock_acquire_recursive>
 8016572:	89ab      	ldrh	r3, [r5, #12]
 8016574:	071b      	lsls	r3, r3, #28
 8016576:	d501      	bpl.n	801657c <_vfiprintf_r+0x3c>
 8016578:	692b      	ldr	r3, [r5, #16]
 801657a:	b9eb      	cbnz	r3, 80165b8 <_vfiprintf_r+0x78>
 801657c:	4629      	mov	r1, r5
 801657e:	4630      	mov	r0, r6
 8016580:	f7ff fb54 	bl	8015c2c <__swsetup_r>
 8016584:	b1c0      	cbz	r0, 80165b8 <_vfiprintf_r+0x78>
 8016586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016588:	07dc      	lsls	r4, r3, #31
 801658a:	d50e      	bpl.n	80165aa <_vfiprintf_r+0x6a>
 801658c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016590:	b01d      	add	sp, #116	; 0x74
 8016592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016596:	4b7b      	ldr	r3, [pc, #492]	; (8016784 <_vfiprintf_r+0x244>)
 8016598:	429d      	cmp	r5, r3
 801659a:	d101      	bne.n	80165a0 <_vfiprintf_r+0x60>
 801659c:	68b5      	ldr	r5, [r6, #8]
 801659e:	e7df      	b.n	8016560 <_vfiprintf_r+0x20>
 80165a0:	4b79      	ldr	r3, [pc, #484]	; (8016788 <_vfiprintf_r+0x248>)
 80165a2:	429d      	cmp	r5, r3
 80165a4:	bf08      	it	eq
 80165a6:	68f5      	ldreq	r5, [r6, #12]
 80165a8:	e7da      	b.n	8016560 <_vfiprintf_r+0x20>
 80165aa:	89ab      	ldrh	r3, [r5, #12]
 80165ac:	0598      	lsls	r0, r3, #22
 80165ae:	d4ed      	bmi.n	801658c <_vfiprintf_r+0x4c>
 80165b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80165b2:	f7ff fd9e 	bl	80160f2 <__retarget_lock_release_recursive>
 80165b6:	e7e9      	b.n	801658c <_vfiprintf_r+0x4c>
 80165b8:	2300      	movs	r3, #0
 80165ba:	9309      	str	r3, [sp, #36]	; 0x24
 80165bc:	2320      	movs	r3, #32
 80165be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80165c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80165c6:	2330      	movs	r3, #48	; 0x30
 80165c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801678c <_vfiprintf_r+0x24c>
 80165cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165d0:	f04f 0901 	mov.w	r9, #1
 80165d4:	4623      	mov	r3, r4
 80165d6:	469a      	mov	sl, r3
 80165d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165dc:	b10a      	cbz	r2, 80165e2 <_vfiprintf_r+0xa2>
 80165de:	2a25      	cmp	r2, #37	; 0x25
 80165e0:	d1f9      	bne.n	80165d6 <_vfiprintf_r+0x96>
 80165e2:	ebba 0b04 	subs.w	fp, sl, r4
 80165e6:	d00b      	beq.n	8016600 <_vfiprintf_r+0xc0>
 80165e8:	465b      	mov	r3, fp
 80165ea:	4622      	mov	r2, r4
 80165ec:	4629      	mov	r1, r5
 80165ee:	4630      	mov	r0, r6
 80165f0:	f7ff ff93 	bl	801651a <__sfputs_r>
 80165f4:	3001      	adds	r0, #1
 80165f6:	f000 80aa 	beq.w	801674e <_vfiprintf_r+0x20e>
 80165fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165fc:	445a      	add	r2, fp
 80165fe:	9209      	str	r2, [sp, #36]	; 0x24
 8016600:	f89a 3000 	ldrb.w	r3, [sl]
 8016604:	2b00      	cmp	r3, #0
 8016606:	f000 80a2 	beq.w	801674e <_vfiprintf_r+0x20e>
 801660a:	2300      	movs	r3, #0
 801660c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016614:	f10a 0a01 	add.w	sl, sl, #1
 8016618:	9304      	str	r3, [sp, #16]
 801661a:	9307      	str	r3, [sp, #28]
 801661c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016620:	931a      	str	r3, [sp, #104]	; 0x68
 8016622:	4654      	mov	r4, sl
 8016624:	2205      	movs	r2, #5
 8016626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801662a:	4858      	ldr	r0, [pc, #352]	; (801678c <_vfiprintf_r+0x24c>)
 801662c:	f7e9 fe08 	bl	8000240 <memchr>
 8016630:	9a04      	ldr	r2, [sp, #16]
 8016632:	b9d8      	cbnz	r0, 801666c <_vfiprintf_r+0x12c>
 8016634:	06d1      	lsls	r1, r2, #27
 8016636:	bf44      	itt	mi
 8016638:	2320      	movmi	r3, #32
 801663a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801663e:	0713      	lsls	r3, r2, #28
 8016640:	bf44      	itt	mi
 8016642:	232b      	movmi	r3, #43	; 0x2b
 8016644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016648:	f89a 3000 	ldrb.w	r3, [sl]
 801664c:	2b2a      	cmp	r3, #42	; 0x2a
 801664e:	d015      	beq.n	801667c <_vfiprintf_r+0x13c>
 8016650:	9a07      	ldr	r2, [sp, #28]
 8016652:	4654      	mov	r4, sl
 8016654:	2000      	movs	r0, #0
 8016656:	f04f 0c0a 	mov.w	ip, #10
 801665a:	4621      	mov	r1, r4
 801665c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016660:	3b30      	subs	r3, #48	; 0x30
 8016662:	2b09      	cmp	r3, #9
 8016664:	d94e      	bls.n	8016704 <_vfiprintf_r+0x1c4>
 8016666:	b1b0      	cbz	r0, 8016696 <_vfiprintf_r+0x156>
 8016668:	9207      	str	r2, [sp, #28]
 801666a:	e014      	b.n	8016696 <_vfiprintf_r+0x156>
 801666c:	eba0 0308 	sub.w	r3, r0, r8
 8016670:	fa09 f303 	lsl.w	r3, r9, r3
 8016674:	4313      	orrs	r3, r2
 8016676:	9304      	str	r3, [sp, #16]
 8016678:	46a2      	mov	sl, r4
 801667a:	e7d2      	b.n	8016622 <_vfiprintf_r+0xe2>
 801667c:	9b03      	ldr	r3, [sp, #12]
 801667e:	1d19      	adds	r1, r3, #4
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	9103      	str	r1, [sp, #12]
 8016684:	2b00      	cmp	r3, #0
 8016686:	bfbb      	ittet	lt
 8016688:	425b      	neglt	r3, r3
 801668a:	f042 0202 	orrlt.w	r2, r2, #2
 801668e:	9307      	strge	r3, [sp, #28]
 8016690:	9307      	strlt	r3, [sp, #28]
 8016692:	bfb8      	it	lt
 8016694:	9204      	strlt	r2, [sp, #16]
 8016696:	7823      	ldrb	r3, [r4, #0]
 8016698:	2b2e      	cmp	r3, #46	; 0x2e
 801669a:	d10c      	bne.n	80166b6 <_vfiprintf_r+0x176>
 801669c:	7863      	ldrb	r3, [r4, #1]
 801669e:	2b2a      	cmp	r3, #42	; 0x2a
 80166a0:	d135      	bne.n	801670e <_vfiprintf_r+0x1ce>
 80166a2:	9b03      	ldr	r3, [sp, #12]
 80166a4:	1d1a      	adds	r2, r3, #4
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	9203      	str	r2, [sp, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	bfb8      	it	lt
 80166ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80166b2:	3402      	adds	r4, #2
 80166b4:	9305      	str	r3, [sp, #20]
 80166b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801679c <_vfiprintf_r+0x25c>
 80166ba:	7821      	ldrb	r1, [r4, #0]
 80166bc:	2203      	movs	r2, #3
 80166be:	4650      	mov	r0, sl
 80166c0:	f7e9 fdbe 	bl	8000240 <memchr>
 80166c4:	b140      	cbz	r0, 80166d8 <_vfiprintf_r+0x198>
 80166c6:	2340      	movs	r3, #64	; 0x40
 80166c8:	eba0 000a 	sub.w	r0, r0, sl
 80166cc:	fa03 f000 	lsl.w	r0, r3, r0
 80166d0:	9b04      	ldr	r3, [sp, #16]
 80166d2:	4303      	orrs	r3, r0
 80166d4:	3401      	adds	r4, #1
 80166d6:	9304      	str	r3, [sp, #16]
 80166d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166dc:	482c      	ldr	r0, [pc, #176]	; (8016790 <_vfiprintf_r+0x250>)
 80166de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166e2:	2206      	movs	r2, #6
 80166e4:	f7e9 fdac 	bl	8000240 <memchr>
 80166e8:	2800      	cmp	r0, #0
 80166ea:	d03f      	beq.n	801676c <_vfiprintf_r+0x22c>
 80166ec:	4b29      	ldr	r3, [pc, #164]	; (8016794 <_vfiprintf_r+0x254>)
 80166ee:	bb1b      	cbnz	r3, 8016738 <_vfiprintf_r+0x1f8>
 80166f0:	9b03      	ldr	r3, [sp, #12]
 80166f2:	3307      	adds	r3, #7
 80166f4:	f023 0307 	bic.w	r3, r3, #7
 80166f8:	3308      	adds	r3, #8
 80166fa:	9303      	str	r3, [sp, #12]
 80166fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166fe:	443b      	add	r3, r7
 8016700:	9309      	str	r3, [sp, #36]	; 0x24
 8016702:	e767      	b.n	80165d4 <_vfiprintf_r+0x94>
 8016704:	fb0c 3202 	mla	r2, ip, r2, r3
 8016708:	460c      	mov	r4, r1
 801670a:	2001      	movs	r0, #1
 801670c:	e7a5      	b.n	801665a <_vfiprintf_r+0x11a>
 801670e:	2300      	movs	r3, #0
 8016710:	3401      	adds	r4, #1
 8016712:	9305      	str	r3, [sp, #20]
 8016714:	4619      	mov	r1, r3
 8016716:	f04f 0c0a 	mov.w	ip, #10
 801671a:	4620      	mov	r0, r4
 801671c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016720:	3a30      	subs	r2, #48	; 0x30
 8016722:	2a09      	cmp	r2, #9
 8016724:	d903      	bls.n	801672e <_vfiprintf_r+0x1ee>
 8016726:	2b00      	cmp	r3, #0
 8016728:	d0c5      	beq.n	80166b6 <_vfiprintf_r+0x176>
 801672a:	9105      	str	r1, [sp, #20]
 801672c:	e7c3      	b.n	80166b6 <_vfiprintf_r+0x176>
 801672e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016732:	4604      	mov	r4, r0
 8016734:	2301      	movs	r3, #1
 8016736:	e7f0      	b.n	801671a <_vfiprintf_r+0x1da>
 8016738:	ab03      	add	r3, sp, #12
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	462a      	mov	r2, r5
 801673e:	4b16      	ldr	r3, [pc, #88]	; (8016798 <_vfiprintf_r+0x258>)
 8016740:	a904      	add	r1, sp, #16
 8016742:	4630      	mov	r0, r6
 8016744:	f3af 8000 	nop.w
 8016748:	4607      	mov	r7, r0
 801674a:	1c78      	adds	r0, r7, #1
 801674c:	d1d6      	bne.n	80166fc <_vfiprintf_r+0x1bc>
 801674e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016750:	07d9      	lsls	r1, r3, #31
 8016752:	d405      	bmi.n	8016760 <_vfiprintf_r+0x220>
 8016754:	89ab      	ldrh	r3, [r5, #12]
 8016756:	059a      	lsls	r2, r3, #22
 8016758:	d402      	bmi.n	8016760 <_vfiprintf_r+0x220>
 801675a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801675c:	f7ff fcc9 	bl	80160f2 <__retarget_lock_release_recursive>
 8016760:	89ab      	ldrh	r3, [r5, #12]
 8016762:	065b      	lsls	r3, r3, #25
 8016764:	f53f af12 	bmi.w	801658c <_vfiprintf_r+0x4c>
 8016768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801676a:	e711      	b.n	8016590 <_vfiprintf_r+0x50>
 801676c:	ab03      	add	r3, sp, #12
 801676e:	9300      	str	r3, [sp, #0]
 8016770:	462a      	mov	r2, r5
 8016772:	4b09      	ldr	r3, [pc, #36]	; (8016798 <_vfiprintf_r+0x258>)
 8016774:	a904      	add	r1, sp, #16
 8016776:	4630      	mov	r0, r6
 8016778:	f000 f880 	bl	801687c <_printf_i>
 801677c:	e7e4      	b.n	8016748 <_vfiprintf_r+0x208>
 801677e:	bf00      	nop
 8016780:	08017ac4 	.word	0x08017ac4
 8016784:	08017ae4 	.word	0x08017ae4
 8016788:	08017aa4 	.word	0x08017aa4
 801678c:	08017b04 	.word	0x08017b04
 8016790:	08017b0e 	.word	0x08017b0e
 8016794:	00000000 	.word	0x00000000
 8016798:	0801651b 	.word	0x0801651b
 801679c:	08017b0a 	.word	0x08017b0a

080167a0 <_printf_common>:
 80167a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167a4:	4616      	mov	r6, r2
 80167a6:	4699      	mov	r9, r3
 80167a8:	688a      	ldr	r2, [r1, #8]
 80167aa:	690b      	ldr	r3, [r1, #16]
 80167ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80167b0:	4293      	cmp	r3, r2
 80167b2:	bfb8      	it	lt
 80167b4:	4613      	movlt	r3, r2
 80167b6:	6033      	str	r3, [r6, #0]
 80167b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80167bc:	4607      	mov	r7, r0
 80167be:	460c      	mov	r4, r1
 80167c0:	b10a      	cbz	r2, 80167c6 <_printf_common+0x26>
 80167c2:	3301      	adds	r3, #1
 80167c4:	6033      	str	r3, [r6, #0]
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	0699      	lsls	r1, r3, #26
 80167ca:	bf42      	ittt	mi
 80167cc:	6833      	ldrmi	r3, [r6, #0]
 80167ce:	3302      	addmi	r3, #2
 80167d0:	6033      	strmi	r3, [r6, #0]
 80167d2:	6825      	ldr	r5, [r4, #0]
 80167d4:	f015 0506 	ands.w	r5, r5, #6
 80167d8:	d106      	bne.n	80167e8 <_printf_common+0x48>
 80167da:	f104 0a19 	add.w	sl, r4, #25
 80167de:	68e3      	ldr	r3, [r4, #12]
 80167e0:	6832      	ldr	r2, [r6, #0]
 80167e2:	1a9b      	subs	r3, r3, r2
 80167e4:	42ab      	cmp	r3, r5
 80167e6:	dc26      	bgt.n	8016836 <_printf_common+0x96>
 80167e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80167ec:	1e13      	subs	r3, r2, #0
 80167ee:	6822      	ldr	r2, [r4, #0]
 80167f0:	bf18      	it	ne
 80167f2:	2301      	movne	r3, #1
 80167f4:	0692      	lsls	r2, r2, #26
 80167f6:	d42b      	bmi.n	8016850 <_printf_common+0xb0>
 80167f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80167fc:	4649      	mov	r1, r9
 80167fe:	4638      	mov	r0, r7
 8016800:	47c0      	blx	r8
 8016802:	3001      	adds	r0, #1
 8016804:	d01e      	beq.n	8016844 <_printf_common+0xa4>
 8016806:	6823      	ldr	r3, [r4, #0]
 8016808:	68e5      	ldr	r5, [r4, #12]
 801680a:	6832      	ldr	r2, [r6, #0]
 801680c:	f003 0306 	and.w	r3, r3, #6
 8016810:	2b04      	cmp	r3, #4
 8016812:	bf08      	it	eq
 8016814:	1aad      	subeq	r5, r5, r2
 8016816:	68a3      	ldr	r3, [r4, #8]
 8016818:	6922      	ldr	r2, [r4, #16]
 801681a:	bf0c      	ite	eq
 801681c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016820:	2500      	movne	r5, #0
 8016822:	4293      	cmp	r3, r2
 8016824:	bfc4      	itt	gt
 8016826:	1a9b      	subgt	r3, r3, r2
 8016828:	18ed      	addgt	r5, r5, r3
 801682a:	2600      	movs	r6, #0
 801682c:	341a      	adds	r4, #26
 801682e:	42b5      	cmp	r5, r6
 8016830:	d11a      	bne.n	8016868 <_printf_common+0xc8>
 8016832:	2000      	movs	r0, #0
 8016834:	e008      	b.n	8016848 <_printf_common+0xa8>
 8016836:	2301      	movs	r3, #1
 8016838:	4652      	mov	r2, sl
 801683a:	4649      	mov	r1, r9
 801683c:	4638      	mov	r0, r7
 801683e:	47c0      	blx	r8
 8016840:	3001      	adds	r0, #1
 8016842:	d103      	bne.n	801684c <_printf_common+0xac>
 8016844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801684c:	3501      	adds	r5, #1
 801684e:	e7c6      	b.n	80167de <_printf_common+0x3e>
 8016850:	18e1      	adds	r1, r4, r3
 8016852:	1c5a      	adds	r2, r3, #1
 8016854:	2030      	movs	r0, #48	; 0x30
 8016856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801685a:	4422      	add	r2, r4
 801685c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016864:	3302      	adds	r3, #2
 8016866:	e7c7      	b.n	80167f8 <_printf_common+0x58>
 8016868:	2301      	movs	r3, #1
 801686a:	4622      	mov	r2, r4
 801686c:	4649      	mov	r1, r9
 801686e:	4638      	mov	r0, r7
 8016870:	47c0      	blx	r8
 8016872:	3001      	adds	r0, #1
 8016874:	d0e6      	beq.n	8016844 <_printf_common+0xa4>
 8016876:	3601      	adds	r6, #1
 8016878:	e7d9      	b.n	801682e <_printf_common+0x8e>
	...

0801687c <_printf_i>:
 801687c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016880:	7e0f      	ldrb	r7, [r1, #24]
 8016882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016884:	2f78      	cmp	r7, #120	; 0x78
 8016886:	4691      	mov	r9, r2
 8016888:	4680      	mov	r8, r0
 801688a:	460c      	mov	r4, r1
 801688c:	469a      	mov	sl, r3
 801688e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016892:	d807      	bhi.n	80168a4 <_printf_i+0x28>
 8016894:	2f62      	cmp	r7, #98	; 0x62
 8016896:	d80a      	bhi.n	80168ae <_printf_i+0x32>
 8016898:	2f00      	cmp	r7, #0
 801689a:	f000 80d8 	beq.w	8016a4e <_printf_i+0x1d2>
 801689e:	2f58      	cmp	r7, #88	; 0x58
 80168a0:	f000 80a3 	beq.w	80169ea <_printf_i+0x16e>
 80168a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80168a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80168ac:	e03a      	b.n	8016924 <_printf_i+0xa8>
 80168ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80168b2:	2b15      	cmp	r3, #21
 80168b4:	d8f6      	bhi.n	80168a4 <_printf_i+0x28>
 80168b6:	a101      	add	r1, pc, #4	; (adr r1, 80168bc <_printf_i+0x40>)
 80168b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168bc:	08016915 	.word	0x08016915
 80168c0:	08016929 	.word	0x08016929
 80168c4:	080168a5 	.word	0x080168a5
 80168c8:	080168a5 	.word	0x080168a5
 80168cc:	080168a5 	.word	0x080168a5
 80168d0:	080168a5 	.word	0x080168a5
 80168d4:	08016929 	.word	0x08016929
 80168d8:	080168a5 	.word	0x080168a5
 80168dc:	080168a5 	.word	0x080168a5
 80168e0:	080168a5 	.word	0x080168a5
 80168e4:	080168a5 	.word	0x080168a5
 80168e8:	08016a35 	.word	0x08016a35
 80168ec:	08016959 	.word	0x08016959
 80168f0:	08016a17 	.word	0x08016a17
 80168f4:	080168a5 	.word	0x080168a5
 80168f8:	080168a5 	.word	0x080168a5
 80168fc:	08016a57 	.word	0x08016a57
 8016900:	080168a5 	.word	0x080168a5
 8016904:	08016959 	.word	0x08016959
 8016908:	080168a5 	.word	0x080168a5
 801690c:	080168a5 	.word	0x080168a5
 8016910:	08016a1f 	.word	0x08016a1f
 8016914:	682b      	ldr	r3, [r5, #0]
 8016916:	1d1a      	adds	r2, r3, #4
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	602a      	str	r2, [r5, #0]
 801691c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016924:	2301      	movs	r3, #1
 8016926:	e0a3      	b.n	8016a70 <_printf_i+0x1f4>
 8016928:	6820      	ldr	r0, [r4, #0]
 801692a:	6829      	ldr	r1, [r5, #0]
 801692c:	0606      	lsls	r6, r0, #24
 801692e:	f101 0304 	add.w	r3, r1, #4
 8016932:	d50a      	bpl.n	801694a <_printf_i+0xce>
 8016934:	680e      	ldr	r6, [r1, #0]
 8016936:	602b      	str	r3, [r5, #0]
 8016938:	2e00      	cmp	r6, #0
 801693a:	da03      	bge.n	8016944 <_printf_i+0xc8>
 801693c:	232d      	movs	r3, #45	; 0x2d
 801693e:	4276      	negs	r6, r6
 8016940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016944:	485e      	ldr	r0, [pc, #376]	; (8016ac0 <_printf_i+0x244>)
 8016946:	230a      	movs	r3, #10
 8016948:	e019      	b.n	801697e <_printf_i+0x102>
 801694a:	680e      	ldr	r6, [r1, #0]
 801694c:	602b      	str	r3, [r5, #0]
 801694e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016952:	bf18      	it	ne
 8016954:	b236      	sxthne	r6, r6
 8016956:	e7ef      	b.n	8016938 <_printf_i+0xbc>
 8016958:	682b      	ldr	r3, [r5, #0]
 801695a:	6820      	ldr	r0, [r4, #0]
 801695c:	1d19      	adds	r1, r3, #4
 801695e:	6029      	str	r1, [r5, #0]
 8016960:	0601      	lsls	r1, r0, #24
 8016962:	d501      	bpl.n	8016968 <_printf_i+0xec>
 8016964:	681e      	ldr	r6, [r3, #0]
 8016966:	e002      	b.n	801696e <_printf_i+0xf2>
 8016968:	0646      	lsls	r6, r0, #25
 801696a:	d5fb      	bpl.n	8016964 <_printf_i+0xe8>
 801696c:	881e      	ldrh	r6, [r3, #0]
 801696e:	4854      	ldr	r0, [pc, #336]	; (8016ac0 <_printf_i+0x244>)
 8016970:	2f6f      	cmp	r7, #111	; 0x6f
 8016972:	bf0c      	ite	eq
 8016974:	2308      	moveq	r3, #8
 8016976:	230a      	movne	r3, #10
 8016978:	2100      	movs	r1, #0
 801697a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801697e:	6865      	ldr	r5, [r4, #4]
 8016980:	60a5      	str	r5, [r4, #8]
 8016982:	2d00      	cmp	r5, #0
 8016984:	bfa2      	ittt	ge
 8016986:	6821      	ldrge	r1, [r4, #0]
 8016988:	f021 0104 	bicge.w	r1, r1, #4
 801698c:	6021      	strge	r1, [r4, #0]
 801698e:	b90e      	cbnz	r6, 8016994 <_printf_i+0x118>
 8016990:	2d00      	cmp	r5, #0
 8016992:	d04d      	beq.n	8016a30 <_printf_i+0x1b4>
 8016994:	4615      	mov	r5, r2
 8016996:	fbb6 f1f3 	udiv	r1, r6, r3
 801699a:	fb03 6711 	mls	r7, r3, r1, r6
 801699e:	5dc7      	ldrb	r7, [r0, r7]
 80169a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80169a4:	4637      	mov	r7, r6
 80169a6:	42bb      	cmp	r3, r7
 80169a8:	460e      	mov	r6, r1
 80169aa:	d9f4      	bls.n	8016996 <_printf_i+0x11a>
 80169ac:	2b08      	cmp	r3, #8
 80169ae:	d10b      	bne.n	80169c8 <_printf_i+0x14c>
 80169b0:	6823      	ldr	r3, [r4, #0]
 80169b2:	07de      	lsls	r6, r3, #31
 80169b4:	d508      	bpl.n	80169c8 <_printf_i+0x14c>
 80169b6:	6923      	ldr	r3, [r4, #16]
 80169b8:	6861      	ldr	r1, [r4, #4]
 80169ba:	4299      	cmp	r1, r3
 80169bc:	bfde      	ittt	le
 80169be:	2330      	movle	r3, #48	; 0x30
 80169c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80169c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80169c8:	1b52      	subs	r2, r2, r5
 80169ca:	6122      	str	r2, [r4, #16]
 80169cc:	f8cd a000 	str.w	sl, [sp]
 80169d0:	464b      	mov	r3, r9
 80169d2:	aa03      	add	r2, sp, #12
 80169d4:	4621      	mov	r1, r4
 80169d6:	4640      	mov	r0, r8
 80169d8:	f7ff fee2 	bl	80167a0 <_printf_common>
 80169dc:	3001      	adds	r0, #1
 80169de:	d14c      	bne.n	8016a7a <_printf_i+0x1fe>
 80169e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169e4:	b004      	add	sp, #16
 80169e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169ea:	4835      	ldr	r0, [pc, #212]	; (8016ac0 <_printf_i+0x244>)
 80169ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80169f0:	6829      	ldr	r1, [r5, #0]
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80169f8:	6029      	str	r1, [r5, #0]
 80169fa:	061d      	lsls	r5, r3, #24
 80169fc:	d514      	bpl.n	8016a28 <_printf_i+0x1ac>
 80169fe:	07df      	lsls	r7, r3, #31
 8016a00:	bf44      	itt	mi
 8016a02:	f043 0320 	orrmi.w	r3, r3, #32
 8016a06:	6023      	strmi	r3, [r4, #0]
 8016a08:	b91e      	cbnz	r6, 8016a12 <_printf_i+0x196>
 8016a0a:	6823      	ldr	r3, [r4, #0]
 8016a0c:	f023 0320 	bic.w	r3, r3, #32
 8016a10:	6023      	str	r3, [r4, #0]
 8016a12:	2310      	movs	r3, #16
 8016a14:	e7b0      	b.n	8016978 <_printf_i+0xfc>
 8016a16:	6823      	ldr	r3, [r4, #0]
 8016a18:	f043 0320 	orr.w	r3, r3, #32
 8016a1c:	6023      	str	r3, [r4, #0]
 8016a1e:	2378      	movs	r3, #120	; 0x78
 8016a20:	4828      	ldr	r0, [pc, #160]	; (8016ac4 <_printf_i+0x248>)
 8016a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016a26:	e7e3      	b.n	80169f0 <_printf_i+0x174>
 8016a28:	0659      	lsls	r1, r3, #25
 8016a2a:	bf48      	it	mi
 8016a2c:	b2b6      	uxthmi	r6, r6
 8016a2e:	e7e6      	b.n	80169fe <_printf_i+0x182>
 8016a30:	4615      	mov	r5, r2
 8016a32:	e7bb      	b.n	80169ac <_printf_i+0x130>
 8016a34:	682b      	ldr	r3, [r5, #0]
 8016a36:	6826      	ldr	r6, [r4, #0]
 8016a38:	6961      	ldr	r1, [r4, #20]
 8016a3a:	1d18      	adds	r0, r3, #4
 8016a3c:	6028      	str	r0, [r5, #0]
 8016a3e:	0635      	lsls	r5, r6, #24
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	d501      	bpl.n	8016a48 <_printf_i+0x1cc>
 8016a44:	6019      	str	r1, [r3, #0]
 8016a46:	e002      	b.n	8016a4e <_printf_i+0x1d2>
 8016a48:	0670      	lsls	r0, r6, #25
 8016a4a:	d5fb      	bpl.n	8016a44 <_printf_i+0x1c8>
 8016a4c:	8019      	strh	r1, [r3, #0]
 8016a4e:	2300      	movs	r3, #0
 8016a50:	6123      	str	r3, [r4, #16]
 8016a52:	4615      	mov	r5, r2
 8016a54:	e7ba      	b.n	80169cc <_printf_i+0x150>
 8016a56:	682b      	ldr	r3, [r5, #0]
 8016a58:	1d1a      	adds	r2, r3, #4
 8016a5a:	602a      	str	r2, [r5, #0]
 8016a5c:	681d      	ldr	r5, [r3, #0]
 8016a5e:	6862      	ldr	r2, [r4, #4]
 8016a60:	2100      	movs	r1, #0
 8016a62:	4628      	mov	r0, r5
 8016a64:	f7e9 fbec 	bl	8000240 <memchr>
 8016a68:	b108      	cbz	r0, 8016a6e <_printf_i+0x1f2>
 8016a6a:	1b40      	subs	r0, r0, r5
 8016a6c:	6060      	str	r0, [r4, #4]
 8016a6e:	6863      	ldr	r3, [r4, #4]
 8016a70:	6123      	str	r3, [r4, #16]
 8016a72:	2300      	movs	r3, #0
 8016a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a78:	e7a8      	b.n	80169cc <_printf_i+0x150>
 8016a7a:	6923      	ldr	r3, [r4, #16]
 8016a7c:	462a      	mov	r2, r5
 8016a7e:	4649      	mov	r1, r9
 8016a80:	4640      	mov	r0, r8
 8016a82:	47d0      	blx	sl
 8016a84:	3001      	adds	r0, #1
 8016a86:	d0ab      	beq.n	80169e0 <_printf_i+0x164>
 8016a88:	6823      	ldr	r3, [r4, #0]
 8016a8a:	079b      	lsls	r3, r3, #30
 8016a8c:	d413      	bmi.n	8016ab6 <_printf_i+0x23a>
 8016a8e:	68e0      	ldr	r0, [r4, #12]
 8016a90:	9b03      	ldr	r3, [sp, #12]
 8016a92:	4298      	cmp	r0, r3
 8016a94:	bfb8      	it	lt
 8016a96:	4618      	movlt	r0, r3
 8016a98:	e7a4      	b.n	80169e4 <_printf_i+0x168>
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	4632      	mov	r2, r6
 8016a9e:	4649      	mov	r1, r9
 8016aa0:	4640      	mov	r0, r8
 8016aa2:	47d0      	blx	sl
 8016aa4:	3001      	adds	r0, #1
 8016aa6:	d09b      	beq.n	80169e0 <_printf_i+0x164>
 8016aa8:	3501      	adds	r5, #1
 8016aaa:	68e3      	ldr	r3, [r4, #12]
 8016aac:	9903      	ldr	r1, [sp, #12]
 8016aae:	1a5b      	subs	r3, r3, r1
 8016ab0:	42ab      	cmp	r3, r5
 8016ab2:	dcf2      	bgt.n	8016a9a <_printf_i+0x21e>
 8016ab4:	e7eb      	b.n	8016a8e <_printf_i+0x212>
 8016ab6:	2500      	movs	r5, #0
 8016ab8:	f104 0619 	add.w	r6, r4, #25
 8016abc:	e7f5      	b.n	8016aaa <_printf_i+0x22e>
 8016abe:	bf00      	nop
 8016ac0:	08017b15 	.word	0x08017b15
 8016ac4:	08017b26 	.word	0x08017b26

08016ac8 <__sread>:
 8016ac8:	b510      	push	{r4, lr}
 8016aca:	460c      	mov	r4, r1
 8016acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad0:	f000 f8a4 	bl	8016c1c <_read_r>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	bfab      	itete	ge
 8016ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ada:	89a3      	ldrhlt	r3, [r4, #12]
 8016adc:	181b      	addge	r3, r3, r0
 8016ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ae2:	bfac      	ite	ge
 8016ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ae6:	81a3      	strhlt	r3, [r4, #12]
 8016ae8:	bd10      	pop	{r4, pc}

08016aea <__swrite>:
 8016aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aee:	461f      	mov	r7, r3
 8016af0:	898b      	ldrh	r3, [r1, #12]
 8016af2:	05db      	lsls	r3, r3, #23
 8016af4:	4605      	mov	r5, r0
 8016af6:	460c      	mov	r4, r1
 8016af8:	4616      	mov	r6, r2
 8016afa:	d505      	bpl.n	8016b08 <__swrite+0x1e>
 8016afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b00:	2302      	movs	r3, #2
 8016b02:	2200      	movs	r2, #0
 8016b04:	f000 f870 	bl	8016be8 <_lseek_r>
 8016b08:	89a3      	ldrh	r3, [r4, #12]
 8016b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b12:	81a3      	strh	r3, [r4, #12]
 8016b14:	4632      	mov	r2, r6
 8016b16:	463b      	mov	r3, r7
 8016b18:	4628      	mov	r0, r5
 8016b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b1e:	f000 b817 	b.w	8016b50 <_write_r>

08016b22 <__sseek>:
 8016b22:	b510      	push	{r4, lr}
 8016b24:	460c      	mov	r4, r1
 8016b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b2a:	f000 f85d 	bl	8016be8 <_lseek_r>
 8016b2e:	1c43      	adds	r3, r0, #1
 8016b30:	89a3      	ldrh	r3, [r4, #12]
 8016b32:	bf15      	itete	ne
 8016b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b3e:	81a3      	strheq	r3, [r4, #12]
 8016b40:	bf18      	it	ne
 8016b42:	81a3      	strhne	r3, [r4, #12]
 8016b44:	bd10      	pop	{r4, pc}

08016b46 <__sclose>:
 8016b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b4a:	f000 b81b 	b.w	8016b84 <_close_r>
	...

08016b50 <_write_r>:
 8016b50:	b538      	push	{r3, r4, r5, lr}
 8016b52:	4d07      	ldr	r5, [pc, #28]	; (8016b70 <_write_r+0x20>)
 8016b54:	4604      	mov	r4, r0
 8016b56:	4608      	mov	r0, r1
 8016b58:	4611      	mov	r1, r2
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	602a      	str	r2, [r5, #0]
 8016b5e:	461a      	mov	r2, r3
 8016b60:	f7eb fdc1 	bl	80026e6 <_write>
 8016b64:	1c43      	adds	r3, r0, #1
 8016b66:	d102      	bne.n	8016b6e <_write_r+0x1e>
 8016b68:	682b      	ldr	r3, [r5, #0]
 8016b6a:	b103      	cbz	r3, 8016b6e <_write_r+0x1e>
 8016b6c:	6023      	str	r3, [r4, #0]
 8016b6e:	bd38      	pop	{r3, r4, r5, pc}
 8016b70:	2000c1ec 	.word	0x2000c1ec

08016b74 <abort>:
 8016b74:	b508      	push	{r3, lr}
 8016b76:	2006      	movs	r0, #6
 8016b78:	f000 f88a 	bl	8016c90 <raise>
 8016b7c:	2001      	movs	r0, #1
 8016b7e:	f7eb fd8b 	bl	8002698 <_exit>
	...

08016b84 <_close_r>:
 8016b84:	b538      	push	{r3, r4, r5, lr}
 8016b86:	4d06      	ldr	r5, [pc, #24]	; (8016ba0 <_close_r+0x1c>)
 8016b88:	2300      	movs	r3, #0
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	4608      	mov	r0, r1
 8016b8e:	602b      	str	r3, [r5, #0]
 8016b90:	f7eb fdc5 	bl	800271e <_close>
 8016b94:	1c43      	adds	r3, r0, #1
 8016b96:	d102      	bne.n	8016b9e <_close_r+0x1a>
 8016b98:	682b      	ldr	r3, [r5, #0]
 8016b9a:	b103      	cbz	r3, 8016b9e <_close_r+0x1a>
 8016b9c:	6023      	str	r3, [r4, #0]
 8016b9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ba0:	2000c1ec 	.word	0x2000c1ec

08016ba4 <_fstat_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	4d07      	ldr	r5, [pc, #28]	; (8016bc4 <_fstat_r+0x20>)
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4604      	mov	r4, r0
 8016bac:	4608      	mov	r0, r1
 8016bae:	4611      	mov	r1, r2
 8016bb0:	602b      	str	r3, [r5, #0]
 8016bb2:	f7eb fdc0 	bl	8002736 <_fstat>
 8016bb6:	1c43      	adds	r3, r0, #1
 8016bb8:	d102      	bne.n	8016bc0 <_fstat_r+0x1c>
 8016bba:	682b      	ldr	r3, [r5, #0]
 8016bbc:	b103      	cbz	r3, 8016bc0 <_fstat_r+0x1c>
 8016bbe:	6023      	str	r3, [r4, #0]
 8016bc0:	bd38      	pop	{r3, r4, r5, pc}
 8016bc2:	bf00      	nop
 8016bc4:	2000c1ec 	.word	0x2000c1ec

08016bc8 <_isatty_r>:
 8016bc8:	b538      	push	{r3, r4, r5, lr}
 8016bca:	4d06      	ldr	r5, [pc, #24]	; (8016be4 <_isatty_r+0x1c>)
 8016bcc:	2300      	movs	r3, #0
 8016bce:	4604      	mov	r4, r0
 8016bd0:	4608      	mov	r0, r1
 8016bd2:	602b      	str	r3, [r5, #0]
 8016bd4:	f7eb fdbf 	bl	8002756 <_isatty>
 8016bd8:	1c43      	adds	r3, r0, #1
 8016bda:	d102      	bne.n	8016be2 <_isatty_r+0x1a>
 8016bdc:	682b      	ldr	r3, [r5, #0]
 8016bde:	b103      	cbz	r3, 8016be2 <_isatty_r+0x1a>
 8016be0:	6023      	str	r3, [r4, #0]
 8016be2:	bd38      	pop	{r3, r4, r5, pc}
 8016be4:	2000c1ec 	.word	0x2000c1ec

08016be8 <_lseek_r>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4d07      	ldr	r5, [pc, #28]	; (8016c08 <_lseek_r+0x20>)
 8016bec:	4604      	mov	r4, r0
 8016bee:	4608      	mov	r0, r1
 8016bf0:	4611      	mov	r1, r2
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	602a      	str	r2, [r5, #0]
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	f7eb fdb8 	bl	800276c <_lseek>
 8016bfc:	1c43      	adds	r3, r0, #1
 8016bfe:	d102      	bne.n	8016c06 <_lseek_r+0x1e>
 8016c00:	682b      	ldr	r3, [r5, #0]
 8016c02:	b103      	cbz	r3, 8016c06 <_lseek_r+0x1e>
 8016c04:	6023      	str	r3, [r4, #0]
 8016c06:	bd38      	pop	{r3, r4, r5, pc}
 8016c08:	2000c1ec 	.word	0x2000c1ec

08016c0c <_malloc_usable_size_r>:
 8016c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c10:	1f18      	subs	r0, r3, #4
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	bfbc      	itt	lt
 8016c16:	580b      	ldrlt	r3, [r1, r0]
 8016c18:	18c0      	addlt	r0, r0, r3
 8016c1a:	4770      	bx	lr

08016c1c <_read_r>:
 8016c1c:	b538      	push	{r3, r4, r5, lr}
 8016c1e:	4d07      	ldr	r5, [pc, #28]	; (8016c3c <_read_r+0x20>)
 8016c20:	4604      	mov	r4, r0
 8016c22:	4608      	mov	r0, r1
 8016c24:	4611      	mov	r1, r2
 8016c26:	2200      	movs	r2, #0
 8016c28:	602a      	str	r2, [r5, #0]
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	f7eb fd3e 	bl	80026ac <_read>
 8016c30:	1c43      	adds	r3, r0, #1
 8016c32:	d102      	bne.n	8016c3a <_read_r+0x1e>
 8016c34:	682b      	ldr	r3, [r5, #0]
 8016c36:	b103      	cbz	r3, 8016c3a <_read_r+0x1e>
 8016c38:	6023      	str	r3, [r4, #0]
 8016c3a:	bd38      	pop	{r3, r4, r5, pc}
 8016c3c:	2000c1ec 	.word	0x2000c1ec

08016c40 <_raise_r>:
 8016c40:	291f      	cmp	r1, #31
 8016c42:	b538      	push	{r3, r4, r5, lr}
 8016c44:	4604      	mov	r4, r0
 8016c46:	460d      	mov	r5, r1
 8016c48:	d904      	bls.n	8016c54 <_raise_r+0x14>
 8016c4a:	2316      	movs	r3, #22
 8016c4c:	6003      	str	r3, [r0, #0]
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c52:	bd38      	pop	{r3, r4, r5, pc}
 8016c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c56:	b112      	cbz	r2, 8016c5e <_raise_r+0x1e>
 8016c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016c5c:	b94b      	cbnz	r3, 8016c72 <_raise_r+0x32>
 8016c5e:	4620      	mov	r0, r4
 8016c60:	f000 f830 	bl	8016cc4 <_getpid_r>
 8016c64:	462a      	mov	r2, r5
 8016c66:	4601      	mov	r1, r0
 8016c68:	4620      	mov	r0, r4
 8016c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c6e:	f000 b817 	b.w	8016ca0 <_kill_r>
 8016c72:	2b01      	cmp	r3, #1
 8016c74:	d00a      	beq.n	8016c8c <_raise_r+0x4c>
 8016c76:	1c59      	adds	r1, r3, #1
 8016c78:	d103      	bne.n	8016c82 <_raise_r+0x42>
 8016c7a:	2316      	movs	r3, #22
 8016c7c:	6003      	str	r3, [r0, #0]
 8016c7e:	2001      	movs	r0, #1
 8016c80:	e7e7      	b.n	8016c52 <_raise_r+0x12>
 8016c82:	2400      	movs	r4, #0
 8016c84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016c88:	4628      	mov	r0, r5
 8016c8a:	4798      	blx	r3
 8016c8c:	2000      	movs	r0, #0
 8016c8e:	e7e0      	b.n	8016c52 <_raise_r+0x12>

08016c90 <raise>:
 8016c90:	4b02      	ldr	r3, [pc, #8]	; (8016c9c <raise+0xc>)
 8016c92:	4601      	mov	r1, r0
 8016c94:	6818      	ldr	r0, [r3, #0]
 8016c96:	f7ff bfd3 	b.w	8016c40 <_raise_r>
 8016c9a:	bf00      	nop
 8016c9c:	200000a0 	.word	0x200000a0

08016ca0 <_kill_r>:
 8016ca0:	b538      	push	{r3, r4, r5, lr}
 8016ca2:	4d07      	ldr	r5, [pc, #28]	; (8016cc0 <_kill_r+0x20>)
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	4608      	mov	r0, r1
 8016caa:	4611      	mov	r1, r2
 8016cac:	602b      	str	r3, [r5, #0]
 8016cae:	f7eb fce3 	bl	8002678 <_kill>
 8016cb2:	1c43      	adds	r3, r0, #1
 8016cb4:	d102      	bne.n	8016cbc <_kill_r+0x1c>
 8016cb6:	682b      	ldr	r3, [r5, #0]
 8016cb8:	b103      	cbz	r3, 8016cbc <_kill_r+0x1c>
 8016cba:	6023      	str	r3, [r4, #0]
 8016cbc:	bd38      	pop	{r3, r4, r5, pc}
 8016cbe:	bf00      	nop
 8016cc0:	2000c1ec 	.word	0x2000c1ec

08016cc4 <_getpid_r>:
 8016cc4:	f7eb bcd0 	b.w	8002668 <_getpid>

08016cc8 <_init>:
 8016cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cca:	bf00      	nop
 8016ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cce:	bc08      	pop	{r3}
 8016cd0:	469e      	mov	lr, r3
 8016cd2:	4770      	bx	lr

08016cd4 <_fini>:
 8016cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cd6:	bf00      	nop
 8016cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cda:	bc08      	pop	{r3}
 8016cdc:	469e      	mov	lr, r3
 8016cde:	4770      	bx	lr
